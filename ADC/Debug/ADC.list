
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ddc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f7c  08004f7c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f7c  08004f7c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f7c  08004f7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  08004fe0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004fe0  0000636c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e00  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002670  00000000  00000000  00017e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0001b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015497  00000000  00000000  0001c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001342d  00000000  00000000  0003167f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088da1  00000000  00000000  00044aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  000cd890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d1898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e84 	.word	0x08004e84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004e84 	.word	0x08004e84

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// funcao dma
uint16_t adc_data[1];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b091      	sub	sp, #68	@ 0x44
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000420:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000422:	0018      	movs	r0, r3
 8000424:	f000 ffea 	bl	80013fc <HAL_ADC_Stop_DMA>
    if (hadc->Instance == ADC1) { // Verifica se o callback é do ADC1
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <HAL_ADC_ConvCpltCallback+0x50>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d114      	bne.n	800045c <HAL_ADC_ConvCpltCallback+0x44>
        char msg[50];
        // Formata a mensagem com os valores lidos do ADC
        sprintf(msg, "Leitura Potenciometro com DMA: %u\r\n", adc_data[0]);
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <HAL_ADC_ConvCpltCallback+0x54>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	001a      	movs	r2, r3
 8000438:	490d      	ldr	r1, [pc, #52]	@ (8000470 <HAL_ADC_ConvCpltCallback+0x58>)
 800043a:	240c      	movs	r4, #12
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	f004 f882 	bl	8004548 <siprintf>
        // Envia a mensagem pela UART
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff fe5e 	bl	8000108 <strlen>
 800044c:	0003      	movs	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	23fa      	movs	r3, #250	@ 0xfa
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	1939      	adds	r1, r7, r4
 8000456:	4807      	ldr	r0, [pc, #28]	@ (8000474 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000458:	f003 fb0c 	bl	8003a74 <HAL_UART_Transmit>
    }
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b011      	add	sp, #68	@ 0x44
 8000462:	bd90      	pop	{r4, r7, pc}
 8000464:	20000078 	.word	0x20000078
 8000468:	40012400 	.word	0x40012400
 800046c:	20000218 	.word	0x20000218
 8000470:	08004e9c 	.word	0x08004e9c
 8000474:	20000184 	.word	0x20000184

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 fb87 	bl	8000b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f820 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f000 f98e 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000488:	f000 f96e 	bl	8000768 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800048c:	f000 f91e 	bl	80006cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000490:	f000 f85c 	bl	800054c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000494:	f000 f8c2 	bl	800061c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // Inicia contagem
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <main+0x40>)
 800049a:	0018      	movs	r0, r3
 800049c:	f003 f80e 	bl	80034bc <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1); // Rotina de calibração do ADC
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <main+0x44>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fd5a 	bl	8001f5c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 1);
 80004a8:	4905      	ldr	r1, [pc, #20]	@ (80004c0 <main+0x48>)
 80004aa:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <main+0x44>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 ff16 	bl	80012e0 <HAL_ADC_Start_DMA>
 80004b4:	e7f8      	b.n	80004a8 <main+0x30>
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	20000138 	.word	0x20000138
 80004bc:	20000078 	.word	0x20000078
 80004c0:	20000218 	.word	0x20000218

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08d      	sub	sp, #52	@ 0x34
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2414      	movs	r4, #20
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	231c      	movs	r3, #28
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f004 f857 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	003b      	movs	r3, r7
 80004dc:	0018      	movs	r0, r3
 80004de:	2314      	movs	r3, #20
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f004 f850 	bl	8004588 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2202      	movs	r2, #2
 80004ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2240      	movs	r2, #64	@ 0x40
 8000500:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000502:	193b      	adds	r3, r7, r4
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fb41 	bl	8002b8c <HAL_RCC_OscConfig>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800050e:	f000 f95f 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	003b      	movs	r3, r7
 8000514:	2207      	movs	r2, #7
 8000516:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000524:	003b      	movs	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000530:	003b      	movs	r3, r7
 8000532:	2101      	movs	r1, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f002 fd0d 	bl	8002f54 <HAL_RCC_ClockConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800053e:	f000 f947 	bl	80007d0 <Error_Handler>
  }
}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b00d      	add	sp, #52	@ 0x34
 8000548:	bd90      	pop	{r4, r7, pc}
	...

0800054c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	230c      	movs	r3, #12
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f004 f814 	bl	8004588 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000560:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000562:	4a2c      	ldr	r2, [pc, #176]	@ (8000614 <MX_ADC1_Init+0xc8>)
 8000564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000566:	4b2a      	ldr	r3, [pc, #168]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	05d2      	lsls	r2, r2, #23
 800056c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000574:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <MX_ADC1_Init+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000582:	2204      	movs	r2, #4
 8000584:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000588:	2200      	movs	r2, #0
 800058a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <MX_ADC1_Init+0xc4>)
 800058e:	2200      	movs	r2, #0
 8000590:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000592:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <MX_ADC1_Init+0xc4>)
 8000594:	2201      	movs	r2, #1
 8000596:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <MX_ADC1_Init+0xc4>)
 800059a:	2201      	movs	r2, #1
 800059c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005ac:	222c      	movs	r2, #44	@ 0x2c
 80005ae:	2101      	movs	r1, #1
 80005b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005c6:	223c      	movs	r2, #60	@ 0x3c
 80005c8:	2100      	movs	r1, #0
 80005ca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fcdd 	bl	8000f94 <HAL_ADC_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80005de:	f000 f8f7 	bl	80007d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <MX_ADC1_Init+0xcc>)
 80005e6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_ADC1_Init+0xc4>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 f8a0 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000604:	f000 f8e4 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000078 	.word	0x20000078
 8000614:	40012400 	.word	0x40012400
 8000618:	1c000080 	.word	0x1c000080

0800061c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	2310      	movs	r3, #16
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	2310      	movs	r3, #16
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 ffab 	bl	8004588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	0018      	movs	r0, r3
 8000636:	230c      	movs	r3, #12
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f003 ffa4 	bl	8004588 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000642:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <MX_TIM3_Init+0xa4>)
 8000644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000648:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <MX_TIM3_Init+0xa8>)
 800064a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_TIM3_Init+0xa0>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000654:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <MX_TIM3_Init+0xac>)
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_TIM3_Init+0xa0>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fed0 	bl	800340c <HAL_TIM_Base_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000670:	f000 f8ae 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	2110      	movs	r1, #16
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	0152      	lsls	r2, r2, #5
 800067c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067e:	187a      	adds	r2, r7, r1
 8000680:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_TIM3_Init+0xa0>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 ff5f 	bl	8003548 <HAL_TIM_ConfigClockSource>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800068e:	f000 f89f 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800069e:	1d3a      	adds	r2, r7, #4
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_TIM3_Init+0xa0>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 f92d 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006ae:	f000 f88f 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b008      	add	sp, #32
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000138 	.word	0x20000138
 80006c0:	40000400 	.word	0x40000400
 80006c4:	0000bb7f 	.word	0x0000bb7f
 80006c8:	000003e7 	.word	0x000003e7

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006d2:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <MX_USART1_UART_Init+0x98>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006d8:	22e1      	movs	r2, #225	@ 0xe1
 80006da:	0252      	lsls	r2, r2, #9
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 8000716:	0018      	movs	r0, r3
 8000718:	f003 f956 	bl	80039c8 <HAL_UART_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 f856 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f003 fe2d 	bl	8004388 <HAL_UARTEx_SetTxFifoThreshold>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000732:	f000 f84d 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f003 fe64 	bl	8004408 <HAL_UARTEx_SetRxFifoThreshold>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f844 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <MX_USART1_UART_Init+0x94>)
 800074a:	0018      	movs	r0, r3
 800074c:	f003 fde2 	bl	8004314 <HAL_UARTEx_DisableFifoMode>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f83c 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	20000184 	.word	0x20000184
 8000764:	40013800 	.word	0x40013800

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	639a      	str	r2, [r3, #56]	@ 0x38
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x38>)
 800077c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2009      	movs	r0, #9
 800078c:	f001 fdac 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000790:	2009      	movs	r0, #9
 8000792:	f001 fdbe 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_GPIO_Init+0x28>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_GPIO_Init+0x28>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <MX_GPIO_Init+0x28>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_MspInit+0x50>)
 80007e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <HAL_MspInit+0x50>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x50>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x50>)
 80007fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <HAL_MspInit+0x50>)
 8000800:	2180      	movs	r1, #128	@ 0x80
 8000802:	0549      	lsls	r1, r1, #21
 8000804:	430a      	orrs	r2, r1
 8000806:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_MspInit+0x50>)
 800080a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	055b      	lsls	r3, r3, #21
 8000810:	4013      	ands	r3, r2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000816:	2008      	movs	r0, #8
 8000818:	f000 fa36 	bl	8000c88 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 800081c:	2010      	movs	r0, #16
 800081e:	f000 fa33 	bl	8000c88 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b091      	sub	sp, #68	@ 0x44
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	232c      	movs	r3, #44	@ 0x2c
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f003 fea0 	bl	8004588 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	2410      	movs	r4, #16
 800084a:	193b      	adds	r3, r7, r4
 800084c:	0018      	movs	r0, r3
 800084e:	231c      	movs	r3, #28
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f003 fe98 	bl	8004588 <memset>
  if(hadc->Instance==ADC1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a39      	ldr	r2, [pc, #228]	@ (8000944 <HAL_ADC_MspInit+0x114>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d16c      	bne.n	800093c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	01d2      	lsls	r2, r2, #7
 8000868:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fcdc 	bl	8003230 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800087c:	f7ff ffa8 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000880:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 8000882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000884:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	0349      	lsls	r1, r1, #13
 800088a:	430a      	orrs	r2, r1
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40
 800088e:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 8000890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	035b      	lsls	r3, r3, #13
 8000896:	4013      	ands	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 800089e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	430a      	orrs	r2, r1
 80008a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <HAL_ADC_MspInit+0x118>)
 80008aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ac:	2201      	movs	r2, #1
 80008ae:	4013      	ands	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b4:	212c      	movs	r1, #44	@ 0x2c
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2203      	movs	r2, #3
 80008c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	187a      	adds	r2, r7, r1
 80008ca:	23a0      	movs	r3, #160	@ 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fff1 	bl	80028b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000950 <HAL_ADC_MspInit+0x120>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008de:	2205      	movs	r2, #5
 80008e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	0052      	lsls	r2, r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fd1a 	bl	800234c <HAL_DMA_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800091c:	f7ff ff58 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 8000924:	651a      	str	r2, [r3, #80]	@ 0x50
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_ADC_MspInit+0x11c>)
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	200c      	movs	r0, #12
 8000932:	f001 fcd9 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000936:	200c      	movs	r0, #12
 8000938:	f001 fceb 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b011      	add	sp, #68	@ 0x44
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	40012400 	.word	0x40012400
 8000948:	40021000 	.word	0x40021000
 800094c:	200000dc 	.word	0x200000dc
 8000950:	40020008 	.word	0x40020008

08000954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a09      	ldr	r2, [pc, #36]	@ (8000988 <HAL_TIM_Base_MspInit+0x34>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d10b      	bne.n	800097e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_TIM_Base_MspInit+0x38>)
 8000968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_TIM_Base_MspInit+0x38>)
 800096c:	2102      	movs	r1, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_TIM_Base_MspInit+0x38>)
 8000974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000976:	2202      	movs	r2, #2
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40000400 	.word	0x40000400
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b091      	sub	sp, #68	@ 0x44
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	232c      	movs	r3, #44	@ 0x2c
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	0018      	movs	r0, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f003 fdf0 	bl	8004588 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	2410      	movs	r4, #16
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0018      	movs	r0, r3
 80009ae:	231c      	movs	r3, #28
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 fde8 	bl	8004588 <memset>
  if(huart->Instance==USART1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <HAL_UART_MspInit+0xbc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d13f      	bne.n	8000a42 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fc2d 	bl	8003230 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009da:	f7ff fef9 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 80009e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	01c9      	lsls	r1, r1, #7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 80009ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	01db      	lsls	r3, r3, #7
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a12:	212c      	movs	r1, #44	@ 0x2c
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	22c0      	movs	r2, #192	@ 0xc0
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2202      	movs	r2, #2
 8000a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2201      	movs	r2, #1
 8000a32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	23a0      	movs	r3, #160	@ 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 ff3b 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b011      	add	sp, #68	@ 0x44
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f8e8 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <DMA1_Channel1_IRQHandler+0x14>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fdd0 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	200000dc 	.word	0x200000dc

08000aa0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <ADC1_IRQHandler+0x14>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fd1a 	bl	80014e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	20000078 	.word	0x20000078

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f003 fd56 	bl	8004598 <__errno>
 8000aec:	0003      	movs	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	425b      	negs	r3, r3
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	18d2      	adds	r2, r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <_sbrk+0x64>)
 8000b08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b006      	add	sp, #24
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20001800 	.word	0x20001800
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	2000021c 	.word	0x2000021c
 8000b20:	20000370 	.word	0x20000370

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <SystemInit+0x14>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	0512      	lsls	r2, r2, #20
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b40:	f7ff fff0 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b46:	e003      	b.n	8000b50 <LoopCopyDataInit>

08000b48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b4e:	3104      	adds	r1, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b50:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <LoopForever+0xa>)
  ldr r3, =_edata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b58:	d3f6      	bcc.n	8000b48 <CopyDataInit>
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b5c:	e002      	b.n	8000b64 <LoopFillZerobss>

08000b5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b62:	3204      	adds	r2, #4

08000b64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <LoopForever+0x16>)
  cmp r2, r3
 8000b66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b68:	d3f9      	bcc.n	8000b5e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b6a:	f003 fd1b 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff fc83 	bl	8000478 <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   r0, =_estack
 8000b74:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b78:	08004f84 	.word	0x08004f84
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b80:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000b84:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000b88:	2000036c 	.word	0x2000036c

08000b8c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <DMA1_Channel2_3_IRQHandler>

08000b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f80e 	bl	8000bbc <HAL_InitTick>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe16 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <HAL_InitTick+0x88>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d02b      	beq.n	8000c2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_InitTick+0x8c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <HAL_InitTick+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	@ 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff faa3 	bl	800012c <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa9e 	bl	800012c <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fb9d 	bl	8002332 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d112      	bne.n	8000c22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80a      	bhi.n	8000c18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fb6c 	bl	80022e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_InitTick+0x90>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e00d      	b.n	8000c34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e008      	b.n	8000c34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e003      	b.n	8000c34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b005      	add	sp, #20
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	18d2      	adds	r2, r2, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000220 	.word	0x20000220

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	@ (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	20000220 	.word	0x20000220

08000c88 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cb8:	401a      	ands	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	ff3fffff 	.word	0xff3fffff

08000cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	23c0      	movs	r3, #192	@ 0xc0
 8000cde:	041b      	lsls	r3, r3, #16
 8000ce0:	4013      	ands	r3, r2
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	400a      	ands	r2, r1
 8000d00:	2107      	movs	r1, #7
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	400b      	ands	r3, r1
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4099      	lsls	r1, r3
 8000d14:	000b      	movs	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	2104      	movs	r1, #4
 8000d36:	400a      	ands	r2, r1
 8000d38:	2107      	movs	r1, #7
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2104      	movs	r1, #4
 8000d44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d46:	40da      	lsrs	r2, r3
 8000d48:	0013      	movs	r3, r2
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	23c0      	movs	r3, #192	@ 0xc0
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4013      	ands	r3, r2
 8000d64:	d101      	bne.n	8000d6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	211f      	movs	r1, #31
 8000d88:	400a      	ands	r2, r1
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	0e9b      	lsrs	r3, r3, #26
 8000d98:	210f      	movs	r1, #15
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	201f      	movs	r0, #31
 8000da0:	4003      	ands	r3, r0
 8000da2:	4099      	lsls	r1, r3
 8000da4:	000b      	movs	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	0a5b      	lsrs	r3, r3, #9
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	0252      	lsls	r2, r2, #9
 8000de8:	0a52      	lsrs	r2, r2, #9
 8000dea:	43d2      	mvns	r2, r2
 8000dec:	401a      	ands	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2203      	movs	r2, #3
 8000e08:	4013      	ands	r3, r2
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	400b      	ands	r3, r1
 8000e34:	4904      	ldr	r1, [pc, #16]	@ (8000e48 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e36:	400b      	ands	r3, r1
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	7fffff00 	.word	0x7fffff00

08000e4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	0552      	lsls	r2, r2, #21
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	6fffffe8 	.word	0x6fffffe8

08000e74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	055b      	lsls	r3, r3, #21
 8000e84:	401a      	ands	r2, r3
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	055b      	lsls	r3, r3, #21
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d101      	bne.n	8000e92 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <LL_ADC_Enable+0x20>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	7fffffe8 	.word	0x7fffffe8

08000ec0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <LL_ADC_Disable+0x20>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	7fffffe8 	.word	0x7fffffe8

08000ee4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <LL_ADC_IsEnabled+0x18>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <LL_ADC_IsEnabled+0x1a>
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d101      	bne.n	8000f1e <LL_ADC_IsDisableOngoing+0x18>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <LL_ADC_IsDisableOngoing+0x1a>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <LL_ADC_REG_StartConversion+0x20>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	2204      	movs	r2, #4
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	7fffffe8 	.word	0x7fffffe8

08000f4c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <LL_ADC_REG_StopConversion+0x20>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	7fffffe8 	.word	0x7fffffe8

08000f70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d101      	bne.n	8000f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	231f      	movs	r3, #31
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e17e      	b.n	80012b8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10a      	bne.n	8000fd8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fc33 	bl	8000830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2254      	movs	r2, #84	@ 0x54
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff49 	bl	8000e74 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d114      	bne.n	8001010 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff2e 	bl	8000e4c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ff0:	4bb3      	ldr	r3, [pc, #716]	@ (80012c0 <HAL_ADC_Init+0x32c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	49b3      	ldr	r1, [pc, #716]	@ (80012c4 <HAL_ADC_Init+0x330>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff f898 	bl	800012c <__udivsi3>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001002:	e002      	b.n	800100a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3b01      	subs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f9      	bne.n	8001004 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff2d 	bl	8000e74 <LL_ADC_IsInternalRegulatorEnabled>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d10f      	bne.n	800103e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	2210      	movs	r2, #16
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800102e:	2201      	movs	r2, #1
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001036:	231f      	movs	r3, #31
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff ff94 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001048:	0003      	movs	r3, r0
 800104a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	2210      	movs	r2, #16
 8001052:	4013      	ands	r3, r2
 8001054:	d000      	beq.n	8001058 <HAL_ADC_Init+0xc4>
 8001056:	e122      	b.n	800129e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d000      	beq.n	8001060 <HAL_ADC_Init+0xcc>
 800105e:	e11e      	b.n	800129e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001064:	4a98      	ldr	r2, [pc, #608]	@ (80012c8 <HAL_ADC_Init+0x334>)
 8001066:	4013      	ands	r3, r2
 8001068:	2202      	movs	r2, #2
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff35 	bl	8000ee4 <LL_ADC_IsEnabled>
 800107a:	1e03      	subs	r3, r0, #0
 800107c:	d000      	beq.n	8001080 <HAL_ADC_Init+0xec>
 800107e:	e0ad      	b.n	80011dc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e1b      	ldrb	r3, [r3, #24]
 8001088:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800108a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e5b      	ldrb	r3, [r3, #25]
 8001090:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001092:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e9b      	ldrb	r3, [r3, #26]
 8001098:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800109a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_ADC_Init+0x116>
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	015b      	lsls	r3, r3, #5
 80010a8:	e000      	b.n	80010ac <HAL_ADC_Init+0x118>
 80010aa:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010ac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010b2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da04      	bge.n	80010c6 <HAL_ADC_Init+0x132>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	e001      	b.n	80010ca <HAL_ADC_Init+0x136>
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	212c      	movs	r1, #44	@ 0x2c
 80010d0:	5c5b      	ldrb	r3, [r3, r1]
 80010d2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010d4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2220      	movs	r2, #32
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d115      	bne.n	8001112 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e9b      	ldrb	r3, [r3, #26]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	2280      	movs	r2, #128	@ 0x80
 80010f2:	0252      	lsls	r2, r2, #9
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e00b      	b.n	8001112 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	2220      	movs	r2, #32
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800110a:	2201      	movs	r2, #1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800111e:	23e0      	movs	r3, #224	@ 0xe0
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001128:	4313      	orrs	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	4a65      	ldr	r2, [pc, #404]	@ (80012cc <HAL_ADC_Init+0x338>)
 8001138:	4013      	ands	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	430a      	orrs	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	0f9b      	lsrs	r3, r3, #30
 800114c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001152:	4313      	orrs	r3, r2
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	223c      	movs	r2, #60	@ 0x3c
 800115e:	5c9b      	ldrb	r3, [r3, r2]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d111      	bne.n	8001188 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	0f9b      	lsrs	r3, r3, #30
 800116a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001170:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001176:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800117c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	2201      	movs	r2, #1
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a50      	ldr	r2, [pc, #320]	@ (80012d0 <HAL_ADC_Init+0x33c>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	23c0      	movs	r3, #192	@ 0xc0
 80011a4:	061b      	lsls	r3, r3, #24
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d018      	beq.n	80011dc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d012      	beq.n	80011dc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	061b      	lsls	r3, r3, #24
 80011be:	429a      	cmp	r2, r3
 80011c0:	d00c      	beq.n	80011dc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011c2:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <HAL_ADC_Init+0x340>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a44      	ldr	r2, [pc, #272]	@ (80012d8 <HAL_ADC_Init+0x344>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	23f0      	movs	r3, #240	@ 0xf0
 80011d2:	039b      	lsls	r3, r3, #14
 80011d4:	401a      	ands	r2, r3
 80011d6:	4b3f      	ldr	r3, [pc, #252]	@ (80012d4 <HAL_ADC_Init+0x340>)
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f7ff fd7f 	bl	8000cea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f4:	4939      	ldr	r1, [pc, #228]	@ (80012dc <HAL_ADC_Init+0x348>)
 80011f6:	001a      	movs	r2, r3
 80011f8:	f7ff fd77 	bl	8000cea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d109      	bne.n	8001218 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2110      	movs	r1, #16
 8001210:	4249      	negs	r1, r1
 8001212:	430a      	orrs	r2, r1
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
 8001216:	e018      	b.n	800124a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	039b      	lsls	r3, r3, #14
 8001220:	429a      	cmp	r2, r3
 8001222:	d112      	bne.n	800124a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	3b01      	subs	r3, #1
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	221c      	movs	r2, #28
 8001234:	4013      	ands	r3, r2
 8001236:	2210      	movs	r2, #16
 8001238:	4252      	negs	r2, r2
 800123a:	409a      	lsls	r2, r3
 800123c:	0011      	movs	r1, r2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fd67 	bl	8000d24 <LL_ADC_GetSamplingTimeCommonChannels>
 8001256:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800125c:	429a      	cmp	r2, r3
 800125e:	d10b      	bne.n	8001278 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	2203      	movs	r2, #3
 800126c:	4393      	bics	r3, r2
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001276:	e01c      	b.n	80012b2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127c:	2212      	movs	r2, #18
 800127e:	4393      	bics	r3, r2
 8001280:	2210      	movs	r2, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128c:	2201      	movs	r2, #1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001294:	231f      	movs	r3, #31
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800129c:	e009      	b.n	80012b2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	2210      	movs	r2, #16
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012aa:	231f      	movs	r3, #31
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b2:	231f      	movs	r3, #31
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b008      	add	sp, #32
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	00030d40 	.word	0x00030d40
 80012c8:	fffffefd 	.word	0xfffffefd
 80012cc:	ffde0201 	.word	0xffde0201
 80012d0:	1ffffc02 	.word	0x1ffffc02
 80012d4:	40012708 	.word	0x40012708
 80012d8:	ffc3ffff 	.word	0xffc3ffff
 80012dc:	7fffff04 	.word	0x7fffff04

080012e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fe3d 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d16c      	bne.n	80013d4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2254      	movs	r2, #84	@ 0x54
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_Start_DMA+0x28>
 8001304:	2302      	movs	r3, #2
 8001306:	e06c      	b.n	80013e2 <HAL_ADC_Start_DMA+0x102>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2254      	movs	r2, #84	@ 0x54
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d113      	bne.n	8001344 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fddf 	bl	8000ee4 <LL_ADC_IsEnabled>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d004      	beq.n	8001334 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fdc6 	bl	8000ec0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001344:	2517      	movs	r5, #23
 8001346:	197c      	adds	r4, r7, r5
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fc0a 	bl	8001b64 <ADC_Enable>
 8001350:	0003      	movs	r3, r0
 8001352:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001354:	002c      	movs	r4, r5
 8001356:	193b      	adds	r3, r7, r4
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d13e      	bne.n	80013dc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_ADC_Start_DMA+0x10c>)
 8001364:	4013      	ands	r3, r2
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	0052      	lsls	r2, r2, #1
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137a:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_ADC_Start_DMA+0x110>)
 800137c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_ADC_Start_DMA+0x114>)
 8001384:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138a:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <HAL_ADC_Start_DMA+0x118>)
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	221c      	movs	r2, #28
 8001394:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2254      	movs	r2, #84	@ 0x54
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2110      	movs	r1, #16
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3340      	adds	r3, #64	@ 0x40
 80013b8:	0019      	movs	r1, r3
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	193c      	adds	r4, r7, r4
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f001 f84e 	bl	8002460 <HAL_DMA_Start_IT>
 80013c4:	0003      	movs	r3, r0
 80013c6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fdab 	bl	8000f28 <LL_ADC_REG_StartConversion>
 80013d2:	e003      	b.n	80013dc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d4:	2317      	movs	r3, #23
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80013dc:	2317      	movs	r3, #23
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b006      	add	sp, #24
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	fffff0fe 	.word	0xfffff0fe
 80013f0:	08001d11 	.word	0x08001d11
 80013f4:	08001dd9 	.word	0x08001dd9
 80013f8:	08001df7 	.word	0x08001df7

080013fc <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2254      	movs	r2, #84	@ 0x54
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Stop_DMA+0x16>
 800140e:	2302      	movs	r3, #2
 8001410:	e05f      	b.n	80014d2 <HAL_ADC_Stop_DMA+0xd6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2254      	movs	r2, #84	@ 0x54
 8001416:	2101      	movs	r1, #1
 8001418:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800141a:	250f      	movs	r5, #15
 800141c:	197c      	adds	r4, r7, r5
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0018      	movs	r0, r3
 8001422:	f000 fb63 	bl	8001aec <ADC_ConversionStop>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800142a:	0029      	movs	r1, r5
 800142c:	187b      	adds	r3, r7, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d147      	bne.n	80014c4 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001438:	2225      	movs	r2, #37	@ 0x25
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d112      	bne.n	8001468 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001446:	000d      	movs	r5, r1
 8001448:	187c      	adds	r4, r7, r1
 800144a:	0018      	movs	r0, r3
 800144c:	f001 f890 	bl	8002570 <HAL_DMA_Abort>
 8001450:	0003      	movs	r3, r0
 8001452:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001454:	197b      	adds	r3, r7, r5
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	2240      	movs	r2, #64	@ 0x40
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2110      	movs	r1, #16
 8001474:	438a      	bics	r2, r1
 8001476:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001478:	220f      	movs	r2, #15
 800147a:	18bb      	adds	r3, r7, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001482:	18bc      	adds	r4, r7, r2
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f000 fbea 	bl	8001c60 <ADC_Disable>
 800148c:	0003      	movs	r3, r0
 800148e:	7023      	strb	r3, [r4, #0]
 8001490:	e003      	b.n	800149a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fbe3 	bl	8001c60 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800149a:	230f      	movs	r3, #15
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_ADC_Stop_DMA+0xe0>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	2201      	movs	r2, #1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2254      	movs	r2, #84	@ 0x54
 80014c8:	2100      	movs	r1, #0
 80014ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80014cc:	230f      	movs	r3, #15
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	fffffefe 	.word	0xfffffefe

080014e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d017      	beq.n	8001534 <HAL_ADC_IRQHandler+0x54>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	2210      	movs	r2, #16
 8001512:	4013      	ands	r3, r2
 8001514:	d106      	bne.n	8001524 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0018      	movs	r0, r3
 8001528:	f000 fe22 	bl	8002170 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_ADC_IRQHandler+0x64>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d107      	bne.n	8001554 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2208      	movs	r2, #8
 8001548:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800154a:	d04d      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d049      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	d106      	bne.n	800156c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fbee 	bl	8000d52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d02e      	beq.n	80015d8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e9b      	ldrb	r3, [r3, #26]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d12a      	bne.n	80015d8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2208      	movs	r2, #8
 800158a:	4013      	ands	r3, r2
 800158c:	2b08      	cmp	r3, #8
 800158e:	d123      	bne.n	80015d8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fceb 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d110      	bne.n	80015c0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	210c      	movs	r1, #12
 80015aa:	438a      	bics	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a56      	ldr	r2, [pc, #344]	@ (800170c <HAL_ADC_IRQHandler+0x22c>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80015be:	e00b      	b.n	80015d8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	2220      	movs	r2, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	2201      	movs	r2, #1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7fe ff1c 	bl	8000418 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	220c      	movs	r2, #12
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	4013      	ands	r3, r2
 80015ee:	d012      	beq.n	8001616 <HAL_ADC_IRQHandler+0x136>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	4013      	ands	r3, r2
 80015f6:	d00e      	beq.n	8001616 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fc:	2280      	movs	r2, #128	@ 0x80
 80015fe:	0252      	lsls	r2, r2, #9
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f000 f889 	bl	8001720 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d014      	beq.n	800164a <HAL_ADC_IRQHandler+0x16a>
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d00f      	beq.n	800164a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	0292      	lsls	r2, r2, #10
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fd88 	bl	8002150 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d014      	beq.n	800167e <HAL_ADC_IRQHandler+0x19e>
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d00f      	beq.n	800167e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	02d2      	lsls	r2, r2, #11
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	0018      	movs	r0, r3
 8001670:	f000 fd76 	bl	8002160 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2210      	movs	r2, #16
 8001682:	4013      	ands	r3, r2
 8001684:	d02b      	beq.n	80016de <HAL_ADC_IRQHandler+0x1fe>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2210      	movs	r2, #16
 800168a:	4013      	ands	r3, r2
 800168c:	d027      	beq.n	80016de <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e008      	b.n	80016ae <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fbaa 	bl	8000dfa <LL_ADC_REG_GetDMATransfer>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d110      	bne.n	80016d6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	00d2      	lsls	r2, r2, #3
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c6:	2202      	movs	r2, #2
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f82d 	bl	8001730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2210      	movs	r2, #16
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	019b      	lsls	r3, r3, #6
 80016e4:	4013      	ands	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_ADC_IRQHandler+0x224>
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	4013      	ands	r3, r2
 80016f0:	d008      	beq.n	8001704 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 fd43 	bl	8002180 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	0192      	lsls	r2, r2, #6
 8001702:	601a      	str	r2, [r3, #0]
  }
}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b006      	add	sp, #24
 800170a:	bd80      	pop	{r7, pc}
 800170c:	fffffefe 	.word	0xfffffefe

08001710 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174a:	2317      	movs	r3, #23
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2254      	movs	r2, #84	@ 0x54
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x24>
 8001760:	2302      	movs	r3, #2
 8001762:	e1be      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x3a2>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2254      	movs	r2, #84	@ 0x54
 8001768:	2101      	movs	r1, #1
 800176a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fbfd 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d000      	beq.n	800177c <HAL_ADC_ConfigChannel+0x3c>
 800177a:	e1a1      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d100      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x46>
 8001784:	e152      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	429a      	cmp	r2, r3
 8001790:	d004      	beq.n	800179c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001796:	4ac2      	ldr	r2, [pc, #776]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x360>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d108      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f7ff fb04 	bl	8000db4 <LL_ADC_REG_SetSequencerChAdd>
 80017ac:	e0ed      	b.n	800198a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	211f      	movs	r1, #31
 80017b8:	400b      	ands	r3, r1
 80017ba:	210f      	movs	r1, #15
 80017bc:	4099      	lsls	r1, r3
 80017be:	000b      	movs	r3, r1
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	0a5b      	lsrs	r3, r3, #9
 80017ce:	d105      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x9c>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0e9b      	lsrs	r3, r3, #26
 80017d6:	221f      	movs	r2, #31
 80017d8:	4013      	ands	r3, r2
 80017da:	e0bc      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d000      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0xa8>
 80017e6:	e0b5      	b.n	8001954 <HAL_ADC_ConfigChannel+0x214>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d000      	beq.n	80017f4 <HAL_ADC_ConfigChannel+0xb4>
 80017f2:	e0ad      	b.n	8001950 <HAL_ADC_ConfigChannel+0x210>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2204      	movs	r2, #4
 80017fa:	4013      	ands	r3, r2
 80017fc:	d000      	beq.n	8001800 <HAL_ADC_ConfigChannel+0xc0>
 80017fe:	e0a5      	b.n	800194c <HAL_ADC_ConfigChannel+0x20c>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	4013      	ands	r3, r2
 8001808:	d000      	beq.n	800180c <HAL_ADC_ConfigChannel+0xcc>
 800180a:	e09d      	b.n	8001948 <HAL_ADC_ConfigChannel+0x208>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2210      	movs	r2, #16
 8001812:	4013      	ands	r3, r2
 8001814:	d000      	beq.n	8001818 <HAL_ADC_ConfigChannel+0xd8>
 8001816:	e095      	b.n	8001944 <HAL_ADC_ConfigChannel+0x204>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	4013      	ands	r3, r2
 8001820:	d000      	beq.n	8001824 <HAL_ADC_ConfigChannel+0xe4>
 8001822:	e08d      	b.n	8001940 <HAL_ADC_ConfigChannel+0x200>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2240      	movs	r2, #64	@ 0x40
 800182a:	4013      	ands	r3, r2
 800182c:	d000      	beq.n	8001830 <HAL_ADC_ConfigChannel+0xf0>
 800182e:	e085      	b.n	800193c <HAL_ADC_ConfigChannel+0x1fc>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2280      	movs	r2, #128	@ 0x80
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_ConfigChannel+0xfc>
 800183a:	e07d      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1f8>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4013      	ands	r3, r2
 8001846:	d000      	beq.n	800184a <HAL_ADC_ConfigChannel+0x10a>
 8001848:	e074      	b.n	8001934 <HAL_ADC_ConfigChannel+0x1f4>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d000      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x118>
 8001856:	e06b      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1f0>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4013      	ands	r3, r2
 8001862:	d000      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x126>
 8001864:	e062      	b.n	800192c <HAL_ADC_ConfigChannel+0x1ec>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4013      	ands	r3, r2
 8001870:	d000      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x134>
 8001872:	e059      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1e8>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	4013      	ands	r3, r2
 800187e:	d151      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1e4>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	4013      	ands	r3, r2
 800188a:	d149      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1e0>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	01db      	lsls	r3, r3, #7
 8001894:	4013      	ands	r3, r2
 8001896:	d141      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1dc>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	4013      	ands	r3, r2
 80018a2:	d139      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d8>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	025b      	lsls	r3, r3, #9
 80018ac:	4013      	ands	r3, r2
 80018ae:	d131      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d4>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d129      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d0>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	02db      	lsls	r3, r3, #11
 80018c4:	4013      	ands	r3, r2
 80018c6:	d121      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1cc>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	031b      	lsls	r3, r3, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	d119      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1c8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	035b      	lsls	r3, r3, #13
 80018dc:	4013      	ands	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c4>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	039b      	lsls	r3, r3, #14
 80018e8:	4013      	ands	r3, r2
 80018ea:	d109      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	03db      	lsls	r3, r3, #15
 80018f4:	4013      	ands	r3, r2
 80018f6:	d001      	beq.n	80018fc <HAL_ADC_ConfigChannel+0x1bc>
 80018f8:	2316      	movs	r3, #22
 80018fa:	e02c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 80018fc:	2300      	movs	r3, #0
 80018fe:	e02a      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001900:	2315      	movs	r3, #21
 8001902:	e028      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001904:	2314      	movs	r3, #20
 8001906:	e026      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001908:	2313      	movs	r3, #19
 800190a:	e024      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 800190c:	2312      	movs	r3, #18
 800190e:	e022      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001910:	2311      	movs	r3, #17
 8001912:	e020      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001914:	2310      	movs	r3, #16
 8001916:	e01e      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001918:	230f      	movs	r3, #15
 800191a:	e01c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 800191c:	230e      	movs	r3, #14
 800191e:	e01a      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001920:	230d      	movs	r3, #13
 8001922:	e018      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001924:	230c      	movs	r3, #12
 8001926:	e016      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001928:	230b      	movs	r3, #11
 800192a:	e014      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 800192c:	230a      	movs	r3, #10
 800192e:	e012      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001930:	2309      	movs	r3, #9
 8001932:	e010      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001934:	2308      	movs	r3, #8
 8001936:	e00e      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001938:	2307      	movs	r3, #7
 800193a:	e00c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 800193c:	2306      	movs	r3, #6
 800193e:	e00a      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001940:	2305      	movs	r3, #5
 8001942:	e008      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001944:	2304      	movs	r3, #4
 8001946:	e006      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001948:	2303      	movs	r3, #3
 800194a:	e004      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 800194c:	2302      	movs	r3, #2
 800194e:	e002      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_ADC_ConfigChannel+0x216>
 8001954:	2300      	movs	r3, #0
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6852      	ldr	r2, [r2, #4]
 800195a:	201f      	movs	r0, #31
 800195c:	4002      	ands	r2, r0
 800195e:	4093      	lsls	r3, r2
 8001960:	000a      	movs	r2, r1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	d808      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	001a      	movs	r2, r3
 8001986:	f7ff f9f5 	bl	8000d74 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	001a      	movs	r2, r3
 8001998:	f7ff fa3c 	bl	8000e14 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db00      	blt.n	80019a6 <HAL_ADC_ConfigChannel+0x266>
 80019a4:	e096      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff f991 	bl	8000cd0 <LL_ADC_GetCommonPathInternalCh>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x368>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d123      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019c4:	d11e      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	4313      	orrs	r3, r2
 80019ce:	4a35      	ldr	r2, [pc, #212]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	f7ff f968 	bl	8000ca8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80019d8:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <HAL_ADC_ConfigChannel+0x36c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4934      	ldr	r1, [pc, #208]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x370>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe fba4 	bl	800012c <__udivsi3>
 80019e4:	0003      	movs	r3, r0
 80019e6:	001a      	movs	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a02:	e067      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x374>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d162      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	03db      	lsls	r3, r3, #15
 8001a14:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a16:	d15d      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	03d2      	lsls	r2, r2, #15
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4a20      	ldr	r2, [pc, #128]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 8001a22:	0019      	movs	r1, r3
 8001a24:	0010      	movs	r0, r2
 8001a26:	f7ff f93f 	bl	8000ca8 <LL_ADC_SetCommonPathInternalCh>
 8001a2a:	e053      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	061b      	lsls	r3, r3, #24
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a3c:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x360>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d107      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f7ff f9c2 	bl	8000dd6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da3c      	bge.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f937 	bl	8000cd0 <LL_ADC_GetCommonPathInternalCh>
 8001a62:	0003      	movs	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x368>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d108      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_ADC_ConfigChannel+0x378>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f7ff f914 	bl	8000ca8 <LL_ADC_SetCommonPathInternalCh>
 8001a80:	e028      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x374>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_ADC_ConfigChannel+0x37c>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x364>)
 8001a94:	0019      	movs	r1, r3
 8001a96:	0010      	movs	r0, r2
 8001a98:	f7ff f906 	bl	8000ca8 <LL_ADC_SetCommonPathInternalCh>
 8001a9c:	e01a      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x394>
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	80000004 	.word	0x80000004
 8001aa4:	40012708 	.word	0x40012708
 8001aa8:	a4000200 	.word	0xa4000200
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	00030d40 	.word	0x00030d40
 8001ab4:	a8000400 	.word	0xa8000400
 8001ab8:	ff7fffff 	.word	0xff7fffff
 8001abc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001acc:	2317      	movs	r3, #23
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2254      	movs	r2, #84	@ 0x54
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001adc:	2317      	movs	r3, #23
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b006      	add	sp, #24
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)

08001aec <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff fa39 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d02b      	beq.n	8001b5a <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff f9fd 	bl	8000f06 <LL_ADC_IsDisableOngoing>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d104      	bne.n	8001b1a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fa19 	bl	8000f4c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b1a:	f7ff f8ab 	bl	8000c74 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b22:	e014      	b.n	8001b4e <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b24:	f7ff f8a6 	bl	8000c74 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d90d      	bls.n	8001b4e <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	2210      	movs	r2, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2201      	movs	r2, #1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e006      	b.n	8001b5c <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d1e4      	bne.n	8001b24 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff f9b5 	bl	8000ee4 <LL_ADC_IsEnabled>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d162      	bne.n	8001c44 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a32      	ldr	r2, [pc, #200]	@ (8001c50 <ADC_Enable+0xec>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	2210      	movs	r2, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e04f      	b.n	8001c46 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7ff f976 	bl	8000e9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bb0:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <ADC_Enable+0xf0>)
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff f88c 	bl	8000cd0 <LL_ADC_GetCommonPathInternalCh>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d00f      	beq.n	8001be2 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <ADC_Enable+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4925      	ldr	r1, [pc, #148]	@ (8001c5c <ADC_Enable+0xf8>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7fe faaf 	bl	800012c <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bd4:	e002      	b.n	8001bdc <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d02c      	beq.n	8001c44 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f843 	bl	8000c74 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bf2:	e020      	b.n	8001c36 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff f973 	bl	8000ee4 <LL_ADC_IsEnabled>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d104      	bne.n	8001c0c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff f948 	bl	8000e9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0c:	f7ff f832 	bl	8000c74 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d90d      	bls.n	8001c36 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	2210      	movs	r2, #16
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e007      	b.n	8001c46 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d1d7      	bne.n	8001bf4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	80000017 	.word	0x80000017
 8001c54:	40012708 	.word	0x40012708
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	00030d40 	.word	0x00030d40

08001c60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff f94a 	bl	8000f06 <LL_ADC_IsDisableOngoing>
 8001c72:	0003      	movs	r3, r0
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff f932 	bl	8000ee4 <LL_ADC_IsEnabled>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d040      	beq.n	8001d06 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13d      	bne.n	8001d06 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2205      	movs	r2, #5
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10d      	bne.n	8001cb4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff f90f 	bl	8000ec0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001caa:	f7fe ffe3 	bl	8000c74 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cb2:	e022      	b.n	8001cfa <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	2210      	movs	r2, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e01b      	b.n	8001d08 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd0:	f7fe ffd0 	bl	8000c74 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d90d      	bls.n	8001cfa <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e006      	b.n	8001d08 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d1e4      	bne.n	8001cd0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b004      	add	sp, #16
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	2250      	movs	r2, #80	@ 0x50
 8001d24:	4013      	ands	r3, r2
 8001d26:	d141      	bne.n	8001dac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff f809 	bl	8000d52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d02e      	beq.n	8001da2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	7e9b      	ldrb	r3, [r3, #26]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d12a      	bne.n	8001da2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2208      	movs	r2, #8
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d123      	bne.n	8001da2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff f906 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d110      	bne.n	8001d8a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	210c      	movs	r1, #12
 8001d74:	438a      	bics	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <ADC_DMAConvCplt+0xc4>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2201      	movs	r2, #1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d88:	e00b      	b.n	8001da2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	2220      	movs	r2, #32
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7fe fb37 	bl	8000418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001daa:	e00f      	b.n	8001dcc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	2210      	movs	r2, #16
 8001db2:	4013      	ands	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff fcb9 	bl	8001730 <HAL_ADC_ErrorCallback>
}
 8001dbe:	e005      	b.n	8001dcc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	0010      	movs	r0, r2
 8001dca:	4798      	blx	r3
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	fffffefe 	.word	0xfffffefe

08001dd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fc91 	bl	8001710 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b004      	add	sp, #16
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	2240      	movs	r2, #64	@ 0x40
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e14:	2204      	movs	r2, #4
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fc86 	bl	8001730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <LL_ADC_GetCommonClock>:
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	23f0      	movs	r3, #240	@ 0xf0
 8001e3a:	039b      	lsls	r3, r3, #14
 8001e3c:	4013      	ands	r3, r2
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b002      	add	sp, #8
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <LL_ADC_GetClock>:
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	0f9b      	lsrs	r3, r3, #30
 8001e54:	079b      	lsls	r3, r3, #30
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <LL_ADC_SetCalibrationFactor>:
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	22b4      	movs	r2, #180	@ 0xb4
 8001e6c:	589b      	ldr	r3, [r3, r2]
 8001e6e:	227f      	movs	r2, #127	@ 0x7f
 8001e70:	4393      	bics	r3, r2
 8001e72:	001a      	movs	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	21b4      	movs	r1, #180	@ 0xb4
 8001e7c:	505a      	str	r2, [r3, r1]
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <LL_ADC_GetCalibrationFactor>:
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	22b4      	movs	r2, #180	@ 0xb4
 8001e92:	589b      	ldr	r3, [r3, r2]
 8001e94:	227f      	movs	r2, #127	@ 0x7f
 8001e96:	4013      	ands	r3, r2
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <LL_ADC_Enable>:
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <LL_ADC_Enable+0x20>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
}
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	7fffffe8 	.word	0x7fffffe8

08001ec4 <LL_ADC_Disable>:
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <LL_ADC_Disable+0x20>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	7fffffe8 	.word	0x7fffffe8

08001ee8 <LL_ADC_IsEnabled>:
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_IsEnabled+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_IsEnabled+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b002      	add	sp, #8
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <LL_ADC_StartCalibration>:
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <LL_ADC_StartCalibration+0x24>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	0612      	lsls	r2, r2, #24
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	7fffffe8 	.word	0x7fffffe8

08001f34 <LL_ADC_IsCalibrationOnGoing>:
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	0fdb      	lsrs	r3, r3, #31
 8001f42:	07da      	lsls	r2, r3, #31
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d101      	bne.n	8001f50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b08b      	sub	sp, #44	@ 0x2c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2254      	movs	r2, #84	@ 0x54
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_ADCEx_Calibration_Start+0x1e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0de      	b.n	8002138 <HAL_ADCEx_Calibration_Start+0x1dc>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2254      	movs	r2, #84	@ 0x54
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fc      	adds	r4, r7, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fe69 	bl	8001c60 <ADC_Disable>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff ffa6 	bl	8001ee8 <LL_ADC_IsEnabled>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d000      	beq.n	8001fa2 <HAL_ADCEx_Calibration_Start+0x46>
 8001fa0:	e0bd      	b.n	800211e <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a66      	ldr	r2, [pc, #408]	@ (8002140 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2202      	movs	r2, #2
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a62      	ldr	r2, [pc, #392]	@ (8002144 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	495f      	ldr	r1, [pc, #380]	@ (8002148 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd2:	e02e      	b.n	8002032 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff ff97 	bl	8001f0c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001fde:	e015      	b.n	800200c <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	23ae      	movs	r3, #174	@ 0xae
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d30d      	bcc.n	800200c <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	2212      	movs	r2, #18
 8001ff6:	4393      	bics	r3, r2
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2254      	movs	r2, #84	@ 0x54
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e095      	b.n	8002138 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff ff8f 	bl	8001f34 <LL_ADC_IsCalibrationOnGoing>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d1e2      	bne.n	8001fe0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff ff31 	bl	8001e86 <LL_ADC_GetCalibrationFactor>
 8002024:	0002      	movs	r2, r0
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	189b      	adds	r3, r3, r2
 800202a:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	2b07      	cmp	r3, #7
 8002036:	d9cd      	bls.n	8001fd4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800203a:	6a38      	ldr	r0, [r7, #32]
 800203c:	f7fe f876 	bl	800012c <__udivsi3>
 8002040:	0003      	movs	r3, r0
 8002042:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff ff29 	bl	8001ea0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff fef7 	bl	8001e46 <LL_ADC_GetClock>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d11b      	bne.n	8002094 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_ADCEx_Calibration_Start+0x1f0>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff fee4 	bl	8001e2c <LL_ADC_GetCommonClock>
 8002064:	0003      	movs	r3, r0
 8002066:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	23e0      	movs	r3, #224	@ 0xe0
 800206c:	035b      	lsls	r3, r3, #13
 800206e:	429a      	cmp	r2, r3
 8002070:	d310      	bcc.n	8002094 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	3b03      	subs	r3, #3
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 8002086:	e002      	b.n	800208e <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3b01      	subs	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fede 	bl	8001e5e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff ff0c 	bl	8001ec4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fde2 	bl	8000c74 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020b4:	e01b      	b.n	80020ee <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020b6:	f7fe fddd 	bl	8000c74 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d914      	bls.n	80020ee <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ff0d 	bl	8001ee8 <LL_ADC_IsEnabled>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d00d      	beq.n	80020ee <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	2210      	movs	r2, #16
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	2201      	movs	r2, #1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e024      	b.n	8002138 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff fef8 	bl	8001ee8 <LL_ADC_IsEnabled>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d1dc      	bne.n	80020b6 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	2203      	movs	r2, #3
 8002112:	4393      	bics	r3, r2
 8002114:	2201      	movs	r2, #1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58
 800211c:	e005      	b.n	800212a <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	2210      	movs	r2, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2254      	movs	r2, #84	@ 0x54
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002132:	231f      	movs	r3, #31
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	781b      	ldrb	r3, [r3, #0]
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b00b      	add	sp, #44	@ 0x2c
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	fffffefd 	.word	0xfffffefd
 8002144:	00008003 	.word	0x00008003
 8002148:	ffff7ffc 	.word	0xffff7ffc
 800214c:	40012708 	.word	0x40012708

08002150 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	0002      	movs	r2, r0
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80021a2:	d809      	bhi.n	80021b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	001a      	movs	r2, r3
 80021aa:	231f      	movs	r3, #31
 80021ac:	401a      	ands	r2, r3
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <__NVIC_EnableIRQ+0x30>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	4091      	lsls	r1, r2
 80021b4:	000a      	movs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	0002      	movs	r2, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80021d8:	d828      	bhi.n	800222c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021da:	4a2f      	ldr	r2, [pc, #188]	@ (8002298 <__NVIC_SetPriority+0xd4>)
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	33c0      	adds	r3, #192	@ 0xc0
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	589b      	ldr	r3, [r3, r2]
 80021ea:	1dfa      	adds	r2, r7, #7
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	0011      	movs	r1, r2
 80021f0:	2203      	movs	r2, #3
 80021f2:	400a      	ands	r2, r1
 80021f4:	00d2      	lsls	r2, r2, #3
 80021f6:	21ff      	movs	r1, #255	@ 0xff
 80021f8:	4091      	lsls	r1, r2
 80021fa:	000a      	movs	r2, r1
 80021fc:	43d2      	mvns	r2, r2
 80021fe:	401a      	ands	r2, r3
 8002200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	019b      	lsls	r3, r3, #6
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	401a      	ands	r2, r3
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	2303      	movs	r3, #3
 8002212:	4003      	ands	r3, r0
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002218:	481f      	ldr	r0, [pc, #124]	@ (8002298 <__NVIC_SetPriority+0xd4>)
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b25b      	sxtb	r3, r3
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	430a      	orrs	r2, r1
 8002224:	33c0      	adds	r3, #192	@ 0xc0
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800222a:	e031      	b.n	8002290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222c:	4a1b      	ldr	r2, [pc, #108]	@ (800229c <__NVIC_SetPriority+0xd8>)
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0019      	movs	r1, r3
 8002234:	230f      	movs	r3, #15
 8002236:	400b      	ands	r3, r1
 8002238:	3b08      	subs	r3, #8
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3306      	adds	r3, #6
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	3304      	adds	r3, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1dfa      	adds	r2, r7, #7
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	0011      	movs	r1, r2
 800224c:	2203      	movs	r2, #3
 800224e:	400a      	ands	r2, r1
 8002250:	00d2      	lsls	r2, r2, #3
 8002252:	21ff      	movs	r1, #255	@ 0xff
 8002254:	4091      	lsls	r1, r2
 8002256:	000a      	movs	r2, r1
 8002258:	43d2      	mvns	r2, r2
 800225a:	401a      	ands	r2, r3
 800225c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	22ff      	movs	r2, #255	@ 0xff
 8002264:	401a      	ands	r2, r3
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	0018      	movs	r0, r3
 800226c:	2303      	movs	r3, #3
 800226e:	4003      	ands	r3, r0
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002274:	4809      	ldr	r0, [pc, #36]	@ (800229c <__NVIC_SetPriority+0xd8>)
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	001c      	movs	r4, r3
 800227c:	230f      	movs	r3, #15
 800227e:	4023      	ands	r3, r4
 8002280:	3b08      	subs	r3, #8
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	430a      	orrs	r2, r1
 8002286:	3306      	adds	r3, #6
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	18c3      	adds	r3, r0, r3
 800228c:	3304      	adds	r3, #4
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b003      	add	sp, #12
 8002296:	bd90      	pop	{r4, r7, pc}
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	045b      	lsls	r3, r3, #17
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d301      	bcc.n	80022b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b4:	2301      	movs	r3, #1
 80022b6:	e010      	b.n	80022da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <SysTick_Config+0x44>)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	3a01      	subs	r2, #1
 80022be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c0:	2301      	movs	r3, #1
 80022c2:	425b      	negs	r3, r3
 80022c4:	2103      	movs	r1, #3
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff7c 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x44>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x44>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	210f      	movs	r1, #15
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	1c02      	adds	r2, r0, #0
 80022f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b25b      	sxtb	r3, r3
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b004      	add	sp, #16
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	0002      	movs	r2, r0
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b25b      	sxtb	r3, r3
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff ff33 	bl	8002190 <__NVIC_EnableIRQ>
}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff ffaf 	bl	80022a0 <SysTick_Config>
 8002342:	0003      	movs	r3, r0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e077      	b.n	800244e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3d      	ldr	r2, [pc, #244]	@ (8002458 <HAL_DMA_Init+0x10c>)
 8002364:	4694      	mov	ip, r2
 8002366:	4463      	add	r3, ip
 8002368:	2114      	movs	r1, #20
 800236a:	0018      	movs	r0, r3
 800236c:	f7fd fede 	bl	800012c <__udivsi3>
 8002370:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002372:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2225      	movs	r2, #37	@ 0x25
 800237c:	2102      	movs	r1, #2
 800237e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4934      	ldr	r1, [pc, #208]	@ (800245c <HAL_DMA_Init+0x110>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fa25 	bl	8002818 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	01db      	lsls	r3, r3, #7
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d102      	bne.n	80023e0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	21ff      	movs	r1, #255	@ 0xff
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d011      	beq.n	8002424 <HAL_DMA_Init+0xd8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d80d      	bhi.n	8002424 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 fa30 	bl	8002870 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e008      	b.n	8002436 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2225      	movs	r2, #37	@ 0x25
 8002440:	2101      	movs	r1, #1
 8002442:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	@ 0x24
 8002448:	2100      	movs	r1, #0
 800244a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b002      	add	sp, #8
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	bffdfff8 	.word	0xbffdfff8
 800245c:	ffff800f 	.word	0xffff800f

08002460 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2317      	movs	r3, #23
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2224      	movs	r2, #36	@ 0x24
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_DMA_Start_IT+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e070      	b.n	8002566 <HAL_DMA_Start_IT+0x106>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2224      	movs	r2, #36	@ 0x24
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2225      	movs	r2, #37	@ 0x25
 8002490:	5c9b      	ldrb	r3, [r3, r2]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d157      	bne.n	8002548 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2225      	movs	r2, #37	@ 0x25
 800249c:	2102      	movs	r1, #2
 800249e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	438a      	bics	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f96b 	bl	8002798 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	210e      	movs	r1, #14
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00f      	b.n	80024fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2104      	movs	r1, #4
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	210a      	movs	r1, #10
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	4013      	ands	r3, r2
 8002508:	d008      	beq.n	800251c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0049      	lsls	r1, r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252e:	2180      	movs	r1, #128	@ 0x80
 8002530:	0049      	lsls	r1, r1, #1
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e007      	b.n	8002558 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2224      	movs	r2, #36	@ 0x24
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002550:	2317      	movs	r3, #23
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2224      	movs	r2, #36	@ 0x24
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

  return status;
 8002560:	2317      	movs	r3, #23
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	781b      	ldrb	r3, [r3, #0]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e050      	b.n	8002624 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2225      	movs	r2, #37	@ 0x25
 8002586:	5c9b      	ldrb	r3, [r3, r2]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2204      	movs	r2, #4
 8002592:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	@ 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e041      	b.n	8002624 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	210e      	movs	r1, #14
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	491c      	ldr	r1, [pc, #112]	@ (800262c <HAL_DMA_Abort+0xbc>)
 80025bc:	400a      	ands	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80025d0:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <HAL_DMA_Abort+0xc0>)
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	221c      	movs	r2, #28
 80025da:	4013      	ands	r3, r2
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_DMA_Abort+0xc0>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	490a      	ldr	r1, [pc, #40]	@ (800262c <HAL_DMA_Abort+0xbc>)
 8002604:	400a      	ands	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002610:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2225      	movs	r2, #37	@ 0x25
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	@ 0x24
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	fffffeff 	.word	0xfffffeff
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800263c:	4b55      	ldr	r3, [pc, #340]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	221c      	movs	r2, #28
 8002650:	4013      	ands	r3, r2
 8002652:	2204      	movs	r2, #4
 8002654:	409a      	lsls	r2, r3
 8002656:	0013      	movs	r3, r2
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	d027      	beq.n	80026ae <HAL_DMA_IRQHandler+0x7a>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2204      	movs	r2, #4
 8002662:	4013      	ands	r3, r2
 8002664:	d023      	beq.n	80026ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d107      	bne.n	8002682 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2104      	movs	r1, #4
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002682:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	221c      	movs	r2, #28
 800268c:	4013      	ands	r3, r2
 800268e:	2204      	movs	r2, #4
 8002690:	409a      	lsls	r2, r3
 8002692:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	2b00      	cmp	r3, #0
 800269e:	d100      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x6e>
 80026a0:	e073      	b.n	800278a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	0010      	movs	r0, r2
 80026aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ac:	e06d      	b.n	800278a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	221c      	movs	r2, #28
 80026b4:	4013      	ands	r3, r2
 80026b6:	2202      	movs	r2, #2
 80026b8:	409a      	lsls	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	d02e      	beq.n	8002720 <HAL_DMA_IRQHandler+0xec>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d02a      	beq.n	8002720 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2220      	movs	r2, #32
 80026d2:	4013      	ands	r3, r2
 80026d4:	d10b      	bne.n	80026ee <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	210a      	movs	r1, #10
 80026e2:	438a      	bics	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2225      	movs	r2, #37	@ 0x25
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80026ee:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	221c      	movs	r2, #28
 80026f8:	4013      	ands	r3, r2
 80026fa:	2202      	movs	r2, #2
 80026fc:	409a      	lsls	r2, r3
 80026fe:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	@ 0x24
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03a      	beq.n	800278a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	0010      	movs	r0, r2
 800271c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800271e:	e034      	b.n	800278a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	221c      	movs	r2, #28
 8002726:	4013      	ands	r3, r2
 8002728:	2208      	movs	r2, #8
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	d02b      	beq.n	800278c <HAL_DMA_IRQHandler+0x158>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2208      	movs	r2, #8
 8002738:	4013      	ands	r3, r2
 800273a:	d027      	beq.n	800278c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	210e      	movs	r1, #14
 8002748:	438a      	bics	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	221c      	movs	r2, #28
 8002756:	4013      	ands	r3, r2
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_DMA_IRQHandler+0x160>)
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2225      	movs	r2, #37	@ 0x25
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	@ 0x24
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	0010      	movs	r0, r2
 8002788:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	46c0      	nop			@ (mov r8, r8)
}
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020000 	.word	0x40020000

08002798 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <DMA_SetConfig+0x7c>)
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	221c      	movs	r2, #28
 80027cc:	4013      	ands	r3, r2
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <DMA_SetConfig+0x7c>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d108      	bne.n	80027fa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027f8:	e007      	b.n	800280a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	60da      	str	r2, [r3, #12]
}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	40020000 	.word	0x40020000

08002818 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	001a      	movs	r2, r3
 8002826:	23ff      	movs	r3, #255	@ 0xff
 8002828:	4013      	ands	r3, r2
 800282a:	3b08      	subs	r3, #8
 800282c:	2114      	movs	r1, #20
 800282e:	0018      	movs	r0, r3
 8002830:	f7fd fc7c 	bl	800012c <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002840:	4694      	mov	ip, r2
 8002842:	4463      	add	r3, ip
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	001a      	movs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a07      	ldr	r2, [pc, #28]	@ (800286c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002850:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	221c      	movs	r2, #28
 8002856:	4013      	ands	r3, r2
 8002858:	2201      	movs	r2, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	10008200 	.word	0x10008200
 800286c:	40020880 	.word	0x40020880

08002870 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	22ff      	movs	r2, #255	@ 0xff
 800287e:	4013      	ands	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002886:	4694      	mov	ip, r2
 8002888:	4463      	add	r3, ip
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	001a      	movs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3b01      	subs	r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	4013      	ands	r3, r2
 80028a0:	2201      	movs	r2, #1
 80028a2:	409a      	lsls	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	1000823f 	.word	0x1000823f
 80028b4:	40020940 	.word	0x40020940

080028b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028c6:	e14d      	b.n	8002b64 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d100      	bne.n	80028e0 <HAL_GPIO_Init+0x28>
 80028de:	e13e      	b.n	8002b5e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x38>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d125      	bne.n	800293c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	58d3      	ldr	r3, [r2, r3]
 80028fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2207      	movs	r2, #7
 8002902:	4013      	ands	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	409a      	lsls	r2, r3
 800290a:	0013      	movs	r3, r2
 800290c:	43da      	mvns	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4013      	ands	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	220f      	movs	r2, #15
 800291a:	401a      	ands	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2107      	movs	r1, #7
 8002920:	400b      	ands	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	409a      	lsls	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	08da      	lsrs	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3208      	adds	r2, #8
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	6979      	ldr	r1, [r7, #20]
 800293a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	43da      	mvns	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	401a      	ands	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	0013      	movs	r3, r2
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d00b      	beq.n	8002990 <HAL_GPIO_Init+0xd8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002984:	2b11      	cmp	r3, #17
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d130      	bne.n	80029f2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	409a      	lsls	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	43da      	mvns	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4013      	ands	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	409a      	lsls	r2, r3
 80029b2:	0013      	movs	r3, r2
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c6:	2201      	movs	r2, #1
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	409a      	lsls	r2, r3
 80029cc:	0013      	movs	r3, r2
 80029ce:	43da      	mvns	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4013      	ands	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	2201      	movs	r2, #1
 80029de:	401a      	ands	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	409a      	lsls	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d017      	beq.n	8002a2a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	055b      	lsls	r3, r3, #21
 8002a32:	4013      	ands	r3, r2
 8002a34:	d100      	bne.n	8002a38 <HAL_GPIO_Init+0x180>
 8002a36:	e092      	b.n	8002b5e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a38:	4a50      	ldr	r2, [pc, #320]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3318      	adds	r3, #24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	589b      	ldr	r3, [r3, r2]
 8002a44:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	220f      	movs	r2, #15
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	43da      	mvns	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	23a0      	movs	r3, #160	@ 0xa0
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x1d6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <HAL_GPIO_Init+0x2c8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x1d2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a44      	ldr	r2, [pc, #272]	@ (8002b84 <HAL_GPIO_Init+0x2cc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x1ce>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a43      	ldr	r2, [pc, #268]	@ (8002b88 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x1ca>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x1d8>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x1d8>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x1d8>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x1d8>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	2103      	movs	r1, #3
 8002a94:	400a      	ands	r2, r1
 8002a96:	00d2      	lsls	r2, r2, #3
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002aa0:	4936      	ldr	r1, [pc, #216]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002aae:	4a33      	ldr	r2, [pc, #204]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	58d3      	ldr	r3, [r2, r3]
 8002ab4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ad4:	4929      	ldr	r1, [pc, #164]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002ade:	2384      	movs	r3, #132	@ 0x84
 8002ae0:	58d3      	ldr	r3, [r2, r3]
 8002ae2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4013      	ands	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002b02:	491e      	ldr	r1, [pc, #120]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002b04:	2284      	movs	r2, #132	@ 0x84
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4013      	ands	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	035b      	lsls	r3, r3, #13
 8002b22:	4013      	ands	r3, r2
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	039b      	lsls	r3, r3, #14
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_GPIO_Init+0x2c4>)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	3301      	adds	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	40da      	lsrs	r2, r3
 8002b6c:	1e13      	subs	r3, r2, #0
 8002b6e:	d000      	beq.n	8002b72 <HAL_GPIO_Init+0x2ba>
 8002b70:	e6aa      	b.n	80028c8 <HAL_GPIO_Init+0x10>
  }
}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b006      	add	sp, #24
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000800 	.word	0x50000800
 8002b88:	50001400 	.word	0x50001400

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1d0      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_RCC_OscConfig+0x1e>
 8002ba8:	e069      	b.n	8002c7e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4bc8      	ldr	r3, [pc, #800]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2238      	movs	r2, #56	@ 0x38
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d15d      	bne.n	8002c7e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1bc      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_OscConfig+0x56>
 8002bd2:	4bbe      	ldr	r3, [pc, #760]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4bbd      	ldr	r3, [pc, #756]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	0249      	lsls	r1, r1, #9
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e020      	b.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	23a0      	movs	r3, #160	@ 0xa0
 8002be8:	02db      	lsls	r3, r3, #11
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x80>
 8002bee:	4bb7      	ldr	r3, [pc, #732]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4bb6      	ldr	r3, [pc, #728]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	02c9      	lsls	r1, r1, #11
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4bb3      	ldr	r3, [pc, #716]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4bb2      	ldr	r3, [pc, #712]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	0249      	lsls	r1, r1, #9
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0c:	4baf      	ldr	r3, [pc, #700]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4bae      	ldr	r3, [pc, #696]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c12:	49af      	ldr	r1, [pc, #700]	@ (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4bac      	ldr	r3, [pc, #688]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4bab      	ldr	r3, [pc, #684]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c1e:	49ad      	ldr	r1, [pc, #692]	@ (8002ed4 <HAL_RCC_OscConfig+0x348>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d014      	beq.n	8002c56 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f822 	bl	8000c74 <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c36:	f7fe f81d 	bl	8000c74 <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	@ 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e17b      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c48:	4ba0      	ldr	r3, [pc, #640]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0xaa>
 8002c54:	e013      	b.n	8002c7e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe f80d 	bl	8000c74 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c60:	f7fe f808 	bl	8000c74 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e166      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	4b96      	ldr	r3, [pc, #600]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0xfe>
 8002c88:	e086      	b.n	8002d98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b90      	ldr	r3, [pc, #576]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2238      	movs	r2, #56	@ 0x38
 8002c90:	4013      	ands	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d12f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e14c      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a8b      	ldr	r2, [pc, #556]	@ (8002ed8 <HAL_RCC_OscConfig+0x34c>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cc2:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a85      	ldr	r2, [pc, #532]	@ (8002edc <HAL_RCC_OscConfig+0x350>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0adb      	lsrs	r3, r3, #11
 8002cdc:	2207      	movs	r2, #7
 8002cde:	4013      	ands	r3, r2
 8002ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ee0 <HAL_RCC_OscConfig+0x354>)
 8002ce2:	40da      	lsrs	r2, r3
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee4 <HAL_RCC_OscConfig+0x358>)
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCC_OscConfig+0x35c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7fd ff65 	bl	8000bbc <HAL_InitTick>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d050      	beq.n	8002d98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e122      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d030      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d02:	4b72      	ldr	r3, [pc, #456]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x350>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	4b6e      	ldr	r3, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d1c:	2180      	movs	r1, #128	@ 0x80
 8002d1e:	0049      	lsls	r1, r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fd ffa6 	bl	8000c74 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd ffa1 	bl	8000c74 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0ff      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b62      	ldr	r3, [pc, #392]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a61      	ldr	r2, [pc, #388]	@ (8002ed8 <HAL_RCC_OscConfig+0x34c>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	021a      	lsls	r2, r3, #8
 8002d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	e019      	b.n	8002d98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002d64:	4b59      	ldr	r3, [pc, #356]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d6a:	4960      	ldr	r1, [pc, #384]	@ (8002eec <HAL_RCC_OscConfig+0x360>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fd ff80 	bl	8000c74 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d7a:	f7fd ff7b 	bl	8000c74 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0d9      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d042      	beq.n	8002e28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2238      	movs	r2, #56	@ 0x38
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b18      	cmp	r3, #24
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d138      	bne.n	8002e28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0c2      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fd ff51 	bl	8000c74 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002dd8:	f7fd ff4c 	bl	8000c74 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0aa      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f1      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
 8002df4:	e018      	b.n	8002e28 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002df6:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002df8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	438a      	bics	r2, r1
 8002e00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fd ff37 	bl	8000c74 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e0c:	f7fd ff32 	bl	8000c74 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e090      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	d1f1      	bne.n	8002e0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d100      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
 8002e32:	e084      	b.n	8002f3e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2238      	movs	r2, #56	@ 0x38
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d000      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
 8002e50:	e075      	b.n	8002f3e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e074      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2e0>
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x31a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x302>
 8002e74:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e80:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x31a>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d028      	beq.n	8002f00 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fd fee1 	bl	8000c74 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eb6:	e01d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fedc 	bl	8000c74 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef0 <HAL_RCC_OscConfig+0x364>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d915      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e039      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	fffbffff 	.word	0xfffbffff
 8002ed8:	ffff80ff 	.word	0xffff80ff
 8002edc:	ffffc7ff 	.word	0xffffc7ff
 8002ee0:	02dc6c00 	.word	0x02dc6c00
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004
 8002eec:	fffffeff 	.word	0xfffffeff
 8002ef0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <HAL_RCC_OscConfig+0x3bc>)
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0dc      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x32c>
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fd feb8 	bl	8000c74 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd feb3 	bl	8000c74 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_RCC_OscConfig+0x3c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e010      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_RCC_OscConfig+0x3bc>)
 8002f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f22:	2202      	movs	r2, #2
 8002f24:	4013      	ands	r3, r2
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f28:	230f      	movs	r3, #15
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_OscConfig+0x3bc>)
 8002f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f36:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <HAL_RCC_OscConfig+0x3bc>)
 8002f38:	4905      	ldr	r1, [pc, #20]	@ (8002f50 <HAL_RCC_OscConfig+0x3c4>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00001388 	.word	0x00001388
 8002f50:	efffffff 	.word	0xefffffff

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0e9      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b76      	ldr	r3, [pc, #472]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d91e      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b73      	ldr	r3, [pc, #460]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f88:	f7fd fe74 	bl	8000c74 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f90:	e009      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f92:	f7fd fe6f 	bl	8000c74 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4a6a      	ldr	r2, [pc, #424]	@ (8003148 <HAL_RCC_ClockConfig+0x1f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0ca      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa6:	4b67      	ldr	r3, [pc, #412]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2207      	movs	r2, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d017      	beq.n	8002fee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fc8:	4b60      	ldr	r3, [pc, #384]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	@ (8003150 <HAL_RCC_ClockConfig+0x1fc>)
 8002fce:	401a      	ands	r2, r3
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8002fd2:	21b0      	movs	r1, #176	@ 0xb0
 8002fd4:	0109      	lsls	r1, r1, #4
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fda:	4b5c      	ldr	r3, [pc, #368]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4a5d      	ldr	r2, [pc, #372]	@ (8003154 <HAL_RCC_ClockConfig+0x200>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b58      	ldr	r3, [pc, #352]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d055      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002ff8:	4b54      	ldr	r3, [pc, #336]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	221c      	movs	r2, #28
 8002ffe:	4393      	bics	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b51      	ldr	r3, [pc, #324]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003014:	4b4d      	ldr	r3, [pc, #308]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	4013      	ands	r3, r2
 800301e:	d11f      	bne.n	8003060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e08b      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4013      	ands	r3, r2
 8003036:	d113      	bne.n	8003060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07f      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d106      	bne.n	8003052 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003044:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d108      	bne.n	8003060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e074      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003052:	4b3e      	ldr	r3, [pc, #248]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	2202      	movs	r2, #2
 8003058:	4013      	ands	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e06d      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003060:	4b3a      	ldr	r3, [pc, #232]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2207      	movs	r2, #7
 8003066:	4393      	bics	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4b37      	ldr	r3, [pc, #220]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fd fdfe 	bl	8000c74 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307c:	e009      	b.n	8003092 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800307e:	f7fd fdf9 	bl	8000c74 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <HAL_RCC_ClockConfig+0x1f4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e054      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2238      	movs	r2, #56	@ 0x38
 8003098:	401a      	ands	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1ec      	bne.n	800307e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2207      	movs	r2, #7
 80030aa:	4013      	ands	r3, r2
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d21e      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2207      	movs	r2, #7
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030c4:	f7fd fdd6 	bl	8000c74 <HAL_GetTick>
 80030c8:	0003      	movs	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030cc:	e009      	b.n	80030e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fd fdd1 	bl	8000c74 <HAL_GetTick>
 80030d2:	0002      	movs	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <HAL_RCC_ClockConfig+0x1f4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e02c      	b.n	800313c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2207      	movs	r2, #7
 80030e8:	4013      	ands	r3, r2
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_RCC_ClockConfig+0x204>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800310e:	f000 f82b 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003112:	0001      	movs	r1, r0
 8003114:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <HAL_RCC_ClockConfig+0x1f8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	220f      	movs	r2, #15
 800311c:	401a      	ands	r2, r3
 800311e:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <HAL_RCC_ClockConfig+0x208>)
 8003120:	0092      	lsls	r2, r2, #2
 8003122:	58d3      	ldr	r3, [r2, r3]
 8003124:	221f      	movs	r2, #31
 8003126:	4013      	ands	r3, r2
 8003128:	000a      	movs	r2, r1
 800312a:	40da      	lsrs	r2, r3
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_ClockConfig+0x20c>)
 800312e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <HAL_RCC_ClockConfig+0x210>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f7fd fd41 	bl	8000bbc <HAL_InitTick>
 800313a:	0003      	movs	r3, r0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40022000 	.word	0x40022000
 8003148:	00001388 	.word	0x00001388
 800314c:	40021000 	.word	0x40021000
 8003150:	ffff84ff 	.word	0xffff84ff
 8003154:	fffff0ff 	.word	0xfffff0ff
 8003158:	ffff8fff 	.word	0xffff8fff
 800315c:	08004ec0 	.word	0x08004ec0
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800316e:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x78>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2238      	movs	r2, #56	@ 0x38
 8003174:	4013      	ands	r3, r2
 8003176:	d10f      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x78>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0adb      	lsrs	r3, r3, #11
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	2201      	movs	r2, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	0013      	movs	r3, r2
 8003188:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	4815      	ldr	r0, [pc, #84]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800318e:	f7fc ffcd 	bl	800012c <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	e01e      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x78>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2238      	movs	r2, #56	@ 0x38
 800319e:	4013      	ands	r3, r2
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a4:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x80>)
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031aa:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x78>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2238      	movs	r2, #56	@ 0x38
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d103      	bne.n	80031be <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	e00b      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x78>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2238      	movs	r2, #56	@ 0x38
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d103      	bne.n	80031d2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031ca:	23fa      	movs	r3, #250	@ 0xfa
 80031cc:	01db      	lsls	r3, r3, #7
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	e001      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80031d6:	687b      	ldr	r3, [r7, #4]
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	02dc6c00 	.word	0x02dc6c00
 80031e8:	007a1200 	.word	0x007a1200

080031ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b02      	ldr	r3, [pc, #8]	@ (80031fc <HAL_RCC_GetHCLKFreq+0x10>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003204:	f7ff fff2 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003208:	0001      	movs	r1, r0
 800320a:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x28>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b1b      	lsrs	r3, r3, #12
 8003210:	2207      	movs	r2, #7
 8003212:	401a      	ands	r2, r3
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	58d3      	ldr	r3, [r2, r3]
 800321a:	221f      	movs	r2, #31
 800321c:	4013      	ands	r3, r2
 800321e:	40d9      	lsrs	r1, r3
 8003220:	000b      	movs	r3, r1
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08004f00 	.word	0x08004f00

08003230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003238:	2313      	movs	r3, #19
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003240:	2312      	movs	r3, #18
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003254:	e079      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2011      	movs	r0, #17
 8003258:	183b      	adds	r3, r7, r0
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b64      	ldr	r3, [pc, #400]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	055b      	lsls	r3, r3, #21
 8003266:	4013      	ands	r3, r2
 8003268:	d110      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b61      	ldr	r3, [pc, #388]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800326c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800326e:	4b60      	ldr	r3, [pc, #384]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	0549      	lsls	r1, r1, #21
 8003274:	430a      	orrs	r2, r1
 8003276:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003278:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800327a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	055b      	lsls	r3, r3, #21
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	183b      	adds	r3, r7, r0
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800328c:	4b58      	ldr	r3, [pc, #352]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800328e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003290:	23c0      	movs	r3, #192	@ 0xc0
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4013      	ands	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d014      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80032a8:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ac:	4a51      	ldr	r2, [pc, #324]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b2:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032b6:	4b4e      	ldr	r3, [pc, #312]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b8:	2180      	movs	r1, #128	@ 0x80
 80032ba:	0249      	lsls	r1, r1, #9
 80032bc:	430a      	orrs	r2, r1
 80032be:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032c4:	4b4a      	ldr	r3, [pc, #296]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c6:	494c      	ldr	r1, [pc, #304]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80032cc:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d016      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fd fccb 	bl	8000c74 <HAL_GetTick>
 80032de:	0003      	movs	r3, r0
 80032e0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80032e2:	e00c      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fd fcc6 	bl	8000c74 <HAL_GetTick>
 80032e8:	0002      	movs	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a43      	ldr	r2, [pc, #268]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d904      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80032f4:	2313      	movs	r3, #19
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2203      	movs	r2, #3
 80032fa:	701a      	strb	r2, [r3, #0]
          break;
 80032fc:	e004      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80032fe:	4b3c      	ldr	r3, [pc, #240]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d0ed      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003308:	2313      	movs	r3, #19
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003312:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	4a37      	ldr	r2, [pc, #220]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003322:	430a      	orrs	r2, r1
 8003324:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003326:	e005      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	2312      	movs	r3, #18
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2213      	movs	r2, #19
 800332e:	18ba      	adds	r2, r7, r2
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003334:	2311      	movs	r3, #17
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333e:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003342:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003344:	492e      	ldr	r1, [pc, #184]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	400a      	ands	r2, r1
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003354:	4b26      	ldr	r3, [pc, #152]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	2203      	movs	r2, #3
 800335a:	4393      	bics	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	4b23      	ldr	r3, [pc, #140]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003364:	430a      	orrs	r2, r1
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2240      	movs	r2, #64	@ 0x40
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003372:	4b1f      	ldr	r3, [pc, #124]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003382:	430a      	orrs	r2, r1
 8003384:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	01db      	lsls	r3, r3, #7
 800338e:	4013      	ands	r3, r2
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003392:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	0899      	lsrs	r1, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033b0:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da09      	bge.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	22e0      	movs	r2, #224	@ 0xe0
 80033d2:	4393      	bics	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
  }
  return status;
 80033e0:	2312      	movs	r3, #18
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b006      	add	sp, #24
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	40021000 	.word	0x40021000
 80033f4:	fffffcff 	.word	0xfffffcff
 80033f8:	fffeffff 	.word	0xfffeffff
 80033fc:	00001388 	.word	0x00001388
 8003400:	efffffff 	.word	0xefffffff
 8003404:	ffffcfff 	.word	0xffffcfff
 8003408:	ffff3fff 	.word	0xffff3fff

0800340c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e04a      	b.n	80034b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	223d      	movs	r2, #61	@ 0x3d
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223c      	movs	r2, #60	@ 0x3c
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f7fd fa8d 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	@ 0x3d
 800343e:	2102      	movs	r1, #2
 8003440:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f000 f951 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2248      	movs	r2, #72	@ 0x48
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223e      	movs	r2, #62	@ 0x3e
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223f      	movs	r2, #63	@ 0x3f
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2240      	movs	r2, #64	@ 0x40
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2241      	movs	r2, #65	@ 0x41
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2242      	movs	r2, #66	@ 0x42
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2243      	movs	r2, #67	@ 0x43
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2244      	movs	r2, #68	@ 0x44
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2245      	movs	r2, #69	@ 0x45
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2246      	movs	r2, #70	@ 0x46
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2247      	movs	r2, #71	@ 0x47
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223d      	movs	r2, #61	@ 0x3d
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	223d      	movs	r2, #61	@ 0x3d
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e02f      	b.n	8003534 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223d      	movs	r2, #61	@ 0x3d
 80034d8:	2102      	movs	r1, #2
 80034da:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_TIM_Base_Start+0x80>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_Base_Start+0x34>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a15      	ldr	r2, [pc, #84]	@ (8003540 <HAL_TIM_Base_Start+0x84>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d116      	bne.n	800351e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <HAL_TIM_Base_Start+0x88>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d016      	beq.n	8003530 <HAL_TIM_Base_Start+0x74>
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	025b      	lsls	r3, r3, #9
 8003508:	429a      	cmp	r2, r3
 800350a:	d011      	beq.n	8003530 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e008      	b.n	8003530 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	00010007 	.word	0x00010007

08003548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	230f      	movs	r3, #15
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223c      	movs	r2, #60	@ 0x3c
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x20>
 8003564:	2302      	movs	r3, #2
 8003566:	e0bc      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x19a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223c      	movs	r2, #60	@ 0x3c
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	223d      	movs	r2, #61	@ 0x3d
 8003574:	2102      	movs	r1, #2
 8003576:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a5a      	ldr	r2, [pc, #360]	@ (80036ec <HAL_TIM_ConfigClockSource+0x1a4>)
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a59      	ldr	r2, [pc, #356]	@ (80036f0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	@ 0x80
 800359e:	0192      	lsls	r2, r2, #6
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xde>
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	0192      	lsls	r2, r2, #6
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d900      	bls.n	80035ae <HAL_TIM_ConfigClockSource+0x66>
 80035ac:	e088      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	0152      	lsls	r2, r2, #5
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x70>
 80035b6:	e088      	b.n	80036ca <HAL_TIM_ConfigClockSource+0x182>
 80035b8:	2280      	movs	r2, #128	@ 0x80
 80035ba:	0152      	lsls	r2, r2, #5
 80035bc:	4293      	cmp	r3, r2
 80035be:	d900      	bls.n	80035c2 <HAL_TIM_ConfigClockSource+0x7a>
 80035c0:	e07e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035c2:	2b70      	cmp	r3, #112	@ 0x70
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0xb0>
 80035c6:	d900      	bls.n	80035ca <HAL_TIM_ConfigClockSource+0x82>
 80035c8:	e07a      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ca:	2b60      	cmp	r3, #96	@ 0x60
 80035cc:	d04f      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x126>
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x8a>
 80035d0:	e076      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b50      	cmp	r3, #80	@ 0x50
 80035d4:	d03b      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x106>
 80035d6:	d900      	bls.n	80035da <HAL_TIM_ConfigClockSource+0x92>
 80035d8:	e072      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d057      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x146>
 80035de:	d900      	bls.n	80035e2 <HAL_TIM_ConfigClockSource+0x9a>
 80035e0:	e06e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d063      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035e6:	d86b      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d060      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035ec:	d868      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05d      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d05b      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f6:	e063      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	f000 f95c 	bl	80038c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2277      	movs	r2, #119	@ 0x77
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
      break;
 8003624:	e052      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	f000 f945 	bl	80038c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2180      	movs	r1, #128	@ 0x80
 8003646:	01c9      	lsls	r1, r1, #7
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e03e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	001a      	movs	r2, r3
 800365c:	f000 f8b6 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2150      	movs	r1, #80	@ 0x50
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f910 	bl	800388c <TIM_ITRx_SetConfig>
      break;
 800366c:	e02e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	001a      	movs	r2, r3
 800367c:	f000 f8d4 	bl	8003828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2160      	movs	r1, #96	@ 0x60
 8003686:	0018      	movs	r0, r3
 8003688:	f000 f900 	bl	800388c <TIM_ITRx_SetConfig>
      break;
 800368c:	e01e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	001a      	movs	r2, r3
 800369c:	f000 f896 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f8f0 	bl	800388c <TIM_ITRx_SetConfig>
      break;
 80036ac:	e00e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f000 f8e7 	bl	800388c <TIM_ITRx_SetConfig>
      break;
 80036be:	e005      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223d      	movs	r2, #61	@ 0x3d
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	223c      	movs	r2, #60	@ 0x3c
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

  return status;
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	781b      	ldrb	r3, [r3, #0]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	ffceff88 	.word	0xffceff88
 80036f0:	ffff00ff 	.word	0xffff00ff

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2b      	ldr	r2, [pc, #172]	@ (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0x20>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <TIM_Base_SetConfig+0xc4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2270      	movs	r2, #112	@ 0x70
 8003718:	4393      	bics	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <TIM_Base_SetConfig+0xc0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00f      	beq.n	800374e <TIM_Base_SetConfig+0x5a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <TIM_Base_SetConfig+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_Base_SetConfig+0x5a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a20      	ldr	r2, [pc, #128]	@ (80037bc <TIM_Base_SetConfig+0xc8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_Base_SetConfig+0x5a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1f      	ldr	r2, [pc, #124]	@ (80037c0 <TIM_Base_SetConfig+0xcc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_Base_SetConfig+0x5a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1e      	ldr	r2, [pc, #120]	@ (80037c4 <TIM_Base_SetConfig+0xd0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <TIM_Base_SetConfig+0xd4>)
 8003752:	4013      	ands	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2280      	movs	r2, #128	@ 0x80
 8003764:	4393      	bics	r3, r2
 8003766:	001a      	movs	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <TIM_Base_SetConfig+0xc0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0xaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a0b      	ldr	r2, [pc, #44]	@ (80037c0 <TIM_Base_SetConfig+0xcc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0xaa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <TIM_Base_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d103      	bne.n	80037a6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	615a      	str	r2, [r3, #20]
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40002000 	.word	0x40002000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800
 80037c8:	fffffcff 	.word	0xfffffcff

080037cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	2201      	movs	r2, #1
 80037e4:	4393      	bics	r3, r2
 80037e6:	001a      	movs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	22f0      	movs	r2, #240	@ 0xf0
 80037f6:	4393      	bics	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	220a      	movs	r2, #10
 8003808:	4393      	bics	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}

08003828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	2210      	movs	r2, #16
 8003840:	4393      	bics	r3, r2
 8003842:	001a      	movs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <TIM_TI2_ConfigInputStage+0x60>)
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	22a0      	movs	r2, #160	@ 0xa0
 8003864:	4393      	bics	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b006      	add	sp, #24
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	ffff0fff 	.word	0xffff0fff

0800388c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a08      	ldr	r2, [pc, #32]	@ (80038c0 <TIM_ITRx_SetConfig+0x34>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	2207      	movs	r2, #7
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	ffcfff8f 	.word	0xffcfff8f

080038c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <TIM_ETR_SetConfig+0x3c>)
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b006      	add	sp, #24
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	ffff00ff 	.word	0xffff00ff

08003904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	223c      	movs	r2, #60	@ 0x3c
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e04a      	b.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	223c      	movs	r2, #60	@ 0x3c
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223d      	movs	r2, #61	@ 0x3d
 8003928:	2102      	movs	r1, #2
 800392a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1e      	ldr	r2, [pc, #120]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d108      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2270      	movs	r2, #112	@ 0x70
 800395c:	4393      	bics	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a11      	ldr	r2, [pc, #68]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10c      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	4393      	bics	r3, r2
 800398c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223d      	movs	r2, #61	@ 0x3d
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	223c      	movs	r2, #60	@ 0x3c
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	ff0fffff 	.word	0xff0fffff
 80039c4:	40000400 	.word	0x40000400

080039c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e046      	b.n	8003a68 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2288      	movs	r2, #136	@ 0x88
 80039de:	589b      	ldr	r3, [r3, r2]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2284      	movs	r2, #132	@ 0x84
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc ffce 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2288      	movs	r2, #136	@ 0x88
 80039f8:	2124      	movs	r1, #36	@ 0x24
 80039fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2101      	movs	r1, #1
 8003a08:	438a      	bics	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fa4e 	bl	8003eb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 f8cc 	bl	8003bbc <UART_SetConfig>
 8003a24:	0003      	movs	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e01c      	b.n	8003a68 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	490d      	ldr	r1, [pc, #52]	@ (8003a70 <HAL_UART_Init+0xa8>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	212a      	movs	r1, #42	@ 0x2a
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fadd 	bl	8004020 <UART_CheckIdleState>
 8003a66:	0003      	movs	r3, r0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	ffffb7ff 	.word	0xffffb7ff

08003a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	@ 0x28
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	1dbb      	adds	r3, r7, #6
 8003a82:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2288      	movs	r2, #136	@ 0x88
 8003a88:	589b      	ldr	r3, [r3, r2]
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d000      	beq.n	8003a90 <HAL_UART_Transmit+0x1c>
 8003a8e:	e090      	b.n	8003bb2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_Transmit+0x2a>
 8003a96:	1dbb      	adds	r3, r7, #6
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e088      	b.n	8003bb4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	015b      	lsls	r3, r3, #5
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d109      	bne.n	8003ac2 <HAL_UART_Transmit+0x4e>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d001      	beq.n	8003ac2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e078      	b.n	8003bb4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2290      	movs	r2, #144	@ 0x90
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2288      	movs	r2, #136	@ 0x88
 8003ace:	2121      	movs	r1, #33	@ 0x21
 8003ad0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad2:	f7fd f8cf 	bl	8000c74 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1dba      	adds	r2, r7, #6
 8003ade:	2154      	movs	r1, #84	@ 0x54
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1dba      	adds	r2, r7, #6
 8003ae8:	2156      	movs	r1, #86	@ 0x56
 8003aea:	8812      	ldrh	r2, [r2, #0]
 8003aec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	2380      	movs	r3, #128	@ 0x80
 8003af4:	015b      	lsls	r3, r3, #5
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d108      	bne.n	8003b0c <HAL_UART_Transmit+0x98>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e003      	b.n	8003b14 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b14:	e030      	b.n	8003b78 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	0013      	movs	r3, r2
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	f000 fb26 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2288      	movs	r2, #136	@ 0x88
 8003b30:	2120      	movs	r1, #32
 8003b32:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e03d      	b.n	8003bb4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	001a      	movs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	05d2      	lsls	r2, r2, #23
 8003b4a:	0dd2      	lsrs	r2, r2, #23
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	3302      	adds	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e007      	b.n	8003b66 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	3301      	adds	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2256      	movs	r2, #86	@ 0x56
 8003b6a:	5a9b      	ldrh	r3, [r3, r2]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b299      	uxth	r1, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2256      	movs	r2, #86	@ 0x56
 8003b76:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2256      	movs	r2, #86	@ 0x56
 8003b7c:	5a9b      	ldrh	r3, [r3, r2]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1c8      	bne.n	8003b16 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2140      	movs	r1, #64	@ 0x40
 8003b92:	f000 faef 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2288      	movs	r2, #136	@ 0x88
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e006      	b.n	8003bb4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2288      	movs	r2, #136	@ 0x88
 8003baa:	2120      	movs	r1, #32
 8003bac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
  }
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b008      	add	sp, #32
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc4:	231e      	movs	r3, #30
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4aab      	ldr	r2, [pc, #684]	@ (8003e98 <UART_SetConfig+0x2dc>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4aa6      	ldr	r2, [pc, #664]	@ (8003e9c <UART_SetConfig+0x2e0>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a9d      	ldr	r2, [pc, #628]	@ (8003ea0 <UART_SetConfig+0x2e4>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	220f      	movs	r2, #15
 8003c40:	4393      	bics	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a93      	ldr	r2, [pc, #588]	@ (8003ea4 <UART_SetConfig+0x2e8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d127      	bne.n	8003caa <UART_SetConfig+0xee>
 8003c5a:	4b93      	ldr	r3, [pc, #588]	@ (8003ea8 <UART_SetConfig+0x2ec>)
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d017      	beq.n	8003c96 <UART_SetConfig+0xda>
 8003c66:	d81b      	bhi.n	8003ca0 <UART_SetConfig+0xe4>
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d00a      	beq.n	8003c82 <UART_SetConfig+0xc6>
 8003c6c:	d818      	bhi.n	8003ca0 <UART_SetConfig+0xe4>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <UART_SetConfig+0xbc>
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d00a      	beq.n	8003c8c <UART_SetConfig+0xd0>
 8003c76:	e013      	b.n	8003ca0 <UART_SetConfig+0xe4>
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e021      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e01c      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2204      	movs	r2, #4
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e017      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003c96:	231f      	movs	r3, #31
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e012      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003ca0:	231f      	movs	r3, #31
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e00d      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7f      	ldr	r2, [pc, #508]	@ (8003eac <UART_SetConfig+0x2f0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d104      	bne.n	8003cbe <UART_SetConfig+0x102>
 8003cb4:	231f      	movs	r3, #31
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e003      	b.n	8003cc6 <UART_SetConfig+0x10a>
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d000      	beq.n	8003cd4 <UART_SetConfig+0x118>
 8003cd2:	e06f      	b.n	8003db4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003cd4:	231f      	movs	r3, #31
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d01f      	beq.n	8003d1e <UART_SetConfig+0x162>
 8003cde:	dc22      	bgt.n	8003d26 <UART_SetConfig+0x16a>
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d017      	beq.n	8003d14 <UART_SetConfig+0x158>
 8003ce4:	dc1f      	bgt.n	8003d26 <UART_SetConfig+0x16a>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0x134>
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d005      	beq.n	8003cfa <UART_SetConfig+0x13e>
 8003cee:	e01a      	b.n	8003d26 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7ff fa86 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e01c      	b.n	8003d34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea8 <UART_SetConfig+0x2ec>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2207      	movs	r2, #7
 8003d02:	4013      	ands	r3, r2
 8003d04:	3301      	adds	r3, #1
 8003d06:	0019      	movs	r1, r3
 8003d08:	4869      	ldr	r0, [pc, #420]	@ (8003eb0 <UART_SetConfig+0x2f4>)
 8003d0a:	f7fc fa0f 	bl	800012c <__udivsi3>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d14:	f7ff fa28 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	61bb      	str	r3, [r7, #24]
        break;
 8003d1c:	e00a      	b.n	8003d34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1e:	2380      	movs	r3, #128	@ 0x80
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	61bb      	str	r3, [r7, #24]
        break;
 8003d24:	e006      	b.n	8003d34 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2a:	231e      	movs	r3, #30
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
        break;
 8003d32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d100      	bne.n	8003d3c <UART_SetConfig+0x180>
 8003d3a:	e097      	b.n	8003e6c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d40:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb4 <UART_SetConfig+0x2f8>)
 8003d42:	0052      	lsls	r2, r2, #1
 8003d44:	5ad3      	ldrh	r3, [r2, r3]
 8003d46:	0019      	movs	r1, r3
 8003d48:	69b8      	ldr	r0, [r7, #24]
 8003d4a:	f7fc f9ef 	bl	800012c <__udivsi3>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	18d2      	adds	r2, r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0019      	movs	r1, r3
 8003d60:	0010      	movs	r0, r2
 8003d62:	f7fc f9e3 	bl	800012c <__udivsi3>
 8003d66:	0003      	movs	r3, r0
 8003d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	d91c      	bls.n	8003daa <UART_SetConfig+0x1ee>
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d217      	bcs.n	8003daa <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	200e      	movs	r0, #14
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	210f      	movs	r1, #15
 8003d84:	438a      	bics	r2, r1
 8003d86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2207      	movs	r2, #7
 8003d90:	4013      	ands	r3, r2
 8003d92:	b299      	uxth	r1, r3
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	183a      	adds	r2, r7, r0
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	183a      	adds	r2, r7, r0
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e060      	b.n	8003e6c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003daa:	231e      	movs	r3, #30
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e05b      	b.n	8003e6c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db4:	231f      	movs	r3, #31
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d01f      	beq.n	8003dfe <UART_SetConfig+0x242>
 8003dbe:	dc22      	bgt.n	8003e06 <UART_SetConfig+0x24a>
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d017      	beq.n	8003df4 <UART_SetConfig+0x238>
 8003dc4:	dc1f      	bgt.n	8003e06 <UART_SetConfig+0x24a>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <UART_SetConfig+0x214>
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d005      	beq.n	8003dda <UART_SetConfig+0x21e>
 8003dce:	e01a      	b.n	8003e06 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7ff fa16 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	61bb      	str	r3, [r7, #24]
        break;
 8003dd8:	e01c      	b.n	8003e14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003dda:	4b33      	ldr	r3, [pc, #204]	@ (8003ea8 <UART_SetConfig+0x2ec>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2207      	movs	r2, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	3301      	adds	r3, #1
 8003de6:	0019      	movs	r1, r3
 8003de8:	4831      	ldr	r0, [pc, #196]	@ (8003eb0 <UART_SetConfig+0x2f4>)
 8003dea:	f7fc f99f 	bl	800012c <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	61bb      	str	r3, [r7, #24]
        break;
 8003df2:	e00f      	b.n	8003e14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df4:	f7ff f9b8 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	61bb      	str	r3, [r7, #24]
        break;
 8003dfc:	e00a      	b.n	8003e14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e006      	b.n	8003e14 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e0a:	231e      	movs	r3, #30
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
        break;
 8003e12:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e1e:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <UART_SetConfig+0x2f8>)
 8003e20:	0052      	lsls	r2, r2, #1
 8003e22:	5ad3      	ldrh	r3, [r2, r3]
 8003e24:	0019      	movs	r1, r3
 8003e26:	69b8      	ldr	r0, [r7, #24]
 8003e28:	f7fc f980 	bl	800012c <__udivsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	001a      	movs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	0010      	movs	r0, r2
 8003e40:	f7fc f974 	bl	800012c <__udivsi3>
 8003e44:	0003      	movs	r3, r0
 8003e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d90a      	bls.n	8003e64 <UART_SetConfig+0x2a8>
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	025b      	lsls	r3, r3, #9
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d205      	bcs.n	8003e64 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e003      	b.n	8003e6c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e64:	231e      	movs	r3, #30
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	226a      	movs	r2, #106	@ 0x6a
 8003e70:	2101      	movs	r1, #1
 8003e72:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2268      	movs	r2, #104	@ 0x68
 8003e78:	2101      	movs	r1, #1
 8003e7a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e88:	231e      	movs	r3, #30
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b008      	add	sp, #32
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	cfff69f3 	.word	0xcfff69f3
 8003e9c:	ffffcfff 	.word	0xffffcfff
 8003ea0:	11fff4ff 	.word	0x11fff4ff
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40004400 	.word	0x40004400
 8003eb0:	02dc6c00 	.word	0x02dc6c00
 8003eb4:	08004f20 	.word	0x08004f20

08003eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ffc <UART_AdvFeatureConfig+0x144>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a43      	ldr	r2, [pc, #268]	@ (8004000 <UART_AdvFeatureConfig+0x148>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a3b      	ldr	r2, [pc, #236]	@ (8004004 <UART_AdvFeatureConfig+0x14c>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a34      	ldr	r2, [pc, #208]	@ (8004008 <UART_AdvFeatureConfig+0x150>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	@ (800400c <UART_AdvFeatureConfig+0x154>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	2220      	movs	r2, #32
 8003f70:	4013      	ands	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <UART_AdvFeatureConfig+0x158>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	2240      	movs	r2, #64	@ 0x40
 8003f92:	4013      	ands	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <UART_AdvFeatureConfig+0x15c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	035b      	lsls	r3, r3, #13
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10b      	bne.n	8003fd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <UART_AdvFeatureConfig+0x160>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	2280      	movs	r2, #128	@ 0x80
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800401c <UART_AdvFeatureConfig+0x164>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	ffff7fff 	.word	0xffff7fff
 8004000:	fffdffff 	.word	0xfffdffff
 8004004:	fffeffff 	.word	0xfffeffff
 8004008:	fffbffff 	.word	0xfffbffff
 800400c:	ffffefff 	.word	0xffffefff
 8004010:	ffffdfff 	.word	0xffffdfff
 8004014:	ffefffff 	.word	0xffefffff
 8004018:	ff9fffff 	.word	0xff9fffff
 800401c:	fff7ffff 	.word	0xfff7ffff

08004020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b092      	sub	sp, #72	@ 0x48
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2290      	movs	r2, #144	@ 0x90
 800402c:	2100      	movs	r1, #0
 800402e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004030:	f7fc fe20 	bl	8000c74 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2208      	movs	r2, #8
 8004040:	4013      	ands	r3, r2
 8004042:	2b08      	cmp	r3, #8
 8004044:	d12d      	bne.n	80040a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	2280      	movs	r2, #128	@ 0x80
 800404a:	0391      	lsls	r1, r2, #14
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4a47      	ldr	r2, [pc, #284]	@ (800416c <UART_CheckIdleState+0x14c>)
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	2200      	movs	r2, #0
 8004054:	f000 f88e 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d022      	beq.n	80040a2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004066:	2301      	movs	r3, #1
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2180      	movs	r1, #128	@ 0x80
 800407e:	438a      	bics	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2288      	movs	r2, #136	@ 0x88
 8004092:	2120      	movs	r1, #32
 8004094:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2284      	movs	r2, #132	@ 0x84
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e060      	b.n	8004164 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2204      	movs	r2, #4
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d146      	bne.n	800413e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	03d1      	lsls	r1, r2, #15
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <UART_CheckIdleState+0x14c>)
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	f000 f859 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80040c2:	1e03      	subs	r3, r0, #0
 80040c4:	d03b      	beq.n	800413e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040c6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80040cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4922      	ldr	r1, [pc, #136]	@ (8004170 <UART_CheckIdleState+0x150>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040f8:	f3ef 8310 	mrs	r3, PRIMASK
 80040fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80040fe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	633b      	str	r3, [r7, #48]	@ 0x30
 8004102:	2301      	movs	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f383 8810 	msr	PRIMASK, r3
}
 800410c:	46c0      	nop			@ (mov r8, r8)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	438a      	bics	r2, r1
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	228c      	movs	r2, #140	@ 0x8c
 800412e:	2120      	movs	r1, #32
 8004130:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2284      	movs	r2, #132	@ 0x84
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e012      	b.n	8004164 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2288      	movs	r2, #136	@ 0x88
 8004142:	2120      	movs	r1, #32
 8004144:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	228c      	movs	r2, #140	@ 0x8c
 800414a:	2120      	movs	r1, #32
 800414c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2284      	movs	r2, #132	@ 0x84
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b010      	add	sp, #64	@ 0x40
 800416a:	bd80      	pop	{r7, pc}
 800416c:	01ffffff 	.word	0x01ffffff
 8004170:	fffffedf 	.word	0xfffffedf

08004174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	e04b      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	3301      	adds	r3, #1
 800418a:	d048      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fc fd72 	bl	8000c74 <HAL_GetTick>
 8004190:	0002      	movs	r2, r0
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e04b      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
 80041b0:	d035      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2208      	movs	r2, #8
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d111      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2208      	movs	r2, #8
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f83c 	bl	8004248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2290      	movs	r2, #144	@ 0x90
 80041d4:	2108      	movs	r1, #8
 80041d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2284      	movs	r2, #132	@ 0x84
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e02c      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	401a      	ands	r2, r3
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d112      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f81f 	bl	8004248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2290      	movs	r2, #144	@ 0x90
 800420e:	2120      	movs	r1, #32
 8004210:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2284      	movs	r2, #132	@ 0x84
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e00f      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	425a      	negs	r2, r3
 800422e:	4153      	adcs	r3, r2
 8004230:	b2db      	uxtb	r3, r3
 8004232:	001a      	movs	r2, r3
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d0a4      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b004      	add	sp, #16
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	@ 0x38
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	617b      	str	r3, [r7, #20]
  return(result);
 8004256:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
 800425a:	2301      	movs	r3, #1
 800425c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4926      	ldr	r1, [pc, #152]	@ (800430c <UART_EndRxTransfer+0xc4>)
 8004272:	400a      	ands	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
 8004286:	623b      	str	r3, [r7, #32]
  return(result);
 8004288:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
 800428c:	2301      	movs	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	491b      	ldr	r1, [pc, #108]	@ (8004310 <UART_EndRxTransfer+0xc8>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d118      	bne.n	80042ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042bc:	f3ef 8310 	mrs	r3, PRIMASK
 80042c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	2301      	movs	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2110      	movs	r1, #16
 80042de:	438a      	bics	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f383 8810 	msr	PRIMASK, r3
}
 80042ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	228c      	movs	r2, #140	@ 0x8c
 80042f2:	2120      	movs	r1, #32
 80042f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b00e      	add	sp, #56	@ 0x38
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	fffffedf 	.word	0xfffffedf
 8004310:	effffffe 	.word	0xeffffffe

08004314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2284      	movs	r2, #132	@ 0x84
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UARTEx_DisableFifoMode+0x16>
 8004326:	2302      	movs	r3, #2
 8004328:	e027      	b.n	800437a <HAL_UARTEx_DisableFifoMode+0x66>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2284      	movs	r2, #132	@ 0x84
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2288      	movs	r2, #136	@ 0x88
 8004336:	2124      	movs	r1, #36	@ 0x24
 8004338:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2101      	movs	r1, #1
 800434e:	438a      	bics	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a0b      	ldr	r2, [pc, #44]	@ (8004384 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2288      	movs	r2, #136	@ 0x88
 800436c:	2120      	movs	r1, #32
 800436e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2284      	movs	r2, #132	@ 0x84
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	dfffffff 	.word	0xdfffffff

08004388 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2284      	movs	r2, #132	@ 0x84
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e02e      	b.n	80043fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2284      	movs	r2, #132	@ 0x84
 80043a4:	2101      	movs	r1, #1
 80043a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2288      	movs	r2, #136	@ 0x88
 80043ac:	2124      	movs	r1, #36	@ 0x24
 80043ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	438a      	bics	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	08d9      	lsrs	r1, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 f854 	bl	800448c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2288      	movs	r2, #136	@ 0x88
 80043f0:	2120      	movs	r1, #32
 80043f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2284      	movs	r2, #132	@ 0x84
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2284      	movs	r2, #132	@ 0x84
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800441c:	2302      	movs	r3, #2
 800441e:	e02f      	b.n	8004480 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2284      	movs	r2, #132	@ 0x84
 8004424:	2101      	movs	r1, #1
 8004426:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2288      	movs	r2, #136	@ 0x88
 800442c:	2124      	movs	r1, #36	@ 0x24
 800442e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	438a      	bics	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	4a0e      	ldr	r2, [pc, #56]	@ (8004488 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 f813 	bl	800448c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2288      	movs	r2, #136	@ 0x88
 8004472:	2120      	movs	r1, #32
 8004474:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2284      	movs	r2, #132	@ 0x84
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}
 8004488:	f1ffffff 	.word	0xf1ffffff

0800448c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004498:	2b00      	cmp	r3, #0
 800449a:	d108      	bne.n	80044ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	226a      	movs	r2, #106	@ 0x6a
 80044a0:	2101      	movs	r1, #1
 80044a2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2268      	movs	r2, #104	@ 0x68
 80044a8:	2101      	movs	r1, #1
 80044aa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044ac:	e043      	b.n	8004536 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ae:	260f      	movs	r6, #15
 80044b0:	19bb      	adds	r3, r7, r6
 80044b2:	2208      	movs	r2, #8
 80044b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044b6:	200e      	movs	r0, #14
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	0e5b      	lsrs	r3, r3, #25
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	240d      	movs	r4, #13
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	2107      	movs	r1, #7
 80044ce:	400a      	ands	r2, r1
 80044d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	0f5b      	lsrs	r3, r3, #29
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	250c      	movs	r5, #12
 80044de:	197b      	adds	r3, r7, r5
 80044e0:	2107      	movs	r1, #7
 80044e2:	400a      	ands	r2, r1
 80044e4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	197a      	adds	r2, r7, r5
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	4914      	ldr	r1, [pc, #80]	@ (8004540 <UARTEx_SetNbDataToProcess+0xb4>)
 80044f0:	5c8a      	ldrb	r2, [r1, r2]
 80044f2:	435a      	muls	r2, r3
 80044f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80044f6:	197b      	adds	r3, r7, r5
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <UARTEx_SetNbDataToProcess+0xb8>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044fe:	0019      	movs	r1, r3
 8004500:	f7fb fe9e 	bl	8000240 <__divsi3>
 8004504:	0003      	movs	r3, r0
 8004506:	b299      	uxth	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	226a      	movs	r2, #106	@ 0x6a
 800450c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800450e:	19bb      	adds	r3, r7, r6
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	193a      	adds	r2, r7, r4
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	490a      	ldr	r1, [pc, #40]	@ (8004540 <UARTEx_SetNbDataToProcess+0xb4>)
 8004518:	5c8a      	ldrb	r2, [r1, r2]
 800451a:	435a      	muls	r2, r3
 800451c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800451e:	193b      	adds	r3, r7, r4
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <UARTEx_SetNbDataToProcess+0xb8>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004526:	0019      	movs	r1, r3
 8004528:	f7fb fe8a 	bl	8000240 <__divsi3>
 800452c:	0003      	movs	r3, r0
 800452e:	b299      	uxth	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2268      	movs	r2, #104	@ 0x68
 8004534:	5299      	strh	r1, [r3, r2]
}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b005      	add	sp, #20
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	08004f38 	.word	0x08004f38
 8004544:	08004f40 	.word	0x08004f40

08004548 <siprintf>:
 8004548:	b40e      	push	{r1, r2, r3}
 800454a:	b500      	push	{lr}
 800454c:	490b      	ldr	r1, [pc, #44]	@ (800457c <siprintf+0x34>)
 800454e:	b09c      	sub	sp, #112	@ 0x70
 8004550:	ab1d      	add	r3, sp, #116	@ 0x74
 8004552:	9002      	str	r0, [sp, #8]
 8004554:	9006      	str	r0, [sp, #24]
 8004556:	9107      	str	r1, [sp, #28]
 8004558:	9104      	str	r1, [sp, #16]
 800455a:	4809      	ldr	r0, [pc, #36]	@ (8004580 <siprintf+0x38>)
 800455c:	4909      	ldr	r1, [pc, #36]	@ (8004584 <siprintf+0x3c>)
 800455e:	cb04      	ldmia	r3!, {r2}
 8004560:	9105      	str	r1, [sp, #20]
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	a902      	add	r1, sp, #8
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	f000 f99e 	bl	80048a8 <_svfiprintf_r>
 800456c:	2200      	movs	r2, #0
 800456e:	9b02      	ldr	r3, [sp, #8]
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	b01c      	add	sp, #112	@ 0x70
 8004574:	bc08      	pop	{r3}
 8004576:	b003      	add	sp, #12
 8004578:	4718      	bx	r3
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	7fffffff 	.word	0x7fffffff
 8004580:	2000000c 	.word	0x2000000c
 8004584:	ffff0208 	.word	0xffff0208

08004588 <memset>:
 8004588:	0003      	movs	r3, r0
 800458a:	1882      	adds	r2, r0, r2
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	7019      	strb	r1, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <__errno>:
 8004598:	4b01      	ldr	r3, [pc, #4]	@ (80045a0 <__errno+0x8>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	2600      	movs	r6, #0
 80045a8:	4c0c      	ldr	r4, [pc, #48]	@ (80045dc <__libc_init_array+0x38>)
 80045aa:	4d0d      	ldr	r5, [pc, #52]	@ (80045e0 <__libc_init_array+0x3c>)
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	2600      	movs	r6, #0
 80045b6:	f000 fc65 	bl	8004e84 <_init>
 80045ba:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <__libc_init_array+0x40>)
 80045bc:	4d0a      	ldr	r5, [pc, #40]	@ (80045e8 <__libc_init_array+0x44>)
 80045be:	1b64      	subs	r4, r4, r5
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	00b3      	lsls	r3, r6, #2
 80045ca:	58eb      	ldr	r3, [r5, r3]
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	00b3      	lsls	r3, r6, #2
 80045d4:	58eb      	ldr	r3, [r5, r3]
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	08004f7c 	.word	0x08004f7c
 80045e0:	08004f7c 	.word	0x08004f7c
 80045e4:	08004f80 	.word	0x08004f80
 80045e8:	08004f7c 	.word	0x08004f7c

080045ec <__retarget_lock_acquire_recursive>:
 80045ec:	4770      	bx	lr

080045ee <__retarget_lock_release_recursive>:
 80045ee:	4770      	bx	lr

080045f0 <_free_r>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	0005      	movs	r5, r0
 80045f4:	1e0c      	subs	r4, r1, #0
 80045f6:	d010      	beq.n	800461a <_free_r+0x2a>
 80045f8:	3c04      	subs	r4, #4
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da00      	bge.n	8004602 <_free_r+0x12>
 8004600:	18e4      	adds	r4, r4, r3
 8004602:	0028      	movs	r0, r5
 8004604:	f000 f8e0 	bl	80047c8 <__malloc_lock>
 8004608:	4a1d      	ldr	r2, [pc, #116]	@ (8004680 <_free_r+0x90>)
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <_free_r+0x2c>
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	6014      	str	r4, [r2, #0]
 8004614:	0028      	movs	r0, r5
 8004616:	f000 f8df 	bl	80047d8 <__malloc_unlock>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	42a3      	cmp	r3, r4
 800461e:	d908      	bls.n	8004632 <_free_r+0x42>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	1821      	adds	r1, r4, r0
 8004624:	428b      	cmp	r3, r1
 8004626:	d1f3      	bne.n	8004610 <_free_r+0x20>
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	1809      	adds	r1, r1, r0
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	e7ee      	b.n	8004610 <_free_r+0x20>
 8004632:	001a      	movs	r2, r3
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <_free_r+0x4e>
 800463a:	42a3      	cmp	r3, r4
 800463c:	d9f9      	bls.n	8004632 <_free_r+0x42>
 800463e:	6811      	ldr	r1, [r2, #0]
 8004640:	1850      	adds	r0, r2, r1
 8004642:	42a0      	cmp	r0, r4
 8004644:	d10b      	bne.n	800465e <_free_r+0x6e>
 8004646:	6820      	ldr	r0, [r4, #0]
 8004648:	1809      	adds	r1, r1, r0
 800464a:	1850      	adds	r0, r2, r1
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	4283      	cmp	r3, r0
 8004650:	d1e0      	bne.n	8004614 <_free_r+0x24>
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	1841      	adds	r1, r0, r1
 8004658:	6011      	str	r1, [r2, #0]
 800465a:	6053      	str	r3, [r2, #4]
 800465c:	e7da      	b.n	8004614 <_free_r+0x24>
 800465e:	42a0      	cmp	r0, r4
 8004660:	d902      	bls.n	8004668 <_free_r+0x78>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d5      	b.n	8004614 <_free_r+0x24>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	d103      	bne.n	8004678 <_free_r+0x88>
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	1809      	adds	r1, r1, r0
 8004676:	6021      	str	r1, [r4, #0]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	6054      	str	r4, [r2, #4]
 800467c:	e7ca      	b.n	8004614 <_free_r+0x24>
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	20000368 	.word	0x20000368

08004684 <sbrk_aligned>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4e0f      	ldr	r6, [pc, #60]	@ (80046c4 <sbrk_aligned+0x40>)
 8004688:	000d      	movs	r5, r1
 800468a:	6831      	ldr	r1, [r6, #0]
 800468c:	0004      	movs	r4, r0
 800468e:	2900      	cmp	r1, #0
 8004690:	d102      	bne.n	8004698 <sbrk_aligned+0x14>
 8004692:	f000 fb99 	bl	8004dc8 <_sbrk_r>
 8004696:	6030      	str	r0, [r6, #0]
 8004698:	0029      	movs	r1, r5
 800469a:	0020      	movs	r0, r4
 800469c:	f000 fb94 	bl	8004dc8 <_sbrk_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d103      	bne.n	80046ac <sbrk_aligned+0x28>
 80046a4:	2501      	movs	r5, #1
 80046a6:	426d      	negs	r5, r5
 80046a8:	0028      	movs	r0, r5
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	2303      	movs	r3, #3
 80046ae:	1cc5      	adds	r5, r0, #3
 80046b0:	439d      	bics	r5, r3
 80046b2:	42a8      	cmp	r0, r5
 80046b4:	d0f8      	beq.n	80046a8 <sbrk_aligned+0x24>
 80046b6:	1a29      	subs	r1, r5, r0
 80046b8:	0020      	movs	r0, r4
 80046ba:	f000 fb85 	bl	8004dc8 <_sbrk_r>
 80046be:	3001      	adds	r0, #1
 80046c0:	d1f2      	bne.n	80046a8 <sbrk_aligned+0x24>
 80046c2:	e7ef      	b.n	80046a4 <sbrk_aligned+0x20>
 80046c4:	20000364 	.word	0x20000364

080046c8 <_malloc_r>:
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	2203      	movs	r2, #3
 80046cc:	1ccb      	adds	r3, r1, #3
 80046ce:	4393      	bics	r3, r2
 80046d0:	3308      	adds	r3, #8
 80046d2:	0005      	movs	r5, r0
 80046d4:	001f      	movs	r7, r3
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d234      	bcs.n	8004744 <_malloc_r+0x7c>
 80046da:	270c      	movs	r7, #12
 80046dc:	42b9      	cmp	r1, r7
 80046de:	d833      	bhi.n	8004748 <_malloc_r+0x80>
 80046e0:	0028      	movs	r0, r5
 80046e2:	f000 f871 	bl	80047c8 <__malloc_lock>
 80046e6:	4e37      	ldr	r6, [pc, #220]	@ (80047c4 <_malloc_r+0xfc>)
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	001c      	movs	r4, r3
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	d12f      	bne.n	8004750 <_malloc_r+0x88>
 80046f0:	0039      	movs	r1, r7
 80046f2:	0028      	movs	r0, r5
 80046f4:	f7ff ffc6 	bl	8004684 <sbrk_aligned>
 80046f8:	0004      	movs	r4, r0
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	d15f      	bne.n	80047be <_malloc_r+0xf6>
 80046fe:	6834      	ldr	r4, [r6, #0]
 8004700:	9400      	str	r4, [sp, #0]
 8004702:	9b00      	ldr	r3, [sp, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d14a      	bne.n	800479e <_malloc_r+0xd6>
 8004708:	2c00      	cmp	r4, #0
 800470a:	d052      	beq.n	80047b2 <_malloc_r+0xea>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	0028      	movs	r0, r5
 8004710:	18e3      	adds	r3, r4, r3
 8004712:	9900      	ldr	r1, [sp, #0]
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	f000 fb57 	bl	8004dc8 <_sbrk_r>
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	4283      	cmp	r3, r0
 800471e:	d148      	bne.n	80047b2 <_malloc_r+0xea>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	0028      	movs	r0, r5
 8004724:	1aff      	subs	r7, r7, r3
 8004726:	0039      	movs	r1, r7
 8004728:	f7ff ffac 	bl	8004684 <sbrk_aligned>
 800472c:	3001      	adds	r0, #1
 800472e:	d040      	beq.n	80047b2 <_malloc_r+0xea>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	19db      	adds	r3, r3, r7
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	6833      	ldr	r3, [r6, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	2a00      	cmp	r2, #0
 800473c:	d133      	bne.n	80047a6 <_malloc_r+0xde>
 800473e:	9b00      	ldr	r3, [sp, #0]
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	e019      	b.n	8004778 <_malloc_r+0xb0>
 8004744:	2b00      	cmp	r3, #0
 8004746:	dac9      	bge.n	80046dc <_malloc_r+0x14>
 8004748:	230c      	movs	r3, #12
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	2000      	movs	r0, #0
 800474e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004750:	6821      	ldr	r1, [r4, #0]
 8004752:	1bc9      	subs	r1, r1, r7
 8004754:	d420      	bmi.n	8004798 <_malloc_r+0xd0>
 8004756:	290b      	cmp	r1, #11
 8004758:	d90a      	bls.n	8004770 <_malloc_r+0xa8>
 800475a:	19e2      	adds	r2, r4, r7
 800475c:	6027      	str	r7, [r4, #0]
 800475e:	42a3      	cmp	r3, r4
 8004760:	d104      	bne.n	800476c <_malloc_r+0xa4>
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	6011      	str	r1, [r2, #0]
 8004768:	6053      	str	r3, [r2, #4]
 800476a:	e005      	b.n	8004778 <_malloc_r+0xb0>
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	e7f9      	b.n	8004764 <_malloc_r+0x9c>
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	42a3      	cmp	r3, r4
 8004774:	d10e      	bne.n	8004794 <_malloc_r+0xcc>
 8004776:	6032      	str	r2, [r6, #0]
 8004778:	0028      	movs	r0, r5
 800477a:	f000 f82d 	bl	80047d8 <__malloc_unlock>
 800477e:	0020      	movs	r0, r4
 8004780:	2207      	movs	r2, #7
 8004782:	300b      	adds	r0, #11
 8004784:	1d23      	adds	r3, r4, #4
 8004786:	4390      	bics	r0, r2
 8004788:	1ac2      	subs	r2, r0, r3
 800478a:	4298      	cmp	r0, r3
 800478c:	d0df      	beq.n	800474e <_malloc_r+0x86>
 800478e:	1a1b      	subs	r3, r3, r0
 8004790:	50a3      	str	r3, [r4, r2]
 8004792:	e7dc      	b.n	800474e <_malloc_r+0x86>
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e7ef      	b.n	8004778 <_malloc_r+0xb0>
 8004798:	0023      	movs	r3, r4
 800479a:	6864      	ldr	r4, [r4, #4]
 800479c:	e7a6      	b.n	80046ec <_malloc_r+0x24>
 800479e:	9c00      	ldr	r4, [sp, #0]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	e7ad      	b.n	8004702 <_malloc_r+0x3a>
 80047a6:	001a      	movs	r2, r3
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d1fb      	bne.n	80047a6 <_malloc_r+0xde>
 80047ae:	2300      	movs	r3, #0
 80047b0:	e7da      	b.n	8004768 <_malloc_r+0xa0>
 80047b2:	230c      	movs	r3, #12
 80047b4:	0028      	movs	r0, r5
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	f000 f80e 	bl	80047d8 <__malloc_unlock>
 80047bc:	e7c6      	b.n	800474c <_malloc_r+0x84>
 80047be:	6007      	str	r7, [r0, #0]
 80047c0:	e7da      	b.n	8004778 <_malloc_r+0xb0>
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	20000368 	.word	0x20000368

080047c8 <__malloc_lock>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4802      	ldr	r0, [pc, #8]	@ (80047d4 <__malloc_lock+0xc>)
 80047cc:	f7ff ff0e 	bl	80045ec <__retarget_lock_acquire_recursive>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	20000360 	.word	0x20000360

080047d8 <__malloc_unlock>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	4802      	ldr	r0, [pc, #8]	@ (80047e4 <__malloc_unlock+0xc>)
 80047dc:	f7ff ff07 	bl	80045ee <__retarget_lock_release_recursive>
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	20000360 	.word	0x20000360

080047e8 <__ssputs_r>:
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	688e      	ldr	r6, [r1, #8]
 80047ec:	b085      	sub	sp, #20
 80047ee:	001f      	movs	r7, r3
 80047f0:	000c      	movs	r4, r1
 80047f2:	680b      	ldr	r3, [r1, #0]
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	9203      	str	r2, [sp, #12]
 80047f8:	42be      	cmp	r6, r7
 80047fa:	d830      	bhi.n	800485e <__ssputs_r+0x76>
 80047fc:	210c      	movs	r1, #12
 80047fe:	5e62      	ldrsh	r2, [r4, r1]
 8004800:	2190      	movs	r1, #144	@ 0x90
 8004802:	00c9      	lsls	r1, r1, #3
 8004804:	420a      	tst	r2, r1
 8004806:	d028      	beq.n	800485a <__ssputs_r+0x72>
 8004808:	2003      	movs	r0, #3
 800480a:	6921      	ldr	r1, [r4, #16]
 800480c:	1a5b      	subs	r3, r3, r1
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6963      	ldr	r3, [r4, #20]
 8004812:	4343      	muls	r3, r0
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	0fdd      	lsrs	r5, r3, #31
 8004818:	18ed      	adds	r5, r5, r3
 800481a:	1c7b      	adds	r3, r7, #1
 800481c:	181b      	adds	r3, r3, r0
 800481e:	106d      	asrs	r5, r5, #1
 8004820:	42ab      	cmp	r3, r5
 8004822:	d900      	bls.n	8004826 <__ssputs_r+0x3e>
 8004824:	001d      	movs	r5, r3
 8004826:	0552      	lsls	r2, r2, #21
 8004828:	d528      	bpl.n	800487c <__ssputs_r+0x94>
 800482a:	0029      	movs	r1, r5
 800482c:	9802      	ldr	r0, [sp, #8]
 800482e:	f7ff ff4b 	bl	80046c8 <_malloc_r>
 8004832:	1e06      	subs	r6, r0, #0
 8004834:	d02c      	beq.n	8004890 <__ssputs_r+0xa8>
 8004836:	9a01      	ldr	r2, [sp, #4]
 8004838:	6921      	ldr	r1, [r4, #16]
 800483a:	f000 fae2 	bl	8004e02 <memcpy>
 800483e:	89a2      	ldrh	r2, [r4, #12]
 8004840:	4b18      	ldr	r3, [pc, #96]	@ (80048a4 <__ssputs_r+0xbc>)
 8004842:	401a      	ands	r2, r3
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	4313      	orrs	r3, r2
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	9b01      	ldr	r3, [sp, #4]
 800484c:	6126      	str	r6, [r4, #16]
 800484e:	18f6      	adds	r6, r6, r3
 8004850:	6026      	str	r6, [r4, #0]
 8004852:	003e      	movs	r6, r7
 8004854:	6165      	str	r5, [r4, #20]
 8004856:	1aed      	subs	r5, r5, r3
 8004858:	60a5      	str	r5, [r4, #8]
 800485a:	42be      	cmp	r6, r7
 800485c:	d900      	bls.n	8004860 <__ssputs_r+0x78>
 800485e:	003e      	movs	r6, r7
 8004860:	0032      	movs	r2, r6
 8004862:	9903      	ldr	r1, [sp, #12]
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	f000 fa9b 	bl	8004da0 <memmove>
 800486a:	2000      	movs	r0, #0
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	1b9b      	subs	r3, r3, r6
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	199b      	adds	r3, r3, r6
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	b005      	add	sp, #20
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487c:	002a      	movs	r2, r5
 800487e:	9802      	ldr	r0, [sp, #8]
 8004880:	f000 fac8 	bl	8004e14 <_realloc_r>
 8004884:	1e06      	subs	r6, r0, #0
 8004886:	d1e0      	bne.n	800484a <__ssputs_r+0x62>
 8004888:	6921      	ldr	r1, [r4, #16]
 800488a:	9802      	ldr	r0, [sp, #8]
 800488c:	f7ff feb0 	bl	80045f0 <_free_r>
 8004890:	230c      	movs	r3, #12
 8004892:	2001      	movs	r0, #1
 8004894:	9a02      	ldr	r2, [sp, #8]
 8004896:	4240      	negs	r0, r0
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	89a2      	ldrh	r2, [r4, #12]
 800489c:	3334      	adds	r3, #52	@ 0x34
 800489e:	4313      	orrs	r3, r2
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	e7e9      	b.n	8004878 <__ssputs_r+0x90>
 80048a4:	fffffb7f 	.word	0xfffffb7f

080048a8 <_svfiprintf_r>:
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b0a1      	sub	sp, #132	@ 0x84
 80048ac:	9003      	str	r0, [sp, #12]
 80048ae:	001d      	movs	r5, r3
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	000f      	movs	r7, r1
 80048b4:	0016      	movs	r6, r2
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	d511      	bpl.n	80048de <_svfiprintf_r+0x36>
 80048ba:	690b      	ldr	r3, [r1, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10e      	bne.n	80048de <_svfiprintf_r+0x36>
 80048c0:	2140      	movs	r1, #64	@ 0x40
 80048c2:	f7ff ff01 	bl	80046c8 <_malloc_r>
 80048c6:	6038      	str	r0, [r7, #0]
 80048c8:	6138      	str	r0, [r7, #16]
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d105      	bne.n	80048da <_svfiprintf_r+0x32>
 80048ce:	230c      	movs	r3, #12
 80048d0:	9a03      	ldr	r2, [sp, #12]
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	2001      	movs	r0, #1
 80048d6:	4240      	negs	r0, r0
 80048d8:	e0cf      	b.n	8004a7a <_svfiprintf_r+0x1d2>
 80048da:	2340      	movs	r3, #64	@ 0x40
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	2300      	movs	r3, #0
 80048e0:	ac08      	add	r4, sp, #32
 80048e2:	6163      	str	r3, [r4, #20]
 80048e4:	3320      	adds	r3, #32
 80048e6:	7663      	strb	r3, [r4, #25]
 80048e8:	3310      	adds	r3, #16
 80048ea:	76a3      	strb	r3, [r4, #26]
 80048ec:	9507      	str	r5, [sp, #28]
 80048ee:	0035      	movs	r5, r6
 80048f0:	782b      	ldrb	r3, [r5, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <_svfiprintf_r+0x52>
 80048f6:	2b25      	cmp	r3, #37	@ 0x25
 80048f8:	d148      	bne.n	800498c <_svfiprintf_r+0xe4>
 80048fa:	1bab      	subs	r3, r5, r6
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	42b5      	cmp	r5, r6
 8004900:	d00b      	beq.n	800491a <_svfiprintf_r+0x72>
 8004902:	0032      	movs	r2, r6
 8004904:	0039      	movs	r1, r7
 8004906:	9803      	ldr	r0, [sp, #12]
 8004908:	f7ff ff6e 	bl	80047e8 <__ssputs_r>
 800490c:	3001      	adds	r0, #1
 800490e:	d100      	bne.n	8004912 <_svfiprintf_r+0x6a>
 8004910:	e0ae      	b.n	8004a70 <_svfiprintf_r+0x1c8>
 8004912:	6963      	ldr	r3, [r4, #20]
 8004914:	9a05      	ldr	r2, [sp, #20]
 8004916:	189b      	adds	r3, r3, r2
 8004918:	6163      	str	r3, [r4, #20]
 800491a:	782b      	ldrb	r3, [r5, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d100      	bne.n	8004922 <_svfiprintf_r+0x7a>
 8004920:	e0a6      	b.n	8004a70 <_svfiprintf_r+0x1c8>
 8004922:	2201      	movs	r2, #1
 8004924:	2300      	movs	r3, #0
 8004926:	4252      	negs	r2, r2
 8004928:	6062      	str	r2, [r4, #4]
 800492a:	a904      	add	r1, sp, #16
 800492c:	3254      	adds	r2, #84	@ 0x54
 800492e:	1852      	adds	r2, r2, r1
 8004930:	1c6e      	adds	r6, r5, #1
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	60e3      	str	r3, [r4, #12]
 8004936:	60a3      	str	r3, [r4, #8]
 8004938:	7013      	strb	r3, [r2, #0]
 800493a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800493c:	4b54      	ldr	r3, [pc, #336]	@ (8004a90 <_svfiprintf_r+0x1e8>)
 800493e:	2205      	movs	r2, #5
 8004940:	0018      	movs	r0, r3
 8004942:	7831      	ldrb	r1, [r6, #0]
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	f000 fa51 	bl	8004dec <memchr>
 800494a:	1c75      	adds	r5, r6, #1
 800494c:	2800      	cmp	r0, #0
 800494e:	d11f      	bne.n	8004990 <_svfiprintf_r+0xe8>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	06d3      	lsls	r3, r2, #27
 8004954:	d504      	bpl.n	8004960 <_svfiprintf_r+0xb8>
 8004956:	2353      	movs	r3, #83	@ 0x53
 8004958:	a904      	add	r1, sp, #16
 800495a:	185b      	adds	r3, r3, r1
 800495c:	2120      	movs	r1, #32
 800495e:	7019      	strb	r1, [r3, #0]
 8004960:	0713      	lsls	r3, r2, #28
 8004962:	d504      	bpl.n	800496e <_svfiprintf_r+0xc6>
 8004964:	2353      	movs	r3, #83	@ 0x53
 8004966:	a904      	add	r1, sp, #16
 8004968:	185b      	adds	r3, r3, r1
 800496a:	212b      	movs	r1, #43	@ 0x2b
 800496c:	7019      	strb	r1, [r3, #0]
 800496e:	7833      	ldrb	r3, [r6, #0]
 8004970:	2b2a      	cmp	r3, #42	@ 0x2a
 8004972:	d016      	beq.n	80049a2 <_svfiprintf_r+0xfa>
 8004974:	0035      	movs	r5, r6
 8004976:	2100      	movs	r1, #0
 8004978:	200a      	movs	r0, #10
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	782a      	ldrb	r2, [r5, #0]
 800497e:	1c6e      	adds	r6, r5, #1
 8004980:	3a30      	subs	r2, #48	@ 0x30
 8004982:	2a09      	cmp	r2, #9
 8004984:	d950      	bls.n	8004a28 <_svfiprintf_r+0x180>
 8004986:	2900      	cmp	r1, #0
 8004988:	d111      	bne.n	80049ae <_svfiprintf_r+0x106>
 800498a:	e017      	b.n	80049bc <_svfiprintf_r+0x114>
 800498c:	3501      	adds	r5, #1
 800498e:	e7af      	b.n	80048f0 <_svfiprintf_r+0x48>
 8004990:	9b05      	ldr	r3, [sp, #20]
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	1ac0      	subs	r0, r0, r3
 8004996:	2301      	movs	r3, #1
 8004998:	4083      	lsls	r3, r0
 800499a:	4313      	orrs	r3, r2
 800499c:	002e      	movs	r6, r5
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	e7cc      	b.n	800493c <_svfiprintf_r+0x94>
 80049a2:	9b07      	ldr	r3, [sp, #28]
 80049a4:	1d19      	adds	r1, r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	9107      	str	r1, [sp, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db01      	blt.n	80049b2 <_svfiprintf_r+0x10a>
 80049ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049b0:	e004      	b.n	80049bc <_svfiprintf_r+0x114>
 80049b2:	425b      	negs	r3, r3
 80049b4:	60e3      	str	r3, [r4, #12]
 80049b6:	2302      	movs	r3, #2
 80049b8:	4313      	orrs	r3, r2
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	782b      	ldrb	r3, [r5, #0]
 80049be:	2b2e      	cmp	r3, #46	@ 0x2e
 80049c0:	d10c      	bne.n	80049dc <_svfiprintf_r+0x134>
 80049c2:	786b      	ldrb	r3, [r5, #1]
 80049c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c6:	d134      	bne.n	8004a32 <_svfiprintf_r+0x18a>
 80049c8:	9b07      	ldr	r3, [sp, #28]
 80049ca:	3502      	adds	r5, #2
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	9207      	str	r2, [sp, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da01      	bge.n	80049da <_svfiprintf_r+0x132>
 80049d6:	2301      	movs	r3, #1
 80049d8:	425b      	negs	r3, r3
 80049da:	9309      	str	r3, [sp, #36]	@ 0x24
 80049dc:	4e2d      	ldr	r6, [pc, #180]	@ (8004a94 <_svfiprintf_r+0x1ec>)
 80049de:	2203      	movs	r2, #3
 80049e0:	0030      	movs	r0, r6
 80049e2:	7829      	ldrb	r1, [r5, #0]
 80049e4:	f000 fa02 	bl	8004dec <memchr>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d006      	beq.n	80049fa <_svfiprintf_r+0x152>
 80049ec:	2340      	movs	r3, #64	@ 0x40
 80049ee:	1b80      	subs	r0, r0, r6
 80049f0:	4083      	lsls	r3, r0
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	3501      	adds	r5, #1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	7829      	ldrb	r1, [r5, #0]
 80049fc:	2206      	movs	r2, #6
 80049fe:	4826      	ldr	r0, [pc, #152]	@ (8004a98 <_svfiprintf_r+0x1f0>)
 8004a00:	1c6e      	adds	r6, r5, #1
 8004a02:	7621      	strb	r1, [r4, #24]
 8004a04:	f000 f9f2 	bl	8004dec <memchr>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d038      	beq.n	8004a7e <_svfiprintf_r+0x1d6>
 8004a0c:	4b23      	ldr	r3, [pc, #140]	@ (8004a9c <_svfiprintf_r+0x1f4>)
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d122      	bne.n	8004a58 <_svfiprintf_r+0x1b0>
 8004a12:	2207      	movs	r2, #7
 8004a14:	9b07      	ldr	r3, [sp, #28]
 8004a16:	3307      	adds	r3, #7
 8004a18:	4393      	bics	r3, r2
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	6963      	ldr	r3, [r4, #20]
 8004a20:	9a04      	ldr	r2, [sp, #16]
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	6163      	str	r3, [r4, #20]
 8004a26:	e762      	b.n	80048ee <_svfiprintf_r+0x46>
 8004a28:	4343      	muls	r3, r0
 8004a2a:	0035      	movs	r5, r6
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	e7a4      	b.n	800497c <_svfiprintf_r+0xd4>
 8004a32:	2300      	movs	r3, #0
 8004a34:	200a      	movs	r0, #10
 8004a36:	0019      	movs	r1, r3
 8004a38:	3501      	adds	r5, #1
 8004a3a:	6063      	str	r3, [r4, #4]
 8004a3c:	782a      	ldrb	r2, [r5, #0]
 8004a3e:	1c6e      	adds	r6, r5, #1
 8004a40:	3a30      	subs	r2, #48	@ 0x30
 8004a42:	2a09      	cmp	r2, #9
 8004a44:	d903      	bls.n	8004a4e <_svfiprintf_r+0x1a6>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0c8      	beq.n	80049dc <_svfiprintf_r+0x134>
 8004a4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a4c:	e7c6      	b.n	80049dc <_svfiprintf_r+0x134>
 8004a4e:	4341      	muls	r1, r0
 8004a50:	0035      	movs	r5, r6
 8004a52:	2301      	movs	r3, #1
 8004a54:	1889      	adds	r1, r1, r2
 8004a56:	e7f1      	b.n	8004a3c <_svfiprintf_r+0x194>
 8004a58:	aa07      	add	r2, sp, #28
 8004a5a:	9200      	str	r2, [sp, #0]
 8004a5c:	0021      	movs	r1, r4
 8004a5e:	003a      	movs	r2, r7
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <_svfiprintf_r+0x1f8>)
 8004a62:	9803      	ldr	r0, [sp, #12]
 8004a64:	e000      	b.n	8004a68 <_svfiprintf_r+0x1c0>
 8004a66:	bf00      	nop
 8004a68:	9004      	str	r0, [sp, #16]
 8004a6a:	9b04      	ldr	r3, [sp, #16]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	d1d6      	bne.n	8004a1e <_svfiprintf_r+0x176>
 8004a70:	89bb      	ldrh	r3, [r7, #12]
 8004a72:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a74:	065b      	lsls	r3, r3, #25
 8004a76:	d500      	bpl.n	8004a7a <_svfiprintf_r+0x1d2>
 8004a78:	e72c      	b.n	80048d4 <_svfiprintf_r+0x2c>
 8004a7a:	b021      	add	sp, #132	@ 0x84
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	aa07      	add	r2, sp, #28
 8004a80:	9200      	str	r2, [sp, #0]
 8004a82:	0021      	movs	r1, r4
 8004a84:	003a      	movs	r2, r7
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <_svfiprintf_r+0x1f8>)
 8004a88:	9803      	ldr	r0, [sp, #12]
 8004a8a:	f000 f87b 	bl	8004b84 <_printf_i>
 8004a8e:	e7eb      	b.n	8004a68 <_svfiprintf_r+0x1c0>
 8004a90:	08004f48 	.word	0x08004f48
 8004a94:	08004f4e 	.word	0x08004f4e
 8004a98:	08004f52 	.word	0x08004f52
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	080047e9 	.word	0x080047e9

08004aa4 <_printf_common>:
 8004aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa6:	0016      	movs	r6, r2
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	688a      	ldr	r2, [r1, #8]
 8004aac:	690b      	ldr	r3, [r1, #16]
 8004aae:	000c      	movs	r4, r1
 8004ab0:	9000      	str	r0, [sp, #0]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	da00      	bge.n	8004ab8 <_printf_common+0x14>
 8004ab6:	0013      	movs	r3, r2
 8004ab8:	0022      	movs	r2, r4
 8004aba:	6033      	str	r3, [r6, #0]
 8004abc:	3243      	adds	r2, #67	@ 0x43
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	d001      	beq.n	8004ac8 <_printf_common+0x24>
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	069b      	lsls	r3, r3, #26
 8004acc:	d502      	bpl.n	8004ad4 <_printf_common+0x30>
 8004ace:	6833      	ldr	r3, [r6, #0]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	2306      	movs	r3, #6
 8004ad8:	0015      	movs	r5, r2
 8004ada:	401d      	ands	r5, r3
 8004adc:	421a      	tst	r2, r3
 8004ade:	d027      	beq.n	8004b30 <_printf_common+0x8c>
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	3343      	adds	r3, #67	@ 0x43
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	4193      	sbcs	r3, r2
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	0692      	lsls	r2, r2, #26
 8004aee:	d430      	bmi.n	8004b52 <_printf_common+0xae>
 8004af0:	0022      	movs	r2, r4
 8004af2:	9901      	ldr	r1, [sp, #4]
 8004af4:	9800      	ldr	r0, [sp, #0]
 8004af6:	9d08      	ldr	r5, [sp, #32]
 8004af8:	3243      	adds	r2, #67	@ 0x43
 8004afa:	47a8      	blx	r5
 8004afc:	3001      	adds	r0, #1
 8004afe:	d025      	beq.n	8004b4c <_printf_common+0xa8>
 8004b00:	2206      	movs	r2, #6
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	2500      	movs	r5, #0
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d105      	bne.n	8004b18 <_printf_common+0x74>
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	68e5      	ldr	r5, [r4, #12]
 8004b10:	1aed      	subs	r5, r5, r3
 8004b12:	43eb      	mvns	r3, r5
 8004b14:	17db      	asrs	r3, r3, #31
 8004b16:	401d      	ands	r5, r3
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	6922      	ldr	r2, [r4, #16]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	dd01      	ble.n	8004b24 <_printf_common+0x80>
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	18ed      	adds	r5, r5, r3
 8004b24:	2600      	movs	r6, #0
 8004b26:	42b5      	cmp	r5, r6
 8004b28:	d120      	bne.n	8004b6c <_printf_common+0xc8>
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e010      	b.n	8004b50 <_printf_common+0xac>
 8004b2e:	3501      	adds	r5, #1
 8004b30:	68e3      	ldr	r3, [r4, #12]
 8004b32:	6832      	ldr	r2, [r6, #0]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	42ab      	cmp	r3, r5
 8004b38:	ddd2      	ble.n	8004ae0 <_printf_common+0x3c>
 8004b3a:	0022      	movs	r2, r4
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9901      	ldr	r1, [sp, #4]
 8004b40:	9800      	ldr	r0, [sp, #0]
 8004b42:	9f08      	ldr	r7, [sp, #32]
 8004b44:	3219      	adds	r2, #25
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1f0      	bne.n	8004b2e <_printf_common+0x8a>
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	4240      	negs	r0, r0
 8004b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b52:	2030      	movs	r0, #48	@ 0x30
 8004b54:	18e1      	adds	r1, r4, r3
 8004b56:	3143      	adds	r1, #67	@ 0x43
 8004b58:	7008      	strb	r0, [r1, #0]
 8004b5a:	0021      	movs	r1, r4
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	3145      	adds	r1, #69	@ 0x45
 8004b60:	7809      	ldrb	r1, [r1, #0]
 8004b62:	18a2      	adds	r2, r4, r2
 8004b64:	3243      	adds	r2, #67	@ 0x43
 8004b66:	3302      	adds	r3, #2
 8004b68:	7011      	strb	r1, [r2, #0]
 8004b6a:	e7c1      	b.n	8004af0 <_printf_common+0x4c>
 8004b6c:	0022      	movs	r2, r4
 8004b6e:	2301      	movs	r3, #1
 8004b70:	9901      	ldr	r1, [sp, #4]
 8004b72:	9800      	ldr	r0, [sp, #0]
 8004b74:	9f08      	ldr	r7, [sp, #32]
 8004b76:	321a      	adds	r2, #26
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d0e6      	beq.n	8004b4c <_printf_common+0xa8>
 8004b7e:	3601      	adds	r6, #1
 8004b80:	e7d1      	b.n	8004b26 <_printf_common+0x82>
	...

08004b84 <_printf_i>:
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b08b      	sub	sp, #44	@ 0x2c
 8004b88:	9206      	str	r2, [sp, #24]
 8004b8a:	000a      	movs	r2, r1
 8004b8c:	3243      	adds	r2, #67	@ 0x43
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	9005      	str	r0, [sp, #20]
 8004b92:	9203      	str	r2, [sp, #12]
 8004b94:	7e0a      	ldrb	r2, [r1, #24]
 8004b96:	000c      	movs	r4, r1
 8004b98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b9a:	2a78      	cmp	r2, #120	@ 0x78
 8004b9c:	d809      	bhi.n	8004bb2 <_printf_i+0x2e>
 8004b9e:	2a62      	cmp	r2, #98	@ 0x62
 8004ba0:	d80b      	bhi.n	8004bba <_printf_i+0x36>
 8004ba2:	2a00      	cmp	r2, #0
 8004ba4:	d100      	bne.n	8004ba8 <_printf_i+0x24>
 8004ba6:	e0bc      	b.n	8004d22 <_printf_i+0x19e>
 8004ba8:	497b      	ldr	r1, [pc, #492]	@ (8004d98 <_printf_i+0x214>)
 8004baa:	9104      	str	r1, [sp, #16]
 8004bac:	2a58      	cmp	r2, #88	@ 0x58
 8004bae:	d100      	bne.n	8004bb2 <_printf_i+0x2e>
 8004bb0:	e090      	b.n	8004cd4 <_printf_i+0x150>
 8004bb2:	0025      	movs	r5, r4
 8004bb4:	3542      	adds	r5, #66	@ 0x42
 8004bb6:	702a      	strb	r2, [r5, #0]
 8004bb8:	e022      	b.n	8004c00 <_printf_i+0x7c>
 8004bba:	0010      	movs	r0, r2
 8004bbc:	3863      	subs	r0, #99	@ 0x63
 8004bbe:	2815      	cmp	r0, #21
 8004bc0:	d8f7      	bhi.n	8004bb2 <_printf_i+0x2e>
 8004bc2:	f7fb faa9 	bl	8000118 <__gnu_thumb1_case_shi>
 8004bc6:	0016      	.short	0x0016
 8004bc8:	fff6001f 	.word	0xfff6001f
 8004bcc:	fff6fff6 	.word	0xfff6fff6
 8004bd0:	001ffff6 	.word	0x001ffff6
 8004bd4:	fff6fff6 	.word	0xfff6fff6
 8004bd8:	fff6fff6 	.word	0xfff6fff6
 8004bdc:	003600a1 	.word	0x003600a1
 8004be0:	fff60080 	.word	0xfff60080
 8004be4:	00b2fff6 	.word	0x00b2fff6
 8004be8:	0036fff6 	.word	0x0036fff6
 8004bec:	fff6fff6 	.word	0xfff6fff6
 8004bf0:	0084      	.short	0x0084
 8004bf2:	0025      	movs	r5, r4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	3542      	adds	r5, #66	@ 0x42
 8004bf8:	1d11      	adds	r1, r2, #4
 8004bfa:	6019      	str	r1, [r3, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	702b      	strb	r3, [r5, #0]
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0a0      	b.n	8004d46 <_printf_i+0x1c2>
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	6809      	ldr	r1, [r1, #0]
 8004c08:	1d02      	adds	r2, r0, #4
 8004c0a:	060d      	lsls	r5, r1, #24
 8004c0c:	d50b      	bpl.n	8004c26 <_printf_i+0xa2>
 8004c0e:	6806      	ldr	r6, [r0, #0]
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	da03      	bge.n	8004c1e <_printf_i+0x9a>
 8004c16:	232d      	movs	r3, #45	@ 0x2d
 8004c18:	9a03      	ldr	r2, [sp, #12]
 8004c1a:	4276      	negs	r6, r6
 8004c1c:	7013      	strb	r3, [r2, #0]
 8004c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004d98 <_printf_i+0x214>)
 8004c20:	270a      	movs	r7, #10
 8004c22:	9304      	str	r3, [sp, #16]
 8004c24:	e018      	b.n	8004c58 <_printf_i+0xd4>
 8004c26:	6806      	ldr	r6, [r0, #0]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	0649      	lsls	r1, r1, #25
 8004c2c:	d5f1      	bpl.n	8004c12 <_printf_i+0x8e>
 8004c2e:	b236      	sxth	r6, r6
 8004c30:	e7ef      	b.n	8004c12 <_printf_i+0x8e>
 8004c32:	6808      	ldr	r0, [r1, #0]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	c940      	ldmia	r1!, {r6}
 8004c38:	0605      	lsls	r5, r0, #24
 8004c3a:	d402      	bmi.n	8004c42 <_printf_i+0xbe>
 8004c3c:	0640      	lsls	r0, r0, #25
 8004c3e:	d500      	bpl.n	8004c42 <_printf_i+0xbe>
 8004c40:	b2b6      	uxth	r6, r6
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	4b54      	ldr	r3, [pc, #336]	@ (8004d98 <_printf_i+0x214>)
 8004c46:	270a      	movs	r7, #10
 8004c48:	9304      	str	r3, [sp, #16]
 8004c4a:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c4c:	d100      	bne.n	8004c50 <_printf_i+0xcc>
 8004c4e:	3f02      	subs	r7, #2
 8004c50:	0023      	movs	r3, r4
 8004c52:	2200      	movs	r2, #0
 8004c54:	3343      	adds	r3, #67	@ 0x43
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	60a3      	str	r3, [r4, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	db03      	blt.n	8004c68 <_printf_i+0xe4>
 8004c60:	2104      	movs	r1, #4
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	438a      	bics	r2, r1
 8004c66:	6022      	str	r2, [r4, #0]
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	d102      	bne.n	8004c72 <_printf_i+0xee>
 8004c6c:	9d03      	ldr	r5, [sp, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <_printf_i+0x108>
 8004c72:	9d03      	ldr	r5, [sp, #12]
 8004c74:	0030      	movs	r0, r6
 8004c76:	0039      	movs	r1, r7
 8004c78:	f7fb fade 	bl	8000238 <__aeabi_uidivmod>
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	3d01      	subs	r5, #1
 8004c80:	5c5b      	ldrb	r3, [r3, r1]
 8004c82:	702b      	strb	r3, [r5, #0]
 8004c84:	0033      	movs	r3, r6
 8004c86:	0006      	movs	r6, r0
 8004c88:	429f      	cmp	r7, r3
 8004c8a:	d9f3      	bls.n	8004c74 <_printf_i+0xf0>
 8004c8c:	2f08      	cmp	r7, #8
 8004c8e:	d109      	bne.n	8004ca4 <_printf_i+0x120>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07db      	lsls	r3, r3, #31
 8004c94:	d506      	bpl.n	8004ca4 <_printf_i+0x120>
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dc02      	bgt.n	8004ca4 <_printf_i+0x120>
 8004c9e:	2330      	movs	r3, #48	@ 0x30
 8004ca0:	3d01      	subs	r5, #1
 8004ca2:	702b      	strb	r3, [r5, #0]
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	1b5b      	subs	r3, r3, r5
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	9b07      	ldr	r3, [sp, #28]
 8004cac:	0021      	movs	r1, r4
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	9805      	ldr	r0, [sp, #20]
 8004cb2:	9b06      	ldr	r3, [sp, #24]
 8004cb4:	aa09      	add	r2, sp, #36	@ 0x24
 8004cb6:	f7ff fef5 	bl	8004aa4 <_printf_common>
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d148      	bne.n	8004d50 <_printf_i+0x1cc>
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	4240      	negs	r0, r0
 8004cc2:	b00b      	add	sp, #44	@ 0x2c
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	6809      	ldr	r1, [r1, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	6022      	str	r2, [r4, #0]
 8004cce:	2278      	movs	r2, #120	@ 0x78
 8004cd0:	4932      	ldr	r1, [pc, #200]	@ (8004d9c <_printf_i+0x218>)
 8004cd2:	9104      	str	r1, [sp, #16]
 8004cd4:	0021      	movs	r1, r4
 8004cd6:	3145      	adds	r1, #69	@ 0x45
 8004cd8:	700a      	strb	r2, [r1, #0]
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	c940      	ldmia	r1!, {r6}
 8004ce0:	0610      	lsls	r0, r2, #24
 8004ce2:	d402      	bmi.n	8004cea <_printf_i+0x166>
 8004ce4:	0650      	lsls	r0, r2, #25
 8004ce6:	d500      	bpl.n	8004cea <_printf_i+0x166>
 8004ce8:	b2b6      	uxth	r6, r6
 8004cea:	6019      	str	r1, [r3, #0]
 8004cec:	07d3      	lsls	r3, r2, #31
 8004cee:	d502      	bpl.n	8004cf6 <_printf_i+0x172>
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d001      	beq.n	8004cfe <_printf_i+0x17a>
 8004cfa:	2710      	movs	r7, #16
 8004cfc:	e7a8      	b.n	8004c50 <_printf_i+0xcc>
 8004cfe:	2220      	movs	r2, #32
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	4393      	bics	r3, r2
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	e7f8      	b.n	8004cfa <_printf_i+0x176>
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	680d      	ldr	r5, [r1, #0]
 8004d0c:	1d10      	adds	r0, r2, #4
 8004d0e:	6949      	ldr	r1, [r1, #20]
 8004d10:	6018      	str	r0, [r3, #0]
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	062e      	lsls	r6, r5, #24
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0x198>
 8004d18:	6019      	str	r1, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_printf_i+0x19e>
 8004d1c:	066d      	lsls	r5, r5, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0x194>
 8004d20:	8019      	strh	r1, [r3, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	9d03      	ldr	r5, [sp, #12]
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	e7bf      	b.n	8004caa <_printf_i+0x126>
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	1d11      	adds	r1, r2, #4
 8004d2e:	6019      	str	r1, [r3, #0]
 8004d30:	6815      	ldr	r5, [r2, #0]
 8004d32:	2100      	movs	r1, #0
 8004d34:	0028      	movs	r0, r5
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	f000 f858 	bl	8004dec <memchr>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d001      	beq.n	8004d44 <_printf_i+0x1c0>
 8004d40:	1b40      	subs	r0, r0, r5
 8004d42:	6060      	str	r0, [r4, #4]
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9a03      	ldr	r2, [sp, #12]
 8004d4c:	7013      	strb	r3, [r2, #0]
 8004d4e:	e7ac      	b.n	8004caa <_printf_i+0x126>
 8004d50:	002a      	movs	r2, r5
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	9906      	ldr	r1, [sp, #24]
 8004d56:	9805      	ldr	r0, [sp, #20]
 8004d58:	9d07      	ldr	r5, [sp, #28]
 8004d5a:	47a8      	blx	r5
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d0ae      	beq.n	8004cbe <_printf_i+0x13a>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	079b      	lsls	r3, r3, #30
 8004d64:	d415      	bmi.n	8004d92 <_printf_i+0x20e>
 8004d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d68:	68e0      	ldr	r0, [r4, #12]
 8004d6a:	4298      	cmp	r0, r3
 8004d6c:	daa9      	bge.n	8004cc2 <_printf_i+0x13e>
 8004d6e:	0018      	movs	r0, r3
 8004d70:	e7a7      	b.n	8004cc2 <_printf_i+0x13e>
 8004d72:	0022      	movs	r2, r4
 8004d74:	2301      	movs	r3, #1
 8004d76:	9906      	ldr	r1, [sp, #24]
 8004d78:	9805      	ldr	r0, [sp, #20]
 8004d7a:	9e07      	ldr	r6, [sp, #28]
 8004d7c:	3219      	adds	r2, #25
 8004d7e:	47b0      	blx	r6
 8004d80:	3001      	adds	r0, #1
 8004d82:	d09c      	beq.n	8004cbe <_printf_i+0x13a>
 8004d84:	3501      	adds	r5, #1
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	42ab      	cmp	r3, r5
 8004d8e:	dcf0      	bgt.n	8004d72 <_printf_i+0x1ee>
 8004d90:	e7e9      	b.n	8004d66 <_printf_i+0x1e2>
 8004d92:	2500      	movs	r5, #0
 8004d94:	e7f7      	b.n	8004d86 <_printf_i+0x202>
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	08004f59 	.word	0x08004f59
 8004d9c:	08004f6a 	.word	0x08004f6a

08004da0 <memmove>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4288      	cmp	r0, r1
 8004da4:	d806      	bhi.n	8004db4 <memmove+0x14>
 8004da6:	2300      	movs	r3, #0
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d008      	beq.n	8004dbe <memmove+0x1e>
 8004dac:	5ccc      	ldrb	r4, [r1, r3]
 8004dae:	54c4      	strb	r4, [r0, r3]
 8004db0:	3301      	adds	r3, #1
 8004db2:	e7f9      	b.n	8004da8 <memmove+0x8>
 8004db4:	188b      	adds	r3, r1, r2
 8004db6:	4298      	cmp	r0, r3
 8004db8:	d2f5      	bcs.n	8004da6 <memmove+0x6>
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	d200      	bcs.n	8004dc0 <memmove+0x20>
 8004dbe:	bd10      	pop	{r4, pc}
 8004dc0:	5c8b      	ldrb	r3, [r1, r2]
 8004dc2:	5483      	strb	r3, [r0, r2]
 8004dc4:	e7f9      	b.n	8004dba <memmove+0x1a>
	...

08004dc8 <_sbrk_r>:
 8004dc8:	2300      	movs	r3, #0
 8004dca:	b570      	push	{r4, r5, r6, lr}
 8004dcc:	4d06      	ldr	r5, [pc, #24]	@ (8004de8 <_sbrk_r+0x20>)
 8004dce:	0004      	movs	r4, r0
 8004dd0:	0008      	movs	r0, r1
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	f7fb fe70 	bl	8000ab8 <_sbrk>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d103      	bne.n	8004de4 <_sbrk_r+0x1c>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <_sbrk_r+0x1c>
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	2000035c 	.word	0x2000035c

08004dec <memchr>:
 8004dec:	b2c9      	uxtb	r1, r1
 8004dee:	1882      	adds	r2, r0, r2
 8004df0:	4290      	cmp	r0, r2
 8004df2:	d101      	bne.n	8004df8 <memchr+0xc>
 8004df4:	2000      	movs	r0, #0
 8004df6:	4770      	bx	lr
 8004df8:	7803      	ldrb	r3, [r0, #0]
 8004dfa:	428b      	cmp	r3, r1
 8004dfc:	d0fb      	beq.n	8004df6 <memchr+0xa>
 8004dfe:	3001      	adds	r0, #1
 8004e00:	e7f6      	b.n	8004df0 <memchr+0x4>

08004e02 <memcpy>:
 8004e02:	2300      	movs	r3, #0
 8004e04:	b510      	push	{r4, lr}
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d100      	bne.n	8004e0c <memcpy+0xa>
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	5ccc      	ldrb	r4, [r1, r3]
 8004e0e:	54c4      	strb	r4, [r0, r3]
 8004e10:	3301      	adds	r3, #1
 8004e12:	e7f8      	b.n	8004e06 <memcpy+0x4>

08004e14 <_realloc_r>:
 8004e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e16:	0006      	movs	r6, r0
 8004e18:	000c      	movs	r4, r1
 8004e1a:	0015      	movs	r5, r2
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d105      	bne.n	8004e2c <_realloc_r+0x18>
 8004e20:	0011      	movs	r1, r2
 8004e22:	f7ff fc51 	bl	80046c8 <_malloc_r>
 8004e26:	0004      	movs	r4, r0
 8004e28:	0020      	movs	r0, r4
 8004e2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	d103      	bne.n	8004e38 <_realloc_r+0x24>
 8004e30:	f7ff fbde 	bl	80045f0 <_free_r>
 8004e34:	2400      	movs	r4, #0
 8004e36:	e7f7      	b.n	8004e28 <_realloc_r+0x14>
 8004e38:	f000 f81b 	bl	8004e72 <_malloc_usable_size_r>
 8004e3c:	0007      	movs	r7, r0
 8004e3e:	4285      	cmp	r5, r0
 8004e40:	d802      	bhi.n	8004e48 <_realloc_r+0x34>
 8004e42:	0843      	lsrs	r3, r0, #1
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	d3ef      	bcc.n	8004e28 <_realloc_r+0x14>
 8004e48:	0029      	movs	r1, r5
 8004e4a:	0030      	movs	r0, r6
 8004e4c:	f7ff fc3c 	bl	80046c8 <_malloc_r>
 8004e50:	9001      	str	r0, [sp, #4]
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0ee      	beq.n	8004e34 <_realloc_r+0x20>
 8004e56:	002a      	movs	r2, r5
 8004e58:	42bd      	cmp	r5, r7
 8004e5a:	d900      	bls.n	8004e5e <_realloc_r+0x4a>
 8004e5c:	003a      	movs	r2, r7
 8004e5e:	0021      	movs	r1, r4
 8004e60:	9801      	ldr	r0, [sp, #4]
 8004e62:	f7ff ffce 	bl	8004e02 <memcpy>
 8004e66:	0021      	movs	r1, r4
 8004e68:	0030      	movs	r0, r6
 8004e6a:	f7ff fbc1 	bl	80045f0 <_free_r>
 8004e6e:	9c01      	ldr	r4, [sp, #4]
 8004e70:	e7da      	b.n	8004e28 <_realloc_r+0x14>

08004e72 <_malloc_usable_size_r>:
 8004e72:	1f0b      	subs	r3, r1, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1f18      	subs	r0, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	da01      	bge.n	8004e80 <_malloc_usable_size_r+0xe>
 8004e7c:	580b      	ldr	r3, [r1, r0]
 8004e7e:	18c0      	adds	r0, r0, r3
 8004e80:	4770      	bx	lr
	...

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
