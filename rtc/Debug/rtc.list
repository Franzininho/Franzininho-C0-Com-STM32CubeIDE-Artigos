
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003370  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0000451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003520  08003520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003524  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  08003580  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08003580  000052d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab71  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  0000fbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  000116e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063b  00000000  00000000  00011ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001350f  00000000  00000000  00012533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b597  00000000  00000000  00025a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000776fa  00000000  00000000  00030fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a86d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  000a8718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000aa7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003418 	.word	0x08003418

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003418 	.word	0x08003418

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000422:	f000 fb02 	bl	8000a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f895 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f000 f993 	bl	8000754 <MX_GPIO_Init>
  MX_RTC_Init();
 800042e:	f000 f8d7 	bl	80005e0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000432:	f000 f941 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Ajuste a data e a hora aqui */
   data.Year = 24;  // 2024
 8000436:	4b3b      	ldr	r3, [pc, #236]	@ (8000524 <main+0x10c>)
 8000438:	2218      	movs	r2, #24
 800043a:	70da      	strb	r2, [r3, #3]
   data.Month = RTC_MONTH_JUNE;
 800043c:	4b39      	ldr	r3, [pc, #228]	@ (8000524 <main+0x10c>)
 800043e:	2206      	movs	r2, #6
 8000440:	705a      	strb	r2, [r3, #1]
   data.Date = 25;
 8000442:	4b38      	ldr	r3, [pc, #224]	@ (8000524 <main+0x10c>)
 8000444:	2219      	movs	r2, #25
 8000446:	709a      	strb	r2, [r3, #2]
   data.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000448:	4b36      	ldr	r3, [pc, #216]	@ (8000524 <main+0x10c>)
 800044a:	2202      	movs	r2, #2
 800044c:	701a      	strb	r2, [r3, #0]
   tempo.Hours = 9;
 800044e:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <main+0x110>)
 8000450:	2209      	movs	r2, #9
 8000452:	701a      	strb	r2, [r3, #0]
   tempo.Minutes = 5;
 8000454:	4b34      	ldr	r3, [pc, #208]	@ (8000528 <main+0x110>)
 8000456:	2205      	movs	r2, #5
 8000458:	705a      	strb	r2, [r3, #1]
   tempo.Seconds = 0;
 800045a:	4b33      	ldr	r3, [pc, #204]	@ (8000528 <main+0x110>)
 800045c:	2200      	movs	r2, #0
 800045e:	709a      	strb	r2, [r3, #2]
   HAL_RTC_SetDate(&hrtc, &data, RTC_FORMAT_BIN);
 8000460:	4930      	ldr	r1, [pc, #192]	@ (8000524 <main+0x10c>)
 8000462:	4b32      	ldr	r3, [pc, #200]	@ (800052c <main+0x114>)
 8000464:	2200      	movs	r2, #0
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fb90 	bl	8001b8c <HAL_RTC_SetDate>
   HAL_RTC_SetTime(&hrtc, &tempo, RTC_FORMAT_BIN);
 800046c:	492e      	ldr	r1, [pc, #184]	@ (8000528 <main+0x110>)
 800046e:	4b2f      	ldr	r3, [pc, #188]	@ (800052c <main+0x114>)
 8000470:	2200      	movs	r2, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fa86 	bl	8001984 <HAL_RTC_SetTime>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 8000478:	492a      	ldr	r1, [pc, #168]	@ (8000524 <main+0x10c>)
 800047a:	4b2c      	ldr	r3, [pc, #176]	@ (800052c <main+0x114>)
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fc16 	bl	8001cb0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &tempo, RTC_FORMAT_BIN);
 8000484:	4928      	ldr	r1, [pc, #160]	@ (8000528 <main+0x110>)
 8000486:	4b29      	ldr	r3, [pc, #164]	@ (800052c <main+0x114>)
 8000488:	2200      	movs	r2, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f001 fb22 	bl	8001ad4 <HAL_RTC_GetTime>

	horas = tempo.Hours;
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <main+0x110>)
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b26      	ldr	r3, [pc, #152]	@ (8000530 <main+0x118>)
 8000496:	701a      	strb	r2, [r3, #0]
	minutos = tempo.Minutes;
 8000498:	4b23      	ldr	r3, [pc, #140]	@ (8000528 <main+0x110>)
 800049a:	785a      	ldrb	r2, [r3, #1]
 800049c:	4b25      	ldr	r3, [pc, #148]	@ (8000534 <main+0x11c>)
 800049e:	701a      	strb	r2, [r3, #0]
	segundos = tempo.Seconds;
 80004a0:	4b21      	ldr	r3, [pc, #132]	@ (8000528 <main+0x110>)
 80004a2:	789a      	ldrb	r2, [r3, #2]
 80004a4:	4b24      	ldr	r3, [pc, #144]	@ (8000538 <main+0x120>)
 80004a6:	701a      	strb	r2, [r3, #0]
	dia = data.Date;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <main+0x10c>)
 80004aa:	789a      	ldrb	r2, [r3, #2]
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <main+0x124>)
 80004ae:	701a      	strb	r2, [r3, #0]
	mes = data.Month;
 80004b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <main+0x10c>)
 80004b2:	785a      	ldrb	r2, [r3, #1]
 80004b4:	4b22      	ldr	r3, [pc, #136]	@ (8000540 <main+0x128>)
 80004b6:	701a      	strb	r2, [r3, #0]
	ano = data.Year;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <main+0x10c>)
 80004ba:	78da      	ldrb	r2, [r3, #3]
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <main+0x12c>)
 80004be:	701a      	strb	r2, [r3, #0]
	sprintf(uart_tx_buffer, "Data: %02d/%02d/%04d Tempo: %02d:%02d:%02d\r\n", dia, mes, 2000+ano, horas, minutos, segundos);
 80004c0:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <main+0x124>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	001e      	movs	r6, r3
 80004c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <main+0x128>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	469c      	mov	ip, r3
 80004cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000544 <main+0x12c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	22fa      	movs	r2, #250	@ 0xfa
 80004d2:	00d2      	lsls	r2, r2, #3
 80004d4:	4690      	mov	r8, r2
 80004d6:	4443      	add	r3, r8
 80004d8:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <main+0x118>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	0014      	movs	r4, r2
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <main+0x11c>)
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	0015      	movs	r5, r2
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <main+0x120>)
 80004e6:	7812      	ldrb	r2, [r2, #0]
 80004e8:	4917      	ldr	r1, [pc, #92]	@ (8000548 <main+0x130>)
 80004ea:	4818      	ldr	r0, [pc, #96]	@ (800054c <main+0x134>)
 80004ec:	9203      	str	r2, [sp, #12]
 80004ee:	9502      	str	r5, [sp, #8]
 80004f0:	9401      	str	r4, [sp, #4]
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	4663      	mov	r3, ip
 80004f6:	0032      	movs	r2, r6
 80004f8:	f002 faf0 	bl	8002adc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_tx_buffer, strlen(uart_tx_buffer), 1000);
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <main+0x134>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f7ff fe02 	bl	8000108 <strlen>
 8000504:	0003      	movs	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	23fa      	movs	r3, #250	@ 0xfa
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	490f      	ldr	r1, [pc, #60]	@ (800054c <main+0x134>)
 800050e:	4810      	ldr	r0, [pc, #64]	@ (8000550 <main+0x138>)
 8000510:	f001 fd7a 	bl	8002008 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000514:	23fa      	movs	r3, #250	@ 0xfa
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fb03 	bl	8000b24 <HAL_Delay>
	HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	e7aa      	b.n	8000478 <main+0x60>
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	20000170 	.word	0x20000170
 8000528:	20000174 	.word	0x20000174
 800052c:	200000b4 	.word	0x200000b4
 8000530:	2000007b 	.word	0x2000007b
 8000534:	2000007d 	.word	0x2000007d
 8000538:	2000007c 	.word	0x2000007c
 800053c:	20000078 	.word	0x20000078
 8000540:	20000079 	.word	0x20000079
 8000544:	2000007a 	.word	0x2000007a
 8000548:	08003430 	.word	0x08003430
 800054c:	20000080 	.word	0x20000080
 8000550:	200000dc 	.word	0x200000dc

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08d      	sub	sp, #52	@ 0x34
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2414      	movs	r4, #20
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	231c      	movs	r3, #28
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fad9 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	003b      	movs	r3, r7
 800056c:	0018      	movs	r0, r3
 800056e:	2314      	movs	r3, #20
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f002 fad2 	bl	8002b1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	220a      	movs	r2, #10
 800057c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	0052      	lsls	r2, r2, #1
 8000584:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2240      	movs	r2, #64	@ 0x40
 8000590:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2201      	movs	r2, #1
 8000596:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fd14 	bl	8000fc8 <HAL_RCC_OscConfig>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005a4:	f000 f8ec 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	003b      	movs	r3, r7
 80005aa:	2207      	movs	r2, #7
 80005ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005c0:	003b      	movs	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c6:	003b      	movs	r3, r7
 80005c8:	2101      	movs	r1, #1
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fee0 	bl	8001390 <HAL_RCC_ClockConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d4:	f000 f8d4 	bl	8000780 <Error_Handler>
  }
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b00d      	add	sp, #52	@ 0x34
 80005de:	bd90      	pop	{r4, r7, pc}

080005e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fa94 	bl	8002b1c <memset>
  RTC_DateTypeDef sDate = {0};
 80005f4:	003b      	movs	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fa:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <MX_RTC_Init+0xd0>)
 80005fc:	4a2d      	ldr	r2, [pc, #180]	@ (80006b4 <MX_RTC_Init+0xd4>)
 80005fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000606:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000608:	227f      	movs	r2, #127	@ 0x7f
 800060a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_RTC_Init+0xd0>)
 800060e:	22ff      	movs	r2, #255	@ 0xff
 8000610:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_RTC_Init+0xd0>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	05d2      	lsls	r2, r2, #23
 800062a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <MX_RTC_Init+0xd0>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 f907 	bl	8001848 <HAL_RTC_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800063e:	f000 f89f 	bl	8000780 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000666:	1d39      	adds	r1, r7, #4
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_RTC_Init+0xd0>)
 800066a:	2200      	movs	r2, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f989 	bl	8001984 <HAL_RTC_SetTime>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000676:	f000 f883 	bl	8000780 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800067a:	003b      	movs	r3, r7
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000680:	003b      	movs	r3, r7
 8000682:	2201      	movs	r2, #1
 8000684:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000686:	003b      	movs	r3, r7
 8000688:	2201      	movs	r2, #1
 800068a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000692:	0039      	movs	r1, r7
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_RTC_Init+0xd0>)
 8000696:	2200      	movs	r2, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fa77 	bl	8001b8c <HAL_RTC_SetDate>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f86d 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b006      	add	sp, #24
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	200000b4 	.word	0x200000b4
 80006b4:	40002800 	.word	0x40002800

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006be:	4a24      	ldr	r2, [pc, #144]	@ (8000750 <MX_USART1_UART_Init+0x98>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	0252      	lsls	r2, r2, #9
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fc2a 	bl	8001f5c <HAL_UART_Init>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f838 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f901 	bl	800291c <HAL_UARTEx_SetTxFifoThreshold>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f82f 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f002 f938 	bl	800299c <HAL_UARTEx_SetRxFifoThreshold>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f826 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000736:	0018      	movs	r0, r3
 8000738:	f002 f8b6 	bl	80028a8 <HAL_UARTEx_DisableFifoMode>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f81e 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	200000dc 	.word	0x200000dc
 8000750:	40013800 	.word	0x40013800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_GPIO_Init+0x28>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_GPIO_Init+0x28>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <MX_GPIO_Init+0x28>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	40021000 	.word	0x40021000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_MspInit+0x50>)
 8000794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_MspInit+0x50>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	641a      	str	r2, [r3, #64]	@ 0x40
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x50>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_MspInit+0x50>)
 80007ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_MspInit+0x50>)
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	0549      	lsls	r1, r1, #21
 80007b4:	430a      	orrs	r2, r1
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_MspInit+0x50>)
 80007ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	055b      	lsls	r3, r3, #21
 80007c0:	4013      	ands	r3, r2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80007c6:	2008      	movs	r0, #8
 80007c8:	f000 f9d0 	bl	8000b6c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80007cc:	2010      	movs	r0, #16
 80007ce:	f000 f9cd 	bl	8000b6c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	240c      	movs	r4, #12
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	231c      	movs	r3, #28
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 f992 	bl	8002b1c <memset>
  if(hrtc->Instance==RTC)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <HAL_RTC_MspInit+0x74>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d124      	bne.n	800084c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	0292      	lsls	r2, r2, #10
 8000808:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	f000 ff29 	bl	800166c <HAL_RCCEx_PeriphCLKConfig>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800081e:	f7ff ffaf 	bl	8000780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_RTC_MspInit+0x78>)
 8000824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_RTC_MspInit+0x78>)
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	0209      	lsls	r1, r1, #8
 800082c:	430a      	orrs	r2, r1
 800082e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_RTC_MspInit+0x78>)
 8000832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_RTC_MspInit+0x78>)
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	00c9      	lsls	r1, r1, #3
 800083a:	430a      	orrs	r2, r1
 800083c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_RTC_MspInit+0x78>)
 8000840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	4013      	ands	r3, r2
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b00b      	add	sp, #44	@ 0x2c
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	40002800 	.word	0x40002800
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b091      	sub	sp, #68	@ 0x44
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	232c      	movs	r3, #44	@ 0x2c
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 f954 	bl	8002b1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	2410      	movs	r4, #16
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	231c      	movs	r3, #28
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 f94c 	bl	8002b1c <memset>
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a23      	ldr	r2, [pc, #140]	@ (8000918 <HAL_UART_MspInit+0xbc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d13f      	bne.n	800090e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fee5 	bl	800166c <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008a6:	f7ff ff6b 	bl	8000780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	01c9      	lsls	r1, r1, #7
 80008b4:	430a      	orrs	r2, r1
 80008b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	01db      	lsls	r3, r3, #7
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_UART_MspInit+0xc0>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008de:	212c      	movs	r1, #44	@ 0x2c
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	22c0      	movs	r2, #192	@ 0xc0
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2202      	movs	r2, #2
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	187a      	adds	r2, r7, r1
 8000902:	23a0      	movs	r3, #160	@ 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 f9f3 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b011      	add	sp, #68	@ 0x44
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	40013800 	.word	0x40013800
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8d0 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f002 f8d2 	bl	8002b2c <__errno>
 8000988:	0003      	movs	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	18d2      	adds	r2, r2, r3
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <_sbrk+0x64>)
 80009a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b006      	add	sp, #24
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20001800 	.word	0x20001800
 80009b4:	00000400 	.word	0x00000400
 80009b8:	20000188 	.word	0x20000188
 80009bc:	200002d8 	.word	0x200002d8

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <SystemInit+0x14>)
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	0512      	lsls	r2, r2, #20
 80009ca:	609a      	str	r2, [r3, #8]
#endif
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f7ff fff0 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009e2:	e003      	b.n	80009ec <LoopCopyDataInit>

080009e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ea:	3104      	adds	r1, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <LoopForever+0xa>)
  ldr r3, =_edata
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <LoopForever+0xe>)
  adds r2, r0, r1
 80009f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009f4:	d3f6      	bcc.n	80009e4 <CopyDataInit>
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopForever+0x12>)
  b LoopFillZerobss
 80009f8:	e002      	b.n	8000a00 <LoopFillZerobss>

080009fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80009fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fe:	3204      	adds	r2, #4

08000a00 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <LoopForever+0x16>)
  cmp r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a04:	d3f9      	bcc.n	80009fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a06:	f002 f897 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fd05 	bl	8000418 <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a14:	08003524 	.word	0x08003524
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000a20:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000a24:	200002d8 	.word	0x200002d8

08000a28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_IRQHandler>

08000a2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f80e 	bl	8000a58 <HAL_InitTick>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e001      	b.n	8000a4c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a48:	f7ff fea0 	bl	800078c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <HAL_InitTick+0x88>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d02b      	beq.n	8000ac8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0x8c>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <HAL_InitTick+0x88>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	23fa      	movs	r3, #250	@ 0xfa
 8000a7c:	0098      	lsls	r0, r3, #2
 8000a7e:	f7ff fb55 	bl	800012c <__udivsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f7ff fb50 	bl	800012c <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f923 	bl	8000cda <HAL_SYSTICK_Config>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d112      	bne.n	8000abe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d80a      	bhi.n	8000ab4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f902 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_InitTick+0x90>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e00d      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e008      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e003      	b.n	8000ad0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b005      	add	sp, #20
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_IncTick+0x20>)
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	2000018c 	.word	0x2000018c

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	@ (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	2000018c 	.word	0x2000018c

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	0003      	movs	r3, r0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	001a      	movs	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	0002      	movs	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000b76:	6819      	ldr	r1, [r3, #0]
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010000 	.word	0x40010000

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0002      	movs	r2, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba0:	d828      	bhi.n	8000bf4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <__NVIC_SetPriority+0xd4>)
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	33c0      	adds	r3, #192	@ 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	589b      	ldr	r3, [r3, r2]
 8000bb2:	1dfa      	adds	r2, r7, #7
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	2203      	movs	r2, #3
 8000bba:	400a      	ands	r2, r1
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	21ff      	movs	r1, #255	@ 0xff
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	22ff      	movs	r2, #255	@ 0xff
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2303      	movs	r3, #3
 8000bda:	4003      	ands	r3, r0
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be0:	481f      	ldr	r0, [pc, #124]	@ (8000c60 <__NVIC_SetPriority+0xd4>)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	430a      	orrs	r2, r1
 8000bec:	33c0      	adds	r3, #192	@ 0xc0
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf2:	e031      	b.n	8000c58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c64 <__NVIC_SetPriority+0xd8>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	400b      	ands	r3, r1
 8000c00:	3b08      	subs	r3, #8
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3306      	adds	r3, #6
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	0011      	movs	r1, r2
 8000c14:	2203      	movs	r2, #3
 8000c16:	400a      	ands	r2, r1
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	21ff      	movs	r1, #255	@ 0xff
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	43d2      	mvns	r2, r2
 8000c22:	401a      	ands	r2, r3
 8000c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	22ff      	movs	r2, #255	@ 0xff
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	2303      	movs	r3, #3
 8000c36:	4003      	ands	r3, r0
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <__NVIC_SetPriority+0xd8>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	001c      	movs	r4, r3
 8000c44:	230f      	movs	r3, #15
 8000c46:	4023      	ands	r3, r4
 8000c48:	3b08      	subs	r3, #8
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	3306      	adds	r3, #6
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	18c3      	adds	r3, r0, r3
 8000c54:	3304      	adds	r3, #4
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	2380      	movs	r3, #128	@ 0x80
 8000c76:	045b      	lsls	r3, r3, #17
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d301      	bcc.n	8000c80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e010      	b.n	8000ca2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <SysTick_Config+0x44>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	3a01      	subs	r2, #1
 8000c86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff7c 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <SysTick_Config+0x44>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <SysTick_Config+0x44>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	210f      	movs	r1, #15
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	1c02      	adds	r2, r0, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffbf 	bl	8000c68 <SysTick_Config>
 8000cea:	0003      	movs	r3, r0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d02:	e14d      	b.n	8000fa0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d100      	bne.n	8000d1c <HAL_GPIO_Init+0x28>
 8000d1a:	e13e      	b.n	8000f9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x38>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b12      	cmp	r3, #18
 8000d2a:	d125      	bne.n	8000d78 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	58d3      	ldr	r3, [r2, r3]
 8000d38:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	4013      	ands	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	220f      	movs	r2, #15
 8000d56:	401a      	ands	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	6979      	ldr	r1, [r7, #20]
 8000d76:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	401a      	ands	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d00b      	beq.n	8000dcc <HAL_GPIO_Init+0xd8>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d007      	beq.n	8000dcc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc0:	2b11      	cmp	r3, #17
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b12      	cmp	r3, #18
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	409a      	lsls	r2, r3
 8000dee:	0013      	movs	r3, r2
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d017      	beq.n	8000e66 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	055b      	lsls	r3, r3, #21
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d100      	bne.n	8000e74 <HAL_GPIO_Init+0x180>
 8000e72:	e092      	b.n	8000f9a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e74:	4a50      	ldr	r2, [pc, #320]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	589b      	ldr	r3, [r3, r2]
 8000e80:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4013      	ands	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	43da      	mvns	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	23a0      	movs	r3, #160	@ 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x1d6>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a45      	ldr	r2, [pc, #276]	@ (8000fbc <HAL_GPIO_Init+0x2c8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x1d2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a44      	ldr	r2, [pc, #272]	@ (8000fc0 <HAL_GPIO_Init+0x2cc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x1ce>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a43      	ldr	r2, [pc, #268]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x1ca>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x1d8>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x1d8>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x1d8>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x1d8>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	2103      	movs	r1, #3
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	00d2      	lsls	r2, r2, #3
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000edc:	4936      	ldr	r1, [pc, #216]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000eea:	4a33      	ldr	r2, [pc, #204]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	58d3      	ldr	r3, [r2, r3]
 8000ef0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	4013      	ands	r3, r2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000f10:	4929      	ldr	r1, [pc, #164]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000f18:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f1a:	2384      	movs	r3, #132	@ 0x84
 8000f1c:	58d3      	ldr	r3, [r2, r3]
 8000f1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43da      	mvns	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	4013      	ands	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	@ 0x80
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f3e:	491e      	ldr	r1, [pc, #120]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f40:	2284      	movs	r2, #132	@ 0x84
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4013      	ands	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	035b      	lsls	r3, r3, #13
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	40da      	lsrs	r2, r3
 8000fa8:	1e13      	subs	r3, r2, #0
 8000faa:	d000      	beq.n	8000fae <HAL_GPIO_Init+0x2ba>
 8000fac:	e6aa      	b.n	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	50000800 	.word	0x50000800
 8000fc4:	50001400 	.word	0x50001400

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e1d0      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x1e>
 8000fe4:	e069      	b.n	80010ba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe6:	4bc8      	ldr	r3, [pc, #800]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2238      	movs	r2, #56	@ 0x38
 8000fec:	4013      	ands	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d105      	bne.n	8001002 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d15d      	bne.n	80010ba <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1bc      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	429a      	cmp	r2, r3
 800100c:	d107      	bne.n	800101e <HAL_RCC_OscConfig+0x56>
 800100e:	4bbe      	ldr	r3, [pc, #760]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4bbd      	ldr	r3, [pc, #756]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0249      	lsls	r1, r1, #9
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e020      	b.n	8001060 <HAL_RCC_OscConfig+0x98>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	23a0      	movs	r3, #160	@ 0xa0
 8001024:	02db      	lsls	r3, r3, #11
 8001026:	429a      	cmp	r2, r3
 8001028:	d10e      	bne.n	8001048 <HAL_RCC_OscConfig+0x80>
 800102a:	4bb7      	ldr	r3, [pc, #732]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4bb6      	ldr	r3, [pc, #728]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	02c9      	lsls	r1, r1, #11
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	4bb3      	ldr	r3, [pc, #716]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4bb2      	ldr	r3, [pc, #712]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	0249      	lsls	r1, r1, #9
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001048:	4baf      	ldr	r3, [pc, #700]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4bae      	ldr	r3, [pc, #696]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800104e:	49af      	ldr	r1, [pc, #700]	@ (800130c <HAL_RCC_OscConfig+0x344>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	4bac      	ldr	r3, [pc, #688]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4bab      	ldr	r3, [pc, #684]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800105a:	49ad      	ldr	r1, [pc, #692]	@ (8001310 <HAL_RCC_OscConfig+0x348>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d014      	beq.n	8001092 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fd52 	bl	8000b10 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001072:	f7ff fd4d 	bl	8000b10 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	@ 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e17b      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001084:	4ba0      	ldr	r3, [pc, #640]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0xaa>
 8001090:	e013      	b.n	80010ba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001092:	f7ff fd3d 	bl	8000b10 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800109c:	f7ff fd38 	bl	8000b10 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	@ 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e166      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ae:	4b96      	ldr	r3, [pc, #600]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	029b      	lsls	r3, r3, #10
 80010b6:	4013      	ands	r3, r2
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d100      	bne.n	80010c6 <HAL_RCC_OscConfig+0xfe>
 80010c4:	e086      	b.n	80011d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c6:	4b90      	ldr	r3, [pc, #576]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2238      	movs	r2, #56	@ 0x38
 80010cc:	4013      	ands	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12f      	bne.n	8001136 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e14c      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b89      	ldr	r3, [pc, #548]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a8b      	ldr	r2, [pc, #556]	@ (8001314 <HAL_RCC_OscConfig+0x34c>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	021a      	lsls	r2, r3, #8
 80010f2:	4b85      	ldr	r3, [pc, #532]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d112      	bne.n	8001124 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010fe:	4b82      	ldr	r3, [pc, #520]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a85      	ldr	r2, [pc, #532]	@ (8001318 <HAL_RCC_OscConfig+0x350>)
 8001104:	4013      	ands	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	4b7e      	ldr	r3, [pc, #504]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001112:	4b7d      	ldr	r3, [pc, #500]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0adb      	lsrs	r3, r3, #11
 8001118:	2207      	movs	r2, #7
 800111a:	4013      	ands	r3, r2
 800111c:	4a7f      	ldr	r2, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x354>)
 800111e:	40da      	lsrs	r2, r3
 8001120:	4b7f      	ldr	r3, [pc, #508]	@ (8001320 <HAL_RCC_OscConfig+0x358>)
 8001122:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001124:	4b7f      	ldr	r3, [pc, #508]	@ (8001324 <HAL_RCC_OscConfig+0x35c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fc95 	bl	8000a58 <HAL_InitTick>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d050      	beq.n	80011d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e122      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d030      	beq.n	80011a0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800113e:	4b72      	ldr	r3, [pc, #456]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a75      	ldr	r2, [pc, #468]	@ (8001318 <HAL_RCC_OscConfig+0x350>)
 8001144:	4013      	ands	r3, r2
 8001146:	0019      	movs	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	4b6e      	ldr	r3, [pc, #440]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001152:	4b6d      	ldr	r3, [pc, #436]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b6c      	ldr	r3, [pc, #432]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001158:	2180      	movs	r1, #128	@ 0x80
 800115a:	0049      	lsls	r1, r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fcd6 	bl	8000b10 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800116a:	f7ff fcd1 	bl	8000b10 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0ff      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117c:	4b62      	ldr	r3, [pc, #392]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4013      	ands	r3, r2
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a61      	ldr	r2, [pc, #388]	@ (8001314 <HAL_RCC_OscConfig+0x34c>)
 800118e:	4013      	ands	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	021a      	lsls	r2, r3, #8
 8001198:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	e019      	b.n	80011d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80011a0:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b58      	ldr	r3, [pc, #352]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80011a6:	4960      	ldr	r1, [pc, #384]	@ (8001328 <HAL_RCC_OscConfig+0x360>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcb0 	bl	8000b10 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fcab 	bl	8000b10 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0d9      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4013      	ands	r3, r2
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2208      	movs	r2, #8
 80011da:	4013      	ands	r3, r2
 80011dc:	d042      	beq.n	8001264 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80011de:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2238      	movs	r2, #56	@ 0x38
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b18      	cmp	r3, #24
 80011e8:	d105      	bne.n	80011f6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d138      	bne.n	8001264 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0c2      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d019      	beq.n	8001232 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011fe:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fc81 	bl	8000b10 <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc7c 	bl	8000b10 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0aa      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d0f1      	beq.n	8001214 <HAL_RCC_OscConfig+0x24c>
 8001230:	e018      	b.n	8001264 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001232:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001234:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001236:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 8001238:	2101      	movs	r1, #1
 800123a:	438a      	bics	r2, r1
 800123c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fc67 	bl	8000b10 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001248:	f7ff fc62 	bl	8000b10 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e090      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	d1f1      	bne.n	8001248 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2204      	movs	r2, #4
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x2a8>
 800126e:	e084      	b.n	800137a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2238      	movs	r2, #56	@ 0x38
 800127e:	4013      	ands	r3, r2
 8001280:	2b20      	cmp	r3, #32
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x2c6>
 800128c:	e075      	b.n	800137a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e074      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2e0>
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 800129c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x31a>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x302>
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012b6:	2104      	movs	r1, #4
 80012b8:	430a      	orrs	r2, r1
 80012ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x31a>
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	438a      	bics	r2, r1
 80012d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_OscConfig+0x340>)
 80012dc:	2104      	movs	r1, #4
 80012de:	438a      	bics	r2, r1
 80012e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d028      	beq.n	800133c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fc11 	bl	8000b10 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc0c 	bl	8000b10 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x364>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d915      	bls.n	8001330 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e039      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
 8001308:	40021000 	.word	0x40021000
 800130c:	fffeffff 	.word	0xfffeffff
 8001310:	fffbffff 	.word	0xfffbffff
 8001314:	ffff80ff 	.word	0xffff80ff
 8001318:	ffffc7ff 	.word	0xffffc7ff
 800131c:	02dc6c00 	.word	0x02dc6c00
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	fffffeff 	.word	0xfffffeff
 800132c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_RCC_OscConfig+0x3bc>)
 8001332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d0dc      	beq.n	80012f4 <HAL_RCC_OscConfig+0x32c>
 800133a:	e013      	b.n	8001364 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fbe8 	bl	8000b10 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001344:	e009      	b.n	800135a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fbe3 	bl	8000b10 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_RCC_OscConfig+0x3c0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e010      	b.n	800137c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_RCC_OscConfig+0x3bc>)
 800135c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_RCC_OscConfig+0x3bc>)
 8001370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_RCC_OscConfig+0x3bc>)
 8001374:	4905      	ldr	r1, [pc, #20]	@ (800138c <HAL_RCC_OscConfig+0x3c4>)
 8001376:	400a      	ands	r2, r1
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b006      	add	sp, #24
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	00001388 	.word	0x00001388
 800138c:	efffffff 	.word	0xefffffff

08001390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0e9      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b76      	ldr	r3, [pc, #472]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2207      	movs	r2, #7
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d91e      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2207      	movs	r2, #7
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fba4 	bl	8000b10 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013ce:	f7ff fb9f 	bl	8000b10 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001584 <HAL_RCC_ClockConfig+0x1f4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0ca      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013e2:	4b67      	ldr	r3, [pc, #412]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2207      	movs	r2, #7
 80013e8:	4013      	ands	r3, r2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d1ee      	bne.n	80013ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d017      	beq.n	800142a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d008      	beq.n	8001416 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001404:	4b60      	ldr	r3, [pc, #384]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a60      	ldr	r2, [pc, #384]	@ (800158c <HAL_RCC_ClockConfig+0x1fc>)
 800140a:	401a      	ands	r2, r3
 800140c:	4b5e      	ldr	r3, [pc, #376]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 800140e:	21b0      	movs	r1, #176	@ 0xb0
 8001410:	0109      	lsls	r1, r1, #4
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001416:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4a5d      	ldr	r2, [pc, #372]	@ (8001590 <HAL_RCC_ClockConfig+0x200>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d055      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001434:	4b54      	ldr	r3, [pc, #336]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	221c      	movs	r2, #28
 800143a:	4393      	bics	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b51      	ldr	r3, [pc, #324]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001450:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d11f      	bne.n	800149c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e08b      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001468:	4b47      	ldr	r3, [pc, #284]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4013      	ands	r3, r2
 8001472:	d113      	bne.n	800149c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e07f      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d106      	bne.n	800148e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d108      	bne.n	800149c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e074      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800148e:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e06d      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800149c:	4b3a      	ldr	r3, [pc, #232]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2207      	movs	r2, #7
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b0:	f7ff fb2e 	bl	8000b10 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b8:	e009      	b.n	80014ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff fb29 	bl	8000b10 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HAL_RCC_ClockConfig+0x1f4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e054      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2238      	movs	r2, #56	@ 0x38
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1ec      	bne.n	80014ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2207      	movs	r2, #7
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d21e      	bcs.n	800152c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2207      	movs	r2, #7
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001500:	f7ff fb06 	bl	8000b10 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001508:	e009      	b.n	800151e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff fb01 	bl	8000b10 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_RCC_ClockConfig+0x1f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e02c      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2204      	movs	r2, #4
 8001532:	4013      	ands	r3, r2
 8001534:	d009      	beq.n	800154a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <HAL_RCC_ClockConfig+0x204>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	f000 f82b 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 800154e:	0001      	movs	r1, r0
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_RCC_ClockConfig+0x1f8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	220f      	movs	r2, #15
 8001558:	401a      	ands	r2, r3
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_RCC_ClockConfig+0x208>)
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	58d3      	ldr	r3, [r2, r3]
 8001560:	221f      	movs	r2, #31
 8001562:	4013      	ands	r3, r2
 8001564:	000a      	movs	r2, r1
 8001566:	40da      	lsrs	r2, r3
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_RCC_ClockConfig+0x20c>)
 800156a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_RCC_ClockConfig+0x210>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fa71 	bl	8000a58 <HAL_InitTick>
 8001576:	0003      	movs	r3, r0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	00001388 	.word	0x00001388
 8001588:	40021000 	.word	0x40021000
 800158c:	ffff84ff 	.word	0xffff84ff
 8001590:	fffff0ff 	.word	0xfffff0ff
 8001594:	ffff8fff 	.word	0xffff8fff
 8001598:	08003460 	.word	0x08003460
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_RCC_GetSysClockFreq+0x78>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2238      	movs	r2, #56	@ 0x38
 80015b0:	4013      	ands	r3, r2
 80015b2:	d10f      	bne.n	80015d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_RCC_GetSysClockFreq+0x78>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0adb      	lsrs	r3, r3, #11
 80015ba:	2207      	movs	r2, #7
 80015bc:	4013      	ands	r3, r2
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	4815      	ldr	r0, [pc, #84]	@ (8001620 <HAL_RCC_GetSysClockFreq+0x7c>)
 80015ca:	f7fe fdaf 	bl	800012c <__udivsi3>
 80015ce:	0003      	movs	r3, r0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e01e      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_RCC_GetSysClockFreq+0x78>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2238      	movs	r2, #56	@ 0x38
 80015da:	4013      	ands	r3, r2
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_RCC_GetSysClockFreq+0x80>)
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015e6:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <HAL_RCC_GetSysClockFreq+0x78>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2238      	movs	r2, #56	@ 0x38
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d103      	bne.n	80015fa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_RCC_GetSysClockFreq+0x78>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2238      	movs	r2, #56	@ 0x38
 8001600:	4013      	ands	r3, r2
 8001602:	2b18      	cmp	r3, #24
 8001604:	d103      	bne.n	800160e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001606:	23fa      	movs	r3, #250	@ 0xfa
 8001608:	01db      	lsls	r3, r3, #7
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	e001      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	02dc6c00 	.word	0x02dc6c00
 8001624:	007a1200 	.word	0x007a1200

08001628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_RCC_GetHCLKFreq+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001640:	f7ff fff2 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001644:	0001      	movs	r1, r0
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0b1b      	lsrs	r3, r3, #12
 800164c:	2207      	movs	r2, #7
 800164e:	401a      	ands	r2, r3
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	58d3      	ldr	r3, [r2, r3]
 8001656:	221f      	movs	r2, #31
 8001658:	4013      	ands	r3, r2
 800165a:	40d9      	lsrs	r1, r3
 800165c:	000b      	movs	r3, r1
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	080034a0 	.word	0x080034a0

0800166c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001674:	2313      	movs	r3, #19
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800167c:	2312      	movs	r3, #18
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001690:	e079      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2011      	movs	r0, #17
 8001694:	183b      	adds	r3, r7, r0
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b64      	ldr	r3, [pc, #400]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800169c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	055b      	lsls	r3, r3, #21
 80016a2:	4013      	ands	r3, r2
 80016a4:	d110      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b61      	ldr	r3, [pc, #388]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016aa:	4b60      	ldr	r3, [pc, #384]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	430a      	orrs	r2, r1
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016b4:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	055b      	lsls	r3, r3, #21
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80016c8:	4b58      	ldr	r3, [pc, #352]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d014      	beq.n	800170e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80016e4:	4b51      	ldr	r3, [pc, #324]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e8:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016ee:	4b4f      	ldr	r3, [pc, #316]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016f2:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016f4:	2180      	movs	r1, #128	@ 0x80
 80016f6:	0249      	lsls	r1, r1, #9
 80016f8:	430a      	orrs	r2, r1
 80016fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016fc:	4b4b      	ldr	r3, [pc, #300]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001700:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001702:	494c      	ldr	r1, [pc, #304]	@ (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001704:	400a      	ands	r2, r1
 8001706:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001708:	4b48      	ldr	r3, [pc, #288]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	d016      	beq.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff f9fb 	bl	8000b10 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800171e:	e00c      	b.n	800173a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f9f6 	bl	8000b10 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a43      	ldr	r2, [pc, #268]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d904      	bls.n	800173a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001730:	2313      	movs	r3, #19
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2203      	movs	r2, #3
 8001736:	701a      	strb	r2, [r3, #0]
          break;
 8001738:	e004      	b.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800173a:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d0ed      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001744:	2313      	movs	r3, #19
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800174e:	4b37      	ldr	r3, [pc, #220]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	4a37      	ldr	r2, [pc, #220]	@ (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800175e:	430a      	orrs	r2, r1
 8001760:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001762:	e005      	b.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001764:	2312      	movs	r3, #18
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2213      	movs	r2, #19
 800176a:	18ba      	adds	r2, r7, r2
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001770:	2311      	movs	r3, #17
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b2c      	ldr	r3, [pc, #176]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800177c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800177e:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001780:	492e      	ldr	r1, [pc, #184]	@ (800183c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001782:	400a      	ands	r2, r1
 8001784:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d009      	beq.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001794:	2203      	movs	r2, #3
 8001796:	4393      	bics	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2240      	movs	r2, #64	@ 0x40
 80017aa:	4013      	ands	r3, r2
 80017ac:	d009      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b2:	4a23      	ldr	r2, [pc, #140]	@ (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	01db      	lsls	r3, r3, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	d008      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	0899      	lsrs	r1, r3, #2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d009      	beq.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	da09      	bge.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	22e0      	movs	r2, #224	@ 0xe0
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800181c:	2312      	movs	r3, #18
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b006      	add	sp, #24
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	40021000 	.word	0x40021000
 8001830:	fffffcff 	.word	0xfffffcff
 8001834:	fffeffff 	.word	0xfffeffff
 8001838:	00001388 	.word	0x00001388
 800183c:	efffffff 	.word	0xefffffff
 8001840:	ffffcfff 	.word	0xffffcfff
 8001844:	ffff3fff 	.word	0xffff3fff

08001848 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <HAL_RTC_Init+0x18>
 800185e:	e088      	b.n	8001972 <HAL_RTC_Init+0x12a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2225      	movs	r2, #37	@ 0x25
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2224      	movs	r2, #36	@ 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f7fe ffb2 	bl	80007e0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2225      	movs	r2, #37	@ 0x25
 8001880:	2102      	movs	r1, #2
 8001882:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2210      	movs	r2, #16
 800188c:	4013      	ands	r3, r2
 800188e:	2b10      	cmp	r3, #16
 8001890:	d062      	beq.n	8001958 <HAL_RTC_Init+0x110>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	22ca      	movs	r2, #202	@ 0xca
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2253      	movs	r2, #83	@ 0x53
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80018a2:	250f      	movs	r5, #15
 80018a4:	197c      	adds	r4, r7, r5
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fa82 	bl	8001db2 <RTC_EnterInitMode>
 80018ae:	0003      	movs	r3, r0
 80018b0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80018b2:	0028      	movs	r0, r5
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12c      	bne.n	8001916 <HAL_RTC_Init+0xce>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	492e      	ldr	r1, [pc, #184]	@ (8001980 <HAL_RTC_Init+0x138>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6999      	ldr	r1, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68d2      	ldr	r2, [r2, #12]
 80018f2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001908:	183c      	adds	r4, r7, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 fa9b 	bl	8001e48 <RTC_ExitInitMode>
 8001912:	0003      	movs	r3, r0
 8001914:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8001916:	230f      	movs	r3, #15
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d116      	bne.n	800194e <HAL_RTC_Init+0x106>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	00d2      	lsls	r2, r2, #3
 800192c:	08d2      	lsrs	r2, r2, #3
 800192e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6999      	ldr	r1, [r3, #24]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	619a      	str	r2, [r3, #24]
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	22ff      	movs	r2, #255	@ 0xff
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24
 8001956:	e003      	b.n	8001960 <HAL_RTC_Init+0x118>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001958:	230f      	movs	r3, #15
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <HAL_RTC_Init+0x12a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2225      	movs	r2, #37	@ 0x25
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001972:	230f      	movs	r3, #15
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	ff8fffbf 	.word	0xff8fffbf

08001984 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2224      	movs	r2, #36	@ 0x24
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_RTC_SetTime+0x1a>
 800199a:	2302      	movs	r3, #2
 800199c:	e092      	b.n	8001ac4 <HAL_RTC_SetTime+0x140>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2224      	movs	r2, #36	@ 0x24
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2225      	movs	r2, #37	@ 0x25
 80019aa:	2102      	movs	r1, #2
 80019ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	22ca      	movs	r2, #202	@ 0xca
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2253      	movs	r2, #83	@ 0x53
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019be:	2513      	movs	r5, #19
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f9f4 	bl	8001db2 <RTC_EnterInitMode>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d162      	bne.n	8001a9c <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d125      	bne.n	8001a28 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2240      	movs	r2, #64	@ 0x40
 80019e4:	4013      	ands	r3, r2
 80019e6:	d102      	bne.n	80019ee <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fa6c 	bl	8001ed0 <RTC_ByteToBcd2>
 80019f8:	0003      	movs	r3, r0
 80019fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fa65 	bl	8001ed0 <RTC_ByteToBcd2>
 8001a06:	0003      	movs	r3, r0
 8001a08:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a0a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 fa5d 	bl	8001ed0 <RTC_ByteToBcd2>
 8001a16:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a18:	0022      	movs	r2, r4
 8001a1a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	78db      	ldrb	r3, [r3, #3]
 8001a20:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e017      	b.n	8001a58 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	4013      	ands	r3, r2
 8001a32:	d102      	bne.n	8001a3a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2200      	movs	r2, #0
 8001a38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a46:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a4c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	78db      	ldrb	r3, [r3, #3]
 8001a52:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	491b      	ldr	r1, [pc, #108]	@ (8001acc <HAL_RTC_SetTime+0x148>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4918      	ldr	r1, [pc, #96]	@ (8001ad0 <HAL_RTC_SetTime+0x14c>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6999      	ldr	r1, [r3, #24]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a8c:	2313      	movs	r3, #19
 8001a8e:	18fc      	adds	r4, r7, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f9d8 	bl	8001e48 <RTC_ExitInitMode>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	22ff      	movs	r2, #255	@ 0xff
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001aa4:	2313      	movs	r3, #19
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2225      	movs	r2, #37	@ 0x25
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2224      	movs	r2, #36	@ 0x24
 8001aba:	2100      	movs	r1, #0
 8001abc:	5499      	strb	r1, [r3, r2]

  return status;
 8001abe:	2313      	movs	r3, #19
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	781b      	ldrb	r3, [r3, #0]
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	007f7f7f 	.word	0x007f7f7f
 8001ad0:	fffbffff 	.word	0xfffbffff

08001ad4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	045b      	lsls	r3, r3, #17
 8001af2:	0c5a      	lsrs	r2, r3, #17
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a22      	ldr	r2, [pc, #136]	@ (8001b88 <HAL_RTC_GetTime+0xb4>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	223f      	movs	r2, #63	@ 0x3f
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	227f      	movs	r2, #127	@ 0x7f
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	227f      	movs	r2, #127	@ 0x7f
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	0d9b      	lsrs	r3, r3, #22
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11a      	bne.n	8001b7e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f9e7 	bl	8001f20 <RTC_Bcd2ToByte>
 8001b52:	0003      	movs	r3, r0
 8001b54:	001a      	movs	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f9de 	bl	8001f20 <RTC_Bcd2ToByte>
 8001b64:	0003      	movs	r3, r0
 8001b66:	001a      	movs	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	789b      	ldrb	r3, [r3, #2]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f9d5 	bl	8001f20 <RTC_Bcd2ToByte>
 8001b76:	0003      	movs	r3, r0
 8001b78:	001a      	movs	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b006      	add	sp, #24
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	007f7f7f 	.word	0x007f7f7f

08001b8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2224      	movs	r2, #36	@ 0x24
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RTC_SetDate+0x1a>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e07e      	b.n	8001ca4 <HAL_RTC_SetDate+0x118>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2224      	movs	r2, #36	@ 0x24
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2225      	movs	r2, #37	@ 0x25
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10e      	bne.n	8001bda <HAL_RTC_SetDate+0x4e>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d008      	beq.n	8001bda <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	4393      	bics	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11c      	bne.n	8001c1a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f973 	bl	8001ed0 <RTC_ByteToBcd2>
 8001bea:	0003      	movs	r3, r0
 8001bec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f96c 	bl	8001ed0 <RTC_ByteToBcd2>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001bfc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f964 	bl	8001ed0 <RTC_ByteToBcd2>
 8001c08:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001c0a:	0022      	movs	r2, r4
 8001c0c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00e      	b.n	8001c38 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	78db      	ldrb	r3, [r3, #3]
 8001c1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c26:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001c2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	22ca      	movs	r2, #202	@ 0xca
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2253      	movs	r2, #83	@ 0x53
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001c48:	2513      	movs	r5, #19
 8001c4a:	197c      	adds	r4, r7, r5
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f8af 	bl	8001db2 <RTC_EnterInitMode>
 8001c54:	0003      	movs	r3, r0
 8001c56:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001c58:	0028      	movs	r0, r5
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4910      	ldr	r1, [pc, #64]	@ (8001cac <HAL_RTC_SetDate+0x120>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001c6e:	183c      	adds	r4, r7, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f8e8 	bl	8001e48 <RTC_ExitInitMode>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	22ff      	movs	r2, #255	@ 0xff
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001c84:	2313      	movs	r3, #19
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2225      	movs	r2, #37	@ 0x25
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2224      	movs	r2, #36	@ 0x24
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

  return status;
 8001c9e:	2313      	movs	r3, #19
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b006      	add	sp, #24
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	00ffff3f 	.word	0x00ffff3f

08001cb0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_RTC_GetDate+0x98>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	221f      	movs	r2, #31
 8001cda:	4013      	ands	r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	223f      	movs	r2, #63	@ 0x3f
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11a      	bne.n	8001d3c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	78db      	ldrb	r3, [r3, #3]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f908 	bl	8001f20 <RTC_Bcd2ToByte>
 8001d10:	0003      	movs	r3, r0
 8001d12:	001a      	movs	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f8ff 	bl	8001f20 <RTC_Bcd2ToByte>
 8001d22:	0003      	movs	r3, r0
 8001d24:	001a      	movs	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f8f6 	bl	8001f20 <RTC_Bcd2ToByte>
 8001d34:	0003      	movs	r3, r0
 8001d36:	001a      	movs	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b006      	add	sp, #24
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	00ffff3f 	.word	0x00ffff3f

08001d4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	21a0      	movs	r1, #160	@ 0xa0
 8001d60:	438a      	bics	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001d64:	f7fe fed4 	bl	8000b10 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d6c:	e014      	b.n	8001d98 <HAL_RTC_WaitForSynchro+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d6e:	f7fe fecf 	bl	8000b10 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	23fa      	movs	r3, #250	@ 0xfa
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d90b      	bls.n	8001d98 <HAL_RTC_WaitForSynchro+0x4c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RTC_WaitForSynchro+0x5a>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2225      	movs	r2, #37	@ 0x25
 8001d90:	2103      	movs	r1, #3
 8001d92:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e008      	b.n	8001daa <HAL_RTC_WaitForSynchro+0x5e>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0e4      	beq.n	8001d6e <HAL_RTC_WaitForSynchro+0x22>
 8001da4:	e000      	b.n	8001da8 <HAL_RTC_WaitForSynchro+0x5c>
      }
      else
      {
        break;
 8001da6:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	230f      	movs	r3, #15
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d134      	bne.n	8001e38 <RTC_EnterInitMode+0x86>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001dde:	f7fe fe97 	bl	8000b10 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001de6:	e01a      	b.n	8001e1e <RTC_EnterInitMode+0x6c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001de8:	f7fe fe92 	bl	8000b10 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	200f      	movs	r0, #15
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	1839      	adds	r1, r7, r0
 8001df8:	7809      	ldrb	r1, [r1, #0]
 8001dfa:	7019      	strb	r1, [r3, #0]
 8001dfc:	23fa      	movs	r3, #250	@ 0xfa
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d90c      	bls.n	8001e1e <RTC_EnterInitMode+0x6c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2240      	movs	r2, #64	@ 0x40
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d112      	bne.n	8001e36 <RTC_EnterInitMode+0x84>
        {
          status = HAL_TIMEOUT;
 8001e10:	183b      	adds	r3, r7, r0
 8001e12:	2203      	movs	r2, #3
 8001e14:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2225      	movs	r2, #37	@ 0x25
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	5499      	strb	r1, [r3, r2]
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2240      	movs	r2, #64	@ 0x40
 8001e26:	4013      	ands	r3, r2
 8001e28:	d106      	bne.n	8001e38 <RTC_EnterInitMode+0x86>
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d1d9      	bne.n	8001de8 <RTC_EnterInitMode+0x36>
 8001e34:	e000      	b.n	8001e38 <RTC_EnterInitMode+0x86>
        }
        else
        {
          break;
 8001e36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	240f      	movs	r4, #15
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	438a      	bics	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff ff6b 	bl	8001d4c <HAL_RTC_WaitForSynchro>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d021      	beq.n	8001ebe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2225      	movs	r2, #37	@ 0x25
 8001e7e:	2103      	movs	r1, #3
 8001e80:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	2203      	movs	r2, #3
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e019      	b.n	8001ebe <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001e90:	2120      	movs	r1, #32
 8001e92:	438a      	bics	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff ff57 	bl	8001d4c <HAL_RTC_WaitForSynchro>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d007      	beq.n	8001eb2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2225      	movs	r2, #37	@ 0x25
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001eaa:	230f      	movs	r3, #15
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <RTC_ExitInitMode+0x84>)
 8001eb8:	2120      	movs	r1, #32
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b005      	add	sp, #20
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40002800 	.word	0x40002800

08001ed0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8001ee0:	230b      	movs	r3, #11
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	1dfa      	adds	r2, r7, #7
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8001eea:	e008      	b.n	8001efe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8001ef2:	220b      	movs	r2, #11
 8001ef4:	18bb      	adds	r3, r7, r2
 8001ef6:	18ba      	adds	r2, r7, r2
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	3a0a      	subs	r2, #10
 8001efc:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8001efe:	210b      	movs	r1, #11
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d8f1      	bhi.n	8001eec <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b2db      	uxtb	r3, r3
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0002      	movs	r2, r0
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	001a      	movs	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	18d3      	adds	r3, r2, r3
 8001f50:	b2db      	uxtb	r3, r3
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e046      	b.n	8001ffc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2288      	movs	r2, #136	@ 0x88
 8001f72:	589b      	ldr	r3, [r3, r2]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2284      	movs	r2, #132	@ 0x84
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe fc6a 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2288      	movs	r2, #136	@ 0x88
 8001f8c:	2124      	movs	r1, #36	@ 0x24
 8001f8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 fa4e 	bl	800244c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f8cc 	bl	8002150 <UART_SetConfig>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e01c      	b.n	8001ffc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	490d      	ldr	r1, [pc, #52]	@ (8002004 <HAL_UART_Init+0xa8>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	212a      	movs	r1, #42	@ 0x2a
 8001fde:	438a      	bics	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 fadd 	bl	80025b4 <UART_CheckIdleState>
 8001ffa:	0003      	movs	r3, r0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	ffffb7ff 	.word	0xffffb7ff

08002008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	1dbb      	adds	r3, r7, #6
 8002016:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2288      	movs	r2, #136	@ 0x88
 800201c:	589b      	ldr	r3, [r3, r2]
 800201e:	2b20      	cmp	r3, #32
 8002020:	d000      	beq.n	8002024 <HAL_UART_Transmit+0x1c>
 8002022:	e090      	b.n	8002146 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_UART_Transmit+0x2a>
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e088      	b.n	8002148 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	429a      	cmp	r2, r3
 8002040:	d109      	bne.n	8002056 <HAL_UART_Transmit+0x4e>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d001      	beq.n	8002056 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e078      	b.n	8002148 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2290      	movs	r2, #144	@ 0x90
 800205a:	2100      	movs	r1, #0
 800205c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2288      	movs	r2, #136	@ 0x88
 8002062:	2121      	movs	r1, #33	@ 0x21
 8002064:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002066:	f7fe fd53 	bl	8000b10 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1dba      	adds	r2, r7, #6
 8002072:	2154      	movs	r1, #84	@ 0x54
 8002074:	8812      	ldrh	r2, [r2, #0]
 8002076:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1dba      	adds	r2, r7, #6
 800207c:	2156      	movs	r1, #86	@ 0x56
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	015b      	lsls	r3, r3, #5
 800208a:	429a      	cmp	r2, r3
 800208c:	d108      	bne.n	80020a0 <HAL_UART_Transmit+0x98>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	e003      	b.n	80020a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020a8:	e030      	b.n	800210c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	0013      	movs	r3, r2
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	f000 fb26 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d005      	beq.n	80020cc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2288      	movs	r2, #136	@ 0x88
 80020c4:	2120      	movs	r1, #32
 80020c6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e03d      	b.n	8002148 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10b      	bne.n	80020ea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	001a      	movs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	05d2      	lsls	r2, r2, #23
 80020de:	0dd2      	lsrs	r2, r2, #23
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	3302      	adds	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	e007      	b.n	80020fa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2256      	movs	r2, #86	@ 0x56
 80020fe:	5a9b      	ldrh	r3, [r3, r2]
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b299      	uxth	r1, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2256      	movs	r2, #86	@ 0x56
 800210a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2256      	movs	r2, #86	@ 0x56
 8002110:	5a9b      	ldrh	r3, [r3, r2]
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1c8      	bne.n	80020aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	0013      	movs	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	2140      	movs	r1, #64	@ 0x40
 8002126:	f000 faef 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 800212a:	1e03      	subs	r3, r0, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2288      	movs	r2, #136	@ 0x88
 8002132:	2120      	movs	r1, #32
 8002134:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e006      	b.n	8002148 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2288      	movs	r2, #136	@ 0x88
 800213e:	2120      	movs	r1, #32
 8002140:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b008      	add	sp, #32
 800214e:	bd80      	pop	{r7, pc}

08002150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002158:	231e      	movs	r3, #30
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4aab      	ldr	r2, [pc, #684]	@ (800242c <UART_SetConfig+0x2dc>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4aa6      	ldr	r2, [pc, #664]	@ (8002430 <UART_SetConfig+0x2e0>)
 8002196:	4013      	ands	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a9d      	ldr	r2, [pc, #628]	@ (8002434 <UART_SetConfig+0x2e4>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	220f      	movs	r2, #15
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a93      	ldr	r2, [pc, #588]	@ (8002438 <UART_SetConfig+0x2e8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d127      	bne.n	800223e <UART_SetConfig+0xee>
 80021ee:	4b93      	ldr	r3, [pc, #588]	@ (800243c <UART_SetConfig+0x2ec>)
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	2203      	movs	r2, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d017      	beq.n	800222a <UART_SetConfig+0xda>
 80021fa:	d81b      	bhi.n	8002234 <UART_SetConfig+0xe4>
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d00a      	beq.n	8002216 <UART_SetConfig+0xc6>
 8002200:	d818      	bhi.n	8002234 <UART_SetConfig+0xe4>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <UART_SetConfig+0xbc>
 8002206:	2b01      	cmp	r3, #1
 8002208:	d00a      	beq.n	8002220 <UART_SetConfig+0xd0>
 800220a:	e013      	b.n	8002234 <UART_SetConfig+0xe4>
 800220c:	231f      	movs	r3, #31
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e021      	b.n	800225a <UART_SetConfig+0x10a>
 8002216:	231f      	movs	r3, #31
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e01c      	b.n	800225a <UART_SetConfig+0x10a>
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2204      	movs	r2, #4
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e017      	b.n	800225a <UART_SetConfig+0x10a>
 800222a:	231f      	movs	r3, #31
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2208      	movs	r2, #8
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e012      	b.n	800225a <UART_SetConfig+0x10a>
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2210      	movs	r2, #16
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e00d      	b.n	800225a <UART_SetConfig+0x10a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7f      	ldr	r2, [pc, #508]	@ (8002440 <UART_SetConfig+0x2f0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d104      	bne.n	8002252 <UART_SetConfig+0x102>
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e003      	b.n	800225a <UART_SetConfig+0x10a>
 8002252:	231f      	movs	r3, #31
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2210      	movs	r2, #16
 8002258:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	429a      	cmp	r2, r3
 8002264:	d000      	beq.n	8002268 <UART_SetConfig+0x118>
 8002266:	e06f      	b.n	8002348 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002268:	231f      	movs	r3, #31
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d01f      	beq.n	80022b2 <UART_SetConfig+0x162>
 8002272:	dc22      	bgt.n	80022ba <UART_SetConfig+0x16a>
 8002274:	2b04      	cmp	r3, #4
 8002276:	d017      	beq.n	80022a8 <UART_SetConfig+0x158>
 8002278:	dc1f      	bgt.n	80022ba <UART_SetConfig+0x16a>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <UART_SetConfig+0x134>
 800227e:	2b02      	cmp	r3, #2
 8002280:	d005      	beq.n	800228e <UART_SetConfig+0x13e>
 8002282:	e01a      	b.n	80022ba <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002284:	f7ff f9da 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
        break;
 800228c:	e01c      	b.n	80022c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800228e:	4b6b      	ldr	r3, [pc, #428]	@ (800243c <UART_SetConfig+0x2ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2207      	movs	r2, #7
 8002296:	4013      	ands	r3, r2
 8002298:	3301      	adds	r3, #1
 800229a:	0019      	movs	r1, r3
 800229c:	4869      	ldr	r0, [pc, #420]	@ (8002444 <UART_SetConfig+0x2f4>)
 800229e:	f7fd ff45 	bl	800012c <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	61bb      	str	r3, [r7, #24]
        break;
 80022a6:	e00f      	b.n	80022c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a8:	f7ff f97c 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
        break;
 80022b0:	e00a      	b.n	80022c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	61bb      	str	r3, [r7, #24]
        break;
 80022b8:	e006      	b.n	80022c8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022be:	231e      	movs	r3, #30
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
        break;
 80022c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <UART_SetConfig+0x180>
 80022ce:	e097      	b.n	8002400 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <UART_SetConfig+0x2f8>)
 80022d6:	0052      	lsls	r2, r2, #1
 80022d8:	5ad3      	ldrh	r3, [r2, r3]
 80022da:	0019      	movs	r1, r3
 80022dc:	69b8      	ldr	r0, [r7, #24]
 80022de:	f7fd ff25 	bl	800012c <__udivsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	005a      	lsls	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	18d2      	adds	r2, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	0019      	movs	r1, r3
 80022f4:	0010      	movs	r0, r2
 80022f6:	f7fd ff19 	bl	800012c <__udivsi3>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d91c      	bls.n	800233e <UART_SetConfig+0x1ee>
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	025b      	lsls	r3, r3, #9
 800230a:	429a      	cmp	r2, r3
 800230c:	d217      	bcs.n	800233e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	b29a      	uxth	r2, r3
 8002312:	200e      	movs	r0, #14
 8002314:	183b      	adds	r3, r7, r0
 8002316:	210f      	movs	r1, #15
 8002318:	438a      	bics	r2, r1
 800231a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	2207      	movs	r2, #7
 8002324:	4013      	ands	r3, r2
 8002326:	b299      	uxth	r1, r3
 8002328:	183b      	adds	r3, r7, r0
 800232a:	183a      	adds	r2, r7, r0
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	183a      	adds	r2, r7, r0
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e060      	b.n	8002400 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800233e:	231e      	movs	r3, #30
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e05b      	b.n	8002400 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002348:	231f      	movs	r3, #31
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d01f      	beq.n	8002392 <UART_SetConfig+0x242>
 8002352:	dc22      	bgt.n	800239a <UART_SetConfig+0x24a>
 8002354:	2b04      	cmp	r3, #4
 8002356:	d017      	beq.n	8002388 <UART_SetConfig+0x238>
 8002358:	dc1f      	bgt.n	800239a <UART_SetConfig+0x24a>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <UART_SetConfig+0x214>
 800235e:	2b02      	cmp	r3, #2
 8002360:	d005      	beq.n	800236e <UART_SetConfig+0x21e>
 8002362:	e01a      	b.n	800239a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002364:	f7ff f96a 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
        break;
 800236c:	e01c      	b.n	80023a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800236e:	4b33      	ldr	r3, [pc, #204]	@ (800243c <UART_SetConfig+0x2ec>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2207      	movs	r2, #7
 8002376:	4013      	ands	r3, r2
 8002378:	3301      	adds	r3, #1
 800237a:	0019      	movs	r1, r3
 800237c:	4831      	ldr	r0, [pc, #196]	@ (8002444 <UART_SetConfig+0x2f4>)
 800237e:	f7fd fed5 	bl	800012c <__udivsi3>
 8002382:	0003      	movs	r3, r0
 8002384:	61bb      	str	r3, [r7, #24]
        break;
 8002386:	e00f      	b.n	80023a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002388:	f7ff f90c 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 800238c:	0003      	movs	r3, r0
 800238e:	61bb      	str	r3, [r7, #24]
        break;
 8002390:	e00a      	b.n	80023a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	61bb      	str	r3, [r7, #24]
        break;
 8002398:	e006      	b.n	80023a8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800239e:	231e      	movs	r3, #30
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
        break;
 80023a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b2:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <UART_SetConfig+0x2f8>)
 80023b4:	0052      	lsls	r2, r2, #1
 80023b6:	5ad3      	ldrh	r3, [r2, r3]
 80023b8:	0019      	movs	r1, r3
 80023ba:	69b8      	ldr	r0, [r7, #24]
 80023bc:	f7fd feb6 	bl	800012c <__udivsi3>
 80023c0:	0003      	movs	r3, r0
 80023c2:	001a      	movs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0019      	movs	r1, r3
 80023d2:	0010      	movs	r0, r2
 80023d4:	f7fd feaa 	bl	800012c <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	d90a      	bls.n	80023f8 <UART_SetConfig+0x2a8>
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d205      	bcs.n	80023f8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e003      	b.n	8002400 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80023f8:	231e      	movs	r3, #30
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	226a      	movs	r2, #106	@ 0x6a
 8002404:	2101      	movs	r1, #1
 8002406:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2268      	movs	r2, #104	@ 0x68
 800240c:	2101      	movs	r1, #1
 800240e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800241c:	231e      	movs	r3, #30
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	781b      	ldrb	r3, [r3, #0]
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b008      	add	sp, #32
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	cfff69f3 	.word	0xcfff69f3
 8002430:	ffffcfff 	.word	0xffffcfff
 8002434:	11fff4ff 	.word	0x11fff4ff
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	40004400 	.word	0x40004400
 8002444:	02dc6c00 	.word	0x02dc6c00
 8002448:	080034c0 	.word	0x080034c0

0800244c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	2208      	movs	r2, #8
 800245a:	4013      	ands	r3, r2
 800245c:	d00b      	beq.n	8002476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <UART_AdvFeatureConfig+0x144>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d00b      	beq.n	8002498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a43      	ldr	r2, [pc, #268]	@ (8002594 <UART_AdvFeatureConfig+0x148>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d00b      	beq.n	80024ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002598 <UART_AdvFeatureConfig+0x14c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	2204      	movs	r2, #4
 80024c0:	4013      	ands	r3, r2
 80024c2:	d00b      	beq.n	80024dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a34      	ldr	r2, [pc, #208]	@ (800259c <UART_AdvFeatureConfig+0x150>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	2210      	movs	r2, #16
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a2c      	ldr	r2, [pc, #176]	@ (80025a0 <UART_AdvFeatureConfig+0x154>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	2220      	movs	r2, #32
 8002504:	4013      	ands	r3, r2
 8002506:	d00b      	beq.n	8002520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <UART_AdvFeatureConfig+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	2240      	movs	r2, #64	@ 0x40
 8002526:	4013      	ands	r3, r2
 8002528:	d01d      	beq.n	8002566 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <UART_AdvFeatureConfig+0x15c>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	035b      	lsls	r3, r3, #13
 800254a:	429a      	cmp	r2, r3
 800254c:	d10b      	bne.n	8002566 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a15      	ldr	r2, [pc, #84]	@ (80025ac <UART_AdvFeatureConfig+0x160>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	4013      	ands	r3, r2
 800256e:	d00b      	beq.n	8002588 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <UART_AdvFeatureConfig+0x164>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  }
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	ffff7fff 	.word	0xffff7fff
 8002594:	fffdffff 	.word	0xfffdffff
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	fffbffff 	.word	0xfffbffff
 80025a0:	ffffefff 	.word	0xffffefff
 80025a4:	ffffdfff 	.word	0xffffdfff
 80025a8:	ffefffff 	.word	0xffefffff
 80025ac:	ff9fffff 	.word	0xff9fffff
 80025b0:	fff7ffff 	.word	0xfff7ffff

080025b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b092      	sub	sp, #72	@ 0x48
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2290      	movs	r2, #144	@ 0x90
 80025c0:	2100      	movs	r1, #0
 80025c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025c4:	f7fe faa4 	bl	8000b10 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2208      	movs	r2, #8
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d12d      	bne.n	8002636 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	0391      	lsls	r1, r2, #14
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4a47      	ldr	r2, [pc, #284]	@ (8002700 <UART_CheckIdleState+0x14c>)
 80025e4:	9200      	str	r2, [sp, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f000 f88e 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d022      	beq.n	8002636 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025f0:	f3ef 8310 	mrs	r3, PRIMASK
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025fa:	2301      	movs	r3, #1
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	438a      	bics	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2288      	movs	r2, #136	@ 0x88
 8002626:	2120      	movs	r1, #32
 8002628:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2284      	movs	r2, #132	@ 0x84
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e060      	b.n	80026f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2204      	movs	r2, #4
 800263e:	4013      	ands	r3, r2
 8002640:	2b04      	cmp	r3, #4
 8002642:	d146      	bne.n	80026d2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002646:	2280      	movs	r2, #128	@ 0x80
 8002648:	03d1      	lsls	r1, r2, #15
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4a2c      	ldr	r2, [pc, #176]	@ (8002700 <UART_CheckIdleState+0x14c>)
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	f000 f859 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d03b      	beq.n	80026d2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800265a:	f3ef 8310 	mrs	r3, PRIMASK
 800265e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002660:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
 8002664:	2301      	movs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4922      	ldr	r1, [pc, #136]	@ (8002704 <UART_CheckIdleState+0x150>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f383 8810 	msr	PRIMASK, r3
}
 800268a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800268c:	f3ef 8310 	mrs	r3, PRIMASK
 8002690:	61bb      	str	r3, [r7, #24]
  return(result);
 8002692:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002694:	633b      	str	r3, [r7, #48]	@ 0x30
 8002696:	2301      	movs	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f383 8810 	msr	PRIMASK, r3
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f383 8810 	msr	PRIMASK, r3
}
 80026bc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	228c      	movs	r2, #140	@ 0x8c
 80026c2:	2120      	movs	r1, #32
 80026c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2284      	movs	r2, #132	@ 0x84
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e012      	b.n	80026f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2288      	movs	r2, #136	@ 0x88
 80026d6:	2120      	movs	r1, #32
 80026d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	228c      	movs	r2, #140	@ 0x8c
 80026de:	2120      	movs	r1, #32
 80026e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2284      	movs	r2, #132	@ 0x84
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b010      	add	sp, #64	@ 0x40
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	01ffffff 	.word	0x01ffffff
 8002704:	fffffedf 	.word	0xfffffedf

08002708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002718:	e04b      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3301      	adds	r3, #1
 800271e:	d048      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7fe f9f6 	bl	8000b10 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04b      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d035      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d111      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2208      	movs	r2, #8
 800275a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f83c 	bl	80027dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2290      	movs	r2, #144	@ 0x90
 8002768:	2108      	movs	r1, #8
 800276a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2284      	movs	r2, #132	@ 0x84
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02c      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	401a      	ands	r2, r3
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	429a      	cmp	r2, r3
 800278a:	d112      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2280      	movs	r2, #128	@ 0x80
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f81f 	bl	80027dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2290      	movs	r2, #144	@ 0x90
 80027a2:	2120      	movs	r1, #32
 80027a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2284      	movs	r2, #132	@ 0x84
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e00f      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	4013      	ands	r3, r2
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	425a      	negs	r2, r3
 80027c2:	4153      	adcs	r3, r2
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	001a      	movs	r2, r3
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d0a4      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	@ 0x38
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	617b      	str	r3, [r7, #20]
  return(result);
 80027ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4926      	ldr	r1, [pc, #152]	@ (80028a0 <UART_EndRxTransfer+0xc4>)
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002816:	f3ef 8310 	mrs	r3, PRIMASK
 800281a:	623b      	str	r3, [r7, #32]
  return(result);
 800281c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002820:	2301      	movs	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	491b      	ldr	r1, [pc, #108]	@ (80028a4 <UART_EndRxTransfer+0xc8>)
 8002838:	400a      	ands	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d118      	bne.n	8002882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002850:	f3ef 8310 	mrs	r3, PRIMASK
 8002854:	60bb      	str	r3, [r7, #8]
  return(result);
 8002856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285a:	2301      	movs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2110      	movs	r1, #16
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f383 8810 	msr	PRIMASK, r3
}
 8002880:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	228c      	movs	r2, #140	@ 0x8c
 8002886:	2120      	movs	r1, #32
 8002888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b00e      	add	sp, #56	@ 0x38
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	fffffedf 	.word	0xfffffedf
 80028a4:	effffffe 	.word	0xeffffffe

080028a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2284      	movs	r2, #132	@ 0x84
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_UARTEx_DisableFifoMode+0x16>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e027      	b.n	800290e <HAL_UARTEx_DisableFifoMode+0x66>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2284      	movs	r2, #132	@ 0x84
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2288      	movs	r2, #136	@ 0x88
 80028ca:	2124      	movs	r1, #36	@ 0x24
 80028cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <HAL_UARTEx_DisableFifoMode+0x70>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2288      	movs	r2, #136	@ 0x88
 8002900:	2120      	movs	r1, #32
 8002902:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2284      	movs	r2, #132	@ 0x84
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	dfffffff 	.word	0xdfffffff

0800291c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2284      	movs	r2, #132	@ 0x84
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e02e      	b.n	8002992 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2284      	movs	r2, #132	@ 0x84
 8002938:	2101      	movs	r1, #1
 800293a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2288      	movs	r2, #136	@ 0x88
 8002940:	2124      	movs	r1, #36	@ 0x24
 8002942:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	438a      	bics	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	08d9      	lsrs	r1, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f854 	bl	8002a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2288      	movs	r2, #136	@ 0x88
 8002984:	2120      	movs	r1, #32
 8002986:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2284      	movs	r2, #132	@ 0x84
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2284      	movs	r2, #132	@ 0x84
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e02f      	b.n	8002a14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2284      	movs	r2, #132	@ 0x84
 80029b8:	2101      	movs	r1, #1
 80029ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2288      	movs	r2, #136	@ 0x88
 80029c0:	2124      	movs	r1, #36	@ 0x24
 80029c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2101      	movs	r1, #1
 80029d8:	438a      	bics	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f813 	bl	8002a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2288      	movs	r2, #136	@ 0x88
 8002a06:	2120      	movs	r1, #32
 8002a08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2284      	movs	r2, #132	@ 0x84
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f1ffffff 	.word	0xf1ffffff

08002a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	226a      	movs	r2, #106	@ 0x6a
 8002a34:	2101      	movs	r1, #1
 8002a36:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2268      	movs	r2, #104	@ 0x68
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002a40:	e043      	b.n	8002aca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002a42:	260f      	movs	r6, #15
 8002a44:	19bb      	adds	r3, r7, r6
 8002a46:	2208      	movs	r2, #8
 8002a48:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002a4a:	200e      	movs	r0, #14
 8002a4c:	183b      	adds	r3, r7, r0
 8002a4e:	2208      	movs	r2, #8
 8002a50:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	0e5b      	lsrs	r3, r3, #25
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	240d      	movs	r4, #13
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	2107      	movs	r1, #7
 8002a62:	400a      	ands	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	0f5b      	lsrs	r3, r3, #29
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	250c      	movs	r5, #12
 8002a72:	197b      	adds	r3, r7, r5
 8002a74:	2107      	movs	r1, #7
 8002a76:	400a      	ands	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a7a:	183b      	adds	r3, r7, r0
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	197a      	adds	r2, r7, r5
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	4914      	ldr	r1, [pc, #80]	@ (8002ad4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002a84:	5c8a      	ldrb	r2, [r1, r2]
 8002a86:	435a      	muls	r2, r3
 8002a88:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002a8a:	197b      	adds	r3, r7, r5
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a92:	0019      	movs	r1, r3
 8002a94:	f7fd fbd4 	bl	8000240 <__divsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	226a      	movs	r2, #106	@ 0x6a
 8002aa0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002aa2:	19bb      	adds	r3, r7, r6
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	193a      	adds	r2, r7, r4
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	490a      	ldr	r1, [pc, #40]	@ (8002ad4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002aac:	5c8a      	ldrb	r2, [r1, r2]
 8002aae:	435a      	muls	r2, r3
 8002ab0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002aba:	0019      	movs	r1, r3
 8002abc:	f7fd fbc0 	bl	8000240 <__divsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2268      	movs	r2, #104	@ 0x68
 8002ac8:	5299      	strh	r1, [r3, r2]
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b005      	add	sp, #20
 8002ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	080034d8 	.word	0x080034d8
 8002ad8:	080034e0 	.word	0x080034e0

08002adc <siprintf>:
 8002adc:	b40e      	push	{r1, r2, r3}
 8002ade:	b500      	push	{lr}
 8002ae0:	490b      	ldr	r1, [pc, #44]	@ (8002b10 <siprintf+0x34>)
 8002ae2:	b09c      	sub	sp, #112	@ 0x70
 8002ae4:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ae6:	9002      	str	r0, [sp, #8]
 8002ae8:	9006      	str	r0, [sp, #24]
 8002aea:	9107      	str	r1, [sp, #28]
 8002aec:	9104      	str	r1, [sp, #16]
 8002aee:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <siprintf+0x38>)
 8002af0:	4909      	ldr	r1, [pc, #36]	@ (8002b18 <siprintf+0x3c>)
 8002af2:	cb04      	ldmia	r3!, {r2}
 8002af4:	9105      	str	r1, [sp, #20]
 8002af6:	6800      	ldr	r0, [r0, #0]
 8002af8:	a902      	add	r1, sp, #8
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	f000 f99e 	bl	8002e3c <_svfiprintf_r>
 8002b00:	2200      	movs	r2, #0
 8002b02:	9b02      	ldr	r3, [sp, #8]
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	b01c      	add	sp, #112	@ 0x70
 8002b08:	bc08      	pop	{r3}
 8002b0a:	b003      	add	sp, #12
 8002b0c:	4718      	bx	r3
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	7fffffff 	.word	0x7fffffff
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	ffff0208 	.word	0xffff0208

08002b1c <memset>:
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	1882      	adds	r2, r0, r2
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <__errno>:
 8002b2c:	4b01      	ldr	r3, [pc, #4]	@ (8002b34 <__errno+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	2000000c 	.word	0x2000000c

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4c0c      	ldr	r4, [pc, #48]	@ (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	2600      	movs	r6, #0
 8002b4a:	f000 fc65 	bl	8003418 <_init>
 8002b4e:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <__libc_init_array+0x40>)
 8002b50:	4d0a      	ldr	r5, [pc, #40]	@ (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	00b3      	lsls	r3, r6, #2
 8002b5e:	58eb      	ldr	r3, [r5, r3]
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	00b3      	lsls	r3, r6, #2
 8002b68:	58eb      	ldr	r3, [r5, r3]
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	0800351c 	.word	0x0800351c
 8002b74:	0800351c 	.word	0x0800351c
 8002b78:	08003520 	.word	0x08003520
 8002b7c:	0800351c 	.word	0x0800351c

08002b80 <__retarget_lock_acquire_recursive>:
 8002b80:	4770      	bx	lr

08002b82 <__retarget_lock_release_recursive>:
 8002b82:	4770      	bx	lr

08002b84 <_free_r>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	0005      	movs	r5, r0
 8002b88:	1e0c      	subs	r4, r1, #0
 8002b8a:	d010      	beq.n	8002bae <_free_r+0x2a>
 8002b8c:	3c04      	subs	r4, #4
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da00      	bge.n	8002b96 <_free_r+0x12>
 8002b94:	18e4      	adds	r4, r4, r3
 8002b96:	0028      	movs	r0, r5
 8002b98:	f000 f8e0 	bl	8002d5c <__malloc_lock>
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <_free_r+0x90>)
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <_free_r+0x2c>
 8002ba4:	6063      	str	r3, [r4, #4]
 8002ba6:	6014      	str	r4, [r2, #0]
 8002ba8:	0028      	movs	r0, r5
 8002baa:	f000 f8df 	bl	8002d6c <__malloc_unlock>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	42a3      	cmp	r3, r4
 8002bb2:	d908      	bls.n	8002bc6 <_free_r+0x42>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	1821      	adds	r1, r4, r0
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d1f3      	bne.n	8002ba4 <_free_r+0x20>
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	1809      	adds	r1, r1, r0
 8002bc2:	6021      	str	r1, [r4, #0]
 8002bc4:	e7ee      	b.n	8002ba4 <_free_r+0x20>
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <_free_r+0x4e>
 8002bce:	42a3      	cmp	r3, r4
 8002bd0:	d9f9      	bls.n	8002bc6 <_free_r+0x42>
 8002bd2:	6811      	ldr	r1, [r2, #0]
 8002bd4:	1850      	adds	r0, r2, r1
 8002bd6:	42a0      	cmp	r0, r4
 8002bd8:	d10b      	bne.n	8002bf2 <_free_r+0x6e>
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	1809      	adds	r1, r1, r0
 8002bde:	1850      	adds	r0, r2, r1
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	4283      	cmp	r3, r0
 8002be4:	d1e0      	bne.n	8002ba8 <_free_r+0x24>
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	1841      	adds	r1, r0, r1
 8002bec:	6011      	str	r1, [r2, #0]
 8002bee:	6053      	str	r3, [r2, #4]
 8002bf0:	e7da      	b.n	8002ba8 <_free_r+0x24>
 8002bf2:	42a0      	cmp	r0, r4
 8002bf4:	d902      	bls.n	8002bfc <_free_r+0x78>
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	602b      	str	r3, [r5, #0]
 8002bfa:	e7d5      	b.n	8002ba8 <_free_r+0x24>
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	1821      	adds	r1, r4, r0
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d103      	bne.n	8002c0c <_free_r+0x88>
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	1809      	adds	r1, r1, r0
 8002c0a:	6021      	str	r1, [r4, #0]
 8002c0c:	6063      	str	r3, [r4, #4]
 8002c0e:	6054      	str	r4, [r2, #4]
 8002c10:	e7ca      	b.n	8002ba8 <_free_r+0x24>
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	200002d4 	.word	0x200002d4

08002c18 <sbrk_aligned>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c58 <sbrk_aligned+0x40>)
 8002c1c:	000d      	movs	r5, r1
 8002c1e:	6831      	ldr	r1, [r6, #0]
 8002c20:	0004      	movs	r4, r0
 8002c22:	2900      	cmp	r1, #0
 8002c24:	d102      	bne.n	8002c2c <sbrk_aligned+0x14>
 8002c26:	f000 fb99 	bl	800335c <_sbrk_r>
 8002c2a:	6030      	str	r0, [r6, #0]
 8002c2c:	0029      	movs	r1, r5
 8002c2e:	0020      	movs	r0, r4
 8002c30:	f000 fb94 	bl	800335c <_sbrk_r>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d103      	bne.n	8002c40 <sbrk_aligned+0x28>
 8002c38:	2501      	movs	r5, #1
 8002c3a:	426d      	negs	r5, r5
 8002c3c:	0028      	movs	r0, r5
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	2303      	movs	r3, #3
 8002c42:	1cc5      	adds	r5, r0, #3
 8002c44:	439d      	bics	r5, r3
 8002c46:	42a8      	cmp	r0, r5
 8002c48:	d0f8      	beq.n	8002c3c <sbrk_aligned+0x24>
 8002c4a:	1a29      	subs	r1, r5, r0
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	f000 fb85 	bl	800335c <_sbrk_r>
 8002c52:	3001      	adds	r0, #1
 8002c54:	d1f2      	bne.n	8002c3c <sbrk_aligned+0x24>
 8002c56:	e7ef      	b.n	8002c38 <sbrk_aligned+0x20>
 8002c58:	200002d0 	.word	0x200002d0

08002c5c <_malloc_r>:
 8002c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c5e:	2203      	movs	r2, #3
 8002c60:	1ccb      	adds	r3, r1, #3
 8002c62:	4393      	bics	r3, r2
 8002c64:	3308      	adds	r3, #8
 8002c66:	0005      	movs	r5, r0
 8002c68:	001f      	movs	r7, r3
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d234      	bcs.n	8002cd8 <_malloc_r+0x7c>
 8002c6e:	270c      	movs	r7, #12
 8002c70:	42b9      	cmp	r1, r7
 8002c72:	d833      	bhi.n	8002cdc <_malloc_r+0x80>
 8002c74:	0028      	movs	r0, r5
 8002c76:	f000 f871 	bl	8002d5c <__malloc_lock>
 8002c7a:	4e37      	ldr	r6, [pc, #220]	@ (8002d58 <_malloc_r+0xfc>)
 8002c7c:	6833      	ldr	r3, [r6, #0]
 8002c7e:	001c      	movs	r4, r3
 8002c80:	2c00      	cmp	r4, #0
 8002c82:	d12f      	bne.n	8002ce4 <_malloc_r+0x88>
 8002c84:	0039      	movs	r1, r7
 8002c86:	0028      	movs	r0, r5
 8002c88:	f7ff ffc6 	bl	8002c18 <sbrk_aligned>
 8002c8c:	0004      	movs	r4, r0
 8002c8e:	1c43      	adds	r3, r0, #1
 8002c90:	d15f      	bne.n	8002d52 <_malloc_r+0xf6>
 8002c92:	6834      	ldr	r4, [r6, #0]
 8002c94:	9400      	str	r4, [sp, #0]
 8002c96:	9b00      	ldr	r3, [sp, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d14a      	bne.n	8002d32 <_malloc_r+0xd6>
 8002c9c:	2c00      	cmp	r4, #0
 8002c9e:	d052      	beq.n	8002d46 <_malloc_r+0xea>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	18e3      	adds	r3, r4, r3
 8002ca6:	9900      	ldr	r1, [sp, #0]
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	f000 fb57 	bl	800335c <_sbrk_r>
 8002cae:	9b01      	ldr	r3, [sp, #4]
 8002cb0:	4283      	cmp	r3, r0
 8002cb2:	d148      	bne.n	8002d46 <_malloc_r+0xea>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	0028      	movs	r0, r5
 8002cb8:	1aff      	subs	r7, r7, r3
 8002cba:	0039      	movs	r1, r7
 8002cbc:	f7ff ffac 	bl	8002c18 <sbrk_aligned>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d040      	beq.n	8002d46 <_malloc_r+0xea>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	19db      	adds	r3, r3, r7
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	6833      	ldr	r3, [r6, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	2a00      	cmp	r2, #0
 8002cd0:	d133      	bne.n	8002d3a <_malloc_r+0xde>
 8002cd2:	9b00      	ldr	r3, [sp, #0]
 8002cd4:	6033      	str	r3, [r6, #0]
 8002cd6:	e019      	b.n	8002d0c <_malloc_r+0xb0>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dac9      	bge.n	8002c70 <_malloc_r+0x14>
 8002cdc:	230c      	movs	r3, #12
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ce4:	6821      	ldr	r1, [r4, #0]
 8002ce6:	1bc9      	subs	r1, r1, r7
 8002ce8:	d420      	bmi.n	8002d2c <_malloc_r+0xd0>
 8002cea:	290b      	cmp	r1, #11
 8002cec:	d90a      	bls.n	8002d04 <_malloc_r+0xa8>
 8002cee:	19e2      	adds	r2, r4, r7
 8002cf0:	6027      	str	r7, [r4, #0]
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	d104      	bne.n	8002d00 <_malloc_r+0xa4>
 8002cf6:	6032      	str	r2, [r6, #0]
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	6011      	str	r1, [r2, #0]
 8002cfc:	6053      	str	r3, [r2, #4]
 8002cfe:	e005      	b.n	8002d0c <_malloc_r+0xb0>
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	e7f9      	b.n	8002cf8 <_malloc_r+0x9c>
 8002d04:	6862      	ldr	r2, [r4, #4]
 8002d06:	42a3      	cmp	r3, r4
 8002d08:	d10e      	bne.n	8002d28 <_malloc_r+0xcc>
 8002d0a:	6032      	str	r2, [r6, #0]
 8002d0c:	0028      	movs	r0, r5
 8002d0e:	f000 f82d 	bl	8002d6c <__malloc_unlock>
 8002d12:	0020      	movs	r0, r4
 8002d14:	2207      	movs	r2, #7
 8002d16:	300b      	adds	r0, #11
 8002d18:	1d23      	adds	r3, r4, #4
 8002d1a:	4390      	bics	r0, r2
 8002d1c:	1ac2      	subs	r2, r0, r3
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d0df      	beq.n	8002ce2 <_malloc_r+0x86>
 8002d22:	1a1b      	subs	r3, r3, r0
 8002d24:	50a3      	str	r3, [r4, r2]
 8002d26:	e7dc      	b.n	8002ce2 <_malloc_r+0x86>
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e7ef      	b.n	8002d0c <_malloc_r+0xb0>
 8002d2c:	0023      	movs	r3, r4
 8002d2e:	6864      	ldr	r4, [r4, #4]
 8002d30:	e7a6      	b.n	8002c80 <_malloc_r+0x24>
 8002d32:	9c00      	ldr	r4, [sp, #0]
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	e7ad      	b.n	8002c96 <_malloc_r+0x3a>
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	d1fb      	bne.n	8002d3a <_malloc_r+0xde>
 8002d42:	2300      	movs	r3, #0
 8002d44:	e7da      	b.n	8002cfc <_malloc_r+0xa0>
 8002d46:	230c      	movs	r3, #12
 8002d48:	0028      	movs	r0, r5
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	f000 f80e 	bl	8002d6c <__malloc_unlock>
 8002d50:	e7c6      	b.n	8002ce0 <_malloc_r+0x84>
 8002d52:	6007      	str	r7, [r0, #0]
 8002d54:	e7da      	b.n	8002d0c <_malloc_r+0xb0>
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	200002d4 	.word	0x200002d4

08002d5c <__malloc_lock>:
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <__malloc_lock+0xc>)
 8002d60:	f7ff ff0e 	bl	8002b80 <__retarget_lock_acquire_recursive>
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	200002cc 	.word	0x200002cc

08002d6c <__malloc_unlock>:
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	4802      	ldr	r0, [pc, #8]	@ (8002d78 <__malloc_unlock+0xc>)
 8002d70:	f7ff ff07 	bl	8002b82 <__retarget_lock_release_recursive>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	200002cc 	.word	0x200002cc

08002d7c <__ssputs_r>:
 8002d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7e:	688e      	ldr	r6, [r1, #8]
 8002d80:	b085      	sub	sp, #20
 8002d82:	001f      	movs	r7, r3
 8002d84:	000c      	movs	r4, r1
 8002d86:	680b      	ldr	r3, [r1, #0]
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9203      	str	r2, [sp, #12]
 8002d8c:	42be      	cmp	r6, r7
 8002d8e:	d830      	bhi.n	8002df2 <__ssputs_r+0x76>
 8002d90:	210c      	movs	r1, #12
 8002d92:	5e62      	ldrsh	r2, [r4, r1]
 8002d94:	2190      	movs	r1, #144	@ 0x90
 8002d96:	00c9      	lsls	r1, r1, #3
 8002d98:	420a      	tst	r2, r1
 8002d9a:	d028      	beq.n	8002dee <__ssputs_r+0x72>
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	6921      	ldr	r1, [r4, #16]
 8002da0:	1a5b      	subs	r3, r3, r1
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	6963      	ldr	r3, [r4, #20]
 8002da6:	4343      	muls	r3, r0
 8002da8:	9801      	ldr	r0, [sp, #4]
 8002daa:	0fdd      	lsrs	r5, r3, #31
 8002dac:	18ed      	adds	r5, r5, r3
 8002dae:	1c7b      	adds	r3, r7, #1
 8002db0:	181b      	adds	r3, r3, r0
 8002db2:	106d      	asrs	r5, r5, #1
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	d900      	bls.n	8002dba <__ssputs_r+0x3e>
 8002db8:	001d      	movs	r5, r3
 8002dba:	0552      	lsls	r2, r2, #21
 8002dbc:	d528      	bpl.n	8002e10 <__ssputs_r+0x94>
 8002dbe:	0029      	movs	r1, r5
 8002dc0:	9802      	ldr	r0, [sp, #8]
 8002dc2:	f7ff ff4b 	bl	8002c5c <_malloc_r>
 8002dc6:	1e06      	subs	r6, r0, #0
 8002dc8:	d02c      	beq.n	8002e24 <__ssputs_r+0xa8>
 8002dca:	9a01      	ldr	r2, [sp, #4]
 8002dcc:	6921      	ldr	r1, [r4, #16]
 8002dce:	f000 fae2 	bl	8003396 <memcpy>
 8002dd2:	89a2      	ldrh	r2, [r4, #12]
 8002dd4:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <__ssputs_r+0xbc>)
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	81a3      	strh	r3, [r4, #12]
 8002dde:	9b01      	ldr	r3, [sp, #4]
 8002de0:	6126      	str	r6, [r4, #16]
 8002de2:	18f6      	adds	r6, r6, r3
 8002de4:	6026      	str	r6, [r4, #0]
 8002de6:	003e      	movs	r6, r7
 8002de8:	6165      	str	r5, [r4, #20]
 8002dea:	1aed      	subs	r5, r5, r3
 8002dec:	60a5      	str	r5, [r4, #8]
 8002dee:	42be      	cmp	r6, r7
 8002df0:	d900      	bls.n	8002df4 <__ssputs_r+0x78>
 8002df2:	003e      	movs	r6, r7
 8002df4:	0032      	movs	r2, r6
 8002df6:	9903      	ldr	r1, [sp, #12]
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	f000 fa9b 	bl	8003334 <memmove>
 8002dfe:	2000      	movs	r0, #0
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	1b9b      	subs	r3, r3, r6
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	199b      	adds	r3, r3, r6
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	b005      	add	sp, #20
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e10:	002a      	movs	r2, r5
 8002e12:	9802      	ldr	r0, [sp, #8]
 8002e14:	f000 fac8 	bl	80033a8 <_realloc_r>
 8002e18:	1e06      	subs	r6, r0, #0
 8002e1a:	d1e0      	bne.n	8002dde <__ssputs_r+0x62>
 8002e1c:	6921      	ldr	r1, [r4, #16]
 8002e1e:	9802      	ldr	r0, [sp, #8]
 8002e20:	f7ff feb0 	bl	8002b84 <_free_r>
 8002e24:	230c      	movs	r3, #12
 8002e26:	2001      	movs	r0, #1
 8002e28:	9a02      	ldr	r2, [sp, #8]
 8002e2a:	4240      	negs	r0, r0
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	89a2      	ldrh	r2, [r4, #12]
 8002e30:	3334      	adds	r3, #52	@ 0x34
 8002e32:	4313      	orrs	r3, r2
 8002e34:	81a3      	strh	r3, [r4, #12]
 8002e36:	e7e9      	b.n	8002e0c <__ssputs_r+0x90>
 8002e38:	fffffb7f 	.word	0xfffffb7f

08002e3c <_svfiprintf_r>:
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b0a1      	sub	sp, #132	@ 0x84
 8002e40:	9003      	str	r0, [sp, #12]
 8002e42:	001d      	movs	r5, r3
 8002e44:	898b      	ldrh	r3, [r1, #12]
 8002e46:	000f      	movs	r7, r1
 8002e48:	0016      	movs	r6, r2
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	d511      	bpl.n	8002e72 <_svfiprintf_r+0x36>
 8002e4e:	690b      	ldr	r3, [r1, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10e      	bne.n	8002e72 <_svfiprintf_r+0x36>
 8002e54:	2140      	movs	r1, #64	@ 0x40
 8002e56:	f7ff ff01 	bl	8002c5c <_malloc_r>
 8002e5a:	6038      	str	r0, [r7, #0]
 8002e5c:	6138      	str	r0, [r7, #16]
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d105      	bne.n	8002e6e <_svfiprintf_r+0x32>
 8002e62:	230c      	movs	r3, #12
 8002e64:	9a03      	ldr	r2, [sp, #12]
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	2001      	movs	r0, #1
 8002e6a:	4240      	negs	r0, r0
 8002e6c:	e0cf      	b.n	800300e <_svfiprintf_r+0x1d2>
 8002e6e:	2340      	movs	r3, #64	@ 0x40
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	2300      	movs	r3, #0
 8002e74:	ac08      	add	r4, sp, #32
 8002e76:	6163      	str	r3, [r4, #20]
 8002e78:	3320      	adds	r3, #32
 8002e7a:	7663      	strb	r3, [r4, #25]
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	76a3      	strb	r3, [r4, #26]
 8002e80:	9507      	str	r5, [sp, #28]
 8002e82:	0035      	movs	r5, r6
 8002e84:	782b      	ldrb	r3, [r5, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <_svfiprintf_r+0x52>
 8002e8a:	2b25      	cmp	r3, #37	@ 0x25
 8002e8c:	d148      	bne.n	8002f20 <_svfiprintf_r+0xe4>
 8002e8e:	1bab      	subs	r3, r5, r6
 8002e90:	9305      	str	r3, [sp, #20]
 8002e92:	42b5      	cmp	r5, r6
 8002e94:	d00b      	beq.n	8002eae <_svfiprintf_r+0x72>
 8002e96:	0032      	movs	r2, r6
 8002e98:	0039      	movs	r1, r7
 8002e9a:	9803      	ldr	r0, [sp, #12]
 8002e9c:	f7ff ff6e 	bl	8002d7c <__ssputs_r>
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d100      	bne.n	8002ea6 <_svfiprintf_r+0x6a>
 8002ea4:	e0ae      	b.n	8003004 <_svfiprintf_r+0x1c8>
 8002ea6:	6963      	ldr	r3, [r4, #20]
 8002ea8:	9a05      	ldr	r2, [sp, #20]
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	6163      	str	r3, [r4, #20]
 8002eae:	782b      	ldrb	r3, [r5, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d100      	bne.n	8002eb6 <_svfiprintf_r+0x7a>
 8002eb4:	e0a6      	b.n	8003004 <_svfiprintf_r+0x1c8>
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4252      	negs	r2, r2
 8002ebc:	6062      	str	r2, [r4, #4]
 8002ebe:	a904      	add	r1, sp, #16
 8002ec0:	3254      	adds	r2, #84	@ 0x54
 8002ec2:	1852      	adds	r2, r2, r1
 8002ec4:	1c6e      	adds	r6, r5, #1
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	60e3      	str	r3, [r4, #12]
 8002eca:	60a3      	str	r3, [r4, #8]
 8002ecc:	7013      	strb	r3, [r2, #0]
 8002ece:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002ed0:	4b54      	ldr	r3, [pc, #336]	@ (8003024 <_svfiprintf_r+0x1e8>)
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	7831      	ldrb	r1, [r6, #0]
 8002ed8:	9305      	str	r3, [sp, #20]
 8002eda:	f000 fa51 	bl	8003380 <memchr>
 8002ede:	1c75      	adds	r5, r6, #1
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d11f      	bne.n	8002f24 <_svfiprintf_r+0xe8>
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	06d3      	lsls	r3, r2, #27
 8002ee8:	d504      	bpl.n	8002ef4 <_svfiprintf_r+0xb8>
 8002eea:	2353      	movs	r3, #83	@ 0x53
 8002eec:	a904      	add	r1, sp, #16
 8002eee:	185b      	adds	r3, r3, r1
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	7019      	strb	r1, [r3, #0]
 8002ef4:	0713      	lsls	r3, r2, #28
 8002ef6:	d504      	bpl.n	8002f02 <_svfiprintf_r+0xc6>
 8002ef8:	2353      	movs	r3, #83	@ 0x53
 8002efa:	a904      	add	r1, sp, #16
 8002efc:	185b      	adds	r3, r3, r1
 8002efe:	212b      	movs	r1, #43	@ 0x2b
 8002f00:	7019      	strb	r1, [r3, #0]
 8002f02:	7833      	ldrb	r3, [r6, #0]
 8002f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f06:	d016      	beq.n	8002f36 <_svfiprintf_r+0xfa>
 8002f08:	0035      	movs	r5, r6
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	200a      	movs	r0, #10
 8002f0e:	68e3      	ldr	r3, [r4, #12]
 8002f10:	782a      	ldrb	r2, [r5, #0]
 8002f12:	1c6e      	adds	r6, r5, #1
 8002f14:	3a30      	subs	r2, #48	@ 0x30
 8002f16:	2a09      	cmp	r2, #9
 8002f18:	d950      	bls.n	8002fbc <_svfiprintf_r+0x180>
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	d111      	bne.n	8002f42 <_svfiprintf_r+0x106>
 8002f1e:	e017      	b.n	8002f50 <_svfiprintf_r+0x114>
 8002f20:	3501      	adds	r5, #1
 8002f22:	e7af      	b.n	8002e84 <_svfiprintf_r+0x48>
 8002f24:	9b05      	ldr	r3, [sp, #20]
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	1ac0      	subs	r0, r0, r3
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4083      	lsls	r3, r0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	002e      	movs	r6, r5
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	e7cc      	b.n	8002ed0 <_svfiprintf_r+0x94>
 8002f36:	9b07      	ldr	r3, [sp, #28]
 8002f38:	1d19      	adds	r1, r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	9107      	str	r1, [sp, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db01      	blt.n	8002f46 <_svfiprintf_r+0x10a>
 8002f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f44:	e004      	b.n	8002f50 <_svfiprintf_r+0x114>
 8002f46:	425b      	negs	r3, r3
 8002f48:	60e3      	str	r3, [r4, #12]
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	782b      	ldrb	r3, [r5, #0]
 8002f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f54:	d10c      	bne.n	8002f70 <_svfiprintf_r+0x134>
 8002f56:	786b      	ldrb	r3, [r5, #1]
 8002f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f5a:	d134      	bne.n	8002fc6 <_svfiprintf_r+0x18a>
 8002f5c:	9b07      	ldr	r3, [sp, #28]
 8002f5e:	3502      	adds	r5, #2
 8002f60:	1d1a      	adds	r2, r3, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	9207      	str	r2, [sp, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da01      	bge.n	8002f6e <_svfiprintf_r+0x132>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f70:	4e2d      	ldr	r6, [pc, #180]	@ (8003028 <_svfiprintf_r+0x1ec>)
 8002f72:	2203      	movs	r2, #3
 8002f74:	0030      	movs	r0, r6
 8002f76:	7829      	ldrb	r1, [r5, #0]
 8002f78:	f000 fa02 	bl	8003380 <memchr>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d006      	beq.n	8002f8e <_svfiprintf_r+0x152>
 8002f80:	2340      	movs	r3, #64	@ 0x40
 8002f82:	1b80      	subs	r0, r0, r6
 8002f84:	4083      	lsls	r3, r0
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	3501      	adds	r5, #1
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	7829      	ldrb	r1, [r5, #0]
 8002f90:	2206      	movs	r2, #6
 8002f92:	4826      	ldr	r0, [pc, #152]	@ (800302c <_svfiprintf_r+0x1f0>)
 8002f94:	1c6e      	adds	r6, r5, #1
 8002f96:	7621      	strb	r1, [r4, #24]
 8002f98:	f000 f9f2 	bl	8003380 <memchr>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d038      	beq.n	8003012 <_svfiprintf_r+0x1d6>
 8002fa0:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <_svfiprintf_r+0x1f4>)
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d122      	bne.n	8002fec <_svfiprintf_r+0x1b0>
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	9b07      	ldr	r3, [sp, #28]
 8002faa:	3307      	adds	r3, #7
 8002fac:	4393      	bics	r3, r2
 8002fae:	3308      	adds	r3, #8
 8002fb0:	9307      	str	r3, [sp, #28]
 8002fb2:	6963      	ldr	r3, [r4, #20]
 8002fb4:	9a04      	ldr	r2, [sp, #16]
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	6163      	str	r3, [r4, #20]
 8002fba:	e762      	b.n	8002e82 <_svfiprintf_r+0x46>
 8002fbc:	4343      	muls	r3, r0
 8002fbe:	0035      	movs	r5, r6
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	189b      	adds	r3, r3, r2
 8002fc4:	e7a4      	b.n	8002f10 <_svfiprintf_r+0xd4>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	200a      	movs	r0, #10
 8002fca:	0019      	movs	r1, r3
 8002fcc:	3501      	adds	r5, #1
 8002fce:	6063      	str	r3, [r4, #4]
 8002fd0:	782a      	ldrb	r2, [r5, #0]
 8002fd2:	1c6e      	adds	r6, r5, #1
 8002fd4:	3a30      	subs	r2, #48	@ 0x30
 8002fd6:	2a09      	cmp	r2, #9
 8002fd8:	d903      	bls.n	8002fe2 <_svfiprintf_r+0x1a6>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0c8      	beq.n	8002f70 <_svfiprintf_r+0x134>
 8002fde:	9109      	str	r1, [sp, #36]	@ 0x24
 8002fe0:	e7c6      	b.n	8002f70 <_svfiprintf_r+0x134>
 8002fe2:	4341      	muls	r1, r0
 8002fe4:	0035      	movs	r5, r6
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	1889      	adds	r1, r1, r2
 8002fea:	e7f1      	b.n	8002fd0 <_svfiprintf_r+0x194>
 8002fec:	aa07      	add	r2, sp, #28
 8002fee:	9200      	str	r2, [sp, #0]
 8002ff0:	0021      	movs	r1, r4
 8002ff2:	003a      	movs	r2, r7
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <_svfiprintf_r+0x1f8>)
 8002ff6:	9803      	ldr	r0, [sp, #12]
 8002ff8:	e000      	b.n	8002ffc <_svfiprintf_r+0x1c0>
 8002ffa:	bf00      	nop
 8002ffc:	9004      	str	r0, [sp, #16]
 8002ffe:	9b04      	ldr	r3, [sp, #16]
 8003000:	3301      	adds	r3, #1
 8003002:	d1d6      	bne.n	8002fb2 <_svfiprintf_r+0x176>
 8003004:	89bb      	ldrh	r3, [r7, #12]
 8003006:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003008:	065b      	lsls	r3, r3, #25
 800300a:	d500      	bpl.n	800300e <_svfiprintf_r+0x1d2>
 800300c:	e72c      	b.n	8002e68 <_svfiprintf_r+0x2c>
 800300e:	b021      	add	sp, #132	@ 0x84
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003012:	aa07      	add	r2, sp, #28
 8003014:	9200      	str	r2, [sp, #0]
 8003016:	0021      	movs	r1, r4
 8003018:	003a      	movs	r2, r7
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <_svfiprintf_r+0x1f8>)
 800301c:	9803      	ldr	r0, [sp, #12]
 800301e:	f000 f87b 	bl	8003118 <_printf_i>
 8003022:	e7eb      	b.n	8002ffc <_svfiprintf_r+0x1c0>
 8003024:	080034e8 	.word	0x080034e8
 8003028:	080034ee 	.word	0x080034ee
 800302c:	080034f2 	.word	0x080034f2
 8003030:	00000000 	.word	0x00000000
 8003034:	08002d7d 	.word	0x08002d7d

08003038 <_printf_common>:
 8003038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800303a:	0016      	movs	r6, r2
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	688a      	ldr	r2, [r1, #8]
 8003040:	690b      	ldr	r3, [r1, #16]
 8003042:	000c      	movs	r4, r1
 8003044:	9000      	str	r0, [sp, #0]
 8003046:	4293      	cmp	r3, r2
 8003048:	da00      	bge.n	800304c <_printf_common+0x14>
 800304a:	0013      	movs	r3, r2
 800304c:	0022      	movs	r2, r4
 800304e:	6033      	str	r3, [r6, #0]
 8003050:	3243      	adds	r2, #67	@ 0x43
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	2a00      	cmp	r2, #0
 8003056:	d001      	beq.n	800305c <_printf_common+0x24>
 8003058:	3301      	adds	r3, #1
 800305a:	6033      	str	r3, [r6, #0]
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	d502      	bpl.n	8003068 <_printf_common+0x30>
 8003062:	6833      	ldr	r3, [r6, #0]
 8003064:	3302      	adds	r3, #2
 8003066:	6033      	str	r3, [r6, #0]
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	2306      	movs	r3, #6
 800306c:	0015      	movs	r5, r2
 800306e:	401d      	ands	r5, r3
 8003070:	421a      	tst	r2, r3
 8003072:	d027      	beq.n	80030c4 <_printf_common+0x8c>
 8003074:	0023      	movs	r3, r4
 8003076:	3343      	adds	r3, #67	@ 0x43
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	4193      	sbcs	r3, r2
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	0692      	lsls	r2, r2, #26
 8003082:	d430      	bmi.n	80030e6 <_printf_common+0xae>
 8003084:	0022      	movs	r2, r4
 8003086:	9901      	ldr	r1, [sp, #4]
 8003088:	9800      	ldr	r0, [sp, #0]
 800308a:	9d08      	ldr	r5, [sp, #32]
 800308c:	3243      	adds	r2, #67	@ 0x43
 800308e:	47a8      	blx	r5
 8003090:	3001      	adds	r0, #1
 8003092:	d025      	beq.n	80030e0 <_printf_common+0xa8>
 8003094:	2206      	movs	r2, #6
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	2500      	movs	r5, #0
 800309a:	4013      	ands	r3, r2
 800309c:	2b04      	cmp	r3, #4
 800309e:	d105      	bne.n	80030ac <_printf_common+0x74>
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	68e5      	ldr	r5, [r4, #12]
 80030a4:	1aed      	subs	r5, r5, r3
 80030a6:	43eb      	mvns	r3, r5
 80030a8:	17db      	asrs	r3, r3, #31
 80030aa:	401d      	ands	r5, r3
 80030ac:	68a3      	ldr	r3, [r4, #8]
 80030ae:	6922      	ldr	r2, [r4, #16]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	dd01      	ble.n	80030b8 <_printf_common+0x80>
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	18ed      	adds	r5, r5, r3
 80030b8:	2600      	movs	r6, #0
 80030ba:	42b5      	cmp	r5, r6
 80030bc:	d120      	bne.n	8003100 <_printf_common+0xc8>
 80030be:	2000      	movs	r0, #0
 80030c0:	e010      	b.n	80030e4 <_printf_common+0xac>
 80030c2:	3501      	adds	r5, #1
 80030c4:	68e3      	ldr	r3, [r4, #12]
 80030c6:	6832      	ldr	r2, [r6, #0]
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	42ab      	cmp	r3, r5
 80030cc:	ddd2      	ble.n	8003074 <_printf_common+0x3c>
 80030ce:	0022      	movs	r2, r4
 80030d0:	2301      	movs	r3, #1
 80030d2:	9901      	ldr	r1, [sp, #4]
 80030d4:	9800      	ldr	r0, [sp, #0]
 80030d6:	9f08      	ldr	r7, [sp, #32]
 80030d8:	3219      	adds	r2, #25
 80030da:	47b8      	blx	r7
 80030dc:	3001      	adds	r0, #1
 80030de:	d1f0      	bne.n	80030c2 <_printf_common+0x8a>
 80030e0:	2001      	movs	r0, #1
 80030e2:	4240      	negs	r0, r0
 80030e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030e6:	2030      	movs	r0, #48	@ 0x30
 80030e8:	18e1      	adds	r1, r4, r3
 80030ea:	3143      	adds	r1, #67	@ 0x43
 80030ec:	7008      	strb	r0, [r1, #0]
 80030ee:	0021      	movs	r1, r4
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	3145      	adds	r1, #69	@ 0x45
 80030f4:	7809      	ldrb	r1, [r1, #0]
 80030f6:	18a2      	adds	r2, r4, r2
 80030f8:	3243      	adds	r2, #67	@ 0x43
 80030fa:	3302      	adds	r3, #2
 80030fc:	7011      	strb	r1, [r2, #0]
 80030fe:	e7c1      	b.n	8003084 <_printf_common+0x4c>
 8003100:	0022      	movs	r2, r4
 8003102:	2301      	movs	r3, #1
 8003104:	9901      	ldr	r1, [sp, #4]
 8003106:	9800      	ldr	r0, [sp, #0]
 8003108:	9f08      	ldr	r7, [sp, #32]
 800310a:	321a      	adds	r2, #26
 800310c:	47b8      	blx	r7
 800310e:	3001      	adds	r0, #1
 8003110:	d0e6      	beq.n	80030e0 <_printf_common+0xa8>
 8003112:	3601      	adds	r6, #1
 8003114:	e7d1      	b.n	80030ba <_printf_common+0x82>
	...

08003118 <_printf_i>:
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b08b      	sub	sp, #44	@ 0x2c
 800311c:	9206      	str	r2, [sp, #24]
 800311e:	000a      	movs	r2, r1
 8003120:	3243      	adds	r2, #67	@ 0x43
 8003122:	9307      	str	r3, [sp, #28]
 8003124:	9005      	str	r0, [sp, #20]
 8003126:	9203      	str	r2, [sp, #12]
 8003128:	7e0a      	ldrb	r2, [r1, #24]
 800312a:	000c      	movs	r4, r1
 800312c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800312e:	2a78      	cmp	r2, #120	@ 0x78
 8003130:	d809      	bhi.n	8003146 <_printf_i+0x2e>
 8003132:	2a62      	cmp	r2, #98	@ 0x62
 8003134:	d80b      	bhi.n	800314e <_printf_i+0x36>
 8003136:	2a00      	cmp	r2, #0
 8003138:	d100      	bne.n	800313c <_printf_i+0x24>
 800313a:	e0bc      	b.n	80032b6 <_printf_i+0x19e>
 800313c:	497b      	ldr	r1, [pc, #492]	@ (800332c <_printf_i+0x214>)
 800313e:	9104      	str	r1, [sp, #16]
 8003140:	2a58      	cmp	r2, #88	@ 0x58
 8003142:	d100      	bne.n	8003146 <_printf_i+0x2e>
 8003144:	e090      	b.n	8003268 <_printf_i+0x150>
 8003146:	0025      	movs	r5, r4
 8003148:	3542      	adds	r5, #66	@ 0x42
 800314a:	702a      	strb	r2, [r5, #0]
 800314c:	e022      	b.n	8003194 <_printf_i+0x7c>
 800314e:	0010      	movs	r0, r2
 8003150:	3863      	subs	r0, #99	@ 0x63
 8003152:	2815      	cmp	r0, #21
 8003154:	d8f7      	bhi.n	8003146 <_printf_i+0x2e>
 8003156:	f7fc ffdf 	bl	8000118 <__gnu_thumb1_case_shi>
 800315a:	0016      	.short	0x0016
 800315c:	fff6001f 	.word	0xfff6001f
 8003160:	fff6fff6 	.word	0xfff6fff6
 8003164:	001ffff6 	.word	0x001ffff6
 8003168:	fff6fff6 	.word	0xfff6fff6
 800316c:	fff6fff6 	.word	0xfff6fff6
 8003170:	003600a1 	.word	0x003600a1
 8003174:	fff60080 	.word	0xfff60080
 8003178:	00b2fff6 	.word	0x00b2fff6
 800317c:	0036fff6 	.word	0x0036fff6
 8003180:	fff6fff6 	.word	0xfff6fff6
 8003184:	0084      	.short	0x0084
 8003186:	0025      	movs	r5, r4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	3542      	adds	r5, #66	@ 0x42
 800318c:	1d11      	adds	r1, r2, #4
 800318e:	6019      	str	r1, [r3, #0]
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	702b      	strb	r3, [r5, #0]
 8003194:	2301      	movs	r3, #1
 8003196:	e0a0      	b.n	80032da <_printf_i+0x1c2>
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	6809      	ldr	r1, [r1, #0]
 800319c:	1d02      	adds	r2, r0, #4
 800319e:	060d      	lsls	r5, r1, #24
 80031a0:	d50b      	bpl.n	80031ba <_printf_i+0xa2>
 80031a2:	6806      	ldr	r6, [r0, #0]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	2e00      	cmp	r6, #0
 80031a8:	da03      	bge.n	80031b2 <_printf_i+0x9a>
 80031aa:	232d      	movs	r3, #45	@ 0x2d
 80031ac:	9a03      	ldr	r2, [sp, #12]
 80031ae:	4276      	negs	r6, r6
 80031b0:	7013      	strb	r3, [r2, #0]
 80031b2:	4b5e      	ldr	r3, [pc, #376]	@ (800332c <_printf_i+0x214>)
 80031b4:	270a      	movs	r7, #10
 80031b6:	9304      	str	r3, [sp, #16]
 80031b8:	e018      	b.n	80031ec <_printf_i+0xd4>
 80031ba:	6806      	ldr	r6, [r0, #0]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	0649      	lsls	r1, r1, #25
 80031c0:	d5f1      	bpl.n	80031a6 <_printf_i+0x8e>
 80031c2:	b236      	sxth	r6, r6
 80031c4:	e7ef      	b.n	80031a6 <_printf_i+0x8e>
 80031c6:	6808      	ldr	r0, [r1, #0]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	c940      	ldmia	r1!, {r6}
 80031cc:	0605      	lsls	r5, r0, #24
 80031ce:	d402      	bmi.n	80031d6 <_printf_i+0xbe>
 80031d0:	0640      	lsls	r0, r0, #25
 80031d2:	d500      	bpl.n	80031d6 <_printf_i+0xbe>
 80031d4:	b2b6      	uxth	r6, r6
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	4b54      	ldr	r3, [pc, #336]	@ (800332c <_printf_i+0x214>)
 80031da:	270a      	movs	r7, #10
 80031dc:	9304      	str	r3, [sp, #16]
 80031de:	2a6f      	cmp	r2, #111	@ 0x6f
 80031e0:	d100      	bne.n	80031e4 <_printf_i+0xcc>
 80031e2:	3f02      	subs	r7, #2
 80031e4:	0023      	movs	r3, r4
 80031e6:	2200      	movs	r2, #0
 80031e8:	3343      	adds	r3, #67	@ 0x43
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db03      	blt.n	80031fc <_printf_i+0xe4>
 80031f4:	2104      	movs	r1, #4
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	438a      	bics	r2, r1
 80031fa:	6022      	str	r2, [r4, #0]
 80031fc:	2e00      	cmp	r6, #0
 80031fe:	d102      	bne.n	8003206 <_printf_i+0xee>
 8003200:	9d03      	ldr	r5, [sp, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <_printf_i+0x108>
 8003206:	9d03      	ldr	r5, [sp, #12]
 8003208:	0030      	movs	r0, r6
 800320a:	0039      	movs	r1, r7
 800320c:	f7fd f814 	bl	8000238 <__aeabi_uidivmod>
 8003210:	9b04      	ldr	r3, [sp, #16]
 8003212:	3d01      	subs	r5, #1
 8003214:	5c5b      	ldrb	r3, [r3, r1]
 8003216:	702b      	strb	r3, [r5, #0]
 8003218:	0033      	movs	r3, r6
 800321a:	0006      	movs	r6, r0
 800321c:	429f      	cmp	r7, r3
 800321e:	d9f3      	bls.n	8003208 <_printf_i+0xf0>
 8003220:	2f08      	cmp	r7, #8
 8003222:	d109      	bne.n	8003238 <_printf_i+0x120>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	07db      	lsls	r3, r3, #31
 8003228:	d506      	bpl.n	8003238 <_printf_i+0x120>
 800322a:	6862      	ldr	r2, [r4, #4]
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	429a      	cmp	r2, r3
 8003230:	dc02      	bgt.n	8003238 <_printf_i+0x120>
 8003232:	2330      	movs	r3, #48	@ 0x30
 8003234:	3d01      	subs	r5, #1
 8003236:	702b      	strb	r3, [r5, #0]
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1b5b      	subs	r3, r3, r5
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	9b07      	ldr	r3, [sp, #28]
 8003240:	0021      	movs	r1, r4
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	9805      	ldr	r0, [sp, #20]
 8003246:	9b06      	ldr	r3, [sp, #24]
 8003248:	aa09      	add	r2, sp, #36	@ 0x24
 800324a:	f7ff fef5 	bl	8003038 <_printf_common>
 800324e:	3001      	adds	r0, #1
 8003250:	d148      	bne.n	80032e4 <_printf_i+0x1cc>
 8003252:	2001      	movs	r0, #1
 8003254:	4240      	negs	r0, r0
 8003256:	b00b      	add	sp, #44	@ 0x2c
 8003258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800325a:	2220      	movs	r2, #32
 800325c:	6809      	ldr	r1, [r1, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	6022      	str	r2, [r4, #0]
 8003262:	2278      	movs	r2, #120	@ 0x78
 8003264:	4932      	ldr	r1, [pc, #200]	@ (8003330 <_printf_i+0x218>)
 8003266:	9104      	str	r1, [sp, #16]
 8003268:	0021      	movs	r1, r4
 800326a:	3145      	adds	r1, #69	@ 0x45
 800326c:	700a      	strb	r2, [r1, #0]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	c940      	ldmia	r1!, {r6}
 8003274:	0610      	lsls	r0, r2, #24
 8003276:	d402      	bmi.n	800327e <_printf_i+0x166>
 8003278:	0650      	lsls	r0, r2, #25
 800327a:	d500      	bpl.n	800327e <_printf_i+0x166>
 800327c:	b2b6      	uxth	r6, r6
 800327e:	6019      	str	r1, [r3, #0]
 8003280:	07d3      	lsls	r3, r2, #31
 8003282:	d502      	bpl.n	800328a <_printf_i+0x172>
 8003284:	2320      	movs	r3, #32
 8003286:	4313      	orrs	r3, r2
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	2e00      	cmp	r6, #0
 800328c:	d001      	beq.n	8003292 <_printf_i+0x17a>
 800328e:	2710      	movs	r7, #16
 8003290:	e7a8      	b.n	80031e4 <_printf_i+0xcc>
 8003292:	2220      	movs	r2, #32
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	4393      	bics	r3, r2
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	e7f8      	b.n	800328e <_printf_i+0x176>
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	680d      	ldr	r5, [r1, #0]
 80032a0:	1d10      	adds	r0, r2, #4
 80032a2:	6949      	ldr	r1, [r1, #20]
 80032a4:	6018      	str	r0, [r3, #0]
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	062e      	lsls	r6, r5, #24
 80032aa:	d501      	bpl.n	80032b0 <_printf_i+0x198>
 80032ac:	6019      	str	r1, [r3, #0]
 80032ae:	e002      	b.n	80032b6 <_printf_i+0x19e>
 80032b0:	066d      	lsls	r5, r5, #25
 80032b2:	d5fb      	bpl.n	80032ac <_printf_i+0x194>
 80032b4:	8019      	strh	r1, [r3, #0]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9d03      	ldr	r5, [sp, #12]
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	e7bf      	b.n	800323e <_printf_i+0x126>
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	1d11      	adds	r1, r2, #4
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	6815      	ldr	r5, [r2, #0]
 80032c6:	2100      	movs	r1, #0
 80032c8:	0028      	movs	r0, r5
 80032ca:	6862      	ldr	r2, [r4, #4]
 80032cc:	f000 f858 	bl	8003380 <memchr>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d001      	beq.n	80032d8 <_printf_i+0x1c0>
 80032d4:	1b40      	subs	r0, r0, r5
 80032d6:	6060      	str	r0, [r4, #4]
 80032d8:	6863      	ldr	r3, [r4, #4]
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	2300      	movs	r3, #0
 80032de:	9a03      	ldr	r2, [sp, #12]
 80032e0:	7013      	strb	r3, [r2, #0]
 80032e2:	e7ac      	b.n	800323e <_printf_i+0x126>
 80032e4:	002a      	movs	r2, r5
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	9906      	ldr	r1, [sp, #24]
 80032ea:	9805      	ldr	r0, [sp, #20]
 80032ec:	9d07      	ldr	r5, [sp, #28]
 80032ee:	47a8      	blx	r5
 80032f0:	3001      	adds	r0, #1
 80032f2:	d0ae      	beq.n	8003252 <_printf_i+0x13a>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	079b      	lsls	r3, r3, #30
 80032f8:	d415      	bmi.n	8003326 <_printf_i+0x20e>
 80032fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032fc:	68e0      	ldr	r0, [r4, #12]
 80032fe:	4298      	cmp	r0, r3
 8003300:	daa9      	bge.n	8003256 <_printf_i+0x13e>
 8003302:	0018      	movs	r0, r3
 8003304:	e7a7      	b.n	8003256 <_printf_i+0x13e>
 8003306:	0022      	movs	r2, r4
 8003308:	2301      	movs	r3, #1
 800330a:	9906      	ldr	r1, [sp, #24]
 800330c:	9805      	ldr	r0, [sp, #20]
 800330e:	9e07      	ldr	r6, [sp, #28]
 8003310:	3219      	adds	r2, #25
 8003312:	47b0      	blx	r6
 8003314:	3001      	adds	r0, #1
 8003316:	d09c      	beq.n	8003252 <_printf_i+0x13a>
 8003318:	3501      	adds	r5, #1
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	42ab      	cmp	r3, r5
 8003322:	dcf0      	bgt.n	8003306 <_printf_i+0x1ee>
 8003324:	e7e9      	b.n	80032fa <_printf_i+0x1e2>
 8003326:	2500      	movs	r5, #0
 8003328:	e7f7      	b.n	800331a <_printf_i+0x202>
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	080034f9 	.word	0x080034f9
 8003330:	0800350a 	.word	0x0800350a

08003334 <memmove>:
 8003334:	b510      	push	{r4, lr}
 8003336:	4288      	cmp	r0, r1
 8003338:	d806      	bhi.n	8003348 <memmove+0x14>
 800333a:	2300      	movs	r3, #0
 800333c:	429a      	cmp	r2, r3
 800333e:	d008      	beq.n	8003352 <memmove+0x1e>
 8003340:	5ccc      	ldrb	r4, [r1, r3]
 8003342:	54c4      	strb	r4, [r0, r3]
 8003344:	3301      	adds	r3, #1
 8003346:	e7f9      	b.n	800333c <memmove+0x8>
 8003348:	188b      	adds	r3, r1, r2
 800334a:	4298      	cmp	r0, r3
 800334c:	d2f5      	bcs.n	800333a <memmove+0x6>
 800334e:	3a01      	subs	r2, #1
 8003350:	d200      	bcs.n	8003354 <memmove+0x20>
 8003352:	bd10      	pop	{r4, pc}
 8003354:	5c8b      	ldrb	r3, [r1, r2]
 8003356:	5483      	strb	r3, [r0, r2]
 8003358:	e7f9      	b.n	800334e <memmove+0x1a>
	...

0800335c <_sbrk_r>:
 800335c:	2300      	movs	r3, #0
 800335e:	b570      	push	{r4, r5, r6, lr}
 8003360:	4d06      	ldr	r5, [pc, #24]	@ (800337c <_sbrk_r+0x20>)
 8003362:	0004      	movs	r4, r0
 8003364:	0008      	movs	r0, r1
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	f7fd faf4 	bl	8000954 <_sbrk>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d103      	bne.n	8003378 <_sbrk_r+0x1c>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d000      	beq.n	8003378 <_sbrk_r+0x1c>
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	200002c8 	.word	0x200002c8

08003380 <memchr>:
 8003380:	b2c9      	uxtb	r1, r1
 8003382:	1882      	adds	r2, r0, r2
 8003384:	4290      	cmp	r0, r2
 8003386:	d101      	bne.n	800338c <memchr+0xc>
 8003388:	2000      	movs	r0, #0
 800338a:	4770      	bx	lr
 800338c:	7803      	ldrb	r3, [r0, #0]
 800338e:	428b      	cmp	r3, r1
 8003390:	d0fb      	beq.n	800338a <memchr+0xa>
 8003392:	3001      	adds	r0, #1
 8003394:	e7f6      	b.n	8003384 <memchr+0x4>

08003396 <memcpy>:
 8003396:	2300      	movs	r3, #0
 8003398:	b510      	push	{r4, lr}
 800339a:	429a      	cmp	r2, r3
 800339c:	d100      	bne.n	80033a0 <memcpy+0xa>
 800339e:	bd10      	pop	{r4, pc}
 80033a0:	5ccc      	ldrb	r4, [r1, r3]
 80033a2:	54c4      	strb	r4, [r0, r3]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e7f8      	b.n	800339a <memcpy+0x4>

080033a8 <_realloc_r>:
 80033a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033aa:	0006      	movs	r6, r0
 80033ac:	000c      	movs	r4, r1
 80033ae:	0015      	movs	r5, r2
 80033b0:	2900      	cmp	r1, #0
 80033b2:	d105      	bne.n	80033c0 <_realloc_r+0x18>
 80033b4:	0011      	movs	r1, r2
 80033b6:	f7ff fc51 	bl	8002c5c <_malloc_r>
 80033ba:	0004      	movs	r4, r0
 80033bc:	0020      	movs	r0, r4
 80033be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d103      	bne.n	80033cc <_realloc_r+0x24>
 80033c4:	f7ff fbde 	bl	8002b84 <_free_r>
 80033c8:	2400      	movs	r4, #0
 80033ca:	e7f7      	b.n	80033bc <_realloc_r+0x14>
 80033cc:	f000 f81b 	bl	8003406 <_malloc_usable_size_r>
 80033d0:	0007      	movs	r7, r0
 80033d2:	4285      	cmp	r5, r0
 80033d4:	d802      	bhi.n	80033dc <_realloc_r+0x34>
 80033d6:	0843      	lsrs	r3, r0, #1
 80033d8:	42ab      	cmp	r3, r5
 80033da:	d3ef      	bcc.n	80033bc <_realloc_r+0x14>
 80033dc:	0029      	movs	r1, r5
 80033de:	0030      	movs	r0, r6
 80033e0:	f7ff fc3c 	bl	8002c5c <_malloc_r>
 80033e4:	9001      	str	r0, [sp, #4]
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d0ee      	beq.n	80033c8 <_realloc_r+0x20>
 80033ea:	002a      	movs	r2, r5
 80033ec:	42bd      	cmp	r5, r7
 80033ee:	d900      	bls.n	80033f2 <_realloc_r+0x4a>
 80033f0:	003a      	movs	r2, r7
 80033f2:	0021      	movs	r1, r4
 80033f4:	9801      	ldr	r0, [sp, #4]
 80033f6:	f7ff ffce 	bl	8003396 <memcpy>
 80033fa:	0021      	movs	r1, r4
 80033fc:	0030      	movs	r0, r6
 80033fe:	f7ff fbc1 	bl	8002b84 <_free_r>
 8003402:	9c01      	ldr	r4, [sp, #4]
 8003404:	e7da      	b.n	80033bc <_realloc_r+0x14>

08003406 <_malloc_usable_size_r>:
 8003406:	1f0b      	subs	r3, r1, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1f18      	subs	r0, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	da01      	bge.n	8003414 <_malloc_usable_size_r+0xe>
 8003410:	580b      	ldr	r3, [r1, r0]
 8003412:	18c0      	adds	r0, r0, r3
 8003414:	4770      	bx	lr
	...

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
