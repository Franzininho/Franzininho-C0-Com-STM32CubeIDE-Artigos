
alertaTemperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005dd4  08005dd4  00006dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed4  08005ed4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ed4  08005ed4  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ed4  08005ed4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005edc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08005f38  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005f38  00007264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa31  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3f  00000000  00000000  00011ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000135f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091f  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140c3  00000000  00000000  00014adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce93  00000000  00000000  00028ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d3d  00000000  00000000  00035a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8772  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  000b87b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000bb844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005dbc 	.word	0x08005dbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005dbc 	.word	0x08005dbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fe37 	bl	8001ea4 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fd77 	bl	8001d34 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fe29 	bl	8001ea4 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fe1f 	bl	8001ea4 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fda1 	bl	8001dbc <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fd97 	bl	8001dbc <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb55 	bl	8000954 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fad5 	bl	8000864 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb47 	bl	8000954 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb3d 	bl	8000954 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fae3 	bl	80008b4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fad9 	bl	80008b4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__aeabi_fadd>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	46ce      	mov	lr, r9
 8000314:	4647      	mov	r7, r8
 8000316:	0243      	lsls	r3, r0, #9
 8000318:	0a5a      	lsrs	r2, r3, #9
 800031a:	024e      	lsls	r6, r1, #9
 800031c:	0045      	lsls	r5, r0, #1
 800031e:	0fc4      	lsrs	r4, r0, #31
 8000320:	0048      	lsls	r0, r1, #1
 8000322:	4691      	mov	r9, r2
 8000324:	0e2d      	lsrs	r5, r5, #24
 8000326:	0a72      	lsrs	r2, r6, #9
 8000328:	0e00      	lsrs	r0, r0, #24
 800032a:	4694      	mov	ip, r2
 800032c:	b580      	push	{r7, lr}
 800032e:	099b      	lsrs	r3, r3, #6
 8000330:	0fc9      	lsrs	r1, r1, #31
 8000332:	09b6      	lsrs	r6, r6, #6
 8000334:	1a2a      	subs	r2, r5, r0
 8000336:	428c      	cmp	r4, r1
 8000338:	d021      	beq.n	800037e <__aeabi_fadd+0x6e>
 800033a:	2a00      	cmp	r2, #0
 800033c:	dd0d      	ble.n	800035a <__aeabi_fadd+0x4a>
 800033e:	2800      	cmp	r0, #0
 8000340:	d12d      	bne.n	800039e <__aeabi_fadd+0x8e>
 8000342:	2e00      	cmp	r6, #0
 8000344:	d100      	bne.n	8000348 <__aeabi_fadd+0x38>
 8000346:	e08d      	b.n	8000464 <__aeabi_fadd+0x154>
 8000348:	1e51      	subs	r1, r2, #1
 800034a:	2a01      	cmp	r2, #1
 800034c:	d100      	bne.n	8000350 <__aeabi_fadd+0x40>
 800034e:	e11d      	b.n	800058c <__aeabi_fadd+0x27c>
 8000350:	2aff      	cmp	r2, #255	@ 0xff
 8000352:	d100      	bne.n	8000356 <__aeabi_fadd+0x46>
 8000354:	e0ab      	b.n	80004ae <__aeabi_fadd+0x19e>
 8000356:	000a      	movs	r2, r1
 8000358:	e027      	b.n	80003aa <__aeabi_fadd+0x9a>
 800035a:	2a00      	cmp	r2, #0
 800035c:	d04d      	beq.n	80003fa <__aeabi_fadd+0xea>
 800035e:	1b42      	subs	r2, r0, r5
 8000360:	2d00      	cmp	r5, #0
 8000362:	d000      	beq.n	8000366 <__aeabi_fadd+0x56>
 8000364:	e0cc      	b.n	8000500 <__aeabi_fadd+0x1f0>
 8000366:	2b00      	cmp	r3, #0
 8000368:	d100      	bne.n	800036c <__aeabi_fadd+0x5c>
 800036a:	e079      	b.n	8000460 <__aeabi_fadd+0x150>
 800036c:	1e54      	subs	r4, r2, #1
 800036e:	2a01      	cmp	r2, #1
 8000370:	d100      	bne.n	8000374 <__aeabi_fadd+0x64>
 8000372:	e128      	b.n	80005c6 <__aeabi_fadd+0x2b6>
 8000374:	2aff      	cmp	r2, #255	@ 0xff
 8000376:	d100      	bne.n	800037a <__aeabi_fadd+0x6a>
 8000378:	e097      	b.n	80004aa <__aeabi_fadd+0x19a>
 800037a:	0022      	movs	r2, r4
 800037c:	e0c5      	b.n	800050a <__aeabi_fadd+0x1fa>
 800037e:	2a00      	cmp	r2, #0
 8000380:	dc00      	bgt.n	8000384 <__aeabi_fadd+0x74>
 8000382:	e096      	b.n	80004b2 <__aeabi_fadd+0x1a2>
 8000384:	2800      	cmp	r0, #0
 8000386:	d04f      	beq.n	8000428 <__aeabi_fadd+0x118>
 8000388:	2dff      	cmp	r5, #255	@ 0xff
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0x7e>
 800038c:	e08f      	b.n	80004ae <__aeabi_fadd+0x19e>
 800038e:	2180      	movs	r1, #128	@ 0x80
 8000390:	04c9      	lsls	r1, r1, #19
 8000392:	430e      	orrs	r6, r1
 8000394:	2a1b      	cmp	r2, #27
 8000396:	dd51      	ble.n	800043c <__aeabi_fadd+0x12c>
 8000398:	002a      	movs	r2, r5
 800039a:	3301      	adds	r3, #1
 800039c:	e018      	b.n	80003d0 <__aeabi_fadd+0xc0>
 800039e:	2dff      	cmp	r5, #255	@ 0xff
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fadd+0x94>
 80003a2:	e084      	b.n	80004ae <__aeabi_fadd+0x19e>
 80003a4:	2180      	movs	r1, #128	@ 0x80
 80003a6:	04c9      	lsls	r1, r1, #19
 80003a8:	430e      	orrs	r6, r1
 80003aa:	2101      	movs	r1, #1
 80003ac:	2a1b      	cmp	r2, #27
 80003ae:	dc08      	bgt.n	80003c2 <__aeabi_fadd+0xb2>
 80003b0:	0031      	movs	r1, r6
 80003b2:	2020      	movs	r0, #32
 80003b4:	40d1      	lsrs	r1, r2
 80003b6:	1a82      	subs	r2, r0, r2
 80003b8:	4096      	lsls	r6, r2
 80003ba:	0032      	movs	r2, r6
 80003bc:	1e50      	subs	r0, r2, #1
 80003be:	4182      	sbcs	r2, r0
 80003c0:	4311      	orrs	r1, r2
 80003c2:	1a5b      	subs	r3, r3, r1
 80003c4:	015a      	lsls	r2, r3, #5
 80003c6:	d459      	bmi.n	800047c <__aeabi_fadd+0x16c>
 80003c8:	2107      	movs	r1, #7
 80003ca:	002a      	movs	r2, r5
 80003cc:	4019      	ands	r1, r3
 80003ce:	d049      	beq.n	8000464 <__aeabi_fadd+0x154>
 80003d0:	210f      	movs	r1, #15
 80003d2:	4019      	ands	r1, r3
 80003d4:	2904      	cmp	r1, #4
 80003d6:	d000      	beq.n	80003da <__aeabi_fadd+0xca>
 80003d8:	3304      	adds	r3, #4
 80003da:	0159      	lsls	r1, r3, #5
 80003dc:	d542      	bpl.n	8000464 <__aeabi_fadd+0x154>
 80003de:	1c50      	adds	r0, r2, #1
 80003e0:	2afe      	cmp	r2, #254	@ 0xfe
 80003e2:	d03a      	beq.n	800045a <__aeabi_fadd+0x14a>
 80003e4:	019b      	lsls	r3, r3, #6
 80003e6:	b2c0      	uxtb	r0, r0
 80003e8:	0a5b      	lsrs	r3, r3, #9
 80003ea:	05c0      	lsls	r0, r0, #23
 80003ec:	4318      	orrs	r0, r3
 80003ee:	07e4      	lsls	r4, r4, #31
 80003f0:	4320      	orrs	r0, r4
 80003f2:	bcc0      	pop	{r6, r7}
 80003f4:	46b9      	mov	r9, r7
 80003f6:	46b0      	mov	r8, r6
 80003f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003fa:	20fe      	movs	r0, #254	@ 0xfe
 80003fc:	4680      	mov	r8, r0
 80003fe:	1c6f      	adds	r7, r5, #1
 8000400:	0038      	movs	r0, r7
 8000402:	4647      	mov	r7, r8
 8000404:	4207      	tst	r7, r0
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0xfa>
 8000408:	e08e      	b.n	8000528 <__aeabi_fadd+0x218>
 800040a:	2d00      	cmp	r5, #0
 800040c:	d000      	beq.n	8000410 <__aeabi_fadd+0x100>
 800040e:	e0b4      	b.n	800057a <__aeabi_fadd+0x26a>
 8000410:	2b00      	cmp	r3, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_fadd+0x106>
 8000414:	e0db      	b.n	80005ce <__aeabi_fadd+0x2be>
 8000416:	2e00      	cmp	r6, #0
 8000418:	d06c      	beq.n	80004f4 <__aeabi_fadd+0x1e4>
 800041a:	1b98      	subs	r0, r3, r6
 800041c:	0145      	lsls	r5, r0, #5
 800041e:	d400      	bmi.n	8000422 <__aeabi_fadd+0x112>
 8000420:	e0f7      	b.n	8000612 <__aeabi_fadd+0x302>
 8000422:	000c      	movs	r4, r1
 8000424:	1af3      	subs	r3, r6, r3
 8000426:	e03d      	b.n	80004a4 <__aeabi_fadd+0x194>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d01b      	beq.n	8000464 <__aeabi_fadd+0x154>
 800042c:	1e51      	subs	r1, r2, #1
 800042e:	2a01      	cmp	r2, #1
 8000430:	d100      	bne.n	8000434 <__aeabi_fadd+0x124>
 8000432:	e082      	b.n	800053a <__aeabi_fadd+0x22a>
 8000434:	2aff      	cmp	r2, #255	@ 0xff
 8000436:	d03a      	beq.n	80004ae <__aeabi_fadd+0x19e>
 8000438:	000a      	movs	r2, r1
 800043a:	e7ab      	b.n	8000394 <__aeabi_fadd+0x84>
 800043c:	0031      	movs	r1, r6
 800043e:	2020      	movs	r0, #32
 8000440:	40d1      	lsrs	r1, r2
 8000442:	1a82      	subs	r2, r0, r2
 8000444:	4096      	lsls	r6, r2
 8000446:	0032      	movs	r2, r6
 8000448:	1e50      	subs	r0, r2, #1
 800044a:	4182      	sbcs	r2, r0
 800044c:	430a      	orrs	r2, r1
 800044e:	189b      	adds	r3, r3, r2
 8000450:	015a      	lsls	r2, r3, #5
 8000452:	d5b9      	bpl.n	80003c8 <__aeabi_fadd+0xb8>
 8000454:	1c6a      	adds	r2, r5, #1
 8000456:	2dfe      	cmp	r5, #254	@ 0xfe
 8000458:	d175      	bne.n	8000546 <__aeabi_fadd+0x236>
 800045a:	20ff      	movs	r0, #255	@ 0xff
 800045c:	2300      	movs	r3, #0
 800045e:	e7c4      	b.n	80003ea <__aeabi_fadd+0xda>
 8000460:	000c      	movs	r4, r1
 8000462:	0033      	movs	r3, r6
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	2aff      	cmp	r2, #255	@ 0xff
 8000468:	d146      	bne.n	80004f8 <__aeabi_fadd+0x1e8>
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f5      	beq.n	800045a <__aeabi_fadd+0x14a>
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	03d2      	lsls	r2, r2, #15
 8000472:	4313      	orrs	r3, r2
 8000474:	025b      	lsls	r3, r3, #9
 8000476:	20ff      	movs	r0, #255	@ 0xff
 8000478:	0a5b      	lsrs	r3, r3, #9
 800047a:	e7b6      	b.n	80003ea <__aeabi_fadd+0xda>
 800047c:	019f      	lsls	r7, r3, #6
 800047e:	09bf      	lsrs	r7, r7, #6
 8000480:	0038      	movs	r0, r7
 8000482:	f002 fd01 	bl	8002e88 <__clzsi2>
 8000486:	3805      	subs	r0, #5
 8000488:	4087      	lsls	r7, r0
 800048a:	4285      	cmp	r5, r0
 800048c:	dc24      	bgt.n	80004d8 <__aeabi_fadd+0x1c8>
 800048e:	003b      	movs	r3, r7
 8000490:	2120      	movs	r1, #32
 8000492:	1b42      	subs	r2, r0, r5
 8000494:	3201      	adds	r2, #1
 8000496:	40d3      	lsrs	r3, r2
 8000498:	1a8a      	subs	r2, r1, r2
 800049a:	4097      	lsls	r7, r2
 800049c:	1e7a      	subs	r2, r7, #1
 800049e:	4197      	sbcs	r7, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	433b      	orrs	r3, r7
 80004a4:	0759      	lsls	r1, r3, #29
 80004a6:	d193      	bne.n	80003d0 <__aeabi_fadd+0xc0>
 80004a8:	e797      	b.n	80003da <__aeabi_fadd+0xca>
 80004aa:	000c      	movs	r4, r1
 80004ac:	0033      	movs	r3, r6
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	e7db      	b.n	800046a <__aeabi_fadd+0x15a>
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	d014      	beq.n	80004e0 <__aeabi_fadd+0x1d0>
 80004b6:	1b42      	subs	r2, r0, r5
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d14b      	bne.n	8000554 <__aeabi_fadd+0x244>
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d0d0      	beq.n	8000462 <__aeabi_fadd+0x152>
 80004c0:	1e51      	subs	r1, r2, #1
 80004c2:	2a01      	cmp	r2, #1
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x1b8>
 80004c6:	e09e      	b.n	8000606 <__aeabi_fadd+0x2f6>
 80004c8:	2aff      	cmp	r2, #255	@ 0xff
 80004ca:	d0ef      	beq.n	80004ac <__aeabi_fadd+0x19c>
 80004cc:	000a      	movs	r2, r1
 80004ce:	2a1b      	cmp	r2, #27
 80004d0:	dd5f      	ble.n	8000592 <__aeabi_fadd+0x282>
 80004d2:	0002      	movs	r2, r0
 80004d4:	1c73      	adds	r3, r6, #1
 80004d6:	e77b      	b.n	80003d0 <__aeabi_fadd+0xc0>
 80004d8:	4b50      	ldr	r3, [pc, #320]	@ (800061c <__aeabi_fadd+0x30c>)
 80004da:	1a2a      	subs	r2, r5, r0
 80004dc:	403b      	ands	r3, r7
 80004de:	e7e1      	b.n	80004a4 <__aeabi_fadd+0x194>
 80004e0:	21fe      	movs	r1, #254	@ 0xfe
 80004e2:	1c6a      	adds	r2, r5, #1
 80004e4:	4211      	tst	r1, r2
 80004e6:	d13b      	bne.n	8000560 <__aeabi_fadd+0x250>
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d15d      	bne.n	80005a8 <__aeabi_fadd+0x298>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d07f      	beq.n	80005f0 <__aeabi_fadd+0x2e0>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d17f      	bne.n	80005f4 <__aeabi_fadd+0x2e4>
 80004f4:	2200      	movs	r2, #0
 80004f6:	08db      	lsrs	r3, r3, #3
 80004f8:	025b      	lsls	r3, r3, #9
 80004fa:	0a5b      	lsrs	r3, r3, #9
 80004fc:	b2d0      	uxtb	r0, r2
 80004fe:	e774      	b.n	80003ea <__aeabi_fadd+0xda>
 8000500:	28ff      	cmp	r0, #255	@ 0xff
 8000502:	d0d2      	beq.n	80004aa <__aeabi_fadd+0x19a>
 8000504:	2480      	movs	r4, #128	@ 0x80
 8000506:	04e4      	lsls	r4, r4, #19
 8000508:	4323      	orrs	r3, r4
 800050a:	2401      	movs	r4, #1
 800050c:	2a1b      	cmp	r2, #27
 800050e:	dc07      	bgt.n	8000520 <__aeabi_fadd+0x210>
 8000510:	001c      	movs	r4, r3
 8000512:	2520      	movs	r5, #32
 8000514:	40d4      	lsrs	r4, r2
 8000516:	1aaa      	subs	r2, r5, r2
 8000518:	4093      	lsls	r3, r2
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	4193      	sbcs	r3, r2
 800051e:	431c      	orrs	r4, r3
 8000520:	1b33      	subs	r3, r6, r4
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	e74d      	b.n	80003c4 <__aeabi_fadd+0xb4>
 8000528:	1b9f      	subs	r7, r3, r6
 800052a:	017a      	lsls	r2, r7, #5
 800052c:	d422      	bmi.n	8000574 <__aeabi_fadd+0x264>
 800052e:	2f00      	cmp	r7, #0
 8000530:	d1a6      	bne.n	8000480 <__aeabi_fadd+0x170>
 8000532:	2400      	movs	r4, #0
 8000534:	2000      	movs	r0, #0
 8000536:	2300      	movs	r3, #0
 8000538:	e757      	b.n	80003ea <__aeabi_fadd+0xda>
 800053a:	199b      	adds	r3, r3, r6
 800053c:	2501      	movs	r5, #1
 800053e:	3201      	adds	r2, #1
 8000540:	0159      	lsls	r1, r3, #5
 8000542:	d400      	bmi.n	8000546 <__aeabi_fadd+0x236>
 8000544:	e740      	b.n	80003c8 <__aeabi_fadd+0xb8>
 8000546:	2101      	movs	r1, #1
 8000548:	4835      	ldr	r0, [pc, #212]	@ (8000620 <__aeabi_fadd+0x310>)
 800054a:	4019      	ands	r1, r3
 800054c:	085b      	lsrs	r3, r3, #1
 800054e:	4003      	ands	r3, r0
 8000550:	430b      	orrs	r3, r1
 8000552:	e7a7      	b.n	80004a4 <__aeabi_fadd+0x194>
 8000554:	28ff      	cmp	r0, #255	@ 0xff
 8000556:	d0a9      	beq.n	80004ac <__aeabi_fadd+0x19c>
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	04c9      	lsls	r1, r1, #19
 800055c:	430b      	orrs	r3, r1
 800055e:	e7b6      	b.n	80004ce <__aeabi_fadd+0x1be>
 8000560:	2aff      	cmp	r2, #255	@ 0xff
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0x256>
 8000564:	e779      	b.n	800045a <__aeabi_fadd+0x14a>
 8000566:	199b      	adds	r3, r3, r6
 8000568:	085b      	lsrs	r3, r3, #1
 800056a:	0759      	lsls	r1, r3, #29
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x260>
 800056e:	e72f      	b.n	80003d0 <__aeabi_fadd+0xc0>
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	e7c1      	b.n	80004f8 <__aeabi_fadd+0x1e8>
 8000574:	000c      	movs	r4, r1
 8000576:	1af7      	subs	r7, r6, r3
 8000578:	e782      	b.n	8000480 <__aeabi_fadd+0x170>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d12c      	bne.n	80005d8 <__aeabi_fadd+0x2c8>
 800057e:	2e00      	cmp	r6, #0
 8000580:	d193      	bne.n	80004aa <__aeabi_fadd+0x19a>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	2400      	movs	r4, #0
 8000586:	20ff      	movs	r0, #255	@ 0xff
 8000588:	03db      	lsls	r3, r3, #15
 800058a:	e72e      	b.n	80003ea <__aeabi_fadd+0xda>
 800058c:	2501      	movs	r5, #1
 800058e:	1b9b      	subs	r3, r3, r6
 8000590:	e718      	b.n	80003c4 <__aeabi_fadd+0xb4>
 8000592:	0019      	movs	r1, r3
 8000594:	2520      	movs	r5, #32
 8000596:	40d1      	lsrs	r1, r2
 8000598:	1aaa      	subs	r2, r5, r2
 800059a:	4093      	lsls	r3, r2
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	4193      	sbcs	r3, r2
 80005a0:	430b      	orrs	r3, r1
 80005a2:	0005      	movs	r5, r0
 80005a4:	199b      	adds	r3, r3, r6
 80005a6:	e753      	b.n	8000450 <__aeabi_fadd+0x140>
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x29e>
 80005ac:	e77e      	b.n	80004ac <__aeabi_fadd+0x19c>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x2a4>
 80005b2:	e77c      	b.n	80004ae <__aeabi_fadd+0x19e>
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	03d2      	lsls	r2, r2, #15
 80005b8:	4591      	cmp	r9, r2
 80005ba:	d302      	bcc.n	80005c2 <__aeabi_fadd+0x2b2>
 80005bc:	4594      	cmp	ip, r2
 80005be:	d200      	bcs.n	80005c2 <__aeabi_fadd+0x2b2>
 80005c0:	0033      	movs	r3, r6
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	e753      	b.n	800046e <__aeabi_fadd+0x15e>
 80005c6:	000c      	movs	r4, r1
 80005c8:	1af3      	subs	r3, r6, r3
 80005ca:	3501      	adds	r5, #1
 80005cc:	e6fa      	b.n	80003c4 <__aeabi_fadd+0xb4>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d0af      	beq.n	8000532 <__aeabi_fadd+0x222>
 80005d2:	000c      	movs	r4, r1
 80005d4:	0033      	movs	r3, r6
 80005d6:	e78d      	b.n	80004f4 <__aeabi_fadd+0x1e4>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x2ce>
 80005dc:	e767      	b.n	80004ae <__aeabi_fadd+0x19e>
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	03d2      	lsls	r2, r2, #15
 80005e2:	4591      	cmp	r9, r2
 80005e4:	d3ed      	bcc.n	80005c2 <__aeabi_fadd+0x2b2>
 80005e6:	4594      	cmp	ip, r2
 80005e8:	d2eb      	bcs.n	80005c2 <__aeabi_fadd+0x2b2>
 80005ea:	000c      	movs	r4, r1
 80005ec:	0033      	movs	r3, r6
 80005ee:	e7e8      	b.n	80005c2 <__aeabi_fadd+0x2b2>
 80005f0:	0033      	movs	r3, r6
 80005f2:	e77f      	b.n	80004f4 <__aeabi_fadd+0x1e4>
 80005f4:	199b      	adds	r3, r3, r6
 80005f6:	2200      	movs	r2, #0
 80005f8:	0159      	lsls	r1, r3, #5
 80005fa:	d5b9      	bpl.n	8000570 <__aeabi_fadd+0x260>
 80005fc:	4a07      	ldr	r2, [pc, #28]	@ (800061c <__aeabi_fadd+0x30c>)
 80005fe:	4013      	ands	r3, r2
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	2201      	movs	r2, #1
 8000604:	e778      	b.n	80004f8 <__aeabi_fadd+0x1e8>
 8000606:	199b      	adds	r3, r3, r6
 8000608:	3201      	adds	r2, #1
 800060a:	3501      	adds	r5, #1
 800060c:	0159      	lsls	r1, r3, #5
 800060e:	d49a      	bmi.n	8000546 <__aeabi_fadd+0x236>
 8000610:	e6da      	b.n	80003c8 <__aeabi_fadd+0xb8>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d08d      	beq.n	8000532 <__aeabi_fadd+0x222>
 8000616:	08db      	lsrs	r3, r3, #3
 8000618:	e76e      	b.n	80004f8 <__aeabi_fadd+0x1e8>
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	fbffffff 	.word	0xfbffffff
 8000620:	7dffffff 	.word	0x7dffffff

08000624 <__aeabi_fdiv>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	464f      	mov	r7, r9
 8000628:	4646      	mov	r6, r8
 800062a:	46d6      	mov	lr, sl
 800062c:	0244      	lsls	r4, r0, #9
 800062e:	b5c0      	push	{r6, r7, lr}
 8000630:	0047      	lsls	r7, r0, #1
 8000632:	1c0e      	adds	r6, r1, #0
 8000634:	0a64      	lsrs	r4, r4, #9
 8000636:	0e3f      	lsrs	r7, r7, #24
 8000638:	0fc5      	lsrs	r5, r0, #31
 800063a:	2f00      	cmp	r7, #0
 800063c:	d03c      	beq.n	80006b8 <__aeabi_fdiv+0x94>
 800063e:	2fff      	cmp	r7, #255	@ 0xff
 8000640:	d042      	beq.n	80006c8 <__aeabi_fdiv+0xa4>
 8000642:	2300      	movs	r3, #0
 8000644:	2280      	movs	r2, #128	@ 0x80
 8000646:	4699      	mov	r9, r3
 8000648:	469a      	mov	sl, r3
 800064a:	00e4      	lsls	r4, r4, #3
 800064c:	04d2      	lsls	r2, r2, #19
 800064e:	4314      	orrs	r4, r2
 8000650:	3f7f      	subs	r7, #127	@ 0x7f
 8000652:	0273      	lsls	r3, r6, #9
 8000654:	0a5b      	lsrs	r3, r3, #9
 8000656:	4698      	mov	r8, r3
 8000658:	0073      	lsls	r3, r6, #1
 800065a:	0e1b      	lsrs	r3, r3, #24
 800065c:	0ff6      	lsrs	r6, r6, #31
 800065e:	2b00      	cmp	r3, #0
 8000660:	d01b      	beq.n	800069a <__aeabi_fdiv+0x76>
 8000662:	2bff      	cmp	r3, #255	@ 0xff
 8000664:	d013      	beq.n	800068e <__aeabi_fdiv+0x6a>
 8000666:	4642      	mov	r2, r8
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	00d2      	lsls	r2, r2, #3
 800066c:	04c9      	lsls	r1, r1, #19
 800066e:	4311      	orrs	r1, r2
 8000670:	4688      	mov	r8, r1
 8000672:	2000      	movs	r0, #0
 8000674:	3b7f      	subs	r3, #127	@ 0x7f
 8000676:	0029      	movs	r1, r5
 8000678:	1aff      	subs	r7, r7, r3
 800067a:	464b      	mov	r3, r9
 800067c:	4071      	eors	r1, r6
 800067e:	b2c9      	uxtb	r1, r1
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d900      	bls.n	8000686 <__aeabi_fdiv+0x62>
 8000684:	e0b5      	b.n	80007f2 <__aeabi_fdiv+0x1ce>
 8000686:	4a74      	ldr	r2, [pc, #464]	@ (8000858 <__aeabi_fdiv+0x234>)
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	58d3      	ldr	r3, [r2, r3]
 800068c:	469f      	mov	pc, r3
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d13f      	bne.n	8000714 <__aeabi_fdiv+0xf0>
 8000694:	3fff      	subs	r7, #255	@ 0xff
 8000696:	3302      	adds	r3, #2
 8000698:	e003      	b.n	80006a2 <__aeabi_fdiv+0x7e>
 800069a:	4643      	mov	r3, r8
 800069c:	2b00      	cmp	r3, #0
 800069e:	d12d      	bne.n	80006fc <__aeabi_fdiv+0xd8>
 80006a0:	2301      	movs	r3, #1
 80006a2:	0029      	movs	r1, r5
 80006a4:	464a      	mov	r2, r9
 80006a6:	4071      	eors	r1, r6
 80006a8:	b2c9      	uxtb	r1, r1
 80006aa:	431a      	orrs	r2, r3
 80006ac:	2a0e      	cmp	r2, #14
 80006ae:	d838      	bhi.n	8000722 <__aeabi_fdiv+0xfe>
 80006b0:	486a      	ldr	r0, [pc, #424]	@ (800085c <__aeabi_fdiv+0x238>)
 80006b2:	0092      	lsls	r2, r2, #2
 80006b4:	5882      	ldr	r2, [r0, r2]
 80006b6:	4697      	mov	pc, r2
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d113      	bne.n	80006e4 <__aeabi_fdiv+0xc0>
 80006bc:	2304      	movs	r3, #4
 80006be:	4699      	mov	r9, r3
 80006c0:	3b03      	subs	r3, #3
 80006c2:	2700      	movs	r7, #0
 80006c4:	469a      	mov	sl, r3
 80006c6:	e7c4      	b.n	8000652 <__aeabi_fdiv+0x2e>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d105      	bne.n	80006d8 <__aeabi_fdiv+0xb4>
 80006cc:	2308      	movs	r3, #8
 80006ce:	4699      	mov	r9, r3
 80006d0:	3b06      	subs	r3, #6
 80006d2:	27ff      	movs	r7, #255	@ 0xff
 80006d4:	469a      	mov	sl, r3
 80006d6:	e7bc      	b.n	8000652 <__aeabi_fdiv+0x2e>
 80006d8:	230c      	movs	r3, #12
 80006da:	4699      	mov	r9, r3
 80006dc:	3b09      	subs	r3, #9
 80006de:	27ff      	movs	r7, #255	@ 0xff
 80006e0:	469a      	mov	sl, r3
 80006e2:	e7b6      	b.n	8000652 <__aeabi_fdiv+0x2e>
 80006e4:	0020      	movs	r0, r4
 80006e6:	f002 fbcf 	bl	8002e88 <__clzsi2>
 80006ea:	2776      	movs	r7, #118	@ 0x76
 80006ec:	1f43      	subs	r3, r0, #5
 80006ee:	409c      	lsls	r4, r3
 80006f0:	2300      	movs	r3, #0
 80006f2:	427f      	negs	r7, r7
 80006f4:	4699      	mov	r9, r3
 80006f6:	469a      	mov	sl, r3
 80006f8:	1a3f      	subs	r7, r7, r0
 80006fa:	e7aa      	b.n	8000652 <__aeabi_fdiv+0x2e>
 80006fc:	4640      	mov	r0, r8
 80006fe:	f002 fbc3 	bl	8002e88 <__clzsi2>
 8000702:	4642      	mov	r2, r8
 8000704:	1f43      	subs	r3, r0, #5
 8000706:	409a      	lsls	r2, r3
 8000708:	2376      	movs	r3, #118	@ 0x76
 800070a:	425b      	negs	r3, r3
 800070c:	1a1b      	subs	r3, r3, r0
 800070e:	4690      	mov	r8, r2
 8000710:	2000      	movs	r0, #0
 8000712:	e7b0      	b.n	8000676 <__aeabi_fdiv+0x52>
 8000714:	2303      	movs	r3, #3
 8000716:	464a      	mov	r2, r9
 8000718:	431a      	orrs	r2, r3
 800071a:	4691      	mov	r9, r2
 800071c:	2003      	movs	r0, #3
 800071e:	33fc      	adds	r3, #252	@ 0xfc
 8000720:	e7a9      	b.n	8000676 <__aeabi_fdiv+0x52>
 8000722:	000d      	movs	r5, r1
 8000724:	20ff      	movs	r0, #255	@ 0xff
 8000726:	2200      	movs	r2, #0
 8000728:	05c0      	lsls	r0, r0, #23
 800072a:	07ed      	lsls	r5, r5, #31
 800072c:	4310      	orrs	r0, r2
 800072e:	4328      	orrs	r0, r5
 8000730:	bce0      	pop	{r5, r6, r7}
 8000732:	46ba      	mov	sl, r7
 8000734:	46b1      	mov	r9, r6
 8000736:	46a8      	mov	r8, r5
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	000d      	movs	r5, r1
 800073c:	2000      	movs	r0, #0
 800073e:	2200      	movs	r2, #0
 8000740:	e7f2      	b.n	8000728 <__aeabi_fdiv+0x104>
 8000742:	4653      	mov	r3, sl
 8000744:	2b02      	cmp	r3, #2
 8000746:	d0ed      	beq.n	8000724 <__aeabi_fdiv+0x100>
 8000748:	2b03      	cmp	r3, #3
 800074a:	d033      	beq.n	80007b4 <__aeabi_fdiv+0x190>
 800074c:	46a0      	mov	r8, r4
 800074e:	2b01      	cmp	r3, #1
 8000750:	d105      	bne.n	800075e <__aeabi_fdiv+0x13a>
 8000752:	2000      	movs	r0, #0
 8000754:	2200      	movs	r2, #0
 8000756:	e7e7      	b.n	8000728 <__aeabi_fdiv+0x104>
 8000758:	0035      	movs	r5, r6
 800075a:	2803      	cmp	r0, #3
 800075c:	d07a      	beq.n	8000854 <__aeabi_fdiv+0x230>
 800075e:	003b      	movs	r3, r7
 8000760:	337f      	adds	r3, #127	@ 0x7f
 8000762:	2b00      	cmp	r3, #0
 8000764:	dd2d      	ble.n	80007c2 <__aeabi_fdiv+0x19e>
 8000766:	4642      	mov	r2, r8
 8000768:	0752      	lsls	r2, r2, #29
 800076a:	d007      	beq.n	800077c <__aeabi_fdiv+0x158>
 800076c:	220f      	movs	r2, #15
 800076e:	4641      	mov	r1, r8
 8000770:	400a      	ands	r2, r1
 8000772:	2a04      	cmp	r2, #4
 8000774:	d002      	beq.n	800077c <__aeabi_fdiv+0x158>
 8000776:	2204      	movs	r2, #4
 8000778:	4694      	mov	ip, r2
 800077a:	44e0      	add	r8, ip
 800077c:	4642      	mov	r2, r8
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	d505      	bpl.n	800078e <__aeabi_fdiv+0x16a>
 8000782:	4642      	mov	r2, r8
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <__aeabi_fdiv+0x23c>)
 8000786:	401a      	ands	r2, r3
 8000788:	003b      	movs	r3, r7
 800078a:	4690      	mov	r8, r2
 800078c:	3380      	adds	r3, #128	@ 0x80
 800078e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000790:	dcc8      	bgt.n	8000724 <__aeabi_fdiv+0x100>
 8000792:	4642      	mov	r2, r8
 8000794:	0192      	lsls	r2, r2, #6
 8000796:	0a52      	lsrs	r2, r2, #9
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	e7c5      	b.n	8000728 <__aeabi_fdiv+0x104>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	2500      	movs	r5, #0
 80007a0:	20ff      	movs	r0, #255	@ 0xff
 80007a2:	03d2      	lsls	r2, r2, #15
 80007a4:	e7c0      	b.n	8000728 <__aeabi_fdiv+0x104>
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	03d2      	lsls	r2, r2, #15
 80007aa:	4214      	tst	r4, r2
 80007ac:	d002      	beq.n	80007b4 <__aeabi_fdiv+0x190>
 80007ae:	4643      	mov	r3, r8
 80007b0:	4213      	tst	r3, r2
 80007b2:	d049      	beq.n	8000848 <__aeabi_fdiv+0x224>
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	03d2      	lsls	r2, r2, #15
 80007b8:	4322      	orrs	r2, r4
 80007ba:	0252      	lsls	r2, r2, #9
 80007bc:	20ff      	movs	r0, #255	@ 0xff
 80007be:	0a52      	lsrs	r2, r2, #9
 80007c0:	e7b2      	b.n	8000728 <__aeabi_fdiv+0x104>
 80007c2:	2201      	movs	r2, #1
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b1b      	cmp	r3, #27
 80007c8:	dcc3      	bgt.n	8000752 <__aeabi_fdiv+0x12e>
 80007ca:	4642      	mov	r2, r8
 80007cc:	40da      	lsrs	r2, r3
 80007ce:	4643      	mov	r3, r8
 80007d0:	379e      	adds	r7, #158	@ 0x9e
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	1e59      	subs	r1, r3, #1
 80007d6:	418b      	sbcs	r3, r1
 80007d8:	431a      	orrs	r2, r3
 80007da:	0753      	lsls	r3, r2, #29
 80007dc:	d004      	beq.n	80007e8 <__aeabi_fdiv+0x1c4>
 80007de:	230f      	movs	r3, #15
 80007e0:	4013      	ands	r3, r2
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d000      	beq.n	80007e8 <__aeabi_fdiv+0x1c4>
 80007e6:	3204      	adds	r2, #4
 80007e8:	0153      	lsls	r3, r2, #5
 80007ea:	d529      	bpl.n	8000840 <__aeabi_fdiv+0x21c>
 80007ec:	2001      	movs	r0, #1
 80007ee:	2200      	movs	r2, #0
 80007f0:	e79a      	b.n	8000728 <__aeabi_fdiv+0x104>
 80007f2:	4642      	mov	r2, r8
 80007f4:	0163      	lsls	r3, r4, #5
 80007f6:	0155      	lsls	r5, r2, #5
 80007f8:	42ab      	cmp	r3, r5
 80007fa:	d215      	bcs.n	8000828 <__aeabi_fdiv+0x204>
 80007fc:	201b      	movs	r0, #27
 80007fe:	2200      	movs	r2, #0
 8000800:	3f01      	subs	r7, #1
 8000802:	2601      	movs	r6, #1
 8000804:	001c      	movs	r4, r3
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2c00      	cmp	r4, #0
 800080c:	db01      	blt.n	8000812 <__aeabi_fdiv+0x1ee>
 800080e:	429d      	cmp	r5, r3
 8000810:	d801      	bhi.n	8000816 <__aeabi_fdiv+0x1f2>
 8000812:	1b5b      	subs	r3, r3, r5
 8000814:	4332      	orrs	r2, r6
 8000816:	3801      	subs	r0, #1
 8000818:	2800      	cmp	r0, #0
 800081a:	d1f3      	bne.n	8000804 <__aeabi_fdiv+0x1e0>
 800081c:	1e58      	subs	r0, r3, #1
 800081e:	4183      	sbcs	r3, r0
 8000820:	4313      	orrs	r3, r2
 8000822:	4698      	mov	r8, r3
 8000824:	000d      	movs	r5, r1
 8000826:	e79a      	b.n	800075e <__aeabi_fdiv+0x13a>
 8000828:	201a      	movs	r0, #26
 800082a:	2201      	movs	r2, #1
 800082c:	1b5b      	subs	r3, r3, r5
 800082e:	e7e8      	b.n	8000802 <__aeabi_fdiv+0x1de>
 8000830:	3b02      	subs	r3, #2
 8000832:	425a      	negs	r2, r3
 8000834:	4153      	adcs	r3, r2
 8000836:	425b      	negs	r3, r3
 8000838:	0035      	movs	r5, r6
 800083a:	2200      	movs	r2, #0
 800083c:	b2d8      	uxtb	r0, r3
 800083e:	e773      	b.n	8000728 <__aeabi_fdiv+0x104>
 8000840:	0192      	lsls	r2, r2, #6
 8000842:	2000      	movs	r0, #0
 8000844:	0a52      	lsrs	r2, r2, #9
 8000846:	e76f      	b.n	8000728 <__aeabi_fdiv+0x104>
 8000848:	431a      	orrs	r2, r3
 800084a:	0252      	lsls	r2, r2, #9
 800084c:	0035      	movs	r5, r6
 800084e:	20ff      	movs	r0, #255	@ 0xff
 8000850:	0a52      	lsrs	r2, r2, #9
 8000852:	e769      	b.n	8000728 <__aeabi_fdiv+0x104>
 8000854:	4644      	mov	r4, r8
 8000856:	e7ad      	b.n	80007b4 <__aeabi_fdiv+0x190>
 8000858:	08005dd4 	.word	0x08005dd4
 800085c:	08005e14 	.word	0x08005e14
 8000860:	f7ffffff 	.word	0xf7ffffff

08000864 <__eqsf2>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	0042      	lsls	r2, r0, #1
 8000868:	024e      	lsls	r6, r1, #9
 800086a:	004c      	lsls	r4, r1, #1
 800086c:	0245      	lsls	r5, r0, #9
 800086e:	0a6d      	lsrs	r5, r5, #9
 8000870:	0e12      	lsrs	r2, r2, #24
 8000872:	0fc3      	lsrs	r3, r0, #31
 8000874:	0a76      	lsrs	r6, r6, #9
 8000876:	0e24      	lsrs	r4, r4, #24
 8000878:	0fc9      	lsrs	r1, r1, #31
 800087a:	2aff      	cmp	r2, #255	@ 0xff
 800087c:	d010      	beq.n	80008a0 <__eqsf2+0x3c>
 800087e:	2cff      	cmp	r4, #255	@ 0xff
 8000880:	d00c      	beq.n	800089c <__eqsf2+0x38>
 8000882:	2001      	movs	r0, #1
 8000884:	42a2      	cmp	r2, r4
 8000886:	d10a      	bne.n	800089e <__eqsf2+0x3a>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d108      	bne.n	800089e <__eqsf2+0x3a>
 800088c:	428b      	cmp	r3, r1
 800088e:	d00f      	beq.n	80008b0 <__eqsf2+0x4c>
 8000890:	2a00      	cmp	r2, #0
 8000892:	d104      	bne.n	800089e <__eqsf2+0x3a>
 8000894:	0028      	movs	r0, r5
 8000896:	1e43      	subs	r3, r0, #1
 8000898:	4198      	sbcs	r0, r3
 800089a:	e000      	b.n	800089e <__eqsf2+0x3a>
 800089c:	2001      	movs	r0, #1
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	2001      	movs	r0, #1
 80008a2:	2cff      	cmp	r4, #255	@ 0xff
 80008a4:	d1fb      	bne.n	800089e <__eqsf2+0x3a>
 80008a6:	4335      	orrs	r5, r6
 80008a8:	d1f9      	bne.n	800089e <__eqsf2+0x3a>
 80008aa:	404b      	eors	r3, r1
 80008ac:	0018      	movs	r0, r3
 80008ae:	e7f6      	b.n	800089e <__eqsf2+0x3a>
 80008b0:	2000      	movs	r0, #0
 80008b2:	e7f4      	b.n	800089e <__eqsf2+0x3a>

080008b4 <__gesf2>:
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	0244      	lsls	r4, r0, #9
 80008ba:	024d      	lsls	r5, r1, #9
 80008bc:	0fc3      	lsrs	r3, r0, #31
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e12      	lsrs	r2, r2, #24
 80008c4:	0a6d      	lsrs	r5, r5, #9
 80008c6:	0e00      	lsrs	r0, r0, #24
 80008c8:	0fc9      	lsrs	r1, r1, #31
 80008ca:	2aff      	cmp	r2, #255	@ 0xff
 80008cc:	d019      	beq.n	8000902 <__gesf2+0x4e>
 80008ce:	28ff      	cmp	r0, #255	@ 0xff
 80008d0:	d00b      	beq.n	80008ea <__gesf2+0x36>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d11e      	bne.n	8000914 <__gesf2+0x60>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d10b      	bne.n	80008f2 <__gesf2+0x3e>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d027      	beq.n	800092e <__gesf2+0x7a>
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d134      	bne.n	800094c <__gesf2+0x98>
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d02f      	beq.n	8000946 <__gesf2+0x92>
 80008e6:	0008      	movs	r0, r1
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d128      	bne.n	8000940 <__gesf2+0x8c>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d101      	bne.n	80008f6 <__gesf2+0x42>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d0f5      	beq.n	80008e2 <__gesf2+0x2e>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d107      	bne.n	800090a <__gesf2+0x56>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d023      	beq.n	8000946 <__gesf2+0x92>
 80008fe:	0018      	movs	r0, r3
 8000900:	e7f2      	b.n	80008e8 <__gesf2+0x34>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d11c      	bne.n	8000940 <__gesf2+0x8c>
 8000906:	28ff      	cmp	r0, #255	@ 0xff
 8000908:	d014      	beq.n	8000934 <__gesf2+0x80>
 800090a:	1e58      	subs	r0, r3, #1
 800090c:	2302      	movs	r3, #2
 800090e:	4018      	ands	r0, r3
 8000910:	3801      	subs	r0, #1
 8000912:	e7e9      	b.n	80008e8 <__gesf2+0x34>
 8000914:	2800      	cmp	r0, #0
 8000916:	d0f8      	beq.n	800090a <__gesf2+0x56>
 8000918:	428b      	cmp	r3, r1
 800091a:	d1f6      	bne.n	800090a <__gesf2+0x56>
 800091c:	4282      	cmp	r2, r0
 800091e:	dcf4      	bgt.n	800090a <__gesf2+0x56>
 8000920:	dbeb      	blt.n	80008fa <__gesf2+0x46>
 8000922:	42ac      	cmp	r4, r5
 8000924:	d8f1      	bhi.n	800090a <__gesf2+0x56>
 8000926:	2000      	movs	r0, #0
 8000928:	42ac      	cmp	r4, r5
 800092a:	d2dd      	bcs.n	80008e8 <__gesf2+0x34>
 800092c:	e7e5      	b.n	80008fa <__gesf2+0x46>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d0da      	beq.n	80008e8 <__gesf2+0x34>
 8000932:	e7ea      	b.n	800090a <__gesf2+0x56>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d103      	bne.n	8000940 <__gesf2+0x8c>
 8000938:	428b      	cmp	r3, r1
 800093a:	d1e6      	bne.n	800090a <__gesf2+0x56>
 800093c:	2000      	movs	r0, #0
 800093e:	e7d3      	b.n	80008e8 <__gesf2+0x34>
 8000940:	2002      	movs	r0, #2
 8000942:	4240      	negs	r0, r0
 8000944:	e7d0      	b.n	80008e8 <__gesf2+0x34>
 8000946:	2001      	movs	r0, #1
 8000948:	4240      	negs	r0, r0
 800094a:	e7cd      	b.n	80008e8 <__gesf2+0x34>
 800094c:	428b      	cmp	r3, r1
 800094e:	d0e8      	beq.n	8000922 <__gesf2+0x6e>
 8000950:	e7db      	b.n	800090a <__gesf2+0x56>
 8000952:	46c0      	nop			@ (mov r8, r8)

08000954 <__lesf2>:
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0244      	lsls	r4, r0, #9
 800095a:	024d      	lsls	r5, r1, #9
 800095c:	0fc3      	lsrs	r3, r0, #31
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	0a64      	lsrs	r4, r4, #9
 8000962:	0e12      	lsrs	r2, r2, #24
 8000964:	0a6d      	lsrs	r5, r5, #9
 8000966:	0e00      	lsrs	r0, r0, #24
 8000968:	0fc9      	lsrs	r1, r1, #31
 800096a:	2aff      	cmp	r2, #255	@ 0xff
 800096c:	d01a      	beq.n	80009a4 <__lesf2+0x50>
 800096e:	28ff      	cmp	r0, #255	@ 0xff
 8000970:	d00e      	beq.n	8000990 <__lesf2+0x3c>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d11e      	bne.n	80009b4 <__lesf2+0x60>
 8000976:	2800      	cmp	r0, #0
 8000978:	d10e      	bne.n	8000998 <__lesf2+0x44>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d02a      	beq.n	80009d4 <__lesf2+0x80>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d00c      	beq.n	800099c <__lesf2+0x48>
 8000982:	428b      	cmp	r3, r1
 8000984:	d01d      	beq.n	80009c2 <__lesf2+0x6e>
 8000986:	1e58      	subs	r0, r3, #1
 8000988:	2302      	movs	r3, #2
 800098a:	4018      	ands	r0, r3
 800098c:	3801      	subs	r0, #1
 800098e:	e010      	b.n	80009b2 <__lesf2+0x5e>
 8000990:	2d00      	cmp	r5, #0
 8000992:	d10d      	bne.n	80009b0 <__lesf2+0x5c>
 8000994:	2a00      	cmp	r2, #0
 8000996:	d120      	bne.n	80009da <__lesf2+0x86>
 8000998:	2c00      	cmp	r4, #0
 800099a:	d11e      	bne.n	80009da <__lesf2+0x86>
 800099c:	2900      	cmp	r1, #0
 800099e:	d023      	beq.n	80009e8 <__lesf2+0x94>
 80009a0:	0008      	movs	r0, r1
 80009a2:	e006      	b.n	80009b2 <__lesf2+0x5e>
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d103      	bne.n	80009b0 <__lesf2+0x5c>
 80009a8:	28ff      	cmp	r0, #255	@ 0xff
 80009aa:	d1ec      	bne.n	8000986 <__lesf2+0x32>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d017      	beq.n	80009e0 <__lesf2+0x8c>
 80009b0:	2002      	movs	r0, #2
 80009b2:	bd30      	pop	{r4, r5, pc}
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d0e6      	beq.n	8000986 <__lesf2+0x32>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d1e4      	bne.n	8000986 <__lesf2+0x32>
 80009bc:	4282      	cmp	r2, r0
 80009be:	dce2      	bgt.n	8000986 <__lesf2+0x32>
 80009c0:	db04      	blt.n	80009cc <__lesf2+0x78>
 80009c2:	42ac      	cmp	r4, r5
 80009c4:	d8df      	bhi.n	8000986 <__lesf2+0x32>
 80009c6:	2000      	movs	r0, #0
 80009c8:	42ac      	cmp	r4, r5
 80009ca:	d2f2      	bcs.n	80009b2 <__lesf2+0x5e>
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00b      	beq.n	80009e8 <__lesf2+0x94>
 80009d0:	0018      	movs	r0, r3
 80009d2:	e7ee      	b.n	80009b2 <__lesf2+0x5e>
 80009d4:	2c00      	cmp	r4, #0
 80009d6:	d0ec      	beq.n	80009b2 <__lesf2+0x5e>
 80009d8:	e7d5      	b.n	8000986 <__lesf2+0x32>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d1d3      	bne.n	8000986 <__lesf2+0x32>
 80009de:	e7f5      	b.n	80009cc <__lesf2+0x78>
 80009e0:	2000      	movs	r0, #0
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d0e5      	beq.n	80009b2 <__lesf2+0x5e>
 80009e6:	e7ce      	b.n	8000986 <__lesf2+0x32>
 80009e8:	2001      	movs	r0, #1
 80009ea:	4240      	negs	r0, r0
 80009ec:	e7e1      	b.n	80009b2 <__lesf2+0x5e>
 80009ee:	46c0      	nop			@ (mov r8, r8)

080009f0 <__aeabi_fmul>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	464f      	mov	r7, r9
 80009f4:	4646      	mov	r6, r8
 80009f6:	46d6      	mov	lr, sl
 80009f8:	0243      	lsls	r3, r0, #9
 80009fa:	0a5b      	lsrs	r3, r3, #9
 80009fc:	0045      	lsls	r5, r0, #1
 80009fe:	b5c0      	push	{r6, r7, lr}
 8000a00:	4699      	mov	r9, r3
 8000a02:	1c0f      	adds	r7, r1, #0
 8000a04:	0e2d      	lsrs	r5, r5, #24
 8000a06:	0fc6      	lsrs	r6, r0, #31
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fmul+0x1e>
 8000a0c:	e088      	b.n	8000b20 <__aeabi_fmul+0x130>
 8000a0e:	2dff      	cmp	r5, #255	@ 0xff
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fmul+0x24>
 8000a12:	e08d      	b.n	8000b30 <__aeabi_fmul+0x140>
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	04d2      	lsls	r2, r2, #19
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4691      	mov	r9, r2
 8000a20:	4698      	mov	r8, r3
 8000a22:	469a      	mov	sl, r3
 8000a24:	3d7f      	subs	r5, #127	@ 0x7f
 8000a26:	027c      	lsls	r4, r7, #9
 8000a28:	007b      	lsls	r3, r7, #1
 8000a2a:	0a64      	lsrs	r4, r4, #9
 8000a2c:	0e1b      	lsrs	r3, r3, #24
 8000a2e:	0fff      	lsrs	r7, r7, #31
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d068      	beq.n	8000b06 <__aeabi_fmul+0x116>
 8000a34:	2bff      	cmp	r3, #255	@ 0xff
 8000a36:	d021      	beq.n	8000a7c <__aeabi_fmul+0x8c>
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	00e4      	lsls	r4, r4, #3
 8000a3c:	04d2      	lsls	r2, r2, #19
 8000a3e:	4314      	orrs	r4, r2
 8000a40:	4642      	mov	r2, r8
 8000a42:	3b7f      	subs	r3, #127	@ 0x7f
 8000a44:	195b      	adds	r3, r3, r5
 8000a46:	2100      	movs	r1, #0
 8000a48:	1c5d      	adds	r5, r3, #1
 8000a4a:	2a0a      	cmp	r2, #10
 8000a4c:	dc2e      	bgt.n	8000aac <__aeabi_fmul+0xbc>
 8000a4e:	407e      	eors	r6, r7
 8000a50:	4642      	mov	r2, r8
 8000a52:	2a02      	cmp	r2, #2
 8000a54:	dc23      	bgt.n	8000a9e <__aeabi_fmul+0xae>
 8000a56:	3a01      	subs	r2, #1
 8000a58:	2a01      	cmp	r2, #1
 8000a5a:	d900      	bls.n	8000a5e <__aeabi_fmul+0x6e>
 8000a5c:	e0bd      	b.n	8000bda <__aeabi_fmul+0x1ea>
 8000a5e:	2902      	cmp	r1, #2
 8000a60:	d06e      	beq.n	8000b40 <__aeabi_fmul+0x150>
 8000a62:	2901      	cmp	r1, #1
 8000a64:	d12c      	bne.n	8000ac0 <__aeabi_fmul+0xd0>
 8000a66:	2000      	movs	r0, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	05c0      	lsls	r0, r0, #23
 8000a6c:	07f6      	lsls	r6, r6, #31
 8000a6e:	4310      	orrs	r0, r2
 8000a70:	4330      	orrs	r0, r6
 8000a72:	bce0      	pop	{r5, r6, r7}
 8000a74:	46ba      	mov	sl, r7
 8000a76:	46b1      	mov	r9, r6
 8000a78:	46a8      	mov	r8, r5
 8000a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7c:	002b      	movs	r3, r5
 8000a7e:	33ff      	adds	r3, #255	@ 0xff
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d065      	beq.n	8000b50 <__aeabi_fmul+0x160>
 8000a84:	2203      	movs	r2, #3
 8000a86:	4641      	mov	r1, r8
 8000a88:	4311      	orrs	r1, r2
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	3501      	adds	r5, #1
 8000a8e:	4688      	mov	r8, r1
 8000a90:	407a      	eors	r2, r7
 8000a92:	35ff      	adds	r5, #255	@ 0xff
 8000a94:	290a      	cmp	r1, #10
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_fmul+0xaa>
 8000a98:	e0d8      	b.n	8000c4c <__aeabi_fmul+0x25c>
 8000a9a:	0016      	movs	r6, r2
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	4640      	mov	r0, r8
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4082      	lsls	r2, r0
 8000aa4:	20a6      	movs	r0, #166	@ 0xa6
 8000aa6:	00c0      	lsls	r0, r0, #3
 8000aa8:	4202      	tst	r2, r0
 8000aaa:	d020      	beq.n	8000aee <__aeabi_fmul+0xfe>
 8000aac:	4653      	mov	r3, sl
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d046      	beq.n	8000b40 <__aeabi_fmul+0x150>
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fmul+0xc8>
 8000ab6:	e0bb      	b.n	8000c30 <__aeabi_fmul+0x240>
 8000ab8:	4651      	mov	r1, sl
 8000aba:	464c      	mov	r4, r9
 8000abc:	2901      	cmp	r1, #1
 8000abe:	d0d2      	beq.n	8000a66 <__aeabi_fmul+0x76>
 8000ac0:	002b      	movs	r3, r5
 8000ac2:	337f      	adds	r3, #127	@ 0x7f
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd70      	ble.n	8000baa <__aeabi_fmul+0x1ba>
 8000ac8:	0762      	lsls	r2, r4, #29
 8000aca:	d004      	beq.n	8000ad6 <__aeabi_fmul+0xe6>
 8000acc:	220f      	movs	r2, #15
 8000ace:	4022      	ands	r2, r4
 8000ad0:	2a04      	cmp	r2, #4
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fmul+0xe6>
 8000ad4:	3404      	adds	r4, #4
 8000ad6:	0122      	lsls	r2, r4, #4
 8000ad8:	d503      	bpl.n	8000ae2 <__aeabi_fmul+0xf2>
 8000ada:	4b63      	ldr	r3, [pc, #396]	@ (8000c68 <__aeabi_fmul+0x278>)
 8000adc:	401c      	ands	r4, r3
 8000ade:	002b      	movs	r3, r5
 8000ae0:	3380      	adds	r3, #128	@ 0x80
 8000ae2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ae4:	dc2c      	bgt.n	8000b40 <__aeabi_fmul+0x150>
 8000ae6:	01a2      	lsls	r2, r4, #6
 8000ae8:	0a52      	lsrs	r2, r2, #9
 8000aea:	b2d8      	uxtb	r0, r3
 8000aec:	e7bd      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000aee:	2090      	movs	r0, #144	@ 0x90
 8000af0:	0080      	lsls	r0, r0, #2
 8000af2:	4202      	tst	r2, r0
 8000af4:	d127      	bne.n	8000b46 <__aeabi_fmul+0x156>
 8000af6:	38b9      	subs	r0, #185	@ 0xb9
 8000af8:	38ff      	subs	r0, #255	@ 0xff
 8000afa:	4210      	tst	r0, r2
 8000afc:	d06d      	beq.n	8000bda <__aeabi_fmul+0x1ea>
 8000afe:	003e      	movs	r6, r7
 8000b00:	46a1      	mov	r9, r4
 8000b02:	468a      	mov	sl, r1
 8000b04:	e7d2      	b.n	8000aac <__aeabi_fmul+0xbc>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d141      	bne.n	8000b8e <__aeabi_fmul+0x19e>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4690      	mov	r8, r2
 8000b12:	002b      	movs	r3, r5
 8000b14:	4642      	mov	r2, r8
 8000b16:	2101      	movs	r1, #1
 8000b18:	1c5d      	adds	r5, r3, #1
 8000b1a:	2a0a      	cmp	r2, #10
 8000b1c:	dd97      	ble.n	8000a4e <__aeabi_fmul+0x5e>
 8000b1e:	e7c5      	b.n	8000aac <__aeabi_fmul+0xbc>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d126      	bne.n	8000b72 <__aeabi_fmul+0x182>
 8000b24:	2304      	movs	r3, #4
 8000b26:	4698      	mov	r8, r3
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	e77a      	b.n	8000a26 <__aeabi_fmul+0x36>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d118      	bne.n	8000b66 <__aeabi_fmul+0x176>
 8000b34:	2308      	movs	r3, #8
 8000b36:	4698      	mov	r8, r3
 8000b38:	3b06      	subs	r3, #6
 8000b3a:	25ff      	movs	r5, #255	@ 0xff
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	e772      	b.n	8000a26 <__aeabi_fmul+0x36>
 8000b40:	20ff      	movs	r0, #255	@ 0xff
 8000b42:	2200      	movs	r2, #0
 8000b44:	e791      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	2600      	movs	r6, #0
 8000b4a:	20ff      	movs	r0, #255	@ 0xff
 8000b4c:	03d2      	lsls	r2, r2, #15
 8000b4e:	e78c      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000b50:	4641      	mov	r1, r8
 8000b52:	2202      	movs	r2, #2
 8000b54:	3501      	adds	r5, #1
 8000b56:	4311      	orrs	r1, r2
 8000b58:	4688      	mov	r8, r1
 8000b5a:	35ff      	adds	r5, #255	@ 0xff
 8000b5c:	290a      	cmp	r1, #10
 8000b5e:	dca5      	bgt.n	8000aac <__aeabi_fmul+0xbc>
 8000b60:	2102      	movs	r1, #2
 8000b62:	407e      	eors	r6, r7
 8000b64:	e774      	b.n	8000a50 <__aeabi_fmul+0x60>
 8000b66:	230c      	movs	r3, #12
 8000b68:	4698      	mov	r8, r3
 8000b6a:	3b09      	subs	r3, #9
 8000b6c:	25ff      	movs	r5, #255	@ 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e759      	b.n	8000a26 <__aeabi_fmul+0x36>
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 f988 	bl	8002e88 <__clzsi2>
 8000b78:	464a      	mov	r2, r9
 8000b7a:	1f43      	subs	r3, r0, #5
 8000b7c:	2576      	movs	r5, #118	@ 0x76
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	426d      	negs	r5, r5
 8000b84:	4691      	mov	r9, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	469a      	mov	sl, r3
 8000b8a:	1a2d      	subs	r5, r5, r0
 8000b8c:	e74b      	b.n	8000a26 <__aeabi_fmul+0x36>
 8000b8e:	0020      	movs	r0, r4
 8000b90:	f002 f97a 	bl	8002e88 <__clzsi2>
 8000b94:	4642      	mov	r2, r8
 8000b96:	1f43      	subs	r3, r0, #5
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	1a2b      	subs	r3, r5, r0
 8000b9c:	3b76      	subs	r3, #118	@ 0x76
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	1c5d      	adds	r5, r3, #1
 8000ba2:	2a0a      	cmp	r2, #10
 8000ba4:	dc00      	bgt.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000ba6:	e752      	b.n	8000a4e <__aeabi_fmul+0x5e>
 8000ba8:	e780      	b.n	8000aac <__aeabi_fmul+0xbc>
 8000baa:	2201      	movs	r2, #1
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b1b      	cmp	r3, #27
 8000bb0:	dd00      	ble.n	8000bb4 <__aeabi_fmul+0x1c4>
 8000bb2:	e758      	b.n	8000a66 <__aeabi_fmul+0x76>
 8000bb4:	359e      	adds	r5, #158	@ 0x9e
 8000bb6:	0022      	movs	r2, r4
 8000bb8:	40ac      	lsls	r4, r5
 8000bba:	40da      	lsrs	r2, r3
 8000bbc:	1e63      	subs	r3, r4, #1
 8000bbe:	419c      	sbcs	r4, r3
 8000bc0:	4322      	orrs	r2, r4
 8000bc2:	0753      	lsls	r3, r2, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fmul+0x1e0>
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x1e0>
 8000bce:	3204      	adds	r2, #4
 8000bd0:	0153      	lsls	r3, r2, #5
 8000bd2:	d537      	bpl.n	8000c44 <__aeabi_fmul+0x254>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	e747      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	464a      	mov	r2, r9
 8000bde:	0424      	lsls	r4, r4, #16
 8000be0:	0c24      	lsrs	r4, r4, #16
 8000be2:	0027      	movs	r7, r4
 8000be4:	0c10      	lsrs	r0, r2, #16
 8000be6:	0412      	lsls	r2, r2, #16
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	4344      	muls	r4, r0
 8000bec:	4357      	muls	r7, r2
 8000bee:	4348      	muls	r0, r1
 8000bf0:	4351      	muls	r1, r2
 8000bf2:	0c3a      	lsrs	r2, r7, #16
 8000bf4:	1909      	adds	r1, r1, r4
 8000bf6:	1852      	adds	r2, r2, r1
 8000bf8:	4294      	cmp	r4, r2
 8000bfa:	d903      	bls.n	8000c04 <__aeabi_fmul+0x214>
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	0249      	lsls	r1, r1, #9
 8000c00:	468c      	mov	ip, r1
 8000c02:	4460      	add	r0, ip
 8000c04:	043f      	lsls	r7, r7, #16
 8000c06:	0411      	lsls	r1, r2, #16
 8000c08:	0c3f      	lsrs	r7, r7, #16
 8000c0a:	19c9      	adds	r1, r1, r7
 8000c0c:	018c      	lsls	r4, r1, #6
 8000c0e:	1e67      	subs	r7, r4, #1
 8000c10:	41bc      	sbcs	r4, r7
 8000c12:	0c12      	lsrs	r2, r2, #16
 8000c14:	0e89      	lsrs	r1, r1, #26
 8000c16:	1812      	adds	r2, r2, r0
 8000c18:	430c      	orrs	r4, r1
 8000c1a:	0192      	lsls	r2, r2, #6
 8000c1c:	4314      	orrs	r4, r2
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	d50e      	bpl.n	8000c40 <__aeabi_fmul+0x250>
 8000c22:	2301      	movs	r3, #1
 8000c24:	0862      	lsrs	r2, r4, #1
 8000c26:	401c      	ands	r4, r3
 8000c28:	4314      	orrs	r4, r2
 8000c2a:	e749      	b.n	8000ac0 <__aeabi_fmul+0xd0>
 8000c2c:	003e      	movs	r6, r7
 8000c2e:	46a1      	mov	r9, r4
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	464b      	mov	r3, r9
 8000c34:	03d2      	lsls	r2, r2, #15
 8000c36:	431a      	orrs	r2, r3
 8000c38:	0252      	lsls	r2, r2, #9
 8000c3a:	20ff      	movs	r0, #255	@ 0xff
 8000c3c:	0a52      	lsrs	r2, r2, #9
 8000c3e:	e714      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000c40:	001d      	movs	r5, r3
 8000c42:	e73d      	b.n	8000ac0 <__aeabi_fmul+0xd0>
 8000c44:	0192      	lsls	r2, r2, #6
 8000c46:	2000      	movs	r0, #0
 8000c48:	0a52      	lsrs	r2, r2, #9
 8000c4a:	e70e      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000c4c:	290f      	cmp	r1, #15
 8000c4e:	d1ed      	bne.n	8000c2c <__aeabi_fmul+0x23c>
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	464b      	mov	r3, r9
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4213      	tst	r3, r2
 8000c58:	d0ea      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c5a:	4214      	tst	r4, r2
 8000c5c:	d1e8      	bne.n	8000c30 <__aeabi_fmul+0x240>
 8000c5e:	003e      	movs	r6, r7
 8000c60:	20ff      	movs	r0, #255	@ 0xff
 8000c62:	4322      	orrs	r2, r4
 8000c64:	e701      	b.n	8000a6a <__aeabi_fmul+0x7a>
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	f7ffffff 	.word	0xf7ffffff

08000c6c <__aeabi_fsub>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4647      	mov	r7, r8
 8000c70:	46ce      	mov	lr, r9
 8000c72:	024e      	lsls	r6, r1, #9
 8000c74:	0243      	lsls	r3, r0, #9
 8000c76:	0045      	lsls	r5, r0, #1
 8000c78:	0a72      	lsrs	r2, r6, #9
 8000c7a:	0fc4      	lsrs	r4, r0, #31
 8000c7c:	0048      	lsls	r0, r1, #1
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	4694      	mov	ip, r2
 8000c82:	0a5f      	lsrs	r7, r3, #9
 8000c84:	0e2d      	lsrs	r5, r5, #24
 8000c86:	099b      	lsrs	r3, r3, #6
 8000c88:	0e00      	lsrs	r0, r0, #24
 8000c8a:	0fc9      	lsrs	r1, r1, #31
 8000c8c:	09b6      	lsrs	r6, r6, #6
 8000c8e:	28ff      	cmp	r0, #255	@ 0xff
 8000c90:	d024      	beq.n	8000cdc <__aeabi_fsub+0x70>
 8000c92:	2201      	movs	r2, #1
 8000c94:	4051      	eors	r1, r2
 8000c96:	1a2a      	subs	r2, r5, r0
 8000c98:	428c      	cmp	r4, r1
 8000c9a:	d00f      	beq.n	8000cbc <__aeabi_fsub+0x50>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	dc00      	bgt.n	8000ca2 <__aeabi_fsub+0x36>
 8000ca0:	e16a      	b.n	8000f78 <__aeabi_fsub+0x30c>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d135      	bne.n	8000d12 <__aeabi_fsub+0xa6>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x40>
 8000caa:	e0a2      	b.n	8000df2 <__aeabi_fsub+0x186>
 8000cac:	1e51      	subs	r1, r2, #1
 8000cae:	2a01      	cmp	r2, #1
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x48>
 8000cb2:	e124      	b.n	8000efe <__aeabi_fsub+0x292>
 8000cb4:	2aff      	cmp	r2, #255	@ 0xff
 8000cb6:	d021      	beq.n	8000cfc <__aeabi_fsub+0x90>
 8000cb8:	000a      	movs	r2, r1
 8000cba:	e02f      	b.n	8000d1c <__aeabi_fsub+0xb0>
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	dc00      	bgt.n	8000cc2 <__aeabi_fsub+0x56>
 8000cc0:	e167      	b.n	8000f92 <__aeabi_fsub+0x326>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d05e      	beq.n	8000d84 <__aeabi_fsub+0x118>
 8000cc6:	2dff      	cmp	r5, #255	@ 0xff
 8000cc8:	d018      	beq.n	8000cfc <__aeabi_fsub+0x90>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	04c9      	lsls	r1, r1, #19
 8000cce:	430e      	orrs	r6, r1
 8000cd0:	2a1b      	cmp	r2, #27
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_fsub+0x6a>
 8000cd4:	e076      	b.n	8000dc4 <__aeabi_fsub+0x158>
 8000cd6:	002a      	movs	r2, r5
 8000cd8:	3301      	adds	r3, #1
 8000cda:	e032      	b.n	8000d42 <__aeabi_fsub+0xd6>
 8000cdc:	002a      	movs	r2, r5
 8000cde:	3aff      	subs	r2, #255	@ 0xff
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d042      	beq.n	8000d6c <__aeabi_fsub+0x100>
 8000ce6:	428c      	cmp	r4, r1
 8000ce8:	d055      	beq.n	8000d96 <__aeabi_fsub+0x12a>
 8000cea:	464a      	mov	r2, r9
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x86>
 8000cf0:	e09c      	b.n	8000e2c <__aeabi_fsub+0x1c0>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x8c>
 8000cf6:	e077      	b.n	8000de8 <__aeabi_fsub+0x17c>
 8000cf8:	000c      	movs	r4, r1
 8000cfa:	0033      	movs	r3, r6
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x98>
 8000d02:	e06e      	b.n	8000de2 <__aeabi_fsub+0x176>
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	03d2      	lsls	r2, r2, #15
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	20ff      	movs	r0, #255	@ 0xff
 8000d0e:	0a5b      	lsrs	r3, r3, #9
 8000d10:	e024      	b.n	8000d5c <__aeabi_fsub+0xf0>
 8000d12:	2dff      	cmp	r5, #255	@ 0xff
 8000d14:	d0f2      	beq.n	8000cfc <__aeabi_fsub+0x90>
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	04c9      	lsls	r1, r1, #19
 8000d1a:	430e      	orrs	r6, r1
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2a1b      	cmp	r2, #27
 8000d20:	dc08      	bgt.n	8000d34 <__aeabi_fsub+0xc8>
 8000d22:	0031      	movs	r1, r6
 8000d24:	2020      	movs	r0, #32
 8000d26:	40d1      	lsrs	r1, r2
 8000d28:	1a82      	subs	r2, r0, r2
 8000d2a:	4096      	lsls	r6, r2
 8000d2c:	0032      	movs	r2, r6
 8000d2e:	1e50      	subs	r0, r2, #1
 8000d30:	4182      	sbcs	r2, r0
 8000d32:	4311      	orrs	r1, r2
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	015a      	lsls	r2, r3, #5
 8000d38:	d460      	bmi.n	8000dfc <__aeabi_fsub+0x190>
 8000d3a:	2107      	movs	r1, #7
 8000d3c:	002a      	movs	r2, r5
 8000d3e:	4019      	ands	r1, r3
 8000d40:	d057      	beq.n	8000df2 <__aeabi_fsub+0x186>
 8000d42:	210f      	movs	r1, #15
 8000d44:	4019      	ands	r1, r3
 8000d46:	2904      	cmp	r1, #4
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fsub+0xe0>
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	0159      	lsls	r1, r3, #5
 8000d4e:	d550      	bpl.n	8000df2 <__aeabi_fsub+0x186>
 8000d50:	1c50      	adds	r0, r2, #1
 8000d52:	2afe      	cmp	r2, #254	@ 0xfe
 8000d54:	d045      	beq.n	8000de2 <__aeabi_fsub+0x176>
 8000d56:	019b      	lsls	r3, r3, #6
 8000d58:	b2c0      	uxtb	r0, r0
 8000d5a:	0a5b      	lsrs	r3, r3, #9
 8000d5c:	05c0      	lsls	r0, r0, #23
 8000d5e:	4318      	orrs	r0, r3
 8000d60:	07e4      	lsls	r4, r4, #31
 8000d62:	4320      	orrs	r0, r4
 8000d64:	bcc0      	pop	{r6, r7}
 8000d66:	46b9      	mov	r9, r7
 8000d68:	46b0      	mov	r8, r6
 8000d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4051      	eors	r1, r2
 8000d70:	428c      	cmp	r4, r1
 8000d72:	d1ba      	bne.n	8000cea <__aeabi_fsub+0x7e>
 8000d74:	464a      	mov	r2, r9
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d010      	beq.n	8000d9c <__aeabi_fsub+0x130>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x114>
 8000d7e:	e098      	b.n	8000eb2 <__aeabi_fsub+0x246>
 8000d80:	2300      	movs	r3, #0
 8000d82:	e7bb      	b.n	8000cfc <__aeabi_fsub+0x90>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d034      	beq.n	8000df2 <__aeabi_fsub+0x186>
 8000d88:	1e51      	subs	r1, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d06e      	beq.n	8000e6c <__aeabi_fsub+0x200>
 8000d8e:	2aff      	cmp	r2, #255	@ 0xff
 8000d90:	d0b4      	beq.n	8000cfc <__aeabi_fsub+0x90>
 8000d92:	000a      	movs	r2, r1
 8000d94:	e79c      	b.n	8000cd0 <__aeabi_fsub+0x64>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fsub+0x130>
 8000d9a:	e088      	b.n	8000eae <__aeabi_fsub+0x242>
 8000d9c:	20fe      	movs	r0, #254	@ 0xfe
 8000d9e:	1c6a      	adds	r2, r5, #1
 8000da0:	4210      	tst	r0, r2
 8000da2:	d000      	beq.n	8000da6 <__aeabi_fsub+0x13a>
 8000da4:	e092      	b.n	8000ecc <__aeabi_fsub+0x260>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0x140>
 8000daa:	e0a4      	b.n	8000ef6 <__aeabi_fsub+0x28a>
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x146>
 8000db0:	e0cb      	b.n	8000f4a <__aeabi_fsub+0x2de>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0x14c>
 8000db6:	e0ca      	b.n	8000f4e <__aeabi_fsub+0x2e2>
 8000db8:	2200      	movs	r2, #0
 8000dba:	08db      	lsrs	r3, r3, #3
 8000dbc:	025b      	lsls	r3, r3, #9
 8000dbe:	0a5b      	lsrs	r3, r3, #9
 8000dc0:	b2d0      	uxtb	r0, r2
 8000dc2:	e7cb      	b.n	8000d5c <__aeabi_fsub+0xf0>
 8000dc4:	0031      	movs	r1, r6
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	1a82      	subs	r2, r0, r2
 8000dcc:	4096      	lsls	r6, r2
 8000dce:	0032      	movs	r2, r6
 8000dd0:	1e50      	subs	r0, r2, #1
 8000dd2:	4182      	sbcs	r2, r0
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	015a      	lsls	r2, r3, #5
 8000dda:	d5ae      	bpl.n	8000d3a <__aeabi_fsub+0xce>
 8000ddc:	1c6a      	adds	r2, r5, #1
 8000dde:	2dfe      	cmp	r5, #254	@ 0xfe
 8000de0:	d14a      	bne.n	8000e78 <__aeabi_fsub+0x20c>
 8000de2:	20ff      	movs	r0, #255	@ 0xff
 8000de4:	2300      	movs	r3, #0
 8000de6:	e7b9      	b.n	8000d5c <__aeabi_fsub+0xf0>
 8000de8:	22ff      	movs	r2, #255	@ 0xff
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d14b      	bne.n	8000e86 <__aeabi_fsub+0x21a>
 8000dee:	000c      	movs	r4, r1
 8000df0:	0033      	movs	r3, r6
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	2aff      	cmp	r2, #255	@ 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x18e>
 8000df8:	e781      	b.n	8000cfe <__aeabi_fsub+0x92>
 8000dfa:	e7df      	b.n	8000dbc <__aeabi_fsub+0x150>
 8000dfc:	019f      	lsls	r7, r3, #6
 8000dfe:	09bf      	lsrs	r7, r7, #6
 8000e00:	0038      	movs	r0, r7
 8000e02:	f002 f841 	bl	8002e88 <__clzsi2>
 8000e06:	3805      	subs	r0, #5
 8000e08:	4087      	lsls	r7, r0
 8000e0a:	4285      	cmp	r5, r0
 8000e0c:	dc21      	bgt.n	8000e52 <__aeabi_fsub+0x1e6>
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2120      	movs	r1, #32
 8000e12:	1b42      	subs	r2, r0, r5
 8000e14:	3201      	adds	r2, #1
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	4097      	lsls	r7, r2
 8000e1c:	1e7a      	subs	r2, r7, #1
 8000e1e:	4197      	sbcs	r7, r2
 8000e20:	2200      	movs	r2, #0
 8000e22:	433b      	orrs	r3, r7
 8000e24:	0759      	lsls	r1, r3, #29
 8000e26:	d000      	beq.n	8000e2a <__aeabi_fsub+0x1be>
 8000e28:	e78b      	b.n	8000d42 <__aeabi_fsub+0xd6>
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fsub+0xe0>
 8000e2c:	20fe      	movs	r0, #254	@ 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4210      	tst	r0, r2
 8000e32:	d112      	bne.n	8000e5a <__aeabi_fsub+0x1ee>
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	d152      	bne.n	8000ede <__aeabi_fsub+0x272>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d07c      	beq.n	8000f36 <__aeabi_fsub+0x2ca>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0bb      	beq.n	8000db8 <__aeabi_fsub+0x14c>
 8000e40:	1b9a      	subs	r2, r3, r6
 8000e42:	0150      	lsls	r0, r2, #5
 8000e44:	d400      	bmi.n	8000e48 <__aeabi_fsub+0x1dc>
 8000e46:	e08b      	b.n	8000f60 <__aeabi_fsub+0x2f4>
 8000e48:	2401      	movs	r4, #1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	1af3      	subs	r3, r6, r3
 8000e4e:	400c      	ands	r4, r1
 8000e50:	e7e8      	b.n	8000e24 <__aeabi_fsub+0x1b8>
 8000e52:	4b56      	ldr	r3, [pc, #344]	@ (8000fac <__aeabi_fsub+0x340>)
 8000e54:	1a2a      	subs	r2, r5, r0
 8000e56:	403b      	ands	r3, r7
 8000e58:	e7e4      	b.n	8000e24 <__aeabi_fsub+0x1b8>
 8000e5a:	1b9f      	subs	r7, r3, r6
 8000e5c:	017a      	lsls	r2, r7, #5
 8000e5e:	d446      	bmi.n	8000eee <__aeabi_fsub+0x282>
 8000e60:	2f00      	cmp	r7, #0
 8000e62:	d1cd      	bne.n	8000e00 <__aeabi_fsub+0x194>
 8000e64:	2400      	movs	r4, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e777      	b.n	8000d5c <__aeabi_fsub+0xf0>
 8000e6c:	199b      	adds	r3, r3, r6
 8000e6e:	2501      	movs	r5, #1
 8000e70:	3201      	adds	r2, #1
 8000e72:	0159      	lsls	r1, r3, #5
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_fsub+0x20c>
 8000e76:	e760      	b.n	8000d3a <__aeabi_fsub+0xce>
 8000e78:	2101      	movs	r1, #1
 8000e7a:	484d      	ldr	r0, [pc, #308]	@ (8000fb0 <__aeabi_fsub+0x344>)
 8000e7c:	4019      	ands	r1, r3
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	4003      	ands	r3, r0
 8000e82:	430b      	orrs	r3, r1
 8000e84:	e7ce      	b.n	8000e24 <__aeabi_fsub+0x1b8>
 8000e86:	1e57      	subs	r7, r2, #1
 8000e88:	2a01      	cmp	r2, #1
 8000e8a:	d05a      	beq.n	8000f42 <__aeabi_fsub+0x2d6>
 8000e8c:	000c      	movs	r4, r1
 8000e8e:	2aff      	cmp	r2, #255	@ 0xff
 8000e90:	d033      	beq.n	8000efa <__aeabi_fsub+0x28e>
 8000e92:	2201      	movs	r2, #1
 8000e94:	2f1b      	cmp	r7, #27
 8000e96:	dc07      	bgt.n	8000ea8 <__aeabi_fsub+0x23c>
 8000e98:	2120      	movs	r1, #32
 8000e9a:	1bc9      	subs	r1, r1, r7
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	408b      	lsls	r3, r1
 8000ea0:	40fa      	lsrs	r2, r7
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	418b      	sbcs	r3, r1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	0005      	movs	r5, r0
 8000eaa:	1ab3      	subs	r3, r6, r2
 8000eac:	e743      	b.n	8000d36 <__aeabi_fsub+0xca>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d123      	bne.n	8000efa <__aeabi_fsub+0x28e>
 8000eb2:	22ff      	movs	r2, #255	@ 0xff
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d09b      	beq.n	8000df0 <__aeabi_fsub+0x184>
 8000eb8:	1e51      	subs	r1, r2, #1
 8000eba:	2a01      	cmp	r2, #1
 8000ebc:	d0d6      	beq.n	8000e6c <__aeabi_fsub+0x200>
 8000ebe:	2aff      	cmp	r2, #255	@ 0xff
 8000ec0:	d01b      	beq.n	8000efa <__aeabi_fsub+0x28e>
 8000ec2:	291b      	cmp	r1, #27
 8000ec4:	dd2c      	ble.n	8000f20 <__aeabi_fsub+0x2b4>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1c73      	adds	r3, r6, #1
 8000eca:	e73a      	b.n	8000d42 <__aeabi_fsub+0xd6>
 8000ecc:	2aff      	cmp	r2, #255	@ 0xff
 8000ece:	d088      	beq.n	8000de2 <__aeabi_fsub+0x176>
 8000ed0:	199b      	adds	r3, r3, r6
 8000ed2:	085b      	lsrs	r3, r3, #1
 8000ed4:	0759      	lsls	r1, r3, #29
 8000ed6:	d000      	beq.n	8000eda <__aeabi_fsub+0x26e>
 8000ed8:	e733      	b.n	8000d42 <__aeabi_fsub+0xd6>
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	e76e      	b.n	8000dbc <__aeabi_fsub+0x150>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d110      	bne.n	8000f04 <__aeabi_fsub+0x298>
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d043      	beq.n	8000f6e <__aeabi_fsub+0x302>
 8000ee6:	2401      	movs	r4, #1
 8000ee8:	0033      	movs	r3, r6
 8000eea:	400c      	ands	r4, r1
 8000eec:	e706      	b.n	8000cfc <__aeabi_fsub+0x90>
 8000eee:	2401      	movs	r4, #1
 8000ef0:	1af7      	subs	r7, r6, r3
 8000ef2:	400c      	ands	r4, r1
 8000ef4:	e784      	b.n	8000e00 <__aeabi_fsub+0x194>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fsub+0x298>
 8000efa:	0033      	movs	r3, r6
 8000efc:	e6fe      	b.n	8000cfc <__aeabi_fsub+0x90>
 8000efe:	2501      	movs	r5, #1
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	e718      	b.n	8000d36 <__aeabi_fsub+0xca>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x29e>
 8000f08:	e6f8      	b.n	8000cfc <__aeabi_fsub+0x90>
 8000f0a:	2280      	movs	r2, #128	@ 0x80
 8000f0c:	03d2      	lsls	r2, r2, #15
 8000f0e:	4297      	cmp	r7, r2
 8000f10:	d304      	bcc.n	8000f1c <__aeabi_fsub+0x2b0>
 8000f12:	4594      	cmp	ip, r2
 8000f14:	d202      	bcs.n	8000f1c <__aeabi_fsub+0x2b0>
 8000f16:	2401      	movs	r4, #1
 8000f18:	0033      	movs	r3, r6
 8000f1a:	400c      	ands	r4, r1
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	e6f1      	b.n	8000d04 <__aeabi_fsub+0x98>
 8000f20:	001a      	movs	r2, r3
 8000f22:	2520      	movs	r5, #32
 8000f24:	40ca      	lsrs	r2, r1
 8000f26:	1a69      	subs	r1, r5, r1
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	1e59      	subs	r1, r3, #1
 8000f2c:	418b      	sbcs	r3, r1
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0005      	movs	r5, r0
 8000f32:	199b      	adds	r3, r3, r6
 8000f34:	e750      	b.n	8000dd8 <__aeabi_fsub+0x16c>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d094      	beq.n	8000e64 <__aeabi_fsub+0x1f8>
 8000f3a:	2401      	movs	r4, #1
 8000f3c:	0033      	movs	r3, r6
 8000f3e:	400c      	ands	r4, r1
 8000f40:	e73a      	b.n	8000db8 <__aeabi_fsub+0x14c>
 8000f42:	000c      	movs	r4, r1
 8000f44:	2501      	movs	r5, #1
 8000f46:	1af3      	subs	r3, r6, r3
 8000f48:	e6f5      	b.n	8000d36 <__aeabi_fsub+0xca>
 8000f4a:	0033      	movs	r3, r6
 8000f4c:	e734      	b.n	8000db8 <__aeabi_fsub+0x14c>
 8000f4e:	199b      	adds	r3, r3, r6
 8000f50:	2200      	movs	r2, #0
 8000f52:	0159      	lsls	r1, r3, #5
 8000f54:	d5c1      	bpl.n	8000eda <__aeabi_fsub+0x26e>
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <__aeabi_fsub+0x340>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	e72d      	b.n	8000dbc <__aeabi_fsub+0x150>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x2fa>
 8000f64:	e77e      	b.n	8000e64 <__aeabi_fsub+0x1f8>
 8000f66:	0013      	movs	r3, r2
 8000f68:	2200      	movs	r2, #0
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	e726      	b.n	8000dbc <__aeabi_fsub+0x150>
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	2400      	movs	r4, #0
 8000f72:	20ff      	movs	r0, #255	@ 0xff
 8000f74:	03db      	lsls	r3, r3, #15
 8000f76:	e6f1      	b.n	8000d5c <__aeabi_fsub+0xf0>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x312>
 8000f7c:	e756      	b.n	8000e2c <__aeabi_fsub+0x1c0>
 8000f7e:	1b47      	subs	r7, r0, r5
 8000f80:	003a      	movs	r2, r7
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x31c>
 8000f86:	e730      	b.n	8000dea <__aeabi_fsub+0x17e>
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	04d2      	lsls	r2, r2, #19
 8000f8c:	000c      	movs	r4, r1
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	e77f      	b.n	8000e92 <__aeabi_fsub+0x226>
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x32c>
 8000f96:	e701      	b.n	8000d9c <__aeabi_fsub+0x130>
 8000f98:	1b41      	subs	r1, r0, r5
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fsub+0x336>
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	e788      	b.n	8000eb4 <__aeabi_fsub+0x248>
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	04d2      	lsls	r2, r2, #19
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	e78b      	b.n	8000ec2 <__aeabi_fsub+0x256>
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	fbffffff 	.word	0xfbffffff
 8000fb0:	7dffffff 	.word	0x7dffffff

08000fb4 <__aeabi_ui2f>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	1e04      	subs	r4, r0, #0
 8000fb8:	d00e      	beq.n	8000fd8 <__aeabi_ui2f+0x24>
 8000fba:	f001 ff65 	bl	8002e88 <__clzsi2>
 8000fbe:	239e      	movs	r3, #158	@ 0x9e
 8000fc0:	0001      	movs	r1, r0
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	2b96      	cmp	r3, #150	@ 0x96
 8000fc6:	dc0c      	bgt.n	8000fe2 <__aeabi_ui2f+0x2e>
 8000fc8:	2808      	cmp	r0, #8
 8000fca:	d02f      	beq.n	800102c <__aeabi_ui2f+0x78>
 8000fcc:	3908      	subs	r1, #8
 8000fce:	408c      	lsls	r4, r1
 8000fd0:	0264      	lsls	r4, r4, #9
 8000fd2:	0a64      	lsrs	r4, r4, #9
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	e001      	b.n	8000fdc <__aeabi_ui2f+0x28>
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2400      	movs	r4, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4320      	orrs	r0, r4
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
 8000fe2:	2b99      	cmp	r3, #153	@ 0x99
 8000fe4:	dc16      	bgt.n	8001014 <__aeabi_ui2f+0x60>
 8000fe6:	1f42      	subs	r2, r0, #5
 8000fe8:	2805      	cmp	r0, #5
 8000fea:	d000      	beq.n	8000fee <__aeabi_ui2f+0x3a>
 8000fec:	4094      	lsls	r4, r2
 8000fee:	0022      	movs	r2, r4
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <__aeabi_ui2f+0x80>)
 8000ff2:	4002      	ands	r2, r0
 8000ff4:	0765      	lsls	r5, r4, #29
 8000ff6:	d009      	beq.n	800100c <__aeabi_ui2f+0x58>
 8000ff8:	250f      	movs	r5, #15
 8000ffa:	402c      	ands	r4, r5
 8000ffc:	2c04      	cmp	r4, #4
 8000ffe:	d005      	beq.n	800100c <__aeabi_ui2f+0x58>
 8001000:	3204      	adds	r2, #4
 8001002:	0154      	lsls	r4, r2, #5
 8001004:	d502      	bpl.n	800100c <__aeabi_ui2f+0x58>
 8001006:	239f      	movs	r3, #159	@ 0x9f
 8001008:	4002      	ands	r2, r0
 800100a:	1a5b      	subs	r3, r3, r1
 800100c:	0192      	lsls	r2, r2, #6
 800100e:	0a54      	lsrs	r4, r2, #9
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	e7e3      	b.n	8000fdc <__aeabi_ui2f+0x28>
 8001014:	0002      	movs	r2, r0
 8001016:	0020      	movs	r0, r4
 8001018:	321b      	adds	r2, #27
 800101a:	4090      	lsls	r0, r2
 800101c:	0002      	movs	r2, r0
 800101e:	1e50      	subs	r0, r2, #1
 8001020:	4182      	sbcs	r2, r0
 8001022:	2005      	movs	r0, #5
 8001024:	1a40      	subs	r0, r0, r1
 8001026:	40c4      	lsrs	r4, r0
 8001028:	4314      	orrs	r4, r2
 800102a:	e7e0      	b.n	8000fee <__aeabi_ui2f+0x3a>
 800102c:	0264      	lsls	r4, r4, #9
 800102e:	2096      	movs	r0, #150	@ 0x96
 8001030:	0a64      	lsrs	r4, r4, #9
 8001032:	e7d3      	b.n	8000fdc <__aeabi_ui2f+0x28>
 8001034:	fbffffff 	.word	0xfbffffff

08001038 <__aeabi_dadd>:
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	4657      	mov	r7, sl
 800103c:	464e      	mov	r6, r9
 800103e:	4645      	mov	r5, r8
 8001040:	46de      	mov	lr, fp
 8001042:	b5e0      	push	{r5, r6, r7, lr}
 8001044:	b083      	sub	sp, #12
 8001046:	9000      	str	r0, [sp, #0]
 8001048:	9101      	str	r1, [sp, #4]
 800104a:	030c      	lsls	r4, r1, #12
 800104c:	004f      	lsls	r7, r1, #1
 800104e:	0fce      	lsrs	r6, r1, #31
 8001050:	0a61      	lsrs	r1, r4, #9
 8001052:	9c00      	ldr	r4, [sp, #0]
 8001054:	031d      	lsls	r5, r3, #12
 8001056:	0f64      	lsrs	r4, r4, #29
 8001058:	430c      	orrs	r4, r1
 800105a:	9900      	ldr	r1, [sp, #0]
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	00c8      	lsls	r0, r1, #3
 8001062:	0059      	lsls	r1, r3, #1
 8001064:	0d4b      	lsrs	r3, r1, #21
 8001066:	4699      	mov	r9, r3
 8001068:	9a00      	ldr	r2, [sp, #0]
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	0a6d      	lsrs	r5, r5, #9
 800106e:	0fd9      	lsrs	r1, r3, #31
 8001070:	0f53      	lsrs	r3, r2, #29
 8001072:	432b      	orrs	r3, r5
 8001074:	469a      	mov	sl, r3
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	0d7f      	lsrs	r7, r7, #21
 800107a:	00da      	lsls	r2, r3, #3
 800107c:	4694      	mov	ip, r2
 800107e:	464a      	mov	r2, r9
 8001080:	46b0      	mov	r8, r6
 8001082:	1aba      	subs	r2, r7, r2
 8001084:	428e      	cmp	r6, r1
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x52>
 8001088:	e0b0      	b.n	80011ec <__aeabi_dadd+0x1b4>
 800108a:	2a00      	cmp	r2, #0
 800108c:	dc00      	bgt.n	8001090 <__aeabi_dadd+0x58>
 800108e:	e078      	b.n	8001182 <__aeabi_dadd+0x14a>
 8001090:	4649      	mov	r1, r9
 8001092:	2900      	cmp	r1, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x60>
 8001096:	e0e9      	b.n	800126c <__aeabi_dadd+0x234>
 8001098:	49c9      	ldr	r1, [pc, #804]	@ (80013c0 <__aeabi_dadd+0x388>)
 800109a:	428f      	cmp	r7, r1
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x68>
 800109e:	e195      	b.n	80013cc <__aeabi_dadd+0x394>
 80010a0:	2501      	movs	r5, #1
 80010a2:	2a38      	cmp	r2, #56	@ 0x38
 80010a4:	dc16      	bgt.n	80010d4 <__aeabi_dadd+0x9c>
 80010a6:	2180      	movs	r1, #128	@ 0x80
 80010a8:	4653      	mov	r3, sl
 80010aa:	0409      	lsls	r1, r1, #16
 80010ac:	430b      	orrs	r3, r1
 80010ae:	469a      	mov	sl, r3
 80010b0:	2a1f      	cmp	r2, #31
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_dadd+0x7e>
 80010b4:	e1e7      	b.n	8001486 <__aeabi_dadd+0x44e>
 80010b6:	2120      	movs	r1, #32
 80010b8:	4655      	mov	r5, sl
 80010ba:	1a8b      	subs	r3, r1, r2
 80010bc:	4661      	mov	r1, ip
 80010be:	409d      	lsls	r5, r3
 80010c0:	40d1      	lsrs	r1, r2
 80010c2:	430d      	orrs	r5, r1
 80010c4:	4661      	mov	r1, ip
 80010c6:	4099      	lsls	r1, r3
 80010c8:	1e4b      	subs	r3, r1, #1
 80010ca:	4199      	sbcs	r1, r3
 80010cc:	4653      	mov	r3, sl
 80010ce:	40d3      	lsrs	r3, r2
 80010d0:	430d      	orrs	r5, r1
 80010d2:	1ae4      	subs	r4, r4, r3
 80010d4:	1b45      	subs	r5, r0, r5
 80010d6:	42a8      	cmp	r0, r5
 80010d8:	4180      	sbcs	r0, r0
 80010da:	4240      	negs	r0, r0
 80010dc:	1a24      	subs	r4, r4, r0
 80010de:	0223      	lsls	r3, r4, #8
 80010e0:	d400      	bmi.n	80010e4 <__aeabi_dadd+0xac>
 80010e2:	e10f      	b.n	8001304 <__aeabi_dadd+0x2cc>
 80010e4:	0264      	lsls	r4, r4, #9
 80010e6:	0a64      	lsrs	r4, r4, #9
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0xb6>
 80010ec:	e139      	b.n	8001362 <__aeabi_dadd+0x32a>
 80010ee:	0020      	movs	r0, r4
 80010f0:	f001 feca 	bl	8002e88 <__clzsi2>
 80010f4:	0003      	movs	r3, r0
 80010f6:	3b08      	subs	r3, #8
 80010f8:	2120      	movs	r1, #32
 80010fa:	0028      	movs	r0, r5
 80010fc:	1aca      	subs	r2, r1, r3
 80010fe:	40d0      	lsrs	r0, r2
 8001100:	409c      	lsls	r4, r3
 8001102:	0002      	movs	r2, r0
 8001104:	409d      	lsls	r5, r3
 8001106:	4322      	orrs	r2, r4
 8001108:	429f      	cmp	r7, r3
 800110a:	dd00      	ble.n	800110e <__aeabi_dadd+0xd6>
 800110c:	e173      	b.n	80013f6 <__aeabi_dadd+0x3be>
 800110e:	1bd8      	subs	r0, r3, r7
 8001110:	3001      	adds	r0, #1
 8001112:	1a09      	subs	r1, r1, r0
 8001114:	002c      	movs	r4, r5
 8001116:	408d      	lsls	r5, r1
 8001118:	40c4      	lsrs	r4, r0
 800111a:	1e6b      	subs	r3, r5, #1
 800111c:	419d      	sbcs	r5, r3
 800111e:	0013      	movs	r3, r2
 8001120:	40c2      	lsrs	r2, r0
 8001122:	408b      	lsls	r3, r1
 8001124:	4325      	orrs	r5, r4
 8001126:	2700      	movs	r7, #0
 8001128:	0014      	movs	r4, r2
 800112a:	431d      	orrs	r5, r3
 800112c:	076b      	lsls	r3, r5, #29
 800112e:	d009      	beq.n	8001144 <__aeabi_dadd+0x10c>
 8001130:	230f      	movs	r3, #15
 8001132:	402b      	ands	r3, r5
 8001134:	2b04      	cmp	r3, #4
 8001136:	d005      	beq.n	8001144 <__aeabi_dadd+0x10c>
 8001138:	1d2b      	adds	r3, r5, #4
 800113a:	42ab      	cmp	r3, r5
 800113c:	41ad      	sbcs	r5, r5
 800113e:	426d      	negs	r5, r5
 8001140:	1964      	adds	r4, r4, r5
 8001142:	001d      	movs	r5, r3
 8001144:	0223      	lsls	r3, r4, #8
 8001146:	d400      	bmi.n	800114a <__aeabi_dadd+0x112>
 8001148:	e12d      	b.n	80013a6 <__aeabi_dadd+0x36e>
 800114a:	4a9d      	ldr	r2, [pc, #628]	@ (80013c0 <__aeabi_dadd+0x388>)
 800114c:	3701      	adds	r7, #1
 800114e:	4297      	cmp	r7, r2
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x11c>
 8001152:	e0d3      	b.n	80012fc <__aeabi_dadd+0x2c4>
 8001154:	4646      	mov	r6, r8
 8001156:	499b      	ldr	r1, [pc, #620]	@ (80013c4 <__aeabi_dadd+0x38c>)
 8001158:	08ed      	lsrs	r5, r5, #3
 800115a:	4021      	ands	r1, r4
 800115c:	074a      	lsls	r2, r1, #29
 800115e:	432a      	orrs	r2, r5
 8001160:	057c      	lsls	r4, r7, #21
 8001162:	024d      	lsls	r5, r1, #9
 8001164:	0b2d      	lsrs	r5, r5, #12
 8001166:	0d64      	lsrs	r4, r4, #21
 8001168:	0524      	lsls	r4, r4, #20
 800116a:	432c      	orrs	r4, r5
 800116c:	07f6      	lsls	r6, r6, #31
 800116e:	4334      	orrs	r4, r6
 8001170:	0010      	movs	r0, r2
 8001172:	0021      	movs	r1, r4
 8001174:	b003      	add	sp, #12
 8001176:	bcf0      	pop	{r4, r5, r6, r7}
 8001178:	46bb      	mov	fp, r7
 800117a:	46b2      	mov	sl, r6
 800117c:	46a9      	mov	r9, r5
 800117e:	46a0      	mov	r8, r4
 8001180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001182:	2a00      	cmp	r2, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x150>
 8001186:	e084      	b.n	8001292 <__aeabi_dadd+0x25a>
 8001188:	464a      	mov	r2, r9
 800118a:	1bd2      	subs	r2, r2, r7
 800118c:	2f00      	cmp	r7, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x15a>
 8001190:	e16d      	b.n	800146e <__aeabi_dadd+0x436>
 8001192:	0025      	movs	r5, r4
 8001194:	4305      	orrs	r5, r0
 8001196:	d100      	bne.n	800119a <__aeabi_dadd+0x162>
 8001198:	e127      	b.n	80013ea <__aeabi_dadd+0x3b2>
 800119a:	1e56      	subs	r6, r2, #1
 800119c:	2a01      	cmp	r2, #1
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x16a>
 80011a0:	e23b      	b.n	800161a <__aeabi_dadd+0x5e2>
 80011a2:	4d87      	ldr	r5, [pc, #540]	@ (80013c0 <__aeabi_dadd+0x388>)
 80011a4:	42aa      	cmp	r2, r5
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x172>
 80011a8:	e26a      	b.n	8001680 <__aeabi_dadd+0x648>
 80011aa:	2501      	movs	r5, #1
 80011ac:	2e38      	cmp	r6, #56	@ 0x38
 80011ae:	dc12      	bgt.n	80011d6 <__aeabi_dadd+0x19e>
 80011b0:	0032      	movs	r2, r6
 80011b2:	2a1f      	cmp	r2, #31
 80011b4:	dd00      	ble.n	80011b8 <__aeabi_dadd+0x180>
 80011b6:	e1f8      	b.n	80015aa <__aeabi_dadd+0x572>
 80011b8:	2620      	movs	r6, #32
 80011ba:	0025      	movs	r5, r4
 80011bc:	1ab6      	subs	r6, r6, r2
 80011be:	0007      	movs	r7, r0
 80011c0:	4653      	mov	r3, sl
 80011c2:	40b0      	lsls	r0, r6
 80011c4:	40d4      	lsrs	r4, r2
 80011c6:	40b5      	lsls	r5, r6
 80011c8:	40d7      	lsrs	r7, r2
 80011ca:	1e46      	subs	r6, r0, #1
 80011cc:	41b0      	sbcs	r0, r6
 80011ce:	1b1b      	subs	r3, r3, r4
 80011d0:	469a      	mov	sl, r3
 80011d2:	433d      	orrs	r5, r7
 80011d4:	4305      	orrs	r5, r0
 80011d6:	4662      	mov	r2, ip
 80011d8:	1b55      	subs	r5, r2, r5
 80011da:	45ac      	cmp	ip, r5
 80011dc:	4192      	sbcs	r2, r2
 80011de:	4653      	mov	r3, sl
 80011e0:	4252      	negs	r2, r2
 80011e2:	000e      	movs	r6, r1
 80011e4:	464f      	mov	r7, r9
 80011e6:	4688      	mov	r8, r1
 80011e8:	1a9c      	subs	r4, r3, r2
 80011ea:	e778      	b.n	80010de <__aeabi_dadd+0xa6>
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dadd+0x1ba>
 80011f0:	e08e      	b.n	8001310 <__aeabi_dadd+0x2d8>
 80011f2:	4649      	mov	r1, r9
 80011f4:	2900      	cmp	r1, #0
 80011f6:	d175      	bne.n	80012e4 <__aeabi_dadd+0x2ac>
 80011f8:	4661      	mov	r1, ip
 80011fa:	4653      	mov	r3, sl
 80011fc:	4319      	orrs	r1, r3
 80011fe:	d100      	bne.n	8001202 <__aeabi_dadd+0x1ca>
 8001200:	e0f6      	b.n	80013f0 <__aeabi_dadd+0x3b8>
 8001202:	1e51      	subs	r1, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x1d2>
 8001208:	e191      	b.n	800152e <__aeabi_dadd+0x4f6>
 800120a:	4d6d      	ldr	r5, [pc, #436]	@ (80013c0 <__aeabi_dadd+0x388>)
 800120c:	42aa      	cmp	r2, r5
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1da>
 8001210:	e0dc      	b.n	80013cc <__aeabi_dadd+0x394>
 8001212:	2501      	movs	r5, #1
 8001214:	2938      	cmp	r1, #56	@ 0x38
 8001216:	dc14      	bgt.n	8001242 <__aeabi_dadd+0x20a>
 8001218:	000a      	movs	r2, r1
 800121a:	2a1f      	cmp	r2, #31
 800121c:	dd00      	ble.n	8001220 <__aeabi_dadd+0x1e8>
 800121e:	e1a2      	b.n	8001566 <__aeabi_dadd+0x52e>
 8001220:	2120      	movs	r1, #32
 8001222:	4653      	mov	r3, sl
 8001224:	1a89      	subs	r1, r1, r2
 8001226:	408b      	lsls	r3, r1
 8001228:	001d      	movs	r5, r3
 800122a:	4663      	mov	r3, ip
 800122c:	40d3      	lsrs	r3, r2
 800122e:	431d      	orrs	r5, r3
 8001230:	4663      	mov	r3, ip
 8001232:	408b      	lsls	r3, r1
 8001234:	0019      	movs	r1, r3
 8001236:	1e4b      	subs	r3, r1, #1
 8001238:	4199      	sbcs	r1, r3
 800123a:	4653      	mov	r3, sl
 800123c:	40d3      	lsrs	r3, r2
 800123e:	430d      	orrs	r5, r1
 8001240:	18e4      	adds	r4, r4, r3
 8001242:	182d      	adds	r5, r5, r0
 8001244:	4285      	cmp	r5, r0
 8001246:	4180      	sbcs	r0, r0
 8001248:	4240      	negs	r0, r0
 800124a:	1824      	adds	r4, r4, r0
 800124c:	0223      	lsls	r3, r4, #8
 800124e:	d559      	bpl.n	8001304 <__aeabi_dadd+0x2cc>
 8001250:	4b5b      	ldr	r3, [pc, #364]	@ (80013c0 <__aeabi_dadd+0x388>)
 8001252:	3701      	adds	r7, #1
 8001254:	429f      	cmp	r7, r3
 8001256:	d051      	beq.n	80012fc <__aeabi_dadd+0x2c4>
 8001258:	2101      	movs	r1, #1
 800125a:	4b5a      	ldr	r3, [pc, #360]	@ (80013c4 <__aeabi_dadd+0x38c>)
 800125c:	086a      	lsrs	r2, r5, #1
 800125e:	401c      	ands	r4, r3
 8001260:	4029      	ands	r1, r5
 8001262:	430a      	orrs	r2, r1
 8001264:	07e5      	lsls	r5, r4, #31
 8001266:	4315      	orrs	r5, r2
 8001268:	0864      	lsrs	r4, r4, #1
 800126a:	e75f      	b.n	800112c <__aeabi_dadd+0xf4>
 800126c:	4661      	mov	r1, ip
 800126e:	4653      	mov	r3, sl
 8001270:	4319      	orrs	r1, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x23e>
 8001274:	e0bc      	b.n	80013f0 <__aeabi_dadd+0x3b8>
 8001276:	1e51      	subs	r1, r2, #1
 8001278:	2a01      	cmp	r2, #1
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x246>
 800127c:	e164      	b.n	8001548 <__aeabi_dadd+0x510>
 800127e:	4d50      	ldr	r5, [pc, #320]	@ (80013c0 <__aeabi_dadd+0x388>)
 8001280:	42aa      	cmp	r2, r5
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x24e>
 8001284:	e16a      	b.n	800155c <__aeabi_dadd+0x524>
 8001286:	2501      	movs	r5, #1
 8001288:	2938      	cmp	r1, #56	@ 0x38
 800128a:	dd00      	ble.n	800128e <__aeabi_dadd+0x256>
 800128c:	e722      	b.n	80010d4 <__aeabi_dadd+0x9c>
 800128e:	000a      	movs	r2, r1
 8001290:	e70e      	b.n	80010b0 <__aeabi_dadd+0x78>
 8001292:	4a4d      	ldr	r2, [pc, #308]	@ (80013c8 <__aeabi_dadd+0x390>)
 8001294:	1c7d      	adds	r5, r7, #1
 8001296:	4215      	tst	r5, r2
 8001298:	d000      	beq.n	800129c <__aeabi_dadd+0x264>
 800129a:	e0d0      	b.n	800143e <__aeabi_dadd+0x406>
 800129c:	0025      	movs	r5, r4
 800129e:	4662      	mov	r2, ip
 80012a0:	4653      	mov	r3, sl
 80012a2:	4305      	orrs	r5, r0
 80012a4:	431a      	orrs	r2, r3
 80012a6:	2f00      	cmp	r7, #0
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x274>
 80012aa:	e137      	b.n	800151c <__aeabi_dadd+0x4e4>
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x27a>
 80012b0:	e1a8      	b.n	8001604 <__aeabi_dadd+0x5cc>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x280>
 80012b6:	e16a      	b.n	800158e <__aeabi_dadd+0x556>
 80012b8:	4663      	mov	r3, ip
 80012ba:	1ac5      	subs	r5, r0, r3
 80012bc:	4653      	mov	r3, sl
 80012be:	1ae2      	subs	r2, r4, r3
 80012c0:	42a8      	cmp	r0, r5
 80012c2:	419b      	sbcs	r3, r3
 80012c4:	425b      	negs	r3, r3
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	021a      	lsls	r2, r3, #8
 80012ca:	d400      	bmi.n	80012ce <__aeabi_dadd+0x296>
 80012cc:	e203      	b.n	80016d6 <__aeabi_dadd+0x69e>
 80012ce:	4663      	mov	r3, ip
 80012d0:	1a1d      	subs	r5, r3, r0
 80012d2:	45ac      	cmp	ip, r5
 80012d4:	4192      	sbcs	r2, r2
 80012d6:	4653      	mov	r3, sl
 80012d8:	4252      	negs	r2, r2
 80012da:	1b1c      	subs	r4, r3, r4
 80012dc:	000e      	movs	r6, r1
 80012de:	4688      	mov	r8, r1
 80012e0:	1aa4      	subs	r4, r4, r2
 80012e2:	e723      	b.n	800112c <__aeabi_dadd+0xf4>
 80012e4:	4936      	ldr	r1, [pc, #216]	@ (80013c0 <__aeabi_dadd+0x388>)
 80012e6:	428f      	cmp	r7, r1
 80012e8:	d070      	beq.n	80013cc <__aeabi_dadd+0x394>
 80012ea:	2501      	movs	r5, #1
 80012ec:	2a38      	cmp	r2, #56	@ 0x38
 80012ee:	dca8      	bgt.n	8001242 <__aeabi_dadd+0x20a>
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	4653      	mov	r3, sl
 80012f4:	0409      	lsls	r1, r1, #16
 80012f6:	430b      	orrs	r3, r1
 80012f8:	469a      	mov	sl, r3
 80012fa:	e78e      	b.n	800121a <__aeabi_dadd+0x1e2>
 80012fc:	003c      	movs	r4, r7
 80012fe:	2500      	movs	r5, #0
 8001300:	2200      	movs	r2, #0
 8001302:	e731      	b.n	8001168 <__aeabi_dadd+0x130>
 8001304:	2307      	movs	r3, #7
 8001306:	402b      	ands	r3, r5
 8001308:	2b00      	cmp	r3, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x2d6>
 800130c:	e710      	b.n	8001130 <__aeabi_dadd+0xf8>
 800130e:	e093      	b.n	8001438 <__aeabi_dadd+0x400>
 8001310:	2a00      	cmp	r2, #0
 8001312:	d074      	beq.n	80013fe <__aeabi_dadd+0x3c6>
 8001314:	464a      	mov	r2, r9
 8001316:	1bd2      	subs	r2, r2, r7
 8001318:	2f00      	cmp	r7, #0
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x2e6>
 800131c:	e0c7      	b.n	80014ae <__aeabi_dadd+0x476>
 800131e:	4928      	ldr	r1, [pc, #160]	@ (80013c0 <__aeabi_dadd+0x388>)
 8001320:	4589      	cmp	r9, r1
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x2ee>
 8001324:	e185      	b.n	8001632 <__aeabi_dadd+0x5fa>
 8001326:	2501      	movs	r5, #1
 8001328:	2a38      	cmp	r2, #56	@ 0x38
 800132a:	dc12      	bgt.n	8001352 <__aeabi_dadd+0x31a>
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	0409      	lsls	r1, r1, #16
 8001330:	430c      	orrs	r4, r1
 8001332:	2a1f      	cmp	r2, #31
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0x300>
 8001336:	e1ab      	b.n	8001690 <__aeabi_dadd+0x658>
 8001338:	2120      	movs	r1, #32
 800133a:	0025      	movs	r5, r4
 800133c:	1a89      	subs	r1, r1, r2
 800133e:	0007      	movs	r7, r0
 8001340:	4088      	lsls	r0, r1
 8001342:	408d      	lsls	r5, r1
 8001344:	40d7      	lsrs	r7, r2
 8001346:	1e41      	subs	r1, r0, #1
 8001348:	4188      	sbcs	r0, r1
 800134a:	40d4      	lsrs	r4, r2
 800134c:	433d      	orrs	r5, r7
 800134e:	4305      	orrs	r5, r0
 8001350:	44a2      	add	sl, r4
 8001352:	4465      	add	r5, ip
 8001354:	4565      	cmp	r5, ip
 8001356:	4192      	sbcs	r2, r2
 8001358:	4252      	negs	r2, r2
 800135a:	4452      	add	r2, sl
 800135c:	0014      	movs	r4, r2
 800135e:	464f      	mov	r7, r9
 8001360:	e774      	b.n	800124c <__aeabi_dadd+0x214>
 8001362:	0028      	movs	r0, r5
 8001364:	f001 fd90 	bl	8002e88 <__clzsi2>
 8001368:	0003      	movs	r3, r0
 800136a:	3318      	adds	r3, #24
 800136c:	2b1f      	cmp	r3, #31
 800136e:	dc00      	bgt.n	8001372 <__aeabi_dadd+0x33a>
 8001370:	e6c2      	b.n	80010f8 <__aeabi_dadd+0xc0>
 8001372:	002a      	movs	r2, r5
 8001374:	3808      	subs	r0, #8
 8001376:	4082      	lsls	r2, r0
 8001378:	429f      	cmp	r7, r3
 800137a:	dd00      	ble.n	800137e <__aeabi_dadd+0x346>
 800137c:	e0a9      	b.n	80014d2 <__aeabi_dadd+0x49a>
 800137e:	1bdb      	subs	r3, r3, r7
 8001380:	1c58      	adds	r0, r3, #1
 8001382:	281f      	cmp	r0, #31
 8001384:	dc00      	bgt.n	8001388 <__aeabi_dadd+0x350>
 8001386:	e1ac      	b.n	80016e2 <__aeabi_dadd+0x6aa>
 8001388:	0015      	movs	r5, r2
 800138a:	3b1f      	subs	r3, #31
 800138c:	40dd      	lsrs	r5, r3
 800138e:	2820      	cmp	r0, #32
 8001390:	d005      	beq.n	800139e <__aeabi_dadd+0x366>
 8001392:	2340      	movs	r3, #64	@ 0x40
 8001394:	1a1b      	subs	r3, r3, r0
 8001396:	409a      	lsls	r2, r3
 8001398:	1e53      	subs	r3, r2, #1
 800139a:	419a      	sbcs	r2, r3
 800139c:	4315      	orrs	r5, r2
 800139e:	2307      	movs	r3, #7
 80013a0:	2700      	movs	r7, #0
 80013a2:	402b      	ands	r3, r5
 80013a4:	e7b0      	b.n	8001308 <__aeabi_dadd+0x2d0>
 80013a6:	08ed      	lsrs	r5, r5, #3
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <__aeabi_dadd+0x388>)
 80013aa:	0762      	lsls	r2, r4, #29
 80013ac:	432a      	orrs	r2, r5
 80013ae:	08e4      	lsrs	r4, r4, #3
 80013b0:	429f      	cmp	r7, r3
 80013b2:	d00f      	beq.n	80013d4 <__aeabi_dadd+0x39c>
 80013b4:	0324      	lsls	r4, r4, #12
 80013b6:	0b25      	lsrs	r5, r4, #12
 80013b8:	057c      	lsls	r4, r7, #21
 80013ba:	0d64      	lsrs	r4, r4, #21
 80013bc:	e6d4      	b.n	8001168 <__aeabi_dadd+0x130>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff
 80013c4:	ff7fffff 	.word	0xff7fffff
 80013c8:	000007fe 	.word	0x000007fe
 80013cc:	08c0      	lsrs	r0, r0, #3
 80013ce:	0762      	lsls	r2, r4, #29
 80013d0:	4302      	orrs	r2, r0
 80013d2:	08e4      	lsrs	r4, r4, #3
 80013d4:	0013      	movs	r3, r2
 80013d6:	4323      	orrs	r3, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x3a4>
 80013da:	e186      	b.n	80016ea <__aeabi_dadd+0x6b2>
 80013dc:	2580      	movs	r5, #128	@ 0x80
 80013de:	032d      	lsls	r5, r5, #12
 80013e0:	4325      	orrs	r5, r4
 80013e2:	032d      	lsls	r5, r5, #12
 80013e4:	4cc3      	ldr	r4, [pc, #780]	@ (80016f4 <__aeabi_dadd+0x6bc>)
 80013e6:	0b2d      	lsrs	r5, r5, #12
 80013e8:	e6be      	b.n	8001168 <__aeabi_dadd+0x130>
 80013ea:	4660      	mov	r0, ip
 80013ec:	4654      	mov	r4, sl
 80013ee:	000e      	movs	r6, r1
 80013f0:	0017      	movs	r7, r2
 80013f2:	08c5      	lsrs	r5, r0, #3
 80013f4:	e7d8      	b.n	80013a8 <__aeabi_dadd+0x370>
 80013f6:	4cc0      	ldr	r4, [pc, #768]	@ (80016f8 <__aeabi_dadd+0x6c0>)
 80013f8:	1aff      	subs	r7, r7, r3
 80013fa:	4014      	ands	r4, r2
 80013fc:	e696      	b.n	800112c <__aeabi_dadd+0xf4>
 80013fe:	4abf      	ldr	r2, [pc, #764]	@ (80016fc <__aeabi_dadd+0x6c4>)
 8001400:	1c79      	adds	r1, r7, #1
 8001402:	4211      	tst	r1, r2
 8001404:	d16b      	bne.n	80014de <__aeabi_dadd+0x4a6>
 8001406:	0022      	movs	r2, r4
 8001408:	4302      	orrs	r2, r0
 800140a:	2f00      	cmp	r7, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_dadd+0x3d8>
 800140e:	e0db      	b.n	80015c8 <__aeabi_dadd+0x590>
 8001410:	2a00      	cmp	r2, #0
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x3de>
 8001414:	e12d      	b.n	8001672 <__aeabi_dadd+0x63a>
 8001416:	4662      	mov	r2, ip
 8001418:	4653      	mov	r3, sl
 800141a:	431a      	orrs	r2, r3
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x3e8>
 800141e:	e0b6      	b.n	800158e <__aeabi_dadd+0x556>
 8001420:	4663      	mov	r3, ip
 8001422:	18c5      	adds	r5, r0, r3
 8001424:	4285      	cmp	r5, r0
 8001426:	4180      	sbcs	r0, r0
 8001428:	4454      	add	r4, sl
 800142a:	4240      	negs	r0, r0
 800142c:	1824      	adds	r4, r4, r0
 800142e:	0223      	lsls	r3, r4, #8
 8001430:	d502      	bpl.n	8001438 <__aeabi_dadd+0x400>
 8001432:	000f      	movs	r7, r1
 8001434:	4bb0      	ldr	r3, [pc, #704]	@ (80016f8 <__aeabi_dadd+0x6c0>)
 8001436:	401c      	ands	r4, r3
 8001438:	003a      	movs	r2, r7
 800143a:	0028      	movs	r0, r5
 800143c:	e7d8      	b.n	80013f0 <__aeabi_dadd+0x3b8>
 800143e:	4662      	mov	r2, ip
 8001440:	1a85      	subs	r5, r0, r2
 8001442:	42a8      	cmp	r0, r5
 8001444:	4192      	sbcs	r2, r2
 8001446:	4653      	mov	r3, sl
 8001448:	4252      	negs	r2, r2
 800144a:	4691      	mov	r9, r2
 800144c:	1ae3      	subs	r3, r4, r3
 800144e:	001a      	movs	r2, r3
 8001450:	464b      	mov	r3, r9
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	4691      	mov	r9, r2
 8001458:	021a      	lsls	r2, r3, #8
 800145a:	d454      	bmi.n	8001506 <__aeabi_dadd+0x4ce>
 800145c:	464a      	mov	r2, r9
 800145e:	464c      	mov	r4, r9
 8001460:	432a      	orrs	r2, r5
 8001462:	d000      	beq.n	8001466 <__aeabi_dadd+0x42e>
 8001464:	e640      	b.n	80010e8 <__aeabi_dadd+0xb0>
 8001466:	2600      	movs	r6, #0
 8001468:	2400      	movs	r4, #0
 800146a:	2500      	movs	r5, #0
 800146c:	e67c      	b.n	8001168 <__aeabi_dadd+0x130>
 800146e:	4da1      	ldr	r5, [pc, #644]	@ (80016f4 <__aeabi_dadd+0x6bc>)
 8001470:	45a9      	cmp	r9, r5
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x43e>
 8001474:	e090      	b.n	8001598 <__aeabi_dadd+0x560>
 8001476:	2501      	movs	r5, #1
 8001478:	2a38      	cmp	r2, #56	@ 0x38
 800147a:	dd00      	ble.n	800147e <__aeabi_dadd+0x446>
 800147c:	e6ab      	b.n	80011d6 <__aeabi_dadd+0x19e>
 800147e:	2580      	movs	r5, #128	@ 0x80
 8001480:	042d      	lsls	r5, r5, #16
 8001482:	432c      	orrs	r4, r5
 8001484:	e695      	b.n	80011b2 <__aeabi_dadd+0x17a>
 8001486:	0011      	movs	r1, r2
 8001488:	4655      	mov	r5, sl
 800148a:	3920      	subs	r1, #32
 800148c:	40cd      	lsrs	r5, r1
 800148e:	46a9      	mov	r9, r5
 8001490:	2a20      	cmp	r2, #32
 8001492:	d006      	beq.n	80014a2 <__aeabi_dadd+0x46a>
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	4653      	mov	r3, sl
 8001498:	1a8a      	subs	r2, r1, r2
 800149a:	4093      	lsls	r3, r2
 800149c:	4662      	mov	r2, ip
 800149e:	431a      	orrs	r2, r3
 80014a0:	4694      	mov	ip, r2
 80014a2:	4665      	mov	r5, ip
 80014a4:	1e6b      	subs	r3, r5, #1
 80014a6:	419d      	sbcs	r5, r3
 80014a8:	464b      	mov	r3, r9
 80014aa:	431d      	orrs	r5, r3
 80014ac:	e612      	b.n	80010d4 <__aeabi_dadd+0x9c>
 80014ae:	0021      	movs	r1, r4
 80014b0:	4301      	orrs	r1, r0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x47e>
 80014b4:	e0c4      	b.n	8001640 <__aeabi_dadd+0x608>
 80014b6:	1e51      	subs	r1, r2, #1
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x486>
 80014bc:	e0fb      	b.n	80016b6 <__aeabi_dadd+0x67e>
 80014be:	4d8d      	ldr	r5, [pc, #564]	@ (80016f4 <__aeabi_dadd+0x6bc>)
 80014c0:	42aa      	cmp	r2, r5
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x48e>
 80014c4:	e0b5      	b.n	8001632 <__aeabi_dadd+0x5fa>
 80014c6:	2501      	movs	r5, #1
 80014c8:	2938      	cmp	r1, #56	@ 0x38
 80014ca:	dd00      	ble.n	80014ce <__aeabi_dadd+0x496>
 80014cc:	e741      	b.n	8001352 <__aeabi_dadd+0x31a>
 80014ce:	000a      	movs	r2, r1
 80014d0:	e72f      	b.n	8001332 <__aeabi_dadd+0x2fa>
 80014d2:	4c89      	ldr	r4, [pc, #548]	@ (80016f8 <__aeabi_dadd+0x6c0>)
 80014d4:	1aff      	subs	r7, r7, r3
 80014d6:	4014      	ands	r4, r2
 80014d8:	0762      	lsls	r2, r4, #29
 80014da:	08e4      	lsrs	r4, r4, #3
 80014dc:	e76a      	b.n	80013b4 <__aeabi_dadd+0x37c>
 80014de:	4a85      	ldr	r2, [pc, #532]	@ (80016f4 <__aeabi_dadd+0x6bc>)
 80014e0:	4291      	cmp	r1, r2
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x4ae>
 80014e4:	e0e3      	b.n	80016ae <__aeabi_dadd+0x676>
 80014e6:	4663      	mov	r3, ip
 80014e8:	18c2      	adds	r2, r0, r3
 80014ea:	4282      	cmp	r2, r0
 80014ec:	4180      	sbcs	r0, r0
 80014ee:	0023      	movs	r3, r4
 80014f0:	4240      	negs	r0, r0
 80014f2:	4453      	add	r3, sl
 80014f4:	181b      	adds	r3, r3, r0
 80014f6:	07dd      	lsls	r5, r3, #31
 80014f8:	085c      	lsrs	r4, r3, #1
 80014fa:	2307      	movs	r3, #7
 80014fc:	0852      	lsrs	r2, r2, #1
 80014fe:	4315      	orrs	r5, r2
 8001500:	000f      	movs	r7, r1
 8001502:	402b      	ands	r3, r5
 8001504:	e700      	b.n	8001308 <__aeabi_dadd+0x2d0>
 8001506:	4663      	mov	r3, ip
 8001508:	1a1d      	subs	r5, r3, r0
 800150a:	45ac      	cmp	ip, r5
 800150c:	4192      	sbcs	r2, r2
 800150e:	4653      	mov	r3, sl
 8001510:	4252      	negs	r2, r2
 8001512:	1b1c      	subs	r4, r3, r4
 8001514:	000e      	movs	r6, r1
 8001516:	4688      	mov	r8, r1
 8001518:	1aa4      	subs	r4, r4, r2
 800151a:	e5e5      	b.n	80010e8 <__aeabi_dadd+0xb0>
 800151c:	2d00      	cmp	r5, #0
 800151e:	d000      	beq.n	8001522 <__aeabi_dadd+0x4ea>
 8001520:	e091      	b.n	8001646 <__aeabi_dadd+0x60e>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d138      	bne.n	8001598 <__aeabi_dadd+0x560>
 8001526:	2480      	movs	r4, #128	@ 0x80
 8001528:	2600      	movs	r6, #0
 800152a:	0324      	lsls	r4, r4, #12
 800152c:	e756      	b.n	80013dc <__aeabi_dadd+0x3a4>
 800152e:	4663      	mov	r3, ip
 8001530:	18c5      	adds	r5, r0, r3
 8001532:	4285      	cmp	r5, r0
 8001534:	4180      	sbcs	r0, r0
 8001536:	4454      	add	r4, sl
 8001538:	4240      	negs	r0, r0
 800153a:	1824      	adds	r4, r4, r0
 800153c:	2701      	movs	r7, #1
 800153e:	0223      	lsls	r3, r4, #8
 8001540:	d400      	bmi.n	8001544 <__aeabi_dadd+0x50c>
 8001542:	e6df      	b.n	8001304 <__aeabi_dadd+0x2cc>
 8001544:	2702      	movs	r7, #2
 8001546:	e687      	b.n	8001258 <__aeabi_dadd+0x220>
 8001548:	4663      	mov	r3, ip
 800154a:	1ac5      	subs	r5, r0, r3
 800154c:	42a8      	cmp	r0, r5
 800154e:	4180      	sbcs	r0, r0
 8001550:	4653      	mov	r3, sl
 8001552:	4240      	negs	r0, r0
 8001554:	1ae4      	subs	r4, r4, r3
 8001556:	2701      	movs	r7, #1
 8001558:	1a24      	subs	r4, r4, r0
 800155a:	e5c0      	b.n	80010de <__aeabi_dadd+0xa6>
 800155c:	0762      	lsls	r2, r4, #29
 800155e:	08c0      	lsrs	r0, r0, #3
 8001560:	4302      	orrs	r2, r0
 8001562:	08e4      	lsrs	r4, r4, #3
 8001564:	e736      	b.n	80013d4 <__aeabi_dadd+0x39c>
 8001566:	0011      	movs	r1, r2
 8001568:	4653      	mov	r3, sl
 800156a:	3920      	subs	r1, #32
 800156c:	40cb      	lsrs	r3, r1
 800156e:	4699      	mov	r9, r3
 8001570:	2a20      	cmp	r2, #32
 8001572:	d006      	beq.n	8001582 <__aeabi_dadd+0x54a>
 8001574:	2140      	movs	r1, #64	@ 0x40
 8001576:	4653      	mov	r3, sl
 8001578:	1a8a      	subs	r2, r1, r2
 800157a:	4093      	lsls	r3, r2
 800157c:	4662      	mov	r2, ip
 800157e:	431a      	orrs	r2, r3
 8001580:	4694      	mov	ip, r2
 8001582:	4665      	mov	r5, ip
 8001584:	1e6b      	subs	r3, r5, #1
 8001586:	419d      	sbcs	r5, r3
 8001588:	464b      	mov	r3, r9
 800158a:	431d      	orrs	r5, r3
 800158c:	e659      	b.n	8001242 <__aeabi_dadd+0x20a>
 800158e:	0762      	lsls	r2, r4, #29
 8001590:	08c0      	lsrs	r0, r0, #3
 8001592:	4302      	orrs	r2, r0
 8001594:	08e4      	lsrs	r4, r4, #3
 8001596:	e70d      	b.n	80013b4 <__aeabi_dadd+0x37c>
 8001598:	4653      	mov	r3, sl
 800159a:	075a      	lsls	r2, r3, #29
 800159c:	4663      	mov	r3, ip
 800159e:	08d8      	lsrs	r0, r3, #3
 80015a0:	4653      	mov	r3, sl
 80015a2:	000e      	movs	r6, r1
 80015a4:	4302      	orrs	r2, r0
 80015a6:	08dc      	lsrs	r4, r3, #3
 80015a8:	e714      	b.n	80013d4 <__aeabi_dadd+0x39c>
 80015aa:	0015      	movs	r5, r2
 80015ac:	0026      	movs	r6, r4
 80015ae:	3d20      	subs	r5, #32
 80015b0:	40ee      	lsrs	r6, r5
 80015b2:	2a20      	cmp	r2, #32
 80015b4:	d003      	beq.n	80015be <__aeabi_dadd+0x586>
 80015b6:	2540      	movs	r5, #64	@ 0x40
 80015b8:	1aaa      	subs	r2, r5, r2
 80015ba:	4094      	lsls	r4, r2
 80015bc:	4320      	orrs	r0, r4
 80015be:	1e42      	subs	r2, r0, #1
 80015c0:	4190      	sbcs	r0, r2
 80015c2:	0005      	movs	r5, r0
 80015c4:	4335      	orrs	r5, r6
 80015c6:	e606      	b.n	80011d6 <__aeabi_dadd+0x19e>
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d07c      	beq.n	80016c6 <__aeabi_dadd+0x68e>
 80015cc:	4662      	mov	r2, ip
 80015ce:	4653      	mov	r3, sl
 80015d0:	08c0      	lsrs	r0, r0, #3
 80015d2:	431a      	orrs	r2, r3
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dadd+0x5a0>
 80015d6:	e6fa      	b.n	80013ce <__aeabi_dadd+0x396>
 80015d8:	0762      	lsls	r2, r4, #29
 80015da:	4310      	orrs	r0, r2
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	08e4      	lsrs	r4, r4, #3
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	4214      	tst	r4, r2
 80015e4:	d008      	beq.n	80015f8 <__aeabi_dadd+0x5c0>
 80015e6:	08d9      	lsrs	r1, r3, #3
 80015e8:	4211      	tst	r1, r2
 80015ea:	d105      	bne.n	80015f8 <__aeabi_dadd+0x5c0>
 80015ec:	4663      	mov	r3, ip
 80015ee:	08d8      	lsrs	r0, r3, #3
 80015f0:	4653      	mov	r3, sl
 80015f2:	000c      	movs	r4, r1
 80015f4:	075b      	lsls	r3, r3, #29
 80015f6:	4318      	orrs	r0, r3
 80015f8:	0f42      	lsrs	r2, r0, #29
 80015fa:	00c0      	lsls	r0, r0, #3
 80015fc:	08c0      	lsrs	r0, r0, #3
 80015fe:	0752      	lsls	r2, r2, #29
 8001600:	4302      	orrs	r2, r0
 8001602:	e6e7      	b.n	80013d4 <__aeabi_dadd+0x39c>
 8001604:	2a00      	cmp	r2, #0
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x5d2>
 8001608:	e72d      	b.n	8001466 <__aeabi_dadd+0x42e>
 800160a:	4663      	mov	r3, ip
 800160c:	08d8      	lsrs	r0, r3, #3
 800160e:	4653      	mov	r3, sl
 8001610:	075a      	lsls	r2, r3, #29
 8001612:	000e      	movs	r6, r1
 8001614:	4302      	orrs	r2, r0
 8001616:	08dc      	lsrs	r4, r3, #3
 8001618:	e6cc      	b.n	80013b4 <__aeabi_dadd+0x37c>
 800161a:	4663      	mov	r3, ip
 800161c:	1a1d      	subs	r5, r3, r0
 800161e:	45ac      	cmp	ip, r5
 8001620:	4192      	sbcs	r2, r2
 8001622:	4653      	mov	r3, sl
 8001624:	4252      	negs	r2, r2
 8001626:	1b1c      	subs	r4, r3, r4
 8001628:	000e      	movs	r6, r1
 800162a:	4688      	mov	r8, r1
 800162c:	1aa4      	subs	r4, r4, r2
 800162e:	3701      	adds	r7, #1
 8001630:	e555      	b.n	80010de <__aeabi_dadd+0xa6>
 8001632:	4663      	mov	r3, ip
 8001634:	08d9      	lsrs	r1, r3, #3
 8001636:	4653      	mov	r3, sl
 8001638:	075a      	lsls	r2, r3, #29
 800163a:	430a      	orrs	r2, r1
 800163c:	08dc      	lsrs	r4, r3, #3
 800163e:	e6c9      	b.n	80013d4 <__aeabi_dadd+0x39c>
 8001640:	4660      	mov	r0, ip
 8001642:	4654      	mov	r4, sl
 8001644:	e6d4      	b.n	80013f0 <__aeabi_dadd+0x3b8>
 8001646:	08c0      	lsrs	r0, r0, #3
 8001648:	2a00      	cmp	r2, #0
 800164a:	d100      	bne.n	800164e <__aeabi_dadd+0x616>
 800164c:	e6bf      	b.n	80013ce <__aeabi_dadd+0x396>
 800164e:	0762      	lsls	r2, r4, #29
 8001650:	4310      	orrs	r0, r2
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	08e4      	lsrs	r4, r4, #3
 8001656:	0312      	lsls	r2, r2, #12
 8001658:	4214      	tst	r4, r2
 800165a:	d0cd      	beq.n	80015f8 <__aeabi_dadd+0x5c0>
 800165c:	08dd      	lsrs	r5, r3, #3
 800165e:	4215      	tst	r5, r2
 8001660:	d1ca      	bne.n	80015f8 <__aeabi_dadd+0x5c0>
 8001662:	4663      	mov	r3, ip
 8001664:	08d8      	lsrs	r0, r3, #3
 8001666:	4653      	mov	r3, sl
 8001668:	075b      	lsls	r3, r3, #29
 800166a:	000e      	movs	r6, r1
 800166c:	002c      	movs	r4, r5
 800166e:	4318      	orrs	r0, r3
 8001670:	e7c2      	b.n	80015f8 <__aeabi_dadd+0x5c0>
 8001672:	4663      	mov	r3, ip
 8001674:	08d9      	lsrs	r1, r3, #3
 8001676:	4653      	mov	r3, sl
 8001678:	075a      	lsls	r2, r3, #29
 800167a:	430a      	orrs	r2, r1
 800167c:	08dc      	lsrs	r4, r3, #3
 800167e:	e699      	b.n	80013b4 <__aeabi_dadd+0x37c>
 8001680:	4663      	mov	r3, ip
 8001682:	08d8      	lsrs	r0, r3, #3
 8001684:	4653      	mov	r3, sl
 8001686:	075a      	lsls	r2, r3, #29
 8001688:	000e      	movs	r6, r1
 800168a:	4302      	orrs	r2, r0
 800168c:	08dc      	lsrs	r4, r3, #3
 800168e:	e6a1      	b.n	80013d4 <__aeabi_dadd+0x39c>
 8001690:	0011      	movs	r1, r2
 8001692:	0027      	movs	r7, r4
 8001694:	3920      	subs	r1, #32
 8001696:	40cf      	lsrs	r7, r1
 8001698:	2a20      	cmp	r2, #32
 800169a:	d003      	beq.n	80016a4 <__aeabi_dadd+0x66c>
 800169c:	2140      	movs	r1, #64	@ 0x40
 800169e:	1a8a      	subs	r2, r1, r2
 80016a0:	4094      	lsls	r4, r2
 80016a2:	4320      	orrs	r0, r4
 80016a4:	1e42      	subs	r2, r0, #1
 80016a6:	4190      	sbcs	r0, r2
 80016a8:	0005      	movs	r5, r0
 80016aa:	433d      	orrs	r5, r7
 80016ac:	e651      	b.n	8001352 <__aeabi_dadd+0x31a>
 80016ae:	000c      	movs	r4, r1
 80016b0:	2500      	movs	r5, #0
 80016b2:	2200      	movs	r2, #0
 80016b4:	e558      	b.n	8001168 <__aeabi_dadd+0x130>
 80016b6:	4460      	add	r0, ip
 80016b8:	4560      	cmp	r0, ip
 80016ba:	4192      	sbcs	r2, r2
 80016bc:	4454      	add	r4, sl
 80016be:	4252      	negs	r2, r2
 80016c0:	0005      	movs	r5, r0
 80016c2:	18a4      	adds	r4, r4, r2
 80016c4:	e73a      	b.n	800153c <__aeabi_dadd+0x504>
 80016c6:	4653      	mov	r3, sl
 80016c8:	075a      	lsls	r2, r3, #29
 80016ca:	4663      	mov	r3, ip
 80016cc:	08d9      	lsrs	r1, r3, #3
 80016ce:	4653      	mov	r3, sl
 80016d0:	430a      	orrs	r2, r1
 80016d2:	08dc      	lsrs	r4, r3, #3
 80016d4:	e67e      	b.n	80013d4 <__aeabi_dadd+0x39c>
 80016d6:	001a      	movs	r2, r3
 80016d8:	001c      	movs	r4, r3
 80016da:	432a      	orrs	r2, r5
 80016dc:	d000      	beq.n	80016e0 <__aeabi_dadd+0x6a8>
 80016de:	e6ab      	b.n	8001438 <__aeabi_dadd+0x400>
 80016e0:	e6c1      	b.n	8001466 <__aeabi_dadd+0x42e>
 80016e2:	2120      	movs	r1, #32
 80016e4:	2500      	movs	r5, #0
 80016e6:	1a09      	subs	r1, r1, r0
 80016e8:	e519      	b.n	800111e <__aeabi_dadd+0xe6>
 80016ea:	2200      	movs	r2, #0
 80016ec:	2500      	movs	r5, #0
 80016ee:	4c01      	ldr	r4, [pc, #4]	@ (80016f4 <__aeabi_dadd+0x6bc>)
 80016f0:	e53a      	b.n	8001168 <__aeabi_dadd+0x130>
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	ff7fffff 	.word	0xff7fffff
 80016fc:	000007fe 	.word	0x000007fe

08001700 <__aeabi_ddiv>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	46de      	mov	lr, fp
 8001704:	4645      	mov	r5, r8
 8001706:	4657      	mov	r7, sl
 8001708:	464e      	mov	r6, r9
 800170a:	b5e0      	push	{r5, r6, r7, lr}
 800170c:	b087      	sub	sp, #28
 800170e:	9200      	str	r2, [sp, #0]
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	030b      	lsls	r3, r1, #12
 8001714:	0b1b      	lsrs	r3, r3, #12
 8001716:	469b      	mov	fp, r3
 8001718:	0fca      	lsrs	r2, r1, #31
 800171a:	004b      	lsls	r3, r1, #1
 800171c:	0004      	movs	r4, r0
 800171e:	4680      	mov	r8, r0
 8001720:	0d5b      	lsrs	r3, r3, #21
 8001722:	9202      	str	r2, [sp, #8]
 8001724:	d100      	bne.n	8001728 <__aeabi_ddiv+0x28>
 8001726:	e16a      	b.n	80019fe <__aeabi_ddiv+0x2fe>
 8001728:	4ad4      	ldr	r2, [pc, #848]	@ (8001a7c <__aeabi_ddiv+0x37c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x30>
 800172e:	e18c      	b.n	8001a4a <__aeabi_ddiv+0x34a>
 8001730:	4659      	mov	r1, fp
 8001732:	0f42      	lsrs	r2, r0, #29
 8001734:	00c9      	lsls	r1, r1, #3
 8001736:	430a      	orrs	r2, r1
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	0409      	lsls	r1, r1, #16
 800173c:	4311      	orrs	r1, r2
 800173e:	00c2      	lsls	r2, r0, #3
 8001740:	4690      	mov	r8, r2
 8001742:	4acf      	ldr	r2, [pc, #828]	@ (8001a80 <__aeabi_ddiv+0x380>)
 8001744:	4689      	mov	r9, r1
 8001746:	4692      	mov	sl, r2
 8001748:	449a      	add	sl, r3
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	9e00      	ldr	r6, [sp, #0]
 8001752:	9f01      	ldr	r7, [sp, #4]
 8001754:	033b      	lsls	r3, r7, #12
 8001756:	0b1b      	lsrs	r3, r3, #12
 8001758:	469b      	mov	fp, r3
 800175a:	007b      	lsls	r3, r7, #1
 800175c:	0030      	movs	r0, r6
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	0ffd      	lsrs	r5, r7, #31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <__aeabi_ddiv+0x68>
 8001766:	e128      	b.n	80019ba <__aeabi_ddiv+0x2ba>
 8001768:	4ac4      	ldr	r2, [pc, #784]	@ (8001a7c <__aeabi_ddiv+0x37c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d100      	bne.n	8001770 <__aeabi_ddiv+0x70>
 800176e:	e177      	b.n	8001a60 <__aeabi_ddiv+0x360>
 8001770:	4659      	mov	r1, fp
 8001772:	0f72      	lsrs	r2, r6, #29
 8001774:	00c9      	lsls	r1, r1, #3
 8001776:	430a      	orrs	r2, r1
 8001778:	2180      	movs	r1, #128	@ 0x80
 800177a:	0409      	lsls	r1, r1, #16
 800177c:	4311      	orrs	r1, r2
 800177e:	468b      	mov	fp, r1
 8001780:	49bf      	ldr	r1, [pc, #764]	@ (8001a80 <__aeabi_ddiv+0x380>)
 8001782:	00f2      	lsls	r2, r6, #3
 8001784:	468c      	mov	ip, r1
 8001786:	4651      	mov	r1, sl
 8001788:	4463      	add	r3, ip
 800178a:	1acb      	subs	r3, r1, r3
 800178c:	469a      	mov	sl, r3
 800178e:	2300      	movs	r3, #0
 8001790:	9e02      	ldr	r6, [sp, #8]
 8001792:	406e      	eors	r6, r5
 8001794:	2c0f      	cmp	r4, #15
 8001796:	d827      	bhi.n	80017e8 <__aeabi_ddiv+0xe8>
 8001798:	49ba      	ldr	r1, [pc, #744]	@ (8001a84 <__aeabi_ddiv+0x384>)
 800179a:	00a4      	lsls	r4, r4, #2
 800179c:	5909      	ldr	r1, [r1, r4]
 800179e:	468f      	mov	pc, r1
 80017a0:	46cb      	mov	fp, r9
 80017a2:	4642      	mov	r2, r8
 80017a4:	9e02      	ldr	r6, [sp, #8]
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d016      	beq.n	80017da <__aeabi_ddiv+0xda>
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0xb2>
 80017b0:	e2a6      	b.n	8001d00 <__aeabi_ddiv+0x600>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d000      	beq.n	80017b8 <__aeabi_ddiv+0xb8>
 80017b6:	e0df      	b.n	8001978 <__aeabi_ddiv+0x278>
 80017b8:	2200      	movs	r2, #0
 80017ba:	2300      	movs	r3, #0
 80017bc:	2400      	movs	r4, #0
 80017be:	4690      	mov	r8, r2
 80017c0:	051b      	lsls	r3, r3, #20
 80017c2:	4323      	orrs	r3, r4
 80017c4:	07f6      	lsls	r6, r6, #31
 80017c6:	4333      	orrs	r3, r6
 80017c8:	4640      	mov	r0, r8
 80017ca:	0019      	movs	r1, r3
 80017cc:	b007      	add	sp, #28
 80017ce:	bcf0      	pop	{r4, r5, r6, r7}
 80017d0:	46bb      	mov	fp, r7
 80017d2:	46b2      	mov	sl, r6
 80017d4:	46a9      	mov	r9, r5
 80017d6:	46a0      	mov	r8, r4
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017da:	2200      	movs	r2, #0
 80017dc:	2400      	movs	r4, #0
 80017de:	4690      	mov	r8, r2
 80017e0:	4ba6      	ldr	r3, [pc, #664]	@ (8001a7c <__aeabi_ddiv+0x37c>)
 80017e2:	e7ed      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 80017e4:	002e      	movs	r6, r5
 80017e6:	e7df      	b.n	80017a8 <__aeabi_ddiv+0xa8>
 80017e8:	45cb      	cmp	fp, r9
 80017ea:	d200      	bcs.n	80017ee <__aeabi_ddiv+0xee>
 80017ec:	e1d4      	b.n	8001b98 <__aeabi_ddiv+0x498>
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0xf2>
 80017f0:	e1cf      	b.n	8001b92 <__aeabi_ddiv+0x492>
 80017f2:	2301      	movs	r3, #1
 80017f4:	425b      	negs	r3, r3
 80017f6:	469c      	mov	ip, r3
 80017f8:	4644      	mov	r4, r8
 80017fa:	4648      	mov	r0, r9
 80017fc:	2700      	movs	r7, #0
 80017fe:	44e2      	add	sl, ip
 8001800:	465b      	mov	r3, fp
 8001802:	0e15      	lsrs	r5, r2, #24
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	431d      	orrs	r5, r3
 8001808:	0c19      	lsrs	r1, r3, #16
 800180a:	042b      	lsls	r3, r5, #16
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	9500      	str	r5, [sp, #0]
 8001810:	0c1d      	lsrs	r5, r3, #16
 8001812:	4691      	mov	r9, r2
 8001814:	9102      	str	r1, [sp, #8]
 8001816:	9503      	str	r5, [sp, #12]
 8001818:	f7fe fcfc 	bl	8000214 <__aeabi_uidivmod>
 800181c:	0002      	movs	r2, r0
 800181e:	436a      	muls	r2, r5
 8001820:	040b      	lsls	r3, r1, #16
 8001822:	0c21      	lsrs	r1, r4, #16
 8001824:	4680      	mov	r8, r0
 8001826:	4319      	orrs	r1, r3
 8001828:	428a      	cmp	r2, r1
 800182a:	d909      	bls.n	8001840 <__aeabi_ddiv+0x140>
 800182c:	9d00      	ldr	r5, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	46ac      	mov	ip, r5
 8001832:	425b      	negs	r3, r3
 8001834:	4461      	add	r1, ip
 8001836:	469c      	mov	ip, r3
 8001838:	44e0      	add	r8, ip
 800183a:	428d      	cmp	r5, r1
 800183c:	d800      	bhi.n	8001840 <__aeabi_ddiv+0x140>
 800183e:	e1fb      	b.n	8001c38 <__aeabi_ddiv+0x538>
 8001840:	1a88      	subs	r0, r1, r2
 8001842:	9902      	ldr	r1, [sp, #8]
 8001844:	f7fe fce6 	bl	8000214 <__aeabi_uidivmod>
 8001848:	9a03      	ldr	r2, [sp, #12]
 800184a:	0424      	lsls	r4, r4, #16
 800184c:	4342      	muls	r2, r0
 800184e:	0409      	lsls	r1, r1, #16
 8001850:	0c24      	lsrs	r4, r4, #16
 8001852:	0003      	movs	r3, r0
 8001854:	430c      	orrs	r4, r1
 8001856:	42a2      	cmp	r2, r4
 8001858:	d906      	bls.n	8001868 <__aeabi_ddiv+0x168>
 800185a:	9900      	ldr	r1, [sp, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	468c      	mov	ip, r1
 8001860:	4464      	add	r4, ip
 8001862:	42a1      	cmp	r1, r4
 8001864:	d800      	bhi.n	8001868 <__aeabi_ddiv+0x168>
 8001866:	e1e1      	b.n	8001c2c <__aeabi_ddiv+0x52c>
 8001868:	1aa0      	subs	r0, r4, r2
 800186a:	4642      	mov	r2, r8
 800186c:	0412      	lsls	r2, r2, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	4693      	mov	fp, r2
 8001872:	464b      	mov	r3, r9
 8001874:	4659      	mov	r1, fp
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	001d      	movs	r5, r3
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	040b      	lsls	r3, r1, #16
 800187e:	4649      	mov	r1, r9
 8001880:	0409      	lsls	r1, r1, #16
 8001882:	0c09      	lsrs	r1, r1, #16
 8001884:	000c      	movs	r4, r1
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	435c      	muls	r4, r3
 800188a:	0c12      	lsrs	r2, r2, #16
 800188c:	436b      	muls	r3, r5
 800188e:	4688      	mov	r8, r1
 8001890:	4351      	muls	r1, r2
 8001892:	436a      	muls	r2, r5
 8001894:	0c25      	lsrs	r5, r4, #16
 8001896:	46ac      	mov	ip, r5
 8001898:	185b      	adds	r3, r3, r1
 800189a:	4463      	add	r3, ip
 800189c:	4299      	cmp	r1, r3
 800189e:	d903      	bls.n	80018a8 <__aeabi_ddiv+0x1a8>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	0249      	lsls	r1, r1, #9
 80018a4:	468c      	mov	ip, r1
 80018a6:	4462      	add	r2, ip
 80018a8:	0c19      	lsrs	r1, r3, #16
 80018aa:	0424      	lsls	r4, r4, #16
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	0c24      	lsrs	r4, r4, #16
 80018b0:	188a      	adds	r2, r1, r2
 80018b2:	191c      	adds	r4, r3, r4
 80018b4:	4290      	cmp	r0, r2
 80018b6:	d302      	bcc.n	80018be <__aeabi_ddiv+0x1be>
 80018b8:	d116      	bne.n	80018e8 <__aeabi_ddiv+0x1e8>
 80018ba:	42a7      	cmp	r7, r4
 80018bc:	d214      	bcs.n	80018e8 <__aeabi_ddiv+0x1e8>
 80018be:	465b      	mov	r3, fp
 80018c0:	9d00      	ldr	r5, [sp, #0]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	444f      	add	r7, r9
 80018c6:	9305      	str	r3, [sp, #20]
 80018c8:	454f      	cmp	r7, r9
 80018ca:	419b      	sbcs	r3, r3
 80018cc:	46ac      	mov	ip, r5
 80018ce:	425b      	negs	r3, r3
 80018d0:	4463      	add	r3, ip
 80018d2:	18c0      	adds	r0, r0, r3
 80018d4:	4285      	cmp	r5, r0
 80018d6:	d300      	bcc.n	80018da <__aeabi_ddiv+0x1da>
 80018d8:	e1a1      	b.n	8001c1e <__aeabi_ddiv+0x51e>
 80018da:	4282      	cmp	r2, r0
 80018dc:	d900      	bls.n	80018e0 <__aeabi_ddiv+0x1e0>
 80018de:	e1f6      	b.n	8001cce <__aeabi_ddiv+0x5ce>
 80018e0:	d100      	bne.n	80018e4 <__aeabi_ddiv+0x1e4>
 80018e2:	e1f1      	b.n	8001cc8 <__aeabi_ddiv+0x5c8>
 80018e4:	9b05      	ldr	r3, [sp, #20]
 80018e6:	469b      	mov	fp, r3
 80018e8:	1b3c      	subs	r4, r7, r4
 80018ea:	42a7      	cmp	r7, r4
 80018ec:	41bf      	sbcs	r7, r7
 80018ee:	9d00      	ldr	r5, [sp, #0]
 80018f0:	1a80      	subs	r0, r0, r2
 80018f2:	427f      	negs	r7, r7
 80018f4:	1bc0      	subs	r0, r0, r7
 80018f6:	4285      	cmp	r5, r0
 80018f8:	d100      	bne.n	80018fc <__aeabi_ddiv+0x1fc>
 80018fa:	e1d0      	b.n	8001c9e <__aeabi_ddiv+0x59e>
 80018fc:	9902      	ldr	r1, [sp, #8]
 80018fe:	f7fe fc89 	bl	8000214 <__aeabi_uidivmod>
 8001902:	9a03      	ldr	r2, [sp, #12]
 8001904:	040b      	lsls	r3, r1, #16
 8001906:	4342      	muls	r2, r0
 8001908:	0c21      	lsrs	r1, r4, #16
 800190a:	0007      	movs	r7, r0
 800190c:	4319      	orrs	r1, r3
 800190e:	428a      	cmp	r2, r1
 8001910:	d900      	bls.n	8001914 <__aeabi_ddiv+0x214>
 8001912:	e178      	b.n	8001c06 <__aeabi_ddiv+0x506>
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9902      	ldr	r1, [sp, #8]
 8001918:	f7fe fc7c 	bl	8000214 <__aeabi_uidivmod>
 800191c:	9a03      	ldr	r2, [sp, #12]
 800191e:	0424      	lsls	r4, r4, #16
 8001920:	4342      	muls	r2, r0
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	0c24      	lsrs	r4, r4, #16
 8001926:	0003      	movs	r3, r0
 8001928:	430c      	orrs	r4, r1
 800192a:	42a2      	cmp	r2, r4
 800192c:	d900      	bls.n	8001930 <__aeabi_ddiv+0x230>
 800192e:	e15d      	b.n	8001bec <__aeabi_ddiv+0x4ec>
 8001930:	4641      	mov	r1, r8
 8001932:	1aa4      	subs	r4, r4, r2
 8001934:	043a      	lsls	r2, r7, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	9d04      	ldr	r5, [sp, #16]
 800193a:	0413      	lsls	r3, r2, #16
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	4359      	muls	r1, r3
 8001940:	4647      	mov	r7, r8
 8001942:	436b      	muls	r3, r5
 8001944:	469c      	mov	ip, r3
 8001946:	0c10      	lsrs	r0, r2, #16
 8001948:	4347      	muls	r7, r0
 800194a:	0c0b      	lsrs	r3, r1, #16
 800194c:	44bc      	add	ip, r7
 800194e:	4463      	add	r3, ip
 8001950:	4368      	muls	r0, r5
 8001952:	429f      	cmp	r7, r3
 8001954:	d903      	bls.n	800195e <__aeabi_ddiv+0x25e>
 8001956:	2580      	movs	r5, #128	@ 0x80
 8001958:	026d      	lsls	r5, r5, #9
 800195a:	46ac      	mov	ip, r5
 800195c:	4460      	add	r0, ip
 800195e:	0c1f      	lsrs	r7, r3, #16
 8001960:	0409      	lsls	r1, r1, #16
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	0c09      	lsrs	r1, r1, #16
 8001966:	183f      	adds	r7, r7, r0
 8001968:	185b      	adds	r3, r3, r1
 800196a:	42bc      	cmp	r4, r7
 800196c:	d200      	bcs.n	8001970 <__aeabi_ddiv+0x270>
 800196e:	e102      	b.n	8001b76 <__aeabi_ddiv+0x476>
 8001970:	d100      	bne.n	8001974 <__aeabi_ddiv+0x274>
 8001972:	e0fd      	b.n	8001b70 <__aeabi_ddiv+0x470>
 8001974:	2301      	movs	r3, #1
 8001976:	431a      	orrs	r2, r3
 8001978:	4b43      	ldr	r3, [pc, #268]	@ (8001a88 <__aeabi_ddiv+0x388>)
 800197a:	4453      	add	r3, sl
 800197c:	2b00      	cmp	r3, #0
 800197e:	dc00      	bgt.n	8001982 <__aeabi_ddiv+0x282>
 8001980:	e0ae      	b.n	8001ae0 <__aeabi_ddiv+0x3e0>
 8001982:	0751      	lsls	r1, r2, #29
 8001984:	d000      	beq.n	8001988 <__aeabi_ddiv+0x288>
 8001986:	e198      	b.n	8001cba <__aeabi_ddiv+0x5ba>
 8001988:	4659      	mov	r1, fp
 800198a:	01c9      	lsls	r1, r1, #7
 800198c:	d506      	bpl.n	800199c <__aeabi_ddiv+0x29c>
 800198e:	4659      	mov	r1, fp
 8001990:	4b3e      	ldr	r3, [pc, #248]	@ (8001a8c <__aeabi_ddiv+0x38c>)
 8001992:	4019      	ands	r1, r3
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	468b      	mov	fp, r1
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4453      	add	r3, sl
 800199c:	493c      	ldr	r1, [pc, #240]	@ (8001a90 <__aeabi_ddiv+0x390>)
 800199e:	428b      	cmp	r3, r1
 80019a0:	dd00      	ble.n	80019a4 <__aeabi_ddiv+0x2a4>
 80019a2:	e71a      	b.n	80017da <__aeabi_ddiv+0xda>
 80019a4:	4659      	mov	r1, fp
 80019a6:	08d2      	lsrs	r2, r2, #3
 80019a8:	0749      	lsls	r1, r1, #29
 80019aa:	4311      	orrs	r1, r2
 80019ac:	465a      	mov	r2, fp
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	0254      	lsls	r4, r2, #9
 80019b2:	4688      	mov	r8, r1
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	0d5b      	lsrs	r3, r3, #21
 80019b8:	e702      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 80019ba:	465a      	mov	r2, fp
 80019bc:	9b00      	ldr	r3, [sp, #0]
 80019be:	431a      	orrs	r2, r3
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x2c4>
 80019c2:	e07e      	b.n	8001ac2 <__aeabi_ddiv+0x3c2>
 80019c4:	465b      	mov	r3, fp
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x2cc>
 80019ca:	e100      	b.n	8001bce <__aeabi_ddiv+0x4ce>
 80019cc:	4658      	mov	r0, fp
 80019ce:	f001 fa5b 	bl	8002e88 <__clzsi2>
 80019d2:	0002      	movs	r2, r0
 80019d4:	0003      	movs	r3, r0
 80019d6:	3a0b      	subs	r2, #11
 80019d8:	271d      	movs	r7, #29
 80019da:	9e00      	ldr	r6, [sp, #0]
 80019dc:	1aba      	subs	r2, r7, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4658      	mov	r0, fp
 80019e2:	40d6      	lsrs	r6, r2
 80019e4:	3908      	subs	r1, #8
 80019e6:	4088      	lsls	r0, r1
 80019e8:	0032      	movs	r2, r6
 80019ea:	4302      	orrs	r2, r0
 80019ec:	4693      	mov	fp, r2
 80019ee:	9a00      	ldr	r2, [sp, #0]
 80019f0:	408a      	lsls	r2, r1
 80019f2:	4928      	ldr	r1, [pc, #160]	@ (8001a94 <__aeabi_ddiv+0x394>)
 80019f4:	4453      	add	r3, sl
 80019f6:	468a      	mov	sl, r1
 80019f8:	449a      	add	sl, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	e6c8      	b.n	8001790 <__aeabi_ddiv+0x90>
 80019fe:	465b      	mov	r3, fp
 8001a00:	4303      	orrs	r3, r0
 8001a02:	4699      	mov	r9, r3
 8001a04:	d056      	beq.n	8001ab4 <__aeabi_ddiv+0x3b4>
 8001a06:	465b      	mov	r3, fp
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0x30e>
 8001a0c:	e0cd      	b.n	8001baa <__aeabi_ddiv+0x4aa>
 8001a0e:	4658      	mov	r0, fp
 8001a10:	f001 fa3a 	bl	8002e88 <__clzsi2>
 8001a14:	230b      	movs	r3, #11
 8001a16:	425b      	negs	r3, r3
 8001a18:	469c      	mov	ip, r3
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	4484      	add	ip, r0
 8001a1e:	4666      	mov	r6, ip
 8001a20:	231d      	movs	r3, #29
 8001a22:	1b9b      	subs	r3, r3, r6
 8001a24:	0026      	movs	r6, r4
 8001a26:	0011      	movs	r1, r2
 8001a28:	4658      	mov	r0, fp
 8001a2a:	40de      	lsrs	r6, r3
 8001a2c:	3908      	subs	r1, #8
 8001a2e:	4088      	lsls	r0, r1
 8001a30:	0033      	movs	r3, r6
 8001a32:	4303      	orrs	r3, r0
 8001a34:	4699      	mov	r9, r3
 8001a36:	0023      	movs	r3, r4
 8001a38:	408b      	lsls	r3, r1
 8001a3a:	4698      	mov	r8, r3
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <__aeabi_ddiv+0x398>)
 8001a3e:	2400      	movs	r4, #0
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	469a      	mov	sl, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	9303      	str	r3, [sp, #12]
 8001a48:	e682      	b.n	8001750 <__aeabi_ddiv+0x50>
 8001a4a:	465a      	mov	r2, fp
 8001a4c:	4302      	orrs	r2, r0
 8001a4e:	4691      	mov	r9, r2
 8001a50:	d12a      	bne.n	8001aa8 <__aeabi_ddiv+0x3a8>
 8001a52:	2200      	movs	r2, #0
 8001a54:	469a      	mov	sl, r3
 8001a56:	2302      	movs	r3, #2
 8001a58:	4690      	mov	r8, r2
 8001a5a:	2408      	movs	r4, #8
 8001a5c:	9303      	str	r3, [sp, #12]
 8001a5e:	e677      	b.n	8001750 <__aeabi_ddiv+0x50>
 8001a60:	465a      	mov	r2, fp
 8001a62:	9b00      	ldr	r3, [sp, #0]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <__aeabi_ddiv+0x39c>)
 8001a68:	469c      	mov	ip, r3
 8001a6a:	44e2      	add	sl, ip
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	d117      	bne.n	8001aa0 <__aeabi_ddiv+0x3a0>
 8001a70:	2302      	movs	r3, #2
 8001a72:	431c      	orrs	r4, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	469b      	mov	fp, r3
 8001a78:	3302      	adds	r3, #2
 8001a7a:	e689      	b.n	8001790 <__aeabi_ddiv+0x90>
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	fffffc01 	.word	0xfffffc01
 8001a84:	08005e50 	.word	0x08005e50
 8001a88:	000003ff 	.word	0x000003ff
 8001a8c:	feffffff 	.word	0xfeffffff
 8001a90:	000007fe 	.word	0x000007fe
 8001a94:	000003f3 	.word	0x000003f3
 8001a98:	fffffc0d 	.word	0xfffffc0d
 8001a9c:	fffff801 	.word	0xfffff801
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	0032      	movs	r2, r6
 8001aa4:	431c      	orrs	r4, r3
 8001aa6:	e673      	b.n	8001790 <__aeabi_ddiv+0x90>
 8001aa8:	469a      	mov	sl, r3
 8001aaa:	2303      	movs	r3, #3
 8001aac:	46d9      	mov	r9, fp
 8001aae:	240c      	movs	r4, #12
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	e64d      	b.n	8001750 <__aeabi_ddiv+0x50>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	469a      	mov	sl, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	2404      	movs	r4, #4
 8001abe:	9303      	str	r3, [sp, #12]
 8001ac0:	e646      	b.n	8001750 <__aeabi_ddiv+0x50>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	431c      	orrs	r4, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	469b      	mov	fp, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	e660      	b.n	8001790 <__aeabi_ddiv+0x90>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2480      	movs	r4, #128	@ 0x80
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	2600      	movs	r6, #0
 8001ad6:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <__aeabi_ddiv+0x620>)
 8001ad8:	0324      	lsls	r4, r4, #12
 8001ada:	e671      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001adc:	2201      	movs	r2, #1
 8001ade:	4252      	negs	r2, r2
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	2938      	cmp	r1, #56	@ 0x38
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_ddiv+0x3ea>
 8001ae8:	e666      	b.n	80017b8 <__aeabi_ddiv+0xb8>
 8001aea:	291f      	cmp	r1, #31
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_ddiv+0x3f0>
 8001aee:	e0ab      	b.n	8001c48 <__aeabi_ddiv+0x548>
 8001af0:	201f      	movs	r0, #31
 8001af2:	4240      	negs	r0, r0
 8001af4:	1ac3      	subs	r3, r0, r3
 8001af6:	4658      	mov	r0, fp
 8001af8:	40d8      	lsrs	r0, r3
 8001afa:	0003      	movs	r3, r0
 8001afc:	2920      	cmp	r1, #32
 8001afe:	d004      	beq.n	8001b0a <__aeabi_ddiv+0x40a>
 8001b00:	4658      	mov	r0, fp
 8001b02:	4988      	ldr	r1, [pc, #544]	@ (8001d24 <__aeabi_ddiv+0x624>)
 8001b04:	4451      	add	r1, sl
 8001b06:	4088      	lsls	r0, r1
 8001b08:	4302      	orrs	r2, r0
 8001b0a:	1e51      	subs	r1, r2, #1
 8001b0c:	418a      	sbcs	r2, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	2307      	movs	r3, #7
 8001b12:	0019      	movs	r1, r3
 8001b14:	2400      	movs	r4, #0
 8001b16:	4011      	ands	r1, r2
 8001b18:	4213      	tst	r3, r2
 8001b1a:	d00c      	beq.n	8001b36 <__aeabi_ddiv+0x436>
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_ddiv+0x426>
 8001b24:	e0f9      	b.n	8001d1a <__aeabi_ddiv+0x61a>
 8001b26:	1d11      	adds	r1, r2, #4
 8001b28:	4291      	cmp	r1, r2
 8001b2a:	419b      	sbcs	r3, r3
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	425b      	negs	r3, r3
 8001b30:	0759      	lsls	r1, r3, #29
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	0b1c      	lsrs	r4, r3, #12
 8001b36:	08d2      	lsrs	r2, r2, #3
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	4690      	mov	r8, r2
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e63f      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001b40:	2480      	movs	r4, #128	@ 0x80
 8001b42:	464b      	mov	r3, r9
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d009      	beq.n	8001b5e <__aeabi_ddiv+0x45e>
 8001b4a:	465b      	mov	r3, fp
 8001b4c:	4223      	tst	r3, r4
 8001b4e:	d106      	bne.n	8001b5e <__aeabi_ddiv+0x45e>
 8001b50:	431c      	orrs	r4, r3
 8001b52:	0324      	lsls	r4, r4, #12
 8001b54:	002e      	movs	r6, r5
 8001b56:	4690      	mov	r8, r2
 8001b58:	4b71      	ldr	r3, [pc, #452]	@ (8001d20 <__aeabi_ddiv+0x620>)
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	e630      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001b5e:	2480      	movs	r4, #128	@ 0x80
 8001b60:	464b      	mov	r3, r9
 8001b62:	0324      	lsls	r4, r4, #12
 8001b64:	431c      	orrs	r4, r3
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	9e02      	ldr	r6, [sp, #8]
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <__aeabi_ddiv+0x620>)
 8001b6c:	0b24      	lsrs	r4, r4, #12
 8001b6e:	e627      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_ddiv+0x476>
 8001b74:	e700      	b.n	8001978 <__aeabi_ddiv+0x278>
 8001b76:	9800      	ldr	r0, [sp, #0]
 8001b78:	1e51      	subs	r1, r2, #1
 8001b7a:	4684      	mov	ip, r0
 8001b7c:	4464      	add	r4, ip
 8001b7e:	4284      	cmp	r4, r0
 8001b80:	d200      	bcs.n	8001b84 <__aeabi_ddiv+0x484>
 8001b82:	e084      	b.n	8001c8e <__aeabi_ddiv+0x58e>
 8001b84:	42bc      	cmp	r4, r7
 8001b86:	d200      	bcs.n	8001b8a <__aeabi_ddiv+0x48a>
 8001b88:	e0ae      	b.n	8001ce8 <__aeabi_ddiv+0x5e8>
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_ddiv+0x48e>
 8001b8c:	e0c1      	b.n	8001d12 <__aeabi_ddiv+0x612>
 8001b8e:	000a      	movs	r2, r1
 8001b90:	e6f0      	b.n	8001974 <__aeabi_ddiv+0x274>
 8001b92:	4542      	cmp	r2, r8
 8001b94:	d900      	bls.n	8001b98 <__aeabi_ddiv+0x498>
 8001b96:	e62c      	b.n	80017f2 <__aeabi_ddiv+0xf2>
 8001b98:	464b      	mov	r3, r9
 8001b9a:	07dc      	lsls	r4, r3, #31
 8001b9c:	0858      	lsrs	r0, r3, #1
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	431c      	orrs	r4, r3
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	07df      	lsls	r7, r3, #31
 8001ba8:	e62a      	b.n	8001800 <__aeabi_ddiv+0x100>
 8001baa:	f001 f96d 	bl	8002e88 <__clzsi2>
 8001bae:	2315      	movs	r3, #21
 8001bb0:	469c      	mov	ip, r3
 8001bb2:	4484      	add	ip, r0
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	4663      	mov	r3, ip
 8001bb8:	3220      	adds	r2, #32
 8001bba:	2b1c      	cmp	r3, #28
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_ddiv+0x4c0>
 8001bbe:	e72e      	b.n	8001a1e <__aeabi_ddiv+0x31e>
 8001bc0:	0023      	movs	r3, r4
 8001bc2:	3808      	subs	r0, #8
 8001bc4:	4083      	lsls	r3, r0
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	4698      	mov	r8, r3
 8001bcc:	e736      	b.n	8001a3c <__aeabi_ddiv+0x33c>
 8001bce:	f001 f95b 	bl	8002e88 <__clzsi2>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	3215      	adds	r2, #21
 8001bd8:	3320      	adds	r3, #32
 8001bda:	2a1c      	cmp	r2, #28
 8001bdc:	dc00      	bgt.n	8001be0 <__aeabi_ddiv+0x4e0>
 8001bde:	e6fb      	b.n	80019d8 <__aeabi_ddiv+0x2d8>
 8001be0:	9900      	ldr	r1, [sp, #0]
 8001be2:	3808      	subs	r0, #8
 8001be4:	4081      	lsls	r1, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	468b      	mov	fp, r1
 8001bea:	e702      	b.n	80019f2 <__aeabi_ddiv+0x2f2>
 8001bec:	9900      	ldr	r1, [sp, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	468c      	mov	ip, r1
 8001bf2:	4464      	add	r4, ip
 8001bf4:	42a1      	cmp	r1, r4
 8001bf6:	d900      	bls.n	8001bfa <__aeabi_ddiv+0x4fa>
 8001bf8:	e69a      	b.n	8001930 <__aeabi_ddiv+0x230>
 8001bfa:	42a2      	cmp	r2, r4
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x500>
 8001bfe:	e697      	b.n	8001930 <__aeabi_ddiv+0x230>
 8001c00:	1e83      	subs	r3, r0, #2
 8001c02:	4464      	add	r4, ip
 8001c04:	e694      	b.n	8001930 <__aeabi_ddiv+0x230>
 8001c06:	46ac      	mov	ip, r5
 8001c08:	4461      	add	r1, ip
 8001c0a:	3f01      	subs	r7, #1
 8001c0c:	428d      	cmp	r5, r1
 8001c0e:	d900      	bls.n	8001c12 <__aeabi_ddiv+0x512>
 8001c10:	e680      	b.n	8001914 <__aeabi_ddiv+0x214>
 8001c12:	428a      	cmp	r2, r1
 8001c14:	d800      	bhi.n	8001c18 <__aeabi_ddiv+0x518>
 8001c16:	e67d      	b.n	8001914 <__aeabi_ddiv+0x214>
 8001c18:	1e87      	subs	r7, r0, #2
 8001c1a:	4461      	add	r1, ip
 8001c1c:	e67a      	b.n	8001914 <__aeabi_ddiv+0x214>
 8001c1e:	4285      	cmp	r5, r0
 8001c20:	d000      	beq.n	8001c24 <__aeabi_ddiv+0x524>
 8001c22:	e65f      	b.n	80018e4 <__aeabi_ddiv+0x1e4>
 8001c24:	45b9      	cmp	r9, r7
 8001c26:	d900      	bls.n	8001c2a <__aeabi_ddiv+0x52a>
 8001c28:	e65c      	b.n	80018e4 <__aeabi_ddiv+0x1e4>
 8001c2a:	e656      	b.n	80018da <__aeabi_ddiv+0x1da>
 8001c2c:	42a2      	cmp	r2, r4
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x532>
 8001c30:	e61a      	b.n	8001868 <__aeabi_ddiv+0x168>
 8001c32:	1e83      	subs	r3, r0, #2
 8001c34:	4464      	add	r4, ip
 8001c36:	e617      	b.n	8001868 <__aeabi_ddiv+0x168>
 8001c38:	428a      	cmp	r2, r1
 8001c3a:	d800      	bhi.n	8001c3e <__aeabi_ddiv+0x53e>
 8001c3c:	e600      	b.n	8001840 <__aeabi_ddiv+0x140>
 8001c3e:	46ac      	mov	ip, r5
 8001c40:	1e83      	subs	r3, r0, #2
 8001c42:	4698      	mov	r8, r3
 8001c44:	4461      	add	r1, ip
 8001c46:	e5fb      	b.n	8001840 <__aeabi_ddiv+0x140>
 8001c48:	4837      	ldr	r0, [pc, #220]	@ (8001d28 <__aeabi_ddiv+0x628>)
 8001c4a:	0014      	movs	r4, r2
 8001c4c:	4450      	add	r0, sl
 8001c4e:	4082      	lsls	r2, r0
 8001c50:	465b      	mov	r3, fp
 8001c52:	0017      	movs	r7, r2
 8001c54:	4083      	lsls	r3, r0
 8001c56:	40cc      	lsrs	r4, r1
 8001c58:	1e7a      	subs	r2, r7, #1
 8001c5a:	4197      	sbcs	r7, r2
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	433b      	orrs	r3, r7
 8001c60:	001a      	movs	r2, r3
 8001c62:	465b      	mov	r3, fp
 8001c64:	40cb      	lsrs	r3, r1
 8001c66:	0751      	lsls	r1, r2, #29
 8001c68:	d009      	beq.n	8001c7e <__aeabi_ddiv+0x57e>
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	4011      	ands	r1, r2
 8001c6e:	2904      	cmp	r1, #4
 8001c70:	d005      	beq.n	8001c7e <__aeabi_ddiv+0x57e>
 8001c72:	1d11      	adds	r1, r2, #4
 8001c74:	4291      	cmp	r1, r2
 8001c76:	4192      	sbcs	r2, r2
 8001c78:	4252      	negs	r2, r2
 8001c7a:	189b      	adds	r3, r3, r2
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	0219      	lsls	r1, r3, #8
 8001c80:	d400      	bmi.n	8001c84 <__aeabi_ddiv+0x584>
 8001c82:	e755      	b.n	8001b30 <__aeabi_ddiv+0x430>
 8001c84:	2200      	movs	r2, #0
 8001c86:	2301      	movs	r3, #1
 8001c88:	2400      	movs	r4, #0
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	e598      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001c8e:	000a      	movs	r2, r1
 8001c90:	42bc      	cmp	r4, r7
 8001c92:	d000      	beq.n	8001c96 <__aeabi_ddiv+0x596>
 8001c94:	e66e      	b.n	8001974 <__aeabi_ddiv+0x274>
 8001c96:	454b      	cmp	r3, r9
 8001c98:	d000      	beq.n	8001c9c <__aeabi_ddiv+0x59c>
 8001c9a:	e66b      	b.n	8001974 <__aeabi_ddiv+0x274>
 8001c9c:	e66c      	b.n	8001978 <__aeabi_ddiv+0x278>
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <__aeabi_ddiv+0x62c>)
 8001ca0:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <__aeabi_ddiv+0x630>)
 8001ca2:	4453      	add	r3, sl
 8001ca4:	4592      	cmp	sl, r2
 8001ca6:	da00      	bge.n	8001caa <__aeabi_ddiv+0x5aa>
 8001ca8:	e718      	b.n	8001adc <__aeabi_ddiv+0x3dc>
 8001caa:	2101      	movs	r1, #1
 8001cac:	4249      	negs	r1, r1
 8001cae:	1d0a      	adds	r2, r1, #4
 8001cb0:	428a      	cmp	r2, r1
 8001cb2:	4189      	sbcs	r1, r1
 8001cb4:	4249      	negs	r1, r1
 8001cb6:	448b      	add	fp, r1
 8001cb8:	e666      	b.n	8001988 <__aeabi_ddiv+0x288>
 8001cba:	210f      	movs	r1, #15
 8001cbc:	4011      	ands	r1, r2
 8001cbe:	2904      	cmp	r1, #4
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_ddiv+0x5c4>
 8001cc2:	e661      	b.n	8001988 <__aeabi_ddiv+0x288>
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	e7f2      	b.n	8001cae <__aeabi_ddiv+0x5ae>
 8001cc8:	42bc      	cmp	r4, r7
 8001cca:	d800      	bhi.n	8001cce <__aeabi_ddiv+0x5ce>
 8001ccc:	e60a      	b.n	80018e4 <__aeabi_ddiv+0x1e4>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	9900      	ldr	r1, [sp, #0]
 8001cd6:	444f      	add	r7, r9
 8001cd8:	454f      	cmp	r7, r9
 8001cda:	419b      	sbcs	r3, r3
 8001cdc:	44e3      	add	fp, ip
 8001cde:	468c      	mov	ip, r1
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	4463      	add	r3, ip
 8001ce4:	18c0      	adds	r0, r0, r3
 8001ce6:	e5ff      	b.n	80018e8 <__aeabi_ddiv+0x1e8>
 8001ce8:	4649      	mov	r1, r9
 8001cea:	9d00      	ldr	r5, [sp, #0]
 8001cec:	0048      	lsls	r0, r1, #1
 8001cee:	4548      	cmp	r0, r9
 8001cf0:	4189      	sbcs	r1, r1
 8001cf2:	46ac      	mov	ip, r5
 8001cf4:	4249      	negs	r1, r1
 8001cf6:	4461      	add	r1, ip
 8001cf8:	4681      	mov	r9, r0
 8001cfa:	3a02      	subs	r2, #2
 8001cfc:	1864      	adds	r4, r4, r1
 8001cfe:	e7c7      	b.n	8001c90 <__aeabi_ddiv+0x590>
 8001d00:	2480      	movs	r4, #128	@ 0x80
 8001d02:	465b      	mov	r3, fp
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	431c      	orrs	r4, r3
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <__aeabi_ddiv+0x620>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e556      	b.n	80017c0 <__aeabi_ddiv+0xc0>
 8001d12:	4599      	cmp	r9, r3
 8001d14:	d3e8      	bcc.n	8001ce8 <__aeabi_ddiv+0x5e8>
 8001d16:	000a      	movs	r2, r1
 8001d18:	e7bd      	b.n	8001c96 <__aeabi_ddiv+0x596>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e708      	b.n	8001b30 <__aeabi_ddiv+0x430>
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	000007ff 	.word	0x000007ff
 8001d24:	0000043e 	.word	0x0000043e
 8001d28:	0000041e 	.word	0x0000041e
 8001d2c:	000003ff 	.word	0x000003ff
 8001d30:	fffffc02 	.word	0xfffffc02

08001d34 <__eqdf2>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	4657      	mov	r7, sl
 8001d38:	46de      	mov	lr, fp
 8001d3a:	464e      	mov	r6, r9
 8001d3c:	4645      	mov	r5, r8
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	000d      	movs	r5, r1
 8001d42:	0004      	movs	r4, r0
 8001d44:	0fe8      	lsrs	r0, r5, #31
 8001d46:	4683      	mov	fp, r0
 8001d48:	0309      	lsls	r1, r1, #12
 8001d4a:	0fd8      	lsrs	r0, r3, #31
 8001d4c:	0b09      	lsrs	r1, r1, #12
 8001d4e:	4682      	mov	sl, r0
 8001d50:	4819      	ldr	r0, [pc, #100]	@ (8001db8 <__eqdf2+0x84>)
 8001d52:	468c      	mov	ip, r1
 8001d54:	031f      	lsls	r7, r3, #12
 8001d56:	0069      	lsls	r1, r5, #1
 8001d58:	005e      	lsls	r6, r3, #1
 8001d5a:	0d49      	lsrs	r1, r1, #21
 8001d5c:	0b3f      	lsrs	r7, r7, #12
 8001d5e:	0d76      	lsrs	r6, r6, #21
 8001d60:	4281      	cmp	r1, r0
 8001d62:	d018      	beq.n	8001d96 <__eqdf2+0x62>
 8001d64:	4286      	cmp	r6, r0
 8001d66:	d00f      	beq.n	8001d88 <__eqdf2+0x54>
 8001d68:	2001      	movs	r0, #1
 8001d6a:	42b1      	cmp	r1, r6
 8001d6c:	d10d      	bne.n	8001d8a <__eqdf2+0x56>
 8001d6e:	45bc      	cmp	ip, r7
 8001d70:	d10b      	bne.n	8001d8a <__eqdf2+0x56>
 8001d72:	4294      	cmp	r4, r2
 8001d74:	d109      	bne.n	8001d8a <__eqdf2+0x56>
 8001d76:	45d3      	cmp	fp, sl
 8001d78:	d01c      	beq.n	8001db4 <__eqdf2+0x80>
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d105      	bne.n	8001d8a <__eqdf2+0x56>
 8001d7e:	4660      	mov	r0, ip
 8001d80:	4320      	orrs	r0, r4
 8001d82:	1e43      	subs	r3, r0, #1
 8001d84:	4198      	sbcs	r0, r3
 8001d86:	e000      	b.n	8001d8a <__eqdf2+0x56>
 8001d88:	2001      	movs	r0, #1
 8001d8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d8c:	46bb      	mov	fp, r7
 8001d8e:	46b2      	mov	sl, r6
 8001d90:	46a9      	mov	r9, r5
 8001d92:	46a0      	mov	r8, r4
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	2001      	movs	r0, #1
 8001d98:	428e      	cmp	r6, r1
 8001d9a:	d1f6      	bne.n	8001d8a <__eqdf2+0x56>
 8001d9c:	4661      	mov	r1, ip
 8001d9e:	4339      	orrs	r1, r7
 8001da0:	000f      	movs	r7, r1
 8001da2:	4317      	orrs	r7, r2
 8001da4:	4327      	orrs	r7, r4
 8001da6:	d1f0      	bne.n	8001d8a <__eqdf2+0x56>
 8001da8:	465b      	mov	r3, fp
 8001daa:	4652      	mov	r2, sl
 8001dac:	1a98      	subs	r0, r3, r2
 8001dae:	1e43      	subs	r3, r0, #1
 8001db0:	4198      	sbcs	r0, r3
 8001db2:	e7ea      	b.n	8001d8a <__eqdf2+0x56>
 8001db4:	2000      	movs	r0, #0
 8001db6:	e7e8      	b.n	8001d8a <__eqdf2+0x56>
 8001db8:	000007ff 	.word	0x000007ff

08001dbc <__gedf2>:
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	4657      	mov	r7, sl
 8001dc0:	464e      	mov	r6, r9
 8001dc2:	4645      	mov	r5, r8
 8001dc4:	46de      	mov	lr, fp
 8001dc6:	b5e0      	push	{r5, r6, r7, lr}
 8001dc8:	000d      	movs	r5, r1
 8001dca:	030f      	lsls	r7, r1, #12
 8001dcc:	0b39      	lsrs	r1, r7, #12
 8001dce:	b083      	sub	sp, #12
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	9101      	str	r1, [sp, #4]
 8001dd6:	0058      	lsls	r0, r3, #1
 8001dd8:	0fe9      	lsrs	r1, r5, #31
 8001dda:	4f31      	ldr	r7, [pc, #196]	@ (8001ea0 <__gedf2+0xe4>)
 8001ddc:	0d40      	lsrs	r0, r0, #21
 8001dde:	468c      	mov	ip, r1
 8001de0:	006e      	lsls	r6, r5, #1
 8001de2:	0319      	lsls	r1, r3, #12
 8001de4:	4682      	mov	sl, r0
 8001de6:	4691      	mov	r9, r2
 8001de8:	0d76      	lsrs	r6, r6, #21
 8001dea:	0b09      	lsrs	r1, r1, #12
 8001dec:	0fd8      	lsrs	r0, r3, #31
 8001dee:	42be      	cmp	r6, r7
 8001df0:	d01f      	beq.n	8001e32 <__gedf2+0x76>
 8001df2:	45ba      	cmp	sl, r7
 8001df4:	d00f      	beq.n	8001e16 <__gedf2+0x5a>
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	d12f      	bne.n	8001e5a <__gedf2+0x9e>
 8001dfa:	4655      	mov	r5, sl
 8001dfc:	9e01      	ldr	r6, [sp, #4]
 8001dfe:	4334      	orrs	r4, r6
 8001e00:	2d00      	cmp	r5, #0
 8001e02:	d127      	bne.n	8001e54 <__gedf2+0x98>
 8001e04:	430a      	orrs	r2, r1
 8001e06:	d03a      	beq.n	8001e7e <__gedf2+0xc2>
 8001e08:	2c00      	cmp	r4, #0
 8001e0a:	d145      	bne.n	8001e98 <__gedf2+0xdc>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d11a      	bne.n	8001e46 <__gedf2+0x8a>
 8001e10:	2001      	movs	r0, #1
 8001e12:	4240      	negs	r0, r0
 8001e14:	e017      	b.n	8001e46 <__gedf2+0x8a>
 8001e16:	4311      	orrs	r1, r2
 8001e18:	d13b      	bne.n	8001e92 <__gedf2+0xd6>
 8001e1a:	2e00      	cmp	r6, #0
 8001e1c:	d102      	bne.n	8001e24 <__gedf2+0x68>
 8001e1e:	9f01      	ldr	r7, [sp, #4]
 8001e20:	4327      	orrs	r7, r4
 8001e22:	d0f3      	beq.n	8001e0c <__gedf2+0x50>
 8001e24:	4584      	cmp	ip, r0
 8001e26:	d109      	bne.n	8001e3c <__gedf2+0x80>
 8001e28:	4663      	mov	r3, ip
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <__gedf2+0x54>
 8001e2e:	4660      	mov	r0, ip
 8001e30:	e009      	b.n	8001e46 <__gedf2+0x8a>
 8001e32:	9f01      	ldr	r7, [sp, #4]
 8001e34:	4327      	orrs	r7, r4
 8001e36:	d12c      	bne.n	8001e92 <__gedf2+0xd6>
 8001e38:	45b2      	cmp	sl, r6
 8001e3a:	d024      	beq.n	8001e86 <__gedf2+0xca>
 8001e3c:	4663      	mov	r3, ip
 8001e3e:	2002      	movs	r0, #2
 8001e40:	3b01      	subs	r3, #1
 8001e42:	4018      	ands	r0, r3
 8001e44:	3801      	subs	r0, #1
 8001e46:	b003      	add	sp, #12
 8001e48:	bcf0      	pop	{r4, r5, r6, r7}
 8001e4a:	46bb      	mov	fp, r7
 8001e4c:	46b2      	mov	sl, r6
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46a0      	mov	r8, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	2c00      	cmp	r4, #0
 8001e56:	d0d9      	beq.n	8001e0c <__gedf2+0x50>
 8001e58:	e7e4      	b.n	8001e24 <__gedf2+0x68>
 8001e5a:	4654      	mov	r4, sl
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d0ed      	beq.n	8001e3c <__gedf2+0x80>
 8001e60:	4584      	cmp	ip, r0
 8001e62:	d1eb      	bne.n	8001e3c <__gedf2+0x80>
 8001e64:	4556      	cmp	r6, sl
 8001e66:	dce9      	bgt.n	8001e3c <__gedf2+0x80>
 8001e68:	dbde      	blt.n	8001e28 <__gedf2+0x6c>
 8001e6a:	9b01      	ldr	r3, [sp, #4]
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	d8e5      	bhi.n	8001e3c <__gedf2+0x80>
 8001e70:	d1da      	bne.n	8001e28 <__gedf2+0x6c>
 8001e72:	45c8      	cmp	r8, r9
 8001e74:	d8e2      	bhi.n	8001e3c <__gedf2+0x80>
 8001e76:	2000      	movs	r0, #0
 8001e78:	45c8      	cmp	r8, r9
 8001e7a:	d2e4      	bcs.n	8001e46 <__gedf2+0x8a>
 8001e7c:	e7d4      	b.n	8001e28 <__gedf2+0x6c>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	2c00      	cmp	r4, #0
 8001e82:	d0e0      	beq.n	8001e46 <__gedf2+0x8a>
 8001e84:	e7da      	b.n	8001e3c <__gedf2+0x80>
 8001e86:	4311      	orrs	r1, r2
 8001e88:	d103      	bne.n	8001e92 <__gedf2+0xd6>
 8001e8a:	4584      	cmp	ip, r0
 8001e8c:	d1d6      	bne.n	8001e3c <__gedf2+0x80>
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e7d9      	b.n	8001e46 <__gedf2+0x8a>
 8001e92:	2002      	movs	r0, #2
 8001e94:	4240      	negs	r0, r0
 8001e96:	e7d6      	b.n	8001e46 <__gedf2+0x8a>
 8001e98:	4584      	cmp	ip, r0
 8001e9a:	d0e6      	beq.n	8001e6a <__gedf2+0xae>
 8001e9c:	e7ce      	b.n	8001e3c <__gedf2+0x80>
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	000007ff 	.word	0x000007ff

08001ea4 <__ledf2>:
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4645      	mov	r5, r8
 8001eac:	46de      	mov	lr, fp
 8001eae:	b5e0      	push	{r5, r6, r7, lr}
 8001eb0:	000d      	movs	r5, r1
 8001eb2:	030f      	lsls	r7, r1, #12
 8001eb4:	0004      	movs	r4, r0
 8001eb6:	4680      	mov	r8, r0
 8001eb8:	0fe8      	lsrs	r0, r5, #31
 8001eba:	0b39      	lsrs	r1, r7, #12
 8001ebc:	4684      	mov	ip, r0
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	0058      	lsls	r0, r3, #1
 8001ec2:	4f30      	ldr	r7, [pc, #192]	@ (8001f84 <__ledf2+0xe0>)
 8001ec4:	0d40      	lsrs	r0, r0, #21
 8001ec6:	9101      	str	r1, [sp, #4]
 8001ec8:	031e      	lsls	r6, r3, #12
 8001eca:	0069      	lsls	r1, r5, #1
 8001ecc:	4682      	mov	sl, r0
 8001ece:	4691      	mov	r9, r2
 8001ed0:	0d49      	lsrs	r1, r1, #21
 8001ed2:	0b36      	lsrs	r6, r6, #12
 8001ed4:	0fd8      	lsrs	r0, r3, #31
 8001ed6:	42b9      	cmp	r1, r7
 8001ed8:	d020      	beq.n	8001f1c <__ledf2+0x78>
 8001eda:	45ba      	cmp	sl, r7
 8001edc:	d00f      	beq.n	8001efe <__ledf2+0x5a>
 8001ede:	2900      	cmp	r1, #0
 8001ee0:	d12b      	bne.n	8001f3a <__ledf2+0x96>
 8001ee2:	9901      	ldr	r1, [sp, #4]
 8001ee4:	430c      	orrs	r4, r1
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	2900      	cmp	r1, #0
 8001eea:	d137      	bne.n	8001f5c <__ledf2+0xb8>
 8001eec:	4332      	orrs	r2, r6
 8001eee:	d038      	beq.n	8001f62 <__ledf2+0xbe>
 8001ef0:	2c00      	cmp	r4, #0
 8001ef2:	d144      	bne.n	8001f7e <__ledf2+0xda>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d119      	bne.n	8001f2c <__ledf2+0x88>
 8001ef8:	2001      	movs	r0, #1
 8001efa:	4240      	negs	r0, r0
 8001efc:	e016      	b.n	8001f2c <__ledf2+0x88>
 8001efe:	4316      	orrs	r6, r2
 8001f00:	d113      	bne.n	8001f2a <__ledf2+0x86>
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d102      	bne.n	8001f0c <__ledf2+0x68>
 8001f06:	9f01      	ldr	r7, [sp, #4]
 8001f08:	4327      	orrs	r7, r4
 8001f0a:	d0f3      	beq.n	8001ef4 <__ledf2+0x50>
 8001f0c:	4584      	cmp	ip, r0
 8001f0e:	d020      	beq.n	8001f52 <__ledf2+0xae>
 8001f10:	4663      	mov	r3, ip
 8001f12:	2002      	movs	r0, #2
 8001f14:	3b01      	subs	r3, #1
 8001f16:	4018      	ands	r0, r3
 8001f18:	3801      	subs	r0, #1
 8001f1a:	e007      	b.n	8001f2c <__ledf2+0x88>
 8001f1c:	9f01      	ldr	r7, [sp, #4]
 8001f1e:	4327      	orrs	r7, r4
 8001f20:	d103      	bne.n	8001f2a <__ledf2+0x86>
 8001f22:	458a      	cmp	sl, r1
 8001f24:	d1f4      	bne.n	8001f10 <__ledf2+0x6c>
 8001f26:	4316      	orrs	r6, r2
 8001f28:	d01f      	beq.n	8001f6a <__ledf2+0xc6>
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	b003      	add	sp, #12
 8001f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f30:	46bb      	mov	fp, r7
 8001f32:	46b2      	mov	sl, r6
 8001f34:	46a9      	mov	r9, r5
 8001f36:	46a0      	mov	r8, r4
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	4654      	mov	r4, sl
 8001f3c:	2c00      	cmp	r4, #0
 8001f3e:	d0e7      	beq.n	8001f10 <__ledf2+0x6c>
 8001f40:	4584      	cmp	ip, r0
 8001f42:	d1e5      	bne.n	8001f10 <__ledf2+0x6c>
 8001f44:	4551      	cmp	r1, sl
 8001f46:	dce3      	bgt.n	8001f10 <__ledf2+0x6c>
 8001f48:	db03      	blt.n	8001f52 <__ledf2+0xae>
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	42b3      	cmp	r3, r6
 8001f4e:	d8df      	bhi.n	8001f10 <__ledf2+0x6c>
 8001f50:	d00f      	beq.n	8001f72 <__ledf2+0xce>
 8001f52:	4663      	mov	r3, ip
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0cf      	beq.n	8001ef8 <__ledf2+0x54>
 8001f58:	4660      	mov	r0, ip
 8001f5a:	e7e7      	b.n	8001f2c <__ledf2+0x88>
 8001f5c:	2c00      	cmp	r4, #0
 8001f5e:	d0c9      	beq.n	8001ef4 <__ledf2+0x50>
 8001f60:	e7d4      	b.n	8001f0c <__ledf2+0x68>
 8001f62:	2000      	movs	r0, #0
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d0e1      	beq.n	8001f2c <__ledf2+0x88>
 8001f68:	e7d2      	b.n	8001f10 <__ledf2+0x6c>
 8001f6a:	4584      	cmp	ip, r0
 8001f6c:	d1d0      	bne.n	8001f10 <__ledf2+0x6c>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e7dc      	b.n	8001f2c <__ledf2+0x88>
 8001f72:	45c8      	cmp	r8, r9
 8001f74:	d8cc      	bhi.n	8001f10 <__ledf2+0x6c>
 8001f76:	2000      	movs	r0, #0
 8001f78:	45c8      	cmp	r8, r9
 8001f7a:	d2d7      	bcs.n	8001f2c <__ledf2+0x88>
 8001f7c:	e7e9      	b.n	8001f52 <__ledf2+0xae>
 8001f7e:	4584      	cmp	ip, r0
 8001f80:	d0e3      	beq.n	8001f4a <__ledf2+0xa6>
 8001f82:	e7c5      	b.n	8001f10 <__ledf2+0x6c>
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__aeabi_dmul>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	4657      	mov	r7, sl
 8001f8c:	46de      	mov	lr, fp
 8001f8e:	464e      	mov	r6, r9
 8001f90:	4645      	mov	r5, r8
 8001f92:	b5e0      	push	{r5, r6, r7, lr}
 8001f94:	001f      	movs	r7, r3
 8001f96:	030b      	lsls	r3, r1, #12
 8001f98:	0b1b      	lsrs	r3, r3, #12
 8001f9a:	0016      	movs	r6, r2
 8001f9c:	469a      	mov	sl, r3
 8001f9e:	0fca      	lsrs	r2, r1, #31
 8001fa0:	004b      	lsls	r3, r1, #1
 8001fa2:	0004      	movs	r4, r0
 8001fa4:	4693      	mov	fp, r2
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	d100      	bne.n	8001fae <__aeabi_dmul+0x26>
 8001fac:	e0d5      	b.n	800215a <__aeabi_dmul+0x1d2>
 8001fae:	4abb      	ldr	r2, [pc, #748]	@ (800229c <__aeabi_dmul+0x314>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x2e>
 8001fb4:	e0f8      	b.n	80021a8 <__aeabi_dmul+0x220>
 8001fb6:	4651      	mov	r1, sl
 8001fb8:	0f42      	lsrs	r2, r0, #29
 8001fba:	00c9      	lsls	r1, r1, #3
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	2180      	movs	r1, #128	@ 0x80
 8001fc0:	0409      	lsls	r1, r1, #16
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	00c2      	lsls	r2, r0, #3
 8001fc6:	4691      	mov	r9, r2
 8001fc8:	4ab5      	ldr	r2, [pc, #724]	@ (80022a0 <__aeabi_dmul+0x318>)
 8001fca:	468a      	mov	sl, r1
 8001fcc:	189d      	adds	r5, r3, r2
 8001fce:	2300      	movs	r3, #0
 8001fd0:	4698      	mov	r8, r3
 8001fd2:	9302      	str	r3, [sp, #8]
 8001fd4:	033c      	lsls	r4, r7, #12
 8001fd6:	007b      	lsls	r3, r7, #1
 8001fd8:	0ffa      	lsrs	r2, r7, #31
 8001fda:	0030      	movs	r0, r6
 8001fdc:	0b24      	lsrs	r4, r4, #12
 8001fde:	0d5b      	lsrs	r3, r3, #21
 8001fe0:	9200      	str	r2, [sp, #0]
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dmul+0x5e>
 8001fe4:	e096      	b.n	8002114 <__aeabi_dmul+0x18c>
 8001fe6:	4aad      	ldr	r2, [pc, #692]	@ (800229c <__aeabi_dmul+0x314>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d031      	beq.n	8002050 <__aeabi_dmul+0xc8>
 8001fec:	0f72      	lsrs	r2, r6, #29
 8001fee:	00e4      	lsls	r4, r4, #3
 8001ff0:	4322      	orrs	r2, r4
 8001ff2:	2480      	movs	r4, #128	@ 0x80
 8001ff4:	0424      	lsls	r4, r4, #16
 8001ff6:	4314      	orrs	r4, r2
 8001ff8:	4aa9      	ldr	r2, [pc, #676]	@ (80022a0 <__aeabi_dmul+0x318>)
 8001ffa:	00f0      	lsls	r0, r6, #3
 8001ffc:	4694      	mov	ip, r2
 8001ffe:	4463      	add	r3, ip
 8002000:	195b      	adds	r3, r3, r5
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	9201      	str	r2, [sp, #4]
 8002006:	4642      	mov	r2, r8
 8002008:	2600      	movs	r6, #0
 800200a:	2a0a      	cmp	r2, #10
 800200c:	dc42      	bgt.n	8002094 <__aeabi_dmul+0x10c>
 800200e:	465a      	mov	r2, fp
 8002010:	9900      	ldr	r1, [sp, #0]
 8002012:	404a      	eors	r2, r1
 8002014:	4693      	mov	fp, r2
 8002016:	4642      	mov	r2, r8
 8002018:	2a02      	cmp	r2, #2
 800201a:	dc32      	bgt.n	8002082 <__aeabi_dmul+0xfa>
 800201c:	3a01      	subs	r2, #1
 800201e:	2a01      	cmp	r2, #1
 8002020:	d900      	bls.n	8002024 <__aeabi_dmul+0x9c>
 8002022:	e149      	b.n	80022b8 <__aeabi_dmul+0x330>
 8002024:	2e02      	cmp	r6, #2
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0xa2>
 8002028:	e0ca      	b.n	80021c0 <__aeabi_dmul+0x238>
 800202a:	2e01      	cmp	r6, #1
 800202c:	d13d      	bne.n	80020aa <__aeabi_dmul+0x122>
 800202e:	2300      	movs	r3, #0
 8002030:	2400      	movs	r4, #0
 8002032:	2200      	movs	r2, #0
 8002034:	0010      	movs	r0, r2
 8002036:	465a      	mov	r2, fp
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	4323      	orrs	r3, r4
 800203c:	07d2      	lsls	r2, r2, #31
 800203e:	4313      	orrs	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	b007      	add	sp, #28
 8002044:	bcf0      	pop	{r4, r5, r6, r7}
 8002046:	46bb      	mov	fp, r7
 8002048:	46b2      	mov	sl, r6
 800204a:	46a9      	mov	r9, r5
 800204c:	46a0      	mov	r8, r4
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	4b92      	ldr	r3, [pc, #584]	@ (800229c <__aeabi_dmul+0x314>)
 8002052:	4326      	orrs	r6, r4
 8002054:	18eb      	adds	r3, r5, r3
 8002056:	2e00      	cmp	r6, #0
 8002058:	d100      	bne.n	800205c <__aeabi_dmul+0xd4>
 800205a:	e0bb      	b.n	80021d4 <__aeabi_dmul+0x24c>
 800205c:	2203      	movs	r2, #3
 800205e:	4641      	mov	r1, r8
 8002060:	4311      	orrs	r1, r2
 8002062:	465a      	mov	r2, fp
 8002064:	4688      	mov	r8, r1
 8002066:	9900      	ldr	r1, [sp, #0]
 8002068:	404a      	eors	r2, r1
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0109      	lsls	r1, r1, #4
 800206e:	468c      	mov	ip, r1
 8002070:	0029      	movs	r1, r5
 8002072:	4461      	add	r1, ip
 8002074:	9101      	str	r1, [sp, #4]
 8002076:	4641      	mov	r1, r8
 8002078:	290a      	cmp	r1, #10
 800207a:	dd00      	ble.n	800207e <__aeabi_dmul+0xf6>
 800207c:	e233      	b.n	80024e6 <__aeabi_dmul+0x55e>
 800207e:	4693      	mov	fp, r2
 8002080:	2603      	movs	r6, #3
 8002082:	4642      	mov	r2, r8
 8002084:	2701      	movs	r7, #1
 8002086:	4097      	lsls	r7, r2
 8002088:	21a6      	movs	r1, #166	@ 0xa6
 800208a:	003a      	movs	r2, r7
 800208c:	00c9      	lsls	r1, r1, #3
 800208e:	400a      	ands	r2, r1
 8002090:	420f      	tst	r7, r1
 8002092:	d031      	beq.n	80020f8 <__aeabi_dmul+0x170>
 8002094:	9e02      	ldr	r6, [sp, #8]
 8002096:	2e02      	cmp	r6, #2
 8002098:	d100      	bne.n	800209c <__aeabi_dmul+0x114>
 800209a:	e235      	b.n	8002508 <__aeabi_dmul+0x580>
 800209c:	2e03      	cmp	r6, #3
 800209e:	d100      	bne.n	80020a2 <__aeabi_dmul+0x11a>
 80020a0:	e1d2      	b.n	8002448 <__aeabi_dmul+0x4c0>
 80020a2:	4654      	mov	r4, sl
 80020a4:	4648      	mov	r0, r9
 80020a6:	2e01      	cmp	r6, #1
 80020a8:	d0c1      	beq.n	800202e <__aeabi_dmul+0xa6>
 80020aa:	9a01      	ldr	r2, [sp, #4]
 80020ac:	4b7d      	ldr	r3, [pc, #500]	@ (80022a4 <__aeabi_dmul+0x31c>)
 80020ae:	4694      	mov	ip, r2
 80020b0:	4463      	add	r3, ip
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	dc00      	bgt.n	80020b8 <__aeabi_dmul+0x130>
 80020b6:	e0c0      	b.n	800223a <__aeabi_dmul+0x2b2>
 80020b8:	0742      	lsls	r2, r0, #29
 80020ba:	d009      	beq.n	80020d0 <__aeabi_dmul+0x148>
 80020bc:	220f      	movs	r2, #15
 80020be:	4002      	ands	r2, r0
 80020c0:	2a04      	cmp	r2, #4
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dmul+0x148>
 80020c4:	1d02      	adds	r2, r0, #4
 80020c6:	4282      	cmp	r2, r0
 80020c8:	4180      	sbcs	r0, r0
 80020ca:	4240      	negs	r0, r0
 80020cc:	1824      	adds	r4, r4, r0
 80020ce:	0010      	movs	r0, r2
 80020d0:	01e2      	lsls	r2, r4, #7
 80020d2:	d506      	bpl.n	80020e2 <__aeabi_dmul+0x15a>
 80020d4:	4b74      	ldr	r3, [pc, #464]	@ (80022a8 <__aeabi_dmul+0x320>)
 80020d6:	9a01      	ldr	r2, [sp, #4]
 80020d8:	401c      	ands	r4, r3
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	4694      	mov	ip, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4463      	add	r3, ip
 80020e2:	4a72      	ldr	r2, [pc, #456]	@ (80022ac <__aeabi_dmul+0x324>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	dc6b      	bgt.n	80021c0 <__aeabi_dmul+0x238>
 80020e8:	0762      	lsls	r2, r4, #29
 80020ea:	08c0      	lsrs	r0, r0, #3
 80020ec:	0264      	lsls	r4, r4, #9
 80020ee:	055b      	lsls	r3, r3, #21
 80020f0:	4302      	orrs	r2, r0
 80020f2:	0b24      	lsrs	r4, r4, #12
 80020f4:	0d5b      	lsrs	r3, r3, #21
 80020f6:	e79d      	b.n	8002034 <__aeabi_dmul+0xac>
 80020f8:	2190      	movs	r1, #144	@ 0x90
 80020fa:	0089      	lsls	r1, r1, #2
 80020fc:	420f      	tst	r7, r1
 80020fe:	d163      	bne.n	80021c8 <__aeabi_dmul+0x240>
 8002100:	2288      	movs	r2, #136	@ 0x88
 8002102:	423a      	tst	r2, r7
 8002104:	d100      	bne.n	8002108 <__aeabi_dmul+0x180>
 8002106:	e0d7      	b.n	80022b8 <__aeabi_dmul+0x330>
 8002108:	9b00      	ldr	r3, [sp, #0]
 800210a:	46a2      	mov	sl, r4
 800210c:	469b      	mov	fp, r3
 800210e:	4681      	mov	r9, r0
 8002110:	9602      	str	r6, [sp, #8]
 8002112:	e7bf      	b.n	8002094 <__aeabi_dmul+0x10c>
 8002114:	0023      	movs	r3, r4
 8002116:	4333      	orrs	r3, r6
 8002118:	d100      	bne.n	800211c <__aeabi_dmul+0x194>
 800211a:	e07f      	b.n	800221c <__aeabi_dmul+0x294>
 800211c:	2c00      	cmp	r4, #0
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0x19a>
 8002120:	e1ad      	b.n	800247e <__aeabi_dmul+0x4f6>
 8002122:	0020      	movs	r0, r4
 8002124:	f000 feb0 	bl	8002e88 <__clzsi2>
 8002128:	0002      	movs	r2, r0
 800212a:	0003      	movs	r3, r0
 800212c:	3a0b      	subs	r2, #11
 800212e:	201d      	movs	r0, #29
 8002130:	0019      	movs	r1, r3
 8002132:	1a82      	subs	r2, r0, r2
 8002134:	0030      	movs	r0, r6
 8002136:	3908      	subs	r1, #8
 8002138:	40d0      	lsrs	r0, r2
 800213a:	408c      	lsls	r4, r1
 800213c:	4304      	orrs	r4, r0
 800213e:	0030      	movs	r0, r6
 8002140:	4088      	lsls	r0, r1
 8002142:	4a5b      	ldr	r2, [pc, #364]	@ (80022b0 <__aeabi_dmul+0x328>)
 8002144:	1aeb      	subs	r3, r5, r3
 8002146:	4694      	mov	ip, r2
 8002148:	4463      	add	r3, ip
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	4642      	mov	r2, r8
 8002150:	2600      	movs	r6, #0
 8002152:	2a0a      	cmp	r2, #10
 8002154:	dc00      	bgt.n	8002158 <__aeabi_dmul+0x1d0>
 8002156:	e75a      	b.n	800200e <__aeabi_dmul+0x86>
 8002158:	e79c      	b.n	8002094 <__aeabi_dmul+0x10c>
 800215a:	4653      	mov	r3, sl
 800215c:	4303      	orrs	r3, r0
 800215e:	4699      	mov	r9, r3
 8002160:	d054      	beq.n	800220c <__aeabi_dmul+0x284>
 8002162:	4653      	mov	r3, sl
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_dmul+0x1e2>
 8002168:	e177      	b.n	800245a <__aeabi_dmul+0x4d2>
 800216a:	4650      	mov	r0, sl
 800216c:	f000 fe8c 	bl	8002e88 <__clzsi2>
 8002170:	230b      	movs	r3, #11
 8002172:	425b      	negs	r3, r3
 8002174:	469c      	mov	ip, r3
 8002176:	0002      	movs	r2, r0
 8002178:	4484      	add	ip, r0
 800217a:	0011      	movs	r1, r2
 800217c:	4650      	mov	r0, sl
 800217e:	3908      	subs	r1, #8
 8002180:	4088      	lsls	r0, r1
 8002182:	231d      	movs	r3, #29
 8002184:	4680      	mov	r8, r0
 8002186:	4660      	mov	r0, ip
 8002188:	1a1b      	subs	r3, r3, r0
 800218a:	0020      	movs	r0, r4
 800218c:	40d8      	lsrs	r0, r3
 800218e:	0003      	movs	r3, r0
 8002190:	4640      	mov	r0, r8
 8002192:	4303      	orrs	r3, r0
 8002194:	469a      	mov	sl, r3
 8002196:	0023      	movs	r3, r4
 8002198:	408b      	lsls	r3, r1
 800219a:	4699      	mov	r9, r3
 800219c:	2300      	movs	r3, #0
 800219e:	4d44      	ldr	r5, [pc, #272]	@ (80022b0 <__aeabi_dmul+0x328>)
 80021a0:	4698      	mov	r8, r3
 80021a2:	1aad      	subs	r5, r5, r2
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	e715      	b.n	8001fd4 <__aeabi_dmul+0x4c>
 80021a8:	4652      	mov	r2, sl
 80021aa:	4302      	orrs	r2, r0
 80021ac:	4691      	mov	r9, r2
 80021ae:	d126      	bne.n	80021fe <__aeabi_dmul+0x276>
 80021b0:	2200      	movs	r2, #0
 80021b2:	001d      	movs	r5, r3
 80021b4:	2302      	movs	r3, #2
 80021b6:	4692      	mov	sl, r2
 80021b8:	3208      	adds	r2, #8
 80021ba:	4690      	mov	r8, r2
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	e709      	b.n	8001fd4 <__aeabi_dmul+0x4c>
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <__aeabi_dmul+0x314>)
 80021c6:	e735      	b.n	8002034 <__aeabi_dmul+0xac>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2480      	movs	r4, #128	@ 0x80
 80021cc:	469b      	mov	fp, r3
 80021ce:	0324      	lsls	r4, r4, #12
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <__aeabi_dmul+0x314>)
 80021d2:	e72f      	b.n	8002034 <__aeabi_dmul+0xac>
 80021d4:	2202      	movs	r2, #2
 80021d6:	4641      	mov	r1, r8
 80021d8:	4311      	orrs	r1, r2
 80021da:	2280      	movs	r2, #128	@ 0x80
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	4694      	mov	ip, r2
 80021e0:	002a      	movs	r2, r5
 80021e2:	4462      	add	r2, ip
 80021e4:	4688      	mov	r8, r1
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	290a      	cmp	r1, #10
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dmul+0x266>
 80021ec:	e752      	b.n	8002094 <__aeabi_dmul+0x10c>
 80021ee:	465a      	mov	r2, fp
 80021f0:	2000      	movs	r0, #0
 80021f2:	9900      	ldr	r1, [sp, #0]
 80021f4:	0004      	movs	r4, r0
 80021f6:	404a      	eors	r2, r1
 80021f8:	4693      	mov	fp, r2
 80021fa:	2602      	movs	r6, #2
 80021fc:	e70b      	b.n	8002016 <__aeabi_dmul+0x8e>
 80021fe:	220c      	movs	r2, #12
 8002200:	001d      	movs	r5, r3
 8002202:	2303      	movs	r3, #3
 8002204:	4681      	mov	r9, r0
 8002206:	4690      	mov	r8, r2
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	e6e3      	b.n	8001fd4 <__aeabi_dmul+0x4c>
 800220c:	2300      	movs	r3, #0
 800220e:	469a      	mov	sl, r3
 8002210:	3304      	adds	r3, #4
 8002212:	4698      	mov	r8, r3
 8002214:	3b03      	subs	r3, #3
 8002216:	2500      	movs	r5, #0
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	e6db      	b.n	8001fd4 <__aeabi_dmul+0x4c>
 800221c:	4642      	mov	r2, r8
 800221e:	3301      	adds	r3, #1
 8002220:	431a      	orrs	r2, r3
 8002222:	002b      	movs	r3, r5
 8002224:	4690      	mov	r8, r2
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	9201      	str	r2, [sp, #4]
 800222a:	4642      	mov	r2, r8
 800222c:	2400      	movs	r4, #0
 800222e:	2000      	movs	r0, #0
 8002230:	2601      	movs	r6, #1
 8002232:	2a0a      	cmp	r2, #10
 8002234:	dc00      	bgt.n	8002238 <__aeabi_dmul+0x2b0>
 8002236:	e6ea      	b.n	800200e <__aeabi_dmul+0x86>
 8002238:	e72c      	b.n	8002094 <__aeabi_dmul+0x10c>
 800223a:	2201      	movs	r2, #1
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	2a38      	cmp	r2, #56	@ 0x38
 8002240:	dd00      	ble.n	8002244 <__aeabi_dmul+0x2bc>
 8002242:	e6f4      	b.n	800202e <__aeabi_dmul+0xa6>
 8002244:	2a1f      	cmp	r2, #31
 8002246:	dc00      	bgt.n	800224a <__aeabi_dmul+0x2c2>
 8002248:	e12a      	b.n	80024a0 <__aeabi_dmul+0x518>
 800224a:	211f      	movs	r1, #31
 800224c:	4249      	negs	r1, r1
 800224e:	1acb      	subs	r3, r1, r3
 8002250:	0021      	movs	r1, r4
 8002252:	40d9      	lsrs	r1, r3
 8002254:	000b      	movs	r3, r1
 8002256:	2a20      	cmp	r2, #32
 8002258:	d005      	beq.n	8002266 <__aeabi_dmul+0x2de>
 800225a:	4a16      	ldr	r2, [pc, #88]	@ (80022b4 <__aeabi_dmul+0x32c>)
 800225c:	9d01      	ldr	r5, [sp, #4]
 800225e:	4694      	mov	ip, r2
 8002260:	4465      	add	r5, ip
 8002262:	40ac      	lsls	r4, r5
 8002264:	4320      	orrs	r0, r4
 8002266:	1e42      	subs	r2, r0, #1
 8002268:	4190      	sbcs	r0, r2
 800226a:	4318      	orrs	r0, r3
 800226c:	2307      	movs	r3, #7
 800226e:	0019      	movs	r1, r3
 8002270:	2400      	movs	r4, #0
 8002272:	4001      	ands	r1, r0
 8002274:	4203      	tst	r3, r0
 8002276:	d00c      	beq.n	8002292 <__aeabi_dmul+0x30a>
 8002278:	230f      	movs	r3, #15
 800227a:	4003      	ands	r3, r0
 800227c:	2b04      	cmp	r3, #4
 800227e:	d100      	bne.n	8002282 <__aeabi_dmul+0x2fa>
 8002280:	e140      	b.n	8002504 <__aeabi_dmul+0x57c>
 8002282:	1d03      	adds	r3, r0, #4
 8002284:	4283      	cmp	r3, r0
 8002286:	41a4      	sbcs	r4, r4
 8002288:	0018      	movs	r0, r3
 800228a:	4264      	negs	r4, r4
 800228c:	0761      	lsls	r1, r4, #29
 800228e:	0264      	lsls	r4, r4, #9
 8002290:	0b24      	lsrs	r4, r4, #12
 8002292:	08c2      	lsrs	r2, r0, #3
 8002294:	2300      	movs	r3, #0
 8002296:	430a      	orrs	r2, r1
 8002298:	e6cc      	b.n	8002034 <__aeabi_dmul+0xac>
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	000007ff 	.word	0x000007ff
 80022a0:	fffffc01 	.word	0xfffffc01
 80022a4:	000003ff 	.word	0x000003ff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	000007fe 	.word	0x000007fe
 80022b0:	fffffc0d 	.word	0xfffffc0d
 80022b4:	0000043e 	.word	0x0000043e
 80022b8:	4649      	mov	r1, r9
 80022ba:	464a      	mov	r2, r9
 80022bc:	0409      	lsls	r1, r1, #16
 80022be:	0c09      	lsrs	r1, r1, #16
 80022c0:	000d      	movs	r5, r1
 80022c2:	0c16      	lsrs	r6, r2, #16
 80022c4:	0c02      	lsrs	r2, r0, #16
 80022c6:	0400      	lsls	r0, r0, #16
 80022c8:	0c00      	lsrs	r0, r0, #16
 80022ca:	4345      	muls	r5, r0
 80022cc:	46ac      	mov	ip, r5
 80022ce:	0005      	movs	r5, r0
 80022d0:	4375      	muls	r5, r6
 80022d2:	46a8      	mov	r8, r5
 80022d4:	0015      	movs	r5, r2
 80022d6:	000f      	movs	r7, r1
 80022d8:	4375      	muls	r5, r6
 80022da:	9200      	str	r2, [sp, #0]
 80022dc:	9502      	str	r5, [sp, #8]
 80022de:	002a      	movs	r2, r5
 80022e0:	9d00      	ldr	r5, [sp, #0]
 80022e2:	436f      	muls	r7, r5
 80022e4:	4665      	mov	r5, ip
 80022e6:	0c2d      	lsrs	r5, r5, #16
 80022e8:	46a9      	mov	r9, r5
 80022ea:	4447      	add	r7, r8
 80022ec:	444f      	add	r7, r9
 80022ee:	45b8      	cmp	r8, r7
 80022f0:	d905      	bls.n	80022fe <__aeabi_dmul+0x376>
 80022f2:	0015      	movs	r5, r2
 80022f4:	2280      	movs	r2, #128	@ 0x80
 80022f6:	0252      	lsls	r2, r2, #9
 80022f8:	4690      	mov	r8, r2
 80022fa:	4445      	add	r5, r8
 80022fc:	9502      	str	r5, [sp, #8]
 80022fe:	0c3d      	lsrs	r5, r7, #16
 8002300:	9503      	str	r5, [sp, #12]
 8002302:	4665      	mov	r5, ip
 8002304:	042d      	lsls	r5, r5, #16
 8002306:	043f      	lsls	r7, r7, #16
 8002308:	0c2d      	lsrs	r5, r5, #16
 800230a:	46ac      	mov	ip, r5
 800230c:	003d      	movs	r5, r7
 800230e:	4465      	add	r5, ip
 8002310:	9504      	str	r5, [sp, #16]
 8002312:	0c25      	lsrs	r5, r4, #16
 8002314:	0424      	lsls	r4, r4, #16
 8002316:	0c24      	lsrs	r4, r4, #16
 8002318:	46ac      	mov	ip, r5
 800231a:	0025      	movs	r5, r4
 800231c:	4375      	muls	r5, r6
 800231e:	46a8      	mov	r8, r5
 8002320:	4665      	mov	r5, ip
 8002322:	000f      	movs	r7, r1
 8002324:	4369      	muls	r1, r5
 8002326:	4441      	add	r1, r8
 8002328:	4689      	mov	r9, r1
 800232a:	4367      	muls	r7, r4
 800232c:	0c39      	lsrs	r1, r7, #16
 800232e:	4449      	add	r1, r9
 8002330:	436e      	muls	r6, r5
 8002332:	4588      	cmp	r8, r1
 8002334:	d903      	bls.n	800233e <__aeabi_dmul+0x3b6>
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	0252      	lsls	r2, r2, #9
 800233a:	4690      	mov	r8, r2
 800233c:	4446      	add	r6, r8
 800233e:	0c0d      	lsrs	r5, r1, #16
 8002340:	46a8      	mov	r8, r5
 8002342:	0035      	movs	r5, r6
 8002344:	4445      	add	r5, r8
 8002346:	9505      	str	r5, [sp, #20]
 8002348:	9d03      	ldr	r5, [sp, #12]
 800234a:	043f      	lsls	r7, r7, #16
 800234c:	46a8      	mov	r8, r5
 800234e:	0c3f      	lsrs	r7, r7, #16
 8002350:	0409      	lsls	r1, r1, #16
 8002352:	19c9      	adds	r1, r1, r7
 8002354:	4488      	add	r8, r1
 8002356:	4645      	mov	r5, r8
 8002358:	9503      	str	r5, [sp, #12]
 800235a:	4655      	mov	r5, sl
 800235c:	042e      	lsls	r6, r5, #16
 800235e:	0c36      	lsrs	r6, r6, #16
 8002360:	0c2f      	lsrs	r7, r5, #16
 8002362:	0035      	movs	r5, r6
 8002364:	4345      	muls	r5, r0
 8002366:	4378      	muls	r0, r7
 8002368:	4681      	mov	r9, r0
 800236a:	0038      	movs	r0, r7
 800236c:	46a8      	mov	r8, r5
 800236e:	0c2d      	lsrs	r5, r5, #16
 8002370:	46aa      	mov	sl, r5
 8002372:	9a00      	ldr	r2, [sp, #0]
 8002374:	4350      	muls	r0, r2
 8002376:	4372      	muls	r2, r6
 8002378:	444a      	add	r2, r9
 800237a:	4452      	add	r2, sl
 800237c:	4591      	cmp	r9, r2
 800237e:	d903      	bls.n	8002388 <__aeabi_dmul+0x400>
 8002380:	2580      	movs	r5, #128	@ 0x80
 8002382:	026d      	lsls	r5, r5, #9
 8002384:	46a9      	mov	r9, r5
 8002386:	4448      	add	r0, r9
 8002388:	0c15      	lsrs	r5, r2, #16
 800238a:	46a9      	mov	r9, r5
 800238c:	4645      	mov	r5, r8
 800238e:	042d      	lsls	r5, r5, #16
 8002390:	0c2d      	lsrs	r5, r5, #16
 8002392:	46a8      	mov	r8, r5
 8002394:	4665      	mov	r5, ip
 8002396:	437d      	muls	r5, r7
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	4448      	add	r0, r9
 800239c:	4490      	add	r8, r2
 800239e:	46a9      	mov	r9, r5
 80023a0:	0032      	movs	r2, r6
 80023a2:	4665      	mov	r5, ip
 80023a4:	4362      	muls	r2, r4
 80023a6:	436e      	muls	r6, r5
 80023a8:	437c      	muls	r4, r7
 80023aa:	0c17      	lsrs	r7, r2, #16
 80023ac:	1936      	adds	r6, r6, r4
 80023ae:	19bf      	adds	r7, r7, r6
 80023b0:	42bc      	cmp	r4, r7
 80023b2:	d903      	bls.n	80023bc <__aeabi_dmul+0x434>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	0264      	lsls	r4, r4, #9
 80023b8:	46a4      	mov	ip, r4
 80023ba:	44e1      	add	r9, ip
 80023bc:	9c02      	ldr	r4, [sp, #8]
 80023be:	9e03      	ldr	r6, [sp, #12]
 80023c0:	46a4      	mov	ip, r4
 80023c2:	9d05      	ldr	r5, [sp, #20]
 80023c4:	4466      	add	r6, ip
 80023c6:	428e      	cmp	r6, r1
 80023c8:	4189      	sbcs	r1, r1
 80023ca:	46ac      	mov	ip, r5
 80023cc:	0412      	lsls	r2, r2, #16
 80023ce:	043c      	lsls	r4, r7, #16
 80023d0:	0c12      	lsrs	r2, r2, #16
 80023d2:	18a2      	adds	r2, r4, r2
 80023d4:	4462      	add	r2, ip
 80023d6:	4249      	negs	r1, r1
 80023d8:	1854      	adds	r4, r2, r1
 80023da:	4446      	add	r6, r8
 80023dc:	46a4      	mov	ip, r4
 80023de:	4546      	cmp	r6, r8
 80023e0:	41a4      	sbcs	r4, r4
 80023e2:	4682      	mov	sl, r0
 80023e4:	4264      	negs	r4, r4
 80023e6:	46a0      	mov	r8, r4
 80023e8:	42aa      	cmp	r2, r5
 80023ea:	4192      	sbcs	r2, r2
 80023ec:	458c      	cmp	ip, r1
 80023ee:	4189      	sbcs	r1, r1
 80023f0:	44e2      	add	sl, ip
 80023f2:	44d0      	add	r8, sl
 80023f4:	4249      	negs	r1, r1
 80023f6:	4252      	negs	r2, r2
 80023f8:	430a      	orrs	r2, r1
 80023fa:	45a0      	cmp	r8, r4
 80023fc:	41a4      	sbcs	r4, r4
 80023fe:	4582      	cmp	sl, r0
 8002400:	4189      	sbcs	r1, r1
 8002402:	4264      	negs	r4, r4
 8002404:	4249      	negs	r1, r1
 8002406:	430c      	orrs	r4, r1
 8002408:	4641      	mov	r1, r8
 800240a:	0c3f      	lsrs	r7, r7, #16
 800240c:	19d2      	adds	r2, r2, r7
 800240e:	1912      	adds	r2, r2, r4
 8002410:	0dcc      	lsrs	r4, r1, #23
 8002412:	9904      	ldr	r1, [sp, #16]
 8002414:	0270      	lsls	r0, r6, #9
 8002416:	4308      	orrs	r0, r1
 8002418:	1e41      	subs	r1, r0, #1
 800241a:	4188      	sbcs	r0, r1
 800241c:	4641      	mov	r1, r8
 800241e:	444a      	add	r2, r9
 8002420:	0df6      	lsrs	r6, r6, #23
 8002422:	0252      	lsls	r2, r2, #9
 8002424:	4330      	orrs	r0, r6
 8002426:	0249      	lsls	r1, r1, #9
 8002428:	4314      	orrs	r4, r2
 800242a:	4308      	orrs	r0, r1
 800242c:	01d2      	lsls	r2, r2, #7
 800242e:	d535      	bpl.n	800249c <__aeabi_dmul+0x514>
 8002430:	2201      	movs	r2, #1
 8002432:	0843      	lsrs	r3, r0, #1
 8002434:	4002      	ands	r2, r0
 8002436:	4313      	orrs	r3, r2
 8002438:	07e0      	lsls	r0, r4, #31
 800243a:	4318      	orrs	r0, r3
 800243c:	0864      	lsrs	r4, r4, #1
 800243e:	e634      	b.n	80020aa <__aeabi_dmul+0x122>
 8002440:	9b00      	ldr	r3, [sp, #0]
 8002442:	46a2      	mov	sl, r4
 8002444:	469b      	mov	fp, r3
 8002446:	4681      	mov	r9, r0
 8002448:	2480      	movs	r4, #128	@ 0x80
 800244a:	4653      	mov	r3, sl
 800244c:	0324      	lsls	r4, r4, #12
 800244e:	431c      	orrs	r4, r3
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	464a      	mov	r2, r9
 8002454:	4b2e      	ldr	r3, [pc, #184]	@ (8002510 <__aeabi_dmul+0x588>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5ec      	b.n	8002034 <__aeabi_dmul+0xac>
 800245a:	f000 fd15 	bl	8002e88 <__clzsi2>
 800245e:	2315      	movs	r3, #21
 8002460:	469c      	mov	ip, r3
 8002462:	4484      	add	ip, r0
 8002464:	0002      	movs	r2, r0
 8002466:	4663      	mov	r3, ip
 8002468:	3220      	adds	r2, #32
 800246a:	2b1c      	cmp	r3, #28
 800246c:	dc00      	bgt.n	8002470 <__aeabi_dmul+0x4e8>
 800246e:	e684      	b.n	800217a <__aeabi_dmul+0x1f2>
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	0023      	movs	r3, r4
 8002476:	3808      	subs	r0, #8
 8002478:	4083      	lsls	r3, r0
 800247a:	469a      	mov	sl, r3
 800247c:	e68e      	b.n	800219c <__aeabi_dmul+0x214>
 800247e:	f000 fd03 	bl	8002e88 <__clzsi2>
 8002482:	0002      	movs	r2, r0
 8002484:	0003      	movs	r3, r0
 8002486:	3215      	adds	r2, #21
 8002488:	3320      	adds	r3, #32
 800248a:	2a1c      	cmp	r2, #28
 800248c:	dc00      	bgt.n	8002490 <__aeabi_dmul+0x508>
 800248e:	e64e      	b.n	800212e <__aeabi_dmul+0x1a6>
 8002490:	0002      	movs	r2, r0
 8002492:	0034      	movs	r4, r6
 8002494:	3a08      	subs	r2, #8
 8002496:	2000      	movs	r0, #0
 8002498:	4094      	lsls	r4, r2
 800249a:	e652      	b.n	8002142 <__aeabi_dmul+0x1ba>
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	e604      	b.n	80020aa <__aeabi_dmul+0x122>
 80024a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <__aeabi_dmul+0x58c>)
 80024a2:	0021      	movs	r1, r4
 80024a4:	469c      	mov	ip, r3
 80024a6:	0003      	movs	r3, r0
 80024a8:	9d01      	ldr	r5, [sp, #4]
 80024aa:	40d3      	lsrs	r3, r2
 80024ac:	4465      	add	r5, ip
 80024ae:	40a9      	lsls	r1, r5
 80024b0:	4319      	orrs	r1, r3
 80024b2:	0003      	movs	r3, r0
 80024b4:	40ab      	lsls	r3, r5
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	4183      	sbcs	r3, r0
 80024ba:	4319      	orrs	r1, r3
 80024bc:	0008      	movs	r0, r1
 80024be:	40d4      	lsrs	r4, r2
 80024c0:	074b      	lsls	r3, r1, #29
 80024c2:	d009      	beq.n	80024d8 <__aeabi_dmul+0x550>
 80024c4:	230f      	movs	r3, #15
 80024c6:	400b      	ands	r3, r1
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d005      	beq.n	80024d8 <__aeabi_dmul+0x550>
 80024cc:	1d0b      	adds	r3, r1, #4
 80024ce:	428b      	cmp	r3, r1
 80024d0:	4180      	sbcs	r0, r0
 80024d2:	4240      	negs	r0, r0
 80024d4:	1824      	adds	r4, r4, r0
 80024d6:	0018      	movs	r0, r3
 80024d8:	0223      	lsls	r3, r4, #8
 80024da:	d400      	bmi.n	80024de <__aeabi_dmul+0x556>
 80024dc:	e6d6      	b.n	800228c <__aeabi_dmul+0x304>
 80024de:	2301      	movs	r3, #1
 80024e0:	2400      	movs	r4, #0
 80024e2:	2200      	movs	r2, #0
 80024e4:	e5a6      	b.n	8002034 <__aeabi_dmul+0xac>
 80024e6:	290f      	cmp	r1, #15
 80024e8:	d1aa      	bne.n	8002440 <__aeabi_dmul+0x4b8>
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	4652      	mov	r2, sl
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	421a      	tst	r2, r3
 80024f2:	d0a9      	beq.n	8002448 <__aeabi_dmul+0x4c0>
 80024f4:	421c      	tst	r4, r3
 80024f6:	d1a7      	bne.n	8002448 <__aeabi_dmul+0x4c0>
 80024f8:	431c      	orrs	r4, r3
 80024fa:	9b00      	ldr	r3, [sp, #0]
 80024fc:	0002      	movs	r2, r0
 80024fe:	469b      	mov	fp, r3
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <__aeabi_dmul+0x588>)
 8002502:	e597      	b.n	8002034 <__aeabi_dmul+0xac>
 8002504:	2400      	movs	r4, #0
 8002506:	e6c1      	b.n	800228c <__aeabi_dmul+0x304>
 8002508:	2400      	movs	r4, #0
 800250a:	4b01      	ldr	r3, [pc, #4]	@ (8002510 <__aeabi_dmul+0x588>)
 800250c:	0022      	movs	r2, r4
 800250e:	e591      	b.n	8002034 <__aeabi_dmul+0xac>
 8002510:	000007ff 	.word	0x000007ff
 8002514:	0000041e 	.word	0x0000041e

08002518 <__aeabi_dsub>:
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	464e      	mov	r6, r9
 800251c:	4645      	mov	r5, r8
 800251e:	46de      	mov	lr, fp
 8002520:	4657      	mov	r7, sl
 8002522:	b5e0      	push	{r5, r6, r7, lr}
 8002524:	b085      	sub	sp, #20
 8002526:	9000      	str	r0, [sp, #0]
 8002528:	9101      	str	r1, [sp, #4]
 800252a:	030c      	lsls	r4, r1, #12
 800252c:	004f      	lsls	r7, r1, #1
 800252e:	0fce      	lsrs	r6, r1, #31
 8002530:	0a61      	lsrs	r1, r4, #9
 8002532:	9c00      	ldr	r4, [sp, #0]
 8002534:	46b0      	mov	r8, r6
 8002536:	0f64      	lsrs	r4, r4, #29
 8002538:	430c      	orrs	r4, r1
 800253a:	9900      	ldr	r1, [sp, #0]
 800253c:	0d7f      	lsrs	r7, r7, #21
 800253e:	00c8      	lsls	r0, r1, #3
 8002540:	0011      	movs	r1, r2
 8002542:	001a      	movs	r2, r3
 8002544:	031b      	lsls	r3, r3, #12
 8002546:	469c      	mov	ip, r3
 8002548:	9100      	str	r1, [sp, #0]
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	0051      	lsls	r1, r2, #1
 800254e:	0d4b      	lsrs	r3, r1, #21
 8002550:	4699      	mov	r9, r3
 8002552:	9b01      	ldr	r3, [sp, #4]
 8002554:	9d00      	ldr	r5, [sp, #0]
 8002556:	0fd9      	lsrs	r1, r3, #31
 8002558:	4663      	mov	r3, ip
 800255a:	0f6a      	lsrs	r2, r5, #29
 800255c:	0a5b      	lsrs	r3, r3, #9
 800255e:	4313      	orrs	r3, r2
 8002560:	00ea      	lsls	r2, r5, #3
 8002562:	4694      	mov	ip, r2
 8002564:	4693      	mov	fp, r2
 8002566:	4ac1      	ldr	r2, [pc, #772]	@ (800286c <__aeabi_dsub+0x354>)
 8002568:	9003      	str	r0, [sp, #12]
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	4591      	cmp	r9, r2
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x5a>
 8002570:	e0cd      	b.n	800270e <__aeabi_dsub+0x1f6>
 8002572:	2501      	movs	r5, #1
 8002574:	4069      	eors	r1, r5
 8002576:	464d      	mov	r5, r9
 8002578:	1b7d      	subs	r5, r7, r5
 800257a:	46aa      	mov	sl, r5
 800257c:	428e      	cmp	r6, r1
 800257e:	d100      	bne.n	8002582 <__aeabi_dsub+0x6a>
 8002580:	e080      	b.n	8002684 <__aeabi_dsub+0x16c>
 8002582:	2d00      	cmp	r5, #0
 8002584:	dc00      	bgt.n	8002588 <__aeabi_dsub+0x70>
 8002586:	e335      	b.n	8002bf4 <__aeabi_dsub+0x6dc>
 8002588:	4649      	mov	r1, r9
 800258a:	2900      	cmp	r1, #0
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x78>
 800258e:	e0df      	b.n	8002750 <__aeabi_dsub+0x238>
 8002590:	4297      	cmp	r7, r2
 8002592:	d100      	bne.n	8002596 <__aeabi_dsub+0x7e>
 8002594:	e194      	b.n	80028c0 <__aeabi_dsub+0x3a8>
 8002596:	4652      	mov	r2, sl
 8002598:	2501      	movs	r5, #1
 800259a:	2a38      	cmp	r2, #56	@ 0x38
 800259c:	dc19      	bgt.n	80025d2 <__aeabi_dsub+0xba>
 800259e:	2280      	movs	r2, #128	@ 0x80
 80025a0:	9b02      	ldr	r3, [sp, #8]
 80025a2:	0412      	lsls	r2, r2, #16
 80025a4:	4313      	orrs	r3, r2
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	4652      	mov	r2, sl
 80025aa:	2a1f      	cmp	r2, #31
 80025ac:	dd00      	ble.n	80025b0 <__aeabi_dsub+0x98>
 80025ae:	e1e3      	b.n	8002978 <__aeabi_dsub+0x460>
 80025b0:	4653      	mov	r3, sl
 80025b2:	2220      	movs	r2, #32
 80025b4:	4661      	mov	r1, ip
 80025b6:	9d02      	ldr	r5, [sp, #8]
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	4095      	lsls	r5, r2
 80025bc:	40d9      	lsrs	r1, r3
 80025be:	430d      	orrs	r5, r1
 80025c0:	4661      	mov	r1, ip
 80025c2:	4091      	lsls	r1, r2
 80025c4:	000a      	movs	r2, r1
 80025c6:	1e51      	subs	r1, r2, #1
 80025c8:	418a      	sbcs	r2, r1
 80025ca:	4315      	orrs	r5, r2
 80025cc:	9a02      	ldr	r2, [sp, #8]
 80025ce:	40da      	lsrs	r2, r3
 80025d0:	1aa4      	subs	r4, r4, r2
 80025d2:	1b45      	subs	r5, r0, r5
 80025d4:	42a8      	cmp	r0, r5
 80025d6:	4180      	sbcs	r0, r0
 80025d8:	4240      	negs	r0, r0
 80025da:	1a24      	subs	r4, r4, r0
 80025dc:	0223      	lsls	r3, r4, #8
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dsub+0xca>
 80025e0:	e13d      	b.n	800285e <__aeabi_dsub+0x346>
 80025e2:	0264      	lsls	r4, r4, #9
 80025e4:	0a64      	lsrs	r4, r4, #9
 80025e6:	2c00      	cmp	r4, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0xd4>
 80025ea:	e147      	b.n	800287c <__aeabi_dsub+0x364>
 80025ec:	0020      	movs	r0, r4
 80025ee:	f000 fc4b 	bl	8002e88 <__clzsi2>
 80025f2:	0003      	movs	r3, r0
 80025f4:	3b08      	subs	r3, #8
 80025f6:	2120      	movs	r1, #32
 80025f8:	0028      	movs	r0, r5
 80025fa:	1aca      	subs	r2, r1, r3
 80025fc:	40d0      	lsrs	r0, r2
 80025fe:	409c      	lsls	r4, r3
 8002600:	0002      	movs	r2, r0
 8002602:	409d      	lsls	r5, r3
 8002604:	4322      	orrs	r2, r4
 8002606:	429f      	cmp	r7, r3
 8002608:	dd00      	ble.n	800260c <__aeabi_dsub+0xf4>
 800260a:	e177      	b.n	80028fc <__aeabi_dsub+0x3e4>
 800260c:	1bd8      	subs	r0, r3, r7
 800260e:	3001      	adds	r0, #1
 8002610:	1a09      	subs	r1, r1, r0
 8002612:	002c      	movs	r4, r5
 8002614:	408d      	lsls	r5, r1
 8002616:	40c4      	lsrs	r4, r0
 8002618:	1e6b      	subs	r3, r5, #1
 800261a:	419d      	sbcs	r5, r3
 800261c:	0013      	movs	r3, r2
 800261e:	40c2      	lsrs	r2, r0
 8002620:	408b      	lsls	r3, r1
 8002622:	4325      	orrs	r5, r4
 8002624:	2700      	movs	r7, #0
 8002626:	0014      	movs	r4, r2
 8002628:	431d      	orrs	r5, r3
 800262a:	076b      	lsls	r3, r5, #29
 800262c:	d009      	beq.n	8002642 <__aeabi_dsub+0x12a>
 800262e:	230f      	movs	r3, #15
 8002630:	402b      	ands	r3, r5
 8002632:	2b04      	cmp	r3, #4
 8002634:	d005      	beq.n	8002642 <__aeabi_dsub+0x12a>
 8002636:	1d2b      	adds	r3, r5, #4
 8002638:	42ab      	cmp	r3, r5
 800263a:	41ad      	sbcs	r5, r5
 800263c:	426d      	negs	r5, r5
 800263e:	1964      	adds	r4, r4, r5
 8002640:	001d      	movs	r5, r3
 8002642:	0223      	lsls	r3, r4, #8
 8002644:	d400      	bmi.n	8002648 <__aeabi_dsub+0x130>
 8002646:	e140      	b.n	80028ca <__aeabi_dsub+0x3b2>
 8002648:	4a88      	ldr	r2, [pc, #544]	@ (800286c <__aeabi_dsub+0x354>)
 800264a:	3701      	adds	r7, #1
 800264c:	4297      	cmp	r7, r2
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x13a>
 8002650:	e101      	b.n	8002856 <__aeabi_dsub+0x33e>
 8002652:	2601      	movs	r6, #1
 8002654:	4643      	mov	r3, r8
 8002656:	4986      	ldr	r1, [pc, #536]	@ (8002870 <__aeabi_dsub+0x358>)
 8002658:	08ed      	lsrs	r5, r5, #3
 800265a:	4021      	ands	r1, r4
 800265c:	074a      	lsls	r2, r1, #29
 800265e:	432a      	orrs	r2, r5
 8002660:	057c      	lsls	r4, r7, #21
 8002662:	024d      	lsls	r5, r1, #9
 8002664:	0b2d      	lsrs	r5, r5, #12
 8002666:	0d64      	lsrs	r4, r4, #21
 8002668:	401e      	ands	r6, r3
 800266a:	0524      	lsls	r4, r4, #20
 800266c:	432c      	orrs	r4, r5
 800266e:	07f6      	lsls	r6, r6, #31
 8002670:	4334      	orrs	r4, r6
 8002672:	0010      	movs	r0, r2
 8002674:	0021      	movs	r1, r4
 8002676:	b005      	add	sp, #20
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	2d00      	cmp	r5, #0
 8002686:	dc00      	bgt.n	800268a <__aeabi_dsub+0x172>
 8002688:	e2d0      	b.n	8002c2c <__aeabi_dsub+0x714>
 800268a:	4649      	mov	r1, r9
 800268c:	2900      	cmp	r1, #0
 800268e:	d000      	beq.n	8002692 <__aeabi_dsub+0x17a>
 8002690:	e0d4      	b.n	800283c <__aeabi_dsub+0x324>
 8002692:	4661      	mov	r1, ip
 8002694:	9b02      	ldr	r3, [sp, #8]
 8002696:	4319      	orrs	r1, r3
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x184>
 800269a:	e12b      	b.n	80028f4 <__aeabi_dsub+0x3dc>
 800269c:	1e69      	subs	r1, r5, #1
 800269e:	2d01      	cmp	r5, #1
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x18c>
 80026a2:	e1d9      	b.n	8002a58 <__aeabi_dsub+0x540>
 80026a4:	4295      	cmp	r5, r2
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x192>
 80026a8:	e10a      	b.n	80028c0 <__aeabi_dsub+0x3a8>
 80026aa:	2501      	movs	r5, #1
 80026ac:	2938      	cmp	r1, #56	@ 0x38
 80026ae:	dc17      	bgt.n	80026e0 <__aeabi_dsub+0x1c8>
 80026b0:	468a      	mov	sl, r1
 80026b2:	4653      	mov	r3, sl
 80026b4:	2b1f      	cmp	r3, #31
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dsub+0x1a2>
 80026b8:	e1e7      	b.n	8002a8a <__aeabi_dsub+0x572>
 80026ba:	2220      	movs	r2, #32
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	9b02      	ldr	r3, [sp, #8]
 80026c0:	4661      	mov	r1, ip
 80026c2:	4093      	lsls	r3, r2
 80026c4:	001d      	movs	r5, r3
 80026c6:	4653      	mov	r3, sl
 80026c8:	40d9      	lsrs	r1, r3
 80026ca:	4663      	mov	r3, ip
 80026cc:	4093      	lsls	r3, r2
 80026ce:	001a      	movs	r2, r3
 80026d0:	430d      	orrs	r5, r1
 80026d2:	1e51      	subs	r1, r2, #1
 80026d4:	418a      	sbcs	r2, r1
 80026d6:	4653      	mov	r3, sl
 80026d8:	4315      	orrs	r5, r2
 80026da:	9a02      	ldr	r2, [sp, #8]
 80026dc:	40da      	lsrs	r2, r3
 80026de:	18a4      	adds	r4, r4, r2
 80026e0:	182d      	adds	r5, r5, r0
 80026e2:	4285      	cmp	r5, r0
 80026e4:	4180      	sbcs	r0, r0
 80026e6:	4240      	negs	r0, r0
 80026e8:	1824      	adds	r4, r4, r0
 80026ea:	0223      	lsls	r3, r4, #8
 80026ec:	d400      	bmi.n	80026f0 <__aeabi_dsub+0x1d8>
 80026ee:	e0b6      	b.n	800285e <__aeabi_dsub+0x346>
 80026f0:	4b5e      	ldr	r3, [pc, #376]	@ (800286c <__aeabi_dsub+0x354>)
 80026f2:	3701      	adds	r7, #1
 80026f4:	429f      	cmp	r7, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x1e2>
 80026f8:	e0ad      	b.n	8002856 <__aeabi_dsub+0x33e>
 80026fa:	2101      	movs	r1, #1
 80026fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002870 <__aeabi_dsub+0x358>)
 80026fe:	086a      	lsrs	r2, r5, #1
 8002700:	401c      	ands	r4, r3
 8002702:	4029      	ands	r1, r5
 8002704:	430a      	orrs	r2, r1
 8002706:	07e5      	lsls	r5, r4, #31
 8002708:	4315      	orrs	r5, r2
 800270a:	0864      	lsrs	r4, r4, #1
 800270c:	e78d      	b.n	800262a <__aeabi_dsub+0x112>
 800270e:	4a59      	ldr	r2, [pc, #356]	@ (8002874 <__aeabi_dsub+0x35c>)
 8002710:	9b02      	ldr	r3, [sp, #8]
 8002712:	4692      	mov	sl, r2
 8002714:	4662      	mov	r2, ip
 8002716:	44ba      	add	sl, r7
 8002718:	431a      	orrs	r2, r3
 800271a:	d02c      	beq.n	8002776 <__aeabi_dsub+0x25e>
 800271c:	428e      	cmp	r6, r1
 800271e:	d02e      	beq.n	800277e <__aeabi_dsub+0x266>
 8002720:	4652      	mov	r2, sl
 8002722:	2a00      	cmp	r2, #0
 8002724:	d060      	beq.n	80027e8 <__aeabi_dsub+0x2d0>
 8002726:	2f00      	cmp	r7, #0
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x214>
 800272a:	e0db      	b.n	80028e4 <__aeabi_dsub+0x3cc>
 800272c:	4663      	mov	r3, ip
 800272e:	000e      	movs	r6, r1
 8002730:	9c02      	ldr	r4, [sp, #8]
 8002732:	08d8      	lsrs	r0, r3, #3
 8002734:	0762      	lsls	r2, r4, #29
 8002736:	4302      	orrs	r2, r0
 8002738:	08e4      	lsrs	r4, r4, #3
 800273a:	0013      	movs	r3, r2
 800273c:	4323      	orrs	r3, r4
 800273e:	d100      	bne.n	8002742 <__aeabi_dsub+0x22a>
 8002740:	e254      	b.n	8002bec <__aeabi_dsub+0x6d4>
 8002742:	2580      	movs	r5, #128	@ 0x80
 8002744:	032d      	lsls	r5, r5, #12
 8002746:	4325      	orrs	r5, r4
 8002748:	032d      	lsls	r5, r5, #12
 800274a:	4c48      	ldr	r4, [pc, #288]	@ (800286c <__aeabi_dsub+0x354>)
 800274c:	0b2d      	lsrs	r5, r5, #12
 800274e:	e78c      	b.n	800266a <__aeabi_dsub+0x152>
 8002750:	4661      	mov	r1, ip
 8002752:	9b02      	ldr	r3, [sp, #8]
 8002754:	4319      	orrs	r1, r3
 8002756:	d100      	bne.n	800275a <__aeabi_dsub+0x242>
 8002758:	e0cc      	b.n	80028f4 <__aeabi_dsub+0x3dc>
 800275a:	0029      	movs	r1, r5
 800275c:	3901      	subs	r1, #1
 800275e:	2d01      	cmp	r5, #1
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x24c>
 8002762:	e188      	b.n	8002a76 <__aeabi_dsub+0x55e>
 8002764:	4295      	cmp	r5, r2
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x252>
 8002768:	e0aa      	b.n	80028c0 <__aeabi_dsub+0x3a8>
 800276a:	2501      	movs	r5, #1
 800276c:	2938      	cmp	r1, #56	@ 0x38
 800276e:	dd00      	ble.n	8002772 <__aeabi_dsub+0x25a>
 8002770:	e72f      	b.n	80025d2 <__aeabi_dsub+0xba>
 8002772:	468a      	mov	sl, r1
 8002774:	e718      	b.n	80025a8 <__aeabi_dsub+0x90>
 8002776:	2201      	movs	r2, #1
 8002778:	4051      	eors	r1, r2
 800277a:	428e      	cmp	r6, r1
 800277c:	d1d0      	bne.n	8002720 <__aeabi_dsub+0x208>
 800277e:	4653      	mov	r3, sl
 8002780:	2b00      	cmp	r3, #0
 8002782:	d100      	bne.n	8002786 <__aeabi_dsub+0x26e>
 8002784:	e0be      	b.n	8002904 <__aeabi_dsub+0x3ec>
 8002786:	2f00      	cmp	r7, #0
 8002788:	d000      	beq.n	800278c <__aeabi_dsub+0x274>
 800278a:	e138      	b.n	80029fe <__aeabi_dsub+0x4e6>
 800278c:	46ca      	mov	sl, r9
 800278e:	0022      	movs	r2, r4
 8002790:	4302      	orrs	r2, r0
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x27e>
 8002794:	e1e2      	b.n	8002b5c <__aeabi_dsub+0x644>
 8002796:	4653      	mov	r3, sl
 8002798:	1e59      	subs	r1, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x288>
 800279e:	e20d      	b.n	8002bbc <__aeabi_dsub+0x6a4>
 80027a0:	4a32      	ldr	r2, [pc, #200]	@ (800286c <__aeabi_dsub+0x354>)
 80027a2:	4592      	cmp	sl, r2
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x290>
 80027a6:	e1d2      	b.n	8002b4e <__aeabi_dsub+0x636>
 80027a8:	2701      	movs	r7, #1
 80027aa:	2938      	cmp	r1, #56	@ 0x38
 80027ac:	dc13      	bgt.n	80027d6 <__aeabi_dsub+0x2be>
 80027ae:	291f      	cmp	r1, #31
 80027b0:	dd00      	ble.n	80027b4 <__aeabi_dsub+0x29c>
 80027b2:	e1ee      	b.n	8002b92 <__aeabi_dsub+0x67a>
 80027b4:	2220      	movs	r2, #32
 80027b6:	9b02      	ldr	r3, [sp, #8]
 80027b8:	1a52      	subs	r2, r2, r1
 80027ba:	0025      	movs	r5, r4
 80027bc:	0007      	movs	r7, r0
 80027be:	469a      	mov	sl, r3
 80027c0:	40cc      	lsrs	r4, r1
 80027c2:	4090      	lsls	r0, r2
 80027c4:	4095      	lsls	r5, r2
 80027c6:	40cf      	lsrs	r7, r1
 80027c8:	44a2      	add	sl, r4
 80027ca:	1e42      	subs	r2, r0, #1
 80027cc:	4190      	sbcs	r0, r2
 80027ce:	4653      	mov	r3, sl
 80027d0:	432f      	orrs	r7, r5
 80027d2:	4307      	orrs	r7, r0
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	003d      	movs	r5, r7
 80027d8:	4465      	add	r5, ip
 80027da:	4565      	cmp	r5, ip
 80027dc:	4192      	sbcs	r2, r2
 80027de:	9b02      	ldr	r3, [sp, #8]
 80027e0:	4252      	negs	r2, r2
 80027e2:	464f      	mov	r7, r9
 80027e4:	18d4      	adds	r4, r2, r3
 80027e6:	e780      	b.n	80026ea <__aeabi_dsub+0x1d2>
 80027e8:	4a23      	ldr	r2, [pc, #140]	@ (8002878 <__aeabi_dsub+0x360>)
 80027ea:	1c7d      	adds	r5, r7, #1
 80027ec:	4215      	tst	r5, r2
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x2da>
 80027f0:	e0aa      	b.n	8002948 <__aeabi_dsub+0x430>
 80027f2:	4662      	mov	r2, ip
 80027f4:	0025      	movs	r5, r4
 80027f6:	9b02      	ldr	r3, [sp, #8]
 80027f8:	4305      	orrs	r5, r0
 80027fa:	431a      	orrs	r2, r3
 80027fc:	2f00      	cmp	r7, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x2ea>
 8002800:	e0f5      	b.n	80029ee <__aeabi_dsub+0x4d6>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x2f0>
 8002806:	e16b      	b.n	8002ae0 <__aeabi_dsub+0x5c8>
 8002808:	2a00      	cmp	r2, #0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x2f6>
 800280c:	e152      	b.n	8002ab4 <__aeabi_dsub+0x59c>
 800280e:	4663      	mov	r3, ip
 8002810:	1ac5      	subs	r5, r0, r3
 8002812:	9b02      	ldr	r3, [sp, #8]
 8002814:	1ae2      	subs	r2, r4, r3
 8002816:	42a8      	cmp	r0, r5
 8002818:	419b      	sbcs	r3, r3
 800281a:	425b      	negs	r3, r3
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	d400      	bmi.n	8002824 <__aeabi_dsub+0x30c>
 8002822:	e1d5      	b.n	8002bd0 <__aeabi_dsub+0x6b8>
 8002824:	4663      	mov	r3, ip
 8002826:	1a1d      	subs	r5, r3, r0
 8002828:	45ac      	cmp	ip, r5
 800282a:	4192      	sbcs	r2, r2
 800282c:	2601      	movs	r6, #1
 800282e:	9b02      	ldr	r3, [sp, #8]
 8002830:	4252      	negs	r2, r2
 8002832:	1b1c      	subs	r4, r3, r4
 8002834:	4688      	mov	r8, r1
 8002836:	1aa4      	subs	r4, r4, r2
 8002838:	400e      	ands	r6, r1
 800283a:	e6f6      	b.n	800262a <__aeabi_dsub+0x112>
 800283c:	4297      	cmp	r7, r2
 800283e:	d03f      	beq.n	80028c0 <__aeabi_dsub+0x3a8>
 8002840:	4652      	mov	r2, sl
 8002842:	2501      	movs	r5, #1
 8002844:	2a38      	cmp	r2, #56	@ 0x38
 8002846:	dd00      	ble.n	800284a <__aeabi_dsub+0x332>
 8002848:	e74a      	b.n	80026e0 <__aeabi_dsub+0x1c8>
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	9b02      	ldr	r3, [sp, #8]
 800284e:	0412      	lsls	r2, r2, #16
 8002850:	4313      	orrs	r3, r2
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	e72d      	b.n	80026b2 <__aeabi_dsub+0x19a>
 8002856:	003c      	movs	r4, r7
 8002858:	2500      	movs	r5, #0
 800285a:	2200      	movs	r2, #0
 800285c:	e705      	b.n	800266a <__aeabi_dsub+0x152>
 800285e:	2307      	movs	r3, #7
 8002860:	402b      	ands	r3, r5
 8002862:	2b00      	cmp	r3, #0
 8002864:	d000      	beq.n	8002868 <__aeabi_dsub+0x350>
 8002866:	e6e2      	b.n	800262e <__aeabi_dsub+0x116>
 8002868:	e06b      	b.n	8002942 <__aeabi_dsub+0x42a>
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	000007ff 	.word	0x000007ff
 8002870:	ff7fffff 	.word	0xff7fffff
 8002874:	fffff801 	.word	0xfffff801
 8002878:	000007fe 	.word	0x000007fe
 800287c:	0028      	movs	r0, r5
 800287e:	f000 fb03 	bl	8002e88 <__clzsi2>
 8002882:	0003      	movs	r3, r0
 8002884:	3318      	adds	r3, #24
 8002886:	2b1f      	cmp	r3, #31
 8002888:	dc00      	bgt.n	800288c <__aeabi_dsub+0x374>
 800288a:	e6b4      	b.n	80025f6 <__aeabi_dsub+0xde>
 800288c:	002a      	movs	r2, r5
 800288e:	3808      	subs	r0, #8
 8002890:	4082      	lsls	r2, r0
 8002892:	429f      	cmp	r7, r3
 8002894:	dd00      	ble.n	8002898 <__aeabi_dsub+0x380>
 8002896:	e0b9      	b.n	8002a0c <__aeabi_dsub+0x4f4>
 8002898:	1bdb      	subs	r3, r3, r7
 800289a:	1c58      	adds	r0, r3, #1
 800289c:	281f      	cmp	r0, #31
 800289e:	dc00      	bgt.n	80028a2 <__aeabi_dsub+0x38a>
 80028a0:	e1a0      	b.n	8002be4 <__aeabi_dsub+0x6cc>
 80028a2:	0015      	movs	r5, r2
 80028a4:	3b1f      	subs	r3, #31
 80028a6:	40dd      	lsrs	r5, r3
 80028a8:	2820      	cmp	r0, #32
 80028aa:	d005      	beq.n	80028b8 <__aeabi_dsub+0x3a0>
 80028ac:	2340      	movs	r3, #64	@ 0x40
 80028ae:	1a1b      	subs	r3, r3, r0
 80028b0:	409a      	lsls	r2, r3
 80028b2:	1e53      	subs	r3, r2, #1
 80028b4:	419a      	sbcs	r2, r3
 80028b6:	4315      	orrs	r5, r2
 80028b8:	2307      	movs	r3, #7
 80028ba:	2700      	movs	r7, #0
 80028bc:	402b      	ands	r3, r5
 80028be:	e7d0      	b.n	8002862 <__aeabi_dsub+0x34a>
 80028c0:	08c0      	lsrs	r0, r0, #3
 80028c2:	0762      	lsls	r2, r4, #29
 80028c4:	4302      	orrs	r2, r0
 80028c6:	08e4      	lsrs	r4, r4, #3
 80028c8:	e737      	b.n	800273a <__aeabi_dsub+0x222>
 80028ca:	08ea      	lsrs	r2, r5, #3
 80028cc:	0763      	lsls	r3, r4, #29
 80028ce:	431a      	orrs	r2, r3
 80028d0:	4bd3      	ldr	r3, [pc, #844]	@ (8002c20 <__aeabi_dsub+0x708>)
 80028d2:	08e4      	lsrs	r4, r4, #3
 80028d4:	429f      	cmp	r7, r3
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x3c2>
 80028d8:	e72f      	b.n	800273a <__aeabi_dsub+0x222>
 80028da:	0324      	lsls	r4, r4, #12
 80028dc:	0b25      	lsrs	r5, r4, #12
 80028de:	057c      	lsls	r4, r7, #21
 80028e0:	0d64      	lsrs	r4, r4, #21
 80028e2:	e6c2      	b.n	800266a <__aeabi_dsub+0x152>
 80028e4:	46ca      	mov	sl, r9
 80028e6:	0022      	movs	r2, r4
 80028e8:	4302      	orrs	r2, r0
 80028ea:	d158      	bne.n	800299e <__aeabi_dsub+0x486>
 80028ec:	4663      	mov	r3, ip
 80028ee:	000e      	movs	r6, r1
 80028f0:	9c02      	ldr	r4, [sp, #8]
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	4657      	mov	r7, sl
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	e7e7      	b.n	80028cc <__aeabi_dsub+0x3b4>
 80028fc:	4cc9      	ldr	r4, [pc, #804]	@ (8002c24 <__aeabi_dsub+0x70c>)
 80028fe:	1aff      	subs	r7, r7, r3
 8002900:	4014      	ands	r4, r2
 8002902:	e692      	b.n	800262a <__aeabi_dsub+0x112>
 8002904:	4dc8      	ldr	r5, [pc, #800]	@ (8002c28 <__aeabi_dsub+0x710>)
 8002906:	1c7a      	adds	r2, r7, #1
 8002908:	422a      	tst	r2, r5
 800290a:	d000      	beq.n	800290e <__aeabi_dsub+0x3f6>
 800290c:	e084      	b.n	8002a18 <__aeabi_dsub+0x500>
 800290e:	0022      	movs	r2, r4
 8002910:	4302      	orrs	r2, r0
 8002912:	2f00      	cmp	r7, #0
 8002914:	d000      	beq.n	8002918 <__aeabi_dsub+0x400>
 8002916:	e0ef      	b.n	8002af8 <__aeabi_dsub+0x5e0>
 8002918:	2a00      	cmp	r2, #0
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x406>
 800291c:	e0e5      	b.n	8002aea <__aeabi_dsub+0x5d2>
 800291e:	4662      	mov	r2, ip
 8002920:	9902      	ldr	r1, [sp, #8]
 8002922:	430a      	orrs	r2, r1
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x410>
 8002926:	e0c5      	b.n	8002ab4 <__aeabi_dsub+0x59c>
 8002928:	4663      	mov	r3, ip
 800292a:	18c5      	adds	r5, r0, r3
 800292c:	468c      	mov	ip, r1
 800292e:	4285      	cmp	r5, r0
 8002930:	4180      	sbcs	r0, r0
 8002932:	4464      	add	r4, ip
 8002934:	4240      	negs	r0, r0
 8002936:	1824      	adds	r4, r4, r0
 8002938:	0223      	lsls	r3, r4, #8
 800293a:	d502      	bpl.n	8002942 <__aeabi_dsub+0x42a>
 800293c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c24 <__aeabi_dsub+0x70c>)
 800293e:	3701      	adds	r7, #1
 8002940:	401c      	ands	r4, r3
 8002942:	46ba      	mov	sl, r7
 8002944:	9503      	str	r5, [sp, #12]
 8002946:	e7d5      	b.n	80028f4 <__aeabi_dsub+0x3dc>
 8002948:	4662      	mov	r2, ip
 800294a:	1a85      	subs	r5, r0, r2
 800294c:	42a8      	cmp	r0, r5
 800294e:	4192      	sbcs	r2, r2
 8002950:	4252      	negs	r2, r2
 8002952:	4691      	mov	r9, r2
 8002954:	9b02      	ldr	r3, [sp, #8]
 8002956:	1ae3      	subs	r3, r4, r3
 8002958:	001a      	movs	r2, r3
 800295a:	464b      	mov	r3, r9
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	0013      	movs	r3, r2
 8002960:	4691      	mov	r9, r2
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	d46c      	bmi.n	8002a40 <__aeabi_dsub+0x528>
 8002966:	464a      	mov	r2, r9
 8002968:	464c      	mov	r4, r9
 800296a:	432a      	orrs	r2, r5
 800296c:	d000      	beq.n	8002970 <__aeabi_dsub+0x458>
 800296e:	e63a      	b.n	80025e6 <__aeabi_dsub+0xce>
 8002970:	2600      	movs	r6, #0
 8002972:	2400      	movs	r4, #0
 8002974:	2500      	movs	r5, #0
 8002976:	e678      	b.n	800266a <__aeabi_dsub+0x152>
 8002978:	9902      	ldr	r1, [sp, #8]
 800297a:	4653      	mov	r3, sl
 800297c:	000d      	movs	r5, r1
 800297e:	3a20      	subs	r2, #32
 8002980:	40d5      	lsrs	r5, r2
 8002982:	2b20      	cmp	r3, #32
 8002984:	d006      	beq.n	8002994 <__aeabi_dsub+0x47c>
 8002986:	2240      	movs	r2, #64	@ 0x40
 8002988:	1ad2      	subs	r2, r2, r3
 800298a:	000b      	movs	r3, r1
 800298c:	4093      	lsls	r3, r2
 800298e:	4662      	mov	r2, ip
 8002990:	431a      	orrs	r2, r3
 8002992:	4693      	mov	fp, r2
 8002994:	465b      	mov	r3, fp
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	4193      	sbcs	r3, r2
 800299a:	431d      	orrs	r5, r3
 800299c:	e619      	b.n	80025d2 <__aeabi_dsub+0xba>
 800299e:	4653      	mov	r3, sl
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x490>
 80029a6:	e0c6      	b.n	8002b36 <__aeabi_dsub+0x61e>
 80029a8:	4e9d      	ldr	r6, [pc, #628]	@ (8002c20 <__aeabi_dsub+0x708>)
 80029aa:	45b2      	cmp	sl, r6
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x498>
 80029ae:	e6bd      	b.n	800272c <__aeabi_dsub+0x214>
 80029b0:	4688      	mov	r8, r1
 80029b2:	000e      	movs	r6, r1
 80029b4:	2501      	movs	r5, #1
 80029b6:	2a38      	cmp	r2, #56	@ 0x38
 80029b8:	dc10      	bgt.n	80029dc <__aeabi_dsub+0x4c4>
 80029ba:	2a1f      	cmp	r2, #31
 80029bc:	dc7f      	bgt.n	8002abe <__aeabi_dsub+0x5a6>
 80029be:	2120      	movs	r1, #32
 80029c0:	0025      	movs	r5, r4
 80029c2:	1a89      	subs	r1, r1, r2
 80029c4:	0007      	movs	r7, r0
 80029c6:	4088      	lsls	r0, r1
 80029c8:	408d      	lsls	r5, r1
 80029ca:	40d7      	lsrs	r7, r2
 80029cc:	40d4      	lsrs	r4, r2
 80029ce:	1e41      	subs	r1, r0, #1
 80029d0:	4188      	sbcs	r0, r1
 80029d2:	9b02      	ldr	r3, [sp, #8]
 80029d4:	433d      	orrs	r5, r7
 80029d6:	1b1b      	subs	r3, r3, r4
 80029d8:	4305      	orrs	r5, r0
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	4662      	mov	r2, ip
 80029de:	1b55      	subs	r5, r2, r5
 80029e0:	45ac      	cmp	ip, r5
 80029e2:	4192      	sbcs	r2, r2
 80029e4:	9b02      	ldr	r3, [sp, #8]
 80029e6:	4252      	negs	r2, r2
 80029e8:	464f      	mov	r7, r9
 80029ea:	1a9c      	subs	r4, r3, r2
 80029ec:	e5f6      	b.n	80025dc <__aeabi_dsub+0xc4>
 80029ee:	2d00      	cmp	r5, #0
 80029f0:	d000      	beq.n	80029f4 <__aeabi_dsub+0x4dc>
 80029f2:	e0b7      	b.n	8002b64 <__aeabi_dsub+0x64c>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x4e2>
 80029f8:	e0f0      	b.n	8002bdc <__aeabi_dsub+0x6c4>
 80029fa:	2601      	movs	r6, #1
 80029fc:	400e      	ands	r6, r1
 80029fe:	4663      	mov	r3, ip
 8002a00:	9802      	ldr	r0, [sp, #8]
 8002a02:	08d9      	lsrs	r1, r3, #3
 8002a04:	0742      	lsls	r2, r0, #29
 8002a06:	430a      	orrs	r2, r1
 8002a08:	08c4      	lsrs	r4, r0, #3
 8002a0a:	e696      	b.n	800273a <__aeabi_dsub+0x222>
 8002a0c:	4c85      	ldr	r4, [pc, #532]	@ (8002c24 <__aeabi_dsub+0x70c>)
 8002a0e:	1aff      	subs	r7, r7, r3
 8002a10:	4014      	ands	r4, r2
 8002a12:	0762      	lsls	r2, r4, #29
 8002a14:	08e4      	lsrs	r4, r4, #3
 8002a16:	e760      	b.n	80028da <__aeabi_dsub+0x3c2>
 8002a18:	4981      	ldr	r1, [pc, #516]	@ (8002c20 <__aeabi_dsub+0x708>)
 8002a1a:	428a      	cmp	r2, r1
 8002a1c:	d100      	bne.n	8002a20 <__aeabi_dsub+0x508>
 8002a1e:	e0c9      	b.n	8002bb4 <__aeabi_dsub+0x69c>
 8002a20:	4663      	mov	r3, ip
 8002a22:	18c1      	adds	r1, r0, r3
 8002a24:	4281      	cmp	r1, r0
 8002a26:	4180      	sbcs	r0, r0
 8002a28:	9b02      	ldr	r3, [sp, #8]
 8002a2a:	4240      	negs	r0, r0
 8002a2c:	18e3      	adds	r3, r4, r3
 8002a2e:	181b      	adds	r3, r3, r0
 8002a30:	07dd      	lsls	r5, r3, #31
 8002a32:	085c      	lsrs	r4, r3, #1
 8002a34:	2307      	movs	r3, #7
 8002a36:	0849      	lsrs	r1, r1, #1
 8002a38:	430d      	orrs	r5, r1
 8002a3a:	0017      	movs	r7, r2
 8002a3c:	402b      	ands	r3, r5
 8002a3e:	e710      	b.n	8002862 <__aeabi_dsub+0x34a>
 8002a40:	4663      	mov	r3, ip
 8002a42:	1a1d      	subs	r5, r3, r0
 8002a44:	45ac      	cmp	ip, r5
 8002a46:	4192      	sbcs	r2, r2
 8002a48:	2601      	movs	r6, #1
 8002a4a:	9b02      	ldr	r3, [sp, #8]
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	1b1c      	subs	r4, r3, r4
 8002a50:	4688      	mov	r8, r1
 8002a52:	1aa4      	subs	r4, r4, r2
 8002a54:	400e      	ands	r6, r1
 8002a56:	e5c6      	b.n	80025e6 <__aeabi_dsub+0xce>
 8002a58:	4663      	mov	r3, ip
 8002a5a:	18c5      	adds	r5, r0, r3
 8002a5c:	9b02      	ldr	r3, [sp, #8]
 8002a5e:	4285      	cmp	r5, r0
 8002a60:	4180      	sbcs	r0, r0
 8002a62:	469c      	mov	ip, r3
 8002a64:	4240      	negs	r0, r0
 8002a66:	4464      	add	r4, ip
 8002a68:	1824      	adds	r4, r4, r0
 8002a6a:	2701      	movs	r7, #1
 8002a6c:	0223      	lsls	r3, r4, #8
 8002a6e:	d400      	bmi.n	8002a72 <__aeabi_dsub+0x55a>
 8002a70:	e6f5      	b.n	800285e <__aeabi_dsub+0x346>
 8002a72:	2702      	movs	r7, #2
 8002a74:	e641      	b.n	80026fa <__aeabi_dsub+0x1e2>
 8002a76:	4663      	mov	r3, ip
 8002a78:	1ac5      	subs	r5, r0, r3
 8002a7a:	42a8      	cmp	r0, r5
 8002a7c:	4180      	sbcs	r0, r0
 8002a7e:	9b02      	ldr	r3, [sp, #8]
 8002a80:	4240      	negs	r0, r0
 8002a82:	1ae4      	subs	r4, r4, r3
 8002a84:	2701      	movs	r7, #1
 8002a86:	1a24      	subs	r4, r4, r0
 8002a88:	e5a8      	b.n	80025dc <__aeabi_dsub+0xc4>
 8002a8a:	9d02      	ldr	r5, [sp, #8]
 8002a8c:	4652      	mov	r2, sl
 8002a8e:	002b      	movs	r3, r5
 8002a90:	3a20      	subs	r2, #32
 8002a92:	40d3      	lsrs	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	4653      	mov	r3, sl
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d006      	beq.n	8002aaa <__aeabi_dsub+0x592>
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	002b      	movs	r3, r5
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	4662      	mov	r2, ip
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	4693      	mov	fp, r2
 8002aaa:	465d      	mov	r5, fp
 8002aac:	1e6b      	subs	r3, r5, #1
 8002aae:	419d      	sbcs	r5, r3
 8002ab0:	430d      	orrs	r5, r1
 8002ab2:	e615      	b.n	80026e0 <__aeabi_dsub+0x1c8>
 8002ab4:	0762      	lsls	r2, r4, #29
 8002ab6:	08c0      	lsrs	r0, r0, #3
 8002ab8:	4302      	orrs	r2, r0
 8002aba:	08e4      	lsrs	r4, r4, #3
 8002abc:	e70d      	b.n	80028da <__aeabi_dsub+0x3c2>
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0027      	movs	r7, r4
 8002ac2:	3920      	subs	r1, #32
 8002ac4:	40cf      	lsrs	r7, r1
 8002ac6:	2a20      	cmp	r2, #32
 8002ac8:	d005      	beq.n	8002ad6 <__aeabi_dsub+0x5be>
 8002aca:	2140      	movs	r1, #64	@ 0x40
 8002acc:	1a8a      	subs	r2, r1, r2
 8002ace:	4094      	lsls	r4, r2
 8002ad0:	0025      	movs	r5, r4
 8002ad2:	4305      	orrs	r5, r0
 8002ad4:	9503      	str	r5, [sp, #12]
 8002ad6:	9d03      	ldr	r5, [sp, #12]
 8002ad8:	1e6a      	subs	r2, r5, #1
 8002ada:	4195      	sbcs	r5, r2
 8002adc:	433d      	orrs	r5, r7
 8002ade:	e77d      	b.n	80029dc <__aeabi_dsub+0x4c4>
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d100      	bne.n	8002ae6 <__aeabi_dsub+0x5ce>
 8002ae4:	e744      	b.n	8002970 <__aeabi_dsub+0x458>
 8002ae6:	2601      	movs	r6, #1
 8002ae8:	400e      	ands	r6, r1
 8002aea:	4663      	mov	r3, ip
 8002aec:	08d9      	lsrs	r1, r3, #3
 8002aee:	9b02      	ldr	r3, [sp, #8]
 8002af0:	075a      	lsls	r2, r3, #29
 8002af2:	430a      	orrs	r2, r1
 8002af4:	08dc      	lsrs	r4, r3, #3
 8002af6:	e6f0      	b.n	80028da <__aeabi_dsub+0x3c2>
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d028      	beq.n	8002b4e <__aeabi_dsub+0x636>
 8002afc:	4662      	mov	r2, ip
 8002afe:	9f02      	ldr	r7, [sp, #8]
 8002b00:	08c0      	lsrs	r0, r0, #3
 8002b02:	433a      	orrs	r2, r7
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x5f0>
 8002b06:	e6dc      	b.n	80028c2 <__aeabi_dsub+0x3aa>
 8002b08:	0762      	lsls	r2, r4, #29
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	08e4      	lsrs	r4, r4, #3
 8002b10:	0312      	lsls	r2, r2, #12
 8002b12:	4214      	tst	r4, r2
 8002b14:	d009      	beq.n	8002b2a <__aeabi_dsub+0x612>
 8002b16:	08fd      	lsrs	r5, r7, #3
 8002b18:	4215      	tst	r5, r2
 8002b1a:	d106      	bne.n	8002b2a <__aeabi_dsub+0x612>
 8002b1c:	4663      	mov	r3, ip
 8002b1e:	2601      	movs	r6, #1
 8002b20:	002c      	movs	r4, r5
 8002b22:	08d8      	lsrs	r0, r3, #3
 8002b24:	077b      	lsls	r3, r7, #29
 8002b26:	4318      	orrs	r0, r3
 8002b28:	400e      	ands	r6, r1
 8002b2a:	0f42      	lsrs	r2, r0, #29
 8002b2c:	00c0      	lsls	r0, r0, #3
 8002b2e:	08c0      	lsrs	r0, r0, #3
 8002b30:	0752      	lsls	r2, r2, #29
 8002b32:	4302      	orrs	r2, r0
 8002b34:	e601      	b.n	800273a <__aeabi_dsub+0x222>
 8002b36:	4663      	mov	r3, ip
 8002b38:	1a1d      	subs	r5, r3, r0
 8002b3a:	45ac      	cmp	ip, r5
 8002b3c:	4192      	sbcs	r2, r2
 8002b3e:	9b02      	ldr	r3, [sp, #8]
 8002b40:	4252      	negs	r2, r2
 8002b42:	1b1c      	subs	r4, r3, r4
 8002b44:	000e      	movs	r6, r1
 8002b46:	4688      	mov	r8, r1
 8002b48:	2701      	movs	r7, #1
 8002b4a:	1aa4      	subs	r4, r4, r2
 8002b4c:	e546      	b.n	80025dc <__aeabi_dsub+0xc4>
 8002b4e:	4663      	mov	r3, ip
 8002b50:	08d9      	lsrs	r1, r3, #3
 8002b52:	9b02      	ldr	r3, [sp, #8]
 8002b54:	075a      	lsls	r2, r3, #29
 8002b56:	430a      	orrs	r2, r1
 8002b58:	08dc      	lsrs	r4, r3, #3
 8002b5a:	e5ee      	b.n	800273a <__aeabi_dsub+0x222>
 8002b5c:	4663      	mov	r3, ip
 8002b5e:	9c02      	ldr	r4, [sp, #8]
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	e6c7      	b.n	80028f4 <__aeabi_dsub+0x3dc>
 8002b64:	08c0      	lsrs	r0, r0, #3
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x654>
 8002b6a:	e6aa      	b.n	80028c2 <__aeabi_dsub+0x3aa>
 8002b6c:	0762      	lsls	r2, r4, #29
 8002b6e:	4310      	orrs	r0, r2
 8002b70:	2280      	movs	r2, #128	@ 0x80
 8002b72:	08e4      	lsrs	r4, r4, #3
 8002b74:	0312      	lsls	r2, r2, #12
 8002b76:	4214      	tst	r4, r2
 8002b78:	d0d7      	beq.n	8002b2a <__aeabi_dsub+0x612>
 8002b7a:	9f02      	ldr	r7, [sp, #8]
 8002b7c:	08fd      	lsrs	r5, r7, #3
 8002b7e:	4215      	tst	r5, r2
 8002b80:	d1d3      	bne.n	8002b2a <__aeabi_dsub+0x612>
 8002b82:	4663      	mov	r3, ip
 8002b84:	2601      	movs	r6, #1
 8002b86:	08d8      	lsrs	r0, r3, #3
 8002b88:	077b      	lsls	r3, r7, #29
 8002b8a:	002c      	movs	r4, r5
 8002b8c:	4318      	orrs	r0, r3
 8002b8e:	400e      	ands	r6, r1
 8002b90:	e7cb      	b.n	8002b2a <__aeabi_dsub+0x612>
 8002b92:	000a      	movs	r2, r1
 8002b94:	0027      	movs	r7, r4
 8002b96:	3a20      	subs	r2, #32
 8002b98:	40d7      	lsrs	r7, r2
 8002b9a:	2920      	cmp	r1, #32
 8002b9c:	d005      	beq.n	8002baa <__aeabi_dsub+0x692>
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	1a52      	subs	r2, r2, r1
 8002ba2:	4094      	lsls	r4, r2
 8002ba4:	0025      	movs	r5, r4
 8002ba6:	4305      	orrs	r5, r0
 8002ba8:	9503      	str	r5, [sp, #12]
 8002baa:	9d03      	ldr	r5, [sp, #12]
 8002bac:	1e6a      	subs	r2, r5, #1
 8002bae:	4195      	sbcs	r5, r2
 8002bb0:	432f      	orrs	r7, r5
 8002bb2:	e610      	b.n	80027d6 <__aeabi_dsub+0x2be>
 8002bb4:	0014      	movs	r4, r2
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	e556      	b.n	800266a <__aeabi_dsub+0x152>
 8002bbc:	9b02      	ldr	r3, [sp, #8]
 8002bbe:	4460      	add	r0, ip
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4560      	cmp	r0, ip
 8002bc4:	4192      	sbcs	r2, r2
 8002bc6:	444c      	add	r4, r9
 8002bc8:	4252      	negs	r2, r2
 8002bca:	0005      	movs	r5, r0
 8002bcc:	18a4      	adds	r4, r4, r2
 8002bce:	e74c      	b.n	8002a6a <__aeabi_dsub+0x552>
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	001c      	movs	r4, r3
 8002bd4:	432a      	orrs	r2, r5
 8002bd6:	d000      	beq.n	8002bda <__aeabi_dsub+0x6c2>
 8002bd8:	e6b3      	b.n	8002942 <__aeabi_dsub+0x42a>
 8002bda:	e6c9      	b.n	8002970 <__aeabi_dsub+0x458>
 8002bdc:	2480      	movs	r4, #128	@ 0x80
 8002bde:	2600      	movs	r6, #0
 8002be0:	0324      	lsls	r4, r4, #12
 8002be2:	e5ae      	b.n	8002742 <__aeabi_dsub+0x22a>
 8002be4:	2120      	movs	r1, #32
 8002be6:	2500      	movs	r5, #0
 8002be8:	1a09      	subs	r1, r1, r0
 8002bea:	e517      	b.n	800261c <__aeabi_dsub+0x104>
 8002bec:	2200      	movs	r2, #0
 8002bee:	2500      	movs	r5, #0
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8002c20 <__aeabi_dsub+0x708>)
 8002bf2:	e53a      	b.n	800266a <__aeabi_dsub+0x152>
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	d100      	bne.n	8002bfa <__aeabi_dsub+0x6e2>
 8002bf8:	e5f6      	b.n	80027e8 <__aeabi_dsub+0x2d0>
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1bda      	subs	r2, r3, r7
 8002bfe:	4692      	mov	sl, r2
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	d100      	bne.n	8002c06 <__aeabi_dsub+0x6ee>
 8002c04:	e66f      	b.n	80028e6 <__aeabi_dsub+0x3ce>
 8002c06:	2a38      	cmp	r2, #56	@ 0x38
 8002c08:	dc05      	bgt.n	8002c16 <__aeabi_dsub+0x6fe>
 8002c0a:	2680      	movs	r6, #128	@ 0x80
 8002c0c:	0436      	lsls	r6, r6, #16
 8002c0e:	4334      	orrs	r4, r6
 8002c10:	4688      	mov	r8, r1
 8002c12:	000e      	movs	r6, r1
 8002c14:	e6d1      	b.n	80029ba <__aeabi_dsub+0x4a2>
 8002c16:	4688      	mov	r8, r1
 8002c18:	000e      	movs	r6, r1
 8002c1a:	2501      	movs	r5, #1
 8002c1c:	e6de      	b.n	80029dc <__aeabi_dsub+0x4c4>
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	000007ff 	.word	0x000007ff
 8002c24:	ff7fffff 	.word	0xff7fffff
 8002c28:	000007fe 	.word	0x000007fe
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d100      	bne.n	8002c32 <__aeabi_dsub+0x71a>
 8002c30:	e668      	b.n	8002904 <__aeabi_dsub+0x3ec>
 8002c32:	464b      	mov	r3, r9
 8002c34:	1bd9      	subs	r1, r3, r7
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d101      	bne.n	8002c3e <__aeabi_dsub+0x726>
 8002c3a:	468a      	mov	sl, r1
 8002c3c:	e5a7      	b.n	800278e <__aeabi_dsub+0x276>
 8002c3e:	2701      	movs	r7, #1
 8002c40:	2938      	cmp	r1, #56	@ 0x38
 8002c42:	dd00      	ble.n	8002c46 <__aeabi_dsub+0x72e>
 8002c44:	e5c7      	b.n	80027d6 <__aeabi_dsub+0x2be>
 8002c46:	2280      	movs	r2, #128	@ 0x80
 8002c48:	0412      	lsls	r2, r2, #16
 8002c4a:	4314      	orrs	r4, r2
 8002c4c:	e5af      	b.n	80027ae <__aeabi_dsub+0x296>
 8002c4e:	46c0      	nop			@ (mov r8, r8)

08002c50 <__aeabi_dcmpun>:
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	46c6      	mov	lr, r8
 8002c54:	031e      	lsls	r6, r3, #12
 8002c56:	0b36      	lsrs	r6, r6, #12
 8002c58:	46b0      	mov	r8, r6
 8002c5a:	4e0d      	ldr	r6, [pc, #52]	@ (8002c90 <__aeabi_dcmpun+0x40>)
 8002c5c:	030c      	lsls	r4, r1, #12
 8002c5e:	004d      	lsls	r5, r1, #1
 8002c60:	005f      	lsls	r7, r3, #1
 8002c62:	b500      	push	{lr}
 8002c64:	0b24      	lsrs	r4, r4, #12
 8002c66:	0d6d      	lsrs	r5, r5, #21
 8002c68:	0d7f      	lsrs	r7, r7, #21
 8002c6a:	42b5      	cmp	r5, r6
 8002c6c:	d00b      	beq.n	8002c86 <__aeabi_dcmpun+0x36>
 8002c6e:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <__aeabi_dcmpun+0x40>)
 8002c70:	2000      	movs	r0, #0
 8002c72:	428f      	cmp	r7, r1
 8002c74:	d104      	bne.n	8002c80 <__aeabi_dcmpun+0x30>
 8002c76:	4646      	mov	r6, r8
 8002c78:	4316      	orrs	r6, r2
 8002c7a:	0030      	movs	r0, r6
 8002c7c:	1e43      	subs	r3, r0, #1
 8002c7e:	4198      	sbcs	r0, r3
 8002c80:	bc80      	pop	{r7}
 8002c82:	46b8      	mov	r8, r7
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	4304      	orrs	r4, r0
 8002c88:	2001      	movs	r0, #1
 8002c8a:	2c00      	cmp	r4, #0
 8002c8c:	d1f8      	bne.n	8002c80 <__aeabi_dcmpun+0x30>
 8002c8e:	e7ee      	b.n	8002c6e <__aeabi_dcmpun+0x1e>
 8002c90:	000007ff 	.word	0x000007ff

08002c94 <__aeabi_i2d>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d016      	beq.n	8002cc8 <__aeabi_i2d+0x34>
 8002c9a:	17c3      	asrs	r3, r0, #31
 8002c9c:	18c5      	adds	r5, r0, r3
 8002c9e:	405d      	eors	r5, r3
 8002ca0:	0fc4      	lsrs	r4, r0, #31
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	f000 f8f0 	bl	8002e88 <__clzsi2>
 8002ca8:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <__aeabi_i2d+0x58>)
 8002caa:	1a1b      	subs	r3, r3, r0
 8002cac:	055b      	lsls	r3, r3, #21
 8002cae:	0d5b      	lsrs	r3, r3, #21
 8002cb0:	280a      	cmp	r0, #10
 8002cb2:	dc14      	bgt.n	8002cde <__aeabi_i2d+0x4a>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	002e      	movs	r6, r5
 8002cb8:	3215      	adds	r2, #21
 8002cba:	4096      	lsls	r6, r2
 8002cbc:	220b      	movs	r2, #11
 8002cbe:	1a12      	subs	r2, r2, r0
 8002cc0:	40d5      	lsrs	r5, r2
 8002cc2:	032d      	lsls	r5, r5, #12
 8002cc4:	0b2d      	lsrs	r5, r5, #12
 8002cc6:	e003      	b.n	8002cd0 <__aeabi_i2d+0x3c>
 8002cc8:	2400      	movs	r4, #0
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2500      	movs	r5, #0
 8002cce:	2600      	movs	r6, #0
 8002cd0:	051b      	lsls	r3, r3, #20
 8002cd2:	432b      	orrs	r3, r5
 8002cd4:	07e4      	lsls	r4, r4, #31
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	0030      	movs	r0, r6
 8002cda:	0019      	movs	r1, r3
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
 8002cde:	380b      	subs	r0, #11
 8002ce0:	4085      	lsls	r5, r0
 8002ce2:	032d      	lsls	r5, r5, #12
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	0b2d      	lsrs	r5, r5, #12
 8002ce8:	e7f2      	b.n	8002cd0 <__aeabi_i2d+0x3c>
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	0000041e 	.word	0x0000041e

08002cf0 <__aeabi_f2d>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	0242      	lsls	r2, r0, #9
 8002cf4:	0043      	lsls	r3, r0, #1
 8002cf6:	0fc4      	lsrs	r4, r0, #31
 8002cf8:	20fe      	movs	r0, #254	@ 0xfe
 8002cfa:	0e1b      	lsrs	r3, r3, #24
 8002cfc:	1c59      	adds	r1, r3, #1
 8002cfe:	0a55      	lsrs	r5, r2, #9
 8002d00:	4208      	tst	r0, r1
 8002d02:	d00c      	beq.n	8002d1e <__aeabi_f2d+0x2e>
 8002d04:	21e0      	movs	r1, #224	@ 0xe0
 8002d06:	0089      	lsls	r1, r1, #2
 8002d08:	468c      	mov	ip, r1
 8002d0a:	076d      	lsls	r5, r5, #29
 8002d0c:	0b12      	lsrs	r2, r2, #12
 8002d0e:	4463      	add	r3, ip
 8002d10:	051b      	lsls	r3, r3, #20
 8002d12:	4313      	orrs	r3, r2
 8002d14:	07e4      	lsls	r4, r4, #31
 8002d16:	4323      	orrs	r3, r4
 8002d18:	0028      	movs	r0, r5
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d114      	bne.n	8002d4c <__aeabi_f2d+0x5c>
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d01b      	beq.n	8002d5e <__aeabi_f2d+0x6e>
 8002d26:	0028      	movs	r0, r5
 8002d28:	f000 f8ae 	bl	8002e88 <__clzsi2>
 8002d2c:	280a      	cmp	r0, #10
 8002d2e:	dc1c      	bgt.n	8002d6a <__aeabi_f2d+0x7a>
 8002d30:	230b      	movs	r3, #11
 8002d32:	002a      	movs	r2, r5
 8002d34:	1a1b      	subs	r3, r3, r0
 8002d36:	40da      	lsrs	r2, r3
 8002d38:	0003      	movs	r3, r0
 8002d3a:	3315      	adds	r3, #21
 8002d3c:	409d      	lsls	r5, r3
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <__aeabi_f2d+0x88>)
 8002d40:	0312      	lsls	r2, r2, #12
 8002d42:	1a1b      	subs	r3, r3, r0
 8002d44:	055b      	lsls	r3, r3, #21
 8002d46:	0b12      	lsrs	r2, r2, #12
 8002d48:	0d5b      	lsrs	r3, r3, #21
 8002d4a:	e7e1      	b.n	8002d10 <__aeabi_f2d+0x20>
 8002d4c:	2d00      	cmp	r5, #0
 8002d4e:	d009      	beq.n	8002d64 <__aeabi_f2d+0x74>
 8002d50:	0b13      	lsrs	r3, r2, #12
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	0312      	lsls	r2, r2, #12
 8002d56:	431a      	orrs	r2, r3
 8002d58:	076d      	lsls	r5, r5, #29
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <__aeabi_f2d+0x8c>)
 8002d5c:	e7d8      	b.n	8002d10 <__aeabi_f2d+0x20>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2200      	movs	r2, #0
 8002d62:	e7d5      	b.n	8002d10 <__aeabi_f2d+0x20>
 8002d64:	2200      	movs	r2, #0
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <__aeabi_f2d+0x8c>)
 8002d68:	e7d2      	b.n	8002d10 <__aeabi_f2d+0x20>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	002a      	movs	r2, r5
 8002d6e:	3b0b      	subs	r3, #11
 8002d70:	409a      	lsls	r2, r3
 8002d72:	2500      	movs	r5, #0
 8002d74:	e7e3      	b.n	8002d3e <__aeabi_f2d+0x4e>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	00000389 	.word	0x00000389
 8002d7c:	000007ff 	.word	0x000007ff

08002d80 <__aeabi_d2f>:
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	004b      	lsls	r3, r1, #1
 8002d84:	030f      	lsls	r7, r1, #12
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	4c3b      	ldr	r4, [pc, #236]	@ (8002e78 <__aeabi_d2f+0xf8>)
 8002d8a:	0f45      	lsrs	r5, r0, #29
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	0a7f      	lsrs	r7, r7, #9
 8002d90:	1c5e      	adds	r6, r3, #1
 8002d92:	432f      	orrs	r7, r5
 8002d94:	9000      	str	r0, [sp, #0]
 8002d96:	9101      	str	r1, [sp, #4]
 8002d98:	0fca      	lsrs	r2, r1, #31
 8002d9a:	00c5      	lsls	r5, r0, #3
 8002d9c:	4226      	tst	r6, r4
 8002d9e:	d00b      	beq.n	8002db8 <__aeabi_d2f+0x38>
 8002da0:	4936      	ldr	r1, [pc, #216]	@ (8002e7c <__aeabi_d2f+0xfc>)
 8002da2:	185c      	adds	r4, r3, r1
 8002da4:	2cfe      	cmp	r4, #254	@ 0xfe
 8002da6:	dd13      	ble.n	8002dd0 <__aeabi_d2f+0x50>
 8002da8:	20ff      	movs	r0, #255	@ 0xff
 8002daa:	2300      	movs	r3, #0
 8002dac:	05c0      	lsls	r0, r0, #23
 8002dae:	4318      	orrs	r0, r3
 8002db0:	07d2      	lsls	r2, r2, #31
 8002db2:	4310      	orrs	r0, r2
 8002db4:	b003      	add	sp, #12
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <__aeabi_d2f+0x42>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e7f4      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002dc2:	433d      	orrs	r5, r7
 8002dc4:	d0f0      	beq.n	8002da8 <__aeabi_d2f+0x28>
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	03db      	lsls	r3, r3, #15
 8002dca:	20ff      	movs	r0, #255	@ 0xff
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	e7ed      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002dd0:	2c00      	cmp	r4, #0
 8002dd2:	dd14      	ble.n	8002dfe <__aeabi_d2f+0x7e>
 8002dd4:	9b00      	ldr	r3, [sp, #0]
 8002dd6:	00ff      	lsls	r7, r7, #3
 8002dd8:	019b      	lsls	r3, r3, #6
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	4183      	sbcs	r3, r0
 8002dde:	0f69      	lsrs	r1, r5, #29
 8002de0:	433b      	orrs	r3, r7
 8002de2:	430b      	orrs	r3, r1
 8002de4:	0759      	lsls	r1, r3, #29
 8002de6:	d041      	beq.n	8002e6c <__aeabi_d2f+0xec>
 8002de8:	210f      	movs	r1, #15
 8002dea:	4019      	ands	r1, r3
 8002dec:	2904      	cmp	r1, #4
 8002dee:	d028      	beq.n	8002e42 <__aeabi_d2f+0xc2>
 8002df0:	3304      	adds	r3, #4
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	d525      	bpl.n	8002e42 <__aeabi_d2f+0xc2>
 8002df6:	3401      	adds	r4, #1
 8002df8:	2300      	movs	r3, #0
 8002dfa:	b2e0      	uxtb	r0, r4
 8002dfc:	e7d6      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002dfe:	0021      	movs	r1, r4
 8002e00:	3117      	adds	r1, #23
 8002e02:	dbdb      	blt.n	8002dbc <__aeabi_d2f+0x3c>
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	201e      	movs	r0, #30
 8002e08:	0409      	lsls	r1, r1, #16
 8002e0a:	4339      	orrs	r1, r7
 8002e0c:	1b00      	subs	r0, r0, r4
 8002e0e:	281f      	cmp	r0, #31
 8002e10:	dd1b      	ble.n	8002e4a <__aeabi_d2f+0xca>
 8002e12:	2602      	movs	r6, #2
 8002e14:	4276      	negs	r6, r6
 8002e16:	1b34      	subs	r4, r6, r4
 8002e18:	000e      	movs	r6, r1
 8002e1a:	40e6      	lsrs	r6, r4
 8002e1c:	0034      	movs	r4, r6
 8002e1e:	2820      	cmp	r0, #32
 8002e20:	d004      	beq.n	8002e2c <__aeabi_d2f+0xac>
 8002e22:	4817      	ldr	r0, [pc, #92]	@ (8002e80 <__aeabi_d2f+0x100>)
 8002e24:	4684      	mov	ip, r0
 8002e26:	4463      	add	r3, ip
 8002e28:	4099      	lsls	r1, r3
 8002e2a:	430d      	orrs	r5, r1
 8002e2c:	002b      	movs	r3, r5
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	418b      	sbcs	r3, r1
 8002e32:	4323      	orrs	r3, r4
 8002e34:	0759      	lsls	r1, r3, #29
 8002e36:	d015      	beq.n	8002e64 <__aeabi_d2f+0xe4>
 8002e38:	210f      	movs	r1, #15
 8002e3a:	2400      	movs	r4, #0
 8002e3c:	4019      	ands	r1, r3
 8002e3e:	2904      	cmp	r1, #4
 8002e40:	d117      	bne.n	8002e72 <__aeabi_d2f+0xf2>
 8002e42:	019b      	lsls	r3, r3, #6
 8002e44:	0a5b      	lsrs	r3, r3, #9
 8002e46:	b2e0      	uxtb	r0, r4
 8002e48:	e7b0      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002e4a:	4c0e      	ldr	r4, [pc, #56]	@ (8002e84 <__aeabi_d2f+0x104>)
 8002e4c:	191c      	adds	r4, r3, r4
 8002e4e:	002b      	movs	r3, r5
 8002e50:	40a5      	lsls	r5, r4
 8002e52:	40c3      	lsrs	r3, r0
 8002e54:	40a1      	lsls	r1, r4
 8002e56:	1e68      	subs	r0, r5, #1
 8002e58:	4185      	sbcs	r5, r0
 8002e5a:	4329      	orrs	r1, r5
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	2400      	movs	r4, #0
 8002e60:	0759      	lsls	r1, r3, #29
 8002e62:	d1c1      	bne.n	8002de8 <__aeabi_d2f+0x68>
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	2000      	movs	r0, #0
 8002e68:	0a5b      	lsrs	r3, r3, #9
 8002e6a:	e79f      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	b2e0      	uxtb	r0, r4
 8002e70:	e79c      	b.n	8002dac <__aeabi_d2f+0x2c>
 8002e72:	3304      	adds	r3, #4
 8002e74:	e7e5      	b.n	8002e42 <__aeabi_d2f+0xc2>
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	@ (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <calcular_temperatura>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calcular_temperatura(uint32_t leitura) {
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	float ntc_resistance;
	/* calcula resistencia NTC */
	ntc_resistance = ((resistor)/((4095.0f/leitura) - 1.0f));
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe f871 	bl	8000fb4 <__aeabi_ui2f>
 8002ed2:	1c03      	adds	r3, r0, #0
 8002ed4:	1c19      	adds	r1, r3, #0
 8002ed6:	4828      	ldr	r0, [pc, #160]	@ (8002f78 <calcular_temperatura+0xb4>)
 8002ed8:	f7fd fba4 	bl	8000624 <__aeabi_fdiv>
 8002edc:	1c03      	adds	r3, r0, #0
 8002ede:	21fe      	movs	r1, #254	@ 0xfe
 8002ee0:	0589      	lsls	r1, r1, #22
 8002ee2:	1c18      	adds	r0, r3, #0
 8002ee4:	f7fd fec2 	bl	8000c6c <__aeabi_fsub>
 8002ee8:	1c03      	adds	r3, r0, #0
 8002eea:	1c19      	adds	r1, r3, #0
 8002eec:	4823      	ldr	r0, [pc, #140]	@ (8002f7c <calcular_temperatura+0xb8>)
 8002eee:	f7fd fb99 	bl	8000624 <__aeabi_fdiv>
 8002ef2:	1c03      	adds	r3, r0, #0
 8002ef4:	617b      	str	r3, [r7, #20]
	/* Calcula temperatura usando equacao Steinhart-Hart  */
	float ntc_ln = log(ntc_resistance);
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff fefa 	bl	8002cf0 <__aeabi_f2d>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	0010      	movs	r0, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	f002 fd6c 	bl	80059e0 <log>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	000b      	movs	r3, r1
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	f7ff ff36 	bl	8002d80 <__aeabi_d2f>
 8002f14:	1c03      	adds	r3, r0, #0
 8002f16:	613b      	str	r3, [r7, #16]
	float temperatura = (1.0f / (A + B * ntc_ln + C * ntc_ln * ntc_ln * ntc_ln)) - 273.15f;
 8002f18:	4919      	ldr	r1, [pc, #100]	@ (8002f80 <calcular_temperatura+0xbc>)
 8002f1a:	6938      	ldr	r0, [r7, #16]
 8002f1c:	f7fd fd68 	bl	80009f0 <__aeabi_fmul>
 8002f20:	1c03      	adds	r3, r0, #0
 8002f22:	4918      	ldr	r1, [pc, #96]	@ (8002f84 <calcular_temperatura+0xc0>)
 8002f24:	1c18      	adds	r0, r3, #0
 8002f26:	f7fd f9f3 	bl	8000310 <__aeabi_fadd>
 8002f2a:	1c03      	adds	r3, r0, #0
 8002f2c:	1c1c      	adds	r4, r3, #0
 8002f2e:	4916      	ldr	r1, [pc, #88]	@ (8002f88 <calcular_temperatura+0xc4>)
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f7fd fd5d 	bl	80009f0 <__aeabi_fmul>
 8002f36:	1c03      	adds	r3, r0, #0
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	1c18      	adds	r0, r3, #0
 8002f3c:	f7fd fd58 	bl	80009f0 <__aeabi_fmul>
 8002f40:	1c03      	adds	r3, r0, #0
 8002f42:	6939      	ldr	r1, [r7, #16]
 8002f44:	1c18      	adds	r0, r3, #0
 8002f46:	f7fd fd53 	bl	80009f0 <__aeabi_fmul>
 8002f4a:	1c03      	adds	r3, r0, #0
 8002f4c:	1c19      	adds	r1, r3, #0
 8002f4e:	1c20      	adds	r0, r4, #0
 8002f50:	f7fd f9de 	bl	8000310 <__aeabi_fadd>
 8002f54:	1c03      	adds	r3, r0, #0
 8002f56:	1c19      	adds	r1, r3, #0
 8002f58:	20fe      	movs	r0, #254	@ 0xfe
 8002f5a:	0580      	lsls	r0, r0, #22
 8002f5c:	f7fd fb62 	bl	8000624 <__aeabi_fdiv>
 8002f60:	1c03      	adds	r3, r0, #0
 8002f62:	490a      	ldr	r1, [pc, #40]	@ (8002f8c <calcular_temperatura+0xc8>)
 8002f64:	1c18      	adds	r0, r3, #0
 8002f66:	f7fd fe81 	bl	8000c6c <__aeabi_fsub>
 8002f6a:	1c03      	adds	r3, r0, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
	return temperatura;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	1c18      	adds	r0, r3, #0
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b007      	add	sp, #28
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	457ff000 	.word	0x457ff000
 8002f7c:	461c4000 	.word	0x461c4000
 8002f80:	3973bdd2 	.word	0x3973bdd2
 8002f84:	3a95365e 	.word	0x3a95365e
 8002f88:	33cbc654 	.word	0x33cbc654
 8002f8c:	43889333 	.word	0x43889333

08002f90 <controlar_leds_e_buzzer>:


void controlar_leds_e_buzzer(float temperatura) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    if (temperatura <= 15) {
 8002f98:	4939      	ldr	r1, [pc, #228]	@ (8003080 <controlar_leds_e_buzzer+0xf0>)
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd f99a 	bl	80002d4 <__aeabi_fcmple>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d01c      	beq.n	8002fde <controlar_leds_e_buzzer+0x4e>
        // Ligar LED azul
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_SET);
 8002fa4:	23a0      	movs	r3, #160	@ 0xa0
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2108      	movs	r1, #8
 8002fac:	0018      	movs	r0, r3
 8002fae:	f001 fccf 	bl	8004950 <HAL_GPIO_WritePin>
        // Desligar outros LEDs
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8002fb2:	23a0      	movs	r3, #160	@ 0xa0
 8002fb4:	05db      	lsls	r3, r3, #23
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2104      	movs	r1, #4
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f001 fcc8 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8002fc0:	23a0      	movs	r3, #160	@ 0xa0
 8002fc2:	05db      	lsls	r3, r3, #23
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f001 fcc1 	bl	8004950 <HAL_GPIO_WritePin>
        // Ligar buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002fce:	23a0      	movs	r3, #160	@ 0xa0
 8002fd0:	05db      	lsls	r3, r3, #23
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2140      	movs	r1, #64	@ 0x40
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f001 fcba 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
        // Ligar buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
    }
}
 8002fdc:	e04b      	b.n	8003076 <controlar_leds_e_buzzer+0xe6>
    } else if (temperatura > 15 && temperatura <= 25) {
 8002fde:	4928      	ldr	r1, [pc, #160]	@ (8003080 <controlar_leds_e_buzzer+0xf0>)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fd f981 	bl	80002e8 <__aeabi_fcmpgt>
 8002fe6:	1e03      	subs	r3, r0, #0
 8002fe8:	d022      	beq.n	8003030 <controlar_leds_e_buzzer+0xa0>
 8002fea:	4926      	ldr	r1, [pc, #152]	@ (8003084 <controlar_leds_e_buzzer+0xf4>)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7fd f971 	bl	80002d4 <__aeabi_fcmple>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d01c      	beq.n	8003030 <controlar_leds_e_buzzer+0xa0>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 8002ff6:	23a0      	movs	r3, #160	@ 0xa0
 8002ff8:	05db      	lsls	r3, r3, #23
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	0018      	movs	r0, r3
 8003000:	f001 fca6 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8003004:	23a0      	movs	r3, #160	@ 0xa0
 8003006:	05db      	lsls	r3, r3, #23
 8003008:	2200      	movs	r2, #0
 800300a:	2108      	movs	r1, #8
 800300c:	0018      	movs	r0, r3
 800300e:	f001 fc9f 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8003012:	23a0      	movs	r3, #160	@ 0xa0
 8003014:	05db      	lsls	r3, r3, #23
 8003016:	2200      	movs	r2, #0
 8003018:	2102      	movs	r1, #2
 800301a:	0018      	movs	r0, r3
 800301c:	f001 fc98 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003020:	23a0      	movs	r3, #160	@ 0xa0
 8003022:	05db      	lsls	r3, r3, #23
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	@ 0x40
 8003028:	0018      	movs	r0, r3
 800302a:	f001 fc91 	bl	8004950 <HAL_GPIO_WritePin>
}
 800302e:	e022      	b.n	8003076 <controlar_leds_e_buzzer+0xe6>
    } else if (temperatura > 25) {
 8003030:	4914      	ldr	r1, [pc, #80]	@ (8003084 <controlar_leds_e_buzzer+0xf4>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd f958 	bl	80002e8 <__aeabi_fcmpgt>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d100      	bne.n	800303e <controlar_leds_e_buzzer+0xae>
}
 800303c:	e01b      	b.n	8003076 <controlar_leds_e_buzzer+0xe6>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800303e:	23a0      	movs	r3, #160	@ 0xa0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	2201      	movs	r2, #1
 8003044:	2102      	movs	r1, #2
 8003046:	0018      	movs	r0, r3
 8003048:	f001 fc82 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 800304c:	23a0      	movs	r3, #160	@ 0xa0
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	2200      	movs	r2, #0
 8003052:	2108      	movs	r1, #8
 8003054:	0018      	movs	r0, r3
 8003056:	f001 fc7b 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800305a:	23a0      	movs	r3, #160	@ 0xa0
 800305c:	05db      	lsls	r3, r3, #23
 800305e:	2200      	movs	r2, #0
 8003060:	2104      	movs	r1, #4
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fc74 	bl	8004950 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003068:	23a0      	movs	r3, #160	@ 0xa0
 800306a:	05db      	lsls	r3, r3, #23
 800306c:	2201      	movs	r2, #1
 800306e:	2140      	movs	r1, #64	@ 0x40
 8003070:	0018      	movs	r0, r3
 8003072:	f001 fc6d 	bl	8004950 <HAL_GPIO_WritePin>
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	41700000 	.word	0x41700000
 8003084:	41c80000 	.word	0x41c80000

08003088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800308e:	f000 fa7e 	bl	800358e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003092:	f000 f837 	bl	8003104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003096:	f000 f93d 	bl	8003314 <MX_GPIO_Init>
  MX_ADC1_Init();
 800309a:	f000 f877 	bl	800318c <MX_ADC1_Init>
  MX_TIM3_Init();
 800309e:	f000 f8e1 	bl	8003264 <MX_TIM3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // ADC Polling
	  	      HAL_ADC_Start (&hadc1);   // inicia leitura ADC
 80030a2:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <main+0x74>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fdff 	bl	8003ca8 <HAL_ADC_Start>
	  	      HAL_ADC_PollForConversion (&hadc1, 1000); //aguarda conversao seja concluida
 80030aa:	23fa      	movs	r3, #250	@ 0xfa
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <main+0x74>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fe82 	bl	8003dbc <HAL_ADC_PollForConversion>
	  	      uint32_t leitura = HAL_ADC_GetValue (&hadc1); //  armazenar o valor lido pelo ADC
 80030b8:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <main+0x74>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 ff0c 	bl	8003ed8 <HAL_ADC_GetValue>
 80030c0:	0003      	movs	r3, r0
 80030c2:	607b      	str	r3, [r7, #4]
	  	      HAL_ADC_Stop(&hadc1);
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <main+0x74>)
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fe3c 	bl	8003d44 <HAL_ADC_Stop>
	  	      // Calcula a temperatura
	  	      float temperatura = calcular_temperatura(leitura);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff fef8 	bl	8002ec4 <calcular_temperatura>
 80030d4:	1c03      	adds	r3, r0, #0
 80030d6:	603b      	str	r3, [r7, #0]
	  	      // Controla os LEDs e o buzzer baseado na temperatura
	  	      controlar_leds_e_buzzer(temperatura);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1c18      	adds	r0, r3, #0
 80030dc:	f7ff ff58 	bl	8002f90 <controlar_leds_e_buzzer>
	  if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE)){
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <main+0x78>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1d9      	bne.n	80030a2 <main+0x1a>
		 __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <main+0x78>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2202      	movs	r2, #2
 80030f4:	4252      	negs	r2, r2
 80030f6:	611a      	str	r2, [r3, #16]
  {
 80030f8:	e7d3      	b.n	80030a2 <main+0x1a>
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	20000078 	.word	0x20000078
 8003100:	200000dc 	.word	0x200000dc

08003104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b08d      	sub	sp, #52	@ 0x34
 8003108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310a:	2414      	movs	r4, #20
 800310c:	193b      	adds	r3, r7, r4
 800310e:	0018      	movs	r0, r3
 8003110:	231c      	movs	r3, #28
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	f002 fc31 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800311a:	003b      	movs	r3, r7
 800311c:	0018      	movs	r0, r3
 800311e:	2314      	movs	r3, #20
 8003120:	001a      	movs	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f002 fc2a 	bl	800597c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003128:	193b      	adds	r3, r7, r4
 800312a:	2202      	movs	r2, #2
 800312c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2280      	movs	r2, #128	@ 0x80
 8003132:	0052      	lsls	r2, r2, #1
 8003134:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800313c:	193b      	adds	r3, r7, r4
 800313e:	2240      	movs	r2, #64	@ 0x40
 8003140:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003142:	193b      	adds	r3, r7, r4
 8003144:	0018      	movs	r0, r3
 8003146:	f001 fc21 	bl	800498c <HAL_RCC_OscConfig>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d001      	beq.n	8003152 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800314e:	f000 f917 	bl	8003380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003152:	003b      	movs	r3, r7
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003158:	003b      	movs	r3, r7
 800315a:	2200      	movs	r2, #0
 800315c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800315e:	003b      	movs	r3, r7
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003164:	003b      	movs	r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800316a:	003b      	movs	r3, r7
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003170:	003b      	movs	r3, r7
 8003172:	2101      	movs	r1, #1
 8003174:	0018      	movs	r0, r3
 8003176:	f001 fded 	bl	8004d54 <HAL_RCC_ClockConfig>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800317e:	f000 f8ff 	bl	8003380 <Error_Handler>
  }
}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b00d      	add	sp, #52	@ 0x34
 8003188:	bd90      	pop	{r4, r7, pc}
	...

0800318c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	0018      	movs	r0, r3
 8003196:	230c      	movs	r3, #12
 8003198:	001a      	movs	r2, r3
 800319a:	2100      	movs	r1, #0
 800319c:	f002 fbee 	bl	800597c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031a2:	4a2e      	ldr	r2, [pc, #184]	@ (800325c <MX_ADC1_Init+0xd0>)
 80031a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80031a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031a8:	2280      	movs	r2, #128	@ 0x80
 80031aa:	05d2      	lsls	r2, r2, #23
 80031ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031ba:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031c2:	2204      	movs	r2, #4
 80031c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031c6:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80031cc:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031d2:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031da:	2201      	movs	r2, #1
 80031dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031de:	4b1e      	ldr	r3, [pc, #120]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031e0:	2220      	movs	r2, #32
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031f4:	222c      	movs	r2, #44	@ 0x2c
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031fa:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <MX_ADC1_Init+0xcc>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003200:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <MX_ADC1_Init+0xcc>)
 8003202:	2200      	movs	r2, #0
 8003204:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <MX_ADC1_Init+0xcc>)
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <MX_ADC1_Init+0xcc>)
 800320e:	223c      	movs	r2, #60	@ 0x3c
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003214:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <MX_ADC1_Init+0xcc>)
 8003216:	2200      	movs	r2, #0
 8003218:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800321a:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <MX_ADC1_Init+0xcc>)
 800321c:	0018      	movs	r0, r3
 800321e:	f000 fb9d 	bl	800395c <HAL_ADC_Init>
 8003222:	1e03      	subs	r3, r0, #0
 8003224:	d001      	beq.n	800322a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003226:	f000 f8ab 	bl	8003380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	4a0c      	ldr	r2, [pc, #48]	@ (8003260 <MX_ADC1_Init+0xd4>)
 800322e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800323c:	1d3a      	adds	r2, r7, #4
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <MX_ADC1_Init+0xcc>)
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 fe54 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800324c:	f000 f898 	bl	8003380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000078 	.word	0x20000078
 800325c:	40012400 	.word	0x40012400
 8003260:	14000020 	.word	0x14000020

08003264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800326a:	2310      	movs	r3, #16
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	0018      	movs	r0, r3
 8003270:	2310      	movs	r3, #16
 8003272:	001a      	movs	r2, r3
 8003274:	2100      	movs	r1, #0
 8003276:	f002 fb81 	bl	800597c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	0018      	movs	r0, r3
 800327e:	230c      	movs	r3, #12
 8003280:	001a      	movs	r2, r3
 8003282:	2100      	movs	r1, #0
 8003284:	f002 fb7a 	bl	800597c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003288:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <MX_TIM3_Init+0xa0>)
 800328a:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <MX_TIM3_Init+0xa4>)
 800328c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800328e:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <MX_TIM3_Init+0xa0>)
 8003290:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <MX_TIM3_Init+0xa8>)
 8003292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <MX_TIM3_Init+0xa0>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800329a:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <MX_TIM3_Init+0xa0>)
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <MX_TIM3_Init+0xac>)
 800329e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a0:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <MX_TIM3_Init+0xa0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a6:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <MX_TIM3_Init+0xa0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032ac:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <MX_TIM3_Init+0xa0>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 ff8a 	bl	80051c8 <HAL_TIM_Base_Init>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80032b8:	f000 f862 	bl	8003380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032bc:	2110      	movs	r1, #16
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2280      	movs	r2, #128	@ 0x80
 80032c2:	0152      	lsls	r2, r2, #5
 80032c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032c6:	187a      	adds	r2, r7, r1
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <MX_TIM3_Init+0xa0>)
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f002 f8d5 	bl	800547c <HAL_TIM_ConfigClockSource>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80032d6:	f000 f853 	bl	8003380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e6:	1d3a      	adds	r2, r7, #4
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <MX_TIM3_Init+0xa0>)
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f002 facb 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80032f6:	f000 f843 	bl	8003380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b008      	add	sp, #32
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	200000dc 	.word	0x200000dc
 8003308:	40000400 	.word	0x40000400
 800330c:	0000bb7f 	.word	0x0000bb7f
 8003310:	000003e7 	.word	0x000003e7

08003314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	0018      	movs	r0, r3
 800331e:	2314      	movs	r3, #20
 8003320:	001a      	movs	r2, r3
 8003322:	2100      	movs	r1, #0
 8003324:	f002 fb2a 	bl	800597c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003328:	4b14      	ldr	r3, [pc, #80]	@ (800337c <MX_GPIO_Init+0x68>)
 800332a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800332c:	4b13      	ldr	r3, [pc, #76]	@ (800337c <MX_GPIO_Init+0x68>)
 800332e:	2101      	movs	r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	@ 0x34
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <MX_GPIO_Init+0x68>)
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003340:	23a0      	movs	r3, #160	@ 0xa0
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	2200      	movs	r2, #0
 8003346:	214e      	movs	r1, #78	@ 0x4e
 8003348:	0018      	movs	r0, r3
 800334a:	f001 fb01 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin;
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	224e      	movs	r2, #78	@ 0x4e
 8003352:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	2201      	movs	r2, #1
 8003358:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	1d3a      	adds	r2, r7, #4
 8003368:	23a0      	movs	r3, #160	@ 0xa0
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	0011      	movs	r1, r2
 800336e:	0018      	movs	r0, r3
 8003370:	f001 f984 	bl	800467c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003374:	46c0      	nop			@ (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000

08003380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003384:	b672      	cpsid	i
}
 8003386:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	e7fd      	b.n	8003388 <Error_Handler+0x8>

0800338c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <HAL_MspInit+0x44>)
 8003394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003396:	4b0e      	ldr	r3, [pc, #56]	@ (80033d0 <HAL_MspInit+0x44>)
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_MspInit+0x44>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <HAL_MspInit+0x44>)
 80033ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <HAL_MspInit+0x44>)
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	0549      	lsls	r1, r1, #21
 80033b4:	430a      	orrs	r2, r1
 80033b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_MspInit+0x44>)
 80033ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	055b      	lsls	r3, r3, #21
 80033c0:	4013      	ands	r3, r2
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b002      	add	sp, #8
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b091      	sub	sp, #68	@ 0x44
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	232c      	movs	r3, #44	@ 0x2c
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	0018      	movs	r0, r3
 80033e2:	2314      	movs	r3, #20
 80033e4:	001a      	movs	r2, r3
 80033e6:	2100      	movs	r1, #0
 80033e8:	f002 fac8 	bl	800597c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033ec:	2410      	movs	r4, #16
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	0018      	movs	r0, r3
 80033f2:	231c      	movs	r3, #28
 80033f4:	001a      	movs	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f002 fac0 	bl	800597c <memset>
  if(hadc->Instance==ADC1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a20      	ldr	r2, [pc, #128]	@ (8003484 <HAL_ADC_MspInit+0xb0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d139      	bne.n	800347a <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003406:	193b      	adds	r3, r7, r4
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	01d2      	lsls	r2, r2, #7
 800340c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800340e:	193b      	adds	r3, r7, r4
 8003410:	2200      	movs	r2, #0
 8003412:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003414:	193b      	adds	r3, r7, r4
 8003416:	0018      	movs	r0, r3
 8003418:	f001 fde8 	bl	8004fec <HAL_RCCEx_PeriphCLKConfig>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003420:	f7ff ffae 	bl	8003380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003424:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 8003426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003428:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 800342a:	2180      	movs	r1, #128	@ 0x80
 800342c:	0349      	lsls	r1, r1, #13
 800342e:	430a      	orrs	r2, r1
 8003430:	641a      	str	r2, [r3, #64]	@ 0x40
 8003432:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 8003434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	035b      	lsls	r3, r3, #13
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 8003442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003444:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 8003446:	2101      	movs	r1, #1
 8003448:	430a      	orrs	r2, r1
 800344a:	635a      	str	r2, [r3, #52]	@ 0x34
 800344c:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <HAL_ADC_MspInit+0xb4>)
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	2201      	movs	r2, #1
 8003452:	4013      	ands	r3, r2
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003458:	212c      	movs	r1, #44	@ 0x2c
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2220      	movs	r2, #32
 800345e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003460:	187b      	adds	r3, r7, r1
 8003462:	2203      	movs	r2, #3
 8003464:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	187a      	adds	r2, r7, r1
 800346e:	23a0      	movs	r3, #160	@ 0xa0
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f001 f901 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b011      	add	sp, #68	@ 0x44
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	40012400 	.word	0x40012400
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0d      	ldr	r2, [pc, #52]	@ (80034d0 <HAL_TIM_Base_MspInit+0x44>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d113      	bne.n	80034c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034a4:	2102      	movs	r1, #2
 80034a6:	430a      	orrs	r2, r1
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034aa:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	2202      	movs	r2, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	2010      	movs	r0, #16
 80034bc:	f001 f8ac 	bl	8004618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034c0:	2010      	movs	r0, #16
 80034c2:	f001 f8be 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40021000 	.word	0x40021000

080034d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	e7fd      	b.n	80034dc <NMI_Handler+0x4>

080034e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	e7fd      	b.n	80034e4 <HardFault_Handler+0x4>

080034e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003500:	f000 f8a6 	bl	8003650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <TIM3_IRQHandler+0x14>)
 8003512:	0018      	movs	r0, r3
 8003514:	f001 feb0 	bl	8005278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	200000dc 	.word	0x200000dc

08003524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <SystemInit+0x14>)
 800352a:	2280      	movs	r2, #128	@ 0x80
 800352c:	0512      	lsls	r2, r2, #20
 800352e:	609a      	str	r2, [r3, #8]
#endif
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800353c:	480d      	ldr	r0, [pc, #52]	@ (8003574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800353e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003540:	f7ff fff0 	bl	8003524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003544:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003546:	e003      	b.n	8003550 <LoopCopyDataInit>

08003548 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800354a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800354c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800354e:	3104      	adds	r1, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003550:	480a      	ldr	r0, [pc, #40]	@ (800357c <LoopForever+0xa>)
  ldr r3, =_edata
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <LoopForever+0xe>)
  adds r2, r0, r1
 8003554:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003556:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003558:	d3f6      	bcc.n	8003548 <CopyDataInit>
  ldr r2, =_sbss
 800355a:	4a0a      	ldr	r2, [pc, #40]	@ (8003584 <LoopForever+0x12>)
  b LoopFillZerobss
 800355c:	e002      	b.n	8003564 <LoopFillZerobss>

0800355e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003560:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003562:	3204      	adds	r2, #4

08003564 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003564:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <LoopForever+0x16>)
  cmp r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003568:	d3f9      	bcc.n	800355e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800356a:	f002 fa15 	bl	8005998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800356e:	f7ff fd8b 	bl	8003088 <main>

08003572 <LoopForever>:

LoopForever:
    b LoopForever
 8003572:	e7fe      	b.n	8003572 <LoopForever>
  ldr   r0, =_estack
 8003574:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8003578:	08005edc 	.word	0x08005edc
  ldr r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003580:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8003584:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8003588:	20000264 	.word	0x20000264

0800358c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC1_IRQHandler>

0800358e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800359a:	2003      	movs	r0, #3
 800359c:	f000 f80e 	bl	80035bc <HAL_InitTick>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d003      	beq.n	80035ac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e001      	b.n	80035b0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ac:	f7ff feee 	bl	800338c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	781b      	ldrb	r3, [r3, #0]
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035c4:	230f      	movs	r3, #15
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80035cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <HAL_InitTick+0x88>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02b      	beq.n	800362c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80035d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003648 <HAL_InitTick+0x8c>)
 80035d6:	681c      	ldr	r4, [r3, #0]
 80035d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <HAL_InitTick+0x88>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	0019      	movs	r1, r3
 80035de:	23fa      	movs	r3, #250	@ 0xfa
 80035e0:	0098      	lsls	r0, r3, #2
 80035e2:	f7fc fd91 	bl	8000108 <__udivsi3>
 80035e6:	0003      	movs	r3, r0
 80035e8:	0019      	movs	r1, r3
 80035ea:	0020      	movs	r0, r4
 80035ec:	f7fc fd8c 	bl	8000108 <__udivsi3>
 80035f0:	0003      	movs	r3, r0
 80035f2:	0018      	movs	r0, r3
 80035f4:	f001 f835 	bl	8004662 <HAL_SYSTICK_Config>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d112      	bne.n	8003622 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d80a      	bhi.n	8003618 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	2301      	movs	r3, #1
 8003606:	425b      	negs	r3, r3
 8003608:	2200      	movs	r2, #0
 800360a:	0018      	movs	r0, r3
 800360c:	f001 f804 	bl	8004618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003610:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_InitTick+0x90>)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00d      	b.n	8003634 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e008      	b.n	8003634 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003622:	230f      	movs	r3, #15
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e003      	b.n	8003634 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b005      	add	sp, #20
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	20000008 	.word	0x20000008
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_IncTick+0x1c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	001a      	movs	r2, r3
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_IncTick+0x20>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	18d2      	adds	r2, r2, r3
 8003660:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <HAL_IncTick+0x20>)
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	20000008 	.word	0x20000008
 8003670:	20000128 	.word	0x20000128

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_GetTick+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000128 	.word	0x20000128

08003688 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003698:	401a      	ands	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	ff3fffff 	.word	0xff3fffff

080036b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	23c0      	movs	r3, #192	@ 0xc0
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	4013      	ands	r3, r2
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}

080036ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	2104      	movs	r1, #4
 80036de:	400a      	ands	r2, r1
 80036e0:	2107      	movs	r1, #7
 80036e2:	4091      	lsls	r1, r2
 80036e4:	000a      	movs	r2, r1
 80036e6:	43d2      	mvns	r2, r2
 80036e8:	401a      	ands	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2104      	movs	r1, #4
 80036ee:	400b      	ands	r3, r1
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4099      	lsls	r1, r3
 80036f4:	000b      	movs	r3, r1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}

08003704 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	2104      	movs	r1, #4
 8003716:	400a      	ands	r2, r1
 8003718:	2107      	movs	r1, #7
 800371a:	4091      	lsls	r1, r2
 800371c:	000a      	movs	r2, r1
 800371e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2104      	movs	r1, #4
 8003724:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003726:	40da      	lsrs	r2, r3
 8003728:	0013      	movs	r3, r2
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}

08003732 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	23c0      	movs	r3, #192	@ 0xc0
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	4013      	ands	r3, r2
 8003744:	d101      	bne.n	800374a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	211f      	movs	r1, #31
 8003768:	400a      	ands	r2, r1
 800376a:	210f      	movs	r1, #15
 800376c:	4091      	lsls	r1, r2
 800376e:	000a      	movs	r2, r1
 8003770:	43d2      	mvns	r2, r2
 8003772:	401a      	ands	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	210f      	movs	r1, #15
 800377a:	4019      	ands	r1, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	201f      	movs	r0, #31
 8003780:	4003      	ands	r3, r0
 8003782:	4099      	lsls	r1, r3
 8003784:	000b      	movs	r3, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	025b      	lsls	r3, r3, #9
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	0252      	lsls	r2, r2, #9
 80037c8:	0a52      	lsrs	r2, r2, #9
 80037ca:	43d2      	mvns	r2, r2
 80037cc:	401a      	ands	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b002      	add	sp, #8
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0212      	lsls	r2, r2, #8
 80037f0:	43d2      	mvns	r2, r2
 80037f2:	401a      	ands	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	400b      	ands	r3, r1
 80037fc:	4904      	ldr	r1, [pc, #16]	@ (8003810 <LL_ADC_SetChannelSamplingTime+0x34>)
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	7fffff00 	.word	0x7fffff00

08003814 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <LL_ADC_EnableInternalRegulator+0x24>)
 8003822:	4013      	ands	r3, r2
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	0552      	lsls	r2, r2, #21
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	6fffffe8 	.word	0x6fffffe8

0800383c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	055b      	lsls	r3, r3, #21
 800384c:	401a      	ands	r2, r3
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	055b      	lsls	r3, r3, #21
 8003852:	429a      	cmp	r2, r3
 8003854:	d101      	bne.n	800385a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800385a:	2300      	movs	r3, #0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <LL_ADC_Enable+0x20>)
 8003872:	4013      	ands	r3, r2
 8003874:	2201      	movs	r2, #1
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	7fffffe8 	.word	0x7fffffe8

08003888 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <LL_ADC_Disable+0x20>)
 8003896:	4013      	ands	r3, r2
 8003898:	2202      	movs	r2, #2
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	7fffffe8 	.word	0x7fffffe8

080038ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <LL_ADC_IsEnabled+0x18>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <LL_ADC_IsEnabled+0x1a>
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}

080038ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2202      	movs	r2, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d101      	bne.n	80038e6 <LL_ADC_IsDisableOngoing+0x18>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_ADC_IsDisableOngoing+0x1a>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <LL_ADC_REG_StartConversion+0x20>)
 80038fe:	4013      	ands	r3, r2
 8003900:	2204      	movs	r2, #4
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}
 8003910:	7fffffe8 	.word	0x7fffffe8

08003914 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <LL_ADC_REG_StopConversion+0x20>)
 8003922:	4013      	ands	r3, r2
 8003924:	2210      	movs	r2, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	7fffffe8 	.word	0x7fffffe8

08003938 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2204      	movs	r2, #4
 8003946:	4013      	ands	r3, r2
 8003948:	2b04      	cmp	r3, #4
 800394a:	d101      	bne.n	8003950 <LL_ADC_REG_IsConversionOngoing+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003964:	231f      	movs	r3, #31
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e17e      	b.n	8003c80 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff fd21 	bl	80033d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2254      	movs	r2, #84	@ 0x54
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff49 	bl	800383c <LL_ADC_IsInternalRegulatorEnabled>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d114      	bne.n	80039d8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff ff2e 	bl	8003814 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80039b8:	4bb3      	ldr	r3, [pc, #716]	@ (8003c88 <HAL_ADC_Init+0x32c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	49b3      	ldr	r1, [pc, #716]	@ (8003c8c <HAL_ADC_Init+0x330>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fc fba2 	bl	8000108 <__udivsi3>
 80039c4:	0003      	movs	r3, r0
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039ca:	e002      	b.n	80039d2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f9      	bne.n	80039cc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff2d 	bl	800383c <LL_ADC_IsInternalRegulatorEnabled>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	2210      	movs	r2, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	2201      	movs	r2, #1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039fe:	231f      	movs	r3, #31
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff ff94 	bl	8003938 <LL_ADC_REG_IsConversionOngoing>
 8003a10:	0003      	movs	r3, r0
 8003a12:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a18:	2210      	movs	r2, #16
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d000      	beq.n	8003a20 <HAL_ADC_Init+0xc4>
 8003a1e:	e122      	b.n	8003c66 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d000      	beq.n	8003a28 <HAL_ADC_Init+0xcc>
 8003a26:	e11e      	b.n	8003c66 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2c:	4a98      	ldr	r2, [pc, #608]	@ (8003c90 <HAL_ADC_Init+0x334>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2202      	movs	r2, #2
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff ff35 	bl	80038ac <LL_ADC_IsEnabled>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d000      	beq.n	8003a48 <HAL_ADC_Init+0xec>
 8003a46:	e0ad      	b.n	8003ba4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7e1b      	ldrb	r3, [r3, #24]
 8003a50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7e5b      	ldrb	r3, [r3, #25]
 8003a58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7e9b      	ldrb	r3, [r3, #26]
 8003a60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a62:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_ADC_Init+0x116>
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	e000      	b.n	8003a74 <HAL_ADC_Init+0x118>
 8003a72:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da04      	bge.n	8003a8e <HAL_ADC_Init+0x132>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	e001      	b.n	8003a92 <HAL_ADC_Init+0x136>
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003a92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	212c      	movs	r1, #44	@ 0x2c
 8003a98:	5c5b      	ldrb	r3, [r3, r1]
 8003a9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	5c9b      	ldrb	r3, [r3, r2]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d115      	bne.n	8003ada <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e9b      	ldrb	r3, [r3, #26]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2280      	movs	r2, #128	@ 0x80
 8003aba:	0252      	lsls	r2, r2, #9
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e00b      	b.n	8003ada <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae6:	23e0      	movs	r3, #224	@ 0xe0
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003af0:	4313      	orrs	r3, r2
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a65      	ldr	r2, [pc, #404]	@ (8003c94 <HAL_ADC_Init+0x338>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	0f9b      	lsrs	r3, r3, #30
 8003b14:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223c      	movs	r2, #60	@ 0x3c
 8003b26:	5c9b      	ldrb	r3, [r3, r2]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d111      	bne.n	8003b50 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0f9b      	lsrs	r3, r3, #30
 8003b32:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b38:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003b3e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003b44:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4a50      	ldr	r2, [pc, #320]	@ (8003c98 <HAL_ADC_Init+0x33c>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	23c0      	movs	r3, #192	@ 0xc0
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d018      	beq.n	8003ba4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	05db      	lsls	r3, r3, #23
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	061b      	lsls	r3, r3, #24
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d00c      	beq.n	8003ba4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003b8a:	4b44      	ldr	r3, [pc, #272]	@ (8003c9c <HAL_ADC_Init+0x340>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a44      	ldr	r2, [pc, #272]	@ (8003ca0 <HAL_ADC_Init+0x344>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	23f0      	movs	r3, #240	@ 0xf0
 8003b9a:	039b      	lsls	r3, r3, #14
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_ADC_Init+0x340>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	001a      	movs	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f7ff fd8b 	bl	80036ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	4939      	ldr	r1, [pc, #228]	@ (8003ca4 <HAL_ADC_Init+0x348>)
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	f7ff fd83 	bl	80036ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	4249      	negs	r1, r1
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bde:	e018      	b.n	8003c12 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	039b      	lsls	r3, r3, #14
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d112      	bne.n	8003c12 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	221c      	movs	r2, #28
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2210      	movs	r2, #16
 8003c00:	4252      	negs	r2, r2
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0011      	movs	r1, r2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7ff fd73 	bl	8003704 <LL_ADC_GetSamplingTimeCommonChannels>
 8003c1e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d10b      	bne.n	8003c40 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	2203      	movs	r2, #3
 8003c34:	4393      	bics	r3, r2
 8003c36:	2201      	movs	r2, #1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c3e:	e01c      	b.n	8003c7a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	2212      	movs	r2, #18
 8003c46:	4393      	bics	r3, r2
 8003c48:	2210      	movs	r2, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	2201      	movs	r2, #1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c5c:	231f      	movs	r3, #31
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c64:	e009      	b.n	8003c7a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c72:	231f      	movs	r3, #31
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c7a:	231f      	movs	r3, #31
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b008      	add	sp, #32
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	00030d40 	.word	0x00030d40
 8003c90:	fffffefd 	.word	0xfffffefd
 8003c94:	ffde0201 	.word	0xffde0201
 8003c98:	1ffffc02 	.word	0x1ffffc02
 8003c9c:	40012708 	.word	0x40012708
 8003ca0:	ffc3ffff 	.word	0xffc3ffff
 8003ca4:	7fffff04 	.word	0x7fffff04

08003ca8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b5b0      	push	{r4, r5, r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fe3f 	bl	8003938 <LL_ADC_REG_IsConversionOngoing>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d135      	bne.n	8003d2a <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2254      	movs	r2, #84	@ 0x54
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_Start+0x24>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e035      	b.n	8003d38 <HAL_ADC_Start+0x90>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2254      	movs	r2, #84	@ 0x54
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cd4:	250f      	movs	r5, #15
 8003cd6:	197c      	adds	r4, r7, r5
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 fb1a 	bl	8004314 <ADC_Enable>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ce4:	197b      	adds	r3, r7, r5
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d119      	bne.n	8003d20 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	4a13      	ldr	r2, [pc, #76]	@ (8003d40 <HAL_ADC_Start+0x98>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	0052      	lsls	r2, r2, #1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	221c      	movs	r2, #28
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2254      	movs	r2, #84	@ 0x54
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fde9 	bl	80038f0 <LL_ADC_REG_StartConversion>
 8003d1e:	e008      	b.n	8003d32 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2254      	movs	r2, #84	@ 0x54
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]
 8003d28:	e003      	b.n	8003d32 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d32:	230f      	movs	r3, #15
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d40:	fffff0fe 	.word	0xfffff0fe

08003d44 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2254      	movs	r2, #84	@ 0x54
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Stop+0x16>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e029      	b.n	8003dae <HAL_ADC_Stop+0x6a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2254      	movs	r2, #84	@ 0x54
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d62:	250f      	movs	r5, #15
 8003d64:	197c      	adds	r4, r7, r5
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 fa97 	bl	800429c <ADC_ConversionStop>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d72:	197b      	adds	r3, r7, r5
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d112      	bne.n	8003da0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d7a:	197c      	adds	r4, r7, r5
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fb46 	bl	8004410 <ADC_Disable>
 8003d84:	0003      	movs	r3, r0
 8003d86:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d88:	197b      	adds	r3, r7, r5
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <HAL_ADC_Stop+0x74>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	2201      	movs	r2, #1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2254      	movs	r2, #84	@ 0x54
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003da8:	230f      	movs	r3, #15
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	781b      	ldrb	r3, [r3, #0]
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bdb0      	pop	{r4, r5, r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	fffffefe 	.word	0xfffffefe

08003dbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d102      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003dce:	2308      	movs	r3, #8
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e00f      	b.n	8003df4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d007      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	2220      	movs	r2, #32
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e06c      	b.n	8003eca <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003df0:	2304      	movs	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003df4:	f7ff fc3e 	bl	8003674 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003dfc:	e019      	b.n	8003e32 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	d016      	beq.n	8003e32 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e04:	f7ff fc36 	bl	8003674 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <HAL_ADC_PollForConversion+0x5e>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	2204      	movs	r2, #4
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2254      	movs	r2, #84	@ 0x54
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e04b      	b.n	8003eca <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d0df      	beq.n	8003dfe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	2280      	movs	r2, #128	@ 0x80
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fc6e 	bl	8003732 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d02e      	beq.n	8003eb8 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7e9b      	ldrb	r3, [r3, #26]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d12a      	bne.n	8003eb8 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d123      	bne.n	8003eb8 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fd5f 	bl	8003938 <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d110      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	210c      	movs	r1, #12
 8003e8a:	438a      	bics	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	4a10      	ldr	r2, [pc, #64]	@ (8003ed4 <HAL_ADC_PollForConversion+0x118>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	2201      	movs	r2, #1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e9e:	e00b      	b.n	8003eb8 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7e1b      	ldrb	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	220c      	movs	r2, #12
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b004      	add	sp, #16
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	fffffefe 	.word	0xfffffefe

08003ed8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003efa:	2317      	movs	r3, #23
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2254      	movs	r2, #84	@ 0x54
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x24>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e1be      	b.n	8004292 <HAL_ADC_ConfigChannel+0x3a2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2254      	movs	r2, #84	@ 0x54
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd09 	bl	8003938 <LL_ADC_REG_IsConversionOngoing>
 8003f26:	1e03      	subs	r3, r0, #0
 8003f28:	d000      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x3c>
 8003f2a:	e1a1      	b.n	8004270 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d100      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x46>
 8003f34:	e152      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d004      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f46:	4ac2      	ldr	r2, [pc, #776]	@ (8004250 <HAL_ADC_ConfigChannel+0x360>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0019      	movs	r1, r3
 8003f56:	0010      	movs	r0, r2
 8003f58:	f7ff fc1c 	bl	8003794 <LL_ADC_REG_SetSequencerChAdd>
 8003f5c:	e0ed      	b.n	800413a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	211f      	movs	r1, #31
 8003f68:	400b      	ands	r3, r1
 8003f6a:	210f      	movs	r1, #15
 8003f6c:	4099      	lsls	r1, r3
 8003f6e:	000b      	movs	r3, r1
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4013      	ands	r3, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	025b      	lsls	r3, r3, #9
 8003f7c:	0a5b      	lsrs	r3, r3, #9
 8003f7e:	d105      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x9c>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	221f      	movs	r2, #31
 8003f88:	4013      	ands	r3, r2
 8003f8a:	e0bc      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d000      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0xa8>
 8003f96:	e0b5      	b.n	8004104 <HAL_ADC_ConfigChannel+0x214>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d000      	beq.n	8003fa4 <HAL_ADC_ConfigChannel+0xb4>
 8003fa2:	e0ad      	b.n	8004100 <HAL_ADC_ConfigChannel+0x210>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	4013      	ands	r3, r2
 8003fac:	d000      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0xc0>
 8003fae:	e0a5      	b.n	80040fc <HAL_ADC_ConfigChannel+0x20c>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d000      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0xcc>
 8003fba:	e09d      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x208>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d000      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0xd8>
 8003fc6:	e095      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x204>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d000      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0xe4>
 8003fd2:	e08d      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x200>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2240      	movs	r2, #64	@ 0x40
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d000      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0xf0>
 8003fde:	e085      	b.n	80040ec <HAL_ADC_ConfigChannel+0x1fc>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2280      	movs	r2, #128	@ 0x80
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d000      	beq.n	8003fec <HAL_ADC_ConfigChannel+0xfc>
 8003fea:	e07d      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x1f8>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d000      	beq.n	8003ffa <HAL_ADC_ConfigChannel+0x10a>
 8003ff8:	e074      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1f4>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	@ 0x80
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4013      	ands	r3, r2
 8004004:	d000      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x118>
 8004006:	e06b      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x1f0>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4013      	ands	r3, r2
 8004012:	d000      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x126>
 8004014:	e062      	b.n	80040dc <HAL_ADC_ConfigChannel+0x1ec>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4013      	ands	r3, r2
 8004020:	d000      	beq.n	8004024 <HAL_ADC_ConfigChannel+0x134>
 8004022:	e059      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x1e8>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	4013      	ands	r3, r2
 800402e:	d151      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1e4>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	019b      	lsls	r3, r3, #6
 8004038:	4013      	ands	r3, r2
 800403a:	d149      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1e0>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	01db      	lsls	r3, r3, #7
 8004044:	4013      	ands	r3, r2
 8004046:	d141      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1dc>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	4013      	ands	r3, r2
 8004052:	d139      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1d8>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	025b      	lsls	r3, r3, #9
 800405c:	4013      	ands	r3, r2
 800405e:	d131      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1d4>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	4013      	ands	r3, r2
 800406a:	d129      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1d0>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	02db      	lsls	r3, r3, #11
 8004074:	4013      	ands	r3, r2
 8004076:	d121      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1cc>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	031b      	lsls	r3, r3, #12
 8004080:	4013      	ands	r3, r2
 8004082:	d119      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x1c8>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	@ 0x80
 800408a:	035b      	lsls	r3, r3, #13
 800408c:	4013      	ands	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x1c4>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	039b      	lsls	r3, r3, #14
 8004098:	4013      	ands	r3, r2
 800409a:	d109      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1c0>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	03db      	lsls	r3, r3, #15
 80040a4:	4013      	ands	r3, r2
 80040a6:	d001      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x1bc>
 80040a8:	2316      	movs	r3, #22
 80040aa:	e02c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040ac:	2300      	movs	r3, #0
 80040ae:	e02a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040b0:	2315      	movs	r3, #21
 80040b2:	e028      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040b4:	2314      	movs	r3, #20
 80040b6:	e026      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040b8:	2313      	movs	r3, #19
 80040ba:	e024      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040bc:	2312      	movs	r3, #18
 80040be:	e022      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040c0:	2311      	movs	r3, #17
 80040c2:	e020      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040c4:	2310      	movs	r3, #16
 80040c6:	e01e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040c8:	230f      	movs	r3, #15
 80040ca:	e01c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040cc:	230e      	movs	r3, #14
 80040ce:	e01a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040d0:	230d      	movs	r3, #13
 80040d2:	e018      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040d4:	230c      	movs	r3, #12
 80040d6:	e016      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040d8:	230b      	movs	r3, #11
 80040da:	e014      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040dc:	230a      	movs	r3, #10
 80040de:	e012      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040e0:	2309      	movs	r3, #9
 80040e2:	e010      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040e4:	2308      	movs	r3, #8
 80040e6:	e00e      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040e8:	2307      	movs	r3, #7
 80040ea:	e00c      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040ec:	2306      	movs	r3, #6
 80040ee:	e00a      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040f0:	2305      	movs	r3, #5
 80040f2:	e008      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040f4:	2304      	movs	r3, #4
 80040f6:	e006      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040f8:	2303      	movs	r3, #3
 80040fa:	e004      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e002      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_ADC_ConfigChannel+0x216>
 8004104:	2300      	movs	r3, #0
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	6852      	ldr	r2, [r2, #4]
 800410a:	201f      	movs	r0, #31
 800410c:	4002      	ands	r2, r0
 800410e:	4093      	lsls	r3, r2
 8004110:	000a      	movs	r2, r1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d808      	bhi.n	800413a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	001a      	movs	r2, r3
 8004136:	f7ff fb0d 	bl	8003754 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	001a      	movs	r2, r3
 8004148:	f7ff fb48 	bl	80037dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	db00      	blt.n	8004156 <HAL_ADC_ConfigChannel+0x266>
 8004154:	e096      	b.n	8004284 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004156:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff faa9 	bl	80036b0 <LL_ADC_GetCommonPathInternalCh>
 800415e:	0003      	movs	r3, r0
 8004160:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3c      	ldr	r2, [pc, #240]	@ (8004258 <HAL_ADC_ConfigChannel+0x368>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d123      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004174:	d11e      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2280      	movs	r2, #128	@ 0x80
 800417a:	0412      	lsls	r2, r2, #16
 800417c:	4313      	orrs	r3, r2
 800417e:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 8004180:	0019      	movs	r1, r3
 8004182:	0010      	movs	r0, r2
 8004184:	f7ff fa80 	bl	8003688 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_ADC_ConfigChannel+0x36c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4934      	ldr	r1, [pc, #208]	@ (8004260 <HAL_ADC_ConfigChannel+0x370>)
 800418e:	0018      	movs	r0, r3
 8004190:	f7fb ffba 	bl	8000108 <__udivsi3>
 8004194:	0003      	movs	r3, r0
 8004196:	001a      	movs	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	189b      	adds	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041a4:	e002      	b.n	80041ac <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041b2:	e067      	b.n	8004284 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <HAL_ADC_ConfigChannel+0x374>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d162      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	03db      	lsls	r3, r3, #15
 80041c4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041c6:	d15d      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2280      	movs	r2, #128	@ 0x80
 80041cc:	03d2      	lsls	r2, r2, #15
 80041ce:	4313      	orrs	r3, r2
 80041d0:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 80041d2:	0019      	movs	r1, r3
 80041d4:	0010      	movs	r0, r2
 80041d6:	f7ff fa57 	bl	8003688 <LL_ADC_SetCommonPathInternalCh>
 80041da:	e053      	b.n	8004284 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d004      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041ec:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <HAL_ADC_ConfigChannel+0x360>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d107      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0019      	movs	r1, r3
 80041fc:	0010      	movs	r0, r2
 80041fe:	f7ff fada 	bl	80037b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	da3c      	bge.n	8004284 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff fa4f 	bl	80036b0 <LL_ADC_GetCommonPathInternalCh>
 8004212:	0003      	movs	r3, r0
 8004214:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0f      	ldr	r2, [pc, #60]	@ (8004258 <HAL_ADC_ConfigChannel+0x368>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d108      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4a11      	ldr	r2, [pc, #68]	@ (8004268 <HAL_ADC_ConfigChannel+0x378>)
 8004224:	4013      	ands	r3, r2
 8004226:	4a0b      	ldr	r2, [pc, #44]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 8004228:	0019      	movs	r1, r3
 800422a:	0010      	movs	r0, r2
 800422c:	f7ff fa2c 	bl	8003688 <LL_ADC_SetCommonPathInternalCh>
 8004230:	e028      	b.n	8004284 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_ADC_ConfigChannel+0x374>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d123      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4a0b      	ldr	r2, [pc, #44]	@ (800426c <HAL_ADC_ConfigChannel+0x37c>)
 8004240:	4013      	ands	r3, r2
 8004242:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <HAL_ADC_ConfigChannel+0x364>)
 8004244:	0019      	movs	r1, r3
 8004246:	0010      	movs	r0, r2
 8004248:	f7ff fa1e 	bl	8003688 <LL_ADC_SetCommonPathInternalCh>
 800424c:	e01a      	b.n	8004284 <HAL_ADC_ConfigChannel+0x394>
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	80000004 	.word	0x80000004
 8004254:	40012708 	.word	0x40012708
 8004258:	a4000200 	.word	0xa4000200
 800425c:	20000000 	.word	0x20000000
 8004260:	00030d40 	.word	0x00030d40
 8004264:	a8000400 	.word	0xa8000400
 8004268:	ff7fffff 	.word	0xff7fffff
 800426c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004274:	2220      	movs	r2, #32
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800427c:	2317      	movs	r3, #23
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2254      	movs	r2, #84	@ 0x54
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800428c:	2317      	movs	r3, #23
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	781b      	ldrb	r3, [r3, #0]
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b006      	add	sp, #24
 8004298:	bd80      	pop	{r7, pc}
 800429a:	46c0      	nop			@ (mov r8, r8)

0800429c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fb45 	bl	8003938 <LL_ADC_REG_IsConversionOngoing>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d02b      	beq.n	800430a <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff fb09 	bl	80038ce <LL_ADC_IsDisableOngoing>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d104      	bne.n	80042ca <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fb25 	bl	8003914 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042ca:	f7ff f9d3 	bl	8003674 <HAL_GetTick>
 80042ce:	0003      	movs	r3, r0
 80042d0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042d2:	e014      	b.n	80042fe <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042d4:	f7ff f9ce 	bl	8003674 <HAL_GetTick>
 80042d8:	0002      	movs	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d90d      	bls.n	80042fe <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	2210      	movs	r2, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	2201      	movs	r2, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e006      	b.n	800430c <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2204      	movs	r2, #4
 8004306:	4013      	ands	r3, r2
 8004308:	d1e4      	bne.n	80042d4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b004      	add	sp, #16
 8004312:	bd80      	pop	{r7, pc}

08004314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fac1 	bl	80038ac <LL_ADC_IsEnabled>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d162      	bne.n	80043f4 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a32      	ldr	r2, [pc, #200]	@ (8004400 <ADC_Enable+0xec>)
 8004336:	4013      	ands	r3, r2
 8004338:	d00d      	beq.n	8004356 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	2210      	movs	r2, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	2201      	movs	r2, #1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e04f      	b.n	80043f6 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0018      	movs	r0, r3
 800435c:	f7ff fa82 	bl	8003864 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004360:	4b28      	ldr	r3, [pc, #160]	@ (8004404 <ADC_Enable+0xf0>)
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff f9a4 	bl	80036b0 <LL_ADC_GetCommonPathInternalCh>
 8004368:	0002      	movs	r2, r0
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d00f      	beq.n	8004392 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004372:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <ADC_Enable+0xf4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4925      	ldr	r1, [pc, #148]	@ (800440c <ADC_Enable+0xf8>)
 8004378:	0018      	movs	r0, r3
 800437a:	f7fb fec5 	bl	8000108 <__udivsi3>
 800437e:	0003      	movs	r3, r0
 8004380:	3301      	adds	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004384:	e002      	b.n	800438c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f9      	bne.n	8004386 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7e5b      	ldrb	r3, [r3, #25]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d02c      	beq.n	80043f4 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800439a:	f7ff f96b 	bl	8003674 <HAL_GetTick>
 800439e:	0003      	movs	r3, r0
 80043a0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043a2:	e020      	b.n	80043e6 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff fa7f 	bl	80038ac <LL_ADC_IsEnabled>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d104      	bne.n	80043bc <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff fa54 	bl	8003864 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043bc:	f7ff f95a 	bl	8003674 <HAL_GetTick>
 80043c0:	0002      	movs	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d90d      	bls.n	80043e6 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	2210      	movs	r2, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	2201      	movs	r2, #1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e007      	b.n	80043f6 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d1d7      	bne.n	80043a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	80000017 	.word	0x80000017
 8004404:	40012708 	.word	0x40012708
 8004408:	20000000 	.word	0x20000000
 800440c:	00030d40 	.word	0x00030d40

08004410 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff fa56 	bl	80038ce <LL_ADC_IsDisableOngoing>
 8004422:	0003      	movs	r3, r0
 8004424:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff fa3e 	bl	80038ac <LL_ADC_IsEnabled>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d040      	beq.n	80044b6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d13d      	bne.n	80044b6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2205      	movs	r2, #5
 8004442:	4013      	ands	r3, r2
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10d      	bne.n	8004464 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fa1b 	bl	8003888 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2203      	movs	r2, #3
 8004458:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800445a:	f7ff f90b 	bl	8003674 <HAL_GetTick>
 800445e:	0003      	movs	r3, r0
 8004460:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004462:	e022      	b.n	80044aa <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	2210      	movs	r2, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	2201      	movs	r2, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e01b      	b.n	80044b8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004480:	f7ff f8f8 	bl	8003674 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d90d      	bls.n	80044aa <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	2210      	movs	r2, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449e:	2201      	movs	r2, #1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e006      	b.n	80044b8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4013      	ands	r3, r2
 80044b4:	d1e4      	bne.n	8004480 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	0002      	movs	r2, r0
 80044c8:	1dfb      	adds	r3, r7, #7
 80044ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80044d2:	d809      	bhi.n	80044e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d4:	1dfb      	adds	r3, r7, #7
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	001a      	movs	r2, r3
 80044da:	231f      	movs	r3, #31
 80044dc:	401a      	ands	r2, r3
 80044de:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <__NVIC_EnableIRQ+0x30>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	4091      	lsls	r1, r2
 80044e4:	000a      	movs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80044e8:	46c0      	nop			@ (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	e000e100 	.word	0xe000e100

080044f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	0002      	movs	r2, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b7f      	cmp	r3, #127	@ 0x7f
 8004508:	d828      	bhi.n	800455c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800450a:	4a2f      	ldr	r2, [pc, #188]	@ (80045c8 <__NVIC_SetPriority+0xd4>)
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b25b      	sxtb	r3, r3
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	33c0      	adds	r3, #192	@ 0xc0
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	589b      	ldr	r3, [r3, r2]
 800451a:	1dfa      	adds	r2, r7, #7
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	0011      	movs	r1, r2
 8004520:	2203      	movs	r2, #3
 8004522:	400a      	ands	r2, r1
 8004524:	00d2      	lsls	r2, r2, #3
 8004526:	21ff      	movs	r1, #255	@ 0xff
 8004528:	4091      	lsls	r1, r2
 800452a:	000a      	movs	r2, r1
 800452c:	43d2      	mvns	r2, r2
 800452e:	401a      	ands	r2, r3
 8004530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	22ff      	movs	r2, #255	@ 0xff
 8004538:	401a      	ands	r2, r3
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	0018      	movs	r0, r3
 8004540:	2303      	movs	r3, #3
 8004542:	4003      	ands	r3, r0
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004548:	481f      	ldr	r0, [pc, #124]	@ (80045c8 <__NVIC_SetPriority+0xd4>)
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b25b      	sxtb	r3, r3
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	430a      	orrs	r2, r1
 8004554:	33c0      	adds	r3, #192	@ 0xc0
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800455a:	e031      	b.n	80045c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800455c:	4a1b      	ldr	r2, [pc, #108]	@ (80045cc <__NVIC_SetPriority+0xd8>)
 800455e:	1dfb      	adds	r3, r7, #7
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	0019      	movs	r1, r3
 8004564:	230f      	movs	r3, #15
 8004566:	400b      	ands	r3, r1
 8004568:	3b08      	subs	r3, #8
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	3306      	adds	r3, #6
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	3304      	adds	r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1dfa      	adds	r2, r7, #7
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	0011      	movs	r1, r2
 800457c:	2203      	movs	r2, #3
 800457e:	400a      	ands	r2, r1
 8004580:	00d2      	lsls	r2, r2, #3
 8004582:	21ff      	movs	r1, #255	@ 0xff
 8004584:	4091      	lsls	r1, r2
 8004586:	000a      	movs	r2, r1
 8004588:	43d2      	mvns	r2, r2
 800458a:	401a      	ands	r2, r3
 800458c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	22ff      	movs	r2, #255	@ 0xff
 8004594:	401a      	ands	r2, r3
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	0018      	movs	r0, r3
 800459c:	2303      	movs	r3, #3
 800459e:	4003      	ands	r3, r0
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045a4:	4809      	ldr	r0, [pc, #36]	@ (80045cc <__NVIC_SetPriority+0xd8>)
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	001c      	movs	r4, r3
 80045ac:	230f      	movs	r3, #15
 80045ae:	4023      	ands	r3, r4
 80045b0:	3b08      	subs	r3, #8
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	430a      	orrs	r2, r1
 80045b6:	3306      	adds	r3, #6
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	18c3      	adds	r3, r0, r3
 80045bc:	3304      	adds	r3, #4
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b003      	add	sp, #12
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	045b      	lsls	r3, r3, #17
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d301      	bcc.n	80045e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e4:	2301      	movs	r3, #1
 80045e6:	e010      	b.n	800460a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <SysTick_Config+0x44>)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	3a01      	subs	r2, #1
 80045ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f0:	2301      	movs	r3, #1
 80045f2:	425b      	negs	r3, r3
 80045f4:	2103      	movs	r1, #3
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff ff7c 	bl	80044f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <SysTick_Config+0x44>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004602:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <SysTick_Config+0x44>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	210f      	movs	r1, #15
 8004624:	187b      	adds	r3, r7, r1
 8004626:	1c02      	adds	r2, r0, #0
 8004628:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	187b      	adds	r3, r7, r1
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	0011      	movs	r1, r2
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ff5d 	bl	80044f4 <__NVIC_SetPriority>
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b004      	add	sp, #16
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	0002      	movs	r2, r0
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff ff33 	bl	80044c0 <__NVIC_EnableIRQ>
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff ffaf 	bl	80045d0 <SysTick_Config>
 8004672:	0003      	movs	r3, r0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800468a:	e14d      	b.n	8004928 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4091      	lsls	r1, r2
 8004696:	000a      	movs	r2, r1
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <HAL_GPIO_Init+0x28>
 80046a2:	e13e      	b.n	8004922 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x38>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b12      	cmp	r3, #18
 80046b2:	d125      	bne.n	8004700 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	08da      	lsrs	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3208      	adds	r2, #8
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	58d3      	ldr	r3, [r2, r3]
 80046c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2207      	movs	r2, #7
 80046c6:	4013      	ands	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	220f      	movs	r2, #15
 80046cc:	409a      	lsls	r2, r3
 80046ce:	0013      	movs	r3, r2
 80046d0:	43da      	mvns	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	220f      	movs	r2, #15
 80046de:	401a      	ands	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2107      	movs	r1, #7
 80046e4:	400b      	ands	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	409a      	lsls	r2, r3
 80046ea:	0013      	movs	r3, r2
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	08da      	lsrs	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3208      	adds	r2, #8
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	409a      	lsls	r2, r3
 800470e:	0013      	movs	r3, r2
 8004710:	43da      	mvns	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	4013      	ands	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2203      	movs	r2, #3
 800471e:	401a      	ands	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	409a      	lsls	r2, r3
 8004726:	0013      	movs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d00b      	beq.n	8004754 <HAL_GPIO_Init+0xd8>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d007      	beq.n	8004754 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004748:	2b11      	cmp	r3, #17
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b12      	cmp	r3, #18
 8004752:	d130      	bne.n	80047b6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	409a      	lsls	r2, r3
 8004762:	0013      	movs	r3, r2
 8004764:	43da      	mvns	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	409a      	lsls	r2, r3
 8004776:	0013      	movs	r3, r2
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800478a:	2201      	movs	r2, #1
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	409a      	lsls	r2, r3
 8004790:	0013      	movs	r3, r2
 8004792:	43da      	mvns	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4013      	ands	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	2201      	movs	r2, #1
 80047a2:	401a      	ands	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	409a      	lsls	r2, r3
 80047a8:	0013      	movs	r3, r2
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d017      	beq.n	80047ee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	409a      	lsls	r2, r3
 80047cc:	0013      	movs	r3, r2
 80047ce:	43da      	mvns	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4013      	ands	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	0013      	movs	r3, r2
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	055b      	lsls	r3, r3, #21
 80047f6:	4013      	ands	r3, r2
 80047f8:	d100      	bne.n	80047fc <HAL_GPIO_Init+0x180>
 80047fa:	e092      	b.n	8004922 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80047fc:	4a50      	ldr	r2, [pc, #320]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	3318      	adds	r3, #24
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	589b      	ldr	r3, [r3, r2]
 8004808:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2203      	movs	r2, #3
 800480e:	4013      	ands	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	220f      	movs	r2, #15
 8004814:	409a      	lsls	r2, r3
 8004816:	0013      	movs	r3, r2
 8004818:	43da      	mvns	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4013      	ands	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	23a0      	movs	r3, #160	@ 0xa0
 8004824:	05db      	lsls	r3, r3, #23
 8004826:	429a      	cmp	r2, r3
 8004828:	d013      	beq.n	8004852 <HAL_GPIO_Init+0x1d6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a45      	ldr	r2, [pc, #276]	@ (8004944 <HAL_GPIO_Init+0x2c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00d      	beq.n	800484e <HAL_GPIO_Init+0x1d2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a44      	ldr	r2, [pc, #272]	@ (8004948 <HAL_GPIO_Init+0x2cc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <HAL_GPIO_Init+0x1ce>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a43      	ldr	r2, [pc, #268]	@ (800494c <HAL_GPIO_Init+0x2d0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_GPIO_Init+0x1ca>
 8004842:	2305      	movs	r3, #5
 8004844:	e006      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 8004846:	2306      	movs	r3, #6
 8004848:	e004      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 800484a:	2302      	movs	r3, #2
 800484c:	e002      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 8004852:	2300      	movs	r3, #0
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	2103      	movs	r1, #3
 8004858:	400a      	ands	r2, r1
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	4093      	lsls	r3, r2
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004864:	4936      	ldr	r1, [pc, #216]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	3318      	adds	r3, #24
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004872:	4a33      	ldr	r2, [pc, #204]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 8004874:	2380      	movs	r3, #128	@ 0x80
 8004876:	58d3      	ldr	r3, [r2, r3]
 8004878:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	43da      	mvns	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4013      	ands	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	025b      	lsls	r3, r3, #9
 800488c:	4013      	ands	r3, r2
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004898:	4929      	ldr	r1, [pc, #164]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80048a0:	4a27      	ldr	r2, [pc, #156]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80048a2:	2384      	movs	r3, #132	@ 0x84
 80048a4:	58d3      	ldr	r3, [r2, r3]
 80048a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4013      	ands	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	4013      	ands	r3, r2
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80048c6:	491e      	ldr	r1, [pc, #120]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80048c8:	2284      	movs	r2, #132	@ 0x84
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43da      	mvns	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4013      	ands	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	2380      	movs	r3, #128	@ 0x80
 80048e4:	035b      	lsls	r3, r3, #13
 80048e6:	4013      	ands	r3, r2
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43da      	mvns	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	4013      	ands	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	039b      	lsls	r3, r3, #14
 8004910:	4013      	ands	r3, r2
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_GPIO_Init+0x2c4>)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3301      	adds	r3, #1
 8004926:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	40da      	lsrs	r2, r3
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	d000      	beq.n	8004936 <HAL_GPIO_Init+0x2ba>
 8004934:	e6aa      	b.n	800468c <HAL_GPIO_Init+0x10>
  }
}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	46c0      	nop			@ (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b006      	add	sp, #24
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021800 	.word	0x40021800
 8004944:	50000400 	.word	0x50000400
 8004948:	50000800 	.word	0x50000800
 800494c:	50001400 	.word	0x50001400

08004950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	0008      	movs	r0, r1
 800495a:	0011      	movs	r1, r2
 800495c:	1cbb      	adds	r3, r7, #2
 800495e:	1c02      	adds	r2, r0, #0
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	1c7b      	adds	r3, r7, #1
 8004964:	1c0a      	adds	r2, r1, #0
 8004966:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004968:	1c7b      	adds	r3, r7, #1
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004970:	1cbb      	adds	r3, r7, #2
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004978:	e003      	b.n	8004982 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1d0      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4013      	ands	r3, r2
 80049a6:	d100      	bne.n	80049aa <HAL_RCC_OscConfig+0x1e>
 80049a8:	e069      	b.n	8004a7e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4bc8      	ldr	r3, [pc, #800]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2238      	movs	r2, #56	@ 0x38
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d105      	bne.n	80049c6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d15d      	bne.n	8004a7e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e1bc      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_OscConfig+0x56>
 80049d2:	4bbe      	ldr	r3, [pc, #760]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4bbd      	ldr	r3, [pc, #756]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049d8:	2180      	movs	r1, #128	@ 0x80
 80049da:	0249      	lsls	r1, r1, #9
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e020      	b.n	8004a24 <HAL_RCC_OscConfig+0x98>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	23a0      	movs	r3, #160	@ 0xa0
 80049e8:	02db      	lsls	r3, r3, #11
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d10e      	bne.n	8004a0c <HAL_RCC_OscConfig+0x80>
 80049ee:	4bb7      	ldr	r3, [pc, #732]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4bb6      	ldr	r3, [pc, #728]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049f4:	2180      	movs	r1, #128	@ 0x80
 80049f6:	02c9      	lsls	r1, r1, #11
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	4bb3      	ldr	r3, [pc, #716]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4bb2      	ldr	r3, [pc, #712]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a02:	2180      	movs	r1, #128	@ 0x80
 8004a04:	0249      	lsls	r1, r1, #9
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0x98>
 8004a0c:	4baf      	ldr	r3, [pc, #700]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4bae      	ldr	r3, [pc, #696]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a12:	49af      	ldr	r1, [pc, #700]	@ (8004cd0 <HAL_RCC_OscConfig+0x344>)
 8004a14:	400a      	ands	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4bac      	ldr	r3, [pc, #688]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4bab      	ldr	r3, [pc, #684]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a1e:	49ad      	ldr	r1, [pc, #692]	@ (8004cd4 <HAL_RCC_OscConfig+0x348>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d014      	beq.n	8004a56 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fe22 	bl	8003674 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004a36:	f7fe fe1d 	bl	8003674 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b64      	cmp	r3, #100	@ 0x64
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e17b      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a48:	4ba0      	ldr	r3, [pc, #640]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	4013      	ands	r3, r2
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0xaa>
 8004a54:	e013      	b.n	8004a7e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fe fe0d 	bl	8003674 <HAL_GetTick>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004a60:	f7fe fe08 	bl	8003674 <HAL_GetTick>
 8004a64:	0002      	movs	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	@ 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e166      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	4b96      	ldr	r3, [pc, #600]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	d100      	bne.n	8004a8a <HAL_RCC_OscConfig+0xfe>
 8004a88:	e086      	b.n	8004b98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	4b90      	ldr	r3, [pc, #576]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2238      	movs	r2, #56	@ 0x38
 8004a90:	4013      	ands	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d12f      	bne.n	8004afa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e14c      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa6:	4b89      	ldr	r3, [pc, #548]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4a8b      	ldr	r2, [pc, #556]	@ (8004cd8 <HAL_RCC_OscConfig+0x34c>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	4b85      	ldr	r3, [pc, #532]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d112      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ac2:	4b82      	ldr	r3, [pc, #520]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a85      	ldr	r2, [pc, #532]	@ (8004cdc <HAL_RCC_OscConfig+0x350>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0adb      	lsrs	r3, r3, #11
 8004adc:	2207      	movs	r2, #7
 8004ade:	4013      	ands	r3, r2
 8004ae0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ce0 <HAL_RCC_OscConfig+0x354>)
 8004ae2:	40da      	lsrs	r2, r3
 8004ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce4 <HAL_RCC_OscConfig+0x358>)
 8004ae6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce8 <HAL_RCC_OscConfig+0x35c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7fe fd65 	bl	80035bc <HAL_InitTick>
 8004af2:	1e03      	subs	r3, r0, #0
 8004af4:	d050      	beq.n	8004b98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e122      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d030      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b02:	4b72      	ldr	r3, [pc, #456]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x350>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	4b6e      	ldr	r3, [pc, #440]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004b16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b1c:	2180      	movs	r1, #128	@ 0x80
 8004b1e:	0049      	lsls	r1, r1, #1
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fe fda6 	bl	8003674 <HAL_GetTick>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004b2e:	f7fe fda1 	bl	8003674 <HAL_GetTick>
 8004b32:	0002      	movs	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0ff      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b40:	4b62      	ldr	r3, [pc, #392]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a61      	ldr	r2, [pc, #388]	@ (8004cd8 <HAL_RCC_OscConfig+0x34c>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	021a      	lsls	r2, r3, #8
 8004b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e019      	b.n	8004b98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004b64:	4b59      	ldr	r3, [pc, #356]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b58      	ldr	r3, [pc, #352]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b6a:	4960      	ldr	r1, [pc, #384]	@ (8004cec <HAL_RCC_OscConfig+0x360>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fe fd80 	bl	8003674 <HAL_GetTick>
 8004b74:	0003      	movs	r3, r0
 8004b76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004b7a:	f7fe fd7b 	bl	8003674 <HAL_GetTick>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0d9      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4013      	ands	r3, r2
 8004b96:	d1f0      	bne.n	8004b7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d042      	beq.n	8004c28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2238      	movs	r2, #56	@ 0x38
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	d105      	bne.n	8004bba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d138      	bne.n	8004c28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0c2      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d019      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004bc2:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004bc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004bc8:	2101      	movs	r1, #1
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bce:	f7fe fd51 	bl	8003674 <HAL_GetTick>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004bd8:	f7fe fd4c 	bl	8003674 <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0aa      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004bea:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d0f1      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x24c>
 8004bf4:	e018      	b.n	8004c28 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004bf6:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004bf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bfa:	4b34      	ldr	r3, [pc, #208]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	438a      	bics	r2, r1
 8004c00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fe fd37 	bl	8003674 <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004c0c:	f7fe fd32 	bl	8003674 <HAL_GetTick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e090      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	d1f1      	bne.n	8004c0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d100      	bne.n	8004c34 <HAL_RCC_OscConfig+0x2a8>
 8004c32:	e084      	b.n	8004d3e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c34:	230f      	movs	r3, #15
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004c3c:	4b23      	ldr	r3, [pc, #140]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2238      	movs	r2, #56	@ 0x38
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d000      	beq.n	8004c52 <HAL_RCC_OscConfig+0x2c6>
 8004c50:	e075      	b.n	8004d3e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e074      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_OscConfig+0x2e0>
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c62:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c64:	2101      	movs	r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c6a:	e01c      	b.n	8004ca6 <HAL_RCC_OscConfig+0x31a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d10c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x302>
 8004c74:	4b15      	ldr	r3, [pc, #84]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c78:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c7a:	2104      	movs	r1, #4
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c80:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c84:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c86:	2101      	movs	r1, #1
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c8c:	e00b      	b.n	8004ca6 <HAL_RCC_OscConfig+0x31a>
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c94:	2101      	movs	r1, #1
 8004c96:	438a      	bics	r2, r1
 8004c98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004c9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCC_OscConfig+0x340>)
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	438a      	bics	r2, r1
 8004ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d028      	beq.n	8004d00 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fe fce1 	bl	8003674 <HAL_GetTick>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fe fcdc 	bl	8003674 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <HAL_RCC_OscConfig+0x364>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d915      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e039      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	fffeffff 	.word	0xfffeffff
 8004cd4:	fffbffff 	.word	0xfffbffff
 8004cd8:	ffff80ff 	.word	0xffff80ff
 8004cdc:	ffffc7ff 	.word	0xffffc7ff
 8004ce0:	02dc6c00 	.word	0x02dc6c00
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	20000004 	.word	0x20000004
 8004cec:	fffffeff 	.word	0xfffffeff
 8004cf0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004cf4:	4b14      	ldr	r3, [pc, #80]	@ (8004d48 <HAL_RCC_OscConfig+0x3bc>)
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d0dc      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x32c>
 8004cfe:	e013      	b.n	8004d28 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe fcb8 	bl	8003674 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004d08:	e009      	b.n	8004d1e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fe fcb3 	bl	8003674 <HAL_GetTick>
 8004d0e:	0002      	movs	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <HAL_RCC_OscConfig+0x3c0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e010      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <HAL_RCC_OscConfig+0x3bc>)
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	2202      	movs	r2, #2
 8004d24:	4013      	ands	r3, r2
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d28:	230f      	movs	r3, #15
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d32:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCC_OscConfig+0x3bc>)
 8004d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d36:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <HAL_RCC_OscConfig+0x3bc>)
 8004d38:	4905      	ldr	r1, [pc, #20]	@ (8004d50 <HAL_RCC_OscConfig+0x3c4>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b006      	add	sp, #24
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	00001388 	.word	0x00001388
 8004d50:	efffffff 	.word	0xefffffff

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0e9      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b76      	ldr	r3, [pc, #472]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d91e      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b73      	ldr	r3, [pc, #460]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	4b70      	ldr	r3, [pc, #448]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d88:	f7fe fc74 	bl	8003674 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d90:	e009      	b.n	8004da6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d92:	f7fe fc6f 	bl	8003674 <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0ca      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004da6:	4b67      	ldr	r3, [pc, #412]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2207      	movs	r2, #7
 8004dac:	4013      	ands	r3, r2
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d1ee      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2202      	movs	r2, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d017      	beq.n	8004dee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dc8:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a60      	ldr	r2, [pc, #384]	@ (8004f50 <HAL_RCC_ClockConfig+0x1fc>)
 8004dce:	401a      	ands	r2, r3
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dd2:	21b0      	movs	r1, #176	@ 0xb0
 8004dd4:	0109      	lsls	r1, r1, #4
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dda:	4b5c      	ldr	r3, [pc, #368]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4a5d      	ldr	r2, [pc, #372]	@ (8004f54 <HAL_RCC_ClockConfig+0x200>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	4b58      	ldr	r3, [pc, #352]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d055      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004df8:	4b54      	ldr	r3, [pc, #336]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	221c      	movs	r2, #28
 8004dfe:	4393      	bics	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	4b51      	ldr	r3, [pc, #324]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e14:	4b4d      	ldr	r3, [pc, #308]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d11f      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e08b      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2c:	4b47      	ldr	r3, [pc, #284]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4013      	ands	r3, r2
 8004e36:	d113      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e07f      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004e44:	4b41      	ldr	r3, [pc, #260]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e074      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e52:	4b3e      	ldr	r3, [pc, #248]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e06d      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e60:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2207      	movs	r2, #7
 8004e66:	4393      	bics	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fe fbfe 	bl	8003674 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	e009      	b.n	8004e92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7e:	f7fe fbf9 	bl	8003674 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	4a2f      	ldr	r2, [pc, #188]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e054      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2238      	movs	r2, #56	@ 0x38
 8004e98:	401a      	ands	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1ec      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	4013      	ands	r3, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d21e      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2207      	movs	r2, #7
 8004eb8:	4393      	bics	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	4b21      	ldr	r3, [pc, #132]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ec4:	f7fe fbd6 	bl	8003674 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ece:	f7fe fbd1 	bl	8003674 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e02c      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ee2:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	4013      	ands	r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1ee      	bne.n	8004ece <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004efa:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <HAL_RCC_ClockConfig+0x204>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f0e:	f000 f82b 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f12:	0001      	movs	r1, r0
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f8>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <HAL_RCC_ClockConfig+0x208>)
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	58d3      	ldr	r3, [r2, r3]
 8004f24:	221f      	movs	r2, #31
 8004f26:	4013      	ands	r3, r2
 8004f28:	000a      	movs	r2, r1
 8004f2a:	40da      	lsrs	r2, r3
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <HAL_RCC_ClockConfig+0x20c>)
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f30:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <HAL_RCC_ClockConfig+0x210>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fe fb41 	bl	80035bc <HAL_InitTick>
 8004f3a:	0003      	movs	r3, r0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40022000 	.word	0x40022000
 8004f48:	00001388 	.word	0x00001388
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	ffff84ff 	.word	0xffff84ff
 8004f54:	fffff0ff 	.word	0xfffff0ff
 8004f58:	ffff8fff 	.word	0xffff8fff
 8004f5c:	08005e90 	.word	0x08005e90
 8004f60:	20000000 	.word	0x20000000
 8004f64:	20000004 	.word	0x20000004

08004f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2238      	movs	r2, #56	@ 0x38
 8004f74:	4013      	ands	r3, r2
 8004f76:	d10f      	bne.n	8004f98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0adb      	lsrs	r3, r3, #11
 8004f7e:	2207      	movs	r2, #7
 8004f80:	4013      	ands	r3, r2
 8004f82:	2201      	movs	r2, #1
 8004f84:	409a      	lsls	r2, r3
 8004f86:	0013      	movs	r3, r2
 8004f88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	4815      	ldr	r0, [pc, #84]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004f8e:	f7fb f8bb 	bl	8000108 <__udivsi3>
 8004f92:	0003      	movs	r3, r0
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e01e      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2238      	movs	r2, #56	@ 0x38
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fa4:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2238      	movs	r2, #56	@ 0x38
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d103      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004fbe:	4b08      	ldr	r3, [pc, #32]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2238      	movs	r2, #56	@ 0x38
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b18      	cmp	r3, #24
 8004fc8:	d103      	bne.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004fca:	23fa      	movs	r3, #250	@ 0xfa
 8004fcc:	01db      	lsls	r3, r3, #7
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	e001      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004fd6:	687b      	ldr	r3, [r7, #4]
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	02dc6c00 	.word	0x02dc6c00
 8004fe8:	007a1200 	.word	0x007a1200

08004fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004ff4:	2313      	movs	r3, #19
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ffc:	2312      	movs	r3, #18
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	4013      	ands	r3, r2
 800500e:	d100      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005010:	e079      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2011      	movs	r0, #17
 8005014:	183b      	adds	r3, r7, r0
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501a:	4b64      	ldr	r3, [pc, #400]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800501c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	055b      	lsls	r3, r3, #21
 8005022:	4013      	ands	r3, r2
 8005024:	d110      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005026:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800502a:	4b60      	ldr	r3, [pc, #384]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800502c:	2180      	movs	r1, #128	@ 0x80
 800502e:	0549      	lsls	r1, r1, #21
 8005030:	430a      	orrs	r2, r1
 8005032:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005034:	4b5d      	ldr	r3, [pc, #372]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	055b      	lsls	r3, r3, #21
 800503c:	4013      	ands	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005042:	183b      	adds	r3, r7, r0
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005048:	4b58      	ldr	r3, [pc, #352]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800504a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800504c:	23c0      	movs	r3, #192	@ 0xc0
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4013      	ands	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d019      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	d014      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005064:	4b51      	ldr	r3, [pc, #324]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005068:	4a51      	ldr	r2, [pc, #324]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800506a:	4013      	ands	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800506e:	4b4f      	ldr	r3, [pc, #316]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005070:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005072:	4b4e      	ldr	r3, [pc, #312]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005074:	2180      	movs	r1, #128	@ 0x80
 8005076:	0249      	lsls	r1, r1, #9
 8005078:	430a      	orrs	r2, r1
 800507a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800507e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005080:	4b4a      	ldr	r3, [pc, #296]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005082:	494c      	ldr	r1, [pc, #304]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005084:	400a      	ands	r2, r1
 8005086:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005088:	4b48      	ldr	r3, [pc, #288]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d016      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fe faed 	bl	8003674 <HAL_GetTick>
 800509a:	0003      	movs	r3, r0
 800509c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800509e:	e00c      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fe fae8 	bl	8003674 <HAL_GetTick>
 80050a4:	0002      	movs	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	4a43      	ldr	r2, [pc, #268]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d904      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80050b0:	2313      	movs	r3, #19
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2203      	movs	r2, #3
 80050b6:	701a      	strb	r2, [r3, #0]
          break;
 80050b8:	e004      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80050ba:	4b3c      	ldr	r3, [pc, #240]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d0ed      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80050c4:	2313      	movs	r3, #19
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d2:	4a37      	ldr	r2, [pc, #220]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050de:	430a      	orrs	r2, r1
 80050e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050e2:	e005      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	2312      	movs	r3, #18
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2213      	movs	r2, #19
 80050ea:	18ba      	adds	r2, r7, r2
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050f0:	2311      	movs	r3, #17
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fa:	4b2c      	ldr	r3, [pc, #176]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005100:	492e      	ldr	r1, [pc, #184]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	400a      	ands	r2, r1
 8005104:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	4013      	ands	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005110:	4b26      	ldr	r3, [pc, #152]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	2203      	movs	r2, #3
 8005116:	4393      	bics	r3, r2
 8005118:	0019      	movs	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	4b23      	ldr	r3, [pc, #140]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005120:	430a      	orrs	r2, r1
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2240      	movs	r2, #64	@ 0x40
 800512a:	4013      	ands	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800512e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800513e:	430a      	orrs	r2, r1
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	4013      	ands	r3, r2
 800514c:	d008      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800514e:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	0899      	lsrs	r1, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800515c:	430a      	orrs	r2, r1
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	4013      	ands	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800517c:	430a      	orrs	r2, r1
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da09      	bge.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005188:	4b08      	ldr	r3, [pc, #32]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	22e0      	movs	r2, #224	@ 0xe0
 800518e:	4393      	bics	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800519c:	2312      	movs	r3, #18
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	781b      	ldrb	r3, [r3, #0]
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b006      	add	sp, #24
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	40021000 	.word	0x40021000
 80051b0:	fffffcff 	.word	0xfffffcff
 80051b4:	fffeffff 	.word	0xfffeffff
 80051b8:	00001388 	.word	0x00001388
 80051bc:	efffffff 	.word	0xefffffff
 80051c0:	ffffcfff 	.word	0xffffcfff
 80051c4:	ffff3fff 	.word	0xffff3fff

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e04a      	b.n	8005270 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	223d      	movs	r2, #61	@ 0x3d
 80051de:	5c9b      	ldrb	r3, [r3, r2]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	223c      	movs	r2, #60	@ 0x3c
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7fe f94b 	bl	800348c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	223d      	movs	r2, #61	@ 0x3d
 80051fa:	2102      	movs	r1, #2
 80051fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	0019      	movs	r1, r3
 8005208:	0010      	movs	r0, r2
 800520a:	f000 fa35 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2248      	movs	r2, #72	@ 0x48
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	223e      	movs	r2, #62	@ 0x3e
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223f      	movs	r2, #63	@ 0x3f
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2240      	movs	r2, #64	@ 0x40
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2241      	movs	r2, #65	@ 0x41
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2242      	movs	r2, #66	@ 0x42
 800523a:	2101      	movs	r1, #1
 800523c:	5499      	strb	r1, [r3, r2]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2243      	movs	r2, #67	@ 0x43
 8005242:	2101      	movs	r1, #1
 8005244:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2244      	movs	r2, #68	@ 0x44
 800524a:	2101      	movs	r1, #1
 800524c:	5499      	strb	r1, [r3, r2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2245      	movs	r2, #69	@ 0x45
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2246      	movs	r2, #70	@ 0x46
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2247      	movs	r2, #71	@ 0x47
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	223d      	movs	r2, #61	@ 0x3d
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d021      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2202      	movs	r2, #2
 800529c:	4013      	ands	r3, r2
 800529e:	d01d      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2203      	movs	r2, #3
 80052a6:	4252      	negs	r2, r2
 80052a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2203      	movs	r2, #3
 80052b8:	4013      	ands	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f9c2 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e007      	b.n	80052d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f9b5 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 f9c1 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2204      	movs	r2, #4
 80052e0:	4013      	ands	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	d01e      	beq.n	800532a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2205      	movs	r2, #5
 80052f2:	4252      	negs	r2, r2
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	23c0      	movs	r3, #192	@ 0xc0
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4013      	ands	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f99b 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005312:	e007      	b.n	8005324 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0018      	movs	r0, r3
 8005318:	f000 f98e 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	0018      	movs	r0, r3
 8005320:	f000 f99a 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2208      	movs	r2, #8
 800532e:	4013      	ands	r3, r2
 8005330:	d021      	beq.n	8005376 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2208      	movs	r2, #8
 8005336:	4013      	ands	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2209      	movs	r2, #9
 8005340:	4252      	negs	r2, r2
 8005342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2204      	movs	r2, #4
 8005348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2203      	movs	r2, #3
 8005352:	4013      	ands	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f975 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 800535e:	e007      	b.n	8005370 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f968 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	0018      	movs	r0, r3
 800536c:	f000 f974 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2210      	movs	r2, #16
 800537a:	4013      	ands	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2210      	movs	r2, #16
 8005382:	4013      	ands	r3, r2
 8005384:	d01e      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2211      	movs	r2, #17
 800538c:	4252      	negs	r2, r2
 800538e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2208      	movs	r2, #8
 8005394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	23c0      	movs	r3, #192	@ 0xc0
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4013      	ands	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 f94e 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e007      	b.n	80053be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f941 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 f94d 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2201      	movs	r2, #1
 80053c8:	4013      	ands	r3, r2
 80053ca:	d00c      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	4013      	ands	r3, r2
 80053d2:	d008      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	4252      	negs	r2, r2
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 f921 	bl	8005628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2280      	movs	r2, #128	@ 0x80
 80053ea:	4013      	ands	r3, r2
 80053ec:	d00c      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2280      	movs	r2, #128	@ 0x80
 80053f2:	4013      	ands	r3, r2
 80053f4:	d008      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2281      	movs	r2, #129	@ 0x81
 80053fc:	4252      	negs	r2, r2
 80053fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 faaa 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	2380      	movs	r3, #128	@ 0x80
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4013      	ands	r3, r2
 8005410:	d00b      	beq.n	800542a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2280      	movs	r2, #128	@ 0x80
 8005416:	4013      	ands	r3, r2
 8005418:	d007      	beq.n	800542a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a16      	ldr	r2, [pc, #88]	@ (8005478 <HAL_TIM_IRQHandler+0x200>)
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	0018      	movs	r0, r3
 8005426:	f000 faa1 	bl	800596c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2240      	movs	r2, #64	@ 0x40
 800542e:	4013      	ands	r3, r2
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2240      	movs	r2, #64	@ 0x40
 8005436:	4013      	ands	r3, r2
 8005438:	d008      	beq.n	800544c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2241      	movs	r2, #65	@ 0x41
 8005440:	4252      	negs	r2, r2
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	0018      	movs	r0, r3
 8005448:	f000 f90e 	bl	8005668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2220      	movs	r2, #32
 8005450:	4013      	ands	r3, r2
 8005452:	d00c      	beq.n	800546e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	d008      	beq.n	800546e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2221      	movs	r2, #33	@ 0x21
 8005462:	4252      	negs	r2, r2
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0018      	movs	r0, r3
 800546a:	f000 fa6f 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	fffffeff 	.word	0xfffffeff

0800547c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	230f      	movs	r3, #15
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	223c      	movs	r2, #60	@ 0x3c
 8005492:	5c9b      	ldrb	r3, [r3, r2]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIM_ConfigClockSource+0x20>
 8005498:	2302      	movs	r3, #2
 800549a:	e0bc      	b.n	8005616 <HAL_TIM_ConfigClockSource+0x19a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	223c      	movs	r2, #60	@ 0x3c
 80054a0:	2101      	movs	r1, #1
 80054a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	223d      	movs	r2, #61	@ 0x3d
 80054a8:	2102      	movs	r1, #2
 80054aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a5a      	ldr	r2, [pc, #360]	@ (8005620 <HAL_TIM_ConfigClockSource+0x1a4>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a59      	ldr	r2, [pc, #356]	@ (8005624 <HAL_TIM_ConfigClockSource+0x1a8>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2280      	movs	r2, #128	@ 0x80
 80054d2:	0192      	lsls	r2, r2, #6
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d040      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xde>
 80054d8:	2280      	movs	r2, #128	@ 0x80
 80054da:	0192      	lsls	r2, r2, #6
 80054dc:	4293      	cmp	r3, r2
 80054de:	d900      	bls.n	80054e2 <HAL_TIM_ConfigClockSource+0x66>
 80054e0:	e088      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 80054e2:	2280      	movs	r2, #128	@ 0x80
 80054e4:	0152      	lsls	r2, r2, #5
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d100      	bne.n	80054ec <HAL_TIM_ConfigClockSource+0x70>
 80054ea:	e088      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x182>
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	0152      	lsls	r2, r2, #5
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d900      	bls.n	80054f6 <HAL_TIM_ConfigClockSource+0x7a>
 80054f4:	e07e      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 80054f6:	2b70      	cmp	r3, #112	@ 0x70
 80054f8:	d018      	beq.n	800552c <HAL_TIM_ConfigClockSource+0xb0>
 80054fa:	d900      	bls.n	80054fe <HAL_TIM_ConfigClockSource+0x82>
 80054fc:	e07a      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 80054fe:	2b60      	cmp	r3, #96	@ 0x60
 8005500:	d04f      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x126>
 8005502:	d900      	bls.n	8005506 <HAL_TIM_ConfigClockSource+0x8a>
 8005504:	e076      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 8005506:	2b50      	cmp	r3, #80	@ 0x50
 8005508:	d03b      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x106>
 800550a:	d900      	bls.n	800550e <HAL_TIM_ConfigClockSource+0x92>
 800550c:	e072      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d057      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x146>
 8005512:	d900      	bls.n	8005516 <HAL_TIM_ConfigClockSource+0x9a>
 8005514:	e06e      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 8005516:	2b30      	cmp	r3, #48	@ 0x30
 8005518:	d063      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x166>
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x166>
 8005520:	d868      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d05d      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x166>
 8005526:	2b10      	cmp	r3, #16
 8005528:	d05b      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x166>
 800552a:	e063      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	f000 f984 	bl	8005848 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2277      	movs	r2, #119	@ 0x77
 800554c:	4313      	orrs	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]
      break;
 8005558:	e052      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556a:	f000 f96d 	bl	8005848 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	01c9      	lsls	r1, r1, #7
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03e      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	001a      	movs	r2, r3
 8005590:	f000 f8de 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	@ 0x50
 800559a:	0018      	movs	r0, r3
 800559c:	f000 f938 	bl	8005810 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02e      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	001a      	movs	r2, r3
 80055b0:	f000 f8fc 	bl	80057ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	@ 0x60
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 f928 	bl	8005810 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01e      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	001a      	movs	r2, r3
 80055d0:	f000 f8be 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	@ 0x40
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 f918 	bl	8005810 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00e      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	0019      	movs	r1, r3
 80055ec:	0010      	movs	r0, r2
 80055ee:	f000 f90f 	bl	8005810 <TIM_ITRx_SetConfig>
      break;
 80055f2:	e005      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80055f4:	230f      	movs	r3, #15
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
      break;
 80055fc:	e000      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80055fe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	223d      	movs	r2, #61	@ 0x3d
 8005604:	2101      	movs	r1, #1
 8005606:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	223c      	movs	r2, #60	@ 0x3c
 800560c:	2100      	movs	r1, #0
 800560e:	5499      	strb	r1, [r3, r2]

  return status;
 8005610:	230f      	movs	r3, #15
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	781b      	ldrb	r3, [r3, #0]
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	ffceff88 	.word	0xffceff88
 8005624:	ffff00ff 	.word	0xffff00ff

08005628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005660:	46c0      	nop			@ (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2b      	ldr	r2, [pc, #172]	@ (8005738 <TIM_Base_SetConfig+0xc0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0x20>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2a      	ldr	r2, [pc, #168]	@ (800573c <TIM_Base_SetConfig+0xc4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2270      	movs	r2, #112	@ 0x70
 800569c:	4393      	bics	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	@ (8005738 <TIM_Base_SetConfig+0xc0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x5a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a21      	ldr	r2, [pc, #132]	@ (800573c <TIM_Base_SetConfig+0xc4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x5a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a20      	ldr	r2, [pc, #128]	@ (8005740 <TIM_Base_SetConfig+0xc8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x5a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <TIM_Base_SetConfig+0xcc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x5a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <TIM_Base_SetConfig+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <TIM_Base_SetConfig+0xd4>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2280      	movs	r2, #128	@ 0x80
 80056e8:	4393      	bics	r3, r2
 80056ea:	001a      	movs	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <TIM_Base_SetConfig+0xc0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_Base_SetConfig+0xaa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a0b      	ldr	r2, [pc, #44]	@ (8005744 <TIM_Base_SetConfig+0xcc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_Base_SetConfig+0xaa>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a0a      	ldr	r2, [pc, #40]	@ (8005748 <TIM_Base_SetConfig+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d103      	bne.n	800572a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	615a      	str	r2, [r3, #20]
}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b004      	add	sp, #16
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40000400 	.word	0x40000400
 8005740:	40002000 	.word	0x40002000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800
 800574c:	fffffcff 	.word	0xfffffcff

08005750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2201      	movs	r2, #1
 8005768:	4393      	bics	r3, r2
 800576a:	001a      	movs	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	22f0      	movs	r2, #240	@ 0xf0
 800577a:	4393      	bics	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	220a      	movs	r2, #10
 800578c:	4393      	bics	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	46c0      	nop			@ (mov r8, r8)
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b006      	add	sp, #24
 80057aa:	bd80      	pop	{r7, pc}

080057ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	2210      	movs	r2, #16
 80057c4:	4393      	bics	r3, r2
 80057c6:	001a      	movs	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4a0d      	ldr	r2, [pc, #52]	@ (800580c <TIM_TI2_ConfigInputStage+0x60>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	031b      	lsls	r3, r3, #12
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	22a0      	movs	r2, #160	@ 0xa0
 80057e8:	4393      	bics	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	46bd      	mov	sp, r7
 8005806:	b006      	add	sp, #24
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	ffff0fff 	.word	0xffff0fff

08005810 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a08      	ldr	r2, [pc, #32]	@ (8005844 <TIM_ITRx_SetConfig+0x34>)
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	2207      	movs	r2, #7
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	609a      	str	r2, [r3, #8]
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b004      	add	sp, #16
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	ffcfff8f 	.word	0xffcfff8f

08005848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4a09      	ldr	r2, [pc, #36]	@ (8005884 <TIM_ETR_SetConfig+0x3c>)
 8005860:	4013      	ands	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	431a      	orrs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	46c0      	nop			@ (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b006      	add	sp, #24
 8005882:	bd80      	pop	{r7, pc}
 8005884:	ffff00ff 	.word	0xffff00ff

08005888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	223c      	movs	r2, #60	@ 0x3c
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e04a      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	223c      	movs	r2, #60	@ 0x3c
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	223d      	movs	r2, #61	@ 0x3d
 80058ac:	2102      	movs	r1, #2
 80058ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2270      	movs	r2, #112	@ 0x70
 80058e0:	4393      	bics	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2280      	movs	r2, #128	@ 0x80
 800590e:	4393      	bics	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	223d      	movs	r2, #61	@ 0x3d
 8005928:	2101      	movs	r1, #1
 800592a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	223c      	movs	r2, #60	@ 0x3c
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	b004      	add	sp, #16
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	40012c00 	.word	0x40012c00
 8005944:	ff0fffff 	.word	0xff0fffff
 8005948:	40000400 	.word	0x40000400

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005974:	46c0      	nop			@ (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <memset>:
 800597c:	0003      	movs	r3, r0
 800597e:	1882      	adds	r2, r0, r2
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	7019      	strb	r1, [r3, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <__errno>:
 800598c:	4b01      	ldr	r3, [pc, #4]	@ (8005994 <__errno+0x8>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	4770      	bx	lr
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	2000000c 	.word	0x2000000c

08005998 <__libc_init_array>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	2600      	movs	r6, #0
 800599c:	4c0c      	ldr	r4, [pc, #48]	@ (80059d0 <__libc_init_array+0x38>)
 800599e:	4d0d      	ldr	r5, [pc, #52]	@ (80059d4 <__libc_init_array+0x3c>)
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	42a6      	cmp	r6, r4
 80059a6:	d109      	bne.n	80059bc <__libc_init_array+0x24>
 80059a8:	2600      	movs	r6, #0
 80059aa:	f000 fa07 	bl	8005dbc <_init>
 80059ae:	4c0a      	ldr	r4, [pc, #40]	@ (80059d8 <__libc_init_array+0x40>)
 80059b0:	4d0a      	ldr	r5, [pc, #40]	@ (80059dc <__libc_init_array+0x44>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	42a6      	cmp	r6, r4
 80059b8:	d105      	bne.n	80059c6 <__libc_init_array+0x2e>
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	00b3      	lsls	r3, r6, #2
 80059be:	58eb      	ldr	r3, [r5, r3]
 80059c0:	4798      	blx	r3
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7ee      	b.n	80059a4 <__libc_init_array+0xc>
 80059c6:	00b3      	lsls	r3, r6, #2
 80059c8:	58eb      	ldr	r3, [r5, r3]
 80059ca:	4798      	blx	r3
 80059cc:	3601      	adds	r6, #1
 80059ce:	e7f2      	b.n	80059b6 <__libc_init_array+0x1e>
 80059d0:	08005ed4 	.word	0x08005ed4
 80059d4:	08005ed4 	.word	0x08005ed4
 80059d8:	08005ed8 	.word	0x08005ed8
 80059dc:	08005ed4 	.word	0x08005ed4

080059e0 <log>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	0004      	movs	r4, r0
 80059e4:	000d      	movs	r5, r1
 80059e6:	f000 f837 	bl	8005a58 <__ieee754_log>
 80059ea:	0022      	movs	r2, r4
 80059ec:	0006      	movs	r6, r0
 80059ee:	000f      	movs	r7, r1
 80059f0:	002b      	movs	r3, r5
 80059f2:	0020      	movs	r0, r4
 80059f4:	0029      	movs	r1, r5
 80059f6:	f7fd f92b 	bl	8002c50 <__aeabi_dcmpun>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d115      	bne.n	8005a2a <log+0x4a>
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	0020      	movs	r0, r4
 8005a04:	0029      	movs	r1, r5
 8005a06:	f7fa fc35 	bl	8000274 <__aeabi_dcmpgt>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d10d      	bne.n	8005a2a <log+0x4a>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	0020      	movs	r0, r4
 8005a14:	0029      	movs	r1, r5
 8005a16:	f7fa fc13 	bl	8000240 <__aeabi_dcmpeq>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d008      	beq.n	8005a30 <log+0x50>
 8005a1e:	f7ff ffb5 	bl	800598c <__errno>
 8005a22:	2322      	movs	r3, #34	@ 0x22
 8005a24:	2600      	movs	r6, #0
 8005a26:	4f07      	ldr	r7, [pc, #28]	@ (8005a44 <log+0x64>)
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	0030      	movs	r0, r6
 8005a2c:	0039      	movs	r1, r7
 8005a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a30:	f7ff ffac 	bl	800598c <__errno>
 8005a34:	2321      	movs	r3, #33	@ 0x21
 8005a36:	6003      	str	r3, [r0, #0]
 8005a38:	4803      	ldr	r0, [pc, #12]	@ (8005a48 <log+0x68>)
 8005a3a:	f000 f807 	bl	8005a4c <nan>
 8005a3e:	0006      	movs	r6, r0
 8005a40:	000f      	movs	r7, r1
 8005a42:	e7f2      	b.n	8005a2a <log+0x4a>
 8005a44:	fff00000 	.word	0xfff00000
 8005a48:	08005ed0 	.word	0x08005ed0

08005a4c <nan>:
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	4901      	ldr	r1, [pc, #4]	@ (8005a54 <nan+0x8>)
 8005a50:	4770      	bx	lr
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	7ff80000 	.word	0x7ff80000

08005a58 <__ieee754_log>:
 8005a58:	2380      	movs	r3, #128	@ 0x80
 8005a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5c:	035b      	lsls	r3, r3, #13
 8005a5e:	000e      	movs	r6, r1
 8005a60:	b08d      	sub	sp, #52	@ 0x34
 8005a62:	4299      	cmp	r1, r3
 8005a64:	da23      	bge.n	8005aae <__ieee754_log+0x56>
 8005a66:	004b      	lsls	r3, r1, #1
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	4303      	orrs	r3, r0
 8005a6c:	d107      	bne.n	8005a7e <__ieee754_log+0x26>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	2000      	movs	r0, #0
 8005a74:	49b4      	ldr	r1, [pc, #720]	@ (8005d48 <__ieee754_log+0x2f0>)
 8005a76:	f7fb fe43 	bl	8001700 <__aeabi_ddiv>
 8005a7a:	b00d      	add	sp, #52	@ 0x34
 8005a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	da06      	bge.n	8005a90 <__ieee754_log+0x38>
 8005a82:	0002      	movs	r2, r0
 8005a84:	000b      	movs	r3, r1
 8005a86:	f7fc fd47 	bl	8002518 <__aeabi_dsub>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e7f2      	b.n	8005a76 <__ieee754_log+0x1e>
 8005a90:	4bae      	ldr	r3, [pc, #696]	@ (8005d4c <__ieee754_log+0x2f4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fc fa78 	bl	8001f88 <__aeabi_dmul>
 8005a98:	2336      	movs	r3, #54	@ 0x36
 8005a9a:	000e      	movs	r6, r1
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	4aac      	ldr	r2, [pc, #688]	@ (8005d50 <__ieee754_log+0x2f8>)
 8005aa0:	4296      	cmp	r6, r2
 8005aa2:	dd06      	ble.n	8005ab2 <__ieee754_log+0x5a>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	000b      	movs	r3, r1
 8005aa8:	f7fb fac6 	bl	8001038 <__aeabi_dadd>
 8005aac:	e7e5      	b.n	8005a7a <__ieee754_log+0x22>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e7f5      	b.n	8005a9e <__ieee754_log+0x46>
 8005ab2:	4ca8      	ldr	r4, [pc, #672]	@ (8005d54 <__ieee754_log+0x2fc>)
 8005ab4:	1532      	asrs	r2, r6, #20
 8005ab6:	1912      	adds	r2, r2, r4
 8005ab8:	0336      	lsls	r6, r6, #12
 8005aba:	4ca7      	ldr	r4, [pc, #668]	@ (8005d58 <__ieee754_log+0x300>)
 8005abc:	18d2      	adds	r2, r2, r3
 8005abe:	0b33      	lsrs	r3, r6, #12
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	191b      	adds	r3, r3, r4
 8005ac4:	2480      	movs	r4, #128	@ 0x80
 8005ac6:	0364      	lsls	r4, r4, #13
 8005ac8:	4023      	ands	r3, r4
 8005aca:	4ca4      	ldr	r4, [pc, #656]	@ (8005d5c <__ieee754_log+0x304>)
 8005acc:	9d02      	ldr	r5, [sp, #8]
 8005ace:	405c      	eors	r4, r3
 8005ad0:	151b      	asrs	r3, r3, #20
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	4325      	orrs	r5, r4
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	0029      	movs	r1, r5
 8005adc:	4b9f      	ldr	r3, [pc, #636]	@ (8005d5c <__ieee754_log+0x304>)
 8005ade:	f7fc fd1b 	bl	8002518 <__aeabi_dsub>
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	0006      	movs	r6, r0
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	031b      	lsls	r3, r3, #12
 8005aea:	000f      	movs	r7, r1
 8005aec:	2200      	movs	r2, #0
 8005aee:	0b1b      	lsrs	r3, r3, #12
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	dc64      	bgt.n	8005bbe <__ieee754_log+0x166>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f7fa fba3 	bl	8000240 <__aeabi_dcmpeq>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d019      	beq.n	8005b32 <__ieee754_log+0xda>
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d100      	bne.n	8005b06 <__ieee754_log+0xae>
 8005b04:	e11c      	b.n	8005d40 <__ieee754_log+0x2e8>
 8005b06:	0018      	movs	r0, r3
 8005b08:	f7fd f8c4 	bl	8002c94 <__aeabi_i2d>
 8005b0c:	4a94      	ldr	r2, [pc, #592]	@ (8005d60 <__ieee754_log+0x308>)
 8005b0e:	4b95      	ldr	r3, [pc, #596]	@ (8005d64 <__ieee754_log+0x30c>)
 8005b10:	0004      	movs	r4, r0
 8005b12:	000d      	movs	r5, r1
 8005b14:	f7fc fa38 	bl	8001f88 <__aeabi_dmul>
 8005b18:	4a93      	ldr	r2, [pc, #588]	@ (8005d68 <__ieee754_log+0x310>)
 8005b1a:	0006      	movs	r6, r0
 8005b1c:	000f      	movs	r7, r1
 8005b1e:	4b93      	ldr	r3, [pc, #588]	@ (8005d6c <__ieee754_log+0x314>)
 8005b20:	0020      	movs	r0, r4
 8005b22:	0029      	movs	r1, r5
 8005b24:	f7fc fa30 	bl	8001f88 <__aeabi_dmul>
 8005b28:	0002      	movs	r2, r0
 8005b2a:	000b      	movs	r3, r1
 8005b2c:	0030      	movs	r0, r6
 8005b2e:	0039      	movs	r1, r7
 8005b30:	e7ba      	b.n	8005aa8 <__ieee754_log+0x50>
 8005b32:	4a8f      	ldr	r2, [pc, #572]	@ (8005d70 <__ieee754_log+0x318>)
 8005b34:	4b8f      	ldr	r3, [pc, #572]	@ (8005d74 <__ieee754_log+0x31c>)
 8005b36:	0030      	movs	r0, r6
 8005b38:	0039      	movs	r1, r7
 8005b3a:	f7fc fa25 	bl	8001f88 <__aeabi_dmul>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	000b      	movs	r3, r1
 8005b42:	2000      	movs	r0, #0
 8005b44:	498c      	ldr	r1, [pc, #560]	@ (8005d78 <__ieee754_log+0x320>)
 8005b46:	f7fc fce7 	bl	8002518 <__aeabi_dsub>
 8005b4a:	0032      	movs	r2, r6
 8005b4c:	0004      	movs	r4, r0
 8005b4e:	000d      	movs	r5, r1
 8005b50:	003b      	movs	r3, r7
 8005b52:	0030      	movs	r0, r6
 8005b54:	0039      	movs	r1, r7
 8005b56:	f7fc fa17 	bl	8001f88 <__aeabi_dmul>
 8005b5a:	000b      	movs	r3, r1
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	0029      	movs	r1, r5
 8005b60:	0020      	movs	r0, r4
 8005b62:	f7fc fa11 	bl	8001f88 <__aeabi_dmul>
 8005b66:	9b00      	ldr	r3, [sp, #0]
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <__ieee754_log+0x126>
 8005b70:	0002      	movs	r2, r0
 8005b72:	000b      	movs	r3, r1
 8005b74:	0030      	movs	r0, r6
 8005b76:	0039      	movs	r1, r7
 8005b78:	f7fc fcce 	bl	8002518 <__aeabi_dsub>
 8005b7c:	e77d      	b.n	8005a7a <__ieee754_log+0x22>
 8005b7e:	9800      	ldr	r0, [sp, #0]
 8005b80:	f7fd f888 	bl	8002c94 <__aeabi_i2d>
 8005b84:	4a76      	ldr	r2, [pc, #472]	@ (8005d60 <__ieee754_log+0x308>)
 8005b86:	4b77      	ldr	r3, [pc, #476]	@ (8005d64 <__ieee754_log+0x30c>)
 8005b88:	0004      	movs	r4, r0
 8005b8a:	000d      	movs	r5, r1
 8005b8c:	f7fc f9fc 	bl	8001f88 <__aeabi_dmul>
 8005b90:	4a75      	ldr	r2, [pc, #468]	@ (8005d68 <__ieee754_log+0x310>)
 8005b92:	9000      	str	r0, [sp, #0]
 8005b94:	9101      	str	r1, [sp, #4]
 8005b96:	4b75      	ldr	r3, [pc, #468]	@ (8005d6c <__ieee754_log+0x314>)
 8005b98:	0020      	movs	r0, r4
 8005b9a:	0029      	movs	r1, r5
 8005b9c:	f7fc f9f4 	bl	8001f88 <__aeabi_dmul>
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	000b      	movs	r3, r1
 8005ba4:	9802      	ldr	r0, [sp, #8]
 8005ba6:	9903      	ldr	r1, [sp, #12]
 8005ba8:	f7fc fcb6 	bl	8002518 <__aeabi_dsub>
 8005bac:	0032      	movs	r2, r6
 8005bae:	003b      	movs	r3, r7
 8005bb0:	f7fc fcb2 	bl	8002518 <__aeabi_dsub>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	000b      	movs	r3, r1
 8005bb8:	9800      	ldr	r0, [sp, #0]
 8005bba:	9901      	ldr	r1, [sp, #4]
 8005bbc:	e7dc      	b.n	8005b78 <__ieee754_log+0x120>
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	05db      	lsls	r3, r3, #23
 8005bc2:	f7fb fa39 	bl	8001038 <__aeabi_dadd>
 8005bc6:	0002      	movs	r2, r0
 8005bc8:	000b      	movs	r3, r1
 8005bca:	0030      	movs	r0, r6
 8005bcc:	0039      	movs	r1, r7
 8005bce:	f7fb fd97 	bl	8001700 <__aeabi_ddiv>
 8005bd2:	9004      	str	r0, [sp, #16]
 8005bd4:	9105      	str	r1, [sp, #20]
 8005bd6:	9800      	ldr	r0, [sp, #0]
 8005bd8:	f7fd f85c 	bl	8002c94 <__aeabi_i2d>
 8005bdc:	9a04      	ldr	r2, [sp, #16]
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	9006      	str	r0, [sp, #24]
 8005be2:	9107      	str	r1, [sp, #28]
 8005be4:	0010      	movs	r0, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	f7fc f9ce 	bl	8001f88 <__aeabi_dmul>
 8005bec:	4a63      	ldr	r2, [pc, #396]	@ (8005d7c <__ieee754_log+0x324>)
 8005bee:	9b02      	ldr	r3, [sp, #8]
 8005bf0:	4694      	mov	ip, r2
 8005bf2:	4463      	add	r3, ip
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bf8:	000b      	movs	r3, r1
 8005bfa:	9008      	str	r0, [sp, #32]
 8005bfc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bfe:	f7fc f9c3 	bl	8001f88 <__aeabi_dmul>
 8005c02:	0004      	movs	r4, r0
 8005c04:	000d      	movs	r5, r1
 8005c06:	4a5e      	ldr	r2, [pc, #376]	@ (8005d80 <__ieee754_log+0x328>)
 8005c08:	4b5e      	ldr	r3, [pc, #376]	@ (8005d84 <__ieee754_log+0x32c>)
 8005c0a:	f7fc f9bd 	bl	8001f88 <__aeabi_dmul>
 8005c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005d88 <__ieee754_log+0x330>)
 8005c10:	4b5e      	ldr	r3, [pc, #376]	@ (8005d8c <__ieee754_log+0x334>)
 8005c12:	f7fb fa11 	bl	8001038 <__aeabi_dadd>
 8005c16:	0022      	movs	r2, r4
 8005c18:	002b      	movs	r3, r5
 8005c1a:	f7fc f9b5 	bl	8001f88 <__aeabi_dmul>
 8005c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8005d90 <__ieee754_log+0x338>)
 8005c20:	4b5c      	ldr	r3, [pc, #368]	@ (8005d94 <__ieee754_log+0x33c>)
 8005c22:	f7fb fa09 	bl	8001038 <__aeabi_dadd>
 8005c26:	0022      	movs	r2, r4
 8005c28:	002b      	movs	r3, r5
 8005c2a:	f7fc f9ad 	bl	8001f88 <__aeabi_dmul>
 8005c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8005d98 <__ieee754_log+0x340>)
 8005c30:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <__ieee754_log+0x344>)
 8005c32:	f7fb fa01 	bl	8001038 <__aeabi_dadd>
 8005c36:	9a08      	ldr	r2, [sp, #32]
 8005c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3a:	f7fc f9a5 	bl	8001f88 <__aeabi_dmul>
 8005c3e:	4a58      	ldr	r2, [pc, #352]	@ (8005da0 <__ieee754_log+0x348>)
 8005c40:	9008      	str	r0, [sp, #32]
 8005c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c44:	4b57      	ldr	r3, [pc, #348]	@ (8005da4 <__ieee754_log+0x34c>)
 8005c46:	0020      	movs	r0, r4
 8005c48:	0029      	movs	r1, r5
 8005c4a:	f7fc f99d 	bl	8001f88 <__aeabi_dmul>
 8005c4e:	4a56      	ldr	r2, [pc, #344]	@ (8005da8 <__ieee754_log+0x350>)
 8005c50:	4b56      	ldr	r3, [pc, #344]	@ (8005dac <__ieee754_log+0x354>)
 8005c52:	f7fb f9f1 	bl	8001038 <__aeabi_dadd>
 8005c56:	0022      	movs	r2, r4
 8005c58:	002b      	movs	r3, r5
 8005c5a:	f7fc f995 	bl	8001f88 <__aeabi_dmul>
 8005c5e:	4a54      	ldr	r2, [pc, #336]	@ (8005db0 <__ieee754_log+0x358>)
 8005c60:	4b54      	ldr	r3, [pc, #336]	@ (8005db4 <__ieee754_log+0x35c>)
 8005c62:	f7fb f9e9 	bl	8001038 <__aeabi_dadd>
 8005c66:	0022      	movs	r2, r4
 8005c68:	002b      	movs	r3, r5
 8005c6a:	f7fc f98d 	bl	8001f88 <__aeabi_dmul>
 8005c6e:	0002      	movs	r2, r0
 8005c70:	000b      	movs	r3, r1
 8005c72:	9808      	ldr	r0, [sp, #32]
 8005c74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c76:	f7fb f9df 	bl	8001038 <__aeabi_dadd>
 8005c7a:	9a02      	ldr	r2, [sp, #8]
 8005c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8005db8 <__ieee754_log+0x360>)
 8005c7e:	0004      	movs	r4, r0
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c84:	000d      	movs	r5, r1
 8005c86:	4313      	orrs	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dd34      	ble.n	8005cf6 <__ieee754_log+0x29e>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d78 <__ieee754_log+0x320>)
 8005c90:	0030      	movs	r0, r6
 8005c92:	0039      	movs	r1, r7
 8005c94:	f7fc f978 	bl	8001f88 <__aeabi_dmul>
 8005c98:	0032      	movs	r2, r6
 8005c9a:	003b      	movs	r3, r7
 8005c9c:	f7fc f974 	bl	8001f88 <__aeabi_dmul>
 8005ca0:	0002      	movs	r2, r0
 8005ca2:	000b      	movs	r3, r1
 8005ca4:	9002      	str	r0, [sp, #8]
 8005ca6:	9103      	str	r1, [sp, #12]
 8005ca8:	0020      	movs	r0, r4
 8005caa:	0029      	movs	r1, r5
 8005cac:	f7fb f9c4 	bl	8001038 <__aeabi_dadd>
 8005cb0:	9a04      	ldr	r2, [sp, #16]
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	f7fc f968 	bl	8001f88 <__aeabi_dmul>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	0004      	movs	r4, r0
 8005cbc:	000d      	movs	r5, r1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <__ieee754_log+0x278>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	000b      	movs	r3, r1
 8005cc6:	9802      	ldr	r0, [sp, #8]
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	f7fc fc25 	bl	8002518 <__aeabi_dsub>
 8005cce:	e74f      	b.n	8005b70 <__ieee754_log+0x118>
 8005cd0:	4a23      	ldr	r2, [pc, #140]	@ (8005d60 <__ieee754_log+0x308>)
 8005cd2:	4b24      	ldr	r3, [pc, #144]	@ (8005d64 <__ieee754_log+0x30c>)
 8005cd4:	9806      	ldr	r0, [sp, #24]
 8005cd6:	9907      	ldr	r1, [sp, #28]
 8005cd8:	f7fc f956 	bl	8001f88 <__aeabi_dmul>
 8005cdc:	4a22      	ldr	r2, [pc, #136]	@ (8005d68 <__ieee754_log+0x310>)
 8005cde:	9000      	str	r0, [sp, #0]
 8005ce0:	9101      	str	r1, [sp, #4]
 8005ce2:	9806      	ldr	r0, [sp, #24]
 8005ce4:	9907      	ldr	r1, [sp, #28]
 8005ce6:	4b21      	ldr	r3, [pc, #132]	@ (8005d6c <__ieee754_log+0x314>)
 8005ce8:	f7fc f94e 	bl	8001f88 <__aeabi_dmul>
 8005cec:	0022      	movs	r2, r4
 8005cee:	002b      	movs	r3, r5
 8005cf0:	f7fb f9a2 	bl	8001038 <__aeabi_dadd>
 8005cf4:	e754      	b.n	8005ba0 <__ieee754_log+0x148>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	000b      	movs	r3, r1
 8005cfa:	0030      	movs	r0, r6
 8005cfc:	0039      	movs	r1, r7
 8005cfe:	f7fc fc0b 	bl	8002518 <__aeabi_dsub>
 8005d02:	9a04      	ldr	r2, [sp, #16]
 8005d04:	9b05      	ldr	r3, [sp, #20]
 8005d06:	f7fc f93f 	bl	8001f88 <__aeabi_dmul>
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	0004      	movs	r4, r0
 8005d0e:	000d      	movs	r5, r1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <__ieee754_log+0x2c2>
 8005d14:	0002      	movs	r2, r0
 8005d16:	000b      	movs	r3, r1
 8005d18:	e72c      	b.n	8005b74 <__ieee754_log+0x11c>
 8005d1a:	4a11      	ldr	r2, [pc, #68]	@ (8005d60 <__ieee754_log+0x308>)
 8005d1c:	4b11      	ldr	r3, [pc, #68]	@ (8005d64 <__ieee754_log+0x30c>)
 8005d1e:	9806      	ldr	r0, [sp, #24]
 8005d20:	9907      	ldr	r1, [sp, #28]
 8005d22:	f7fc f931 	bl	8001f88 <__aeabi_dmul>
 8005d26:	4a10      	ldr	r2, [pc, #64]	@ (8005d68 <__ieee754_log+0x310>)
 8005d28:	9000      	str	r0, [sp, #0]
 8005d2a:	9101      	str	r1, [sp, #4]
 8005d2c:	9806      	ldr	r0, [sp, #24]
 8005d2e:	9907      	ldr	r1, [sp, #28]
 8005d30:	4b0e      	ldr	r3, [pc, #56]	@ (8005d6c <__ieee754_log+0x314>)
 8005d32:	f7fc f929 	bl	8001f88 <__aeabi_dmul>
 8005d36:	0002      	movs	r2, r0
 8005d38:	000b      	movs	r3, r1
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	0029      	movs	r1, r5
 8005d3e:	e733      	b.n	8005ba8 <__ieee754_log+0x150>
 8005d40:	2000      	movs	r0, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	e699      	b.n	8005a7a <__ieee754_log+0x22>
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	c3500000 	.word	0xc3500000
 8005d4c:	43500000 	.word	0x43500000
 8005d50:	7fefffff 	.word	0x7fefffff
 8005d54:	fffffc01 	.word	0xfffffc01
 8005d58:	00095f64 	.word	0x00095f64
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	fee00000 	.word	0xfee00000
 8005d64:	3fe62e42 	.word	0x3fe62e42
 8005d68:	35793c76 	.word	0x35793c76
 8005d6c:	3dea39ef 	.word	0x3dea39ef
 8005d70:	55555555 	.word	0x55555555
 8005d74:	3fd55555 	.word	0x3fd55555
 8005d78:	3fe00000 	.word	0x3fe00000
 8005d7c:	fff9eb86 	.word	0xfff9eb86
 8005d80:	df3e5244 	.word	0xdf3e5244
 8005d84:	3fc2f112 	.word	0x3fc2f112
 8005d88:	96cb03de 	.word	0x96cb03de
 8005d8c:	3fc74664 	.word	0x3fc74664
 8005d90:	94229359 	.word	0x94229359
 8005d94:	3fd24924 	.word	0x3fd24924
 8005d98:	55555593 	.word	0x55555593
 8005d9c:	3fe55555 	.word	0x3fe55555
 8005da0:	d078c69f 	.word	0xd078c69f
 8005da4:	3fc39a09 	.word	0x3fc39a09
 8005da8:	1d8e78af 	.word	0x1d8e78af
 8005dac:	3fcc71c5 	.word	0x3fcc71c5
 8005db0:	9997fa04 	.word	0x9997fa04
 8005db4:	3fd99999 	.word	0x3fd99999
 8005db8:	0006b851 	.word	0x0006b851

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
