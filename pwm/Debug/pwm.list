
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080023a4  080023a4  000033a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002438  08002438  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002438  08002438  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002438  08002438  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800243c  0800243c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002440  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800244c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800244c  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008022  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001572  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000758  00000000  00000000  0000df40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012204  00000000  00000000  0000e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a69d  00000000  00000000  0002089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074f7f  00000000  00000000  0002af39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009feb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  0009fefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000a2108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800238c 	.word	0x0800238c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800238c 	.word	0x0800238c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <atualiza_largura_puslo_LEDS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void atualiza_largura_puslo_LEDS(int start, int end, int step) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
    for (int i = start; i != end; i += step) {
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	61fb      	str	r3, [r7, #28]
 8000230:	e015      	b.n	800025e <atualiza_largura_puslo_LEDS+0x3e>
        int LED1_pulse = i;
 8000232:	69fb      	ldr	r3, [r7, #28]
 8000234:	61bb      	str	r3, [r7, #24]
        int LED2_pulse = 1000 - i;
 8000236:	69fb      	ldr	r3, [r7, #28]
 8000238:	22fa      	movs	r2, #250	@ 0xfa
 800023a:	0092      	lsls	r2, r2, #2
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	617b      	str	r3, [r7, #20]

        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, LED1_pulse);
 8000240:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <atualiza_largura_puslo_LEDS+0x50>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	69ba      	ldr	r2, [r7, #24]
 8000246:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, LED2_pulse);
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <atualiza_largura_puslo_LEDS+0x50>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	641a      	str	r2, [r3, #64]	@ 0x40

        HAL_Delay(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fac7 	bl	80007e4 <HAL_Delay>
    for (int i = start; i != end; i += step) {
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	18d3      	adds	r3, r2, r3
 800025c:	61fb      	str	r3, [r7, #28]
 800025e:	69fa      	ldr	r2, [r7, #28]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	429a      	cmp	r2, r3
 8000264:	d1e5      	bne.n	8000232 <atualiza_largura_puslo_LEDS+0x12>
    }
}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	46c0      	nop			@ (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b008      	add	sp, #32
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000028 	.word	0x20000028

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fa37 	bl	80006ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f822 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f93a 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000284:	f000 f862 	bl	800034c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Inicia Timer 1 para geração de PWM no canais 3 (PB6, LED1)
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <main+0x4c>)
 800028a:	2108      	movs	r1, #8
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f8d3 	bl	8001438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);	// Inicia Timer 1 para geração de PWM no canais 4 (PB7, LED2)
 8000292:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <main+0x4c>)
 8000294:	210c      	movs	r1, #12
 8000296:	0018      	movs	r0, r3
 8000298:	f001 f8ce 	bl	8001438 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Aumenta gradualmente a largura de pulso no LED1 e diminui no LED2
	atualiza_largura_puslo_LEDS(0, 1000, 1);
 800029c:	23fa      	movs	r3, #250	@ 0xfa
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	2201      	movs	r2, #1
 80002a2:	0019      	movs	r1, r3
 80002a4:	2000      	movs	r0, #0
 80002a6:	f7ff ffbb 	bl	8000220 <atualiza_largura_puslo_LEDS>

	// Diminui gradualmente a largura de pulso no LED1 e aumenta no LED2
	atualiza_largura_puslo_LEDS(1000, 0, -1);
 80002aa:	2301      	movs	r3, #1
 80002ac:	425a      	negs	r2, r3
 80002ae:	23fa      	movs	r3, #250	@ 0xfa
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	2100      	movs	r1, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffb3 	bl	8000220 <atualiza_largura_puslo_LEDS>
	atualiza_largura_puslo_LEDS(0, 1000, 1);
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	e7ee      	b.n	800029c <main+0x28>
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	20000028 	.word	0x20000028

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b08d      	sub	sp, #52	@ 0x34
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	2414      	movs	r4, #20
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	231c      	movs	r3, #28
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f002 f82d 	bl	8002334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	003b      	movs	r3, r7
 80002dc:	0018      	movs	r0, r3
 80002de:	2314      	movs	r3, #20
 80002e0:	001a      	movs	r2, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	f002 f826 	bl	8002334 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2202      	movs	r2, #2
 80002ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	0052      	lsls	r2, r2, #1
 80002f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2240      	movs	r2, #64	@ 0x40
 8000300:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	193b      	adds	r3, r7, r4
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fcaf 	bl	8000c68 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800030e:	f000 f915 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	003b      	movs	r3, r7
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000330:	003b      	movs	r3, r7
 8000332:	2101      	movs	r1, #1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fe7b 	bl	8001030 <HAL_RCC_ClockConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800033e:	f000 f8fd 	bl	800053c <Error_Handler>
  }
}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b00d      	add	sp, #52	@ 0x34
 8000348:	bd90      	pop	{r4, r7, pc}
	...

0800034c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b09c      	sub	sp, #112	@ 0x70
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000352:	2360      	movs	r3, #96	@ 0x60
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	2310      	movs	r3, #16
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f001 ffe9 	bl	8002334 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000362:	2354      	movs	r3, #84	@ 0x54
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	0018      	movs	r0, r3
 8000368:	230c      	movs	r3, #12
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f001 ffe1 	bl	8002334 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000372:	2338      	movs	r3, #56	@ 0x38
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	231c      	movs	r3, #28
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f001 ffd9 	bl	8002334 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	0018      	movs	r0, r3
 8000386:	2334      	movs	r3, #52	@ 0x34
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f001 ffd2 	bl	8002334 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000390:	4b56      	ldr	r3, [pc, #344]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 8000392:	4a57      	ldr	r2, [pc, #348]	@ (80004f0 <MX_TIM1_Init+0x1a4>)
 8000394:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000396:	4b55      	ldr	r3, [pc, #340]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 8000398:	222f      	movs	r2, #47	@ 0x2f
 800039a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b53      	ldr	r3, [pc, #332]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80003a2:	4b52      	ldr	r3, [pc, #328]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003a4:	4a53      	ldr	r2, [pc, #332]	@ (80004f4 <MX_TIM1_Init+0x1a8>)
 80003a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b50      	ldr	r3, [pc, #320]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ae:	4b4f      	ldr	r3, [pc, #316]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b4:	4b4d      	ldr	r3, [pc, #308]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ba:	4b4c      	ldr	r3, [pc, #304]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 ff83 	bl	80012c8 <HAL_TIM_Base_Init>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003c6:	f000 f8b9 	bl	800053c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ca:	2160      	movs	r1, #96	@ 0x60
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2280      	movs	r2, #128	@ 0x80
 80003d0:	0152      	lsls	r2, r2, #5
 80003d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d4:	187a      	adds	r2, r7, r1
 80003d6:	4b45      	ldr	r3, [pc, #276]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fa04 	bl	80017e8 <HAL_TIM_ConfigClockSource>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80003e4:	f000 f8aa 	bl	800053c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003e8:	4b40      	ldr	r3, [pc, #256]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 ffc4 	bl	8001378 <HAL_TIM_PWM_Init>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80003f4:	f000 f8a2 	bl	800053c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f8:	2154      	movs	r1, #84	@ 0x54
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800040c:	187a      	adds	r2, r7, r1
 800040e:	4b37      	ldr	r3, [pc, #220]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fe86 	bl	8002124 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800041c:	f000 f88e 	bl	800053c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000420:	2138      	movs	r1, #56	@ 0x38
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2260      	movs	r2, #96	@ 0x60
 8000426:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800044c:	1879      	adds	r1, r7, r1
 800044e:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 8000450:	2208      	movs	r2, #8
 8000452:	0018      	movs	r0, r3
 8000454:	f001 f8c8 	bl	80015e8 <HAL_TIM_PWM_ConfigChannel>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800045c:	f000 f86e 	bl	800053c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000460:	2338      	movs	r3, #56	@ 0x38
 8000462:	18f9      	adds	r1, r7, r3
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 8000466:	220c      	movs	r2, #12
 8000468:	0018      	movs	r0, r3
 800046a:	f001 f8bd 	bl	80015e8 <HAL_TIM_PWM_ConfigChannel>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000472:	f000 f863 	bl	800053c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0192      	lsls	r2, r2, #6
 800049a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	0492      	lsls	r2, r2, #18
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fe8a 	bl	80021e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80004d8:	f000 f830 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004dc:	4b03      	ldr	r3, [pc, #12]	@ (80004ec <MX_TIM1_Init+0x1a0>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 f876 	bl	80005d0 <HAL_TIM_MspPostInit>

}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b01c      	add	sp, #112	@ 0x70
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40012c00 	.word	0x40012c00
 80004f4:	000003e7 	.word	0x000003e7

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000504:	2102      	movs	r1, #2
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x40>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050e:	2202      	movs	r2, #2
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_GPIO_Init+0x40>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_MspInit+0x44>)
 8000550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <HAL_MspInit+0x44>)
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	641a      	str	r2, [r3, #64]	@ 0x40
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <HAL_MspInit+0x44>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <HAL_MspInit+0x44>)
 8000568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <HAL_MspInit+0x44>)
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0549      	lsls	r1, r1, #21
 8000570:	430a      	orrs	r2, r1
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_MspInit+0x44>)
 8000576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	055b      	lsls	r3, r3, #21
 800057c:	4013      	ands	r3, r2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <HAL_TIM_Base_MspInit+0x38>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10d      	bne.n	80005be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_TIM_Base_MspInit+0x3c>)
 80005a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <HAL_TIM_Base_MspInit+0x3c>)
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	0109      	lsls	r1, r1, #4
 80005ac:	430a      	orrs	r2, r1
 80005ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <HAL_TIM_Base_MspInit+0x3c>)
 80005b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005b4:	2380      	movs	r3, #128	@ 0x80
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b004      	add	sp, #16
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	40012c00 	.word	0x40012c00
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b089      	sub	sp, #36	@ 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	240c      	movs	r4, #12
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	0018      	movs	r0, r3
 80005de:	2314      	movs	r3, #20
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f001 fea6 	bl	8002334 <memset>
  if(htim->Instance==TIM1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <HAL_TIM_MspPostInit+0x70>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d121      	bne.n	8000636 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_TIM_MspPostInit+0x74>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_TIM_MspPostInit+0x74>)
 80005f8:	2102      	movs	r1, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_TIM_MspPostInit+0x74>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000602:	2202      	movs	r2, #2
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	22c0      	movs	r2, #192	@ 0xc0
 8000610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2201      	movs	r2, #1
 8000628:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	187b      	adds	r3, r7, r1
 800062c:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <HAL_TIM_MspPostInit+0x78>)
 800062e:	0019      	movs	r1, r3
 8000630:	0010      	movs	r0, r2
 8000632:	f000 f9af 	bl	8000994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b009      	add	sp, #36	@ 0x24
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	40012c00 	.word	0x40012c00
 8000644:	40021000 	.word	0x40021000
 8000648:	50000400 	.word	0x50000400

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000674:	f000 f89a 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <SystemInit+0x14>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0512      	lsls	r2, r2, #20
 800068a:	609a      	str	r2, [r3, #8]
#endif
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff fff0 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <LoopForever+0xe>)
  adds r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80006bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006be:	3204      	adds	r2, #4

080006c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <LoopForever+0x16>)
  cmp r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006c6:	f001 fe3d 	bl	8002344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fdd3 	bl	8000274 <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80006d4:	08002440 	.word	0x08002440
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006e0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006e4:	20000078 	.word	0x20000078

080006e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_IRQHandler>

080006ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f6:	2003      	movs	r0, #3
 80006f8:	f000 f80e 	bl	8000718 <HAL_InitTick>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d003      	beq.n	8000708 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e001      	b.n	800070c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000708:	f7ff ff1e 	bl	8000548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <HAL_InitTick+0x88>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d02b      	beq.n	8000788 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <HAL_InitTick+0x8c>)
 8000732:	681c      	ldr	r4, [r3, #0]
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_InitTick+0x88>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	0019      	movs	r1, r3
 800073a:	23fa      	movs	r3, #250	@ 0xfa
 800073c:	0098      	lsls	r0, r3, #2
 800073e:	f7ff fce3 	bl	8000108 <__udivsi3>
 8000742:	0003      	movs	r3, r0
 8000744:	0019      	movs	r1, r3
 8000746:	0020      	movs	r0, r4
 8000748:	f7ff fcde 	bl	8000108 <__udivsi3>
 800074c:	0003      	movs	r3, r0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f913 	bl	800097a <HAL_SYSTICK_Config>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d112      	bne.n	800077e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d80a      	bhi.n	8000774 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2301      	movs	r3, #1
 8000762:	425b      	negs	r3, r3
 8000764:	2200      	movs	r2, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f8f2 	bl	8000950 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_InitTick+0x90>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	e00d      	b.n	8000790 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e008      	b.n	8000790 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077e:	230f      	movs	r3, #15
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e003      	b.n	8000790 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000790:	230f      	movs	r3, #15
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b005      	add	sp, #20
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001a      	movs	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	18d2      	adds	r2, r2, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_IncTick+0x20>)
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000074 	.word	0x20000074

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000074 	.word	0x20000074

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	0003      	movs	r3, r0
 80007f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	001a      	movs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	189b      	adds	r3, r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	f7ff ffe0 	bl	80007d0 <HAL_GetTick>
 8000810:	0002      	movs	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000840:	d828      	bhi.n	8000894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <__NVIC_SetPriority+0xd4>)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	33c0      	adds	r3, #192	@ 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	589b      	ldr	r3, [r3, r2]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	@ 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	@ 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	481f      	ldr	r0, [pc, #124]	@ (8000900 <__NVIC_SetPriority+0xd4>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	33c0      	adds	r3, #192	@ 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000892:	e031      	b.n	80008f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <__NVIC_SetPriority+0xd8>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	230f      	movs	r3, #15
 800089e:	400b      	ands	r3, r1
 80008a0:	3b08      	subs	r3, #8
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	3306      	adds	r3, #6
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	3304      	adds	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	@ 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	@ 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001c      	movs	r4, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4023      	ands	r3, r4
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	3306      	adds	r3, #6
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	429a      	cmp	r2, r3
 800091a:	d301      	bcc.n	8000920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091c:	2301      	movs	r3, #1
 800091e:	e010      	b.n	8000942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <SysTick_Config+0x44>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	3a01      	subs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000928:	2301      	movs	r3, #1
 800092a:	425b      	negs	r3, r3
 800092c:	2103      	movs	r1, #3
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <SysTick_Config+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	@ (800094c <SysTick_Config+0x44>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	210f      	movs	r1, #15
 800095c:	187b      	adds	r3, r7, r1
 800095e:	1c02      	adds	r2, r0, #0
 8000960:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ffbf 	bl	8000908 <SysTick_Config>
 800098a:	0003      	movs	r3, r0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009a2:	e14d      	b.n	8000c40 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2101      	movs	r1, #1
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d100      	bne.n	80009bc <HAL_GPIO_Init+0x28>
 80009ba:	e13e      	b.n	8000c3a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x38>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b12      	cmp	r3, #18
 80009ca:	d125      	bne.n	8000a18 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	08da      	lsrs	r2, r3, #3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3208      	adds	r2, #8
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	58d3      	ldr	r3, [r2, r3]
 80009d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	2207      	movs	r2, #7
 80009de:	4013      	ands	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	220f      	movs	r2, #15
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	43da      	mvns	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	4013      	ands	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	220f      	movs	r2, #15
 80009f6:	401a      	ands	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2107      	movs	r1, #7
 80009fc:	400b      	ands	r3, r1
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	6979      	ldr	r1, [r7, #20]
 8000a16:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	409a      	lsls	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2203      	movs	r2, #3
 8000a36:	401a      	ands	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d00b      	beq.n	8000a6c <HAL_GPIO_Init+0xd8>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b12      	cmp	r3, #18
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	4013      	ands	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	2201      	movs	r2, #1
 8000aba:	401a      	ands	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d017      	beq.n	8000b06 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	4013      	ands	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	@ 0x80
 8000b0c:	055b      	lsls	r3, r3, #21
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x180>
 8000b12:	e092      	b.n	8000c3a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b14:	4a50      	ldr	r2, [pc, #320]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3318      	adds	r3, #24
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	589b      	ldr	r3, [r3, r2]
 8000b20:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	2203      	movs	r2, #3
 8000b26:	4013      	ands	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	0013      	movs	r3, r2
 8000b30:	43da      	mvns	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	23a0      	movs	r3, #160	@ 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d013      	beq.n	8000b6a <HAL_GPIO_Init+0x1d6>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a45      	ldr	r2, [pc, #276]	@ (8000c5c <HAL_GPIO_Init+0x2c8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d00d      	beq.n	8000b66 <HAL_GPIO_Init+0x1d2>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a44      	ldr	r2, [pc, #272]	@ (8000c60 <HAL_GPIO_Init+0x2cc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d007      	beq.n	8000b62 <HAL_GPIO_Init+0x1ce>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a43      	ldr	r2, [pc, #268]	@ (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_GPIO_Init+0x1ca>
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x1d8>
 8000b5e:	2306      	movs	r3, #6
 8000b60:	e004      	b.n	8000b6c <HAL_GPIO_Init+0x1d8>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e002      	b.n	8000b6c <HAL_GPIO_Init+0x1d8>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e000      	b.n	8000b6c <HAL_GPIO_Init+0x1d8>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	2103      	movs	r1, #3
 8000b70:	400a      	ands	r2, r1
 8000b72:	00d2      	lsls	r2, r2, #3
 8000b74:	4093      	lsls	r3, r2
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b7c:	4936      	ldr	r1, [pc, #216]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3318      	adds	r3, #24
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b8a:	4a33      	ldr	r2, [pc, #204]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	58d3      	ldr	r3, [r2, r3]
 8000b90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000bb0:	4929      	ldr	r1, [pc, #164]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000bb8:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000bba:	2384      	movs	r3, #132	@ 0x84
 8000bbc:	58d3      	ldr	r3, [r2, r3]
 8000bbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	029b      	lsls	r3, r3, #10
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000bde:	491e      	ldr	r1, [pc, #120]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000be0:	2284      	movs	r2, #132	@ 0x84
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	035b      	lsls	r3, r3, #13
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	2380      	movs	r3, #128	@ 0x80
 8000c26:	039b      	lsls	r3, r3, #14
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	40da      	lsrs	r2, r3
 8000c48:	1e13      	subs	r3, r2, #0
 8000c4a:	d000      	beq.n	8000c4e <HAL_GPIO_Init+0x2ba>
 8000c4c:	e6aa      	b.n	80009a4 <HAL_GPIO_Init+0x10>
  }
}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b006      	add	sp, #24
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	50000400 	.word	0x50000400
 8000c60:	50000800 	.word	0x50000800
 8000c64:	50001400 	.word	0x50001400

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e1d0      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x1e>
 8000c84:	e069      	b.n	8000d5a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c86:	4bc8      	ldr	r3, [pc, #800]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2238      	movs	r2, #56	@ 0x38
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d105      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d15d      	bne.n	8000d5a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e1bc      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	025b      	lsls	r3, r3, #9
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d107      	bne.n	8000cbe <HAL_RCC_OscConfig+0x56>
 8000cae:	4bbe      	ldr	r3, [pc, #760]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4bbd      	ldr	r3, [pc, #756]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cb4:	2180      	movs	r1, #128	@ 0x80
 8000cb6:	0249      	lsls	r1, r1, #9
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e020      	b.n	8000d00 <HAL_RCC_OscConfig+0x98>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	23a0      	movs	r3, #160	@ 0xa0
 8000cc4:	02db      	lsls	r3, r3, #11
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x80>
 8000cca:	4bb7      	ldr	r3, [pc, #732]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4bb6      	ldr	r3, [pc, #728]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cd0:	2180      	movs	r1, #128	@ 0x80
 8000cd2:	02c9      	lsls	r1, r1, #11
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4bb3      	ldr	r3, [pc, #716]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4bb2      	ldr	r3, [pc, #712]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0x98>
 8000ce8:	4baf      	ldr	r3, [pc, #700]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4bae      	ldr	r3, [pc, #696]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cee:	49af      	ldr	r1, [pc, #700]	@ (8000fac <HAL_RCC_OscConfig+0x344>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4bac      	ldr	r3, [pc, #688]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4bab      	ldr	r3, [pc, #684]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000cfa:	49ad      	ldr	r1, [pc, #692]	@ (8000fb0 <HAL_RCC_OscConfig+0x348>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d014      	beq.n	8000d32 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d08:	f7ff fd62 	bl	80007d0 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fd5d 	bl	80007d0 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b64      	cmp	r3, #100	@ 0x64
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e17b      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d24:	4ba0      	ldr	r3, [pc, #640]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	@ 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0f0      	beq.n	8000d12 <HAL_RCC_OscConfig+0xaa>
 8000d30:	e013      	b.n	8000d5a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d32:	f7ff fd4d 	bl	80007d0 <HAL_GetTick>
 8000d36:	0003      	movs	r3, r0
 8000d38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fd48 	bl	80007d0 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	@ 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e166      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d4e:	4b96      	ldr	r3, [pc, #600]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	d100      	bne.n	8000d66 <HAL_RCC_OscConfig+0xfe>
 8000d64:	e086      	b.n	8000e74 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d66:	4b90      	ldr	r3, [pc, #576]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2238      	movs	r2, #56	@ 0x38
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d12f      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e14c      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d82:	4b89      	ldr	r3, [pc, #548]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a8b      	ldr	r2, [pc, #556]	@ (8000fb4 <HAL_RCC_OscConfig+0x34c>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	021a      	lsls	r2, r3, #8
 8000d92:	4b85      	ldr	r3, [pc, #532]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d94:	430a      	orrs	r2, r1
 8000d96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d112      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d9e:	4b82      	ldr	r3, [pc, #520]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a85      	ldr	r2, [pc, #532]	@ (8000fb8 <HAL_RCC_OscConfig+0x350>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	0019      	movs	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000db2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	0adb      	lsrs	r3, r3, #11
 8000db8:	2207      	movs	r2, #7
 8000dba:	4013      	ands	r3, r2
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8000fbc <HAL_RCC_OscConfig+0x354>)
 8000dbe:	40da      	lsrs	r2, r3
 8000dc0:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc0 <HAL_RCC_OscConfig+0x358>)
 8000dc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc4 <HAL_RCC_OscConfig+0x35c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fca5 	bl	8000718 <HAL_InitTick>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d050      	beq.n	8000e74 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e122      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d030      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dde:	4b72      	ldr	r3, [pc, #456]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a75      	ldr	r2, [pc, #468]	@ (8000fb8 <HAL_RCC_OscConfig+0x350>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	0019      	movs	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000df2:	4b6d      	ldr	r3, [pc, #436]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0049      	lsls	r1, r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e00:	f7ff fce6 	bl	80007d0 <HAL_GetTick>
 8000e04:	0003      	movs	r3, r0
 8000e06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fce1 	bl	80007d0 <HAL_GetTick>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0ff      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e1c:	4b62      	ldr	r3, [pc, #392]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a61      	ldr	r2, [pc, #388]	@ (8000fb4 <HAL_RCC_OscConfig+0x34c>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	021a      	lsls	r2, r3, #8
 8000e38:	4b5b      	ldr	r3, [pc, #364]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	e019      	b.n	8000e74 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000e40:	4b59      	ldr	r3, [pc, #356]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e46:	4960      	ldr	r1, [pc, #384]	@ (8000fc8 <HAL_RCC_OscConfig+0x360>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fcc0 	bl	80007d0 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e56:	f7ff fcbb 	bl	80007d0 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e0d9      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e68:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4013      	ands	r3, r2
 8000e72:	d1f0      	bne.n	8000e56 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d042      	beq.n	8000f04 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2238      	movs	r2, #56	@ 0x38
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b18      	cmp	r3, #24
 8000e88:	d105      	bne.n	8000e96 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d138      	bne.n	8000f04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c2      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d019      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e9e:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ea0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ea2:	4b41      	ldr	r3, [pc, #260]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fc91 	bl	80007d0 <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fc8c 	bl	80007d0 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e0aa      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000ec6:	4b38      	ldr	r3, [pc, #224]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d0f1      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x24c>
 8000ed0:	e018      	b.n	8000f04 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	438a      	bics	r2, r1
 8000edc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc77 	bl	80007d0 <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc72 	bl	80007d0 <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e090      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000efa:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d1f1      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2a8>
 8000f0e:	e084      	b.n	800101a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2238      	movs	r2, #56	@ 0x38
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b20      	cmp	r3, #32
 8000f22:	d106      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d000      	beq.n	8000f2e <HAL_RCC_OscConfig+0x2c6>
 8000f2c:	e075      	b.n	800101a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e074      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2e0>
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f46:	e01c      	b.n	8000f82 <HAL_RCC_OscConfig+0x31a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d10c      	bne.n	8000f6a <HAL_RCC_OscConfig+0x302>
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	430a      	orrs	r2, r1
 8000f66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f68:	e00b      	b.n	8000f82 <HAL_RCC_OscConfig+0x31a>
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	438a      	bics	r2, r1
 8000f74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	438a      	bics	r2, r1
 8000f80:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d028      	beq.n	8000fdc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc21 	bl	80007d0 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc1c 	bl	80007d0 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_RCC_OscConfig+0x364>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d915      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e039      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	fffeffff 	.word	0xfffeffff
 8000fb0:	fffbffff 	.word	0xfffbffff
 8000fb4:	ffff80ff 	.word	0xffff80ff
 8000fb8:	ffffc7ff 	.word	0xffffc7ff
 8000fbc:	02dc6c00 	.word	0x02dc6c00
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	fffffeff 	.word	0xfffffeff
 8000fcc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_RCC_OscConfig+0x3bc>)
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d0dc      	beq.n	8000f94 <HAL_RCC_OscConfig+0x32c>
 8000fda:	e013      	b.n	8001004 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fbf8 	bl	80007d0 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000fe4:	e009      	b.n	8000ffa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fbf3 	bl	80007d0 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_RCC_OscConfig+0x3c0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e010      	b.n	800101c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_RCC_OscConfig+0x3bc>)
 8000ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d1f0      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d105      	bne.n	800101a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_RCC_OscConfig+0x3bc>)
 8001010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <HAL_RCC_OscConfig+0x3bc>)
 8001014:	4905      	ldr	r1, [pc, #20]	@ (800102c <HAL_RCC_OscConfig+0x3c4>)
 8001016:	400a      	ands	r2, r1
 8001018:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b006      	add	sp, #24
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	00001388 	.word	0x00001388
 800102c:	efffffff 	.word	0xefffffff

08001030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0e9      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001044:	4b76      	ldr	r3, [pc, #472]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2207      	movs	r2, #7
 800104a:	4013      	ands	r3, r2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d91e      	bls.n	8001090 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	4b73      	ldr	r3, [pc, #460]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2207      	movs	r2, #7
 8001058:	4393      	bics	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	4b70      	ldr	r3, [pc, #448]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001064:	f7ff fbb4 	bl	80007d0 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106c:	e009      	b.n	8001082 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800106e:	f7ff fbaf 	bl	80007d0 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4a6a      	ldr	r2, [pc, #424]	@ (8001224 <HAL_RCC_ClockConfig+0x1f4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e0ca      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001082:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2207      	movs	r2, #7
 8001088:	4013      	ands	r3, r2
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d1ee      	bne.n	800106e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2202      	movs	r2, #2
 8001096:	4013      	ands	r3, r2
 8001098:	d017      	beq.n	80010ca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	d008      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010a4:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a60      	ldr	r2, [pc, #384]	@ (800122c <HAL_RCC_ClockConfig+0x1fc>)
 80010aa:	401a      	ands	r2, r3
 80010ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010ae:	21b0      	movs	r1, #176	@ 0xb0
 80010b0:	0109      	lsls	r1, r1, #4
 80010b2:	430a      	orrs	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001230 <HAL_RCC_ClockConfig+0x200>)
 80010bc:	4013      	ands	r3, r2
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b58      	ldr	r3, [pc, #352]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	d055      	beq.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80010d4:	4b54      	ldr	r3, [pc, #336]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	221c      	movs	r2, #28
 80010da:	4393      	bics	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	4b51      	ldr	r3, [pc, #324]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d11f      	bne.n	800113c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e08b      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001108:	4b47      	ldr	r3, [pc, #284]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4013      	ands	r3, r2
 8001112:	d113      	bne.n	800113c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e07f      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d106      	bne.n	800112e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001120:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001124:	2202      	movs	r2, #2
 8001126:	4013      	ands	r3, r2
 8001128:	d108      	bne.n	800113c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e074      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800112e:	4b3e      	ldr	r3, [pc, #248]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 8001130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001132:	2202      	movs	r2, #2
 8001134:	4013      	ands	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e06d      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800113c:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2207      	movs	r2, #7
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4b37      	ldr	r3, [pc, #220]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 800114c:	430a      	orrs	r2, r1
 800114e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001150:	f7ff fb3e 	bl	80007d0 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001158:	e009      	b.n	800116e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800115a:	f7ff fb39 	bl	80007d0 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	4a2f      	ldr	r2, [pc, #188]	@ (8001224 <HAL_RCC_ClockConfig+0x1f4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e054      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2238      	movs	r2, #56	@ 0x38
 8001174:	401a      	ands	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	429a      	cmp	r2, r3
 800117e:	d1ec      	bne.n	800115a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2207      	movs	r2, #7
 8001186:	4013      	ands	r3, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d21e      	bcs.n	80011cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2207      	movs	r2, #7
 8001194:	4393      	bics	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fb16 	bl	80007d0 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a8:	e009      	b.n	80011be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011aa:	f7ff fb11 	bl	80007d0 <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_RCC_ClockConfig+0x1f4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e02c      	b.n	8001218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_RCC_ClockConfig+0x1f0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2207      	movs	r2, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1ee      	bne.n	80011aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2204      	movs	r2, #4
 80011d2:	4013      	ands	r3, r2
 80011d4:	d009      	beq.n	80011ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_RCC_ClockConfig+0x204>)
 80011dc:	4013      	ands	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80011ea:	f000 f82b 	bl	8001244 <HAL_RCC_GetSysClockFreq>
 80011ee:	0001      	movs	r1, r0
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_RCC_ClockConfig+0x1f8>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	220f      	movs	r2, #15
 80011f8:	401a      	ands	r2, r3
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_RCC_ClockConfig+0x208>)
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	58d3      	ldr	r3, [r2, r3]
 8001200:	221f      	movs	r2, #31
 8001202:	4013      	ands	r3, r2
 8001204:	000a      	movs	r2, r1
 8001206:	40da      	lsrs	r2, r3
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_RCC_ClockConfig+0x20c>)
 800120a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_RCC_ClockConfig+0x210>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fa81 	bl	8000718 <HAL_InitTick>
 8001216:	0003      	movs	r3, r0
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000
 8001224:	00001388 	.word	0x00001388
 8001228:	40021000 	.word	0x40021000
 800122c:	ffff84ff 	.word	0xffff84ff
 8001230:	fffff0ff 	.word	0xfffff0ff
 8001234:	ffff8fff 	.word	0xffff8fff
 8001238:	080023a4 	.word	0x080023a4
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x78>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2238      	movs	r2, #56	@ 0x38
 8001250:	4013      	ands	r3, r2
 8001252:	d10f      	bne.n	8001274 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x78>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0adb      	lsrs	r3, r3, #11
 800125a:	2207      	movs	r2, #7
 800125c:	4013      	ands	r3, r2
 800125e:	2201      	movs	r2, #1
 8001260:	409a      	lsls	r2, r3
 8001262:	0013      	movs	r3, r2
 8001264:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800126a:	f7fe ff4d 	bl	8000108 <__udivsi3>
 800126e:	0003      	movs	r3, r0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e01e      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x78>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2238      	movs	r2, #56	@ 0x38
 800127a:	4013      	ands	r3, r2
 800127c:	2b08      	cmp	r3, #8
 800127e:	d102      	bne.n	8001286 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x80>)
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x78>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2238      	movs	r2, #56	@ 0x38
 800128c:	4013      	ands	r3, r2
 800128e:	2b20      	cmp	r3, #32
 8001290:	d103      	bne.n	800129a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001292:	2380      	movs	r3, #128	@ 0x80
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x78>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2238      	movs	r2, #56	@ 0x38
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b18      	cmp	r3, #24
 80012a4:	d103      	bne.n	80012ae <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80012a6:	23fa      	movs	r3, #250	@ 0xfa
 80012a8:	01db      	lsls	r3, r3, #7
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	e001      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	02dc6c00 	.word	0x02dc6c00
 80012c4:	007a1200 	.word	0x007a1200

080012c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e04a      	b.n	8001370 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	223d      	movs	r2, #61	@ 0x3d
 80012de:	5c9b      	ldrb	r3, [r3, r2]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d107      	bne.n	80012f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	223c      	movs	r2, #60	@ 0x3c
 80012ea:	2100      	movs	r1, #0
 80012ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff f94d 	bl	8000590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	223d      	movs	r2, #61	@ 0x3d
 80012fa:	2102      	movs	r1, #2
 80012fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3304      	adds	r3, #4
 8001306:	0019      	movs	r1, r3
 8001308:	0010      	movs	r0, r2
 800130a:	f000 fb43 	bl	8001994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2248      	movs	r2, #72	@ 0x48
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	223e      	movs	r2, #62	@ 0x3e
 800131a:	2101      	movs	r1, #1
 800131c:	5499      	strb	r1, [r3, r2]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	223f      	movs	r2, #63	@ 0x3f
 8001322:	2101      	movs	r1, #1
 8001324:	5499      	strb	r1, [r3, r2]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2240      	movs	r2, #64	@ 0x40
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2241      	movs	r2, #65	@ 0x41
 8001332:	2101      	movs	r1, #1
 8001334:	5499      	strb	r1, [r3, r2]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2242      	movs	r2, #66	@ 0x42
 800133a:	2101      	movs	r1, #1
 800133c:	5499      	strb	r1, [r3, r2]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2243      	movs	r2, #67	@ 0x43
 8001342:	2101      	movs	r1, #1
 8001344:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2244      	movs	r2, #68	@ 0x44
 800134a:	2101      	movs	r1, #1
 800134c:	5499      	strb	r1, [r3, r2]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2245      	movs	r2, #69	@ 0x45
 8001352:	2101      	movs	r1, #1
 8001354:	5499      	strb	r1, [r3, r2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2246      	movs	r2, #70	@ 0x46
 800135a:	2101      	movs	r1, #1
 800135c:	5499      	strb	r1, [r3, r2]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2247      	movs	r2, #71	@ 0x47
 8001362:	2101      	movs	r1, #1
 8001364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	223d      	movs	r2, #61	@ 0x3d
 800136a:	2101      	movs	r1, #1
 800136c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e04a      	b.n	8001420 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	223d      	movs	r2, #61	@ 0x3d
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	223c      	movs	r2, #60	@ 0x3c
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 f841 	bl	8001428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	223d      	movs	r2, #61	@ 0x3d
 80013aa:	2102      	movs	r1, #2
 80013ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	0019      	movs	r1, r3
 80013b8:	0010      	movs	r0, r2
 80013ba:	f000 faeb 	bl	8001994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2248      	movs	r2, #72	@ 0x48
 80013c2:	2101      	movs	r1, #1
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	223e      	movs	r2, #62	@ 0x3e
 80013ca:	2101      	movs	r1, #1
 80013cc:	5499      	strb	r1, [r3, r2]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	223f      	movs	r2, #63	@ 0x3f
 80013d2:	2101      	movs	r1, #1
 80013d4:	5499      	strb	r1, [r3, r2]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	2101      	movs	r1, #1
 80013dc:	5499      	strb	r1, [r3, r2]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	@ 0x41
 80013e2:	2101      	movs	r1, #1
 80013e4:	5499      	strb	r1, [r3, r2]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2242      	movs	r2, #66	@ 0x42
 80013ea:	2101      	movs	r1, #1
 80013ec:	5499      	strb	r1, [r3, r2]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2243      	movs	r2, #67	@ 0x43
 80013f2:	2101      	movs	r1, #1
 80013f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2244      	movs	r2, #68	@ 0x44
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2245      	movs	r2, #69	@ 0x45
 8001402:	2101      	movs	r1, #1
 8001404:	5499      	strb	r1, [r3, r2]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2246      	movs	r2, #70	@ 0x46
 800140a:	2101      	movs	r1, #1
 800140c:	5499      	strb	r1, [r3, r2]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2247      	movs	r2, #71	@ 0x47
 8001412:	2101      	movs	r1, #1
 8001414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	223d      	movs	r2, #61	@ 0x3d
 800141a:	2101      	movs	r1, #1
 800141c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d108      	bne.n	800145a <HAL_TIM_PWM_Start+0x22>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	223e      	movs	r2, #62	@ 0x3e
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	4193      	sbcs	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	e037      	b.n	80014ca <HAL_TIM_PWM_Start+0x92>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d108      	bne.n	8001472 <HAL_TIM_PWM_Start+0x3a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	223f      	movs	r2, #63	@ 0x3f
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3b01      	subs	r3, #1
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	4193      	sbcs	r3, r2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	e02b      	b.n	80014ca <HAL_TIM_PWM_Start+0x92>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d108      	bne.n	800148a <HAL_TIM_PWM_Start+0x52>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3b01      	subs	r3, #1
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	4193      	sbcs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	e01f      	b.n	80014ca <HAL_TIM_PWM_Start+0x92>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d108      	bne.n	80014a2 <HAL_TIM_PWM_Start+0x6a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	@ 0x41
 8001494:	5c9b      	ldrb	r3, [r3, r2]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	4193      	sbcs	r3, r2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	e013      	b.n	80014ca <HAL_TIM_PWM_Start+0x92>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	d108      	bne.n	80014ba <HAL_TIM_PWM_Start+0x82>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2242      	movs	r2, #66	@ 0x42
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	4193      	sbcs	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	e007      	b.n	80014ca <HAL_TIM_PWM_Start+0x92>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2243      	movs	r2, #67	@ 0x43
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	4193      	sbcs	r3, r2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07b      	b.n	80015ca <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d104      	bne.n	80014e2 <HAL_TIM_PWM_Start+0xaa>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	223e      	movs	r2, #62	@ 0x3e
 80014dc:	2102      	movs	r1, #2
 80014de:	5499      	strb	r1, [r3, r2]
 80014e0:	e023      	b.n	800152a <HAL_TIM_PWM_Start+0xf2>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d104      	bne.n	80014f2 <HAL_TIM_PWM_Start+0xba>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	223f      	movs	r2, #63	@ 0x3f
 80014ec:	2102      	movs	r1, #2
 80014ee:	5499      	strb	r1, [r3, r2]
 80014f0:	e01b      	b.n	800152a <HAL_TIM_PWM_Start+0xf2>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d104      	bne.n	8001502 <HAL_TIM_PWM_Start+0xca>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2240      	movs	r2, #64	@ 0x40
 80014fc:	2102      	movs	r1, #2
 80014fe:	5499      	strb	r1, [r3, r2]
 8001500:	e013      	b.n	800152a <HAL_TIM_PWM_Start+0xf2>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d104      	bne.n	8001512 <HAL_TIM_PWM_Start+0xda>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2241      	movs	r2, #65	@ 0x41
 800150c:	2102      	movs	r1, #2
 800150e:	5499      	strb	r1, [r3, r2]
 8001510:	e00b      	b.n	800152a <HAL_TIM_PWM_Start+0xf2>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d104      	bne.n	8001522 <HAL_TIM_PWM_Start+0xea>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2242      	movs	r2, #66	@ 0x42
 800151c:	2102      	movs	r1, #2
 800151e:	5499      	strb	r1, [r3, r2]
 8001520:	e003      	b.n	800152a <HAL_TIM_PWM_Start+0xf2>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2243      	movs	r2, #67	@ 0x43
 8001526:	2102      	movs	r1, #2
 8001528:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	0018      	movs	r0, r3
 8001534:	f000 fdd2 	bl	80020dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <HAL_TIM_PWM_Start+0x19c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d009      	beq.n	8001556 <HAL_TIM_PWM_Start+0x11e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <HAL_TIM_PWM_Start+0x1a0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d004      	beq.n	8001556 <HAL_TIM_PWM_Start+0x11e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_TIM_PWM_Start+0x1a4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PWM_Start+0x122>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_TIM_PWM_Start+0x124>
 800155a:	2300      	movs	r3, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2180      	movs	r1, #128	@ 0x80
 800156c:	0209      	lsls	r1, r1, #8
 800156e:	430a      	orrs	r2, r1
 8001570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <HAL_TIM_PWM_Start+0x19c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d004      	beq.n	8001586 <HAL_TIM_PWM_Start+0x14e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_TIM_PWM_Start+0x1a8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d116      	bne.n	80015b4 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a15      	ldr	r2, [pc, #84]	@ (80015e4 <HAL_TIM_PWM_Start+0x1ac>)
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d016      	beq.n	80015c6 <HAL_TIM_PWM_Start+0x18e>
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	429a      	cmp	r2, r3
 80015a0:	d011      	beq.n	80015c6 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b2:	e008      	b.n	80015c6 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e000      	b.n	80015c8 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40014400 	.word	0x40014400
 80015dc:	40014800 	.word	0x40014800
 80015e0:	40000400 	.word	0x40000400
 80015e4:	00010007 	.word	0x00010007

080015e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2317      	movs	r3, #23
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	223c      	movs	r2, #60	@ 0x3c
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001606:	2302      	movs	r3, #2
 8001608:	e0e5      	b.n	80017d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	223c      	movs	r2, #60	@ 0x3c
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b14      	cmp	r3, #20
 8001616:	d900      	bls.n	800161a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001618:	e0d1      	b.n	80017be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	009a      	lsls	r2, r3, #2
 800161e:	4b70      	ldr	r3, [pc, #448]	@ (80017e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001620:	18d3      	adds	r3, r2, r3
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f000 fa1c 	bl	8001a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2108      	movs	r1, #8
 8001640:	430a      	orrs	r2, r1
 8001642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2104      	movs	r1, #4
 8001650:	438a      	bics	r2, r1
 8001652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6999      	ldr	r1, [r3, #24]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	619a      	str	r2, [r3, #24]
      break;
 8001666:	e0af      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	0011      	movs	r1, r2
 8001670:	0018      	movs	r0, r3
 8001672:	f000 fa7b 	bl	8001b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	0109      	lsls	r1, r1, #4
 8001684:	430a      	orrs	r2, r1
 8001686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699a      	ldr	r2, [r3, #24]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4954      	ldr	r1, [pc, #336]	@ (80017e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001694:	400a      	ands	r2, r1
 8001696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6999      	ldr	r1, [r3, #24]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	021a      	lsls	r2, r3, #8
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	619a      	str	r2, [r3, #24]
      break;
 80016ac:	e08c      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fad6 	bl	8001c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2108      	movs	r1, #8
 80016c8:	430a      	orrs	r2, r1
 80016ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2104      	movs	r1, #4
 80016d8:	438a      	bics	r2, r1
 80016da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69d9      	ldr	r1, [r3, #28]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	61da      	str	r2, [r3, #28]
      break;
 80016ee:	e06b      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 fb37 	bl	8001d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0109      	lsls	r1, r1, #4
 800170c:	430a      	orrs	r2, r1
 800170e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4932      	ldr	r1, [pc, #200]	@ (80017e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69d9      	ldr	r1, [r3, #28]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	021a      	lsls	r2, r3, #8
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	61da      	str	r2, [r3, #28]
      break;
 8001734:	e048      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fb78 	bl	8001e34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2108      	movs	r1, #8
 8001750:	430a      	orrs	r2, r1
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001776:	e027      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f000 fbb1 	bl	8001ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	0109      	lsls	r1, r1, #4
 8001794:	430a      	orrs	r2, r1
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4910      	ldr	r1, [pc, #64]	@ (80017e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	021a      	lsls	r2, r3, #8
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80017bc:	e004      	b.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80017be:	2317      	movs	r3, #23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	223c      	movs	r2, #60	@ 0x3c
 80017cc:	2100      	movs	r1, #0
 80017ce:	5499      	strb	r1, [r3, r2]

  return status;
 80017d0:	2317      	movs	r3, #23
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b006      	add	sp, #24
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	080023e4 	.word	0x080023e4
 80017e4:	fffffbff 	.word	0xfffffbff

080017e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	223c      	movs	r2, #60	@ 0x3c
 80017fe:	5c9b      	ldrb	r3, [r3, r2]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_TIM_ConfigClockSource+0x20>
 8001804:	2302      	movs	r3, #2
 8001806:	e0bc      	b.n	8001982 <HAL_TIM_ConfigClockSource+0x19a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	223c      	movs	r2, #60	@ 0x3c
 800180c:	2101      	movs	r1, #1
 800180e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	223d      	movs	r2, #61	@ 0x3d
 8001814:	2102      	movs	r1, #2
 8001816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4a5a      	ldr	r2, [pc, #360]	@ (800198c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4a59      	ldr	r2, [pc, #356]	@ (8001990 <HAL_TIM_ConfigClockSource+0x1a8>)
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	0192      	lsls	r2, r2, #6
 8001840:	4293      	cmp	r3, r2
 8001842:	d040      	beq.n	80018c6 <HAL_TIM_ConfigClockSource+0xde>
 8001844:	2280      	movs	r2, #128	@ 0x80
 8001846:	0192      	lsls	r2, r2, #6
 8001848:	4293      	cmp	r3, r2
 800184a:	d900      	bls.n	800184e <HAL_TIM_ConfigClockSource+0x66>
 800184c:	e088      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	0152      	lsls	r2, r2, #5
 8001852:	4293      	cmp	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_TIM_ConfigClockSource+0x70>
 8001856:	e088      	b.n	800196a <HAL_TIM_ConfigClockSource+0x182>
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	0152      	lsls	r2, r2, #5
 800185c:	4293      	cmp	r3, r2
 800185e:	d900      	bls.n	8001862 <HAL_TIM_ConfigClockSource+0x7a>
 8001860:	e07e      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 8001862:	2b70      	cmp	r3, #112	@ 0x70
 8001864:	d018      	beq.n	8001898 <HAL_TIM_ConfigClockSource+0xb0>
 8001866:	d900      	bls.n	800186a <HAL_TIM_ConfigClockSource+0x82>
 8001868:	e07a      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 800186a:	2b60      	cmp	r3, #96	@ 0x60
 800186c:	d04f      	beq.n	800190e <HAL_TIM_ConfigClockSource+0x126>
 800186e:	d900      	bls.n	8001872 <HAL_TIM_ConfigClockSource+0x8a>
 8001870:	e076      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 8001872:	2b50      	cmp	r3, #80	@ 0x50
 8001874:	d03b      	beq.n	80018ee <HAL_TIM_ConfigClockSource+0x106>
 8001876:	d900      	bls.n	800187a <HAL_TIM_ConfigClockSource+0x92>
 8001878:	e072      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 800187a:	2b40      	cmp	r3, #64	@ 0x40
 800187c:	d057      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x146>
 800187e:	d900      	bls.n	8001882 <HAL_TIM_ConfigClockSource+0x9a>
 8001880:	e06e      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 8001882:	2b30      	cmp	r3, #48	@ 0x30
 8001884:	d063      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x166>
 8001886:	d86b      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 8001888:	2b20      	cmp	r3, #32
 800188a:	d060      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x166>
 800188c:	d868      	bhi.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d05d      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x166>
 8001892:	2b10      	cmp	r3, #16
 8001894:	d05b      	beq.n	800194e <HAL_TIM_ConfigClockSource+0x166>
 8001896:	e063      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018a8:	f000 fbf8 	bl	800209c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2277      	movs	r2, #119	@ 0x77
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]
      break;
 80018c4:	e052      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018d6:	f000 fbe1 	bl	800209c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	01c9      	lsls	r1, r1, #7
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
      break;
 80018ec:	e03e      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018fa:	001a      	movs	r2, r3
 80018fc:	f000 fb52 	bl	8001fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2150      	movs	r1, #80	@ 0x50
 8001906:	0018      	movs	r0, r3
 8001908:	f000 fbac 	bl	8002064 <TIM_ITRx_SetConfig>
      break;
 800190c:	e02e      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800191a:	001a      	movs	r2, r3
 800191c:	f000 fb70 	bl	8002000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2160      	movs	r1, #96	@ 0x60
 8001926:	0018      	movs	r0, r3
 8001928:	f000 fb9c 	bl	8002064 <TIM_ITRx_SetConfig>
      break;
 800192c:	e01e      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800193a:	001a      	movs	r2, r3
 800193c:	f000 fb32 	bl	8001fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2140      	movs	r1, #64	@ 0x40
 8001946:	0018      	movs	r0, r3
 8001948:	f000 fb8c 	bl	8002064 <TIM_ITRx_SetConfig>
      break;
 800194c:	e00e      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0019      	movs	r1, r3
 8001958:	0010      	movs	r0, r2
 800195a:	f000 fb83 	bl	8002064 <TIM_ITRx_SetConfig>
      break;
 800195e:	e005      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
      break;
 8001968:	e000      	b.n	800196c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800196a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	223d      	movs	r2, #61	@ 0x3d
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	223c      	movs	r2, #60	@ 0x3c
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

  return status;
 800197c:	230f      	movs	r3, #15
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	ffceff88 	.word	0xffceff88
 8001990:	ffff00ff 	.word	0xffff00ff

08001994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a54 <TIM_Base_SetConfig+0xc0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <TIM_Base_SetConfig+0x20>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001a58 <TIM_Base_SetConfig+0xc4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d108      	bne.n	80019c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2270      	movs	r2, #112	@ 0x70
 80019b8:	4393      	bics	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <TIM_Base_SetConfig+0xc0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00f      	beq.n	80019ee <TIM_Base_SetConfig+0x5a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <TIM_Base_SetConfig+0xc4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00b      	beq.n	80019ee <TIM_Base_SetConfig+0x5a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <TIM_Base_SetConfig+0xc8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <TIM_Base_SetConfig+0x5a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <TIM_Base_SetConfig+0xcc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d003      	beq.n	80019ee <TIM_Base_SetConfig+0x5a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <TIM_Base_SetConfig+0xd0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <TIM_Base_SetConfig+0xd4>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	4393      	bics	r3, r2
 8001a06:	001a      	movs	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <TIM_Base_SetConfig+0xc0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <TIM_Base_SetConfig+0xaa>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <TIM_Base_SetConfig+0xcc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d003      	beq.n	8001a3e <TIM_Base_SetConfig+0xaa>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <TIM_Base_SetConfig+0xd0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d103      	bne.n	8001a46 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]
}
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40002000 	.word	0x40002000
 8001a60:	40014400 	.word	0x40014400
 8001a64:	40014800 	.word	0x40014800
 8001a68:	fffffcff 	.word	0xfffffcff

08001a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4393      	bics	r3, r2
 8001a84:	001a      	movs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a2e      	ldr	r2, [pc, #184]	@ (8001b54 <TIM_OC1_SetConfig+0xe8>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <TIM_OC1_SetConfig+0xec>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <TIM_OC1_SetConfig+0x6e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a23      	ldr	r2, [pc, #140]	@ (8001b5c <TIM_OC1_SetConfig+0xf0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d003      	beq.n	8001ada <TIM_OC1_SetConfig+0x6e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	@ (8001b60 <TIM_OC1_SetConfig+0xf4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10c      	bne.n	8001af4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4393      	bics	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4393      	bics	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <TIM_OC1_SetConfig+0xec>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <TIM_OC1_SetConfig+0xa0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <TIM_OC1_SetConfig+0xf0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <TIM_OC1_SetConfig+0xa0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a16      	ldr	r2, [pc, #88]	@ (8001b60 <TIM_OC1_SetConfig+0xf4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4a15      	ldr	r2, [pc, #84]	@ (8001b64 <TIM_OC1_SetConfig+0xf8>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <TIM_OC1_SetConfig+0xfc>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	621a      	str	r2, [r3, #32]
}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b006      	add	sp, #24
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	fffeff8f 	.word	0xfffeff8f
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40014400 	.word	0x40014400
 8001b60:	40014800 	.word	0x40014800
 8001b64:	fffffeff 	.word	0xfffffeff
 8001b68:	fffffdff 	.word	0xfffffdff

08001b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	2210      	movs	r2, #16
 8001b82:	4393      	bics	r3, r2
 8001b84:	001a      	movs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4a2c      	ldr	r2, [pc, #176]	@ (8001c4c <TIM_OC2_SetConfig+0xe0>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c50 <TIM_OC2_SetConfig+0xe4>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <TIM_OC2_SetConfig+0xe8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	4393      	bics	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <TIM_OC2_SetConfig+0xe8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <TIM_OC2_SetConfig+0x96>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <TIM_OC2_SetConfig+0xec>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d003      	beq.n	8001c02 <TIM_OC2_SetConfig+0x96>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	@ (8001c5c <TIM_OC2_SetConfig+0xf0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d113      	bne.n	8001c2a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <TIM_OC2_SetConfig+0xf4>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <TIM_OC2_SetConfig+0xf8>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	621a      	str	r2, [r3, #32]
}
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	feff8fff 	.word	0xfeff8fff
 8001c50:	fffffcff 	.word	0xfffffcff
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40014400 	.word	0x40014400
 8001c5c:	40014800 	.word	0x40014800
 8001c60:	fffffbff 	.word	0xfffffbff
 8001c64:	fffff7ff 	.word	0xfffff7ff

08001c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a31      	ldr	r2, [pc, #196]	@ (8001d44 <TIM_OC3_SetConfig+0xdc>)
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <TIM_OC3_SetConfig+0xe0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <TIM_OC3_SetConfig+0xe4>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <TIM_OC3_SetConfig+0xe8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10d      	bne.n	8001ce2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <TIM_OC3_SetConfig+0xec>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <TIM_OC3_SetConfig+0xf0>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <TIM_OC3_SetConfig+0xe8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <TIM_OC3_SetConfig+0x92>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <TIM_OC3_SetConfig+0xf4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <TIM_OC3_SetConfig+0x92>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <TIM_OC3_SetConfig+0xf8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d113      	bne.n	8001d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <TIM_OC3_SetConfig+0xfc>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <TIM_OC3_SetConfig+0x100>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	621a      	str	r2, [r3, #32]
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b006      	add	sp, #24
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	fffffeff 	.word	0xfffffeff
 8001d48:	fffeff8f 	.word	0xfffeff8f
 8001d4c:	fffffdff 	.word	0xfffffdff
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	fffff7ff 	.word	0xfffff7ff
 8001d58:	fffffbff 	.word	0xfffffbff
 8001d5c:	40014400 	.word	0x40014400
 8001d60:	40014800 	.word	0x40014800
 8001d64:	ffffefff 	.word	0xffffefff
 8001d68:	ffffdfff 	.word	0xffffdfff

08001d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a24      	ldr	r2, [pc, #144]	@ (8001e14 <TIM_OC4_SetConfig+0xa8>)
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <TIM_OC4_SetConfig+0xac>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <TIM_OC4_SetConfig+0xb0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <TIM_OC4_SetConfig+0xb4>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	031b      	lsls	r3, r3, #12
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <TIM_OC4_SetConfig+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <TIM_OC4_SetConfig+0x70>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a16      	ldr	r2, [pc, #88]	@ (8001e28 <TIM_OC4_SetConfig+0xbc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <TIM_OC4_SetConfig+0x70>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <TIM_OC4_SetConfig+0xc0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d109      	bne.n	8001df0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <TIM_OC4_SetConfig+0xc4>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	621a      	str	r2, [r3, #32]
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b006      	add	sp, #24
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	ffffefff 	.word	0xffffefff
 8001e18:	feff8fff 	.word	0xfeff8fff
 8001e1c:	fffffcff 	.word	0xfffffcff
 8001e20:	ffffdfff 	.word	0xffffdfff
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40014400 	.word	0x40014400
 8001e2c:	40014800 	.word	0x40014800
 8001e30:	ffffbfff 	.word	0xffffbfff

08001e34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <TIM_OC5_SetConfig+0x9c>)
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <TIM_OC5_SetConfig+0xa0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <TIM_OC5_SetConfig+0xa4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a15      	ldr	r2, [pc, #84]	@ (8001edc <TIM_OC5_SetConfig+0xa8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <TIM_OC5_SetConfig+0x66>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <TIM_OC5_SetConfig+0xac>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <TIM_OC5_SetConfig+0x66>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <TIM_OC5_SetConfig+0xb0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d109      	bne.n	8001eae <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <TIM_OC5_SetConfig+0x9c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	621a      	str	r2, [r3, #32]
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b006      	add	sp, #24
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	fffeffff 	.word	0xfffeffff
 8001ed4:	fffeff8f 	.word	0xfffeff8f
 8001ed8:	fffdffff 	.word	0xfffdffff
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	40014400 	.word	0x40014400
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <TIM_OC6_SetConfig+0xa0>)
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <TIM_OC6_SetConfig+0xa4>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4a1a      	ldr	r2, [pc, #104]	@ (8001f90 <TIM_OC6_SetConfig+0xa8>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	051b      	lsls	r3, r3, #20
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <TIM_OC6_SetConfig+0xac>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_OC6_SetConfig+0x68>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a15      	ldr	r2, [pc, #84]	@ (8001f98 <TIM_OC6_SetConfig+0xb0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_OC6_SetConfig+0x68>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <TIM_OC6_SetConfig+0xb4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d109      	bne.n	8001f64 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <TIM_OC6_SetConfig+0xb8>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	621a      	str	r2, [r3, #32]
}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	ffefffff 	.word	0xffefffff
 8001f8c:	feff8fff 	.word	0xfeff8fff
 8001f90:	ffdfffff 	.word	0xffdfffff
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	40014800 	.word	0x40014800
 8001fa0:	fffbffff 	.word	0xfffbffff

08001fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	22f0      	movs	r2, #240	@ 0xf0
 8001fce:	4393      	bics	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	220a      	movs	r2, #10
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	621a      	str	r2, [r3, #32]
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b006      	add	sp, #24
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	2210      	movs	r2, #16
 8002018:	4393      	bics	r3, r2
 800201a:	001a      	movs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <TIM_TI2_ConfigInputStage+0x60>)
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	22a0      	movs	r2, #160	@ 0xa0
 800203c:	4393      	bics	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	621a      	str	r2, [r3, #32]
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	ffff0fff 	.word	0xffff0fff

08002064 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a08      	ldr	r2, [pc, #32]	@ (8002098 <TIM_ITRx_SetConfig+0x34>)
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	2207      	movs	r2, #7
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	609a      	str	r2, [r3, #8]
}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	ffcfff8f 	.word	0xffcfff8f

0800209c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <TIM_ETR_SetConfig+0x3c>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	431a      	orrs	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b006      	add	sp, #24
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	ffff00ff 	.word	0xffff00ff

080020dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	221f      	movs	r2, #31
 80020ec:	4013      	ands	r3, r2
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	0013      	movs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	43d2      	mvns	r2, r2
 80020fe:	401a      	ands	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	211f      	movs	r1, #31
 800210c:	400b      	ands	r3, r1
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4099      	lsls	r1, r3
 8002112:	000b      	movs	r3, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b006      	add	sp, #24
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	223c      	movs	r2, #60	@ 0x3c
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002138:	2302      	movs	r3, #2
 800213a:	e04a      	b.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	223c      	movs	r2, #60	@ 0x3c
 8002140:	2101      	movs	r1, #1
 8002142:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	223d      	movs	r2, #61	@ 0x3d
 8002148:	2102      	movs	r1, #2
 800214a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1e      	ldr	r2, [pc, #120]	@ (80021dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2270      	movs	r2, #112	@ 0x70
 800217c:	4393      	bics	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10c      	bne.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	4393      	bics	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	223d      	movs	r2, #61	@ 0x3d
 80021c4:	2101      	movs	r1, #1
 80021c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	223c      	movs	r2, #60	@ 0x3c
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	ff0fffff 	.word	0xff0fffff
 80021e4:	40000400 	.word	0x40000400

080021e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	223c      	movs	r2, #60	@ 0x3c
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e079      	b.n	80022f8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	223c      	movs	r2, #60	@ 0x3c
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	22ff      	movs	r2, #255	@ 0xff
 8002210:	4393      	bics	r3, r2
 8002212:	001a      	movs	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a38      	ldr	r2, [pc, #224]	@ (8002300 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002220:	401a      	ands	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a35      	ldr	r2, [pc, #212]	@ (8002304 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800222e:	401a      	ands	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a33      	ldr	r2, [pc, #204]	@ (8002308 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800223c:	401a      	ands	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a30      	ldr	r2, [pc, #192]	@ (800230c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800224a:	401a      	ands	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002266:	401a      	ands	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002274:	401a      	ands	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a25      	ldr	r2, [pc, #148]	@ (800231c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d106      	bne.n	8002298 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800228e:	401a      	ands	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d121      	bne.n	80022e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002324 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80022a6:	401a      	ands	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80022b6:	401a      	ands	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80022c4:	401a      	ands	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d106      	bne.n	80022e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a15      	ldr	r2, [pc, #84]	@ (8002330 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80022dc:	401a      	ands	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223c      	movs	r2, #60	@ 0x3c
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fffffcff 	.word	0xfffffcff
 8002304:	fffffbff 	.word	0xfffffbff
 8002308:	fffff7ff 	.word	0xfffff7ff
 800230c:	ffffefff 	.word	0xffffefff
 8002310:	ffffdfff 	.word	0xffffdfff
 8002314:	ffffbfff 	.word	0xffffbfff
 8002318:	fff0ffff 	.word	0xfff0ffff
 800231c:	40012c00 	.word	0x40012c00
 8002320:	efffffff 	.word	0xefffffff
 8002324:	ff0fffff 	.word	0xff0fffff
 8002328:	feffffff 	.word	0xfeffffff
 800232c:	fdffffff 	.word	0xfdffffff
 8002330:	dfffffff 	.word	0xdfffffff

08002334 <memset>:
 8002334:	0003      	movs	r3, r0
 8002336:	1882      	adds	r2, r0, r2
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <memset+0xa>
 800233c:	4770      	bx	lr
 800233e:	7019      	strb	r1, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	e7f9      	b.n	8002338 <memset+0x4>

08002344 <__libc_init_array>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2600      	movs	r6, #0
 8002348:	4c0c      	ldr	r4, [pc, #48]	@ (800237c <__libc_init_array+0x38>)
 800234a:	4d0d      	ldr	r5, [pc, #52]	@ (8002380 <__libc_init_array+0x3c>)
 800234c:	1b64      	subs	r4, r4, r5
 800234e:	10a4      	asrs	r4, r4, #2
 8002350:	42a6      	cmp	r6, r4
 8002352:	d109      	bne.n	8002368 <__libc_init_array+0x24>
 8002354:	2600      	movs	r6, #0
 8002356:	f000 f819 	bl	800238c <_init>
 800235a:	4c0a      	ldr	r4, [pc, #40]	@ (8002384 <__libc_init_array+0x40>)
 800235c:	4d0a      	ldr	r5, [pc, #40]	@ (8002388 <__libc_init_array+0x44>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	42a6      	cmp	r6, r4
 8002364:	d105      	bne.n	8002372 <__libc_init_array+0x2e>
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	00b3      	lsls	r3, r6, #2
 800236a:	58eb      	ldr	r3, [r5, r3]
 800236c:	4798      	blx	r3
 800236e:	3601      	adds	r6, #1
 8002370:	e7ee      	b.n	8002350 <__libc_init_array+0xc>
 8002372:	00b3      	lsls	r3, r6, #2
 8002374:	58eb      	ldr	r3, [r5, r3]
 8002376:	4798      	blx	r3
 8002378:	3601      	adds	r6, #1
 800237a:	e7f2      	b.n	8002362 <__libc_init_array+0x1e>
 800237c:	08002438 	.word	0x08002438
 8002380:	08002438 	.word	0x08002438
 8002384:	0800243c 	.word	0x0800243c
 8002388:	08002438 	.word	0x08002438

0800238c <_init>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002392:	bc08      	pop	{r3}
 8002394:	469e      	mov	lr, r3
 8002396:	4770      	bx	lr

08002398 <_fini>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239e:	bc08      	pop	{r3}
 80023a0:	469e      	mov	lr, r3
 80023a2:	4770      	bx	lr
