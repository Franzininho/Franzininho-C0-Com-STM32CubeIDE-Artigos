
Bargraph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002874  08002874  00003874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b4  080028b4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028b4  080028b4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b4  080028b4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b4  080028b4  000038b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080028c8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080028c8  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000678c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017cc  00000000  00000000  0000a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000516  00000000  00000000  0000c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128d6  00000000  00000000  0000cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d5d  00000000  00000000  0001f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075058  00000000  00000000  000271c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001770  00000000  00000000  0009c25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0009d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800285c 	.word	0x0800285c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800285c 	.word	0x0800285c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <desligaLeds>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void desligaLeds(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_UM_Pin, GPIO_PIN_RESET);
 8000224:	23a0      	movs	r3, #160	@ 0xa0
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2180      	movs	r1, #128	@ 0x80
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fead 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_DOIS_Pin, GPIO_PIN_RESET);
 8000232:	23a0      	movs	r3, #160	@ 0xa0
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	@ 0x40
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fea6 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_TRES_Pin, GPIO_PIN_RESET);
 8000240:	23a0      	movs	r3, #160	@ 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fe9f 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_QUATRO_Pin, GPIO_PIN_RESET);
 800024e:	23a0      	movs	r3, #160	@ 0xa0
 8000250:	05db      	lsls	r3, r3, #23
 8000252:	2200      	movs	r2, #0
 8000254:	2110      	movs	r1, #16
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fe98 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_CINCO_Pin, GPIO_PIN_RESET);
 800025c:	23a0      	movs	r3, #160	@ 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	0018      	movs	r0, r3
 8000266:	f001 fe91 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_SEIS_Pin, GPIO_PIN_RESET);
 800026a:	23a0      	movs	r3, #160	@ 0xa0
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2200      	movs	r2, #0
 8000270:	2104      	movs	r1, #4
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fe8a 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_SETE_Pin, GPIO_PIN_RESET);
 8000278:	23a0      	movs	r3, #160	@ 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	2200      	movs	r2, #0
 800027e:	2102      	movs	r1, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fe83 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_OITO_Pin, GPIO_PIN_RESET);
 8000286:	23a0      	movs	r3, #160	@ 0xa0
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f001 fe7c 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_NOVE_Pin, GPIO_PIN_RESET);
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <desligaLeds+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	0018      	movs	r0, r3
 800029c:	f001 fe76 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_DEZ_Pin, GPIO_PIN_RESET);
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <desligaLeds+0x94>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	2180      	movs	r1, #128	@ 0x80
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fe70 	bl	8001f8c <HAL_GPIO_WritePin>
}
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	50000400 	.word	0x50000400

080002b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  uint32_t leituraPotenciometro = HAL_ADC_GetValue(&hadc1);
 80002c0:	4b3c      	ldr	r3, [pc, #240]	@ (80003b4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fe88 	bl	8000fd8 <HAL_ADC_GetValue>
 80002c8:	0003      	movs	r3, r0
 80002ca:	60fb      	str	r3, [r7, #12]
  int ledCount = leituraPotenciometro * 10 / 4095; // 10 LEDs e 2^12-1
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0013      	movs	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	189b      	adds	r3, r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	4938      	ldr	r1, [pc, #224]	@ (80003b8 <HAL_ADC_ConvCpltCallback+0x100>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ff15 	bl	8000108 <__udivsi3>
 80002de:	0003      	movs	r3, r0
 80002e0:	60bb      	str	r3, [r7, #8]
  //HAL_ADC_Stop_IT(&hadc1);
  desligaLeds();
 80002e2:	f7ff ff9d 	bl	8000220 <desligaLeds>
  if(ledCount >= 1) HAL_GPIO_WritePin(GPIOA, LED_UM_Pin, GPIO_PIN_SET);
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	dd06      	ble.n	80002fa <HAL_ADC_ConvCpltCallback+0x42>
 80002ec:	23a0      	movs	r3, #160	@ 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2201      	movs	r2, #1
 80002f2:	2180      	movs	r1, #128	@ 0x80
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fe49 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 2) HAL_GPIO_WritePin(GPIOA, LED_DOIS_Pin, GPIO_PIN_SET);
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	dd06      	ble.n	800030e <HAL_ADC_ConvCpltCallback+0x56>
 8000300:	23a0      	movs	r3, #160	@ 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2201      	movs	r2, #1
 8000306:	2140      	movs	r1, #64	@ 0x40
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fe3f 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 3) HAL_GPIO_WritePin(GPIOA, LED_TRES_Pin, GPIO_PIN_SET);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	2b02      	cmp	r3, #2
 8000312:	dd06      	ble.n	8000322 <HAL_ADC_ConvCpltCallback+0x6a>
 8000314:	23a0      	movs	r3, #160	@ 0xa0
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2201      	movs	r2, #1
 800031a:	2120      	movs	r1, #32
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fe35 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 4) HAL_GPIO_WritePin(GPIOA, LED_QUATRO_Pin, GPIO_PIN_SET);
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b03      	cmp	r3, #3
 8000326:	dd06      	ble.n	8000336 <HAL_ADC_ConvCpltCallback+0x7e>
 8000328:	23a0      	movs	r3, #160	@ 0xa0
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fe2b 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 5) HAL_GPIO_WritePin(GPIOA, LED_CINCO_Pin, GPIO_PIN_SET);
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	2b04      	cmp	r3, #4
 800033a:	dd06      	ble.n	800034a <HAL_ADC_ConvCpltCallback+0x92>
 800033c:	23a0      	movs	r3, #160	@ 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2201      	movs	r2, #1
 8000342:	2108      	movs	r1, #8
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fe21 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 6) HAL_GPIO_WritePin(GPIOA, LED_SEIS_Pin, GPIO_PIN_SET);
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	2b05      	cmp	r3, #5
 800034e:	dd06      	ble.n	800035e <HAL_ADC_ConvCpltCallback+0xa6>
 8000350:	23a0      	movs	r3, #160	@ 0xa0
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	2201      	movs	r2, #1
 8000356:	2104      	movs	r1, #4
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fe17 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 7) HAL_GPIO_WritePin(GPIOA, LED_SETE_Pin, GPIO_PIN_SET);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	2b06      	cmp	r3, #6
 8000362:	dd06      	ble.n	8000372 <HAL_ADC_ConvCpltCallback+0xba>
 8000364:	23a0      	movs	r3, #160	@ 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2201      	movs	r2, #1
 800036a:	2102      	movs	r1, #2
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fe0d 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 8) HAL_GPIO_WritePin(GPIOA, LED_OITO_Pin, GPIO_PIN_SET);
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	2b07      	cmp	r3, #7
 8000376:	dd06      	ble.n	8000386 <HAL_ADC_ConvCpltCallback+0xce>
 8000378:	23a0      	movs	r3, #160	@ 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	2201      	movs	r2, #1
 800037e:	2101      	movs	r1, #1
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fe03 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 9) HAL_GPIO_WritePin(GPIOB, LED_NOVE_Pin, GPIO_PIN_SET);
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	2b08      	cmp	r3, #8
 800038a:	dd05      	ble.n	8000398 <HAL_ADC_ConvCpltCallback+0xe0>
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <HAL_ADC_ConvCpltCallback+0x104>)
 800038e:	2201      	movs	r2, #1
 8000390:	2140      	movs	r1, #64	@ 0x40
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fdfa 	bl	8001f8c <HAL_GPIO_WritePin>
  if(ledCount >= 10) HAL_GPIO_WritePin(GPIOB, LED_DEZ_Pin, GPIO_PIN_SET);
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	2b09      	cmp	r3, #9
 800039c:	dd05      	ble.n	80003aa <HAL_ADC_ConvCpltCallback+0xf2>
 800039e:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <HAL_ADC_ConvCpltCallback+0x104>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	2180      	movs	r1, #128	@ 0x80
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fdf1 	bl	8001f8c <HAL_GPIO_WritePin>
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b004      	add	sp, #16
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	20000028 	.word	0x20000028
 80003b8:	00000fff 	.word	0x00000fff
 80003bc:	50000400 	.word	0x50000400

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fa09 	bl	80007da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f810 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 f8be 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003d0:	f000 f850 	bl	8000474 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1); // Rotina de calibração do ADC
 80003d4:	4b04      	ldr	r3, [pc, #16]	@ (80003e8 <main+0x28>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 fa76 	bl	80018c8 <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_IT(&hadc1); // Inicia ADC interrupcao
 80003dc:	4b02      	ldr	r3, [pc, #8]	@ (80003e8 <main+0x28>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fd82 	bl	8000ee8 <HAL_ADC_Start_IT>
 80003e4:	e7fa      	b.n	80003dc <main+0x1c>
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	20000028 	.word	0x20000028

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08d      	sub	sp, #52	@ 0x34
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	2414      	movs	r4, #20
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	231c      	movs	r3, #28
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f002 fa01 	bl	8002804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000402:	003b      	movs	r3, r7
 8000404:	0018      	movs	r0, r3
 8000406:	2314      	movs	r3, #20
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f002 f9fa 	bl	8002804 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2202      	movs	r2, #2
 8000414:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2280      	movs	r2, #128	@ 0x80
 800041a:	0052      	lsls	r2, r2, #1
 800041c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800041e:	193b      	adds	r3, r7, r4
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	193b      	adds	r3, r7, r4
 8000426:	2240      	movs	r2, #64	@ 0x40
 8000428:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	193b      	adds	r3, r7, r4
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fdcb 	bl	8001fc8 <HAL_RCC_OscConfig>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000436:	f000 f8e7 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	003b      	movs	r3, r7
 800043c:	2207      	movs	r2, #7
 800043e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	003b      	movs	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000452:	003b      	movs	r3, r7
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000458:	003b      	movs	r3, r7
 800045a:	2101      	movs	r1, #1
 800045c:	0018      	movs	r0, r3
 800045e:	f001 ff97 	bl	8002390 <HAL_RCC_ClockConfig>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000466:	f000 f8cf 	bl	8000608 <Error_Handler>
  }
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b00d      	add	sp, #52	@ 0x34
 8000470:	bd90      	pop	{r4, r7, pc}
	...

08000474 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	0018      	movs	r0, r3
 800047e:	230c      	movs	r3, #12
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 f9be 	bl	8002804 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000488:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <MX_ADC1_Init+0xcc>)
 800048a:	4a2e      	ldr	r2, [pc, #184]	@ (8000544 <MX_ADC1_Init+0xd0>)
 800048c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800048e:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC1_Init+0xcc>)
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	05d2      	lsls	r2, r2, #23
 8000494:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC1_Init+0xcc>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049c:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <MX_ADC1_Init+0xcc>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a2:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004a8:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ae:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004b4:	4b22      	ldr	r3, [pc, #136]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004c8:	2220      	movs	r2, #32
 80004ca:	2100      	movs	r1, #0
 80004cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004dc:	222c      	movs	r2, #44	@ 0x2c
 80004de:	2100      	movs	r1, #0
 80004e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80004ee:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004f6:	223c      	movs	r2, #60	@ 0x3c
 80004f8:	2100      	movs	r1, #0
 80004fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <MX_ADC1_Init+0xcc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_ADC1_Init+0xcc>)
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fb49 	bl	8000b9c <HAL_ADC_Init>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800050e:	f000 f87b 	bl	8000608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <MX_ADC1_Init+0xd4>)
 8000516:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_ADC1_Init+0xcc>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fe88 	bl	8001240 <HAL_ADC_ConfigChannel>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000534:	f000 f868 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b004      	add	sp, #16
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000028 	.word	0x20000028
 8000544:	40012400 	.word	0x40012400
 8000548:	20000100 	.word	0x20000100

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	@ 0x24
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 f951 	bl	8002804 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <MX_GPIO_Init+0xb4>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000566:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <MX_GPIO_Init+0xb4>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	@ 0x34
 800056e:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <MX_GPIO_Init+0xb4>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <MX_GPIO_Init+0xb4>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057e:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <MX_GPIO_Init+0xb4>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	@ 0x34
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_GPIO_Init+0xb4>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEZ_Pin|LED_NOVE_Pin, GPIO_PIN_RESET);
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <MX_GPIO_Init+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	21c0      	movs	r1, #192	@ 0xc0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fcf7 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OITO_Pin|LED_SETE_Pin|LED_SEIS_Pin|LED_CINCO_Pin
 800059e:	23a0      	movs	r3, #160	@ 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2200      	movs	r2, #0
 80005a4:	21ff      	movs	r1, #255	@ 0xff
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fcf0 	bl	8001f8c <HAL_GPIO_WritePin>
                          |LED_QUATRO_Pin|LED_TRES_Pin|LED_DOIS_Pin|LED_UM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_DEZ_Pin LED_NOVE_Pin */
  GPIO_InitStruct.Pin = LED_DEZ_Pin|LED_NOVE_Pin;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	22c0      	movs	r2, #192	@ 0xc0
 80005b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <MX_GPIO_Init+0xb8>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f001 fb74 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OITO_Pin LED_SETE_Pin LED_SEIS_Pin LED_CINCO_Pin
                           LED_QUATRO_Pin LED_TRES_Pin LED_DOIS_Pin LED_UM_Pin */
  GPIO_InitStruct.Pin = LED_OITO_Pin|LED_SETE_Pin|LED_SEIS_Pin|LED_CINCO_Pin
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	22ff      	movs	r2, #255	@ 0xff
 80005d6:	601a      	str	r2, [r3, #0]
                          |LED_QUATRO_Pin|LED_TRES_Pin|LED_DOIS_Pin|LED_UM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	187a      	adds	r2, r7, r1
 80005ec:	23a0      	movs	r3, #160	@ 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fb60 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b009      	add	sp, #36	@ 0x24
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	50000400 	.word	0x50000400

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <HAL_MspInit+0x44>)
 800061c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <HAL_MspInit+0x44>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	641a      	str	r2, [r3, #64]	@ 0x40
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <HAL_MspInit+0x44>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_MspInit+0x44>)
 8000634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_MspInit+0x44>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	0549      	lsls	r1, r1, #21
 800063c:	430a      	orrs	r2, r1
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_MspInit+0x44>)
 8000642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000644:	2380      	movs	r3, #128	@ 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b091      	sub	sp, #68	@ 0x44
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	232c      	movs	r3, #44	@ 0x2c
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 f8c8 	bl	8002804 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	2410      	movs	r4, #16
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	231c      	movs	r3, #28
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 f8c0 	bl	8002804 <memset>
  if(hadc->Instance==ADC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a24      	ldr	r2, [pc, #144]	@ (800071c <HAL_ADC_MspInit+0xc0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d142      	bne.n	8000714 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	01d2      	lsls	r2, r2, #7
 8000694:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 ffc2 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006a8:	f7ff ffae 	bl	8000608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	0349      	lsls	r1, r1, #13
 80006b6:	430a      	orrs	r2, r1
 80006b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	035b      	lsls	r3, r3, #13
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	430a      	orrs	r2, r1
 80006d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_ADC_MspInit+0xc4>)
 80006d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d8:	2201      	movs	r2, #1
 80006da:	4013      	ands	r3, r2
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e0:	212c      	movs	r1, #44	@ 0x2c
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2280      	movs	r2, #128	@ 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2203      	movs	r2, #3
 80006ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	23a0      	movs	r3, #160	@ 0xa0
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fada 	bl	8001cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	200c      	movs	r0, #12
 800070a:	f001 faa3 	bl	8001c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800070e:	200c      	movs	r0, #12
 8000710:	f001 fab5 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b011      	add	sp, #68	@ 0x44
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40012400 	.word	0x40012400
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8a6 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <ADC1_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fc46 	bl	8000ff0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	20000028 	.word	0x20000028

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <SystemInit+0x14>)
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	0512      	lsls	r2, r2, #20
 800077a:	609a      	str	r2, [r3, #8]
#endif
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800078c:	f7ff fff0 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000790:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000792:	e003      	b.n	800079c <LoopCopyDataInit>

08000794 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000796:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000798:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079a:	3104      	adds	r1, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800079c:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <LoopForever+0xa>)
  ldr r3, =_edata
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <LoopForever+0xe>)
  adds r2, r0, r1
 80007a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a4:	d3f6      	bcc.n	8000794 <CopyDataInit>
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <LoopForever+0x12>)
  b LoopFillZerobss
 80007a8:	e002      	b.n	80007b0 <LoopFillZerobss>

080007aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80007ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ae:	3204      	adds	r2, #4

080007b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <LoopForever+0x16>)
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b4:	d3f9      	bcc.n	80007aa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007b6:	f002 f82d 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fe01 	bl	80003c0 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80007c4:	080028bc 	.word	0x080028bc
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007d4:	20000090 	.word	0x20000090

080007d8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <DMA1_Channel1_IRQHandler>

080007da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 f80e 	bl	8000808 <HAL_InitTick>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d003      	beq.n	80007f8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e001      	b.n	80007fc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f8:	f7ff ff0c 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <HAL_InitTick+0x88>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d02b      	beq.n	8000878 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_InitTick+0x8c>)
 8000822:	681c      	ldr	r4, [r3, #0]
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <HAL_InitTick+0x88>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	0019      	movs	r1, r3
 800082a:	23fa      	movs	r3, #250	@ 0xfa
 800082c:	0098      	lsls	r0, r3, #2
 800082e:	f7ff fc6b 	bl	8000108 <__udivsi3>
 8000832:	0003      	movs	r3, r0
 8000834:	0019      	movs	r1, r3
 8000836:	0020      	movs	r0, r4
 8000838:	f7ff fc66 	bl	8000108 <__udivsi3>
 800083c:	0003      	movs	r3, r0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fa2d 	bl	8001c9e <HAL_SYSTICK_Config>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d112      	bne.n	800086e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d80a      	bhi.n	8000864 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	2200      	movs	r2, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f001 f9fc 	bl	8001c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <HAL_InitTick+0x90>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e00d      	b.n	8000880 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e008      	b.n	8000880 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800086e:	230f      	movs	r3, #15
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e003      	b.n	8000880 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000880:	230f      	movs	r3, #15
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b005      	add	sp, #20
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	001a      	movs	r2, r3
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <HAL_IncTick+0x20>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	18d2      	adds	r2, r2, r3
 80008ac:	4b03      	ldr	r3, [pc, #12]	@ (80008bc <HAL_IncTick+0x20>)
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	20000008 	.word	0x20000008
 80008bc:	2000008c 	.word	0x2000008c

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b02      	ldr	r3, [pc, #8]	@ (80008d0 <HAL_GetTick+0x10>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	2000008c 	.word	0x2000008c

080008d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008e4:	401a      	ands	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	431a      	orrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	ff3fffff 	.word	0xff3fffff

080008fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	23c0      	movs	r3, #192	@ 0xc0
 800090a:	041b      	lsls	r3, r3, #16
 800090c:	4013      	ands	r3, r2
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	2104      	movs	r1, #4
 800092a:	400a      	ands	r2, r1
 800092c:	2107      	movs	r1, #7
 800092e:	4091      	lsls	r1, r2
 8000930:	000a      	movs	r2, r1
 8000932:	43d2      	mvns	r2, r2
 8000934:	401a      	ands	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2104      	movs	r1, #4
 800093a:	400b      	ands	r3, r1
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4099      	lsls	r1, r3
 8000940:	000b      	movs	r3, r1
 8000942:	431a      	orrs	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b004      	add	sp, #16
 800094e:	bd80      	pop	{r7, pc}

08000950 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	2104      	movs	r1, #4
 8000962:	400a      	ands	r2, r1
 8000964:	2107      	movs	r1, #7
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2104      	movs	r1, #4
 8000970:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000972:	40da      	lsrs	r2, r3
 8000974:	0013      	movs	r3, r2
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}

0800097e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	23c0      	movs	r3, #192	@ 0xc0
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4013      	ands	r3, r2
 8000990:	d101      	bne.n	8000996 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}

080009a0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	211f      	movs	r1, #31
 80009b4:	400a      	ands	r2, r1
 80009b6:	210f      	movs	r1, #15
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	0e9b      	lsrs	r3, r3, #26
 80009c4:	210f      	movs	r1, #15
 80009c6:	4019      	ands	r1, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	201f      	movs	r0, #31
 80009cc:	4003      	ands	r3, r0
 80009ce:	4099      	lsls	r1, r3
 80009d0:	000b      	movs	r3, r1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b004      	add	sp, #16
 80009de:	bd80      	pop	{r7, pc}

080009e0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	025b      	lsls	r3, r3, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	0a52      	lsrs	r2, r2, #9
 8000a16:	43d2      	mvns	r2, r2
 8000a18:	401a      	ands	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2203      	movs	r2, #3
 8000a34:	4013      	ands	r3, r2
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	0212      	lsls	r2, r2, #8
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
 8000a60:	4904      	ldr	r1, [pc, #16]	@ (8000a74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a62:	400b      	ands	r3, r1
 8000a64:	431a      	orrs	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b004      	add	sp, #16
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	7fffff00 	.word	0x7fffff00

08000a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <LL_ADC_EnableInternalRegulator+0x24>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0552      	lsls	r2, r2, #21
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	6fffffe8 	.word	0x6fffffe8

08000aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	055b      	lsls	r3, r3, #21
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	2380      	movs	r3, #128	@ 0x80
 8000ab4:	055b      	lsls	r3, r3, #21
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d101      	bne.n	8000abe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <LL_ADC_Enable+0x20>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	7fffffe8 	.word	0x7fffffe8

08000aec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <LL_ADC_Disable+0x20>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	2202      	movs	r2, #2
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	7fffffe8 	.word	0x7fffffe8

08000b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d101      	bne.n	8000b28 <LL_ADC_IsEnabled+0x18>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <LL_ADC_IsEnabled+0x1a>
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d101      	bne.n	8000b4a <LL_ADC_IsDisableOngoing+0x18>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <LL_ADC_IsDisableOngoing+0x1a>
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <LL_ADC_REG_StartConversion+0x20>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	2204      	movs	r2, #4
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	7fffffe8 	.word	0x7fffffe8

08000b78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2204      	movs	r2, #4
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d101      	bne.n	8000b90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	231f      	movs	r3, #31
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e17e      	b.n	8000ec0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10a      	bne.n	8000be0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fd45 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2254      	movs	r2, #84	@ 0x54
 8000bdc:	2100      	movs	r1, #0
 8000bde:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ff5b 	bl	8000aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d114      	bne.n	8000c18 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff40 	bl	8000a78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000bf8:	4bb3      	ldr	r3, [pc, #716]	@ (8000ec8 <HAL_ADC_Init+0x32c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	49b3      	ldr	r1, [pc, #716]	@ (8000ecc <HAL_ADC_Init+0x330>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fa82 	bl	8000108 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c0a:	e002      	b.n	8000c12 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1f9      	bne.n	8000c0c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff ff3f 	bl	8000aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d10f      	bne.n	8000c46 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c36:	2201      	movs	r2, #1
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c3e:	231f      	movs	r3, #31
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff ff94 	bl	8000b78 <LL_ADC_REG_IsConversionOngoing>
 8000c50:	0003      	movs	r3, r0
 8000c52:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c58:	2210      	movs	r2, #16
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d000      	beq.n	8000c60 <HAL_ADC_Init+0xc4>
 8000c5e:	e122      	b.n	8000ea6 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d000      	beq.n	8000c68 <HAL_ADC_Init+0xcc>
 8000c66:	e11e      	b.n	8000ea6 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6c:	4a98      	ldr	r2, [pc, #608]	@ (8000ed0 <HAL_ADC_Init+0x334>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2202      	movs	r2, #2
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff47 	bl	8000b10 <LL_ADC_IsEnabled>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d000      	beq.n	8000c88 <HAL_ADC_Init+0xec>
 8000c86:	e0ad      	b.n	8000de4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e1b      	ldrb	r3, [r3, #24]
 8000c90:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c92:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e5b      	ldrb	r3, [r3, #25]
 8000c98:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ca0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ca2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <HAL_ADC_Init+0x116>
 8000cac:	2380      	movs	r3, #128	@ 0x80
 8000cae:	015b      	lsls	r3, r3, #5
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0x118>
 8000cb2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cb4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000cba:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da04      	bge.n	8000cce <HAL_ADC_Init+0x132>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	085b      	lsrs	r3, r3, #1
 8000ccc:	e001      	b.n	8000cd2 <HAL_ADC_Init+0x136>
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000cd2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	212c      	movs	r1, #44	@ 0x2c
 8000cd8:	5c5b      	ldrb	r3, [r3, r1]
 8000cda:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cdc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d115      	bne.n	8000d1a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7e9b      	ldrb	r3, [r3, #26]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	0252      	lsls	r2, r2, #9
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	e00b      	b.n	8000d1a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	2220      	movs	r2, #32
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d12:	2201      	movs	r2, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00a      	beq.n	8000d38 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d26:	23e0      	movs	r3, #224	@ 0xe0
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d30:	4313      	orrs	r3, r2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	4a65      	ldr	r2, [pc, #404]	@ (8000ed4 <HAL_ADC_Init+0x338>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	0019      	movs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	0f9b      	lsrs	r3, r3, #30
 8000d54:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	223c      	movs	r2, #60	@ 0x3c
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d111      	bne.n	8000d90 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	0f9b      	lsrs	r3, r3, #30
 8000d72:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d78:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d7e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d84:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	4a50      	ldr	r2, [pc, #320]	@ (8000ed8 <HAL_ADC_Init+0x33c>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	23c0      	movs	r3, #192	@ 0xc0
 8000dac:	061b      	lsls	r3, r3, #24
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d018      	beq.n	8000de4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000db6:	2380      	movs	r3, #128	@ 0x80
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d012      	beq.n	8000de4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	061b      	lsls	r3, r3, #24
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d00c      	beq.n	8000de4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000dca:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <HAL_ADC_Init+0x340>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a44      	ldr	r2, [pc, #272]	@ (8000ee0 <HAL_ADC_Init+0x344>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	23f0      	movs	r3, #240	@ 0xf0
 8000dda:	039b      	lsls	r3, r3, #14
 8000ddc:	401a      	ands	r2, r3
 8000dde:	4b3f      	ldr	r3, [pc, #252]	@ (8000edc <HAL_ADC_Init+0x340>)
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f7ff fd91 	bl	8000916 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dfc:	4939      	ldr	r1, [pc, #228]	@ (8000ee4 <HAL_ADC_Init+0x348>)
 8000dfe:	001a      	movs	r2, r3
 8000e00:	f7ff fd89 	bl	8000916 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2110      	movs	r1, #16
 8000e18:	4249      	negs	r1, r1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e1e:	e018      	b.n	8000e52 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	039b      	lsls	r3, r3, #14
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d112      	bne.n	8000e52 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	221c      	movs	r2, #28
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2210      	movs	r2, #16
 8000e40:	4252      	negs	r2, r2
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0011      	movs	r1, r2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2100      	movs	r1, #0
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fd79 	bl	8000950 <LL_ADC_GetSamplingTimeCommonChannels>
 8000e5e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d10b      	bne.n	8000e80 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	2203      	movs	r2, #3
 8000e74:	4393      	bics	r3, r2
 8000e76:	2201      	movs	r2, #1
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e7e:	e01c      	b.n	8000eba <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	2212      	movs	r2, #18
 8000e86:	4393      	bics	r3, r2
 8000e88:	2210      	movs	r2, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e94:	2201      	movs	r2, #1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e9c:	231f      	movs	r3, #31
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ea4:	e009      	b.n	8000eba <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	2210      	movs	r2, #16
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000eb2:	231f      	movs	r3, #31
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000eba:	231f      	movs	r3, #31
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b008      	add	sp, #32
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	00030d40 	.word	0x00030d40
 8000ed0:	fffffefd 	.word	0xfffffefd
 8000ed4:	ffde0201 	.word	0xffde0201
 8000ed8:	1ffffc02 	.word	0x1ffffc02
 8000edc:	40012708 	.word	0x40012708
 8000ee0:	ffc3ffff 	.word	0xffc3ffff
 8000ee4:	7fffff04 	.word	0x7fffff04

08000ee8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff fe3f 	bl	8000b78 <LL_ADC_REG_IsConversionOngoing>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d15f      	bne.n	8000fbe <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2254      	movs	r2, #84	@ 0x54
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_ADC_Start_IT+0x24>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e05f      	b.n	8000fcc <HAL_ADC_Start_IT+0xe4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2254      	movs	r2, #84	@ 0x54
 8000f10:	2101      	movs	r1, #1
 8000f12:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f14:	250f      	movs	r5, #15
 8000f16:	197c      	adds	r4, r7, r5
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fb66 	bl	80015ec <ADC_Enable>
 8000f20:	0003      	movs	r3, r0
 8000f22:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f24:	197b      	adds	r3, r7, r5
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d143      	bne.n	8000fb4 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	4a28      	ldr	r2, [pc, #160]	@ (8000fd4 <HAL_ADC_Start_IT+0xec>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	0052      	lsls	r2, r2, #1
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	221c      	movs	r2, #28
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2254      	movs	r2, #84	@ 0x54
 8000f50:	2100      	movs	r1, #0
 8000f52:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	211c      	movs	r1, #28
 8000f60:	438a      	bics	r2, r1
 8000f62:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d108      	bne.n	8000f7e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2108      	movs	r1, #8
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	605a      	str	r2, [r3, #4]
          break;
 8000f7c:	e008      	b.n	8000f90 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
          break;
 8000f8e:	46c0      	nop			@ (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fdd1 	bl	8000b54 <LL_ADC_REG_StartConversion>
 8000fb2:	e008      	b.n	8000fc6 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2254      	movs	r2, #84	@ 0x54
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]
 8000fbc:	e003      	b.n	8000fc6 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	fffff0fe 	.word	0xfffff0fe

08000fd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d017      	beq.n	8001044 <HAL_ADC_IRQHandler+0x54>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	2210      	movs	r2, #16
 8001022:	4013      	ands	r3, r2
 8001024:	d106      	bne.n	8001034 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fd50 	bl	8001adc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_ADC_IRQHandler+0x64>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2204      	movs	r2, #4
 8001050:	4013      	ands	r3, r2
 8001052:	d107      	bne.n	8001064 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2208      	movs	r2, #8
 8001058:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800105a:	d04d      	beq.n	80010f8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2208      	movs	r2, #8
 8001060:	4013      	ands	r3, r2
 8001062:	d049      	beq.n	80010f8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	d106      	bne.n	800107c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fc7c 	bl	800097e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d02e      	beq.n	80010e8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e9b      	ldrb	r3, [r3, #26]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d12a      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2208      	movs	r2, #8
 800109a:	4013      	ands	r3, r2
 800109c:	2b08      	cmp	r3, #8
 800109e:	d123      	bne.n	80010e8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fd67 	bl	8000b78 <LL_ADC_REG_IsConversionOngoing>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d110      	bne.n	80010d0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	210c      	movs	r1, #12
 80010ba:	438a      	bics	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	4a56      	ldr	r2, [pc, #344]	@ (800121c <HAL_ADC_IRQHandler+0x22c>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	2201      	movs	r2, #1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80010ce:	e00b      	b.n	80010e8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	2220      	movs	r2, #32
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e0:	2201      	movs	r2, #1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f8e4 	bl	80002b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	220c      	movs	r2, #12
 80010f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	4013      	ands	r3, r2
 80010fe:	d012      	beq.n	8001126 <HAL_ADC_IRQHandler+0x136>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	4013      	ands	r3, r2
 8001106:	d00e      	beq.n	8001126 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0252      	lsls	r2, r2, #9
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0018      	movs	r0, r3
 800111a:	f000 f881 	bl	8001220 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4013      	ands	r3, r2
 800112e:	d014      	beq.n	800115a <HAL_ADC_IRQHandler+0x16a>
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4013      	ands	r3, r2
 8001138:	d00f      	beq.n	800115a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	0292      	lsls	r2, r2, #10
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fcb6 	bl	8001abc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2280      	movs	r2, #128	@ 0x80
 8001156:	0052      	lsls	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d014      	beq.n	800118e <HAL_ADC_IRQHandler+0x19e>
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d00f      	beq.n	800118e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	02d2      	lsls	r2, r2, #11
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fca4 	bl	8001acc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	d02b      	beq.n	80011ee <HAL_ADC_IRQHandler+0x1fe>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2210      	movs	r2, #16
 800119a:	4013      	ands	r3, r2
 800119c:	d027      	beq.n	80011ee <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e008      	b.n	80011be <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fc38 	bl	8000a26 <LL_ADC_REG_GetDMATransfer>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d110      	bne.n	80011e6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	00d2      	lsls	r2, r2, #3
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d6:	2202      	movs	r2, #2
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 f825 	bl	8001230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2210      	movs	r2, #16
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	019b      	lsls	r3, r3, #6
 80011f4:	4013      	ands	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_ADC_IRQHandler+0x224>
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	4013      	ands	r3, r2
 8001200:	d008      	beq.n	8001214 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f000 fc71 	bl	8001aec <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	0192      	lsls	r2, r2, #6
 8001212:	601a      	str	r2, [r3, #0]
  }
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b006      	add	sp, #24
 800121a:	bd80      	pop	{r7, pc}
 800121c:	fffffefe 	.word	0xfffffefe

08001220 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2317      	movs	r3, #23
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2254      	movs	r2, #84	@ 0x54
 800125a:	5c9b      	ldrb	r3, [r3, r2]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x24>
 8001260:	2302      	movs	r3, #2
 8001262:	e1be      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x3a2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2254      	movs	r2, #84	@ 0x54
 8001268:	2101      	movs	r1, #1
 800126a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fc81 	bl	8000b78 <LL_ADC_REG_IsConversionOngoing>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d000      	beq.n	800127c <HAL_ADC_ConfigChannel+0x3c>
 800127a:	e1a1      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d100      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x46>
 8001284:	e152      	b.n	800152c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	429a      	cmp	r2, r3
 8001290:	d004      	beq.n	800129c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001296:	4ac2      	ldr	r2, [pc, #776]	@ (80015a0 <HAL_ADC_ConfigChannel+0x360>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d108      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0019      	movs	r1, r3
 80012a6:	0010      	movs	r0, r2
 80012a8:	f7ff fb9a 	bl	80009e0 <LL_ADC_REG_SetSequencerChAdd>
 80012ac:	e0ed      	b.n	800148a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	211f      	movs	r1, #31
 80012b8:	400b      	ands	r3, r1
 80012ba:	210f      	movs	r1, #15
 80012bc:	4099      	lsls	r1, r3
 80012be:	000b      	movs	r3, r1
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	0a5b      	lsrs	r3, r3, #9
 80012ce:	d105      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x9c>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0e9b      	lsrs	r3, r3, #26
 80012d6:	221f      	movs	r2, #31
 80012d8:	4013      	ands	r3, r2
 80012da:	e0bc      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d000      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0xa8>
 80012e6:	e0b5      	b.n	8001454 <HAL_ADC_ConfigChannel+0x214>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d000      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0xb4>
 80012f2:	e0ad      	b.n	8001450 <HAL_ADC_ConfigChannel+0x210>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2204      	movs	r2, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d000      	beq.n	8001300 <HAL_ADC_ConfigChannel+0xc0>
 80012fe:	e0a5      	b.n	800144c <HAL_ADC_ConfigChannel+0x20c>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	4013      	ands	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_ConfigChannel+0xcc>
 800130a:	e09d      	b.n	8001448 <HAL_ADC_ConfigChannel+0x208>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2210      	movs	r2, #16
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_ConfigChannel+0xd8>
 8001316:	e095      	b.n	8001444 <HAL_ADC_ConfigChannel+0x204>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2220      	movs	r2, #32
 800131e:	4013      	ands	r3, r2
 8001320:	d000      	beq.n	8001324 <HAL_ADC_ConfigChannel+0xe4>
 8001322:	e08d      	b.n	8001440 <HAL_ADC_ConfigChannel+0x200>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2240      	movs	r2, #64	@ 0x40
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_ConfigChannel+0xf0>
 800132e:	e085      	b.n	800143c <HAL_ADC_ConfigChannel+0x1fc>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	4013      	ands	r3, r2
 8001338:	d000      	beq.n	800133c <HAL_ADC_ConfigChannel+0xfc>
 800133a:	e07d      	b.n	8001438 <HAL_ADC_ConfigChannel+0x1f8>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d000      	beq.n	800134a <HAL_ADC_ConfigChannel+0x10a>
 8001348:	e074      	b.n	8001434 <HAL_ADC_ConfigChannel+0x1f4>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4013      	ands	r3, r2
 8001354:	d000      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x118>
 8001356:	e06b      	b.n	8001430 <HAL_ADC_ConfigChannel+0x1f0>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4013      	ands	r3, r2
 8001362:	d000      	beq.n	8001366 <HAL_ADC_ConfigChannel+0x126>
 8001364:	e062      	b.n	800142c <HAL_ADC_ConfigChannel+0x1ec>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4013      	ands	r3, r2
 8001370:	d000      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x134>
 8001372:	e059      	b.n	8001428 <HAL_ADC_ConfigChannel+0x1e8>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	4013      	ands	r3, r2
 800137e:	d151      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1e4>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	019b      	lsls	r3, r3, #6
 8001388:	4013      	ands	r3, r2
 800138a:	d149      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1e0>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4013      	ands	r3, r2
 8001396:	d141      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1dc>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4013      	ands	r3, r2
 80013a2:	d139      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1d8>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	4013      	ands	r3, r2
 80013ae:	d131      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1d4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d129      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1d0>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	02db      	lsls	r3, r3, #11
 80013c4:	4013      	ands	r3, r2
 80013c6:	d121      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1cc>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	031b      	lsls	r3, r3, #12
 80013d0:	4013      	ands	r3, r2
 80013d2:	d119      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c8>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	035b      	lsls	r3, r3, #13
 80013dc:	4013      	ands	r3, r2
 80013de:	d111      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1c4>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	4013      	ands	r3, r2
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c0>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	03db      	lsls	r3, r3, #15
 80013f4:	4013      	ands	r3, r2
 80013f6:	d001      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x1bc>
 80013f8:	2316      	movs	r3, #22
 80013fa:	e02c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 80013fc:	2300      	movs	r3, #0
 80013fe:	e02a      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001400:	2315      	movs	r3, #21
 8001402:	e028      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001404:	2314      	movs	r3, #20
 8001406:	e026      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001408:	2313      	movs	r3, #19
 800140a:	e024      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 800140c:	2312      	movs	r3, #18
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001410:	2311      	movs	r3, #17
 8001412:	e020      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001414:	2310      	movs	r3, #16
 8001416:	e01e      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001418:	230f      	movs	r3, #15
 800141a:	e01c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 800141c:	230e      	movs	r3, #14
 800141e:	e01a      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001420:	230d      	movs	r3, #13
 8001422:	e018      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001424:	230c      	movs	r3, #12
 8001426:	e016      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001428:	230b      	movs	r3, #11
 800142a:	e014      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 800142c:	230a      	movs	r3, #10
 800142e:	e012      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001430:	2309      	movs	r3, #9
 8001432:	e010      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001434:	2308      	movs	r3, #8
 8001436:	e00e      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001438:	2307      	movs	r3, #7
 800143a:	e00c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 800143c:	2306      	movs	r3, #6
 800143e:	e00a      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001440:	2305      	movs	r3, #5
 8001442:	e008      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001444:	2304      	movs	r3, #4
 8001446:	e006      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001448:	2303      	movs	r3, #3
 800144a:	e004      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_ADC_ConfigChannel+0x216>
 8001454:	2300      	movs	r3, #0
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	6852      	ldr	r2, [r2, #4]
 800145a:	201f      	movs	r0, #31
 800145c:	4002      	ands	r2, r0
 800145e:	4093      	lsls	r3, r2
 8001460:	000a      	movs	r2, r1
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	429a      	cmp	r2, r3
 8001476:	d808      	bhi.n	800148a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	001a      	movs	r2, r3
 8001486:	f7ff fa8b 	bl	80009a0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	001a      	movs	r2, r3
 8001498:	f7ff fad2 	bl	8000a40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db00      	blt.n	80014a6 <HAL_ADC_ConfigChannel+0x266>
 80014a4:	e096      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014a6:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fa27 	bl	80008fc <LL_ADC_GetCommonPathInternalCh>
 80014ae:	0003      	movs	r3, r0
 80014b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3c      	ldr	r2, [pc, #240]	@ (80015a8 <HAL_ADC_ConfigChannel+0x368>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d123      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014c4:	d11e      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	0412      	lsls	r2, r2, #16
 80014cc:	4313      	orrs	r3, r2
 80014ce:	4a35      	ldr	r2, [pc, #212]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 80014d0:	0019      	movs	r1, r3
 80014d2:	0010      	movs	r0, r2
 80014d4:	f7ff f9fe 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80014d8:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_ADC_ConfigChannel+0x36c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4934      	ldr	r1, [pc, #208]	@ (80015b0 <HAL_ADC_ConfigChannel+0x370>)
 80014de:	0018      	movs	r0, r3
 80014e0:	f7fe fe12 	bl	8000108 <__udivsi3>
 80014e4:	0003      	movs	r3, r0
 80014e6:	001a      	movs	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	3301      	adds	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001502:	e067      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <HAL_ADC_ConfigChannel+0x374>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d162      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	03db      	lsls	r3, r3, #15
 8001514:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001516:	d15d      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	03d2      	lsls	r2, r2, #15
 800151e:	4313      	orrs	r3, r2
 8001520:	4a20      	ldr	r2, [pc, #128]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 8001522:	0019      	movs	r1, r3
 8001524:	0010      	movs	r0, r2
 8001526:	f7ff f9d5 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 800152a:	e053      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	061b      	lsls	r3, r3, #24
 8001534:	429a      	cmp	r2, r3
 8001536:	d004      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <HAL_ADC_ConfigChannel+0x360>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d107      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0019      	movs	r1, r3
 800154c:	0010      	movs	r0, r2
 800154e:	f7ff fa58 	bl	8000a02 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da3c      	bge.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff f9cd 	bl	80008fc <LL_ADC_GetCommonPathInternalCh>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <HAL_ADC_ConfigChannel+0x368>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d108      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <HAL_ADC_ConfigChannel+0x378>)
 8001574:	4013      	ands	r3, r2
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 8001578:	0019      	movs	r1, r3
 800157a:	0010      	movs	r0, r2
 800157c:	f7ff f9aa 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 8001580:	e028      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_ADC_ConfigChannel+0x374>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d123      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_ADC_ConfigChannel+0x37c>)
 8001590:	4013      	ands	r3, r2
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_ADC_ConfigChannel+0x364>)
 8001594:	0019      	movs	r1, r3
 8001596:	0010      	movs	r0, r2
 8001598:	f7ff f99c 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 800159c:	e01a      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x394>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	80000004 	.word	0x80000004
 80015a4:	40012708 	.word	0x40012708
 80015a8:	a4000200 	.word	0xa4000200
 80015ac:	20000000 	.word	0x20000000
 80015b0:	00030d40 	.word	0x00030d40
 80015b4:	a8000400 	.word	0xa8000400
 80015b8:	ff7fffff 	.word	0xff7fffff
 80015bc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	2220      	movs	r2, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015cc:	2317      	movs	r3, #23
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2254      	movs	r2, #84	@ 0x54
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80015dc:	2317      	movs	r3, #23
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b006      	add	sp, #24
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			@ (mov r8, r8)

080015ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fa87 	bl	8000b10 <LL_ADC_IsEnabled>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d162      	bne.n	80016cc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <ADC_Enable+0xec>)
 800160e:	4013      	ands	r3, r2
 8001610:	d00d      	beq.n	800162e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	2210      	movs	r2, #16
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	2201      	movs	r2, #1
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e04f      	b.n	80016ce <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff fa48 	bl	8000ac8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <ADC_Enable+0xf0>)
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff f95e 	bl	80008fc <LL_ADC_GetCommonPathInternalCh>
 8001640:	0002      	movs	r2, r0
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d00f      	beq.n	800166a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800164a:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <ADC_Enable+0xf4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4925      	ldr	r1, [pc, #148]	@ (80016e4 <ADC_Enable+0xf8>)
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fd59 	bl	8000108 <__udivsi3>
 8001656:	0003      	movs	r3, r0
 8001658:	3301      	adds	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800165c:	e002      	b.n	8001664 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7e5b      	ldrb	r3, [r3, #25]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d02c      	beq.n	80016cc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001672:	f7ff f925 	bl	80008c0 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800167a:	e020      	b.n	80016be <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff fa45 	bl	8000b10 <LL_ADC_IsEnabled>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d104      	bne.n	8001694 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff fa1a 	bl	8000ac8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001694:	f7ff f914 	bl	80008c0 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d90d      	bls.n	80016be <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	2210      	movs	r2, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2201      	movs	r2, #1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e007      	b.n	80016ce <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1d7      	bne.n	800167c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	80000017 	.word	0x80000017
 80016dc:	40012708 	.word	0x40012708
 80016e0:	20000000 	.word	0x20000000
 80016e4:	00030d40 	.word	0x00030d40

080016e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fa1c 	bl	8000b32 <LL_ADC_IsDisableOngoing>
 80016fa:	0003      	movs	r3, r0
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff fa04 	bl	8000b10 <LL_ADC_IsEnabled>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d040      	beq.n	800178e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2205      	movs	r2, #5
 800171a:	4013      	ands	r3, r2
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10d      	bne.n	800173c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff f9e1 	bl	8000aec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2203      	movs	r2, #3
 8001730:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001732:	f7ff f8c5 	bl	80008c0 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800173a:	e022      	b.n	8001782 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	2210      	movs	r2, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174c:	2201      	movs	r2, #1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e01b      	b.n	8001790 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001758:	f7ff f8b2 	bl	80008c0 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d90d      	bls.n	8001782 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	2210      	movs	r2, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001776:	2201      	movs	r2, #1
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e006      	b.n	8001790 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	d1e4      	bne.n	8001758 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}

08001798 <LL_ADC_GetCommonClock>:
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	23f0      	movs	r3, #240	@ 0xf0
 80017a6:	039b      	lsls	r3, r3, #14
 80017a8:	4013      	ands	r3, r2
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <LL_ADC_GetClock>:
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	0f9b      	lsrs	r3, r3, #30
 80017c0:	079b      	lsls	r3, r3, #30
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}

080017ca <LL_ADC_SetCalibrationFactor>:
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	22b4      	movs	r2, #180	@ 0xb4
 80017d8:	589b      	ldr	r3, [r3, r2]
 80017da:	227f      	movs	r2, #127	@ 0x7f
 80017dc:	4393      	bics	r3, r2
 80017de:	001a      	movs	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	21b4      	movs	r1, #180	@ 0xb4
 80017e8:	505a      	str	r2, [r3, r1]
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <LL_ADC_GetCalibrationFactor>:
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	22b4      	movs	r2, #180	@ 0xb4
 80017fe:	589b      	ldr	r3, [r3, r2]
 8001800:	227f      	movs	r2, #127	@ 0x7f
 8001802:	4013      	ands	r3, r2
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}

0800180c <LL_ADC_Enable>:
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <LL_ADC_Enable+0x20>)
 800181a:	4013      	ands	r3, r2
 800181c:	2201      	movs	r2, #1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	7fffffe8 	.word	0x7fffffe8

08001830 <LL_ADC_Disable>:
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <LL_ADC_Disable+0x20>)
 800183e:	4013      	ands	r3, r2
 8001840:	2202      	movs	r2, #2
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	46c0      	nop			@ (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}
 8001850:	7fffffe8 	.word	0x7fffffe8

08001854 <LL_ADC_IsEnabled>:
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <LL_ADC_IsEnabled+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_ADC_IsEnabled+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <LL_ADC_StartCalibration>:
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a05      	ldr	r2, [pc, #20]	@ (800189c <LL_ADC_StartCalibration+0x24>)
 8001886:	4013      	ands	r3, r2
 8001888:	2280      	movs	r2, #128	@ 0x80
 800188a:	0612      	lsls	r2, r2, #24
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	7fffffe8 	.word	0x7fffffe8

080018a0 <LL_ADC_IsCalibrationOnGoing>:
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	0fdb      	lsrs	r3, r3, #31
 80018ae:	07da      	lsls	r2, r3, #31
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	061b      	lsls	r3, r3, #24
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d101      	bne.n	80018bc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_IsCalibrationOnGoing+0x1e>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b08b      	sub	sp, #44	@ 0x2c
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2254      	movs	r2, #84	@ 0x54
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e0de      	b.n	8001aa4 <HAL_ADCEx_Calibration_Start+0x1dc>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2254      	movs	r2, #84	@ 0x54
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80018ee:	231f      	movs	r3, #31
 80018f0:	18fc      	adds	r4, r7, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fef7 	bl	80016e8 <ADC_Disable>
 80018fa:	0003      	movs	r3, r0
 80018fc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff ffa6 	bl	8001854 <LL_ADC_IsEnabled>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d000      	beq.n	800190e <HAL_ADCEx_Calibration_Start+0x46>
 800190c:	e0bd      	b.n	8001a8a <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	4a66      	ldr	r2, [pc, #408]	@ (8001aac <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001914:	4013      	ands	r3, r2
 8001916:	2202      	movs	r2, #2
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a62      	ldr	r2, [pc, #392]	@ (8001ab0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	495f      	ldr	r1, [pc, #380]	@ (8001ab4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001936:	400a      	ands	r2, r1
 8001938:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	e02e      	b.n	800199e <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ff97 	bl	8001878 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800194a:	e015      	b.n	8001978 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	23ae      	movs	r3, #174	@ 0xae
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	429a      	cmp	r2, r3
 800195a:	d30d      	bcc.n	8001978 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	2212      	movs	r2, #18
 8001962:	4393      	bics	r3, r2
 8001964:	2210      	movs	r2, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2254      	movs	r2, #84	@ 0x54
 8001970:	2100      	movs	r1, #0
 8001972:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e095      	b.n	8001aa4 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff8f 	bl	80018a0 <LL_ADC_IsCalibrationOnGoing>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d1e2      	bne.n	800194c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff ff31 	bl	80017f2 <LL_ADC_GetCalibrationFactor>
 8001990:	0002      	movs	r2, r0
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	189b      	adds	r3, r3, r2
 8001996:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	3301      	adds	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	d9cd      	bls.n	8001940 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80019a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a6:	6a38      	ldr	r0, [r7, #32]
 80019a8:	f7fe fbae 	bl	8000108 <__udivsi3>
 80019ac:	0003      	movs	r3, r0
 80019ae:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff ff29 	bl	800180c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff fef7 	bl	80017b2 <LL_ADC_GetClock>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d11b      	bne.n	8001a00 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fee4 	bl	8001798 <LL_ADC_GetCommonClock>
 80019d0:	0003      	movs	r3, r0
 80019d2:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	23e0      	movs	r3, #224	@ 0xe0
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	429a      	cmp	r2, r3
 80019dc:	d310      	bcc.n	8001a00 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	3b03      	subs	r3, #3
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 80019f2:	e002      	b.n	80019fa <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f9      	bne.n	80019f4 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fede 	bl	80017ca <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff ff0c 	bl	8001830 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a18:	f7fe ff52 	bl	80008c0 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a20:	e01b      	b.n	8001a5a <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a22:	f7fe ff4d 	bl	80008c0 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d914      	bls.n	8001a5a <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff0d 	bl	8001854 <LL_ADC_IsEnabled>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	2210      	movs	r2, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e024      	b.n	8001aa4 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fef8 	bl	8001854 <LL_ADC_IsEnabled>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d1dc      	bne.n	8001a22 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4393      	bics	r3, r2
 8001a80:	2201      	movs	r2, #1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a88:	e005      	b.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	2210      	movs	r2, #16
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2254      	movs	r2, #84	@ 0x54
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a9e:	231f      	movs	r3, #31
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b00b      	add	sp, #44	@ 0x2c
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	fffffefd 	.word	0xfffffefd
 8001ab0:	00008003 	.word	0x00008003
 8001ab4:	ffff7ffc 	.word	0xffff7ffc
 8001ab8:	40012708 	.word	0x40012708

08001abc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b0e:	d809      	bhi.n	8001b24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	001a      	movs	r2, r3
 8001b16:	231f      	movs	r3, #31
 8001b18:	401a      	ands	r2, r3
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_EnableIRQ+0x30>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4091      	lsls	r1, r2
 8001b20:	000a      	movs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	0002      	movs	r2, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b44:	d828      	bhi.n	8001b98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b46:	4a2f      	ldr	r2, [pc, #188]	@ (8001c04 <__NVIC_SetPriority+0xd4>)
 8001b48:	1dfb      	adds	r3, r7, #7
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	33c0      	adds	r3, #192	@ 0xc0
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	589b      	ldr	r3, [r3, r2]
 8001b56:	1dfa      	adds	r2, r7, #7
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	400a      	ands	r2, r1
 8001b60:	00d2      	lsls	r2, r2, #3
 8001b62:	21ff      	movs	r1, #255	@ 0xff
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	22ff      	movs	r2, #255	@ 0xff
 8001b74:	401a      	ands	r2, r3
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	4003      	ands	r3, r0
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	481f      	ldr	r0, [pc, #124]	@ (8001c04 <__NVIC_SetPriority+0xd4>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	33c0      	adds	r3, #192	@ 0xc0
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b96:	e031      	b.n	8001bfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3306      	adds	r3, #6
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	18d3      	adds	r3, r2, r3
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1dfa      	adds	r2, r7, #7
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	2203      	movs	r2, #3
 8001bba:	400a      	ands	r2, r1
 8001bbc:	00d2      	lsls	r2, r2, #3
 8001bbe:	21ff      	movs	r1, #255	@ 0xff
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	43d2      	mvns	r2, r2
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	22ff      	movs	r2, #255	@ 0xff
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2303      	movs	r3, #3
 8001bda:	4003      	ands	r3, r0
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be0:	4809      	ldr	r0, [pc, #36]	@ (8001c08 <__NVIC_SetPriority+0xd8>)
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	001c      	movs	r4, r3
 8001be8:	230f      	movs	r3, #15
 8001bea:	4023      	ands	r3, r4
 8001bec:	3b08      	subs	r3, #8
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	3306      	adds	r3, #6
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	18c3      	adds	r3, r0, r3
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	46c0      	nop			@ (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b003      	add	sp, #12
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	045b      	lsls	r3, r3, #17
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d301      	bcc.n	8001c24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c20:	2301      	movs	r3, #1
 8001c22:	e010      	b.n	8001c46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <SysTick_Config+0x44>)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	425b      	negs	r3, r3
 8001c30:	2103      	movs	r1, #3
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff ff7c 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <SysTick_Config+0x44>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <SysTick_Config+0x44>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	210f      	movs	r1, #15
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	1c02      	adds	r2, r0, #0
 8001c64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	0002      	movs	r2, r0
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff ff33 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ffaf 	bl	8001c0c <SysTick_Config>
 8001cae:	0003      	movs	r3, r0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cc6:	e14d      	b.n	8001f64 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <HAL_GPIO_Init+0x28>
 8001cde:	e13e      	b.n	8001f5e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x38>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d125      	bne.n	8001d3c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	58d3      	ldr	r3, [r2, r3]
 8001cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2107      	movs	r1, #7
 8001d20:	400b      	ands	r3, r1
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	0013      	movs	r3, r2
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d00b      	beq.n	8001d90 <HAL_GPIO_Init+0xd8>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	43da      	mvns	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	2201      	movs	r2, #1
 8001dde:	401a      	ands	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	055b      	lsls	r3, r3, #21
 8001e32:	4013      	ands	r3, r2
 8001e34:	d100      	bne.n	8001e38 <HAL_GPIO_Init+0x180>
 8001e36:	e092      	b.n	8001f5e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e38:	4a50      	ldr	r2, [pc, #320]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3318      	adds	r3, #24
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	589b      	ldr	r3, [r3, r2]
 8001e44:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	220f      	movs	r2, #15
 8001e50:	409a      	lsls	r2, r3
 8001e52:	0013      	movs	r3, r2
 8001e54:	43da      	mvns	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	23a0      	movs	r3, #160	@ 0xa0
 8001e60:	05db      	lsls	r3, r3, #23
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1d6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a45      	ldr	r2, [pc, #276]	@ (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1d2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a44      	ldr	r2, [pc, #272]	@ (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1ce>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a43      	ldr	r2, [pc, #268]	@ (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1ca>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x1d8>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x1d8>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x1d8>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x1d8>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	2103      	movs	r1, #3
 8001e94:	400a      	ands	r2, r1
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ea0:	4936      	ldr	r1, [pc, #216]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001eae:	4a33      	ldr	r2, [pc, #204]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	58d3      	ldr	r3, [r2, r3]
 8001eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ed4:	4929      	ldr	r1, [pc, #164]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001edc:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001ede:	2384      	movs	r3, #132	@ 0x84
 8001ee0:	58d3      	ldr	r3, [r2, r3]
 8001ee2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4013      	ands	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001f02:	491e      	ldr	r1, [pc, #120]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001f04:	2284      	movs	r2, #132	@ 0x84
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4013      	ands	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	035b      	lsls	r3, r3, #13
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	40da      	lsrs	r2, r3
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	d000      	beq.n	8001f72 <HAL_GPIO_Init+0x2ba>
 8001f70:	e6aa      	b.n	8001cc8 <HAL_GPIO_Init+0x10>
  }
}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	50000400 	.word	0x50000400
 8001f84:	50000800 	.word	0x50000800
 8001f88:	50001400 	.word	0x50001400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	0008      	movs	r0, r1
 8001f96:	0011      	movs	r1, r2
 8001f98:	1cbb      	adds	r3, r7, #2
 8001f9a:	1c02      	adds	r2, r0, #0
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	1c7b      	adds	r3, r7, #1
 8001fa0:	1c0a      	adds	r2, r1, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa4:	1c7b      	adds	r3, r7, #1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fac:	1cbb      	adds	r3, r7, #2
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb6:	1cbb      	adds	r3, r7, #2
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1d0      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1e>
 8001fe4:	e069      	b.n	80020ba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4bc8      	ldr	r3, [pc, #800]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2238      	movs	r2, #56	@ 0x38
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d105      	bne.n	8002002 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d15d      	bne.n	80020ba <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1bc      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	025b      	lsls	r3, r3, #9
 800200a:	429a      	cmp	r2, r3
 800200c:	d107      	bne.n	800201e <HAL_RCC_OscConfig+0x56>
 800200e:	4bbe      	ldr	r3, [pc, #760]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4bbd      	ldr	r3, [pc, #756]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002014:	2180      	movs	r1, #128	@ 0x80
 8002016:	0249      	lsls	r1, r1, #9
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e020      	b.n	8002060 <HAL_RCC_OscConfig+0x98>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	23a0      	movs	r3, #160	@ 0xa0
 8002024:	02db      	lsls	r3, r3, #11
 8002026:	429a      	cmp	r2, r3
 8002028:	d10e      	bne.n	8002048 <HAL_RCC_OscConfig+0x80>
 800202a:	4bb7      	ldr	r3, [pc, #732]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4bb6      	ldr	r3, [pc, #728]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	02c9      	lsls	r1, r1, #11
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4bb3      	ldr	r3, [pc, #716]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4bb2      	ldr	r3, [pc, #712]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	0249      	lsls	r1, r1, #9
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002048:	4baf      	ldr	r3, [pc, #700]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4bae      	ldr	r3, [pc, #696]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800204e:	49af      	ldr	r1, [pc, #700]	@ (800230c <HAL_RCC_OscConfig+0x344>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4bac      	ldr	r3, [pc, #688]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4bab      	ldr	r3, [pc, #684]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800205a:	49ad      	ldr	r1, [pc, #692]	@ (8002310 <HAL_RCC_OscConfig+0x348>)
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d014      	beq.n	8002092 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fc2a 	bl	80008c0 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002072:	f7fe fc25 	bl	80008c0 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	@ 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e17b      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002084:	4ba0      	ldr	r3, [pc, #640]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0xaa>
 8002090:	e013      	b.n	80020ba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe fc15 	bl	80008c0 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800209c:	f7fe fc10 	bl	80008c0 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	@ 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e166      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ae:	4b96      	ldr	r3, [pc, #600]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	4013      	ands	r3, r2
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0xfe>
 80020c4:	e086      	b.n	80021d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4b90      	ldr	r3, [pc, #576]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2238      	movs	r2, #56	@ 0x38
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d12f      	bne.n	8002136 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e14c      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b89      	ldr	r3, [pc, #548]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a8b      	ldr	r2, [pc, #556]	@ (8002314 <HAL_RCC_OscConfig+0x34c>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	4b85      	ldr	r3, [pc, #532]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020fe:	4b82      	ldr	r3, [pc, #520]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a85      	ldr	r2, [pc, #532]	@ (8002318 <HAL_RCC_OscConfig+0x350>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	4b7e      	ldr	r3, [pc, #504]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002112:	4b7d      	ldr	r3, [pc, #500]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	4a7f      	ldr	r2, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x354>)
 800211e:	40da      	lsrs	r2, r3
 8002120:	4b7f      	ldr	r3, [pc, #508]	@ (8002320 <HAL_RCC_OscConfig+0x358>)
 8002122:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002124:	4b7f      	ldr	r3, [pc, #508]	@ (8002324 <HAL_RCC_OscConfig+0x35c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fb6d 	bl	8000808 <HAL_InitTick>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d050      	beq.n	80021d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e122      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d030      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800213e:	4b72      	ldr	r3, [pc, #456]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a75      	ldr	r2, [pc, #468]	@ (8002318 <HAL_RCC_OscConfig+0x350>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	4b6e      	ldr	r3, [pc, #440]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002152:	4b6d      	ldr	r3, [pc, #436]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b6c      	ldr	r3, [pc, #432]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0049      	lsls	r1, r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fbae 	bl	80008c0 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800216a:	f7fe fba9 	bl	80008c0 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0ff      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217c:	4b62      	ldr	r3, [pc, #392]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4013      	ands	r3, r2
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a61      	ldr	r2, [pc, #388]	@ (8002314 <HAL_RCC_OscConfig+0x34c>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	4b5b      	ldr	r3, [pc, #364]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e019      	b.n	80021d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80021a0:	4b59      	ldr	r3, [pc, #356]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b58      	ldr	r3, [pc, #352]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80021a6:	4960      	ldr	r1, [pc, #384]	@ (8002328 <HAL_RCC_OscConfig+0x360>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fb88 	bl	80008c0 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021b6:	f7fe fb83 	bl	80008c0 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0d9      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4013      	ands	r3, r2
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	4013      	ands	r3, r2
 80021dc:	d042      	beq.n	8002264 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021de:	4b4a      	ldr	r3, [pc, #296]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	@ 0x38
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b18      	cmp	r3, #24
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d138      	bne.n	8002264 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0c2      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021fe:	4b42      	ldr	r3, [pc, #264]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002202:	4b41      	ldr	r3, [pc, #260]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe fb59 	bl	80008c0 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002214:	f7fe fb54 	bl	80008c0 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0aa      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002226:	4b38      	ldr	r3, [pc, #224]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d0f1      	beq.n	8002214 <HAL_RCC_OscConfig+0x24c>
 8002230:	e018      	b.n	8002264 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002232:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002234:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002236:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 8002238:	2101      	movs	r1, #1
 800223a:	438a      	bics	r2, r1
 800223c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fb3f 	bl	80008c0 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002248:	f7fe fb3a 	bl	80008c0 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e090      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800225a:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d1f1      	bne.n	8002248 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2204      	movs	r2, #4
 800226a:	4013      	ands	r3, r2
 800226c:	d100      	bne.n	8002270 <HAL_RCC_OscConfig+0x2a8>
 800226e:	e084      	b.n	800237a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2238      	movs	r2, #56	@ 0x38
 800227e:	4013      	ands	r3, r2
 8002280:	2b20      	cmp	r3, #32
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d000      	beq.n	800228e <HAL_RCC_OscConfig+0x2c6>
 800228c:	e075      	b.n	800237a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e074      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2e0>
 800229a:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 800229c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x31a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x302>
 80022b0:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022b4:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	430a      	orrs	r2, r1
 80022ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x31a>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022da:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_RCC_OscConfig+0x340>)
 80022dc:	2104      	movs	r1, #4
 80022de:	438a      	bics	r2, r1
 80022e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fae9 	bl	80008c0 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022f2:	e01d      	b.n	8002330 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fae4 	bl	80008c0 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_RCC_OscConfig+0x364>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d915      	bls.n	8002330 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e039      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
 8002308:	40021000 	.word	0x40021000
 800230c:	fffeffff 	.word	0xfffeffff
 8002310:	fffbffff 	.word	0xfffbffff
 8002314:	ffff80ff 	.word	0xffff80ff
 8002318:	ffffc7ff 	.word	0xffffc7ff
 800231c:	02dc6c00 	.word	0x02dc6c00
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004
 8002328:	fffffeff 	.word	0xfffffeff
 800232c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002330:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_RCC_OscConfig+0x3bc>)
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d0dc      	beq.n	80022f4 <HAL_RCC_OscConfig+0x32c>
 800233a:	e013      	b.n	8002364 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fac0 	bl	80008c0 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002344:	e009      	b.n	800235a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe fabb 	bl	80008c0 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <HAL_RCC_OscConfig+0x3c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e010      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_RCC_OscConfig+0x3bc>)
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002364:	230f      	movs	r3, #15
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_OscConfig+0x3bc>)
 8002370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002372:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <HAL_RCC_OscConfig+0x3bc>)
 8002374:	4905      	ldr	r1, [pc, #20]	@ (800238c <HAL_RCC_OscConfig+0x3c4>)
 8002376:	400a      	ands	r2, r1
 8002378:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	00001388 	.word	0x00001388
 800238c:	efffffff 	.word	0xefffffff

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0e9      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b76      	ldr	r3, [pc, #472]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2207      	movs	r2, #7
 80023aa:	4013      	ands	r3, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d91e      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b73      	ldr	r3, [pc, #460]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2207      	movs	r2, #7
 80023b8:	4393      	bics	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fa7c 	bl	80008c0 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe fa77 	bl	80008c0 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002584 <HAL_RCC_ClockConfig+0x1f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0ca      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e2:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2207      	movs	r2, #7
 80023e8:	4013      	ands	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ee      	bne.n	80023ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d017      	beq.n	800242a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2204      	movs	r2, #4
 8002400:	4013      	ands	r3, r2
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002404:	4b60      	ldr	r3, [pc, #384]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a60      	ldr	r2, [pc, #384]	@ (800258c <HAL_RCC_ClockConfig+0x1fc>)
 800240a:	401a      	ands	r2, r3
 800240c:	4b5e      	ldr	r3, [pc, #376]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	21b0      	movs	r1, #176	@ 0xb0
 8002410:	0109      	lsls	r1, r1, #4
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b5c      	ldr	r3, [pc, #368]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_RCC_ClockConfig+0x200>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b58      	ldr	r3, [pc, #352]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d055      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002434:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	221c      	movs	r2, #28
 800243a:	4393      	bics	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002450:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d11f      	bne.n	800249c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e08b      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4013      	ands	r3, r2
 8002472:	d113      	bne.n	800249c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07f      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d106      	bne.n	800248e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002480:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d108      	bne.n	800249c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e074      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e06d      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800249c:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2207      	movs	r2, #7
 80024a2:	4393      	bics	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fa06 	bl	80008c0 <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b8:	e009      	b.n	80024ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024ba:	f7fe fa01 	bl	80008c0 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002584 <HAL_RCC_ClockConfig+0x1f4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e054      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2238      	movs	r2, #56	@ 0x38
 80024d4:	401a      	ands	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1ec      	bne.n	80024ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2207      	movs	r2, #7
 80024e6:	4013      	ands	r3, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d21e      	bcs.n	800252c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2207      	movs	r2, #7
 80024f4:	4393      	bics	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002500:	f7fe f9de 	bl	80008c0 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002508:	e009      	b.n	800251e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe f9d9 	bl	80008c0 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_RCC_ClockConfig+0x1f4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e02c      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2207      	movs	r2, #7
 8002524:	4013      	ands	r3, r2
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2204      	movs	r2, #4
 8002532:	4013      	ands	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <HAL_RCC_ClockConfig+0x204>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800254a:	f000 f82b 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800254e:	0001      	movs	r1, r0
 8002550:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_RCC_ClockConfig+0x1f8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	220f      	movs	r2, #15
 8002558:	401a      	ands	r2, r3
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_RCC_ClockConfig+0x208>)
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	58d3      	ldr	r3, [r2, r3]
 8002560:	221f      	movs	r2, #31
 8002562:	4013      	ands	r3, r2
 8002564:	000a      	movs	r2, r1
 8002566:	40da      	lsrs	r2, r3
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_RCC_ClockConfig+0x20c>)
 800256a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_RCC_ClockConfig+0x210>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe f949 	bl	8000808 <HAL_InitTick>
 8002576:	0003      	movs	r3, r0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40022000 	.word	0x40022000
 8002584:	00001388 	.word	0x00001388
 8002588:	40021000 	.word	0x40021000
 800258c:	ffff84ff 	.word	0xffff84ff
 8002590:	fffff0ff 	.word	0xfffff0ff
 8002594:	ffff8fff 	.word	0xffff8fff
 8002598:	08002874 	.word	0x08002874
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_RCC_GetSysClockFreq+0x78>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	@ 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	d10f      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCC_GetSysClockFreq+0x78>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0adb      	lsrs	r3, r3, #11
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4815      	ldr	r0, [pc, #84]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x7c>)
 80025ca:	f7fd fd9d 	bl	8000108 <__udivsi3>
 80025ce:	0003      	movs	r3, r0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e01e      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCC_GetSysClockFreq+0x78>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2238      	movs	r2, #56	@ 0x38
 80025da:	4013      	ands	r3, r2
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x80>)
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80025e6:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <HAL_RCC_GetSysClockFreq+0x78>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2238      	movs	r2, #56	@ 0x38
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d103      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_RCC_GetSysClockFreq+0x78>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2238      	movs	r2, #56	@ 0x38
 8002600:	4013      	ands	r3, r2
 8002602:	2b18      	cmp	r3, #24
 8002604:	d103      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002606:	23fa      	movs	r3, #250	@ 0xfa
 8002608:	01db      	lsls	r3, r3, #7
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	e001      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002612:	687b      	ldr	r3, [r7, #4]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	02dc6c00 	.word	0x02dc6c00
 8002624:	007a1200 	.word	0x007a1200

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002630:	2313      	movs	r3, #19
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002638:	2312      	movs	r3, #18
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800264c:	e079      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2011      	movs	r0, #17
 8002650:	183b      	adds	r3, r7, r0
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b64      	ldr	r3, [pc, #400]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	055b      	lsls	r3, r3, #21
 800265e:	4013      	ands	r3, r2
 8002660:	d110      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002666:	4b60      	ldr	r3, [pc, #384]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0549      	lsls	r1, r1, #21
 800266c:	430a      	orrs	r2, r1
 800266e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002670:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	183b      	adds	r3, r7, r0
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002684:	4b58      	ldr	r3, [pc, #352]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002688:	23c0      	movs	r3, #192	@ 0xc0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	d014      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80026a0:	4b51      	ldr	r3, [pc, #324]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	4a51      	ldr	r2, [pc, #324]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026aa:	4b4f      	ldr	r3, [pc, #316]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ae:	4b4e      	ldr	r3, [pc, #312]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0249      	lsls	r1, r1, #9
 80026b4:	430a      	orrs	r2, r1
 80026b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b8:	4b4b      	ldr	r3, [pc, #300]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026bc:	4b4a      	ldr	r3, [pc, #296]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026be:	494c      	ldr	r1, [pc, #304]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	d016      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe f8f5 	bl	80008c0 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe f8f0 	bl	80008c0 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4a43      	ldr	r2, [pc, #268]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d904      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80026ec:	2313      	movs	r3, #19
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2203      	movs	r2, #3
 80026f2:	701a      	strb	r2, [r3, #0]
          break;
 80026f4:	e004      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026f6:	4b3c      	ldr	r3, [pc, #240]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0ed      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002700:	2313      	movs	r3, #19
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	4a37      	ldr	r2, [pc, #220]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	4b33      	ldr	r3, [pc, #204]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271a:	430a      	orrs	r2, r1
 800271c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	2312      	movs	r3, #18
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2213      	movs	r2, #19
 8002726:	18ba      	adds	r2, r7, r2
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800272c:	2311      	movs	r3, #17
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273a:	4b2b      	ldr	r3, [pc, #172]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800273c:	492e      	ldr	r1, [pc, #184]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	400a      	ands	r2, r1
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274c:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	2203      	movs	r2, #3
 8002752:	4393      	bics	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800275c:	430a      	orrs	r2, r1
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2240      	movs	r2, #64	@ 0x40
 8002766:	4013      	ands	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800277a:	430a      	orrs	r2, r1
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	01db      	lsls	r3, r3, #7
 8002786:	4013      	ands	r3, r2
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	0899      	lsrs	r1, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002798:	430a      	orrs	r2, r1
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da09      	bge.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	22e0      	movs	r2, #224	@ 0xe0
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80027d8:	2312      	movs	r3, #18
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b006      	add	sp, #24
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	40021000 	.word	0x40021000
 80027ec:	fffffcff 	.word	0xfffffcff
 80027f0:	fffeffff 	.word	0xfffeffff
 80027f4:	00001388 	.word	0x00001388
 80027f8:	efffffff 	.word	0xefffffff
 80027fc:	ffffcfff 	.word	0xffffcfff
 8002800:	ffff3fff 	.word	0xffff3fff

08002804 <memset>:
 8002804:	0003      	movs	r3, r0
 8002806:	1882      	adds	r2, r0, r2
 8002808:	4293      	cmp	r3, r2
 800280a:	d100      	bne.n	800280e <memset+0xa>
 800280c:	4770      	bx	lr
 800280e:	7019      	strb	r1, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	e7f9      	b.n	8002808 <memset+0x4>

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2600      	movs	r6, #0
 8002818:	4c0c      	ldr	r4, [pc, #48]	@ (800284c <__libc_init_array+0x38>)
 800281a:	4d0d      	ldr	r5, [pc, #52]	@ (8002850 <__libc_init_array+0x3c>)
 800281c:	1b64      	subs	r4, r4, r5
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	2600      	movs	r6, #0
 8002826:	f000 f819 	bl	800285c <_init>
 800282a:	4c0a      	ldr	r4, [pc, #40]	@ (8002854 <__libc_init_array+0x40>)
 800282c:	4d0a      	ldr	r5, [pc, #40]	@ (8002858 <__libc_init_array+0x44>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	00b3      	lsls	r3, r6, #2
 800283a:	58eb      	ldr	r3, [r5, r3]
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	00b3      	lsls	r3, r6, #2
 8002844:	58eb      	ldr	r3, [r5, r3]
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	080028b4 	.word	0x080028b4
 8002850:	080028b4 	.word	0x080028b4
 8002854:	080028b8 	.word	0x080028b8
 8002858:	080028b4 	.word	0x080028b4

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
