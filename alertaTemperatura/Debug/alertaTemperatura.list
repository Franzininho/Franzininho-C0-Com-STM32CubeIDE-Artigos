
alertaTemperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dbc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006e7c  08006e7c  00007e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800700c  0800700c  0000905c  2**0
                  CONTENTS
  4 .ARM          00000000  0800700c  0800700c  0000905c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800700c  0800700c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007010  08007010  00008010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007014  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08007070  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08007070  000092c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7e3  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b72  00000000  00000000  00014867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  000163e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000736  00000000  00000000  00016d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001421c  00000000  00000000  00017476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bff6  00000000  00000000  0002b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb6e  00000000  00000000  00037688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b61f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000b623c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000b8cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e64 	.word	0x08006e64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006e64 	.word	0x08006e64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fea3 	bl	8002174 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fde3 	bl	8002004 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fe95 	bl	8002174 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe8b 	bl	8002174 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe0d 	bl	800208c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe03 	bl	800208c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb55 	bl	8000b4c <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fad5 	bl	8000a5c <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb47 	bl	8000b4c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb3d 	bl	8000b4c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fae3 	bl	8000aac <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fad9 	bl	8000aac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fadd>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0243      	lsls	r3, r0, #9
 8000510:	0a5a      	lsrs	r2, r3, #9
 8000512:	024e      	lsls	r6, r1, #9
 8000514:	0045      	lsls	r5, r0, #1
 8000516:	0fc4      	lsrs	r4, r0, #31
 8000518:	0048      	lsls	r0, r1, #1
 800051a:	4691      	mov	r9, r2
 800051c:	0e2d      	lsrs	r5, r5, #24
 800051e:	0a72      	lsrs	r2, r6, #9
 8000520:	0e00      	lsrs	r0, r0, #24
 8000522:	4694      	mov	ip, r2
 8000524:	b580      	push	{r7, lr}
 8000526:	099b      	lsrs	r3, r3, #6
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	09b6      	lsrs	r6, r6, #6
 800052c:	1a2a      	subs	r2, r5, r0
 800052e:	428c      	cmp	r4, r1
 8000530:	d021      	beq.n	8000576 <__aeabi_fadd+0x6e>
 8000532:	2a00      	cmp	r2, #0
 8000534:	dd0d      	ble.n	8000552 <__aeabi_fadd+0x4a>
 8000536:	2800      	cmp	r0, #0
 8000538:	d12d      	bne.n	8000596 <__aeabi_fadd+0x8e>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x38>
 800053e:	e08d      	b.n	800065c <__aeabi_fadd+0x154>
 8000540:	1e51      	subs	r1, r2, #1
 8000542:	2a01      	cmp	r2, #1
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x40>
 8000546:	e11d      	b.n	8000784 <__aeabi_fadd+0x27c>
 8000548:	2aff      	cmp	r2, #255	@ 0xff
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0x46>
 800054c:	e0ab      	b.n	80006a6 <__aeabi_fadd+0x19e>
 800054e:	000a      	movs	r2, r1
 8000550:	e027      	b.n	80005a2 <__aeabi_fadd+0x9a>
 8000552:	2a00      	cmp	r2, #0
 8000554:	d04d      	beq.n	80005f2 <__aeabi_fadd+0xea>
 8000556:	1b42      	subs	r2, r0, r5
 8000558:	2d00      	cmp	r5, #0
 800055a:	d000      	beq.n	800055e <__aeabi_fadd+0x56>
 800055c:	e0cc      	b.n	80006f8 <__aeabi_fadd+0x1f0>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0x5c>
 8000562:	e079      	b.n	8000658 <__aeabi_fadd+0x150>
 8000564:	1e54      	subs	r4, r2, #1
 8000566:	2a01      	cmp	r2, #1
 8000568:	d100      	bne.n	800056c <__aeabi_fadd+0x64>
 800056a:	e128      	b.n	80007be <__aeabi_fadd+0x2b6>
 800056c:	2aff      	cmp	r2, #255	@ 0xff
 800056e:	d100      	bne.n	8000572 <__aeabi_fadd+0x6a>
 8000570:	e097      	b.n	80006a2 <__aeabi_fadd+0x19a>
 8000572:	0022      	movs	r2, r4
 8000574:	e0c5      	b.n	8000702 <__aeabi_fadd+0x1fa>
 8000576:	2a00      	cmp	r2, #0
 8000578:	dc00      	bgt.n	800057c <__aeabi_fadd+0x74>
 800057a:	e096      	b.n	80006aa <__aeabi_fadd+0x1a2>
 800057c:	2800      	cmp	r0, #0
 800057e:	d04f      	beq.n	8000620 <__aeabi_fadd+0x118>
 8000580:	2dff      	cmp	r5, #255	@ 0xff
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0x7e>
 8000584:	e08f      	b.n	80006a6 <__aeabi_fadd+0x19e>
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	04c9      	lsls	r1, r1, #19
 800058a:	430e      	orrs	r6, r1
 800058c:	2a1b      	cmp	r2, #27
 800058e:	dd51      	ble.n	8000634 <__aeabi_fadd+0x12c>
 8000590:	002a      	movs	r2, r5
 8000592:	3301      	adds	r3, #1
 8000594:	e018      	b.n	80005c8 <__aeabi_fadd+0xc0>
 8000596:	2dff      	cmp	r5, #255	@ 0xff
 8000598:	d100      	bne.n	800059c <__aeabi_fadd+0x94>
 800059a:	e084      	b.n	80006a6 <__aeabi_fadd+0x19e>
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	04c9      	lsls	r1, r1, #19
 80005a0:	430e      	orrs	r6, r1
 80005a2:	2101      	movs	r1, #1
 80005a4:	2a1b      	cmp	r2, #27
 80005a6:	dc08      	bgt.n	80005ba <__aeabi_fadd+0xb2>
 80005a8:	0031      	movs	r1, r6
 80005aa:	2020      	movs	r0, #32
 80005ac:	40d1      	lsrs	r1, r2
 80005ae:	1a82      	subs	r2, r0, r2
 80005b0:	4096      	lsls	r6, r2
 80005b2:	0032      	movs	r2, r6
 80005b4:	1e50      	subs	r0, r2, #1
 80005b6:	4182      	sbcs	r2, r0
 80005b8:	4311      	orrs	r1, r2
 80005ba:	1a5b      	subs	r3, r3, r1
 80005bc:	015a      	lsls	r2, r3, #5
 80005be:	d459      	bmi.n	8000674 <__aeabi_fadd+0x16c>
 80005c0:	2107      	movs	r1, #7
 80005c2:	002a      	movs	r2, r5
 80005c4:	4019      	ands	r1, r3
 80005c6:	d049      	beq.n	800065c <__aeabi_fadd+0x154>
 80005c8:	210f      	movs	r1, #15
 80005ca:	4019      	ands	r1, r3
 80005cc:	2904      	cmp	r1, #4
 80005ce:	d000      	beq.n	80005d2 <__aeabi_fadd+0xca>
 80005d0:	3304      	adds	r3, #4
 80005d2:	0159      	lsls	r1, r3, #5
 80005d4:	d542      	bpl.n	800065c <__aeabi_fadd+0x154>
 80005d6:	1c50      	adds	r0, r2, #1
 80005d8:	2afe      	cmp	r2, #254	@ 0xfe
 80005da:	d03a      	beq.n	8000652 <__aeabi_fadd+0x14a>
 80005dc:	019b      	lsls	r3, r3, #6
 80005de:	b2c0      	uxtb	r0, r0
 80005e0:	0a5b      	lsrs	r3, r3, #9
 80005e2:	05c0      	lsls	r0, r0, #23
 80005e4:	4318      	orrs	r0, r3
 80005e6:	07e4      	lsls	r4, r4, #31
 80005e8:	4320      	orrs	r0, r4
 80005ea:	bcc0      	pop	{r6, r7}
 80005ec:	46b9      	mov	r9, r7
 80005ee:	46b0      	mov	r8, r6
 80005f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f2:	20fe      	movs	r0, #254	@ 0xfe
 80005f4:	4680      	mov	r8, r0
 80005f6:	1c6f      	adds	r7, r5, #1
 80005f8:	0038      	movs	r0, r7
 80005fa:	4647      	mov	r7, r8
 80005fc:	4207      	tst	r7, r0
 80005fe:	d000      	beq.n	8000602 <__aeabi_fadd+0xfa>
 8000600:	e08e      	b.n	8000720 <__aeabi_fadd+0x218>
 8000602:	2d00      	cmp	r5, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_fadd+0x100>
 8000606:	e0b4      	b.n	8000772 <__aeabi_fadd+0x26a>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x106>
 800060c:	e0db      	b.n	80007c6 <__aeabi_fadd+0x2be>
 800060e:	2e00      	cmp	r6, #0
 8000610:	d06c      	beq.n	80006ec <__aeabi_fadd+0x1e4>
 8000612:	1b98      	subs	r0, r3, r6
 8000614:	0145      	lsls	r5, r0, #5
 8000616:	d400      	bmi.n	800061a <__aeabi_fadd+0x112>
 8000618:	e0f7      	b.n	800080a <__aeabi_fadd+0x302>
 800061a:	000c      	movs	r4, r1
 800061c:	1af3      	subs	r3, r6, r3
 800061e:	e03d      	b.n	800069c <__aeabi_fadd+0x194>
 8000620:	2e00      	cmp	r6, #0
 8000622:	d01b      	beq.n	800065c <__aeabi_fadd+0x154>
 8000624:	1e51      	subs	r1, r2, #1
 8000626:	2a01      	cmp	r2, #1
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x124>
 800062a:	e082      	b.n	8000732 <__aeabi_fadd+0x22a>
 800062c:	2aff      	cmp	r2, #255	@ 0xff
 800062e:	d03a      	beq.n	80006a6 <__aeabi_fadd+0x19e>
 8000630:	000a      	movs	r2, r1
 8000632:	e7ab      	b.n	800058c <__aeabi_fadd+0x84>
 8000634:	0031      	movs	r1, r6
 8000636:	2020      	movs	r0, #32
 8000638:	40d1      	lsrs	r1, r2
 800063a:	1a82      	subs	r2, r0, r2
 800063c:	4096      	lsls	r6, r2
 800063e:	0032      	movs	r2, r6
 8000640:	1e50      	subs	r0, r2, #1
 8000642:	4182      	sbcs	r2, r0
 8000644:	430a      	orrs	r2, r1
 8000646:	189b      	adds	r3, r3, r2
 8000648:	015a      	lsls	r2, r3, #5
 800064a:	d5b9      	bpl.n	80005c0 <__aeabi_fadd+0xb8>
 800064c:	1c6a      	adds	r2, r5, #1
 800064e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000650:	d175      	bne.n	800073e <__aeabi_fadd+0x236>
 8000652:	20ff      	movs	r0, #255	@ 0xff
 8000654:	2300      	movs	r3, #0
 8000656:	e7c4      	b.n	80005e2 <__aeabi_fadd+0xda>
 8000658:	000c      	movs	r4, r1
 800065a:	0033      	movs	r3, r6
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	2aff      	cmp	r2, #255	@ 0xff
 8000660:	d146      	bne.n	80006f0 <__aeabi_fadd+0x1e8>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f5      	beq.n	8000652 <__aeabi_fadd+0x14a>
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	03d2      	lsls	r2, r2, #15
 800066a:	4313      	orrs	r3, r2
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	20ff      	movs	r0, #255	@ 0xff
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	e7b6      	b.n	80005e2 <__aeabi_fadd+0xda>
 8000674:	019f      	lsls	r7, r3, #6
 8000676:	09bf      	lsrs	r7, r7, #6
 8000678:	0038      	movs	r0, r7
 800067a:	f002 fd6d 	bl	8003158 <__clzsi2>
 800067e:	3805      	subs	r0, #5
 8000680:	4087      	lsls	r7, r0
 8000682:	4285      	cmp	r5, r0
 8000684:	dc24      	bgt.n	80006d0 <__aeabi_fadd+0x1c8>
 8000686:	003b      	movs	r3, r7
 8000688:	2120      	movs	r1, #32
 800068a:	1b42      	subs	r2, r0, r5
 800068c:	3201      	adds	r2, #1
 800068e:	40d3      	lsrs	r3, r2
 8000690:	1a8a      	subs	r2, r1, r2
 8000692:	4097      	lsls	r7, r2
 8000694:	1e7a      	subs	r2, r7, #1
 8000696:	4197      	sbcs	r7, r2
 8000698:	2200      	movs	r2, #0
 800069a:	433b      	orrs	r3, r7
 800069c:	0759      	lsls	r1, r3, #29
 800069e:	d193      	bne.n	80005c8 <__aeabi_fadd+0xc0>
 80006a0:	e797      	b.n	80005d2 <__aeabi_fadd+0xca>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0033      	movs	r3, r6
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e7db      	b.n	8000662 <__aeabi_fadd+0x15a>
 80006aa:	2a00      	cmp	r2, #0
 80006ac:	d014      	beq.n	80006d8 <__aeabi_fadd+0x1d0>
 80006ae:	1b42      	subs	r2, r0, r5
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d14b      	bne.n	800074c <__aeabi_fadd+0x244>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d0      	beq.n	800065a <__aeabi_fadd+0x152>
 80006b8:	1e51      	subs	r1, r2, #1
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x1b8>
 80006be:	e09e      	b.n	80007fe <__aeabi_fadd+0x2f6>
 80006c0:	2aff      	cmp	r2, #255	@ 0xff
 80006c2:	d0ef      	beq.n	80006a4 <__aeabi_fadd+0x19c>
 80006c4:	000a      	movs	r2, r1
 80006c6:	2a1b      	cmp	r2, #27
 80006c8:	dd5f      	ble.n	800078a <__aeabi_fadd+0x282>
 80006ca:	0002      	movs	r2, r0
 80006cc:	1c73      	adds	r3, r6, #1
 80006ce:	e77b      	b.n	80005c8 <__aeabi_fadd+0xc0>
 80006d0:	4b50      	ldr	r3, [pc, #320]	@ (8000814 <__aeabi_fadd+0x30c>)
 80006d2:	1a2a      	subs	r2, r5, r0
 80006d4:	403b      	ands	r3, r7
 80006d6:	e7e1      	b.n	800069c <__aeabi_fadd+0x194>
 80006d8:	21fe      	movs	r1, #254	@ 0xfe
 80006da:	1c6a      	adds	r2, r5, #1
 80006dc:	4211      	tst	r1, r2
 80006de:	d13b      	bne.n	8000758 <__aeabi_fadd+0x250>
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d15d      	bne.n	80007a0 <__aeabi_fadd+0x298>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d07f      	beq.n	80007e8 <__aeabi_fadd+0x2e0>
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d17f      	bne.n	80007ec <__aeabi_fadd+0x2e4>
 80006ec:	2200      	movs	r2, #0
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	b2d0      	uxtb	r0, r2
 80006f6:	e774      	b.n	80005e2 <__aeabi_fadd+0xda>
 80006f8:	28ff      	cmp	r0, #255	@ 0xff
 80006fa:	d0d2      	beq.n	80006a2 <__aeabi_fadd+0x19a>
 80006fc:	2480      	movs	r4, #128	@ 0x80
 80006fe:	04e4      	lsls	r4, r4, #19
 8000700:	4323      	orrs	r3, r4
 8000702:	2401      	movs	r4, #1
 8000704:	2a1b      	cmp	r2, #27
 8000706:	dc07      	bgt.n	8000718 <__aeabi_fadd+0x210>
 8000708:	001c      	movs	r4, r3
 800070a:	2520      	movs	r5, #32
 800070c:	40d4      	lsrs	r4, r2
 800070e:	1aaa      	subs	r2, r5, r2
 8000710:	4093      	lsls	r3, r2
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4193      	sbcs	r3, r2
 8000716:	431c      	orrs	r4, r3
 8000718:	1b33      	subs	r3, r6, r4
 800071a:	0005      	movs	r5, r0
 800071c:	000c      	movs	r4, r1
 800071e:	e74d      	b.n	80005bc <__aeabi_fadd+0xb4>
 8000720:	1b9f      	subs	r7, r3, r6
 8000722:	017a      	lsls	r2, r7, #5
 8000724:	d422      	bmi.n	800076c <__aeabi_fadd+0x264>
 8000726:	2f00      	cmp	r7, #0
 8000728:	d1a6      	bne.n	8000678 <__aeabi_fadd+0x170>
 800072a:	2400      	movs	r4, #0
 800072c:	2000      	movs	r0, #0
 800072e:	2300      	movs	r3, #0
 8000730:	e757      	b.n	80005e2 <__aeabi_fadd+0xda>
 8000732:	199b      	adds	r3, r3, r6
 8000734:	2501      	movs	r5, #1
 8000736:	3201      	adds	r2, #1
 8000738:	0159      	lsls	r1, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x236>
 800073c:	e740      	b.n	80005c0 <__aeabi_fadd+0xb8>
 800073e:	2101      	movs	r1, #1
 8000740:	4835      	ldr	r0, [pc, #212]	@ (8000818 <__aeabi_fadd+0x310>)
 8000742:	4019      	ands	r1, r3
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	4003      	ands	r3, r0
 8000748:	430b      	orrs	r3, r1
 800074a:	e7a7      	b.n	800069c <__aeabi_fadd+0x194>
 800074c:	28ff      	cmp	r0, #255	@ 0xff
 800074e:	d0a9      	beq.n	80006a4 <__aeabi_fadd+0x19c>
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	04c9      	lsls	r1, r1, #19
 8000754:	430b      	orrs	r3, r1
 8000756:	e7b6      	b.n	80006c6 <__aeabi_fadd+0x1be>
 8000758:	2aff      	cmp	r2, #255	@ 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x256>
 800075c:	e779      	b.n	8000652 <__aeabi_fadd+0x14a>
 800075e:	199b      	adds	r3, r3, r6
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	0759      	lsls	r1, r3, #29
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x260>
 8000766:	e72f      	b.n	80005c8 <__aeabi_fadd+0xc0>
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	e7c1      	b.n	80006f0 <__aeabi_fadd+0x1e8>
 800076c:	000c      	movs	r4, r1
 800076e:	1af7      	subs	r7, r6, r3
 8000770:	e782      	b.n	8000678 <__aeabi_fadd+0x170>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d12c      	bne.n	80007d0 <__aeabi_fadd+0x2c8>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d193      	bne.n	80006a2 <__aeabi_fadd+0x19a>
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	2400      	movs	r4, #0
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	03db      	lsls	r3, r3, #15
 8000782:	e72e      	b.n	80005e2 <__aeabi_fadd+0xda>
 8000784:	2501      	movs	r5, #1
 8000786:	1b9b      	subs	r3, r3, r6
 8000788:	e718      	b.n	80005bc <__aeabi_fadd+0xb4>
 800078a:	0019      	movs	r1, r3
 800078c:	2520      	movs	r5, #32
 800078e:	40d1      	lsrs	r1, r2
 8000790:	1aaa      	subs	r2, r5, r2
 8000792:	4093      	lsls	r3, r2
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	4193      	sbcs	r3, r2
 8000798:	430b      	orrs	r3, r1
 800079a:	0005      	movs	r5, r0
 800079c:	199b      	adds	r3, r3, r6
 800079e:	e753      	b.n	8000648 <__aeabi_fadd+0x140>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_fadd+0x29e>
 80007a4:	e77e      	b.n	80006a4 <__aeabi_fadd+0x19c>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x2a4>
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fadd+0x19e>
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	03d2      	lsls	r2, r2, #15
 80007b0:	4591      	cmp	r9, r2
 80007b2:	d302      	bcc.n	80007ba <__aeabi_fadd+0x2b2>
 80007b4:	4594      	cmp	ip, r2
 80007b6:	d200      	bcs.n	80007ba <__aeabi_fadd+0x2b2>
 80007b8:	0033      	movs	r3, r6
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	e753      	b.n	8000666 <__aeabi_fadd+0x15e>
 80007be:	000c      	movs	r4, r1
 80007c0:	1af3      	subs	r3, r6, r3
 80007c2:	3501      	adds	r5, #1
 80007c4:	e6fa      	b.n	80005bc <__aeabi_fadd+0xb4>
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d0af      	beq.n	800072a <__aeabi_fadd+0x222>
 80007ca:	000c      	movs	r4, r1
 80007cc:	0033      	movs	r3, r6
 80007ce:	e78d      	b.n	80006ec <__aeabi_fadd+0x1e4>
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0x2ce>
 80007d4:	e767      	b.n	80006a6 <__aeabi_fadd+0x19e>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	03d2      	lsls	r2, r2, #15
 80007da:	4591      	cmp	r9, r2
 80007dc:	d3ed      	bcc.n	80007ba <__aeabi_fadd+0x2b2>
 80007de:	4594      	cmp	ip, r2
 80007e0:	d2eb      	bcs.n	80007ba <__aeabi_fadd+0x2b2>
 80007e2:	000c      	movs	r4, r1
 80007e4:	0033      	movs	r3, r6
 80007e6:	e7e8      	b.n	80007ba <__aeabi_fadd+0x2b2>
 80007e8:	0033      	movs	r3, r6
 80007ea:	e77f      	b.n	80006ec <__aeabi_fadd+0x1e4>
 80007ec:	199b      	adds	r3, r3, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	0159      	lsls	r1, r3, #5
 80007f2:	d5b9      	bpl.n	8000768 <__aeabi_fadd+0x260>
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <__aeabi_fadd+0x30c>)
 80007f6:	4013      	ands	r3, r2
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	2201      	movs	r2, #1
 80007fc:	e778      	b.n	80006f0 <__aeabi_fadd+0x1e8>
 80007fe:	199b      	adds	r3, r3, r6
 8000800:	3201      	adds	r2, #1
 8000802:	3501      	adds	r5, #1
 8000804:	0159      	lsls	r1, r3, #5
 8000806:	d49a      	bmi.n	800073e <__aeabi_fadd+0x236>
 8000808:	e6da      	b.n	80005c0 <__aeabi_fadd+0xb8>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d08d      	beq.n	800072a <__aeabi_fadd+0x222>
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	e76e      	b.n	80006f0 <__aeabi_fadd+0x1e8>
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	fbffffff 	.word	0xfbffffff
 8000818:	7dffffff 	.word	0x7dffffff

0800081c <__aeabi_fdiv>:
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	464f      	mov	r7, r9
 8000820:	4646      	mov	r6, r8
 8000822:	46d6      	mov	lr, sl
 8000824:	0244      	lsls	r4, r0, #9
 8000826:	b5c0      	push	{r6, r7, lr}
 8000828:	0047      	lsls	r7, r0, #1
 800082a:	1c0e      	adds	r6, r1, #0
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	0e3f      	lsrs	r7, r7, #24
 8000830:	0fc5      	lsrs	r5, r0, #31
 8000832:	2f00      	cmp	r7, #0
 8000834:	d03c      	beq.n	80008b0 <__aeabi_fdiv+0x94>
 8000836:	2fff      	cmp	r7, #255	@ 0xff
 8000838:	d042      	beq.n	80008c0 <__aeabi_fdiv+0xa4>
 800083a:	2300      	movs	r3, #0
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	4699      	mov	r9, r3
 8000840:	469a      	mov	sl, r3
 8000842:	00e4      	lsls	r4, r4, #3
 8000844:	04d2      	lsls	r2, r2, #19
 8000846:	4314      	orrs	r4, r2
 8000848:	3f7f      	subs	r7, #127	@ 0x7f
 800084a:	0273      	lsls	r3, r6, #9
 800084c:	0a5b      	lsrs	r3, r3, #9
 800084e:	4698      	mov	r8, r3
 8000850:	0073      	lsls	r3, r6, #1
 8000852:	0e1b      	lsrs	r3, r3, #24
 8000854:	0ff6      	lsrs	r6, r6, #31
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01b      	beq.n	8000892 <__aeabi_fdiv+0x76>
 800085a:	2bff      	cmp	r3, #255	@ 0xff
 800085c:	d013      	beq.n	8000886 <__aeabi_fdiv+0x6a>
 800085e:	4642      	mov	r2, r8
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	04c9      	lsls	r1, r1, #19
 8000866:	4311      	orrs	r1, r2
 8000868:	4688      	mov	r8, r1
 800086a:	2000      	movs	r0, #0
 800086c:	3b7f      	subs	r3, #127	@ 0x7f
 800086e:	0029      	movs	r1, r5
 8000870:	1aff      	subs	r7, r7, r3
 8000872:	464b      	mov	r3, r9
 8000874:	4071      	eors	r1, r6
 8000876:	b2c9      	uxtb	r1, r1
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d900      	bls.n	800087e <__aeabi_fdiv+0x62>
 800087c:	e0b5      	b.n	80009ea <__aeabi_fdiv+0x1ce>
 800087e:	4a74      	ldr	r2, [pc, #464]	@ (8000a50 <__aeabi_fdiv+0x234>)
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	58d3      	ldr	r3, [r2, r3]
 8000884:	469f      	mov	pc, r3
 8000886:	4643      	mov	r3, r8
 8000888:	2b00      	cmp	r3, #0
 800088a:	d13f      	bne.n	800090c <__aeabi_fdiv+0xf0>
 800088c:	3fff      	subs	r7, #255	@ 0xff
 800088e:	3302      	adds	r3, #2
 8000890:	e003      	b.n	800089a <__aeabi_fdiv+0x7e>
 8000892:	4643      	mov	r3, r8
 8000894:	2b00      	cmp	r3, #0
 8000896:	d12d      	bne.n	80008f4 <__aeabi_fdiv+0xd8>
 8000898:	2301      	movs	r3, #1
 800089a:	0029      	movs	r1, r5
 800089c:	464a      	mov	r2, r9
 800089e:	4071      	eors	r1, r6
 80008a0:	b2c9      	uxtb	r1, r1
 80008a2:	431a      	orrs	r2, r3
 80008a4:	2a0e      	cmp	r2, #14
 80008a6:	d838      	bhi.n	800091a <__aeabi_fdiv+0xfe>
 80008a8:	486a      	ldr	r0, [pc, #424]	@ (8000a54 <__aeabi_fdiv+0x238>)
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	5882      	ldr	r2, [r0, r2]
 80008ae:	4697      	mov	pc, r2
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d113      	bne.n	80008dc <__aeabi_fdiv+0xc0>
 80008b4:	2304      	movs	r3, #4
 80008b6:	4699      	mov	r9, r3
 80008b8:	3b03      	subs	r3, #3
 80008ba:	2700      	movs	r7, #0
 80008bc:	469a      	mov	sl, r3
 80008be:	e7c4      	b.n	800084a <__aeabi_fdiv+0x2e>
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d105      	bne.n	80008d0 <__aeabi_fdiv+0xb4>
 80008c4:	2308      	movs	r3, #8
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b06      	subs	r3, #6
 80008ca:	27ff      	movs	r7, #255	@ 0xff
 80008cc:	469a      	mov	sl, r3
 80008ce:	e7bc      	b.n	800084a <__aeabi_fdiv+0x2e>
 80008d0:	230c      	movs	r3, #12
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b09      	subs	r3, #9
 80008d6:	27ff      	movs	r7, #255	@ 0xff
 80008d8:	469a      	mov	sl, r3
 80008da:	e7b6      	b.n	800084a <__aeabi_fdiv+0x2e>
 80008dc:	0020      	movs	r0, r4
 80008de:	f002 fc3b 	bl	8003158 <__clzsi2>
 80008e2:	2776      	movs	r7, #118	@ 0x76
 80008e4:	1f43      	subs	r3, r0, #5
 80008e6:	409c      	lsls	r4, r3
 80008e8:	2300      	movs	r3, #0
 80008ea:	427f      	negs	r7, r7
 80008ec:	4699      	mov	r9, r3
 80008ee:	469a      	mov	sl, r3
 80008f0:	1a3f      	subs	r7, r7, r0
 80008f2:	e7aa      	b.n	800084a <__aeabi_fdiv+0x2e>
 80008f4:	4640      	mov	r0, r8
 80008f6:	f002 fc2f 	bl	8003158 <__clzsi2>
 80008fa:	4642      	mov	r2, r8
 80008fc:	1f43      	subs	r3, r0, #5
 80008fe:	409a      	lsls	r2, r3
 8000900:	2376      	movs	r3, #118	@ 0x76
 8000902:	425b      	negs	r3, r3
 8000904:	1a1b      	subs	r3, r3, r0
 8000906:	4690      	mov	r8, r2
 8000908:	2000      	movs	r0, #0
 800090a:	e7b0      	b.n	800086e <__aeabi_fdiv+0x52>
 800090c:	2303      	movs	r3, #3
 800090e:	464a      	mov	r2, r9
 8000910:	431a      	orrs	r2, r3
 8000912:	4691      	mov	r9, r2
 8000914:	2003      	movs	r0, #3
 8000916:	33fc      	adds	r3, #252	@ 0xfc
 8000918:	e7a9      	b.n	800086e <__aeabi_fdiv+0x52>
 800091a:	000d      	movs	r5, r1
 800091c:	20ff      	movs	r0, #255	@ 0xff
 800091e:	2200      	movs	r2, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	07ed      	lsls	r5, r5, #31
 8000924:	4310      	orrs	r0, r2
 8000926:	4328      	orrs	r0, r5
 8000928:	bce0      	pop	{r5, r6, r7}
 800092a:	46ba      	mov	sl, r7
 800092c:	46b1      	mov	r9, r6
 800092e:	46a8      	mov	r8, r5
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	000d      	movs	r5, r1
 8000934:	2000      	movs	r0, #0
 8000936:	2200      	movs	r2, #0
 8000938:	e7f2      	b.n	8000920 <__aeabi_fdiv+0x104>
 800093a:	4653      	mov	r3, sl
 800093c:	2b02      	cmp	r3, #2
 800093e:	d0ed      	beq.n	800091c <__aeabi_fdiv+0x100>
 8000940:	2b03      	cmp	r3, #3
 8000942:	d033      	beq.n	80009ac <__aeabi_fdiv+0x190>
 8000944:	46a0      	mov	r8, r4
 8000946:	2b01      	cmp	r3, #1
 8000948:	d105      	bne.n	8000956 <__aeabi_fdiv+0x13a>
 800094a:	2000      	movs	r0, #0
 800094c:	2200      	movs	r2, #0
 800094e:	e7e7      	b.n	8000920 <__aeabi_fdiv+0x104>
 8000950:	0035      	movs	r5, r6
 8000952:	2803      	cmp	r0, #3
 8000954:	d07a      	beq.n	8000a4c <__aeabi_fdiv+0x230>
 8000956:	003b      	movs	r3, r7
 8000958:	337f      	adds	r3, #127	@ 0x7f
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd2d      	ble.n	80009ba <__aeabi_fdiv+0x19e>
 800095e:	4642      	mov	r2, r8
 8000960:	0752      	lsls	r2, r2, #29
 8000962:	d007      	beq.n	8000974 <__aeabi_fdiv+0x158>
 8000964:	220f      	movs	r2, #15
 8000966:	4641      	mov	r1, r8
 8000968:	400a      	ands	r2, r1
 800096a:	2a04      	cmp	r2, #4
 800096c:	d002      	beq.n	8000974 <__aeabi_fdiv+0x158>
 800096e:	2204      	movs	r2, #4
 8000970:	4694      	mov	ip, r2
 8000972:	44e0      	add	r8, ip
 8000974:	4642      	mov	r2, r8
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	d505      	bpl.n	8000986 <__aeabi_fdiv+0x16a>
 800097a:	4642      	mov	r2, r8
 800097c:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <__aeabi_fdiv+0x23c>)
 800097e:	401a      	ands	r2, r3
 8000980:	003b      	movs	r3, r7
 8000982:	4690      	mov	r8, r2
 8000984:	3380      	adds	r3, #128	@ 0x80
 8000986:	2bfe      	cmp	r3, #254	@ 0xfe
 8000988:	dcc8      	bgt.n	800091c <__aeabi_fdiv+0x100>
 800098a:	4642      	mov	r2, r8
 800098c:	0192      	lsls	r2, r2, #6
 800098e:	0a52      	lsrs	r2, r2, #9
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	e7c5      	b.n	8000920 <__aeabi_fdiv+0x104>
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	2500      	movs	r5, #0
 8000998:	20ff      	movs	r0, #255	@ 0xff
 800099a:	03d2      	lsls	r2, r2, #15
 800099c:	e7c0      	b.n	8000920 <__aeabi_fdiv+0x104>
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
 80009a2:	4214      	tst	r4, r2
 80009a4:	d002      	beq.n	80009ac <__aeabi_fdiv+0x190>
 80009a6:	4643      	mov	r3, r8
 80009a8:	4213      	tst	r3, r2
 80009aa:	d049      	beq.n	8000a40 <__aeabi_fdiv+0x224>
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	03d2      	lsls	r2, r2, #15
 80009b0:	4322      	orrs	r2, r4
 80009b2:	0252      	lsls	r2, r2, #9
 80009b4:	20ff      	movs	r0, #255	@ 0xff
 80009b6:	0a52      	lsrs	r2, r2, #9
 80009b8:	e7b2      	b.n	8000920 <__aeabi_fdiv+0x104>
 80009ba:	2201      	movs	r2, #1
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b1b      	cmp	r3, #27
 80009c0:	dcc3      	bgt.n	800094a <__aeabi_fdiv+0x12e>
 80009c2:	4642      	mov	r2, r8
 80009c4:	40da      	lsrs	r2, r3
 80009c6:	4643      	mov	r3, r8
 80009c8:	379e      	adds	r7, #158	@ 0x9e
 80009ca:	40bb      	lsls	r3, r7
 80009cc:	1e59      	subs	r1, r3, #1
 80009ce:	418b      	sbcs	r3, r1
 80009d0:	431a      	orrs	r2, r3
 80009d2:	0753      	lsls	r3, r2, #29
 80009d4:	d004      	beq.n	80009e0 <__aeabi_fdiv+0x1c4>
 80009d6:	230f      	movs	r3, #15
 80009d8:	4013      	ands	r3, r2
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fdiv+0x1c4>
 80009de:	3204      	adds	r2, #4
 80009e0:	0153      	lsls	r3, r2, #5
 80009e2:	d529      	bpl.n	8000a38 <__aeabi_fdiv+0x21c>
 80009e4:	2001      	movs	r0, #1
 80009e6:	2200      	movs	r2, #0
 80009e8:	e79a      	b.n	8000920 <__aeabi_fdiv+0x104>
 80009ea:	4642      	mov	r2, r8
 80009ec:	0163      	lsls	r3, r4, #5
 80009ee:	0155      	lsls	r5, r2, #5
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	d215      	bcs.n	8000a20 <__aeabi_fdiv+0x204>
 80009f4:	201b      	movs	r0, #27
 80009f6:	2200      	movs	r2, #0
 80009f8:	3f01      	subs	r7, #1
 80009fa:	2601      	movs	r6, #1
 80009fc:	001c      	movs	r4, r3
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	db01      	blt.n	8000a0a <__aeabi_fdiv+0x1ee>
 8000a06:	429d      	cmp	r5, r3
 8000a08:	d801      	bhi.n	8000a0e <__aeabi_fdiv+0x1f2>
 8000a0a:	1b5b      	subs	r3, r3, r5
 8000a0c:	4332      	orrs	r2, r6
 8000a0e:	3801      	subs	r0, #1
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d1f3      	bne.n	80009fc <__aeabi_fdiv+0x1e0>
 8000a14:	1e58      	subs	r0, r3, #1
 8000a16:	4183      	sbcs	r3, r0
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	000d      	movs	r5, r1
 8000a1e:	e79a      	b.n	8000956 <__aeabi_fdiv+0x13a>
 8000a20:	201a      	movs	r0, #26
 8000a22:	2201      	movs	r2, #1
 8000a24:	1b5b      	subs	r3, r3, r5
 8000a26:	e7e8      	b.n	80009fa <__aeabi_fdiv+0x1de>
 8000a28:	3b02      	subs	r3, #2
 8000a2a:	425a      	negs	r2, r3
 8000a2c:	4153      	adcs	r3, r2
 8000a2e:	425b      	negs	r3, r3
 8000a30:	0035      	movs	r5, r6
 8000a32:	2200      	movs	r2, #0
 8000a34:	b2d8      	uxtb	r0, r3
 8000a36:	e773      	b.n	8000920 <__aeabi_fdiv+0x104>
 8000a38:	0192      	lsls	r2, r2, #6
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	0a52      	lsrs	r2, r2, #9
 8000a3e:	e76f      	b.n	8000920 <__aeabi_fdiv+0x104>
 8000a40:	431a      	orrs	r2, r3
 8000a42:	0252      	lsls	r2, r2, #9
 8000a44:	0035      	movs	r5, r6
 8000a46:	20ff      	movs	r0, #255	@ 0xff
 8000a48:	0a52      	lsrs	r2, r2, #9
 8000a4a:	e769      	b.n	8000920 <__aeabi_fdiv+0x104>
 8000a4c:	4644      	mov	r4, r8
 8000a4e:	e7ad      	b.n	80009ac <__aeabi_fdiv+0x190>
 8000a50:	08006e94 	.word	0x08006e94
 8000a54:	08006ed4 	.word	0x08006ed4
 8000a58:	f7ffffff 	.word	0xf7ffffff

08000a5c <__eqsf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	024e      	lsls	r6, r1, #9
 8000a62:	004c      	lsls	r4, r1, #1
 8000a64:	0245      	lsls	r5, r0, #9
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	0e12      	lsrs	r2, r2, #24
 8000a6a:	0fc3      	lsrs	r3, r0, #31
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc9      	lsrs	r1, r1, #31
 8000a72:	2aff      	cmp	r2, #255	@ 0xff
 8000a74:	d010      	beq.n	8000a98 <__eqsf2+0x3c>
 8000a76:	2cff      	cmp	r4, #255	@ 0xff
 8000a78:	d00c      	beq.n	8000a94 <__eqsf2+0x38>
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	42a2      	cmp	r2, r4
 8000a7e:	d10a      	bne.n	8000a96 <__eqsf2+0x3a>
 8000a80:	42b5      	cmp	r5, r6
 8000a82:	d108      	bne.n	8000a96 <__eqsf2+0x3a>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d00f      	beq.n	8000aa8 <__eqsf2+0x4c>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d104      	bne.n	8000a96 <__eqsf2+0x3a>
 8000a8c:	0028      	movs	r0, r5
 8000a8e:	1e43      	subs	r3, r0, #1
 8000a90:	4198      	sbcs	r0, r3
 8000a92:	e000      	b.n	8000a96 <__eqsf2+0x3a>
 8000a94:	2001      	movs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2001      	movs	r0, #1
 8000a9a:	2cff      	cmp	r4, #255	@ 0xff
 8000a9c:	d1fb      	bne.n	8000a96 <__eqsf2+0x3a>
 8000a9e:	4335      	orrs	r5, r6
 8000aa0:	d1f9      	bne.n	8000a96 <__eqsf2+0x3a>
 8000aa2:	404b      	eors	r3, r1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	e7f6      	b.n	8000a96 <__eqsf2+0x3a>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7f4      	b.n	8000a96 <__eqsf2+0x3a>

08000aac <__gesf2>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0244      	lsls	r4, r0, #9
 8000ab2:	024d      	lsls	r5, r1, #9
 8000ab4:	0fc3      	lsrs	r3, r0, #31
 8000ab6:	0048      	lsls	r0, r1, #1
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e00      	lsrs	r0, r0, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d019      	beq.n	8000afa <__gesf2+0x4e>
 8000ac6:	28ff      	cmp	r0, #255	@ 0xff
 8000ac8:	d00b      	beq.n	8000ae2 <__gesf2+0x36>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d11e      	bne.n	8000b0c <__gesf2+0x60>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d10b      	bne.n	8000aea <__gesf2+0x3e>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d027      	beq.n	8000b26 <__gesf2+0x7a>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d134      	bne.n	8000b44 <__gesf2+0x98>
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d02f      	beq.n	8000b3e <__gesf2+0x92>
 8000ade:	0008      	movs	r0, r1
 8000ae0:	bd30      	pop	{r4, r5, pc}
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d128      	bne.n	8000b38 <__gesf2+0x8c>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d101      	bne.n	8000aee <__gesf2+0x42>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d0f5      	beq.n	8000ada <__gesf2+0x2e>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d107      	bne.n	8000b02 <__gesf2+0x56>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d023      	beq.n	8000b3e <__gesf2+0x92>
 8000af6:	0018      	movs	r0, r3
 8000af8:	e7f2      	b.n	8000ae0 <__gesf2+0x34>
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d11c      	bne.n	8000b38 <__gesf2+0x8c>
 8000afe:	28ff      	cmp	r0, #255	@ 0xff
 8000b00:	d014      	beq.n	8000b2c <__gesf2+0x80>
 8000b02:	1e58      	subs	r0, r3, #1
 8000b04:	2302      	movs	r3, #2
 8000b06:	4018      	ands	r0, r3
 8000b08:	3801      	subs	r0, #1
 8000b0a:	e7e9      	b.n	8000ae0 <__gesf2+0x34>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d0f8      	beq.n	8000b02 <__gesf2+0x56>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1f6      	bne.n	8000b02 <__gesf2+0x56>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	dcf4      	bgt.n	8000b02 <__gesf2+0x56>
 8000b18:	dbeb      	blt.n	8000af2 <__gesf2+0x46>
 8000b1a:	42ac      	cmp	r4, r5
 8000b1c:	d8f1      	bhi.n	8000b02 <__gesf2+0x56>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	42ac      	cmp	r4, r5
 8000b22:	d2dd      	bcs.n	8000ae0 <__gesf2+0x34>
 8000b24:	e7e5      	b.n	8000af2 <__gesf2+0x46>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d0da      	beq.n	8000ae0 <__gesf2+0x34>
 8000b2a:	e7ea      	b.n	8000b02 <__gesf2+0x56>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d103      	bne.n	8000b38 <__gesf2+0x8c>
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d1e6      	bne.n	8000b02 <__gesf2+0x56>
 8000b34:	2000      	movs	r0, #0
 8000b36:	e7d3      	b.n	8000ae0 <__gesf2+0x34>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7d0      	b.n	8000ae0 <__gesf2+0x34>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	4240      	negs	r0, r0
 8000b42:	e7cd      	b.n	8000ae0 <__gesf2+0x34>
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d0e8      	beq.n	8000b1a <__gesf2+0x6e>
 8000b48:	e7db      	b.n	8000b02 <__gesf2+0x56>
 8000b4a:	46c0      	nop			@ (mov r8, r8)

08000b4c <__lesf2>:
 8000b4c:	b530      	push	{r4, r5, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0244      	lsls	r4, r0, #9
 8000b52:	024d      	lsls	r5, r1, #9
 8000b54:	0fc3      	lsrs	r3, r0, #31
 8000b56:	0048      	lsls	r0, r1, #1
 8000b58:	0a64      	lsrs	r4, r4, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a6d      	lsrs	r5, r5, #9
 8000b5e:	0e00      	lsrs	r0, r0, #24
 8000b60:	0fc9      	lsrs	r1, r1, #31
 8000b62:	2aff      	cmp	r2, #255	@ 0xff
 8000b64:	d01a      	beq.n	8000b9c <__lesf2+0x50>
 8000b66:	28ff      	cmp	r0, #255	@ 0xff
 8000b68:	d00e      	beq.n	8000b88 <__lesf2+0x3c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11e      	bne.n	8000bac <__lesf2+0x60>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d10e      	bne.n	8000b90 <__lesf2+0x44>
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d02a      	beq.n	8000bcc <__lesf2+0x80>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d00c      	beq.n	8000b94 <__lesf2+0x48>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d01d      	beq.n	8000bba <__lesf2+0x6e>
 8000b7e:	1e58      	subs	r0, r3, #1
 8000b80:	2302      	movs	r3, #2
 8000b82:	4018      	ands	r0, r3
 8000b84:	3801      	subs	r0, #1
 8000b86:	e010      	b.n	8000baa <__lesf2+0x5e>
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d10d      	bne.n	8000ba8 <__lesf2+0x5c>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d120      	bne.n	8000bd2 <__lesf2+0x86>
 8000b90:	2c00      	cmp	r4, #0
 8000b92:	d11e      	bne.n	8000bd2 <__lesf2+0x86>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d023      	beq.n	8000be0 <__lesf2+0x94>
 8000b98:	0008      	movs	r0, r1
 8000b9a:	e006      	b.n	8000baa <__lesf2+0x5e>
 8000b9c:	2c00      	cmp	r4, #0
 8000b9e:	d103      	bne.n	8000ba8 <__lesf2+0x5c>
 8000ba0:	28ff      	cmp	r0, #255	@ 0xff
 8000ba2:	d1ec      	bne.n	8000b7e <__lesf2+0x32>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d017      	beq.n	8000bd8 <__lesf2+0x8c>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	bd30      	pop	{r4, r5, pc}
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d0e6      	beq.n	8000b7e <__lesf2+0x32>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d1e4      	bne.n	8000b7e <__lesf2+0x32>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	dce2      	bgt.n	8000b7e <__lesf2+0x32>
 8000bb8:	db04      	blt.n	8000bc4 <__lesf2+0x78>
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	d8df      	bhi.n	8000b7e <__lesf2+0x32>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	42ac      	cmp	r4, r5
 8000bc2:	d2f2      	bcs.n	8000baa <__lesf2+0x5e>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00b      	beq.n	8000be0 <__lesf2+0x94>
 8000bc8:	0018      	movs	r0, r3
 8000bca:	e7ee      	b.n	8000baa <__lesf2+0x5e>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d0ec      	beq.n	8000baa <__lesf2+0x5e>
 8000bd0:	e7d5      	b.n	8000b7e <__lesf2+0x32>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d1d3      	bne.n	8000b7e <__lesf2+0x32>
 8000bd6:	e7f5      	b.n	8000bc4 <__lesf2+0x78>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d0e5      	beq.n	8000baa <__lesf2+0x5e>
 8000bde:	e7ce      	b.n	8000b7e <__lesf2+0x32>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7e1      	b.n	8000baa <__lesf2+0x5e>
 8000be6:	46c0      	nop			@ (mov r8, r8)

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0243      	lsls	r3, r0, #9
 8000bf2:	0a5b      	lsrs	r3, r3, #9
 8000bf4:	0045      	lsls	r5, r0, #1
 8000bf6:	b5c0      	push	{r6, r7, lr}
 8000bf8:	4699      	mov	r9, r3
 8000bfa:	1c0f      	adds	r7, r1, #0
 8000bfc:	0e2d      	lsrs	r5, r5, #24
 8000bfe:	0fc6      	lsrs	r6, r0, #31
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fmul+0x1e>
 8000c04:	e088      	b.n	8000d18 <__aeabi_fmul+0x130>
 8000c06:	2dff      	cmp	r5, #255	@ 0xff
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fmul+0x24>
 8000c0a:	e08d      	b.n	8000d28 <__aeabi_fmul+0x140>
 8000c0c:	2280      	movs	r2, #128	@ 0x80
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	04d2      	lsls	r2, r2, #19
 8000c12:	431a      	orrs	r2, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	4691      	mov	r9, r2
 8000c18:	4698      	mov	r8, r3
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	3d7f      	subs	r5, #127	@ 0x7f
 8000c1e:	027c      	lsls	r4, r7, #9
 8000c20:	007b      	lsls	r3, r7, #1
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	0e1b      	lsrs	r3, r3, #24
 8000c26:	0fff      	lsrs	r7, r7, #31
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d068      	beq.n	8000cfe <__aeabi_fmul+0x116>
 8000c2c:	2bff      	cmp	r3, #255	@ 0xff
 8000c2e:	d021      	beq.n	8000c74 <__aeabi_fmul+0x8c>
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	00e4      	lsls	r4, r4, #3
 8000c34:	04d2      	lsls	r2, r2, #19
 8000c36:	4314      	orrs	r4, r2
 8000c38:	4642      	mov	r2, r8
 8000c3a:	3b7f      	subs	r3, #127	@ 0x7f
 8000c3c:	195b      	adds	r3, r3, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	1c5d      	adds	r5, r3, #1
 8000c42:	2a0a      	cmp	r2, #10
 8000c44:	dc2e      	bgt.n	8000ca4 <__aeabi_fmul+0xbc>
 8000c46:	407e      	eors	r6, r7
 8000c48:	4642      	mov	r2, r8
 8000c4a:	2a02      	cmp	r2, #2
 8000c4c:	dc23      	bgt.n	8000c96 <__aeabi_fmul+0xae>
 8000c4e:	3a01      	subs	r2, #1
 8000c50:	2a01      	cmp	r2, #1
 8000c52:	d900      	bls.n	8000c56 <__aeabi_fmul+0x6e>
 8000c54:	e0bd      	b.n	8000dd2 <__aeabi_fmul+0x1ea>
 8000c56:	2902      	cmp	r1, #2
 8000c58:	d06e      	beq.n	8000d38 <__aeabi_fmul+0x150>
 8000c5a:	2901      	cmp	r1, #1
 8000c5c:	d12c      	bne.n	8000cb8 <__aeabi_fmul+0xd0>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	05c0      	lsls	r0, r0, #23
 8000c64:	07f6      	lsls	r6, r6, #31
 8000c66:	4310      	orrs	r0, r2
 8000c68:	4330      	orrs	r0, r6
 8000c6a:	bce0      	pop	{r5, r6, r7}
 8000c6c:	46ba      	mov	sl, r7
 8000c6e:	46b1      	mov	r9, r6
 8000c70:	46a8      	mov	r8, r5
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c74:	002b      	movs	r3, r5
 8000c76:	33ff      	adds	r3, #255	@ 0xff
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d065      	beq.n	8000d48 <__aeabi_fmul+0x160>
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4641      	mov	r1, r8
 8000c80:	4311      	orrs	r1, r2
 8000c82:	0032      	movs	r2, r6
 8000c84:	3501      	adds	r5, #1
 8000c86:	4688      	mov	r8, r1
 8000c88:	407a      	eors	r2, r7
 8000c8a:	35ff      	adds	r5, #255	@ 0xff
 8000c8c:	290a      	cmp	r1, #10
 8000c8e:	dd00      	ble.n	8000c92 <__aeabi_fmul+0xaa>
 8000c90:	e0d8      	b.n	8000e44 <__aeabi_fmul+0x25c>
 8000c92:	0016      	movs	r6, r2
 8000c94:	2103      	movs	r1, #3
 8000c96:	4640      	mov	r0, r8
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4082      	lsls	r2, r0
 8000c9c:	20a6      	movs	r0, #166	@ 0xa6
 8000c9e:	00c0      	lsls	r0, r0, #3
 8000ca0:	4202      	tst	r2, r0
 8000ca2:	d020      	beq.n	8000ce6 <__aeabi_fmul+0xfe>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d046      	beq.n	8000d38 <__aeabi_fmul+0x150>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0xc8>
 8000cae:	e0bb      	b.n	8000e28 <__aeabi_fmul+0x240>
 8000cb0:	4651      	mov	r1, sl
 8000cb2:	464c      	mov	r4, r9
 8000cb4:	2901      	cmp	r1, #1
 8000cb6:	d0d2      	beq.n	8000c5e <__aeabi_fmul+0x76>
 8000cb8:	002b      	movs	r3, r5
 8000cba:	337f      	adds	r3, #127	@ 0x7f
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dd70      	ble.n	8000da2 <__aeabi_fmul+0x1ba>
 8000cc0:	0762      	lsls	r2, r4, #29
 8000cc2:	d004      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	4022      	ands	r2, r4
 8000cc8:	2a04      	cmp	r2, #4
 8000cca:	d000      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000ccc:	3404      	adds	r4, #4
 8000cce:	0122      	lsls	r2, r4, #4
 8000cd0:	d503      	bpl.n	8000cda <__aeabi_fmul+0xf2>
 8000cd2:	4b63      	ldr	r3, [pc, #396]	@ (8000e60 <__aeabi_fmul+0x278>)
 8000cd4:	401c      	ands	r4, r3
 8000cd6:	002b      	movs	r3, r5
 8000cd8:	3380      	adds	r3, #128	@ 0x80
 8000cda:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cdc:	dc2c      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000cde:	01a2      	lsls	r2, r4, #6
 8000ce0:	0a52      	lsrs	r2, r2, #9
 8000ce2:	b2d8      	uxtb	r0, r3
 8000ce4:	e7bd      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000ce6:	2090      	movs	r0, #144	@ 0x90
 8000ce8:	0080      	lsls	r0, r0, #2
 8000cea:	4202      	tst	r2, r0
 8000cec:	d127      	bne.n	8000d3e <__aeabi_fmul+0x156>
 8000cee:	38b9      	subs	r0, #185	@ 0xb9
 8000cf0:	38ff      	subs	r0, #255	@ 0xff
 8000cf2:	4210      	tst	r0, r2
 8000cf4:	d06d      	beq.n	8000dd2 <__aeabi_fmul+0x1ea>
 8000cf6:	003e      	movs	r6, r7
 8000cf8:	46a1      	mov	r9, r4
 8000cfa:	468a      	mov	sl, r1
 8000cfc:	e7d2      	b.n	8000ca4 <__aeabi_fmul+0xbc>
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d141      	bne.n	8000d86 <__aeabi_fmul+0x19e>
 8000d02:	2301      	movs	r3, #1
 8000d04:	4642      	mov	r2, r8
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4690      	mov	r8, r2
 8000d0a:	002b      	movs	r3, r5
 8000d0c:	4642      	mov	r2, r8
 8000d0e:	2101      	movs	r1, #1
 8000d10:	1c5d      	adds	r5, r3, #1
 8000d12:	2a0a      	cmp	r2, #10
 8000d14:	dd97      	ble.n	8000c46 <__aeabi_fmul+0x5e>
 8000d16:	e7c5      	b.n	8000ca4 <__aeabi_fmul+0xbc>
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d126      	bne.n	8000d6a <__aeabi_fmul+0x182>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	4698      	mov	r8, r3
 8000d20:	3b03      	subs	r3, #3
 8000d22:	2500      	movs	r5, #0
 8000d24:	469a      	mov	sl, r3
 8000d26:	e77a      	b.n	8000c1e <__aeabi_fmul+0x36>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d118      	bne.n	8000d5e <__aeabi_fmul+0x176>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	4698      	mov	r8, r3
 8000d30:	3b06      	subs	r3, #6
 8000d32:	25ff      	movs	r5, #255	@ 0xff
 8000d34:	469a      	mov	sl, r3
 8000d36:	e772      	b.n	8000c1e <__aeabi_fmul+0x36>
 8000d38:	20ff      	movs	r0, #255	@ 0xff
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	e791      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	2600      	movs	r6, #0
 8000d42:	20ff      	movs	r0, #255	@ 0xff
 8000d44:	03d2      	lsls	r2, r2, #15
 8000d46:	e78c      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000d48:	4641      	mov	r1, r8
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	4311      	orrs	r1, r2
 8000d50:	4688      	mov	r8, r1
 8000d52:	35ff      	adds	r5, #255	@ 0xff
 8000d54:	290a      	cmp	r1, #10
 8000d56:	dca5      	bgt.n	8000ca4 <__aeabi_fmul+0xbc>
 8000d58:	2102      	movs	r1, #2
 8000d5a:	407e      	eors	r6, r7
 8000d5c:	e774      	b.n	8000c48 <__aeabi_fmul+0x60>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	4698      	mov	r8, r3
 8000d62:	3b09      	subs	r3, #9
 8000d64:	25ff      	movs	r5, #255	@ 0xff
 8000d66:	469a      	mov	sl, r3
 8000d68:	e759      	b.n	8000c1e <__aeabi_fmul+0x36>
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f002 f9f4 	bl	8003158 <__clzsi2>
 8000d70:	464a      	mov	r2, r9
 8000d72:	1f43      	subs	r3, r0, #5
 8000d74:	2576      	movs	r5, #118	@ 0x76
 8000d76:	409a      	lsls	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	426d      	negs	r5, r5
 8000d7c:	4691      	mov	r9, r2
 8000d7e:	4698      	mov	r8, r3
 8000d80:	469a      	mov	sl, r3
 8000d82:	1a2d      	subs	r5, r5, r0
 8000d84:	e74b      	b.n	8000c1e <__aeabi_fmul+0x36>
 8000d86:	0020      	movs	r0, r4
 8000d88:	f002 f9e6 	bl	8003158 <__clzsi2>
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409c      	lsls	r4, r3
 8000d92:	1a2b      	subs	r3, r5, r0
 8000d94:	3b76      	subs	r3, #118	@ 0x76
 8000d96:	2100      	movs	r1, #0
 8000d98:	1c5d      	adds	r5, r3, #1
 8000d9a:	2a0a      	cmp	r2, #10
 8000d9c:	dc00      	bgt.n	8000da0 <__aeabi_fmul+0x1b8>
 8000d9e:	e752      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000da0:	e780      	b.n	8000ca4 <__aeabi_fmul+0xbc>
 8000da2:	2201      	movs	r2, #1
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b1b      	cmp	r3, #27
 8000da8:	dd00      	ble.n	8000dac <__aeabi_fmul+0x1c4>
 8000daa:	e758      	b.n	8000c5e <__aeabi_fmul+0x76>
 8000dac:	359e      	adds	r5, #158	@ 0x9e
 8000dae:	0022      	movs	r2, r4
 8000db0:	40ac      	lsls	r4, r5
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	1e63      	subs	r3, r4, #1
 8000db6:	419c      	sbcs	r4, r3
 8000db8:	4322      	orrs	r2, r4
 8000dba:	0753      	lsls	r3, r2, #29
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_fmul+0x1e0>
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x1e0>
 8000dc6:	3204      	adds	r2, #4
 8000dc8:	0153      	lsls	r3, r2, #5
 8000dca:	d537      	bpl.n	8000e3c <__aeabi_fmul+0x254>
 8000dcc:	2001      	movs	r0, #1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	e747      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000dd2:	0c21      	lsrs	r1, r4, #16
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	0424      	lsls	r4, r4, #16
 8000dd8:	0c24      	lsrs	r4, r4, #16
 8000dda:	0027      	movs	r7, r4
 8000ddc:	0c10      	lsrs	r0, r2, #16
 8000dde:	0412      	lsls	r2, r2, #16
 8000de0:	0c12      	lsrs	r2, r2, #16
 8000de2:	4344      	muls	r4, r0
 8000de4:	4357      	muls	r7, r2
 8000de6:	4348      	muls	r0, r1
 8000de8:	4351      	muls	r1, r2
 8000dea:	0c3a      	lsrs	r2, r7, #16
 8000dec:	1909      	adds	r1, r1, r4
 8000dee:	1852      	adds	r2, r2, r1
 8000df0:	4294      	cmp	r4, r2
 8000df2:	d903      	bls.n	8000dfc <__aeabi_fmul+0x214>
 8000df4:	2180      	movs	r1, #128	@ 0x80
 8000df6:	0249      	lsls	r1, r1, #9
 8000df8:	468c      	mov	ip, r1
 8000dfa:	4460      	add	r0, ip
 8000dfc:	043f      	lsls	r7, r7, #16
 8000dfe:	0411      	lsls	r1, r2, #16
 8000e00:	0c3f      	lsrs	r7, r7, #16
 8000e02:	19c9      	adds	r1, r1, r7
 8000e04:	018c      	lsls	r4, r1, #6
 8000e06:	1e67      	subs	r7, r4, #1
 8000e08:	41bc      	sbcs	r4, r7
 8000e0a:	0c12      	lsrs	r2, r2, #16
 8000e0c:	0e89      	lsrs	r1, r1, #26
 8000e0e:	1812      	adds	r2, r2, r0
 8000e10:	430c      	orrs	r4, r1
 8000e12:	0192      	lsls	r2, r2, #6
 8000e14:	4314      	orrs	r4, r2
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	d50e      	bpl.n	8000e38 <__aeabi_fmul+0x250>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	0862      	lsrs	r2, r4, #1
 8000e1e:	401c      	ands	r4, r3
 8000e20:	4314      	orrs	r4, r2
 8000e22:	e749      	b.n	8000cb8 <__aeabi_fmul+0xd0>
 8000e24:	003e      	movs	r6, r7
 8000e26:	46a1      	mov	r9, r4
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	03d2      	lsls	r2, r2, #15
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	0252      	lsls	r2, r2, #9
 8000e32:	20ff      	movs	r0, #255	@ 0xff
 8000e34:	0a52      	lsrs	r2, r2, #9
 8000e36:	e714      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000e38:	001d      	movs	r5, r3
 8000e3a:	e73d      	b.n	8000cb8 <__aeabi_fmul+0xd0>
 8000e3c:	0192      	lsls	r2, r2, #6
 8000e3e:	2000      	movs	r0, #0
 8000e40:	0a52      	lsrs	r2, r2, #9
 8000e42:	e70e      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000e44:	290f      	cmp	r1, #15
 8000e46:	d1ed      	bne.n	8000e24 <__aeabi_fmul+0x23c>
 8000e48:	2280      	movs	r2, #128	@ 0x80
 8000e4a:	464b      	mov	r3, r9
 8000e4c:	03d2      	lsls	r2, r2, #15
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d0ea      	beq.n	8000e28 <__aeabi_fmul+0x240>
 8000e52:	4214      	tst	r4, r2
 8000e54:	d1e8      	bne.n	8000e28 <__aeabi_fmul+0x240>
 8000e56:	003e      	movs	r6, r7
 8000e58:	20ff      	movs	r0, #255	@ 0xff
 8000e5a:	4322      	orrs	r2, r4
 8000e5c:	e701      	b.n	8000c62 <__aeabi_fmul+0x7a>
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	f7ffffff 	.word	0xf7ffffff

08000e64 <__aeabi_fsub>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	4647      	mov	r7, r8
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	024e      	lsls	r6, r1, #9
 8000e6c:	0243      	lsls	r3, r0, #9
 8000e6e:	0045      	lsls	r5, r0, #1
 8000e70:	0a72      	lsrs	r2, r6, #9
 8000e72:	0fc4      	lsrs	r4, r0, #31
 8000e74:	0048      	lsls	r0, r1, #1
 8000e76:	b580      	push	{r7, lr}
 8000e78:	4694      	mov	ip, r2
 8000e7a:	0a5f      	lsrs	r7, r3, #9
 8000e7c:	0e2d      	lsrs	r5, r5, #24
 8000e7e:	099b      	lsrs	r3, r3, #6
 8000e80:	0e00      	lsrs	r0, r0, #24
 8000e82:	0fc9      	lsrs	r1, r1, #31
 8000e84:	09b6      	lsrs	r6, r6, #6
 8000e86:	28ff      	cmp	r0, #255	@ 0xff
 8000e88:	d024      	beq.n	8000ed4 <__aeabi_fsub+0x70>
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4051      	eors	r1, r2
 8000e8e:	1a2a      	subs	r2, r5, r0
 8000e90:	428c      	cmp	r4, r1
 8000e92:	d00f      	beq.n	8000eb4 <__aeabi_fsub+0x50>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x36>
 8000e98:	e16a      	b.n	8001170 <__aeabi_fsub+0x30c>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d135      	bne.n	8000f0a <__aeabi_fsub+0xa6>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fsub+0x40>
 8000ea2:	e0a2      	b.n	8000fea <__aeabi_fsub+0x186>
 8000ea4:	1e51      	subs	r1, r2, #1
 8000ea6:	2a01      	cmp	r2, #1
 8000ea8:	d100      	bne.n	8000eac <__aeabi_fsub+0x48>
 8000eaa:	e124      	b.n	80010f6 <__aeabi_fsub+0x292>
 8000eac:	2aff      	cmp	r2, #255	@ 0xff
 8000eae:	d021      	beq.n	8000ef4 <__aeabi_fsub+0x90>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	e02f      	b.n	8000f14 <__aeabi_fsub+0xb0>
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x56>
 8000eb8:	e167      	b.n	800118a <__aeabi_fsub+0x326>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d05e      	beq.n	8000f7c <__aeabi_fsub+0x118>
 8000ebe:	2dff      	cmp	r5, #255	@ 0xff
 8000ec0:	d018      	beq.n	8000ef4 <__aeabi_fsub+0x90>
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	04c9      	lsls	r1, r1, #19
 8000ec6:	430e      	orrs	r6, r1
 8000ec8:	2a1b      	cmp	r2, #27
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_fsub+0x6a>
 8000ecc:	e076      	b.n	8000fbc <__aeabi_fsub+0x158>
 8000ece:	002a      	movs	r2, r5
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	e032      	b.n	8000f3a <__aeabi_fsub+0xd6>
 8000ed4:	002a      	movs	r2, r5
 8000ed6:	3aff      	subs	r2, #255	@ 0xff
 8000ed8:	4691      	mov	r9, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d042      	beq.n	8000f64 <__aeabi_fsub+0x100>
 8000ede:	428c      	cmp	r4, r1
 8000ee0:	d055      	beq.n	8000f8e <__aeabi_fsub+0x12a>
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x86>
 8000ee8:	e09c      	b.n	8001024 <__aeabi_fsub+0x1c0>
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x8c>
 8000eee:	e077      	b.n	8000fe0 <__aeabi_fsub+0x17c>
 8000ef0:	000c      	movs	r4, r1
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x98>
 8000efa:	e06e      	b.n	8000fda <__aeabi_fsub+0x176>
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	03d2      	lsls	r2, r2, #15
 8000f00:	4313      	orrs	r3, r2
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	20ff      	movs	r0, #255	@ 0xff
 8000f06:	0a5b      	lsrs	r3, r3, #9
 8000f08:	e024      	b.n	8000f54 <__aeabi_fsub+0xf0>
 8000f0a:	2dff      	cmp	r5, #255	@ 0xff
 8000f0c:	d0f2      	beq.n	8000ef4 <__aeabi_fsub+0x90>
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	04c9      	lsls	r1, r1, #19
 8000f12:	430e      	orrs	r6, r1
 8000f14:	2101      	movs	r1, #1
 8000f16:	2a1b      	cmp	r2, #27
 8000f18:	dc08      	bgt.n	8000f2c <__aeabi_fsub+0xc8>
 8000f1a:	0031      	movs	r1, r6
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	40d1      	lsrs	r1, r2
 8000f20:	1a82      	subs	r2, r0, r2
 8000f22:	4096      	lsls	r6, r2
 8000f24:	0032      	movs	r2, r6
 8000f26:	1e50      	subs	r0, r2, #1
 8000f28:	4182      	sbcs	r2, r0
 8000f2a:	4311      	orrs	r1, r2
 8000f2c:	1a5b      	subs	r3, r3, r1
 8000f2e:	015a      	lsls	r2, r3, #5
 8000f30:	d460      	bmi.n	8000ff4 <__aeabi_fsub+0x190>
 8000f32:	2107      	movs	r1, #7
 8000f34:	002a      	movs	r2, r5
 8000f36:	4019      	ands	r1, r3
 8000f38:	d057      	beq.n	8000fea <__aeabi_fsub+0x186>
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	4019      	ands	r1, r3
 8000f3e:	2904      	cmp	r1, #4
 8000f40:	d000      	beq.n	8000f44 <__aeabi_fsub+0xe0>
 8000f42:	3304      	adds	r3, #4
 8000f44:	0159      	lsls	r1, r3, #5
 8000f46:	d550      	bpl.n	8000fea <__aeabi_fsub+0x186>
 8000f48:	1c50      	adds	r0, r2, #1
 8000f4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000f4c:	d045      	beq.n	8000fda <__aeabi_fsub+0x176>
 8000f4e:	019b      	lsls	r3, r3, #6
 8000f50:	b2c0      	uxtb	r0, r0
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	05c0      	lsls	r0, r0, #23
 8000f56:	4318      	orrs	r0, r3
 8000f58:	07e4      	lsls	r4, r4, #31
 8000f5a:	4320      	orrs	r0, r4
 8000f5c:	bcc0      	pop	{r6, r7}
 8000f5e:	46b9      	mov	r9, r7
 8000f60:	46b0      	mov	r8, r6
 8000f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f64:	2201      	movs	r2, #1
 8000f66:	4051      	eors	r1, r2
 8000f68:	428c      	cmp	r4, r1
 8000f6a:	d1ba      	bne.n	8000ee2 <__aeabi_fsub+0x7e>
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d010      	beq.n	8000f94 <__aeabi_fsub+0x130>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x114>
 8000f76:	e098      	b.n	80010aa <__aeabi_fsub+0x246>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e7bb      	b.n	8000ef4 <__aeabi_fsub+0x90>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d034      	beq.n	8000fea <__aeabi_fsub+0x186>
 8000f80:	1e51      	subs	r1, r2, #1
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d06e      	beq.n	8001064 <__aeabi_fsub+0x200>
 8000f86:	2aff      	cmp	r2, #255	@ 0xff
 8000f88:	d0b4      	beq.n	8000ef4 <__aeabi_fsub+0x90>
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	e79c      	b.n	8000ec8 <__aeabi_fsub+0x64>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d000      	beq.n	8000f94 <__aeabi_fsub+0x130>
 8000f92:	e088      	b.n	80010a6 <__aeabi_fsub+0x242>
 8000f94:	20fe      	movs	r0, #254	@ 0xfe
 8000f96:	1c6a      	adds	r2, r5, #1
 8000f98:	4210      	tst	r0, r2
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fsub+0x13a>
 8000f9c:	e092      	b.n	80010c4 <__aeabi_fsub+0x260>
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_fsub+0x140>
 8000fa2:	e0a4      	b.n	80010ee <__aeabi_fsub+0x28a>
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x146>
 8000fa8:	e0cb      	b.n	8001142 <__aeabi_fsub+0x2de>
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fsub+0x14c>
 8000fae:	e0ca      	b.n	8001146 <__aeabi_fsub+0x2e2>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	025b      	lsls	r3, r3, #9
 8000fb6:	0a5b      	lsrs	r3, r3, #9
 8000fb8:	b2d0      	uxtb	r0, r2
 8000fba:	e7cb      	b.n	8000f54 <__aeabi_fsub+0xf0>
 8000fbc:	0031      	movs	r1, r6
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	40d1      	lsrs	r1, r2
 8000fc2:	1a82      	subs	r2, r0, r2
 8000fc4:	4096      	lsls	r6, r2
 8000fc6:	0032      	movs	r2, r6
 8000fc8:	1e50      	subs	r0, r2, #1
 8000fca:	4182      	sbcs	r2, r0
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	189b      	adds	r3, r3, r2
 8000fd0:	015a      	lsls	r2, r3, #5
 8000fd2:	d5ae      	bpl.n	8000f32 <__aeabi_fsub+0xce>
 8000fd4:	1c6a      	adds	r2, r5, #1
 8000fd6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fd8:	d14a      	bne.n	8001070 <__aeabi_fsub+0x20c>
 8000fda:	20ff      	movs	r0, #255	@ 0xff
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e7b9      	b.n	8000f54 <__aeabi_fsub+0xf0>
 8000fe0:	22ff      	movs	r2, #255	@ 0xff
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d14b      	bne.n	800107e <__aeabi_fsub+0x21a>
 8000fe6:	000c      	movs	r4, r1
 8000fe8:	0033      	movs	r3, r6
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	2aff      	cmp	r2, #255	@ 0xff
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x18e>
 8000ff0:	e781      	b.n	8000ef6 <__aeabi_fsub+0x92>
 8000ff2:	e7df      	b.n	8000fb4 <__aeabi_fsub+0x150>
 8000ff4:	019f      	lsls	r7, r3, #6
 8000ff6:	09bf      	lsrs	r7, r7, #6
 8000ff8:	0038      	movs	r0, r7
 8000ffa:	f002 f8ad 	bl	8003158 <__clzsi2>
 8000ffe:	3805      	subs	r0, #5
 8001000:	4087      	lsls	r7, r0
 8001002:	4285      	cmp	r5, r0
 8001004:	dc21      	bgt.n	800104a <__aeabi_fsub+0x1e6>
 8001006:	003b      	movs	r3, r7
 8001008:	2120      	movs	r1, #32
 800100a:	1b42      	subs	r2, r0, r5
 800100c:	3201      	adds	r2, #1
 800100e:	40d3      	lsrs	r3, r2
 8001010:	1a8a      	subs	r2, r1, r2
 8001012:	4097      	lsls	r7, r2
 8001014:	1e7a      	subs	r2, r7, #1
 8001016:	4197      	sbcs	r7, r2
 8001018:	2200      	movs	r2, #0
 800101a:	433b      	orrs	r3, r7
 800101c:	0759      	lsls	r1, r3, #29
 800101e:	d000      	beq.n	8001022 <__aeabi_fsub+0x1be>
 8001020:	e78b      	b.n	8000f3a <__aeabi_fsub+0xd6>
 8001022:	e78f      	b.n	8000f44 <__aeabi_fsub+0xe0>
 8001024:	20fe      	movs	r0, #254	@ 0xfe
 8001026:	1c6a      	adds	r2, r5, #1
 8001028:	4210      	tst	r0, r2
 800102a:	d112      	bne.n	8001052 <__aeabi_fsub+0x1ee>
 800102c:	2d00      	cmp	r5, #0
 800102e:	d152      	bne.n	80010d6 <__aeabi_fsub+0x272>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d07c      	beq.n	800112e <__aeabi_fsub+0x2ca>
 8001034:	2e00      	cmp	r6, #0
 8001036:	d0bb      	beq.n	8000fb0 <__aeabi_fsub+0x14c>
 8001038:	1b9a      	subs	r2, r3, r6
 800103a:	0150      	lsls	r0, r2, #5
 800103c:	d400      	bmi.n	8001040 <__aeabi_fsub+0x1dc>
 800103e:	e08b      	b.n	8001158 <__aeabi_fsub+0x2f4>
 8001040:	2401      	movs	r4, #1
 8001042:	2200      	movs	r2, #0
 8001044:	1af3      	subs	r3, r6, r3
 8001046:	400c      	ands	r4, r1
 8001048:	e7e8      	b.n	800101c <__aeabi_fsub+0x1b8>
 800104a:	4b56      	ldr	r3, [pc, #344]	@ (80011a4 <__aeabi_fsub+0x340>)
 800104c:	1a2a      	subs	r2, r5, r0
 800104e:	403b      	ands	r3, r7
 8001050:	e7e4      	b.n	800101c <__aeabi_fsub+0x1b8>
 8001052:	1b9f      	subs	r7, r3, r6
 8001054:	017a      	lsls	r2, r7, #5
 8001056:	d446      	bmi.n	80010e6 <__aeabi_fsub+0x282>
 8001058:	2f00      	cmp	r7, #0
 800105a:	d1cd      	bne.n	8000ff8 <__aeabi_fsub+0x194>
 800105c:	2400      	movs	r4, #0
 800105e:	2000      	movs	r0, #0
 8001060:	2300      	movs	r3, #0
 8001062:	e777      	b.n	8000f54 <__aeabi_fsub+0xf0>
 8001064:	199b      	adds	r3, r3, r6
 8001066:	2501      	movs	r5, #1
 8001068:	3201      	adds	r2, #1
 800106a:	0159      	lsls	r1, r3, #5
 800106c:	d400      	bmi.n	8001070 <__aeabi_fsub+0x20c>
 800106e:	e760      	b.n	8000f32 <__aeabi_fsub+0xce>
 8001070:	2101      	movs	r1, #1
 8001072:	484d      	ldr	r0, [pc, #308]	@ (80011a8 <__aeabi_fsub+0x344>)
 8001074:	4019      	ands	r1, r3
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	4003      	ands	r3, r0
 800107a:	430b      	orrs	r3, r1
 800107c:	e7ce      	b.n	800101c <__aeabi_fsub+0x1b8>
 800107e:	1e57      	subs	r7, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d05a      	beq.n	800113a <__aeabi_fsub+0x2d6>
 8001084:	000c      	movs	r4, r1
 8001086:	2aff      	cmp	r2, #255	@ 0xff
 8001088:	d033      	beq.n	80010f2 <__aeabi_fsub+0x28e>
 800108a:	2201      	movs	r2, #1
 800108c:	2f1b      	cmp	r7, #27
 800108e:	dc07      	bgt.n	80010a0 <__aeabi_fsub+0x23c>
 8001090:	2120      	movs	r1, #32
 8001092:	1bc9      	subs	r1, r1, r7
 8001094:	001a      	movs	r2, r3
 8001096:	408b      	lsls	r3, r1
 8001098:	40fa      	lsrs	r2, r7
 800109a:	1e59      	subs	r1, r3, #1
 800109c:	418b      	sbcs	r3, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	0005      	movs	r5, r0
 80010a2:	1ab3      	subs	r3, r6, r2
 80010a4:	e743      	b.n	8000f2e <__aeabi_fsub+0xca>
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d123      	bne.n	80010f2 <__aeabi_fsub+0x28e>
 80010aa:	22ff      	movs	r2, #255	@ 0xff
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d09b      	beq.n	8000fe8 <__aeabi_fsub+0x184>
 80010b0:	1e51      	subs	r1, r2, #1
 80010b2:	2a01      	cmp	r2, #1
 80010b4:	d0d6      	beq.n	8001064 <__aeabi_fsub+0x200>
 80010b6:	2aff      	cmp	r2, #255	@ 0xff
 80010b8:	d01b      	beq.n	80010f2 <__aeabi_fsub+0x28e>
 80010ba:	291b      	cmp	r1, #27
 80010bc:	dd2c      	ble.n	8001118 <__aeabi_fsub+0x2b4>
 80010be:	0002      	movs	r2, r0
 80010c0:	1c73      	adds	r3, r6, #1
 80010c2:	e73a      	b.n	8000f3a <__aeabi_fsub+0xd6>
 80010c4:	2aff      	cmp	r2, #255	@ 0xff
 80010c6:	d088      	beq.n	8000fda <__aeabi_fsub+0x176>
 80010c8:	199b      	adds	r3, r3, r6
 80010ca:	085b      	lsrs	r3, r3, #1
 80010cc:	0759      	lsls	r1, r3, #29
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x26e>
 80010d0:	e733      	b.n	8000f3a <__aeabi_fsub+0xd6>
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	e76e      	b.n	8000fb4 <__aeabi_fsub+0x150>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <__aeabi_fsub+0x298>
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d043      	beq.n	8001166 <__aeabi_fsub+0x302>
 80010de:	2401      	movs	r4, #1
 80010e0:	0033      	movs	r3, r6
 80010e2:	400c      	ands	r4, r1
 80010e4:	e706      	b.n	8000ef4 <__aeabi_fsub+0x90>
 80010e6:	2401      	movs	r4, #1
 80010e8:	1af7      	subs	r7, r6, r3
 80010ea:	400c      	ands	r4, r1
 80010ec:	e784      	b.n	8000ff8 <__aeabi_fsub+0x194>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <__aeabi_fsub+0x298>
 80010f2:	0033      	movs	r3, r6
 80010f4:	e6fe      	b.n	8000ef4 <__aeabi_fsub+0x90>
 80010f6:	2501      	movs	r5, #1
 80010f8:	1b9b      	subs	r3, r3, r6
 80010fa:	e718      	b.n	8000f2e <__aeabi_fsub+0xca>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x29e>
 8001100:	e6f8      	b.n	8000ef4 <__aeabi_fsub+0x90>
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	03d2      	lsls	r2, r2, #15
 8001106:	4297      	cmp	r7, r2
 8001108:	d304      	bcc.n	8001114 <__aeabi_fsub+0x2b0>
 800110a:	4594      	cmp	ip, r2
 800110c:	d202      	bcs.n	8001114 <__aeabi_fsub+0x2b0>
 800110e:	2401      	movs	r4, #1
 8001110:	0033      	movs	r3, r6
 8001112:	400c      	ands	r4, r1
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	e6f1      	b.n	8000efc <__aeabi_fsub+0x98>
 8001118:	001a      	movs	r2, r3
 800111a:	2520      	movs	r5, #32
 800111c:	40ca      	lsrs	r2, r1
 800111e:	1a69      	subs	r1, r5, r1
 8001120:	408b      	lsls	r3, r1
 8001122:	1e59      	subs	r1, r3, #1
 8001124:	418b      	sbcs	r3, r1
 8001126:	4313      	orrs	r3, r2
 8001128:	0005      	movs	r5, r0
 800112a:	199b      	adds	r3, r3, r6
 800112c:	e750      	b.n	8000fd0 <__aeabi_fsub+0x16c>
 800112e:	2e00      	cmp	r6, #0
 8001130:	d094      	beq.n	800105c <__aeabi_fsub+0x1f8>
 8001132:	2401      	movs	r4, #1
 8001134:	0033      	movs	r3, r6
 8001136:	400c      	ands	r4, r1
 8001138:	e73a      	b.n	8000fb0 <__aeabi_fsub+0x14c>
 800113a:	000c      	movs	r4, r1
 800113c:	2501      	movs	r5, #1
 800113e:	1af3      	subs	r3, r6, r3
 8001140:	e6f5      	b.n	8000f2e <__aeabi_fsub+0xca>
 8001142:	0033      	movs	r3, r6
 8001144:	e734      	b.n	8000fb0 <__aeabi_fsub+0x14c>
 8001146:	199b      	adds	r3, r3, r6
 8001148:	2200      	movs	r2, #0
 800114a:	0159      	lsls	r1, r3, #5
 800114c:	d5c1      	bpl.n	80010d2 <__aeabi_fsub+0x26e>
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <__aeabi_fsub+0x340>)
 8001150:	4013      	ands	r3, r2
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	2201      	movs	r2, #1
 8001156:	e72d      	b.n	8000fb4 <__aeabi_fsub+0x150>
 8001158:	2a00      	cmp	r2, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x2fa>
 800115c:	e77e      	b.n	800105c <__aeabi_fsub+0x1f8>
 800115e:	0013      	movs	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	e726      	b.n	8000fb4 <__aeabi_fsub+0x150>
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	2400      	movs	r4, #0
 800116a:	20ff      	movs	r0, #255	@ 0xff
 800116c:	03db      	lsls	r3, r3, #15
 800116e:	e6f1      	b.n	8000f54 <__aeabi_fsub+0xf0>
 8001170:	2a00      	cmp	r2, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_fsub+0x312>
 8001174:	e756      	b.n	8001024 <__aeabi_fsub+0x1c0>
 8001176:	1b47      	subs	r7, r0, r5
 8001178:	003a      	movs	r2, r7
 800117a:	2d00      	cmp	r5, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x31c>
 800117e:	e730      	b.n	8000fe2 <__aeabi_fsub+0x17e>
 8001180:	2280      	movs	r2, #128	@ 0x80
 8001182:	04d2      	lsls	r2, r2, #19
 8001184:	000c      	movs	r4, r1
 8001186:	4313      	orrs	r3, r2
 8001188:	e77f      	b.n	800108a <__aeabi_fsub+0x226>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x32c>
 800118e:	e701      	b.n	8000f94 <__aeabi_fsub+0x130>
 8001190:	1b41      	subs	r1, r0, r5
 8001192:	2d00      	cmp	r5, #0
 8001194:	d101      	bne.n	800119a <__aeabi_fsub+0x336>
 8001196:	000a      	movs	r2, r1
 8001198:	e788      	b.n	80010ac <__aeabi_fsub+0x248>
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	04d2      	lsls	r2, r2, #19
 800119e:	4313      	orrs	r3, r2
 80011a0:	e78b      	b.n	80010ba <__aeabi_fsub+0x256>
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	fbffffff 	.word	0xfbffffff
 80011a8:	7dffffff 	.word	0x7dffffff

080011ac <__aeabi_f2iz>:
 80011ac:	0241      	lsls	r1, r0, #9
 80011ae:	0042      	lsls	r2, r0, #1
 80011b0:	0fc3      	lsrs	r3, r0, #31
 80011b2:	0a49      	lsrs	r1, r1, #9
 80011b4:	2000      	movs	r0, #0
 80011b6:	0e12      	lsrs	r2, r2, #24
 80011b8:	2a7e      	cmp	r2, #126	@ 0x7e
 80011ba:	dd03      	ble.n	80011c4 <__aeabi_f2iz+0x18>
 80011bc:	2a9d      	cmp	r2, #157	@ 0x9d
 80011be:	dd02      	ble.n	80011c6 <__aeabi_f2iz+0x1a>
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <__aeabi_f2iz+0x3c>)
 80011c2:	1898      	adds	r0, r3, r2
 80011c4:	4770      	bx	lr
 80011c6:	2080      	movs	r0, #128	@ 0x80
 80011c8:	0400      	lsls	r0, r0, #16
 80011ca:	4301      	orrs	r1, r0
 80011cc:	2a95      	cmp	r2, #149	@ 0x95
 80011ce:	dc07      	bgt.n	80011e0 <__aeabi_f2iz+0x34>
 80011d0:	2096      	movs	r0, #150	@ 0x96
 80011d2:	1a82      	subs	r2, r0, r2
 80011d4:	40d1      	lsrs	r1, r2
 80011d6:	4248      	negs	r0, r1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f3      	bne.n	80011c4 <__aeabi_f2iz+0x18>
 80011dc:	0008      	movs	r0, r1
 80011de:	e7f1      	b.n	80011c4 <__aeabi_f2iz+0x18>
 80011e0:	3a96      	subs	r2, #150	@ 0x96
 80011e2:	4091      	lsls	r1, r2
 80011e4:	e7f7      	b.n	80011d6 <__aeabi_f2iz+0x2a>
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	7fffffff 	.word	0x7fffffff

080011ec <__aeabi_i2f>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d013      	beq.n	800121a <__aeabi_i2f+0x2e>
 80011f2:	17c3      	asrs	r3, r0, #31
 80011f4:	18c5      	adds	r5, r0, r3
 80011f6:	405d      	eors	r5, r3
 80011f8:	0fc4      	lsrs	r4, r0, #31
 80011fa:	0028      	movs	r0, r5
 80011fc:	f001 ffac 	bl	8003158 <__clzsi2>
 8001200:	239e      	movs	r3, #158	@ 0x9e
 8001202:	0001      	movs	r1, r0
 8001204:	1a1b      	subs	r3, r3, r0
 8001206:	2b96      	cmp	r3, #150	@ 0x96
 8001208:	dc0f      	bgt.n	800122a <__aeabi_i2f+0x3e>
 800120a:	2808      	cmp	r0, #8
 800120c:	d034      	beq.n	8001278 <__aeabi_i2f+0x8c>
 800120e:	3908      	subs	r1, #8
 8001210:	408d      	lsls	r5, r1
 8001212:	026d      	lsls	r5, r5, #9
 8001214:	0a6d      	lsrs	r5, r5, #9
 8001216:	b2d8      	uxtb	r0, r3
 8001218:	e002      	b.n	8001220 <__aeabi_i2f+0x34>
 800121a:	2400      	movs	r4, #0
 800121c:	2000      	movs	r0, #0
 800121e:	2500      	movs	r5, #0
 8001220:	05c0      	lsls	r0, r0, #23
 8001222:	4328      	orrs	r0, r5
 8001224:	07e4      	lsls	r4, r4, #31
 8001226:	4320      	orrs	r0, r4
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	2b99      	cmp	r3, #153	@ 0x99
 800122c:	dc16      	bgt.n	800125c <__aeabi_i2f+0x70>
 800122e:	1f42      	subs	r2, r0, #5
 8001230:	2805      	cmp	r0, #5
 8001232:	d000      	beq.n	8001236 <__aeabi_i2f+0x4a>
 8001234:	4095      	lsls	r5, r2
 8001236:	002a      	movs	r2, r5
 8001238:	4811      	ldr	r0, [pc, #68]	@ (8001280 <__aeabi_i2f+0x94>)
 800123a:	4002      	ands	r2, r0
 800123c:	076e      	lsls	r6, r5, #29
 800123e:	d009      	beq.n	8001254 <__aeabi_i2f+0x68>
 8001240:	260f      	movs	r6, #15
 8001242:	4035      	ands	r5, r6
 8001244:	2d04      	cmp	r5, #4
 8001246:	d005      	beq.n	8001254 <__aeabi_i2f+0x68>
 8001248:	3204      	adds	r2, #4
 800124a:	0155      	lsls	r5, r2, #5
 800124c:	d502      	bpl.n	8001254 <__aeabi_i2f+0x68>
 800124e:	239f      	movs	r3, #159	@ 0x9f
 8001250:	4002      	ands	r2, r0
 8001252:	1a5b      	subs	r3, r3, r1
 8001254:	0192      	lsls	r2, r2, #6
 8001256:	0a55      	lsrs	r5, r2, #9
 8001258:	b2d8      	uxtb	r0, r3
 800125a:	e7e1      	b.n	8001220 <__aeabi_i2f+0x34>
 800125c:	2205      	movs	r2, #5
 800125e:	1a12      	subs	r2, r2, r0
 8001260:	0028      	movs	r0, r5
 8001262:	40d0      	lsrs	r0, r2
 8001264:	0002      	movs	r2, r0
 8001266:	0008      	movs	r0, r1
 8001268:	301b      	adds	r0, #27
 800126a:	4085      	lsls	r5, r0
 800126c:	0028      	movs	r0, r5
 800126e:	1e45      	subs	r5, r0, #1
 8001270:	41a8      	sbcs	r0, r5
 8001272:	4302      	orrs	r2, r0
 8001274:	0015      	movs	r5, r2
 8001276:	e7de      	b.n	8001236 <__aeabi_i2f+0x4a>
 8001278:	026d      	lsls	r5, r5, #9
 800127a:	2096      	movs	r0, #150	@ 0x96
 800127c:	0a6d      	lsrs	r5, r5, #9
 800127e:	e7cf      	b.n	8001220 <__aeabi_i2f+0x34>
 8001280:	fbffffff 	.word	0xfbffffff

08001284 <__aeabi_ui2f>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	1e04      	subs	r4, r0, #0
 8001288:	d00e      	beq.n	80012a8 <__aeabi_ui2f+0x24>
 800128a:	f001 ff65 	bl	8003158 <__clzsi2>
 800128e:	239e      	movs	r3, #158	@ 0x9e
 8001290:	0001      	movs	r1, r0
 8001292:	1a1b      	subs	r3, r3, r0
 8001294:	2b96      	cmp	r3, #150	@ 0x96
 8001296:	dc0c      	bgt.n	80012b2 <__aeabi_ui2f+0x2e>
 8001298:	2808      	cmp	r0, #8
 800129a:	d02f      	beq.n	80012fc <__aeabi_ui2f+0x78>
 800129c:	3908      	subs	r1, #8
 800129e:	408c      	lsls	r4, r1
 80012a0:	0264      	lsls	r4, r4, #9
 80012a2:	0a64      	lsrs	r4, r4, #9
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	e001      	b.n	80012ac <__aeabi_ui2f+0x28>
 80012a8:	2000      	movs	r0, #0
 80012aa:	2400      	movs	r4, #0
 80012ac:	05c0      	lsls	r0, r0, #23
 80012ae:	4320      	orrs	r0, r4
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	2b99      	cmp	r3, #153	@ 0x99
 80012b4:	dc16      	bgt.n	80012e4 <__aeabi_ui2f+0x60>
 80012b6:	1f42      	subs	r2, r0, #5
 80012b8:	2805      	cmp	r0, #5
 80012ba:	d000      	beq.n	80012be <__aeabi_ui2f+0x3a>
 80012bc:	4094      	lsls	r4, r2
 80012be:	0022      	movs	r2, r4
 80012c0:	4810      	ldr	r0, [pc, #64]	@ (8001304 <__aeabi_ui2f+0x80>)
 80012c2:	4002      	ands	r2, r0
 80012c4:	0765      	lsls	r5, r4, #29
 80012c6:	d009      	beq.n	80012dc <__aeabi_ui2f+0x58>
 80012c8:	250f      	movs	r5, #15
 80012ca:	402c      	ands	r4, r5
 80012cc:	2c04      	cmp	r4, #4
 80012ce:	d005      	beq.n	80012dc <__aeabi_ui2f+0x58>
 80012d0:	3204      	adds	r2, #4
 80012d2:	0154      	lsls	r4, r2, #5
 80012d4:	d502      	bpl.n	80012dc <__aeabi_ui2f+0x58>
 80012d6:	239f      	movs	r3, #159	@ 0x9f
 80012d8:	4002      	ands	r2, r0
 80012da:	1a5b      	subs	r3, r3, r1
 80012dc:	0192      	lsls	r2, r2, #6
 80012de:	0a54      	lsrs	r4, r2, #9
 80012e0:	b2d8      	uxtb	r0, r3
 80012e2:	e7e3      	b.n	80012ac <__aeabi_ui2f+0x28>
 80012e4:	0002      	movs	r2, r0
 80012e6:	0020      	movs	r0, r4
 80012e8:	321b      	adds	r2, #27
 80012ea:	4090      	lsls	r0, r2
 80012ec:	0002      	movs	r2, r0
 80012ee:	1e50      	subs	r0, r2, #1
 80012f0:	4182      	sbcs	r2, r0
 80012f2:	2005      	movs	r0, #5
 80012f4:	1a40      	subs	r0, r0, r1
 80012f6:	40c4      	lsrs	r4, r0
 80012f8:	4314      	orrs	r4, r2
 80012fa:	e7e0      	b.n	80012be <__aeabi_ui2f+0x3a>
 80012fc:	0264      	lsls	r4, r4, #9
 80012fe:	2096      	movs	r0, #150	@ 0x96
 8001300:	0a64      	lsrs	r4, r4, #9
 8001302:	e7d3      	b.n	80012ac <__aeabi_ui2f+0x28>
 8001304:	fbffffff 	.word	0xfbffffff

08001308 <__aeabi_dadd>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	4657      	mov	r7, sl
 800130c:	464e      	mov	r6, r9
 800130e:	4645      	mov	r5, r8
 8001310:	46de      	mov	lr, fp
 8001312:	b5e0      	push	{r5, r6, r7, lr}
 8001314:	b083      	sub	sp, #12
 8001316:	9000      	str	r0, [sp, #0]
 8001318:	9101      	str	r1, [sp, #4]
 800131a:	030c      	lsls	r4, r1, #12
 800131c:	004f      	lsls	r7, r1, #1
 800131e:	0fce      	lsrs	r6, r1, #31
 8001320:	0a61      	lsrs	r1, r4, #9
 8001322:	9c00      	ldr	r4, [sp, #0]
 8001324:	031d      	lsls	r5, r3, #12
 8001326:	0f64      	lsrs	r4, r4, #29
 8001328:	430c      	orrs	r4, r1
 800132a:	9900      	ldr	r1, [sp, #0]
 800132c:	9200      	str	r2, [sp, #0]
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	00c8      	lsls	r0, r1, #3
 8001332:	0059      	lsls	r1, r3, #1
 8001334:	0d4b      	lsrs	r3, r1, #21
 8001336:	4699      	mov	r9, r3
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	9b01      	ldr	r3, [sp, #4]
 800133c:	0a6d      	lsrs	r5, r5, #9
 800133e:	0fd9      	lsrs	r1, r3, #31
 8001340:	0f53      	lsrs	r3, r2, #29
 8001342:	432b      	orrs	r3, r5
 8001344:	469a      	mov	sl, r3
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	0d7f      	lsrs	r7, r7, #21
 800134a:	00da      	lsls	r2, r3, #3
 800134c:	4694      	mov	ip, r2
 800134e:	464a      	mov	r2, r9
 8001350:	46b0      	mov	r8, r6
 8001352:	1aba      	subs	r2, r7, r2
 8001354:	428e      	cmp	r6, r1
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x52>
 8001358:	e0b0      	b.n	80014bc <__aeabi_dadd+0x1b4>
 800135a:	2a00      	cmp	r2, #0
 800135c:	dc00      	bgt.n	8001360 <__aeabi_dadd+0x58>
 800135e:	e078      	b.n	8001452 <__aeabi_dadd+0x14a>
 8001360:	4649      	mov	r1, r9
 8001362:	2900      	cmp	r1, #0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x60>
 8001366:	e0e9      	b.n	800153c <__aeabi_dadd+0x234>
 8001368:	49c9      	ldr	r1, [pc, #804]	@ (8001690 <__aeabi_dadd+0x388>)
 800136a:	428f      	cmp	r7, r1
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x68>
 800136e:	e195      	b.n	800169c <__aeabi_dadd+0x394>
 8001370:	2501      	movs	r5, #1
 8001372:	2a38      	cmp	r2, #56	@ 0x38
 8001374:	dc16      	bgt.n	80013a4 <__aeabi_dadd+0x9c>
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	4653      	mov	r3, sl
 800137a:	0409      	lsls	r1, r1, #16
 800137c:	430b      	orrs	r3, r1
 800137e:	469a      	mov	sl, r3
 8001380:	2a1f      	cmp	r2, #31
 8001382:	dd00      	ble.n	8001386 <__aeabi_dadd+0x7e>
 8001384:	e1e7      	b.n	8001756 <__aeabi_dadd+0x44e>
 8001386:	2120      	movs	r1, #32
 8001388:	4655      	mov	r5, sl
 800138a:	1a8b      	subs	r3, r1, r2
 800138c:	4661      	mov	r1, ip
 800138e:	409d      	lsls	r5, r3
 8001390:	40d1      	lsrs	r1, r2
 8001392:	430d      	orrs	r5, r1
 8001394:	4661      	mov	r1, ip
 8001396:	4099      	lsls	r1, r3
 8001398:	1e4b      	subs	r3, r1, #1
 800139a:	4199      	sbcs	r1, r3
 800139c:	4653      	mov	r3, sl
 800139e:	40d3      	lsrs	r3, r2
 80013a0:	430d      	orrs	r5, r1
 80013a2:	1ae4      	subs	r4, r4, r3
 80013a4:	1b45      	subs	r5, r0, r5
 80013a6:	42a8      	cmp	r0, r5
 80013a8:	4180      	sbcs	r0, r0
 80013aa:	4240      	negs	r0, r0
 80013ac:	1a24      	subs	r4, r4, r0
 80013ae:	0223      	lsls	r3, r4, #8
 80013b0:	d400      	bmi.n	80013b4 <__aeabi_dadd+0xac>
 80013b2:	e10f      	b.n	80015d4 <__aeabi_dadd+0x2cc>
 80013b4:	0264      	lsls	r4, r4, #9
 80013b6:	0a64      	lsrs	r4, r4, #9
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0xb6>
 80013bc:	e139      	b.n	8001632 <__aeabi_dadd+0x32a>
 80013be:	0020      	movs	r0, r4
 80013c0:	f001 feca 	bl	8003158 <__clzsi2>
 80013c4:	0003      	movs	r3, r0
 80013c6:	3b08      	subs	r3, #8
 80013c8:	2120      	movs	r1, #32
 80013ca:	0028      	movs	r0, r5
 80013cc:	1aca      	subs	r2, r1, r3
 80013ce:	40d0      	lsrs	r0, r2
 80013d0:	409c      	lsls	r4, r3
 80013d2:	0002      	movs	r2, r0
 80013d4:	409d      	lsls	r5, r3
 80013d6:	4322      	orrs	r2, r4
 80013d8:	429f      	cmp	r7, r3
 80013da:	dd00      	ble.n	80013de <__aeabi_dadd+0xd6>
 80013dc:	e173      	b.n	80016c6 <__aeabi_dadd+0x3be>
 80013de:	1bd8      	subs	r0, r3, r7
 80013e0:	3001      	adds	r0, #1
 80013e2:	1a09      	subs	r1, r1, r0
 80013e4:	002c      	movs	r4, r5
 80013e6:	408d      	lsls	r5, r1
 80013e8:	40c4      	lsrs	r4, r0
 80013ea:	1e6b      	subs	r3, r5, #1
 80013ec:	419d      	sbcs	r5, r3
 80013ee:	0013      	movs	r3, r2
 80013f0:	40c2      	lsrs	r2, r0
 80013f2:	408b      	lsls	r3, r1
 80013f4:	4325      	orrs	r5, r4
 80013f6:	2700      	movs	r7, #0
 80013f8:	0014      	movs	r4, r2
 80013fa:	431d      	orrs	r5, r3
 80013fc:	076b      	lsls	r3, r5, #29
 80013fe:	d009      	beq.n	8001414 <__aeabi_dadd+0x10c>
 8001400:	230f      	movs	r3, #15
 8001402:	402b      	ands	r3, r5
 8001404:	2b04      	cmp	r3, #4
 8001406:	d005      	beq.n	8001414 <__aeabi_dadd+0x10c>
 8001408:	1d2b      	adds	r3, r5, #4
 800140a:	42ab      	cmp	r3, r5
 800140c:	41ad      	sbcs	r5, r5
 800140e:	426d      	negs	r5, r5
 8001410:	1964      	adds	r4, r4, r5
 8001412:	001d      	movs	r5, r3
 8001414:	0223      	lsls	r3, r4, #8
 8001416:	d400      	bmi.n	800141a <__aeabi_dadd+0x112>
 8001418:	e12d      	b.n	8001676 <__aeabi_dadd+0x36e>
 800141a:	4a9d      	ldr	r2, [pc, #628]	@ (8001690 <__aeabi_dadd+0x388>)
 800141c:	3701      	adds	r7, #1
 800141e:	4297      	cmp	r7, r2
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x11c>
 8001422:	e0d3      	b.n	80015cc <__aeabi_dadd+0x2c4>
 8001424:	4646      	mov	r6, r8
 8001426:	499b      	ldr	r1, [pc, #620]	@ (8001694 <__aeabi_dadd+0x38c>)
 8001428:	08ed      	lsrs	r5, r5, #3
 800142a:	4021      	ands	r1, r4
 800142c:	074a      	lsls	r2, r1, #29
 800142e:	432a      	orrs	r2, r5
 8001430:	057c      	lsls	r4, r7, #21
 8001432:	024d      	lsls	r5, r1, #9
 8001434:	0b2d      	lsrs	r5, r5, #12
 8001436:	0d64      	lsrs	r4, r4, #21
 8001438:	0524      	lsls	r4, r4, #20
 800143a:	432c      	orrs	r4, r5
 800143c:	07f6      	lsls	r6, r6, #31
 800143e:	4334      	orrs	r4, r6
 8001440:	0010      	movs	r0, r2
 8001442:	0021      	movs	r1, r4
 8001444:	b003      	add	sp, #12
 8001446:	bcf0      	pop	{r4, r5, r6, r7}
 8001448:	46bb      	mov	fp, r7
 800144a:	46b2      	mov	sl, r6
 800144c:	46a9      	mov	r9, r5
 800144e:	46a0      	mov	r8, r4
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	2a00      	cmp	r2, #0
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x150>
 8001456:	e084      	b.n	8001562 <__aeabi_dadd+0x25a>
 8001458:	464a      	mov	r2, r9
 800145a:	1bd2      	subs	r2, r2, r7
 800145c:	2f00      	cmp	r7, #0
 800145e:	d000      	beq.n	8001462 <__aeabi_dadd+0x15a>
 8001460:	e16d      	b.n	800173e <__aeabi_dadd+0x436>
 8001462:	0025      	movs	r5, r4
 8001464:	4305      	orrs	r5, r0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x162>
 8001468:	e127      	b.n	80016ba <__aeabi_dadd+0x3b2>
 800146a:	1e56      	subs	r6, r2, #1
 800146c:	2a01      	cmp	r2, #1
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x16a>
 8001470:	e23b      	b.n	80018ea <__aeabi_dadd+0x5e2>
 8001472:	4d87      	ldr	r5, [pc, #540]	@ (8001690 <__aeabi_dadd+0x388>)
 8001474:	42aa      	cmp	r2, r5
 8001476:	d100      	bne.n	800147a <__aeabi_dadd+0x172>
 8001478:	e26a      	b.n	8001950 <__aeabi_dadd+0x648>
 800147a:	2501      	movs	r5, #1
 800147c:	2e38      	cmp	r6, #56	@ 0x38
 800147e:	dc12      	bgt.n	80014a6 <__aeabi_dadd+0x19e>
 8001480:	0032      	movs	r2, r6
 8001482:	2a1f      	cmp	r2, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x180>
 8001486:	e1f8      	b.n	800187a <__aeabi_dadd+0x572>
 8001488:	2620      	movs	r6, #32
 800148a:	0025      	movs	r5, r4
 800148c:	1ab6      	subs	r6, r6, r2
 800148e:	0007      	movs	r7, r0
 8001490:	4653      	mov	r3, sl
 8001492:	40b0      	lsls	r0, r6
 8001494:	40d4      	lsrs	r4, r2
 8001496:	40b5      	lsls	r5, r6
 8001498:	40d7      	lsrs	r7, r2
 800149a:	1e46      	subs	r6, r0, #1
 800149c:	41b0      	sbcs	r0, r6
 800149e:	1b1b      	subs	r3, r3, r4
 80014a0:	469a      	mov	sl, r3
 80014a2:	433d      	orrs	r5, r7
 80014a4:	4305      	orrs	r5, r0
 80014a6:	4662      	mov	r2, ip
 80014a8:	1b55      	subs	r5, r2, r5
 80014aa:	45ac      	cmp	ip, r5
 80014ac:	4192      	sbcs	r2, r2
 80014ae:	4653      	mov	r3, sl
 80014b0:	4252      	negs	r2, r2
 80014b2:	000e      	movs	r6, r1
 80014b4:	464f      	mov	r7, r9
 80014b6:	4688      	mov	r8, r1
 80014b8:	1a9c      	subs	r4, r3, r2
 80014ba:	e778      	b.n	80013ae <__aeabi_dadd+0xa6>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	dc00      	bgt.n	80014c2 <__aeabi_dadd+0x1ba>
 80014c0:	e08e      	b.n	80015e0 <__aeabi_dadd+0x2d8>
 80014c2:	4649      	mov	r1, r9
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d175      	bne.n	80015b4 <__aeabi_dadd+0x2ac>
 80014c8:	4661      	mov	r1, ip
 80014ca:	4653      	mov	r3, sl
 80014cc:	4319      	orrs	r1, r3
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x1ca>
 80014d0:	e0f6      	b.n	80016c0 <__aeabi_dadd+0x3b8>
 80014d2:	1e51      	subs	r1, r2, #1
 80014d4:	2a01      	cmp	r2, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x1d2>
 80014d8:	e191      	b.n	80017fe <__aeabi_dadd+0x4f6>
 80014da:	4d6d      	ldr	r5, [pc, #436]	@ (8001690 <__aeabi_dadd+0x388>)
 80014dc:	42aa      	cmp	r2, r5
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x1da>
 80014e0:	e0dc      	b.n	800169c <__aeabi_dadd+0x394>
 80014e2:	2501      	movs	r5, #1
 80014e4:	2938      	cmp	r1, #56	@ 0x38
 80014e6:	dc14      	bgt.n	8001512 <__aeabi_dadd+0x20a>
 80014e8:	000a      	movs	r2, r1
 80014ea:	2a1f      	cmp	r2, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x1e8>
 80014ee:	e1a2      	b.n	8001836 <__aeabi_dadd+0x52e>
 80014f0:	2120      	movs	r1, #32
 80014f2:	4653      	mov	r3, sl
 80014f4:	1a89      	subs	r1, r1, r2
 80014f6:	408b      	lsls	r3, r1
 80014f8:	001d      	movs	r5, r3
 80014fa:	4663      	mov	r3, ip
 80014fc:	40d3      	lsrs	r3, r2
 80014fe:	431d      	orrs	r5, r3
 8001500:	4663      	mov	r3, ip
 8001502:	408b      	lsls	r3, r1
 8001504:	0019      	movs	r1, r3
 8001506:	1e4b      	subs	r3, r1, #1
 8001508:	4199      	sbcs	r1, r3
 800150a:	4653      	mov	r3, sl
 800150c:	40d3      	lsrs	r3, r2
 800150e:	430d      	orrs	r5, r1
 8001510:	18e4      	adds	r4, r4, r3
 8001512:	182d      	adds	r5, r5, r0
 8001514:	4285      	cmp	r5, r0
 8001516:	4180      	sbcs	r0, r0
 8001518:	4240      	negs	r0, r0
 800151a:	1824      	adds	r4, r4, r0
 800151c:	0223      	lsls	r3, r4, #8
 800151e:	d559      	bpl.n	80015d4 <__aeabi_dadd+0x2cc>
 8001520:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <__aeabi_dadd+0x388>)
 8001522:	3701      	adds	r7, #1
 8001524:	429f      	cmp	r7, r3
 8001526:	d051      	beq.n	80015cc <__aeabi_dadd+0x2c4>
 8001528:	2101      	movs	r1, #1
 800152a:	4b5a      	ldr	r3, [pc, #360]	@ (8001694 <__aeabi_dadd+0x38c>)
 800152c:	086a      	lsrs	r2, r5, #1
 800152e:	401c      	ands	r4, r3
 8001530:	4029      	ands	r1, r5
 8001532:	430a      	orrs	r2, r1
 8001534:	07e5      	lsls	r5, r4, #31
 8001536:	4315      	orrs	r5, r2
 8001538:	0864      	lsrs	r4, r4, #1
 800153a:	e75f      	b.n	80013fc <__aeabi_dadd+0xf4>
 800153c:	4661      	mov	r1, ip
 800153e:	4653      	mov	r3, sl
 8001540:	4319      	orrs	r1, r3
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x23e>
 8001544:	e0bc      	b.n	80016c0 <__aeabi_dadd+0x3b8>
 8001546:	1e51      	subs	r1, r2, #1
 8001548:	2a01      	cmp	r2, #1
 800154a:	d100      	bne.n	800154e <__aeabi_dadd+0x246>
 800154c:	e164      	b.n	8001818 <__aeabi_dadd+0x510>
 800154e:	4d50      	ldr	r5, [pc, #320]	@ (8001690 <__aeabi_dadd+0x388>)
 8001550:	42aa      	cmp	r2, r5
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x24e>
 8001554:	e16a      	b.n	800182c <__aeabi_dadd+0x524>
 8001556:	2501      	movs	r5, #1
 8001558:	2938      	cmp	r1, #56	@ 0x38
 800155a:	dd00      	ble.n	800155e <__aeabi_dadd+0x256>
 800155c:	e722      	b.n	80013a4 <__aeabi_dadd+0x9c>
 800155e:	000a      	movs	r2, r1
 8001560:	e70e      	b.n	8001380 <__aeabi_dadd+0x78>
 8001562:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <__aeabi_dadd+0x390>)
 8001564:	1c7d      	adds	r5, r7, #1
 8001566:	4215      	tst	r5, r2
 8001568:	d000      	beq.n	800156c <__aeabi_dadd+0x264>
 800156a:	e0d0      	b.n	800170e <__aeabi_dadd+0x406>
 800156c:	0025      	movs	r5, r4
 800156e:	4662      	mov	r2, ip
 8001570:	4653      	mov	r3, sl
 8001572:	4305      	orrs	r5, r0
 8001574:	431a      	orrs	r2, r3
 8001576:	2f00      	cmp	r7, #0
 8001578:	d000      	beq.n	800157c <__aeabi_dadd+0x274>
 800157a:	e137      	b.n	80017ec <__aeabi_dadd+0x4e4>
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x27a>
 8001580:	e1a8      	b.n	80018d4 <__aeabi_dadd+0x5cc>
 8001582:	2a00      	cmp	r2, #0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x280>
 8001586:	e16a      	b.n	800185e <__aeabi_dadd+0x556>
 8001588:	4663      	mov	r3, ip
 800158a:	1ac5      	subs	r5, r0, r3
 800158c:	4653      	mov	r3, sl
 800158e:	1ae2      	subs	r2, r4, r3
 8001590:	42a8      	cmp	r0, r5
 8001592:	419b      	sbcs	r3, r3
 8001594:	425b      	negs	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	021a      	lsls	r2, r3, #8
 800159a:	d400      	bmi.n	800159e <__aeabi_dadd+0x296>
 800159c:	e203      	b.n	80019a6 <__aeabi_dadd+0x69e>
 800159e:	4663      	mov	r3, ip
 80015a0:	1a1d      	subs	r5, r3, r0
 80015a2:	45ac      	cmp	ip, r5
 80015a4:	4192      	sbcs	r2, r2
 80015a6:	4653      	mov	r3, sl
 80015a8:	4252      	negs	r2, r2
 80015aa:	1b1c      	subs	r4, r3, r4
 80015ac:	000e      	movs	r6, r1
 80015ae:	4688      	mov	r8, r1
 80015b0:	1aa4      	subs	r4, r4, r2
 80015b2:	e723      	b.n	80013fc <__aeabi_dadd+0xf4>
 80015b4:	4936      	ldr	r1, [pc, #216]	@ (8001690 <__aeabi_dadd+0x388>)
 80015b6:	428f      	cmp	r7, r1
 80015b8:	d070      	beq.n	800169c <__aeabi_dadd+0x394>
 80015ba:	2501      	movs	r5, #1
 80015bc:	2a38      	cmp	r2, #56	@ 0x38
 80015be:	dca8      	bgt.n	8001512 <__aeabi_dadd+0x20a>
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	4653      	mov	r3, sl
 80015c4:	0409      	lsls	r1, r1, #16
 80015c6:	430b      	orrs	r3, r1
 80015c8:	469a      	mov	sl, r3
 80015ca:	e78e      	b.n	80014ea <__aeabi_dadd+0x1e2>
 80015cc:	003c      	movs	r4, r7
 80015ce:	2500      	movs	r5, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	e731      	b.n	8001438 <__aeabi_dadd+0x130>
 80015d4:	2307      	movs	r3, #7
 80015d6:	402b      	ands	r3, r5
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d000      	beq.n	80015de <__aeabi_dadd+0x2d6>
 80015dc:	e710      	b.n	8001400 <__aeabi_dadd+0xf8>
 80015de:	e093      	b.n	8001708 <__aeabi_dadd+0x400>
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d074      	beq.n	80016ce <__aeabi_dadd+0x3c6>
 80015e4:	464a      	mov	r2, r9
 80015e6:	1bd2      	subs	r2, r2, r7
 80015e8:	2f00      	cmp	r7, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x2e6>
 80015ec:	e0c7      	b.n	800177e <__aeabi_dadd+0x476>
 80015ee:	4928      	ldr	r1, [pc, #160]	@ (8001690 <__aeabi_dadd+0x388>)
 80015f0:	4589      	cmp	r9, r1
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x2ee>
 80015f4:	e185      	b.n	8001902 <__aeabi_dadd+0x5fa>
 80015f6:	2501      	movs	r5, #1
 80015f8:	2a38      	cmp	r2, #56	@ 0x38
 80015fa:	dc12      	bgt.n	8001622 <__aeabi_dadd+0x31a>
 80015fc:	2180      	movs	r1, #128	@ 0x80
 80015fe:	0409      	lsls	r1, r1, #16
 8001600:	430c      	orrs	r4, r1
 8001602:	2a1f      	cmp	r2, #31
 8001604:	dd00      	ble.n	8001608 <__aeabi_dadd+0x300>
 8001606:	e1ab      	b.n	8001960 <__aeabi_dadd+0x658>
 8001608:	2120      	movs	r1, #32
 800160a:	0025      	movs	r5, r4
 800160c:	1a89      	subs	r1, r1, r2
 800160e:	0007      	movs	r7, r0
 8001610:	4088      	lsls	r0, r1
 8001612:	408d      	lsls	r5, r1
 8001614:	40d7      	lsrs	r7, r2
 8001616:	1e41      	subs	r1, r0, #1
 8001618:	4188      	sbcs	r0, r1
 800161a:	40d4      	lsrs	r4, r2
 800161c:	433d      	orrs	r5, r7
 800161e:	4305      	orrs	r5, r0
 8001620:	44a2      	add	sl, r4
 8001622:	4465      	add	r5, ip
 8001624:	4565      	cmp	r5, ip
 8001626:	4192      	sbcs	r2, r2
 8001628:	4252      	negs	r2, r2
 800162a:	4452      	add	r2, sl
 800162c:	0014      	movs	r4, r2
 800162e:	464f      	mov	r7, r9
 8001630:	e774      	b.n	800151c <__aeabi_dadd+0x214>
 8001632:	0028      	movs	r0, r5
 8001634:	f001 fd90 	bl	8003158 <__clzsi2>
 8001638:	0003      	movs	r3, r0
 800163a:	3318      	adds	r3, #24
 800163c:	2b1f      	cmp	r3, #31
 800163e:	dc00      	bgt.n	8001642 <__aeabi_dadd+0x33a>
 8001640:	e6c2      	b.n	80013c8 <__aeabi_dadd+0xc0>
 8001642:	002a      	movs	r2, r5
 8001644:	3808      	subs	r0, #8
 8001646:	4082      	lsls	r2, r0
 8001648:	429f      	cmp	r7, r3
 800164a:	dd00      	ble.n	800164e <__aeabi_dadd+0x346>
 800164c:	e0a9      	b.n	80017a2 <__aeabi_dadd+0x49a>
 800164e:	1bdb      	subs	r3, r3, r7
 8001650:	1c58      	adds	r0, r3, #1
 8001652:	281f      	cmp	r0, #31
 8001654:	dc00      	bgt.n	8001658 <__aeabi_dadd+0x350>
 8001656:	e1ac      	b.n	80019b2 <__aeabi_dadd+0x6aa>
 8001658:	0015      	movs	r5, r2
 800165a:	3b1f      	subs	r3, #31
 800165c:	40dd      	lsrs	r5, r3
 800165e:	2820      	cmp	r0, #32
 8001660:	d005      	beq.n	800166e <__aeabi_dadd+0x366>
 8001662:	2340      	movs	r3, #64	@ 0x40
 8001664:	1a1b      	subs	r3, r3, r0
 8001666:	409a      	lsls	r2, r3
 8001668:	1e53      	subs	r3, r2, #1
 800166a:	419a      	sbcs	r2, r3
 800166c:	4315      	orrs	r5, r2
 800166e:	2307      	movs	r3, #7
 8001670:	2700      	movs	r7, #0
 8001672:	402b      	ands	r3, r5
 8001674:	e7b0      	b.n	80015d8 <__aeabi_dadd+0x2d0>
 8001676:	08ed      	lsrs	r5, r5, #3
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <__aeabi_dadd+0x388>)
 800167a:	0762      	lsls	r2, r4, #29
 800167c:	432a      	orrs	r2, r5
 800167e:	08e4      	lsrs	r4, r4, #3
 8001680:	429f      	cmp	r7, r3
 8001682:	d00f      	beq.n	80016a4 <__aeabi_dadd+0x39c>
 8001684:	0324      	lsls	r4, r4, #12
 8001686:	0b25      	lsrs	r5, r4, #12
 8001688:	057c      	lsls	r4, r7, #21
 800168a:	0d64      	lsrs	r4, r4, #21
 800168c:	e6d4      	b.n	8001438 <__aeabi_dadd+0x130>
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	000007ff 	.word	0x000007ff
 8001694:	ff7fffff 	.word	0xff7fffff
 8001698:	000007fe 	.word	0x000007fe
 800169c:	08c0      	lsrs	r0, r0, #3
 800169e:	0762      	lsls	r2, r4, #29
 80016a0:	4302      	orrs	r2, r0
 80016a2:	08e4      	lsrs	r4, r4, #3
 80016a4:	0013      	movs	r3, r2
 80016a6:	4323      	orrs	r3, r4
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x3a4>
 80016aa:	e186      	b.n	80019ba <__aeabi_dadd+0x6b2>
 80016ac:	2580      	movs	r5, #128	@ 0x80
 80016ae:	032d      	lsls	r5, r5, #12
 80016b0:	4325      	orrs	r5, r4
 80016b2:	032d      	lsls	r5, r5, #12
 80016b4:	4cc3      	ldr	r4, [pc, #780]	@ (80019c4 <__aeabi_dadd+0x6bc>)
 80016b6:	0b2d      	lsrs	r5, r5, #12
 80016b8:	e6be      	b.n	8001438 <__aeabi_dadd+0x130>
 80016ba:	4660      	mov	r0, ip
 80016bc:	4654      	mov	r4, sl
 80016be:	000e      	movs	r6, r1
 80016c0:	0017      	movs	r7, r2
 80016c2:	08c5      	lsrs	r5, r0, #3
 80016c4:	e7d8      	b.n	8001678 <__aeabi_dadd+0x370>
 80016c6:	4cc0      	ldr	r4, [pc, #768]	@ (80019c8 <__aeabi_dadd+0x6c0>)
 80016c8:	1aff      	subs	r7, r7, r3
 80016ca:	4014      	ands	r4, r2
 80016cc:	e696      	b.n	80013fc <__aeabi_dadd+0xf4>
 80016ce:	4abf      	ldr	r2, [pc, #764]	@ (80019cc <__aeabi_dadd+0x6c4>)
 80016d0:	1c79      	adds	r1, r7, #1
 80016d2:	4211      	tst	r1, r2
 80016d4:	d16b      	bne.n	80017ae <__aeabi_dadd+0x4a6>
 80016d6:	0022      	movs	r2, r4
 80016d8:	4302      	orrs	r2, r0
 80016da:	2f00      	cmp	r7, #0
 80016dc:	d000      	beq.n	80016e0 <__aeabi_dadd+0x3d8>
 80016de:	e0db      	b.n	8001898 <__aeabi_dadd+0x590>
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x3de>
 80016e4:	e12d      	b.n	8001942 <__aeabi_dadd+0x63a>
 80016e6:	4662      	mov	r2, ip
 80016e8:	4653      	mov	r3, sl
 80016ea:	431a      	orrs	r2, r3
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dadd+0x3e8>
 80016ee:	e0b6      	b.n	800185e <__aeabi_dadd+0x556>
 80016f0:	4663      	mov	r3, ip
 80016f2:	18c5      	adds	r5, r0, r3
 80016f4:	4285      	cmp	r5, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	4454      	add	r4, sl
 80016fa:	4240      	negs	r0, r0
 80016fc:	1824      	adds	r4, r4, r0
 80016fe:	0223      	lsls	r3, r4, #8
 8001700:	d502      	bpl.n	8001708 <__aeabi_dadd+0x400>
 8001702:	000f      	movs	r7, r1
 8001704:	4bb0      	ldr	r3, [pc, #704]	@ (80019c8 <__aeabi_dadd+0x6c0>)
 8001706:	401c      	ands	r4, r3
 8001708:	003a      	movs	r2, r7
 800170a:	0028      	movs	r0, r5
 800170c:	e7d8      	b.n	80016c0 <__aeabi_dadd+0x3b8>
 800170e:	4662      	mov	r2, ip
 8001710:	1a85      	subs	r5, r0, r2
 8001712:	42a8      	cmp	r0, r5
 8001714:	4192      	sbcs	r2, r2
 8001716:	4653      	mov	r3, sl
 8001718:	4252      	negs	r2, r2
 800171a:	4691      	mov	r9, r2
 800171c:	1ae3      	subs	r3, r4, r3
 800171e:	001a      	movs	r2, r3
 8001720:	464b      	mov	r3, r9
 8001722:	1ad2      	subs	r2, r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	4691      	mov	r9, r2
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	d454      	bmi.n	80017d6 <__aeabi_dadd+0x4ce>
 800172c:	464a      	mov	r2, r9
 800172e:	464c      	mov	r4, r9
 8001730:	432a      	orrs	r2, r5
 8001732:	d000      	beq.n	8001736 <__aeabi_dadd+0x42e>
 8001734:	e640      	b.n	80013b8 <__aeabi_dadd+0xb0>
 8001736:	2600      	movs	r6, #0
 8001738:	2400      	movs	r4, #0
 800173a:	2500      	movs	r5, #0
 800173c:	e67c      	b.n	8001438 <__aeabi_dadd+0x130>
 800173e:	4da1      	ldr	r5, [pc, #644]	@ (80019c4 <__aeabi_dadd+0x6bc>)
 8001740:	45a9      	cmp	r9, r5
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x43e>
 8001744:	e090      	b.n	8001868 <__aeabi_dadd+0x560>
 8001746:	2501      	movs	r5, #1
 8001748:	2a38      	cmp	r2, #56	@ 0x38
 800174a:	dd00      	ble.n	800174e <__aeabi_dadd+0x446>
 800174c:	e6ab      	b.n	80014a6 <__aeabi_dadd+0x19e>
 800174e:	2580      	movs	r5, #128	@ 0x80
 8001750:	042d      	lsls	r5, r5, #16
 8001752:	432c      	orrs	r4, r5
 8001754:	e695      	b.n	8001482 <__aeabi_dadd+0x17a>
 8001756:	0011      	movs	r1, r2
 8001758:	4655      	mov	r5, sl
 800175a:	3920      	subs	r1, #32
 800175c:	40cd      	lsrs	r5, r1
 800175e:	46a9      	mov	r9, r5
 8001760:	2a20      	cmp	r2, #32
 8001762:	d006      	beq.n	8001772 <__aeabi_dadd+0x46a>
 8001764:	2140      	movs	r1, #64	@ 0x40
 8001766:	4653      	mov	r3, sl
 8001768:	1a8a      	subs	r2, r1, r2
 800176a:	4093      	lsls	r3, r2
 800176c:	4662      	mov	r2, ip
 800176e:	431a      	orrs	r2, r3
 8001770:	4694      	mov	ip, r2
 8001772:	4665      	mov	r5, ip
 8001774:	1e6b      	subs	r3, r5, #1
 8001776:	419d      	sbcs	r5, r3
 8001778:	464b      	mov	r3, r9
 800177a:	431d      	orrs	r5, r3
 800177c:	e612      	b.n	80013a4 <__aeabi_dadd+0x9c>
 800177e:	0021      	movs	r1, r4
 8001780:	4301      	orrs	r1, r0
 8001782:	d100      	bne.n	8001786 <__aeabi_dadd+0x47e>
 8001784:	e0c4      	b.n	8001910 <__aeabi_dadd+0x608>
 8001786:	1e51      	subs	r1, r2, #1
 8001788:	2a01      	cmp	r2, #1
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x486>
 800178c:	e0fb      	b.n	8001986 <__aeabi_dadd+0x67e>
 800178e:	4d8d      	ldr	r5, [pc, #564]	@ (80019c4 <__aeabi_dadd+0x6bc>)
 8001790:	42aa      	cmp	r2, r5
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x48e>
 8001794:	e0b5      	b.n	8001902 <__aeabi_dadd+0x5fa>
 8001796:	2501      	movs	r5, #1
 8001798:	2938      	cmp	r1, #56	@ 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dadd+0x496>
 800179c:	e741      	b.n	8001622 <__aeabi_dadd+0x31a>
 800179e:	000a      	movs	r2, r1
 80017a0:	e72f      	b.n	8001602 <__aeabi_dadd+0x2fa>
 80017a2:	4c89      	ldr	r4, [pc, #548]	@ (80019c8 <__aeabi_dadd+0x6c0>)
 80017a4:	1aff      	subs	r7, r7, r3
 80017a6:	4014      	ands	r4, r2
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08e4      	lsrs	r4, r4, #3
 80017ac:	e76a      	b.n	8001684 <__aeabi_dadd+0x37c>
 80017ae:	4a85      	ldr	r2, [pc, #532]	@ (80019c4 <__aeabi_dadd+0x6bc>)
 80017b0:	4291      	cmp	r1, r2
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dadd+0x4ae>
 80017b4:	e0e3      	b.n	800197e <__aeabi_dadd+0x676>
 80017b6:	4663      	mov	r3, ip
 80017b8:	18c2      	adds	r2, r0, r3
 80017ba:	4282      	cmp	r2, r0
 80017bc:	4180      	sbcs	r0, r0
 80017be:	0023      	movs	r3, r4
 80017c0:	4240      	negs	r0, r0
 80017c2:	4453      	add	r3, sl
 80017c4:	181b      	adds	r3, r3, r0
 80017c6:	07dd      	lsls	r5, r3, #31
 80017c8:	085c      	lsrs	r4, r3, #1
 80017ca:	2307      	movs	r3, #7
 80017cc:	0852      	lsrs	r2, r2, #1
 80017ce:	4315      	orrs	r5, r2
 80017d0:	000f      	movs	r7, r1
 80017d2:	402b      	ands	r3, r5
 80017d4:	e700      	b.n	80015d8 <__aeabi_dadd+0x2d0>
 80017d6:	4663      	mov	r3, ip
 80017d8:	1a1d      	subs	r5, r3, r0
 80017da:	45ac      	cmp	ip, r5
 80017dc:	4192      	sbcs	r2, r2
 80017de:	4653      	mov	r3, sl
 80017e0:	4252      	negs	r2, r2
 80017e2:	1b1c      	subs	r4, r3, r4
 80017e4:	000e      	movs	r6, r1
 80017e6:	4688      	mov	r8, r1
 80017e8:	1aa4      	subs	r4, r4, r2
 80017ea:	e5e5      	b.n	80013b8 <__aeabi_dadd+0xb0>
 80017ec:	2d00      	cmp	r5, #0
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x4ea>
 80017f0:	e091      	b.n	8001916 <__aeabi_dadd+0x60e>
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d138      	bne.n	8001868 <__aeabi_dadd+0x560>
 80017f6:	2480      	movs	r4, #128	@ 0x80
 80017f8:	2600      	movs	r6, #0
 80017fa:	0324      	lsls	r4, r4, #12
 80017fc:	e756      	b.n	80016ac <__aeabi_dadd+0x3a4>
 80017fe:	4663      	mov	r3, ip
 8001800:	18c5      	adds	r5, r0, r3
 8001802:	4285      	cmp	r5, r0
 8001804:	4180      	sbcs	r0, r0
 8001806:	4454      	add	r4, sl
 8001808:	4240      	negs	r0, r0
 800180a:	1824      	adds	r4, r4, r0
 800180c:	2701      	movs	r7, #1
 800180e:	0223      	lsls	r3, r4, #8
 8001810:	d400      	bmi.n	8001814 <__aeabi_dadd+0x50c>
 8001812:	e6df      	b.n	80015d4 <__aeabi_dadd+0x2cc>
 8001814:	2702      	movs	r7, #2
 8001816:	e687      	b.n	8001528 <__aeabi_dadd+0x220>
 8001818:	4663      	mov	r3, ip
 800181a:	1ac5      	subs	r5, r0, r3
 800181c:	42a8      	cmp	r0, r5
 800181e:	4180      	sbcs	r0, r0
 8001820:	4653      	mov	r3, sl
 8001822:	4240      	negs	r0, r0
 8001824:	1ae4      	subs	r4, r4, r3
 8001826:	2701      	movs	r7, #1
 8001828:	1a24      	subs	r4, r4, r0
 800182a:	e5c0      	b.n	80013ae <__aeabi_dadd+0xa6>
 800182c:	0762      	lsls	r2, r4, #29
 800182e:	08c0      	lsrs	r0, r0, #3
 8001830:	4302      	orrs	r2, r0
 8001832:	08e4      	lsrs	r4, r4, #3
 8001834:	e736      	b.n	80016a4 <__aeabi_dadd+0x39c>
 8001836:	0011      	movs	r1, r2
 8001838:	4653      	mov	r3, sl
 800183a:	3920      	subs	r1, #32
 800183c:	40cb      	lsrs	r3, r1
 800183e:	4699      	mov	r9, r3
 8001840:	2a20      	cmp	r2, #32
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x54a>
 8001844:	2140      	movs	r1, #64	@ 0x40
 8001846:	4653      	mov	r3, sl
 8001848:	1a8a      	subs	r2, r1, r2
 800184a:	4093      	lsls	r3, r2
 800184c:	4662      	mov	r2, ip
 800184e:	431a      	orrs	r2, r3
 8001850:	4694      	mov	ip, r2
 8001852:	4665      	mov	r5, ip
 8001854:	1e6b      	subs	r3, r5, #1
 8001856:	419d      	sbcs	r5, r3
 8001858:	464b      	mov	r3, r9
 800185a:	431d      	orrs	r5, r3
 800185c:	e659      	b.n	8001512 <__aeabi_dadd+0x20a>
 800185e:	0762      	lsls	r2, r4, #29
 8001860:	08c0      	lsrs	r0, r0, #3
 8001862:	4302      	orrs	r2, r0
 8001864:	08e4      	lsrs	r4, r4, #3
 8001866:	e70d      	b.n	8001684 <__aeabi_dadd+0x37c>
 8001868:	4653      	mov	r3, sl
 800186a:	075a      	lsls	r2, r3, #29
 800186c:	4663      	mov	r3, ip
 800186e:	08d8      	lsrs	r0, r3, #3
 8001870:	4653      	mov	r3, sl
 8001872:	000e      	movs	r6, r1
 8001874:	4302      	orrs	r2, r0
 8001876:	08dc      	lsrs	r4, r3, #3
 8001878:	e714      	b.n	80016a4 <__aeabi_dadd+0x39c>
 800187a:	0015      	movs	r5, r2
 800187c:	0026      	movs	r6, r4
 800187e:	3d20      	subs	r5, #32
 8001880:	40ee      	lsrs	r6, r5
 8001882:	2a20      	cmp	r2, #32
 8001884:	d003      	beq.n	800188e <__aeabi_dadd+0x586>
 8001886:	2540      	movs	r5, #64	@ 0x40
 8001888:	1aaa      	subs	r2, r5, r2
 800188a:	4094      	lsls	r4, r2
 800188c:	4320      	orrs	r0, r4
 800188e:	1e42      	subs	r2, r0, #1
 8001890:	4190      	sbcs	r0, r2
 8001892:	0005      	movs	r5, r0
 8001894:	4335      	orrs	r5, r6
 8001896:	e606      	b.n	80014a6 <__aeabi_dadd+0x19e>
 8001898:	2a00      	cmp	r2, #0
 800189a:	d07c      	beq.n	8001996 <__aeabi_dadd+0x68e>
 800189c:	4662      	mov	r2, ip
 800189e:	4653      	mov	r3, sl
 80018a0:	08c0      	lsrs	r0, r0, #3
 80018a2:	431a      	orrs	r2, r3
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x5a0>
 80018a6:	e6fa      	b.n	800169e <__aeabi_dadd+0x396>
 80018a8:	0762      	lsls	r2, r4, #29
 80018aa:	4310      	orrs	r0, r2
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	08e4      	lsrs	r4, r4, #3
 80018b0:	0312      	lsls	r2, r2, #12
 80018b2:	4214      	tst	r4, r2
 80018b4:	d008      	beq.n	80018c8 <__aeabi_dadd+0x5c0>
 80018b6:	08d9      	lsrs	r1, r3, #3
 80018b8:	4211      	tst	r1, r2
 80018ba:	d105      	bne.n	80018c8 <__aeabi_dadd+0x5c0>
 80018bc:	4663      	mov	r3, ip
 80018be:	08d8      	lsrs	r0, r3, #3
 80018c0:	4653      	mov	r3, sl
 80018c2:	000c      	movs	r4, r1
 80018c4:	075b      	lsls	r3, r3, #29
 80018c6:	4318      	orrs	r0, r3
 80018c8:	0f42      	lsrs	r2, r0, #29
 80018ca:	00c0      	lsls	r0, r0, #3
 80018cc:	08c0      	lsrs	r0, r0, #3
 80018ce:	0752      	lsls	r2, r2, #29
 80018d0:	4302      	orrs	r2, r0
 80018d2:	e6e7      	b.n	80016a4 <__aeabi_dadd+0x39c>
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x5d2>
 80018d8:	e72d      	b.n	8001736 <__aeabi_dadd+0x42e>
 80018da:	4663      	mov	r3, ip
 80018dc:	08d8      	lsrs	r0, r3, #3
 80018de:	4653      	mov	r3, sl
 80018e0:	075a      	lsls	r2, r3, #29
 80018e2:	000e      	movs	r6, r1
 80018e4:	4302      	orrs	r2, r0
 80018e6:	08dc      	lsrs	r4, r3, #3
 80018e8:	e6cc      	b.n	8001684 <__aeabi_dadd+0x37c>
 80018ea:	4663      	mov	r3, ip
 80018ec:	1a1d      	subs	r5, r3, r0
 80018ee:	45ac      	cmp	ip, r5
 80018f0:	4192      	sbcs	r2, r2
 80018f2:	4653      	mov	r3, sl
 80018f4:	4252      	negs	r2, r2
 80018f6:	1b1c      	subs	r4, r3, r4
 80018f8:	000e      	movs	r6, r1
 80018fa:	4688      	mov	r8, r1
 80018fc:	1aa4      	subs	r4, r4, r2
 80018fe:	3701      	adds	r7, #1
 8001900:	e555      	b.n	80013ae <__aeabi_dadd+0xa6>
 8001902:	4663      	mov	r3, ip
 8001904:	08d9      	lsrs	r1, r3, #3
 8001906:	4653      	mov	r3, sl
 8001908:	075a      	lsls	r2, r3, #29
 800190a:	430a      	orrs	r2, r1
 800190c:	08dc      	lsrs	r4, r3, #3
 800190e:	e6c9      	b.n	80016a4 <__aeabi_dadd+0x39c>
 8001910:	4660      	mov	r0, ip
 8001912:	4654      	mov	r4, sl
 8001914:	e6d4      	b.n	80016c0 <__aeabi_dadd+0x3b8>
 8001916:	08c0      	lsrs	r0, r0, #3
 8001918:	2a00      	cmp	r2, #0
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x616>
 800191c:	e6bf      	b.n	800169e <__aeabi_dadd+0x396>
 800191e:	0762      	lsls	r2, r4, #29
 8001920:	4310      	orrs	r0, r2
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	08e4      	lsrs	r4, r4, #3
 8001926:	0312      	lsls	r2, r2, #12
 8001928:	4214      	tst	r4, r2
 800192a:	d0cd      	beq.n	80018c8 <__aeabi_dadd+0x5c0>
 800192c:	08dd      	lsrs	r5, r3, #3
 800192e:	4215      	tst	r5, r2
 8001930:	d1ca      	bne.n	80018c8 <__aeabi_dadd+0x5c0>
 8001932:	4663      	mov	r3, ip
 8001934:	08d8      	lsrs	r0, r3, #3
 8001936:	4653      	mov	r3, sl
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	000e      	movs	r6, r1
 800193c:	002c      	movs	r4, r5
 800193e:	4318      	orrs	r0, r3
 8001940:	e7c2      	b.n	80018c8 <__aeabi_dadd+0x5c0>
 8001942:	4663      	mov	r3, ip
 8001944:	08d9      	lsrs	r1, r3, #3
 8001946:	4653      	mov	r3, sl
 8001948:	075a      	lsls	r2, r3, #29
 800194a:	430a      	orrs	r2, r1
 800194c:	08dc      	lsrs	r4, r3, #3
 800194e:	e699      	b.n	8001684 <__aeabi_dadd+0x37c>
 8001950:	4663      	mov	r3, ip
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	4653      	mov	r3, sl
 8001956:	075a      	lsls	r2, r3, #29
 8001958:	000e      	movs	r6, r1
 800195a:	4302      	orrs	r2, r0
 800195c:	08dc      	lsrs	r4, r3, #3
 800195e:	e6a1      	b.n	80016a4 <__aeabi_dadd+0x39c>
 8001960:	0011      	movs	r1, r2
 8001962:	0027      	movs	r7, r4
 8001964:	3920      	subs	r1, #32
 8001966:	40cf      	lsrs	r7, r1
 8001968:	2a20      	cmp	r2, #32
 800196a:	d003      	beq.n	8001974 <__aeabi_dadd+0x66c>
 800196c:	2140      	movs	r1, #64	@ 0x40
 800196e:	1a8a      	subs	r2, r1, r2
 8001970:	4094      	lsls	r4, r2
 8001972:	4320      	orrs	r0, r4
 8001974:	1e42      	subs	r2, r0, #1
 8001976:	4190      	sbcs	r0, r2
 8001978:	0005      	movs	r5, r0
 800197a:	433d      	orrs	r5, r7
 800197c:	e651      	b.n	8001622 <__aeabi_dadd+0x31a>
 800197e:	000c      	movs	r4, r1
 8001980:	2500      	movs	r5, #0
 8001982:	2200      	movs	r2, #0
 8001984:	e558      	b.n	8001438 <__aeabi_dadd+0x130>
 8001986:	4460      	add	r0, ip
 8001988:	4560      	cmp	r0, ip
 800198a:	4192      	sbcs	r2, r2
 800198c:	4454      	add	r4, sl
 800198e:	4252      	negs	r2, r2
 8001990:	0005      	movs	r5, r0
 8001992:	18a4      	adds	r4, r4, r2
 8001994:	e73a      	b.n	800180c <__aeabi_dadd+0x504>
 8001996:	4653      	mov	r3, sl
 8001998:	075a      	lsls	r2, r3, #29
 800199a:	4663      	mov	r3, ip
 800199c:	08d9      	lsrs	r1, r3, #3
 800199e:	4653      	mov	r3, sl
 80019a0:	430a      	orrs	r2, r1
 80019a2:	08dc      	lsrs	r4, r3, #3
 80019a4:	e67e      	b.n	80016a4 <__aeabi_dadd+0x39c>
 80019a6:	001a      	movs	r2, r3
 80019a8:	001c      	movs	r4, r3
 80019aa:	432a      	orrs	r2, r5
 80019ac:	d000      	beq.n	80019b0 <__aeabi_dadd+0x6a8>
 80019ae:	e6ab      	b.n	8001708 <__aeabi_dadd+0x400>
 80019b0:	e6c1      	b.n	8001736 <__aeabi_dadd+0x42e>
 80019b2:	2120      	movs	r1, #32
 80019b4:	2500      	movs	r5, #0
 80019b6:	1a09      	subs	r1, r1, r0
 80019b8:	e519      	b.n	80013ee <__aeabi_dadd+0xe6>
 80019ba:	2200      	movs	r2, #0
 80019bc:	2500      	movs	r5, #0
 80019be:	4c01      	ldr	r4, [pc, #4]	@ (80019c4 <__aeabi_dadd+0x6bc>)
 80019c0:	e53a      	b.n	8001438 <__aeabi_dadd+0x130>
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	ff7fffff 	.word	0xff7fffff
 80019cc:	000007fe 	.word	0x000007fe

080019d0 <__aeabi_ddiv>:
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	46de      	mov	lr, fp
 80019d4:	4645      	mov	r5, r8
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	b087      	sub	sp, #28
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0b1b      	lsrs	r3, r3, #12
 80019e6:	469b      	mov	fp, r3
 80019e8:	0fca      	lsrs	r2, r1, #31
 80019ea:	004b      	lsls	r3, r1, #1
 80019ec:	0004      	movs	r4, r0
 80019ee:	4680      	mov	r8, r0
 80019f0:	0d5b      	lsrs	r3, r3, #21
 80019f2:	9202      	str	r2, [sp, #8]
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x28>
 80019f6:	e16a      	b.n	8001cce <__aeabi_ddiv+0x2fe>
 80019f8:	4ad4      	ldr	r2, [pc, #848]	@ (8001d4c <__aeabi_ddiv+0x37c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d100      	bne.n	8001a00 <__aeabi_ddiv+0x30>
 80019fe:	e18c      	b.n	8001d1a <__aeabi_ddiv+0x34a>
 8001a00:	4659      	mov	r1, fp
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	430a      	orrs	r2, r1
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	00c2      	lsls	r2, r0, #3
 8001a10:	4690      	mov	r8, r2
 8001a12:	4acf      	ldr	r2, [pc, #828]	@ (8001d50 <__aeabi_ddiv+0x380>)
 8001a14:	4689      	mov	r9, r1
 8001a16:	4692      	mov	sl, r2
 8001a18:	449a      	add	sl, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	9303      	str	r3, [sp, #12]
 8001a20:	9e00      	ldr	r6, [sp, #0]
 8001a22:	9f01      	ldr	r7, [sp, #4]
 8001a24:	033b      	lsls	r3, r7, #12
 8001a26:	0b1b      	lsrs	r3, r3, #12
 8001a28:	469b      	mov	fp, r3
 8001a2a:	007b      	lsls	r3, r7, #1
 8001a2c:	0030      	movs	r0, r6
 8001a2e:	0d5b      	lsrs	r3, r3, #21
 8001a30:	0ffd      	lsrs	r5, r7, #31
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d100      	bne.n	8001a38 <__aeabi_ddiv+0x68>
 8001a36:	e128      	b.n	8001c8a <__aeabi_ddiv+0x2ba>
 8001a38:	4ac4      	ldr	r2, [pc, #784]	@ (8001d4c <__aeabi_ddiv+0x37c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x70>
 8001a3e:	e177      	b.n	8001d30 <__aeabi_ddiv+0x360>
 8001a40:	4659      	mov	r1, fp
 8001a42:	0f72      	lsrs	r2, r6, #29
 8001a44:	00c9      	lsls	r1, r1, #3
 8001a46:	430a      	orrs	r2, r1
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	0409      	lsls	r1, r1, #16
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	468b      	mov	fp, r1
 8001a50:	49bf      	ldr	r1, [pc, #764]	@ (8001d50 <__aeabi_ddiv+0x380>)
 8001a52:	00f2      	lsls	r2, r6, #3
 8001a54:	468c      	mov	ip, r1
 8001a56:	4651      	mov	r1, sl
 8001a58:	4463      	add	r3, ip
 8001a5a:	1acb      	subs	r3, r1, r3
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9e02      	ldr	r6, [sp, #8]
 8001a62:	406e      	eors	r6, r5
 8001a64:	2c0f      	cmp	r4, #15
 8001a66:	d827      	bhi.n	8001ab8 <__aeabi_ddiv+0xe8>
 8001a68:	49ba      	ldr	r1, [pc, #744]	@ (8001d54 <__aeabi_ddiv+0x384>)
 8001a6a:	00a4      	lsls	r4, r4, #2
 8001a6c:	5909      	ldr	r1, [r1, r4]
 8001a6e:	468f      	mov	pc, r1
 8001a70:	46cb      	mov	fp, r9
 8001a72:	4642      	mov	r2, r8
 8001a74:	9e02      	ldr	r6, [sp, #8]
 8001a76:	9b03      	ldr	r3, [sp, #12]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d016      	beq.n	8001aaa <__aeabi_ddiv+0xda>
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_ddiv+0xb2>
 8001a80:	e2a6      	b.n	8001fd0 <__aeabi_ddiv+0x600>
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d000      	beq.n	8001a88 <__aeabi_ddiv+0xb8>
 8001a86:	e0df      	b.n	8001c48 <__aeabi_ddiv+0x278>
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2400      	movs	r4, #0
 8001a8e:	4690      	mov	r8, r2
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4323      	orrs	r3, r4
 8001a94:	07f6      	lsls	r6, r6, #31
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4640      	mov	r0, r8
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	b007      	add	sp, #28
 8001a9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa0:	46bb      	mov	fp, r7
 8001aa2:	46b2      	mov	sl, r6
 8001aa4:	46a9      	mov	r9, r5
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2400      	movs	r4, #0
 8001aae:	4690      	mov	r8, r2
 8001ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8001d4c <__aeabi_ddiv+0x37c>)
 8001ab2:	e7ed      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001ab4:	002e      	movs	r6, r5
 8001ab6:	e7df      	b.n	8001a78 <__aeabi_ddiv+0xa8>
 8001ab8:	45cb      	cmp	fp, r9
 8001aba:	d200      	bcs.n	8001abe <__aeabi_ddiv+0xee>
 8001abc:	e1d4      	b.n	8001e68 <__aeabi_ddiv+0x498>
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_ddiv+0xf2>
 8001ac0:	e1cf      	b.n	8001e62 <__aeabi_ddiv+0x492>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	469c      	mov	ip, r3
 8001ac8:	4644      	mov	r4, r8
 8001aca:	4648      	mov	r0, r9
 8001acc:	2700      	movs	r7, #0
 8001ace:	44e2      	add	sl, ip
 8001ad0:	465b      	mov	r3, fp
 8001ad2:	0e15      	lsrs	r5, r2, #24
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	431d      	orrs	r5, r3
 8001ad8:	0c19      	lsrs	r1, r3, #16
 8001ada:	042b      	lsls	r3, r5, #16
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	9500      	str	r5, [sp, #0]
 8001ae0:	0c1d      	lsrs	r5, r3, #16
 8001ae2:	4691      	mov	r9, r2
 8001ae4:	9102      	str	r1, [sp, #8]
 8001ae6:	9503      	str	r5, [sp, #12]
 8001ae8:	f7fe fba6 	bl	8000238 <__aeabi_uidivmod>
 8001aec:	0002      	movs	r2, r0
 8001aee:	436a      	muls	r2, r5
 8001af0:	040b      	lsls	r3, r1, #16
 8001af2:	0c21      	lsrs	r1, r4, #16
 8001af4:	4680      	mov	r8, r0
 8001af6:	4319      	orrs	r1, r3
 8001af8:	428a      	cmp	r2, r1
 8001afa:	d909      	bls.n	8001b10 <__aeabi_ddiv+0x140>
 8001afc:	9d00      	ldr	r5, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	46ac      	mov	ip, r5
 8001b02:	425b      	negs	r3, r3
 8001b04:	4461      	add	r1, ip
 8001b06:	469c      	mov	ip, r3
 8001b08:	44e0      	add	r8, ip
 8001b0a:	428d      	cmp	r5, r1
 8001b0c:	d800      	bhi.n	8001b10 <__aeabi_ddiv+0x140>
 8001b0e:	e1fb      	b.n	8001f08 <__aeabi_ddiv+0x538>
 8001b10:	1a88      	subs	r0, r1, r2
 8001b12:	9902      	ldr	r1, [sp, #8]
 8001b14:	f7fe fb90 	bl	8000238 <__aeabi_uidivmod>
 8001b18:	9a03      	ldr	r2, [sp, #12]
 8001b1a:	0424      	lsls	r4, r4, #16
 8001b1c:	4342      	muls	r2, r0
 8001b1e:	0409      	lsls	r1, r1, #16
 8001b20:	0c24      	lsrs	r4, r4, #16
 8001b22:	0003      	movs	r3, r0
 8001b24:	430c      	orrs	r4, r1
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d906      	bls.n	8001b38 <__aeabi_ddiv+0x168>
 8001b2a:	9900      	ldr	r1, [sp, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	468c      	mov	ip, r1
 8001b30:	4464      	add	r4, ip
 8001b32:	42a1      	cmp	r1, r4
 8001b34:	d800      	bhi.n	8001b38 <__aeabi_ddiv+0x168>
 8001b36:	e1e1      	b.n	8001efc <__aeabi_ddiv+0x52c>
 8001b38:	1aa0      	subs	r0, r4, r2
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	0412      	lsls	r2, r2, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	4693      	mov	fp, r2
 8001b42:	464b      	mov	r3, r9
 8001b44:	4659      	mov	r1, fp
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	001d      	movs	r5, r3
 8001b4a:	9304      	str	r3, [sp, #16]
 8001b4c:	040b      	lsls	r3, r1, #16
 8001b4e:	4649      	mov	r1, r9
 8001b50:	0409      	lsls	r1, r1, #16
 8001b52:	0c09      	lsrs	r1, r1, #16
 8001b54:	000c      	movs	r4, r1
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	435c      	muls	r4, r3
 8001b5a:	0c12      	lsrs	r2, r2, #16
 8001b5c:	436b      	muls	r3, r5
 8001b5e:	4688      	mov	r8, r1
 8001b60:	4351      	muls	r1, r2
 8001b62:	436a      	muls	r2, r5
 8001b64:	0c25      	lsrs	r5, r4, #16
 8001b66:	46ac      	mov	ip, r5
 8001b68:	185b      	adds	r3, r3, r1
 8001b6a:	4463      	add	r3, ip
 8001b6c:	4299      	cmp	r1, r3
 8001b6e:	d903      	bls.n	8001b78 <__aeabi_ddiv+0x1a8>
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0249      	lsls	r1, r1, #9
 8001b74:	468c      	mov	ip, r1
 8001b76:	4462      	add	r2, ip
 8001b78:	0c19      	lsrs	r1, r3, #16
 8001b7a:	0424      	lsls	r4, r4, #16
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	0c24      	lsrs	r4, r4, #16
 8001b80:	188a      	adds	r2, r1, r2
 8001b82:	191c      	adds	r4, r3, r4
 8001b84:	4290      	cmp	r0, r2
 8001b86:	d302      	bcc.n	8001b8e <__aeabi_ddiv+0x1be>
 8001b88:	d116      	bne.n	8001bb8 <__aeabi_ddiv+0x1e8>
 8001b8a:	42a7      	cmp	r7, r4
 8001b8c:	d214      	bcs.n	8001bb8 <__aeabi_ddiv+0x1e8>
 8001b8e:	465b      	mov	r3, fp
 8001b90:	9d00      	ldr	r5, [sp, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	444f      	add	r7, r9
 8001b96:	9305      	str	r3, [sp, #20]
 8001b98:	454f      	cmp	r7, r9
 8001b9a:	419b      	sbcs	r3, r3
 8001b9c:	46ac      	mov	ip, r5
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	4463      	add	r3, ip
 8001ba2:	18c0      	adds	r0, r0, r3
 8001ba4:	4285      	cmp	r5, r0
 8001ba6:	d300      	bcc.n	8001baa <__aeabi_ddiv+0x1da>
 8001ba8:	e1a1      	b.n	8001eee <__aeabi_ddiv+0x51e>
 8001baa:	4282      	cmp	r2, r0
 8001bac:	d900      	bls.n	8001bb0 <__aeabi_ddiv+0x1e0>
 8001bae:	e1f6      	b.n	8001f9e <__aeabi_ddiv+0x5ce>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x1e4>
 8001bb2:	e1f1      	b.n	8001f98 <__aeabi_ddiv+0x5c8>
 8001bb4:	9b05      	ldr	r3, [sp, #20]
 8001bb6:	469b      	mov	fp, r3
 8001bb8:	1b3c      	subs	r4, r7, r4
 8001bba:	42a7      	cmp	r7, r4
 8001bbc:	41bf      	sbcs	r7, r7
 8001bbe:	9d00      	ldr	r5, [sp, #0]
 8001bc0:	1a80      	subs	r0, r0, r2
 8001bc2:	427f      	negs	r7, r7
 8001bc4:	1bc0      	subs	r0, r0, r7
 8001bc6:	4285      	cmp	r5, r0
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x1fc>
 8001bca:	e1d0      	b.n	8001f6e <__aeabi_ddiv+0x59e>
 8001bcc:	9902      	ldr	r1, [sp, #8]
 8001bce:	f7fe fb33 	bl	8000238 <__aeabi_uidivmod>
 8001bd2:	9a03      	ldr	r2, [sp, #12]
 8001bd4:	040b      	lsls	r3, r1, #16
 8001bd6:	4342      	muls	r2, r0
 8001bd8:	0c21      	lsrs	r1, r4, #16
 8001bda:	0007      	movs	r7, r0
 8001bdc:	4319      	orrs	r1, r3
 8001bde:	428a      	cmp	r2, r1
 8001be0:	d900      	bls.n	8001be4 <__aeabi_ddiv+0x214>
 8001be2:	e178      	b.n	8001ed6 <__aeabi_ddiv+0x506>
 8001be4:	1a88      	subs	r0, r1, r2
 8001be6:	9902      	ldr	r1, [sp, #8]
 8001be8:	f7fe fb26 	bl	8000238 <__aeabi_uidivmod>
 8001bec:	9a03      	ldr	r2, [sp, #12]
 8001bee:	0424      	lsls	r4, r4, #16
 8001bf0:	4342      	muls	r2, r0
 8001bf2:	0409      	lsls	r1, r1, #16
 8001bf4:	0c24      	lsrs	r4, r4, #16
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	42a2      	cmp	r2, r4
 8001bfc:	d900      	bls.n	8001c00 <__aeabi_ddiv+0x230>
 8001bfe:	e15d      	b.n	8001ebc <__aeabi_ddiv+0x4ec>
 8001c00:	4641      	mov	r1, r8
 8001c02:	1aa4      	subs	r4, r4, r2
 8001c04:	043a      	lsls	r2, r7, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	9d04      	ldr	r5, [sp, #16]
 8001c0a:	0413      	lsls	r3, r2, #16
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	4359      	muls	r1, r3
 8001c10:	4647      	mov	r7, r8
 8001c12:	436b      	muls	r3, r5
 8001c14:	469c      	mov	ip, r3
 8001c16:	0c10      	lsrs	r0, r2, #16
 8001c18:	4347      	muls	r7, r0
 8001c1a:	0c0b      	lsrs	r3, r1, #16
 8001c1c:	44bc      	add	ip, r7
 8001c1e:	4463      	add	r3, ip
 8001c20:	4368      	muls	r0, r5
 8001c22:	429f      	cmp	r7, r3
 8001c24:	d903      	bls.n	8001c2e <__aeabi_ddiv+0x25e>
 8001c26:	2580      	movs	r5, #128	@ 0x80
 8001c28:	026d      	lsls	r5, r5, #9
 8001c2a:	46ac      	mov	ip, r5
 8001c2c:	4460      	add	r0, ip
 8001c2e:	0c1f      	lsrs	r7, r3, #16
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	0c09      	lsrs	r1, r1, #16
 8001c36:	183f      	adds	r7, r7, r0
 8001c38:	185b      	adds	r3, r3, r1
 8001c3a:	42bc      	cmp	r4, r7
 8001c3c:	d200      	bcs.n	8001c40 <__aeabi_ddiv+0x270>
 8001c3e:	e102      	b.n	8001e46 <__aeabi_ddiv+0x476>
 8001c40:	d100      	bne.n	8001c44 <__aeabi_ddiv+0x274>
 8001c42:	e0fd      	b.n	8001e40 <__aeabi_ddiv+0x470>
 8001c44:	2301      	movs	r3, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <__aeabi_ddiv+0x388>)
 8001c4a:	4453      	add	r3, sl
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_ddiv+0x282>
 8001c50:	e0ae      	b.n	8001db0 <__aeabi_ddiv+0x3e0>
 8001c52:	0751      	lsls	r1, r2, #29
 8001c54:	d000      	beq.n	8001c58 <__aeabi_ddiv+0x288>
 8001c56:	e198      	b.n	8001f8a <__aeabi_ddiv+0x5ba>
 8001c58:	4659      	mov	r1, fp
 8001c5a:	01c9      	lsls	r1, r1, #7
 8001c5c:	d506      	bpl.n	8001c6c <__aeabi_ddiv+0x29c>
 8001c5e:	4659      	mov	r1, fp
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <__aeabi_ddiv+0x38c>)
 8001c62:	4019      	ands	r1, r3
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	468b      	mov	fp, r1
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4453      	add	r3, sl
 8001c6c:	493c      	ldr	r1, [pc, #240]	@ (8001d60 <__aeabi_ddiv+0x390>)
 8001c6e:	428b      	cmp	r3, r1
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_ddiv+0x2a4>
 8001c72:	e71a      	b.n	8001aaa <__aeabi_ddiv+0xda>
 8001c74:	4659      	mov	r1, fp
 8001c76:	08d2      	lsrs	r2, r2, #3
 8001c78:	0749      	lsls	r1, r1, #29
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	465a      	mov	r2, fp
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	0254      	lsls	r4, r2, #9
 8001c82:	4688      	mov	r8, r1
 8001c84:	0b24      	lsrs	r4, r4, #12
 8001c86:	0d5b      	lsrs	r3, r3, #21
 8001c88:	e702      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001c8a:	465a      	mov	r2, fp
 8001c8c:	9b00      	ldr	r3, [sp, #0]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x2c4>
 8001c92:	e07e      	b.n	8001d92 <__aeabi_ddiv+0x3c2>
 8001c94:	465b      	mov	r3, fp
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_ddiv+0x2cc>
 8001c9a:	e100      	b.n	8001e9e <__aeabi_ddiv+0x4ce>
 8001c9c:	4658      	mov	r0, fp
 8001c9e:	f001 fa5b 	bl	8003158 <__clzsi2>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	3a0b      	subs	r2, #11
 8001ca8:	271d      	movs	r7, #29
 8001caa:	9e00      	ldr	r6, [sp, #0]
 8001cac:	1aba      	subs	r2, r7, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4658      	mov	r0, fp
 8001cb2:	40d6      	lsrs	r6, r2
 8001cb4:	3908      	subs	r1, #8
 8001cb6:	4088      	lsls	r0, r1
 8001cb8:	0032      	movs	r2, r6
 8001cba:	4302      	orrs	r2, r0
 8001cbc:	4693      	mov	fp, r2
 8001cbe:	9a00      	ldr	r2, [sp, #0]
 8001cc0:	408a      	lsls	r2, r1
 8001cc2:	4928      	ldr	r1, [pc, #160]	@ (8001d64 <__aeabi_ddiv+0x394>)
 8001cc4:	4453      	add	r3, sl
 8001cc6:	468a      	mov	sl, r1
 8001cc8:	449a      	add	sl, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e6c8      	b.n	8001a60 <__aeabi_ddiv+0x90>
 8001cce:	465b      	mov	r3, fp
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	4699      	mov	r9, r3
 8001cd4:	d056      	beq.n	8001d84 <__aeabi_ddiv+0x3b4>
 8001cd6:	465b      	mov	r3, fp
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d100      	bne.n	8001cde <__aeabi_ddiv+0x30e>
 8001cdc:	e0cd      	b.n	8001e7a <__aeabi_ddiv+0x4aa>
 8001cde:	4658      	mov	r0, fp
 8001ce0:	f001 fa3a 	bl	8003158 <__clzsi2>
 8001ce4:	230b      	movs	r3, #11
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	469c      	mov	ip, r3
 8001cea:	0002      	movs	r2, r0
 8001cec:	4484      	add	ip, r0
 8001cee:	4666      	mov	r6, ip
 8001cf0:	231d      	movs	r3, #29
 8001cf2:	1b9b      	subs	r3, r3, r6
 8001cf4:	0026      	movs	r6, r4
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	4658      	mov	r0, fp
 8001cfa:	40de      	lsrs	r6, r3
 8001cfc:	3908      	subs	r1, #8
 8001cfe:	4088      	lsls	r0, r1
 8001d00:	0033      	movs	r3, r6
 8001d02:	4303      	orrs	r3, r0
 8001d04:	4699      	mov	r9, r3
 8001d06:	0023      	movs	r3, r4
 8001d08:	408b      	lsls	r3, r1
 8001d0a:	4698      	mov	r8, r3
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <__aeabi_ddiv+0x398>)
 8001d0e:	2400      	movs	r4, #0
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	469a      	mov	sl, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9303      	str	r3, [sp, #12]
 8001d18:	e682      	b.n	8001a20 <__aeabi_ddiv+0x50>
 8001d1a:	465a      	mov	r2, fp
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	4691      	mov	r9, r2
 8001d20:	d12a      	bne.n	8001d78 <__aeabi_ddiv+0x3a8>
 8001d22:	2200      	movs	r2, #0
 8001d24:	469a      	mov	sl, r3
 8001d26:	2302      	movs	r3, #2
 8001d28:	4690      	mov	r8, r2
 8001d2a:	2408      	movs	r4, #8
 8001d2c:	9303      	str	r3, [sp, #12]
 8001d2e:	e677      	b.n	8001a20 <__aeabi_ddiv+0x50>
 8001d30:	465a      	mov	r2, fp
 8001d32:	9b00      	ldr	r3, [sp, #0]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <__aeabi_ddiv+0x39c>)
 8001d38:	469c      	mov	ip, r3
 8001d3a:	44e2      	add	sl, ip
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d117      	bne.n	8001d70 <__aeabi_ddiv+0x3a0>
 8001d40:	2302      	movs	r3, #2
 8001d42:	431c      	orrs	r4, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	469b      	mov	fp, r3
 8001d48:	3302      	adds	r3, #2
 8001d4a:	e689      	b.n	8001a60 <__aeabi_ddiv+0x90>
 8001d4c:	000007ff 	.word	0x000007ff
 8001d50:	fffffc01 	.word	0xfffffc01
 8001d54:	08006f10 	.word	0x08006f10
 8001d58:	000003ff 	.word	0x000003ff
 8001d5c:	feffffff 	.word	0xfeffffff
 8001d60:	000007fe 	.word	0x000007fe
 8001d64:	000003f3 	.word	0x000003f3
 8001d68:	fffffc0d 	.word	0xfffffc0d
 8001d6c:	fffff801 	.word	0xfffff801
 8001d70:	2303      	movs	r3, #3
 8001d72:	0032      	movs	r2, r6
 8001d74:	431c      	orrs	r4, r3
 8001d76:	e673      	b.n	8001a60 <__aeabi_ddiv+0x90>
 8001d78:	469a      	mov	sl, r3
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	46d9      	mov	r9, fp
 8001d7e:	240c      	movs	r4, #12
 8001d80:	9303      	str	r3, [sp, #12]
 8001d82:	e64d      	b.n	8001a20 <__aeabi_ddiv+0x50>
 8001d84:	2300      	movs	r3, #0
 8001d86:	4698      	mov	r8, r3
 8001d88:	469a      	mov	sl, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	2404      	movs	r4, #4
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	e646      	b.n	8001a20 <__aeabi_ddiv+0x50>
 8001d92:	2301      	movs	r3, #1
 8001d94:	431c      	orrs	r4, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	469b      	mov	fp, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	e660      	b.n	8001a60 <__aeabi_ddiv+0x90>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2480      	movs	r4, #128	@ 0x80
 8001da2:	4698      	mov	r8, r3
 8001da4:	2600      	movs	r6, #0
 8001da6:	4b92      	ldr	r3, [pc, #584]	@ (8001ff0 <__aeabi_ddiv+0x620>)
 8001da8:	0324      	lsls	r4, r4, #12
 8001daa:	e671      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001dac:	2201      	movs	r2, #1
 8001dae:	4252      	negs	r2, r2
 8001db0:	2101      	movs	r1, #1
 8001db2:	1ac9      	subs	r1, r1, r3
 8001db4:	2938      	cmp	r1, #56	@ 0x38
 8001db6:	dd00      	ble.n	8001dba <__aeabi_ddiv+0x3ea>
 8001db8:	e666      	b.n	8001a88 <__aeabi_ddiv+0xb8>
 8001dba:	291f      	cmp	r1, #31
 8001dbc:	dc00      	bgt.n	8001dc0 <__aeabi_ddiv+0x3f0>
 8001dbe:	e0ab      	b.n	8001f18 <__aeabi_ddiv+0x548>
 8001dc0:	201f      	movs	r0, #31
 8001dc2:	4240      	negs	r0, r0
 8001dc4:	1ac3      	subs	r3, r0, r3
 8001dc6:	4658      	mov	r0, fp
 8001dc8:	40d8      	lsrs	r0, r3
 8001dca:	0003      	movs	r3, r0
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d004      	beq.n	8001dda <__aeabi_ddiv+0x40a>
 8001dd0:	4658      	mov	r0, fp
 8001dd2:	4988      	ldr	r1, [pc, #544]	@ (8001ff4 <__aeabi_ddiv+0x624>)
 8001dd4:	4451      	add	r1, sl
 8001dd6:	4088      	lsls	r0, r1
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	1e51      	subs	r1, r2, #1
 8001ddc:	418a      	sbcs	r2, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	2307      	movs	r3, #7
 8001de2:	0019      	movs	r1, r3
 8001de4:	2400      	movs	r4, #0
 8001de6:	4011      	ands	r1, r2
 8001de8:	4213      	tst	r3, r2
 8001dea:	d00c      	beq.n	8001e06 <__aeabi_ddiv+0x436>
 8001dec:	230f      	movs	r3, #15
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d100      	bne.n	8001df6 <__aeabi_ddiv+0x426>
 8001df4:	e0f9      	b.n	8001fea <__aeabi_ddiv+0x61a>
 8001df6:	1d11      	adds	r1, r2, #4
 8001df8:	4291      	cmp	r1, r2
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	000a      	movs	r2, r1
 8001dfe:	425b      	negs	r3, r3
 8001e00:	0759      	lsls	r1, r3, #29
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	0b1c      	lsrs	r4, r3, #12
 8001e06:	08d2      	lsrs	r2, r2, #3
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e63f      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001e10:	2480      	movs	r4, #128	@ 0x80
 8001e12:	464b      	mov	r3, r9
 8001e14:	0324      	lsls	r4, r4, #12
 8001e16:	4223      	tst	r3, r4
 8001e18:	d009      	beq.n	8001e2e <__aeabi_ddiv+0x45e>
 8001e1a:	465b      	mov	r3, fp
 8001e1c:	4223      	tst	r3, r4
 8001e1e:	d106      	bne.n	8001e2e <__aeabi_ddiv+0x45e>
 8001e20:	431c      	orrs	r4, r3
 8001e22:	0324      	lsls	r4, r4, #12
 8001e24:	002e      	movs	r6, r5
 8001e26:	4690      	mov	r8, r2
 8001e28:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <__aeabi_ddiv+0x620>)
 8001e2a:	0b24      	lsrs	r4, r4, #12
 8001e2c:	e630      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001e2e:	2480      	movs	r4, #128	@ 0x80
 8001e30:	464b      	mov	r3, r9
 8001e32:	0324      	lsls	r4, r4, #12
 8001e34:	431c      	orrs	r4, r3
 8001e36:	0324      	lsls	r4, r4, #12
 8001e38:	9e02      	ldr	r6, [sp, #8]
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff0 <__aeabi_ddiv+0x620>)
 8001e3c:	0b24      	lsrs	r4, r4, #12
 8001e3e:	e627      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_ddiv+0x476>
 8001e44:	e700      	b.n	8001c48 <__aeabi_ddiv+0x278>
 8001e46:	9800      	ldr	r0, [sp, #0]
 8001e48:	1e51      	subs	r1, r2, #1
 8001e4a:	4684      	mov	ip, r0
 8001e4c:	4464      	add	r4, ip
 8001e4e:	4284      	cmp	r4, r0
 8001e50:	d200      	bcs.n	8001e54 <__aeabi_ddiv+0x484>
 8001e52:	e084      	b.n	8001f5e <__aeabi_ddiv+0x58e>
 8001e54:	42bc      	cmp	r4, r7
 8001e56:	d200      	bcs.n	8001e5a <__aeabi_ddiv+0x48a>
 8001e58:	e0ae      	b.n	8001fb8 <__aeabi_ddiv+0x5e8>
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_ddiv+0x48e>
 8001e5c:	e0c1      	b.n	8001fe2 <__aeabi_ddiv+0x612>
 8001e5e:	000a      	movs	r2, r1
 8001e60:	e6f0      	b.n	8001c44 <__aeabi_ddiv+0x274>
 8001e62:	4542      	cmp	r2, r8
 8001e64:	d900      	bls.n	8001e68 <__aeabi_ddiv+0x498>
 8001e66:	e62c      	b.n	8001ac2 <__aeabi_ddiv+0xf2>
 8001e68:	464b      	mov	r3, r9
 8001e6a:	07dc      	lsls	r4, r3, #31
 8001e6c:	0858      	lsrs	r0, r3, #1
 8001e6e:	4643      	mov	r3, r8
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	431c      	orrs	r4, r3
 8001e74:	4643      	mov	r3, r8
 8001e76:	07df      	lsls	r7, r3, #31
 8001e78:	e62a      	b.n	8001ad0 <__aeabi_ddiv+0x100>
 8001e7a:	f001 f96d 	bl	8003158 <__clzsi2>
 8001e7e:	2315      	movs	r3, #21
 8001e80:	469c      	mov	ip, r3
 8001e82:	4484      	add	ip, r0
 8001e84:	0002      	movs	r2, r0
 8001e86:	4663      	mov	r3, ip
 8001e88:	3220      	adds	r2, #32
 8001e8a:	2b1c      	cmp	r3, #28
 8001e8c:	dc00      	bgt.n	8001e90 <__aeabi_ddiv+0x4c0>
 8001e8e:	e72e      	b.n	8001cee <__aeabi_ddiv+0x31e>
 8001e90:	0023      	movs	r3, r4
 8001e92:	3808      	subs	r0, #8
 8001e94:	4083      	lsls	r3, r0
 8001e96:	4699      	mov	r9, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	e736      	b.n	8001d0c <__aeabi_ddiv+0x33c>
 8001e9e:	f001 f95b 	bl	8003158 <__clzsi2>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	3215      	adds	r2, #21
 8001ea8:	3320      	adds	r3, #32
 8001eaa:	2a1c      	cmp	r2, #28
 8001eac:	dc00      	bgt.n	8001eb0 <__aeabi_ddiv+0x4e0>
 8001eae:	e6fb      	b.n	8001ca8 <__aeabi_ddiv+0x2d8>
 8001eb0:	9900      	ldr	r1, [sp, #0]
 8001eb2:	3808      	subs	r0, #8
 8001eb4:	4081      	lsls	r1, r0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	468b      	mov	fp, r1
 8001eba:	e702      	b.n	8001cc2 <__aeabi_ddiv+0x2f2>
 8001ebc:	9900      	ldr	r1, [sp, #0]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	468c      	mov	ip, r1
 8001ec2:	4464      	add	r4, ip
 8001ec4:	42a1      	cmp	r1, r4
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x4fa>
 8001ec8:	e69a      	b.n	8001c00 <__aeabi_ddiv+0x230>
 8001eca:	42a2      	cmp	r2, r4
 8001ecc:	d800      	bhi.n	8001ed0 <__aeabi_ddiv+0x500>
 8001ece:	e697      	b.n	8001c00 <__aeabi_ddiv+0x230>
 8001ed0:	1e83      	subs	r3, r0, #2
 8001ed2:	4464      	add	r4, ip
 8001ed4:	e694      	b.n	8001c00 <__aeabi_ddiv+0x230>
 8001ed6:	46ac      	mov	ip, r5
 8001ed8:	4461      	add	r1, ip
 8001eda:	3f01      	subs	r7, #1
 8001edc:	428d      	cmp	r5, r1
 8001ede:	d900      	bls.n	8001ee2 <__aeabi_ddiv+0x512>
 8001ee0:	e680      	b.n	8001be4 <__aeabi_ddiv+0x214>
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	d800      	bhi.n	8001ee8 <__aeabi_ddiv+0x518>
 8001ee6:	e67d      	b.n	8001be4 <__aeabi_ddiv+0x214>
 8001ee8:	1e87      	subs	r7, r0, #2
 8001eea:	4461      	add	r1, ip
 8001eec:	e67a      	b.n	8001be4 <__aeabi_ddiv+0x214>
 8001eee:	4285      	cmp	r5, r0
 8001ef0:	d000      	beq.n	8001ef4 <__aeabi_ddiv+0x524>
 8001ef2:	e65f      	b.n	8001bb4 <__aeabi_ddiv+0x1e4>
 8001ef4:	45b9      	cmp	r9, r7
 8001ef6:	d900      	bls.n	8001efa <__aeabi_ddiv+0x52a>
 8001ef8:	e65c      	b.n	8001bb4 <__aeabi_ddiv+0x1e4>
 8001efa:	e656      	b.n	8001baa <__aeabi_ddiv+0x1da>
 8001efc:	42a2      	cmp	r2, r4
 8001efe:	d800      	bhi.n	8001f02 <__aeabi_ddiv+0x532>
 8001f00:	e61a      	b.n	8001b38 <__aeabi_ddiv+0x168>
 8001f02:	1e83      	subs	r3, r0, #2
 8001f04:	4464      	add	r4, ip
 8001f06:	e617      	b.n	8001b38 <__aeabi_ddiv+0x168>
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d800      	bhi.n	8001f0e <__aeabi_ddiv+0x53e>
 8001f0c:	e600      	b.n	8001b10 <__aeabi_ddiv+0x140>
 8001f0e:	46ac      	mov	ip, r5
 8001f10:	1e83      	subs	r3, r0, #2
 8001f12:	4698      	mov	r8, r3
 8001f14:	4461      	add	r1, ip
 8001f16:	e5fb      	b.n	8001b10 <__aeabi_ddiv+0x140>
 8001f18:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <__aeabi_ddiv+0x628>)
 8001f1a:	0014      	movs	r4, r2
 8001f1c:	4450      	add	r0, sl
 8001f1e:	4082      	lsls	r2, r0
 8001f20:	465b      	mov	r3, fp
 8001f22:	0017      	movs	r7, r2
 8001f24:	4083      	lsls	r3, r0
 8001f26:	40cc      	lsrs	r4, r1
 8001f28:	1e7a      	subs	r2, r7, #1
 8001f2a:	4197      	sbcs	r7, r2
 8001f2c:	4323      	orrs	r3, r4
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	001a      	movs	r2, r3
 8001f32:	465b      	mov	r3, fp
 8001f34:	40cb      	lsrs	r3, r1
 8001f36:	0751      	lsls	r1, r2, #29
 8001f38:	d009      	beq.n	8001f4e <__aeabi_ddiv+0x57e>
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	4011      	ands	r1, r2
 8001f3e:	2904      	cmp	r1, #4
 8001f40:	d005      	beq.n	8001f4e <__aeabi_ddiv+0x57e>
 8001f42:	1d11      	adds	r1, r2, #4
 8001f44:	4291      	cmp	r1, r2
 8001f46:	4192      	sbcs	r2, r2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	189b      	adds	r3, r3, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	0219      	lsls	r1, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_ddiv+0x584>
 8001f52:	e755      	b.n	8001e00 <__aeabi_ddiv+0x430>
 8001f54:	2200      	movs	r2, #0
 8001f56:	2301      	movs	r3, #1
 8001f58:	2400      	movs	r4, #0
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	e598      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001f5e:	000a      	movs	r2, r1
 8001f60:	42bc      	cmp	r4, r7
 8001f62:	d000      	beq.n	8001f66 <__aeabi_ddiv+0x596>
 8001f64:	e66e      	b.n	8001c44 <__aeabi_ddiv+0x274>
 8001f66:	454b      	cmp	r3, r9
 8001f68:	d000      	beq.n	8001f6c <__aeabi_ddiv+0x59c>
 8001f6a:	e66b      	b.n	8001c44 <__aeabi_ddiv+0x274>
 8001f6c:	e66c      	b.n	8001c48 <__aeabi_ddiv+0x278>
 8001f6e:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <__aeabi_ddiv+0x62c>)
 8001f70:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <__aeabi_ddiv+0x630>)
 8001f72:	4453      	add	r3, sl
 8001f74:	4592      	cmp	sl, r2
 8001f76:	da00      	bge.n	8001f7a <__aeabi_ddiv+0x5aa>
 8001f78:	e718      	b.n	8001dac <__aeabi_ddiv+0x3dc>
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4249      	negs	r1, r1
 8001f7e:	1d0a      	adds	r2, r1, #4
 8001f80:	428a      	cmp	r2, r1
 8001f82:	4189      	sbcs	r1, r1
 8001f84:	4249      	negs	r1, r1
 8001f86:	448b      	add	fp, r1
 8001f88:	e666      	b.n	8001c58 <__aeabi_ddiv+0x288>
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	4011      	ands	r1, r2
 8001f8e:	2904      	cmp	r1, #4
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x5c4>
 8001f92:	e661      	b.n	8001c58 <__aeabi_ddiv+0x288>
 8001f94:	0011      	movs	r1, r2
 8001f96:	e7f2      	b.n	8001f7e <__aeabi_ddiv+0x5ae>
 8001f98:	42bc      	cmp	r4, r7
 8001f9a:	d800      	bhi.n	8001f9e <__aeabi_ddiv+0x5ce>
 8001f9c:	e60a      	b.n	8001bb4 <__aeabi_ddiv+0x1e4>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	469c      	mov	ip, r3
 8001fa4:	9900      	ldr	r1, [sp, #0]
 8001fa6:	444f      	add	r7, r9
 8001fa8:	454f      	cmp	r7, r9
 8001faa:	419b      	sbcs	r3, r3
 8001fac:	44e3      	add	fp, ip
 8001fae:	468c      	mov	ip, r1
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	4463      	add	r3, ip
 8001fb4:	18c0      	adds	r0, r0, r3
 8001fb6:	e5ff      	b.n	8001bb8 <__aeabi_ddiv+0x1e8>
 8001fb8:	4649      	mov	r1, r9
 8001fba:	9d00      	ldr	r5, [sp, #0]
 8001fbc:	0048      	lsls	r0, r1, #1
 8001fbe:	4548      	cmp	r0, r9
 8001fc0:	4189      	sbcs	r1, r1
 8001fc2:	46ac      	mov	ip, r5
 8001fc4:	4249      	negs	r1, r1
 8001fc6:	4461      	add	r1, ip
 8001fc8:	4681      	mov	r9, r0
 8001fca:	3a02      	subs	r2, #2
 8001fcc:	1864      	adds	r4, r4, r1
 8001fce:	e7c7      	b.n	8001f60 <__aeabi_ddiv+0x590>
 8001fd0:	2480      	movs	r4, #128	@ 0x80
 8001fd2:	465b      	mov	r3, fp
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	431c      	orrs	r4, r3
 8001fd8:	0324      	lsls	r4, r4, #12
 8001fda:	4690      	mov	r8, r2
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__aeabi_ddiv+0x620>)
 8001fde:	0b24      	lsrs	r4, r4, #12
 8001fe0:	e556      	b.n	8001a90 <__aeabi_ddiv+0xc0>
 8001fe2:	4599      	cmp	r9, r3
 8001fe4:	d3e8      	bcc.n	8001fb8 <__aeabi_ddiv+0x5e8>
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	e7bd      	b.n	8001f66 <__aeabi_ddiv+0x596>
 8001fea:	2300      	movs	r3, #0
 8001fec:	e708      	b.n	8001e00 <__aeabi_ddiv+0x430>
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	000007ff 	.word	0x000007ff
 8001ff4:	0000043e 	.word	0x0000043e
 8001ff8:	0000041e 	.word	0x0000041e
 8001ffc:	000003ff 	.word	0x000003ff
 8002000:	fffffc02 	.word	0xfffffc02

08002004 <__eqdf2>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	4657      	mov	r7, sl
 8002008:	46de      	mov	lr, fp
 800200a:	464e      	mov	r6, r9
 800200c:	4645      	mov	r5, r8
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	000d      	movs	r5, r1
 8002012:	0004      	movs	r4, r0
 8002014:	0fe8      	lsrs	r0, r5, #31
 8002016:	4683      	mov	fp, r0
 8002018:	0309      	lsls	r1, r1, #12
 800201a:	0fd8      	lsrs	r0, r3, #31
 800201c:	0b09      	lsrs	r1, r1, #12
 800201e:	4682      	mov	sl, r0
 8002020:	4819      	ldr	r0, [pc, #100]	@ (8002088 <__eqdf2+0x84>)
 8002022:	468c      	mov	ip, r1
 8002024:	031f      	lsls	r7, r3, #12
 8002026:	0069      	lsls	r1, r5, #1
 8002028:	005e      	lsls	r6, r3, #1
 800202a:	0d49      	lsrs	r1, r1, #21
 800202c:	0b3f      	lsrs	r7, r7, #12
 800202e:	0d76      	lsrs	r6, r6, #21
 8002030:	4281      	cmp	r1, r0
 8002032:	d018      	beq.n	8002066 <__eqdf2+0x62>
 8002034:	4286      	cmp	r6, r0
 8002036:	d00f      	beq.n	8002058 <__eqdf2+0x54>
 8002038:	2001      	movs	r0, #1
 800203a:	42b1      	cmp	r1, r6
 800203c:	d10d      	bne.n	800205a <__eqdf2+0x56>
 800203e:	45bc      	cmp	ip, r7
 8002040:	d10b      	bne.n	800205a <__eqdf2+0x56>
 8002042:	4294      	cmp	r4, r2
 8002044:	d109      	bne.n	800205a <__eqdf2+0x56>
 8002046:	45d3      	cmp	fp, sl
 8002048:	d01c      	beq.n	8002084 <__eqdf2+0x80>
 800204a:	2900      	cmp	r1, #0
 800204c:	d105      	bne.n	800205a <__eqdf2+0x56>
 800204e:	4660      	mov	r0, ip
 8002050:	4320      	orrs	r0, r4
 8002052:	1e43      	subs	r3, r0, #1
 8002054:	4198      	sbcs	r0, r3
 8002056:	e000      	b.n	800205a <__eqdf2+0x56>
 8002058:	2001      	movs	r0, #1
 800205a:	bcf0      	pop	{r4, r5, r6, r7}
 800205c:	46bb      	mov	fp, r7
 800205e:	46b2      	mov	sl, r6
 8002060:	46a9      	mov	r9, r5
 8002062:	46a0      	mov	r8, r4
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	2001      	movs	r0, #1
 8002068:	428e      	cmp	r6, r1
 800206a:	d1f6      	bne.n	800205a <__eqdf2+0x56>
 800206c:	4661      	mov	r1, ip
 800206e:	4339      	orrs	r1, r7
 8002070:	000f      	movs	r7, r1
 8002072:	4317      	orrs	r7, r2
 8002074:	4327      	orrs	r7, r4
 8002076:	d1f0      	bne.n	800205a <__eqdf2+0x56>
 8002078:	465b      	mov	r3, fp
 800207a:	4652      	mov	r2, sl
 800207c:	1a98      	subs	r0, r3, r2
 800207e:	1e43      	subs	r3, r0, #1
 8002080:	4198      	sbcs	r0, r3
 8002082:	e7ea      	b.n	800205a <__eqdf2+0x56>
 8002084:	2000      	movs	r0, #0
 8002086:	e7e8      	b.n	800205a <__eqdf2+0x56>
 8002088:	000007ff 	.word	0x000007ff

0800208c <__gedf2>:
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	4657      	mov	r7, sl
 8002090:	464e      	mov	r6, r9
 8002092:	4645      	mov	r5, r8
 8002094:	46de      	mov	lr, fp
 8002096:	b5e0      	push	{r5, r6, r7, lr}
 8002098:	000d      	movs	r5, r1
 800209a:	030f      	lsls	r7, r1, #12
 800209c:	0b39      	lsrs	r1, r7, #12
 800209e:	b083      	sub	sp, #12
 80020a0:	0004      	movs	r4, r0
 80020a2:	4680      	mov	r8, r0
 80020a4:	9101      	str	r1, [sp, #4]
 80020a6:	0058      	lsls	r0, r3, #1
 80020a8:	0fe9      	lsrs	r1, r5, #31
 80020aa:	4f31      	ldr	r7, [pc, #196]	@ (8002170 <__gedf2+0xe4>)
 80020ac:	0d40      	lsrs	r0, r0, #21
 80020ae:	468c      	mov	ip, r1
 80020b0:	006e      	lsls	r6, r5, #1
 80020b2:	0319      	lsls	r1, r3, #12
 80020b4:	4682      	mov	sl, r0
 80020b6:	4691      	mov	r9, r2
 80020b8:	0d76      	lsrs	r6, r6, #21
 80020ba:	0b09      	lsrs	r1, r1, #12
 80020bc:	0fd8      	lsrs	r0, r3, #31
 80020be:	42be      	cmp	r6, r7
 80020c0:	d01f      	beq.n	8002102 <__gedf2+0x76>
 80020c2:	45ba      	cmp	sl, r7
 80020c4:	d00f      	beq.n	80020e6 <__gedf2+0x5a>
 80020c6:	2e00      	cmp	r6, #0
 80020c8:	d12f      	bne.n	800212a <__gedf2+0x9e>
 80020ca:	4655      	mov	r5, sl
 80020cc:	9e01      	ldr	r6, [sp, #4]
 80020ce:	4334      	orrs	r4, r6
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d127      	bne.n	8002124 <__gedf2+0x98>
 80020d4:	430a      	orrs	r2, r1
 80020d6:	d03a      	beq.n	800214e <__gedf2+0xc2>
 80020d8:	2c00      	cmp	r4, #0
 80020da:	d145      	bne.n	8002168 <__gedf2+0xdc>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d11a      	bne.n	8002116 <__gedf2+0x8a>
 80020e0:	2001      	movs	r0, #1
 80020e2:	4240      	negs	r0, r0
 80020e4:	e017      	b.n	8002116 <__gedf2+0x8a>
 80020e6:	4311      	orrs	r1, r2
 80020e8:	d13b      	bne.n	8002162 <__gedf2+0xd6>
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	d102      	bne.n	80020f4 <__gedf2+0x68>
 80020ee:	9f01      	ldr	r7, [sp, #4]
 80020f0:	4327      	orrs	r7, r4
 80020f2:	d0f3      	beq.n	80020dc <__gedf2+0x50>
 80020f4:	4584      	cmp	ip, r0
 80020f6:	d109      	bne.n	800210c <__gedf2+0x80>
 80020f8:	4663      	mov	r3, ip
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <__gedf2+0x54>
 80020fe:	4660      	mov	r0, ip
 8002100:	e009      	b.n	8002116 <__gedf2+0x8a>
 8002102:	9f01      	ldr	r7, [sp, #4]
 8002104:	4327      	orrs	r7, r4
 8002106:	d12c      	bne.n	8002162 <__gedf2+0xd6>
 8002108:	45b2      	cmp	sl, r6
 800210a:	d024      	beq.n	8002156 <__gedf2+0xca>
 800210c:	4663      	mov	r3, ip
 800210e:	2002      	movs	r0, #2
 8002110:	3b01      	subs	r3, #1
 8002112:	4018      	ands	r0, r3
 8002114:	3801      	subs	r0, #1
 8002116:	b003      	add	sp, #12
 8002118:	bcf0      	pop	{r4, r5, r6, r7}
 800211a:	46bb      	mov	fp, r7
 800211c:	46b2      	mov	sl, r6
 800211e:	46a9      	mov	r9, r5
 8002120:	46a0      	mov	r8, r4
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	2c00      	cmp	r4, #0
 8002126:	d0d9      	beq.n	80020dc <__gedf2+0x50>
 8002128:	e7e4      	b.n	80020f4 <__gedf2+0x68>
 800212a:	4654      	mov	r4, sl
 800212c:	2c00      	cmp	r4, #0
 800212e:	d0ed      	beq.n	800210c <__gedf2+0x80>
 8002130:	4584      	cmp	ip, r0
 8002132:	d1eb      	bne.n	800210c <__gedf2+0x80>
 8002134:	4556      	cmp	r6, sl
 8002136:	dce9      	bgt.n	800210c <__gedf2+0x80>
 8002138:	dbde      	blt.n	80020f8 <__gedf2+0x6c>
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	428b      	cmp	r3, r1
 800213e:	d8e5      	bhi.n	800210c <__gedf2+0x80>
 8002140:	d1da      	bne.n	80020f8 <__gedf2+0x6c>
 8002142:	45c8      	cmp	r8, r9
 8002144:	d8e2      	bhi.n	800210c <__gedf2+0x80>
 8002146:	2000      	movs	r0, #0
 8002148:	45c8      	cmp	r8, r9
 800214a:	d2e4      	bcs.n	8002116 <__gedf2+0x8a>
 800214c:	e7d4      	b.n	80020f8 <__gedf2+0x6c>
 800214e:	2000      	movs	r0, #0
 8002150:	2c00      	cmp	r4, #0
 8002152:	d0e0      	beq.n	8002116 <__gedf2+0x8a>
 8002154:	e7da      	b.n	800210c <__gedf2+0x80>
 8002156:	4311      	orrs	r1, r2
 8002158:	d103      	bne.n	8002162 <__gedf2+0xd6>
 800215a:	4584      	cmp	ip, r0
 800215c:	d1d6      	bne.n	800210c <__gedf2+0x80>
 800215e:	2000      	movs	r0, #0
 8002160:	e7d9      	b.n	8002116 <__gedf2+0x8a>
 8002162:	2002      	movs	r0, #2
 8002164:	4240      	negs	r0, r0
 8002166:	e7d6      	b.n	8002116 <__gedf2+0x8a>
 8002168:	4584      	cmp	ip, r0
 800216a:	d0e6      	beq.n	800213a <__gedf2+0xae>
 800216c:	e7ce      	b.n	800210c <__gedf2+0x80>
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	000007ff 	.word	0x000007ff

08002174 <__ledf2>:
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	4657      	mov	r7, sl
 8002178:	464e      	mov	r6, r9
 800217a:	4645      	mov	r5, r8
 800217c:	46de      	mov	lr, fp
 800217e:	b5e0      	push	{r5, r6, r7, lr}
 8002180:	000d      	movs	r5, r1
 8002182:	030f      	lsls	r7, r1, #12
 8002184:	0004      	movs	r4, r0
 8002186:	4680      	mov	r8, r0
 8002188:	0fe8      	lsrs	r0, r5, #31
 800218a:	0b39      	lsrs	r1, r7, #12
 800218c:	4684      	mov	ip, r0
 800218e:	b083      	sub	sp, #12
 8002190:	0058      	lsls	r0, r3, #1
 8002192:	4f30      	ldr	r7, [pc, #192]	@ (8002254 <__ledf2+0xe0>)
 8002194:	0d40      	lsrs	r0, r0, #21
 8002196:	9101      	str	r1, [sp, #4]
 8002198:	031e      	lsls	r6, r3, #12
 800219a:	0069      	lsls	r1, r5, #1
 800219c:	4682      	mov	sl, r0
 800219e:	4691      	mov	r9, r2
 80021a0:	0d49      	lsrs	r1, r1, #21
 80021a2:	0b36      	lsrs	r6, r6, #12
 80021a4:	0fd8      	lsrs	r0, r3, #31
 80021a6:	42b9      	cmp	r1, r7
 80021a8:	d020      	beq.n	80021ec <__ledf2+0x78>
 80021aa:	45ba      	cmp	sl, r7
 80021ac:	d00f      	beq.n	80021ce <__ledf2+0x5a>
 80021ae:	2900      	cmp	r1, #0
 80021b0:	d12b      	bne.n	800220a <__ledf2+0x96>
 80021b2:	9901      	ldr	r1, [sp, #4]
 80021b4:	430c      	orrs	r4, r1
 80021b6:	4651      	mov	r1, sl
 80021b8:	2900      	cmp	r1, #0
 80021ba:	d137      	bne.n	800222c <__ledf2+0xb8>
 80021bc:	4332      	orrs	r2, r6
 80021be:	d038      	beq.n	8002232 <__ledf2+0xbe>
 80021c0:	2c00      	cmp	r4, #0
 80021c2:	d144      	bne.n	800224e <__ledf2+0xda>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d119      	bne.n	80021fc <__ledf2+0x88>
 80021c8:	2001      	movs	r0, #1
 80021ca:	4240      	negs	r0, r0
 80021cc:	e016      	b.n	80021fc <__ledf2+0x88>
 80021ce:	4316      	orrs	r6, r2
 80021d0:	d113      	bne.n	80021fa <__ledf2+0x86>
 80021d2:	2900      	cmp	r1, #0
 80021d4:	d102      	bne.n	80021dc <__ledf2+0x68>
 80021d6:	9f01      	ldr	r7, [sp, #4]
 80021d8:	4327      	orrs	r7, r4
 80021da:	d0f3      	beq.n	80021c4 <__ledf2+0x50>
 80021dc:	4584      	cmp	ip, r0
 80021de:	d020      	beq.n	8002222 <__ledf2+0xae>
 80021e0:	4663      	mov	r3, ip
 80021e2:	2002      	movs	r0, #2
 80021e4:	3b01      	subs	r3, #1
 80021e6:	4018      	ands	r0, r3
 80021e8:	3801      	subs	r0, #1
 80021ea:	e007      	b.n	80021fc <__ledf2+0x88>
 80021ec:	9f01      	ldr	r7, [sp, #4]
 80021ee:	4327      	orrs	r7, r4
 80021f0:	d103      	bne.n	80021fa <__ledf2+0x86>
 80021f2:	458a      	cmp	sl, r1
 80021f4:	d1f4      	bne.n	80021e0 <__ledf2+0x6c>
 80021f6:	4316      	orrs	r6, r2
 80021f8:	d01f      	beq.n	800223a <__ledf2+0xc6>
 80021fa:	2002      	movs	r0, #2
 80021fc:	b003      	add	sp, #12
 80021fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002200:	46bb      	mov	fp, r7
 8002202:	46b2      	mov	sl, r6
 8002204:	46a9      	mov	r9, r5
 8002206:	46a0      	mov	r8, r4
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	4654      	mov	r4, sl
 800220c:	2c00      	cmp	r4, #0
 800220e:	d0e7      	beq.n	80021e0 <__ledf2+0x6c>
 8002210:	4584      	cmp	ip, r0
 8002212:	d1e5      	bne.n	80021e0 <__ledf2+0x6c>
 8002214:	4551      	cmp	r1, sl
 8002216:	dce3      	bgt.n	80021e0 <__ledf2+0x6c>
 8002218:	db03      	blt.n	8002222 <__ledf2+0xae>
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	42b3      	cmp	r3, r6
 800221e:	d8df      	bhi.n	80021e0 <__ledf2+0x6c>
 8002220:	d00f      	beq.n	8002242 <__ledf2+0xce>
 8002222:	4663      	mov	r3, ip
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0cf      	beq.n	80021c8 <__ledf2+0x54>
 8002228:	4660      	mov	r0, ip
 800222a:	e7e7      	b.n	80021fc <__ledf2+0x88>
 800222c:	2c00      	cmp	r4, #0
 800222e:	d0c9      	beq.n	80021c4 <__ledf2+0x50>
 8002230:	e7d4      	b.n	80021dc <__ledf2+0x68>
 8002232:	2000      	movs	r0, #0
 8002234:	2c00      	cmp	r4, #0
 8002236:	d0e1      	beq.n	80021fc <__ledf2+0x88>
 8002238:	e7d2      	b.n	80021e0 <__ledf2+0x6c>
 800223a:	4584      	cmp	ip, r0
 800223c:	d1d0      	bne.n	80021e0 <__ledf2+0x6c>
 800223e:	2000      	movs	r0, #0
 8002240:	e7dc      	b.n	80021fc <__ledf2+0x88>
 8002242:	45c8      	cmp	r8, r9
 8002244:	d8cc      	bhi.n	80021e0 <__ledf2+0x6c>
 8002246:	2000      	movs	r0, #0
 8002248:	45c8      	cmp	r8, r9
 800224a:	d2d7      	bcs.n	80021fc <__ledf2+0x88>
 800224c:	e7e9      	b.n	8002222 <__ledf2+0xae>
 800224e:	4584      	cmp	ip, r0
 8002250:	d0e3      	beq.n	800221a <__ledf2+0xa6>
 8002252:	e7c5      	b.n	80021e0 <__ledf2+0x6c>
 8002254:	000007ff 	.word	0x000007ff

08002258 <__aeabi_dmul>:
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	4657      	mov	r7, sl
 800225c:	46de      	mov	lr, fp
 800225e:	464e      	mov	r6, r9
 8002260:	4645      	mov	r5, r8
 8002262:	b5e0      	push	{r5, r6, r7, lr}
 8002264:	001f      	movs	r7, r3
 8002266:	030b      	lsls	r3, r1, #12
 8002268:	0b1b      	lsrs	r3, r3, #12
 800226a:	0016      	movs	r6, r2
 800226c:	469a      	mov	sl, r3
 800226e:	0fca      	lsrs	r2, r1, #31
 8002270:	004b      	lsls	r3, r1, #1
 8002272:	0004      	movs	r4, r0
 8002274:	4693      	mov	fp, r2
 8002276:	b087      	sub	sp, #28
 8002278:	0d5b      	lsrs	r3, r3, #21
 800227a:	d100      	bne.n	800227e <__aeabi_dmul+0x26>
 800227c:	e0d5      	b.n	800242a <__aeabi_dmul+0x1d2>
 800227e:	4abb      	ldr	r2, [pc, #748]	@ (800256c <__aeabi_dmul+0x314>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d100      	bne.n	8002286 <__aeabi_dmul+0x2e>
 8002284:	e0f8      	b.n	8002478 <__aeabi_dmul+0x220>
 8002286:	4651      	mov	r1, sl
 8002288:	0f42      	lsrs	r2, r0, #29
 800228a:	00c9      	lsls	r1, r1, #3
 800228c:	430a      	orrs	r2, r1
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	0409      	lsls	r1, r1, #16
 8002292:	4311      	orrs	r1, r2
 8002294:	00c2      	lsls	r2, r0, #3
 8002296:	4691      	mov	r9, r2
 8002298:	4ab5      	ldr	r2, [pc, #724]	@ (8002570 <__aeabi_dmul+0x318>)
 800229a:	468a      	mov	sl, r1
 800229c:	189d      	adds	r5, r3, r2
 800229e:	2300      	movs	r3, #0
 80022a0:	4698      	mov	r8, r3
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	033c      	lsls	r4, r7, #12
 80022a6:	007b      	lsls	r3, r7, #1
 80022a8:	0ffa      	lsrs	r2, r7, #31
 80022aa:	0030      	movs	r0, r6
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	9200      	str	r2, [sp, #0]
 80022b2:	d100      	bne.n	80022b6 <__aeabi_dmul+0x5e>
 80022b4:	e096      	b.n	80023e4 <__aeabi_dmul+0x18c>
 80022b6:	4aad      	ldr	r2, [pc, #692]	@ (800256c <__aeabi_dmul+0x314>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d031      	beq.n	8002320 <__aeabi_dmul+0xc8>
 80022bc:	0f72      	lsrs	r2, r6, #29
 80022be:	00e4      	lsls	r4, r4, #3
 80022c0:	4322      	orrs	r2, r4
 80022c2:	2480      	movs	r4, #128	@ 0x80
 80022c4:	0424      	lsls	r4, r4, #16
 80022c6:	4314      	orrs	r4, r2
 80022c8:	4aa9      	ldr	r2, [pc, #676]	@ (8002570 <__aeabi_dmul+0x318>)
 80022ca:	00f0      	lsls	r0, r6, #3
 80022cc:	4694      	mov	ip, r2
 80022ce:	4463      	add	r3, ip
 80022d0:	195b      	adds	r3, r3, r5
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	9201      	str	r2, [sp, #4]
 80022d6:	4642      	mov	r2, r8
 80022d8:	2600      	movs	r6, #0
 80022da:	2a0a      	cmp	r2, #10
 80022dc:	dc42      	bgt.n	8002364 <__aeabi_dmul+0x10c>
 80022de:	465a      	mov	r2, fp
 80022e0:	9900      	ldr	r1, [sp, #0]
 80022e2:	404a      	eors	r2, r1
 80022e4:	4693      	mov	fp, r2
 80022e6:	4642      	mov	r2, r8
 80022e8:	2a02      	cmp	r2, #2
 80022ea:	dc32      	bgt.n	8002352 <__aeabi_dmul+0xfa>
 80022ec:	3a01      	subs	r2, #1
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d900      	bls.n	80022f4 <__aeabi_dmul+0x9c>
 80022f2:	e149      	b.n	8002588 <__aeabi_dmul+0x330>
 80022f4:	2e02      	cmp	r6, #2
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0xa2>
 80022f8:	e0ca      	b.n	8002490 <__aeabi_dmul+0x238>
 80022fa:	2e01      	cmp	r6, #1
 80022fc:	d13d      	bne.n	800237a <__aeabi_dmul+0x122>
 80022fe:	2300      	movs	r3, #0
 8002300:	2400      	movs	r4, #0
 8002302:	2200      	movs	r2, #0
 8002304:	0010      	movs	r0, r2
 8002306:	465a      	mov	r2, fp
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	4323      	orrs	r3, r4
 800230c:	07d2      	lsls	r2, r2, #31
 800230e:	4313      	orrs	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	b007      	add	sp, #28
 8002314:	bcf0      	pop	{r4, r5, r6, r7}
 8002316:	46bb      	mov	fp, r7
 8002318:	46b2      	mov	sl, r6
 800231a:	46a9      	mov	r9, r5
 800231c:	46a0      	mov	r8, r4
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002320:	4b92      	ldr	r3, [pc, #584]	@ (800256c <__aeabi_dmul+0x314>)
 8002322:	4326      	orrs	r6, r4
 8002324:	18eb      	adds	r3, r5, r3
 8002326:	2e00      	cmp	r6, #0
 8002328:	d100      	bne.n	800232c <__aeabi_dmul+0xd4>
 800232a:	e0bb      	b.n	80024a4 <__aeabi_dmul+0x24c>
 800232c:	2203      	movs	r2, #3
 800232e:	4641      	mov	r1, r8
 8002330:	4311      	orrs	r1, r2
 8002332:	465a      	mov	r2, fp
 8002334:	4688      	mov	r8, r1
 8002336:	9900      	ldr	r1, [sp, #0]
 8002338:	404a      	eors	r2, r1
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	0109      	lsls	r1, r1, #4
 800233e:	468c      	mov	ip, r1
 8002340:	0029      	movs	r1, r5
 8002342:	4461      	add	r1, ip
 8002344:	9101      	str	r1, [sp, #4]
 8002346:	4641      	mov	r1, r8
 8002348:	290a      	cmp	r1, #10
 800234a:	dd00      	ble.n	800234e <__aeabi_dmul+0xf6>
 800234c:	e233      	b.n	80027b6 <__aeabi_dmul+0x55e>
 800234e:	4693      	mov	fp, r2
 8002350:	2603      	movs	r6, #3
 8002352:	4642      	mov	r2, r8
 8002354:	2701      	movs	r7, #1
 8002356:	4097      	lsls	r7, r2
 8002358:	21a6      	movs	r1, #166	@ 0xa6
 800235a:	003a      	movs	r2, r7
 800235c:	00c9      	lsls	r1, r1, #3
 800235e:	400a      	ands	r2, r1
 8002360:	420f      	tst	r7, r1
 8002362:	d031      	beq.n	80023c8 <__aeabi_dmul+0x170>
 8002364:	9e02      	ldr	r6, [sp, #8]
 8002366:	2e02      	cmp	r6, #2
 8002368:	d100      	bne.n	800236c <__aeabi_dmul+0x114>
 800236a:	e235      	b.n	80027d8 <__aeabi_dmul+0x580>
 800236c:	2e03      	cmp	r6, #3
 800236e:	d100      	bne.n	8002372 <__aeabi_dmul+0x11a>
 8002370:	e1d2      	b.n	8002718 <__aeabi_dmul+0x4c0>
 8002372:	4654      	mov	r4, sl
 8002374:	4648      	mov	r0, r9
 8002376:	2e01      	cmp	r6, #1
 8002378:	d0c1      	beq.n	80022fe <__aeabi_dmul+0xa6>
 800237a:	9a01      	ldr	r2, [sp, #4]
 800237c:	4b7d      	ldr	r3, [pc, #500]	@ (8002574 <__aeabi_dmul+0x31c>)
 800237e:	4694      	mov	ip, r2
 8002380:	4463      	add	r3, ip
 8002382:	2b00      	cmp	r3, #0
 8002384:	dc00      	bgt.n	8002388 <__aeabi_dmul+0x130>
 8002386:	e0c0      	b.n	800250a <__aeabi_dmul+0x2b2>
 8002388:	0742      	lsls	r2, r0, #29
 800238a:	d009      	beq.n	80023a0 <__aeabi_dmul+0x148>
 800238c:	220f      	movs	r2, #15
 800238e:	4002      	ands	r2, r0
 8002390:	2a04      	cmp	r2, #4
 8002392:	d005      	beq.n	80023a0 <__aeabi_dmul+0x148>
 8002394:	1d02      	adds	r2, r0, #4
 8002396:	4282      	cmp	r2, r0
 8002398:	4180      	sbcs	r0, r0
 800239a:	4240      	negs	r0, r0
 800239c:	1824      	adds	r4, r4, r0
 800239e:	0010      	movs	r0, r2
 80023a0:	01e2      	lsls	r2, r4, #7
 80023a2:	d506      	bpl.n	80023b2 <__aeabi_dmul+0x15a>
 80023a4:	4b74      	ldr	r3, [pc, #464]	@ (8002578 <__aeabi_dmul+0x320>)
 80023a6:	9a01      	ldr	r2, [sp, #4]
 80023a8:	401c      	ands	r4, r3
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	4694      	mov	ip, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4463      	add	r3, ip
 80023b2:	4a72      	ldr	r2, [pc, #456]	@ (800257c <__aeabi_dmul+0x324>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	dc6b      	bgt.n	8002490 <__aeabi_dmul+0x238>
 80023b8:	0762      	lsls	r2, r4, #29
 80023ba:	08c0      	lsrs	r0, r0, #3
 80023bc:	0264      	lsls	r4, r4, #9
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4302      	orrs	r2, r0
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e79d      	b.n	8002304 <__aeabi_dmul+0xac>
 80023c8:	2190      	movs	r1, #144	@ 0x90
 80023ca:	0089      	lsls	r1, r1, #2
 80023cc:	420f      	tst	r7, r1
 80023ce:	d163      	bne.n	8002498 <__aeabi_dmul+0x240>
 80023d0:	2288      	movs	r2, #136	@ 0x88
 80023d2:	423a      	tst	r2, r7
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dmul+0x180>
 80023d6:	e0d7      	b.n	8002588 <__aeabi_dmul+0x330>
 80023d8:	9b00      	ldr	r3, [sp, #0]
 80023da:	46a2      	mov	sl, r4
 80023dc:	469b      	mov	fp, r3
 80023de:	4681      	mov	r9, r0
 80023e0:	9602      	str	r6, [sp, #8]
 80023e2:	e7bf      	b.n	8002364 <__aeabi_dmul+0x10c>
 80023e4:	0023      	movs	r3, r4
 80023e6:	4333      	orrs	r3, r6
 80023e8:	d100      	bne.n	80023ec <__aeabi_dmul+0x194>
 80023ea:	e07f      	b.n	80024ec <__aeabi_dmul+0x294>
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dmul+0x19a>
 80023f0:	e1ad      	b.n	800274e <__aeabi_dmul+0x4f6>
 80023f2:	0020      	movs	r0, r4
 80023f4:	f000 feb0 	bl	8003158 <__clzsi2>
 80023f8:	0002      	movs	r2, r0
 80023fa:	0003      	movs	r3, r0
 80023fc:	3a0b      	subs	r2, #11
 80023fe:	201d      	movs	r0, #29
 8002400:	0019      	movs	r1, r3
 8002402:	1a82      	subs	r2, r0, r2
 8002404:	0030      	movs	r0, r6
 8002406:	3908      	subs	r1, #8
 8002408:	40d0      	lsrs	r0, r2
 800240a:	408c      	lsls	r4, r1
 800240c:	4304      	orrs	r4, r0
 800240e:	0030      	movs	r0, r6
 8002410:	4088      	lsls	r0, r1
 8002412:	4a5b      	ldr	r2, [pc, #364]	@ (8002580 <__aeabi_dmul+0x328>)
 8002414:	1aeb      	subs	r3, r5, r3
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	9201      	str	r2, [sp, #4]
 800241e:	4642      	mov	r2, r8
 8002420:	2600      	movs	r6, #0
 8002422:	2a0a      	cmp	r2, #10
 8002424:	dc00      	bgt.n	8002428 <__aeabi_dmul+0x1d0>
 8002426:	e75a      	b.n	80022de <__aeabi_dmul+0x86>
 8002428:	e79c      	b.n	8002364 <__aeabi_dmul+0x10c>
 800242a:	4653      	mov	r3, sl
 800242c:	4303      	orrs	r3, r0
 800242e:	4699      	mov	r9, r3
 8002430:	d054      	beq.n	80024dc <__aeabi_dmul+0x284>
 8002432:	4653      	mov	r3, sl
 8002434:	2b00      	cmp	r3, #0
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x1e2>
 8002438:	e177      	b.n	800272a <__aeabi_dmul+0x4d2>
 800243a:	4650      	mov	r0, sl
 800243c:	f000 fe8c 	bl	8003158 <__clzsi2>
 8002440:	230b      	movs	r3, #11
 8002442:	425b      	negs	r3, r3
 8002444:	469c      	mov	ip, r3
 8002446:	0002      	movs	r2, r0
 8002448:	4484      	add	ip, r0
 800244a:	0011      	movs	r1, r2
 800244c:	4650      	mov	r0, sl
 800244e:	3908      	subs	r1, #8
 8002450:	4088      	lsls	r0, r1
 8002452:	231d      	movs	r3, #29
 8002454:	4680      	mov	r8, r0
 8002456:	4660      	mov	r0, ip
 8002458:	1a1b      	subs	r3, r3, r0
 800245a:	0020      	movs	r0, r4
 800245c:	40d8      	lsrs	r0, r3
 800245e:	0003      	movs	r3, r0
 8002460:	4640      	mov	r0, r8
 8002462:	4303      	orrs	r3, r0
 8002464:	469a      	mov	sl, r3
 8002466:	0023      	movs	r3, r4
 8002468:	408b      	lsls	r3, r1
 800246a:	4699      	mov	r9, r3
 800246c:	2300      	movs	r3, #0
 800246e:	4d44      	ldr	r5, [pc, #272]	@ (8002580 <__aeabi_dmul+0x328>)
 8002470:	4698      	mov	r8, r3
 8002472:	1aad      	subs	r5, r5, r2
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	e715      	b.n	80022a4 <__aeabi_dmul+0x4c>
 8002478:	4652      	mov	r2, sl
 800247a:	4302      	orrs	r2, r0
 800247c:	4691      	mov	r9, r2
 800247e:	d126      	bne.n	80024ce <__aeabi_dmul+0x276>
 8002480:	2200      	movs	r2, #0
 8002482:	001d      	movs	r5, r3
 8002484:	2302      	movs	r3, #2
 8002486:	4692      	mov	sl, r2
 8002488:	3208      	adds	r2, #8
 800248a:	4690      	mov	r8, r2
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	e709      	b.n	80022a4 <__aeabi_dmul+0x4c>
 8002490:	2400      	movs	r4, #0
 8002492:	2200      	movs	r2, #0
 8002494:	4b35      	ldr	r3, [pc, #212]	@ (800256c <__aeabi_dmul+0x314>)
 8002496:	e735      	b.n	8002304 <__aeabi_dmul+0xac>
 8002498:	2300      	movs	r3, #0
 800249a:	2480      	movs	r4, #128	@ 0x80
 800249c:	469b      	mov	fp, r3
 800249e:	0324      	lsls	r4, r4, #12
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <__aeabi_dmul+0x314>)
 80024a2:	e72f      	b.n	8002304 <__aeabi_dmul+0xac>
 80024a4:	2202      	movs	r2, #2
 80024a6:	4641      	mov	r1, r8
 80024a8:	4311      	orrs	r1, r2
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	4694      	mov	ip, r2
 80024b0:	002a      	movs	r2, r5
 80024b2:	4462      	add	r2, ip
 80024b4:	4688      	mov	r8, r1
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	290a      	cmp	r1, #10
 80024ba:	dd00      	ble.n	80024be <__aeabi_dmul+0x266>
 80024bc:	e752      	b.n	8002364 <__aeabi_dmul+0x10c>
 80024be:	465a      	mov	r2, fp
 80024c0:	2000      	movs	r0, #0
 80024c2:	9900      	ldr	r1, [sp, #0]
 80024c4:	0004      	movs	r4, r0
 80024c6:	404a      	eors	r2, r1
 80024c8:	4693      	mov	fp, r2
 80024ca:	2602      	movs	r6, #2
 80024cc:	e70b      	b.n	80022e6 <__aeabi_dmul+0x8e>
 80024ce:	220c      	movs	r2, #12
 80024d0:	001d      	movs	r5, r3
 80024d2:	2303      	movs	r3, #3
 80024d4:	4681      	mov	r9, r0
 80024d6:	4690      	mov	r8, r2
 80024d8:	9302      	str	r3, [sp, #8]
 80024da:	e6e3      	b.n	80022a4 <__aeabi_dmul+0x4c>
 80024dc:	2300      	movs	r3, #0
 80024de:	469a      	mov	sl, r3
 80024e0:	3304      	adds	r3, #4
 80024e2:	4698      	mov	r8, r3
 80024e4:	3b03      	subs	r3, #3
 80024e6:	2500      	movs	r5, #0
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	e6db      	b.n	80022a4 <__aeabi_dmul+0x4c>
 80024ec:	4642      	mov	r2, r8
 80024ee:	3301      	adds	r3, #1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	002b      	movs	r3, r5
 80024f4:	4690      	mov	r8, r2
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	4642      	mov	r2, r8
 80024fc:	2400      	movs	r4, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	2601      	movs	r6, #1
 8002502:	2a0a      	cmp	r2, #10
 8002504:	dc00      	bgt.n	8002508 <__aeabi_dmul+0x2b0>
 8002506:	e6ea      	b.n	80022de <__aeabi_dmul+0x86>
 8002508:	e72c      	b.n	8002364 <__aeabi_dmul+0x10c>
 800250a:	2201      	movs	r2, #1
 800250c:	1ad2      	subs	r2, r2, r3
 800250e:	2a38      	cmp	r2, #56	@ 0x38
 8002510:	dd00      	ble.n	8002514 <__aeabi_dmul+0x2bc>
 8002512:	e6f4      	b.n	80022fe <__aeabi_dmul+0xa6>
 8002514:	2a1f      	cmp	r2, #31
 8002516:	dc00      	bgt.n	800251a <__aeabi_dmul+0x2c2>
 8002518:	e12a      	b.n	8002770 <__aeabi_dmul+0x518>
 800251a:	211f      	movs	r1, #31
 800251c:	4249      	negs	r1, r1
 800251e:	1acb      	subs	r3, r1, r3
 8002520:	0021      	movs	r1, r4
 8002522:	40d9      	lsrs	r1, r3
 8002524:	000b      	movs	r3, r1
 8002526:	2a20      	cmp	r2, #32
 8002528:	d005      	beq.n	8002536 <__aeabi_dmul+0x2de>
 800252a:	4a16      	ldr	r2, [pc, #88]	@ (8002584 <__aeabi_dmul+0x32c>)
 800252c:	9d01      	ldr	r5, [sp, #4]
 800252e:	4694      	mov	ip, r2
 8002530:	4465      	add	r5, ip
 8002532:	40ac      	lsls	r4, r5
 8002534:	4320      	orrs	r0, r4
 8002536:	1e42      	subs	r2, r0, #1
 8002538:	4190      	sbcs	r0, r2
 800253a:	4318      	orrs	r0, r3
 800253c:	2307      	movs	r3, #7
 800253e:	0019      	movs	r1, r3
 8002540:	2400      	movs	r4, #0
 8002542:	4001      	ands	r1, r0
 8002544:	4203      	tst	r3, r0
 8002546:	d00c      	beq.n	8002562 <__aeabi_dmul+0x30a>
 8002548:	230f      	movs	r3, #15
 800254a:	4003      	ands	r3, r0
 800254c:	2b04      	cmp	r3, #4
 800254e:	d100      	bne.n	8002552 <__aeabi_dmul+0x2fa>
 8002550:	e140      	b.n	80027d4 <__aeabi_dmul+0x57c>
 8002552:	1d03      	adds	r3, r0, #4
 8002554:	4283      	cmp	r3, r0
 8002556:	41a4      	sbcs	r4, r4
 8002558:	0018      	movs	r0, r3
 800255a:	4264      	negs	r4, r4
 800255c:	0761      	lsls	r1, r4, #29
 800255e:	0264      	lsls	r4, r4, #9
 8002560:	0b24      	lsrs	r4, r4, #12
 8002562:	08c2      	lsrs	r2, r0, #3
 8002564:	2300      	movs	r3, #0
 8002566:	430a      	orrs	r2, r1
 8002568:	e6cc      	b.n	8002304 <__aeabi_dmul+0xac>
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	000007ff 	.word	0x000007ff
 8002570:	fffffc01 	.word	0xfffffc01
 8002574:	000003ff 	.word	0x000003ff
 8002578:	feffffff 	.word	0xfeffffff
 800257c:	000007fe 	.word	0x000007fe
 8002580:	fffffc0d 	.word	0xfffffc0d
 8002584:	0000043e 	.word	0x0000043e
 8002588:	4649      	mov	r1, r9
 800258a:	464a      	mov	r2, r9
 800258c:	0409      	lsls	r1, r1, #16
 800258e:	0c09      	lsrs	r1, r1, #16
 8002590:	000d      	movs	r5, r1
 8002592:	0c16      	lsrs	r6, r2, #16
 8002594:	0c02      	lsrs	r2, r0, #16
 8002596:	0400      	lsls	r0, r0, #16
 8002598:	0c00      	lsrs	r0, r0, #16
 800259a:	4345      	muls	r5, r0
 800259c:	46ac      	mov	ip, r5
 800259e:	0005      	movs	r5, r0
 80025a0:	4375      	muls	r5, r6
 80025a2:	46a8      	mov	r8, r5
 80025a4:	0015      	movs	r5, r2
 80025a6:	000f      	movs	r7, r1
 80025a8:	4375      	muls	r5, r6
 80025aa:	9200      	str	r2, [sp, #0]
 80025ac:	9502      	str	r5, [sp, #8]
 80025ae:	002a      	movs	r2, r5
 80025b0:	9d00      	ldr	r5, [sp, #0]
 80025b2:	436f      	muls	r7, r5
 80025b4:	4665      	mov	r5, ip
 80025b6:	0c2d      	lsrs	r5, r5, #16
 80025b8:	46a9      	mov	r9, r5
 80025ba:	4447      	add	r7, r8
 80025bc:	444f      	add	r7, r9
 80025be:	45b8      	cmp	r8, r7
 80025c0:	d905      	bls.n	80025ce <__aeabi_dmul+0x376>
 80025c2:	0015      	movs	r5, r2
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	0252      	lsls	r2, r2, #9
 80025c8:	4690      	mov	r8, r2
 80025ca:	4445      	add	r5, r8
 80025cc:	9502      	str	r5, [sp, #8]
 80025ce:	0c3d      	lsrs	r5, r7, #16
 80025d0:	9503      	str	r5, [sp, #12]
 80025d2:	4665      	mov	r5, ip
 80025d4:	042d      	lsls	r5, r5, #16
 80025d6:	043f      	lsls	r7, r7, #16
 80025d8:	0c2d      	lsrs	r5, r5, #16
 80025da:	46ac      	mov	ip, r5
 80025dc:	003d      	movs	r5, r7
 80025de:	4465      	add	r5, ip
 80025e0:	9504      	str	r5, [sp, #16]
 80025e2:	0c25      	lsrs	r5, r4, #16
 80025e4:	0424      	lsls	r4, r4, #16
 80025e6:	0c24      	lsrs	r4, r4, #16
 80025e8:	46ac      	mov	ip, r5
 80025ea:	0025      	movs	r5, r4
 80025ec:	4375      	muls	r5, r6
 80025ee:	46a8      	mov	r8, r5
 80025f0:	4665      	mov	r5, ip
 80025f2:	000f      	movs	r7, r1
 80025f4:	4369      	muls	r1, r5
 80025f6:	4441      	add	r1, r8
 80025f8:	4689      	mov	r9, r1
 80025fa:	4367      	muls	r7, r4
 80025fc:	0c39      	lsrs	r1, r7, #16
 80025fe:	4449      	add	r1, r9
 8002600:	436e      	muls	r6, r5
 8002602:	4588      	cmp	r8, r1
 8002604:	d903      	bls.n	800260e <__aeabi_dmul+0x3b6>
 8002606:	2280      	movs	r2, #128	@ 0x80
 8002608:	0252      	lsls	r2, r2, #9
 800260a:	4690      	mov	r8, r2
 800260c:	4446      	add	r6, r8
 800260e:	0c0d      	lsrs	r5, r1, #16
 8002610:	46a8      	mov	r8, r5
 8002612:	0035      	movs	r5, r6
 8002614:	4445      	add	r5, r8
 8002616:	9505      	str	r5, [sp, #20]
 8002618:	9d03      	ldr	r5, [sp, #12]
 800261a:	043f      	lsls	r7, r7, #16
 800261c:	46a8      	mov	r8, r5
 800261e:	0c3f      	lsrs	r7, r7, #16
 8002620:	0409      	lsls	r1, r1, #16
 8002622:	19c9      	adds	r1, r1, r7
 8002624:	4488      	add	r8, r1
 8002626:	4645      	mov	r5, r8
 8002628:	9503      	str	r5, [sp, #12]
 800262a:	4655      	mov	r5, sl
 800262c:	042e      	lsls	r6, r5, #16
 800262e:	0c36      	lsrs	r6, r6, #16
 8002630:	0c2f      	lsrs	r7, r5, #16
 8002632:	0035      	movs	r5, r6
 8002634:	4345      	muls	r5, r0
 8002636:	4378      	muls	r0, r7
 8002638:	4681      	mov	r9, r0
 800263a:	0038      	movs	r0, r7
 800263c:	46a8      	mov	r8, r5
 800263e:	0c2d      	lsrs	r5, r5, #16
 8002640:	46aa      	mov	sl, r5
 8002642:	9a00      	ldr	r2, [sp, #0]
 8002644:	4350      	muls	r0, r2
 8002646:	4372      	muls	r2, r6
 8002648:	444a      	add	r2, r9
 800264a:	4452      	add	r2, sl
 800264c:	4591      	cmp	r9, r2
 800264e:	d903      	bls.n	8002658 <__aeabi_dmul+0x400>
 8002650:	2580      	movs	r5, #128	@ 0x80
 8002652:	026d      	lsls	r5, r5, #9
 8002654:	46a9      	mov	r9, r5
 8002656:	4448      	add	r0, r9
 8002658:	0c15      	lsrs	r5, r2, #16
 800265a:	46a9      	mov	r9, r5
 800265c:	4645      	mov	r5, r8
 800265e:	042d      	lsls	r5, r5, #16
 8002660:	0c2d      	lsrs	r5, r5, #16
 8002662:	46a8      	mov	r8, r5
 8002664:	4665      	mov	r5, ip
 8002666:	437d      	muls	r5, r7
 8002668:	0412      	lsls	r2, r2, #16
 800266a:	4448      	add	r0, r9
 800266c:	4490      	add	r8, r2
 800266e:	46a9      	mov	r9, r5
 8002670:	0032      	movs	r2, r6
 8002672:	4665      	mov	r5, ip
 8002674:	4362      	muls	r2, r4
 8002676:	436e      	muls	r6, r5
 8002678:	437c      	muls	r4, r7
 800267a:	0c17      	lsrs	r7, r2, #16
 800267c:	1936      	adds	r6, r6, r4
 800267e:	19bf      	adds	r7, r7, r6
 8002680:	42bc      	cmp	r4, r7
 8002682:	d903      	bls.n	800268c <__aeabi_dmul+0x434>
 8002684:	2480      	movs	r4, #128	@ 0x80
 8002686:	0264      	lsls	r4, r4, #9
 8002688:	46a4      	mov	ip, r4
 800268a:	44e1      	add	r9, ip
 800268c:	9c02      	ldr	r4, [sp, #8]
 800268e:	9e03      	ldr	r6, [sp, #12]
 8002690:	46a4      	mov	ip, r4
 8002692:	9d05      	ldr	r5, [sp, #20]
 8002694:	4466      	add	r6, ip
 8002696:	428e      	cmp	r6, r1
 8002698:	4189      	sbcs	r1, r1
 800269a:	46ac      	mov	ip, r5
 800269c:	0412      	lsls	r2, r2, #16
 800269e:	043c      	lsls	r4, r7, #16
 80026a0:	0c12      	lsrs	r2, r2, #16
 80026a2:	18a2      	adds	r2, r4, r2
 80026a4:	4462      	add	r2, ip
 80026a6:	4249      	negs	r1, r1
 80026a8:	1854      	adds	r4, r2, r1
 80026aa:	4446      	add	r6, r8
 80026ac:	46a4      	mov	ip, r4
 80026ae:	4546      	cmp	r6, r8
 80026b0:	41a4      	sbcs	r4, r4
 80026b2:	4682      	mov	sl, r0
 80026b4:	4264      	negs	r4, r4
 80026b6:	46a0      	mov	r8, r4
 80026b8:	42aa      	cmp	r2, r5
 80026ba:	4192      	sbcs	r2, r2
 80026bc:	458c      	cmp	ip, r1
 80026be:	4189      	sbcs	r1, r1
 80026c0:	44e2      	add	sl, ip
 80026c2:	44d0      	add	r8, sl
 80026c4:	4249      	negs	r1, r1
 80026c6:	4252      	negs	r2, r2
 80026c8:	430a      	orrs	r2, r1
 80026ca:	45a0      	cmp	r8, r4
 80026cc:	41a4      	sbcs	r4, r4
 80026ce:	4582      	cmp	sl, r0
 80026d0:	4189      	sbcs	r1, r1
 80026d2:	4264      	negs	r4, r4
 80026d4:	4249      	negs	r1, r1
 80026d6:	430c      	orrs	r4, r1
 80026d8:	4641      	mov	r1, r8
 80026da:	0c3f      	lsrs	r7, r7, #16
 80026dc:	19d2      	adds	r2, r2, r7
 80026de:	1912      	adds	r2, r2, r4
 80026e0:	0dcc      	lsrs	r4, r1, #23
 80026e2:	9904      	ldr	r1, [sp, #16]
 80026e4:	0270      	lsls	r0, r6, #9
 80026e6:	4308      	orrs	r0, r1
 80026e8:	1e41      	subs	r1, r0, #1
 80026ea:	4188      	sbcs	r0, r1
 80026ec:	4641      	mov	r1, r8
 80026ee:	444a      	add	r2, r9
 80026f0:	0df6      	lsrs	r6, r6, #23
 80026f2:	0252      	lsls	r2, r2, #9
 80026f4:	4330      	orrs	r0, r6
 80026f6:	0249      	lsls	r1, r1, #9
 80026f8:	4314      	orrs	r4, r2
 80026fa:	4308      	orrs	r0, r1
 80026fc:	01d2      	lsls	r2, r2, #7
 80026fe:	d535      	bpl.n	800276c <__aeabi_dmul+0x514>
 8002700:	2201      	movs	r2, #1
 8002702:	0843      	lsrs	r3, r0, #1
 8002704:	4002      	ands	r2, r0
 8002706:	4313      	orrs	r3, r2
 8002708:	07e0      	lsls	r0, r4, #31
 800270a:	4318      	orrs	r0, r3
 800270c:	0864      	lsrs	r4, r4, #1
 800270e:	e634      	b.n	800237a <__aeabi_dmul+0x122>
 8002710:	9b00      	ldr	r3, [sp, #0]
 8002712:	46a2      	mov	sl, r4
 8002714:	469b      	mov	fp, r3
 8002716:	4681      	mov	r9, r0
 8002718:	2480      	movs	r4, #128	@ 0x80
 800271a:	4653      	mov	r3, sl
 800271c:	0324      	lsls	r4, r4, #12
 800271e:	431c      	orrs	r4, r3
 8002720:	0324      	lsls	r4, r4, #12
 8002722:	464a      	mov	r2, r9
 8002724:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <__aeabi_dmul+0x588>)
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	e5ec      	b.n	8002304 <__aeabi_dmul+0xac>
 800272a:	f000 fd15 	bl	8003158 <__clzsi2>
 800272e:	2315      	movs	r3, #21
 8002730:	469c      	mov	ip, r3
 8002732:	4484      	add	ip, r0
 8002734:	0002      	movs	r2, r0
 8002736:	4663      	mov	r3, ip
 8002738:	3220      	adds	r2, #32
 800273a:	2b1c      	cmp	r3, #28
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dmul+0x4e8>
 800273e:	e684      	b.n	800244a <__aeabi_dmul+0x1f2>
 8002740:	2300      	movs	r3, #0
 8002742:	4699      	mov	r9, r3
 8002744:	0023      	movs	r3, r4
 8002746:	3808      	subs	r0, #8
 8002748:	4083      	lsls	r3, r0
 800274a:	469a      	mov	sl, r3
 800274c:	e68e      	b.n	800246c <__aeabi_dmul+0x214>
 800274e:	f000 fd03 	bl	8003158 <__clzsi2>
 8002752:	0002      	movs	r2, r0
 8002754:	0003      	movs	r3, r0
 8002756:	3215      	adds	r2, #21
 8002758:	3320      	adds	r3, #32
 800275a:	2a1c      	cmp	r2, #28
 800275c:	dc00      	bgt.n	8002760 <__aeabi_dmul+0x508>
 800275e:	e64e      	b.n	80023fe <__aeabi_dmul+0x1a6>
 8002760:	0002      	movs	r2, r0
 8002762:	0034      	movs	r4, r6
 8002764:	3a08      	subs	r2, #8
 8002766:	2000      	movs	r0, #0
 8002768:	4094      	lsls	r4, r2
 800276a:	e652      	b.n	8002412 <__aeabi_dmul+0x1ba>
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	e604      	b.n	800237a <__aeabi_dmul+0x122>
 8002770:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <__aeabi_dmul+0x58c>)
 8002772:	0021      	movs	r1, r4
 8002774:	469c      	mov	ip, r3
 8002776:	0003      	movs	r3, r0
 8002778:	9d01      	ldr	r5, [sp, #4]
 800277a:	40d3      	lsrs	r3, r2
 800277c:	4465      	add	r5, ip
 800277e:	40a9      	lsls	r1, r5
 8002780:	4319      	orrs	r1, r3
 8002782:	0003      	movs	r3, r0
 8002784:	40ab      	lsls	r3, r5
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	4183      	sbcs	r3, r0
 800278a:	4319      	orrs	r1, r3
 800278c:	0008      	movs	r0, r1
 800278e:	40d4      	lsrs	r4, r2
 8002790:	074b      	lsls	r3, r1, #29
 8002792:	d009      	beq.n	80027a8 <__aeabi_dmul+0x550>
 8002794:	230f      	movs	r3, #15
 8002796:	400b      	ands	r3, r1
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <__aeabi_dmul+0x550>
 800279c:	1d0b      	adds	r3, r1, #4
 800279e:	428b      	cmp	r3, r1
 80027a0:	4180      	sbcs	r0, r0
 80027a2:	4240      	negs	r0, r0
 80027a4:	1824      	adds	r4, r4, r0
 80027a6:	0018      	movs	r0, r3
 80027a8:	0223      	lsls	r3, r4, #8
 80027aa:	d400      	bmi.n	80027ae <__aeabi_dmul+0x556>
 80027ac:	e6d6      	b.n	800255c <__aeabi_dmul+0x304>
 80027ae:	2301      	movs	r3, #1
 80027b0:	2400      	movs	r4, #0
 80027b2:	2200      	movs	r2, #0
 80027b4:	e5a6      	b.n	8002304 <__aeabi_dmul+0xac>
 80027b6:	290f      	cmp	r1, #15
 80027b8:	d1aa      	bne.n	8002710 <__aeabi_dmul+0x4b8>
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	4652      	mov	r2, sl
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	421a      	tst	r2, r3
 80027c2:	d0a9      	beq.n	8002718 <__aeabi_dmul+0x4c0>
 80027c4:	421c      	tst	r4, r3
 80027c6:	d1a7      	bne.n	8002718 <__aeabi_dmul+0x4c0>
 80027c8:	431c      	orrs	r4, r3
 80027ca:	9b00      	ldr	r3, [sp, #0]
 80027cc:	0002      	movs	r2, r0
 80027ce:	469b      	mov	fp, r3
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <__aeabi_dmul+0x588>)
 80027d2:	e597      	b.n	8002304 <__aeabi_dmul+0xac>
 80027d4:	2400      	movs	r4, #0
 80027d6:	e6c1      	b.n	800255c <__aeabi_dmul+0x304>
 80027d8:	2400      	movs	r4, #0
 80027da:	4b01      	ldr	r3, [pc, #4]	@ (80027e0 <__aeabi_dmul+0x588>)
 80027dc:	0022      	movs	r2, r4
 80027de:	e591      	b.n	8002304 <__aeabi_dmul+0xac>
 80027e0:	000007ff 	.word	0x000007ff
 80027e4:	0000041e 	.word	0x0000041e

080027e8 <__aeabi_dsub>:
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	464e      	mov	r6, r9
 80027ec:	4645      	mov	r5, r8
 80027ee:	46de      	mov	lr, fp
 80027f0:	4657      	mov	r7, sl
 80027f2:	b5e0      	push	{r5, r6, r7, lr}
 80027f4:	b085      	sub	sp, #20
 80027f6:	9000      	str	r0, [sp, #0]
 80027f8:	9101      	str	r1, [sp, #4]
 80027fa:	030c      	lsls	r4, r1, #12
 80027fc:	004f      	lsls	r7, r1, #1
 80027fe:	0fce      	lsrs	r6, r1, #31
 8002800:	0a61      	lsrs	r1, r4, #9
 8002802:	9c00      	ldr	r4, [sp, #0]
 8002804:	46b0      	mov	r8, r6
 8002806:	0f64      	lsrs	r4, r4, #29
 8002808:	430c      	orrs	r4, r1
 800280a:	9900      	ldr	r1, [sp, #0]
 800280c:	0d7f      	lsrs	r7, r7, #21
 800280e:	00c8      	lsls	r0, r1, #3
 8002810:	0011      	movs	r1, r2
 8002812:	001a      	movs	r2, r3
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	469c      	mov	ip, r3
 8002818:	9100      	str	r1, [sp, #0]
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	0051      	lsls	r1, r2, #1
 800281e:	0d4b      	lsrs	r3, r1, #21
 8002820:	4699      	mov	r9, r3
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	9d00      	ldr	r5, [sp, #0]
 8002826:	0fd9      	lsrs	r1, r3, #31
 8002828:	4663      	mov	r3, ip
 800282a:	0f6a      	lsrs	r2, r5, #29
 800282c:	0a5b      	lsrs	r3, r3, #9
 800282e:	4313      	orrs	r3, r2
 8002830:	00ea      	lsls	r2, r5, #3
 8002832:	4694      	mov	ip, r2
 8002834:	4693      	mov	fp, r2
 8002836:	4ac1      	ldr	r2, [pc, #772]	@ (8002b3c <__aeabi_dsub+0x354>)
 8002838:	9003      	str	r0, [sp, #12]
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	4591      	cmp	r9, r2
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x5a>
 8002840:	e0cd      	b.n	80029de <__aeabi_dsub+0x1f6>
 8002842:	2501      	movs	r5, #1
 8002844:	4069      	eors	r1, r5
 8002846:	464d      	mov	r5, r9
 8002848:	1b7d      	subs	r5, r7, r5
 800284a:	46aa      	mov	sl, r5
 800284c:	428e      	cmp	r6, r1
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x6a>
 8002850:	e080      	b.n	8002954 <__aeabi_dsub+0x16c>
 8002852:	2d00      	cmp	r5, #0
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dsub+0x70>
 8002856:	e335      	b.n	8002ec4 <__aeabi_dsub+0x6dc>
 8002858:	4649      	mov	r1, r9
 800285a:	2900      	cmp	r1, #0
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x78>
 800285e:	e0df      	b.n	8002a20 <__aeabi_dsub+0x238>
 8002860:	4297      	cmp	r7, r2
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x7e>
 8002864:	e194      	b.n	8002b90 <__aeabi_dsub+0x3a8>
 8002866:	4652      	mov	r2, sl
 8002868:	2501      	movs	r5, #1
 800286a:	2a38      	cmp	r2, #56	@ 0x38
 800286c:	dc19      	bgt.n	80028a2 <__aeabi_dsub+0xba>
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	9b02      	ldr	r3, [sp, #8]
 8002872:	0412      	lsls	r2, r2, #16
 8002874:	4313      	orrs	r3, r2
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	4652      	mov	r2, sl
 800287a:	2a1f      	cmp	r2, #31
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0x98>
 800287e:	e1e3      	b.n	8002c48 <__aeabi_dsub+0x460>
 8002880:	4653      	mov	r3, sl
 8002882:	2220      	movs	r2, #32
 8002884:	4661      	mov	r1, ip
 8002886:	9d02      	ldr	r5, [sp, #8]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	4095      	lsls	r5, r2
 800288c:	40d9      	lsrs	r1, r3
 800288e:	430d      	orrs	r5, r1
 8002890:	4661      	mov	r1, ip
 8002892:	4091      	lsls	r1, r2
 8002894:	000a      	movs	r2, r1
 8002896:	1e51      	subs	r1, r2, #1
 8002898:	418a      	sbcs	r2, r1
 800289a:	4315      	orrs	r5, r2
 800289c:	9a02      	ldr	r2, [sp, #8]
 800289e:	40da      	lsrs	r2, r3
 80028a0:	1aa4      	subs	r4, r4, r2
 80028a2:	1b45      	subs	r5, r0, r5
 80028a4:	42a8      	cmp	r0, r5
 80028a6:	4180      	sbcs	r0, r0
 80028a8:	4240      	negs	r0, r0
 80028aa:	1a24      	subs	r4, r4, r0
 80028ac:	0223      	lsls	r3, r4, #8
 80028ae:	d400      	bmi.n	80028b2 <__aeabi_dsub+0xca>
 80028b0:	e13d      	b.n	8002b2e <__aeabi_dsub+0x346>
 80028b2:	0264      	lsls	r4, r4, #9
 80028b4:	0a64      	lsrs	r4, r4, #9
 80028b6:	2c00      	cmp	r4, #0
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0xd4>
 80028ba:	e147      	b.n	8002b4c <__aeabi_dsub+0x364>
 80028bc:	0020      	movs	r0, r4
 80028be:	f000 fc4b 	bl	8003158 <__clzsi2>
 80028c2:	0003      	movs	r3, r0
 80028c4:	3b08      	subs	r3, #8
 80028c6:	2120      	movs	r1, #32
 80028c8:	0028      	movs	r0, r5
 80028ca:	1aca      	subs	r2, r1, r3
 80028cc:	40d0      	lsrs	r0, r2
 80028ce:	409c      	lsls	r4, r3
 80028d0:	0002      	movs	r2, r0
 80028d2:	409d      	lsls	r5, r3
 80028d4:	4322      	orrs	r2, r4
 80028d6:	429f      	cmp	r7, r3
 80028d8:	dd00      	ble.n	80028dc <__aeabi_dsub+0xf4>
 80028da:	e177      	b.n	8002bcc <__aeabi_dsub+0x3e4>
 80028dc:	1bd8      	subs	r0, r3, r7
 80028de:	3001      	adds	r0, #1
 80028e0:	1a09      	subs	r1, r1, r0
 80028e2:	002c      	movs	r4, r5
 80028e4:	408d      	lsls	r5, r1
 80028e6:	40c4      	lsrs	r4, r0
 80028e8:	1e6b      	subs	r3, r5, #1
 80028ea:	419d      	sbcs	r5, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	40c2      	lsrs	r2, r0
 80028f0:	408b      	lsls	r3, r1
 80028f2:	4325      	orrs	r5, r4
 80028f4:	2700      	movs	r7, #0
 80028f6:	0014      	movs	r4, r2
 80028f8:	431d      	orrs	r5, r3
 80028fa:	076b      	lsls	r3, r5, #29
 80028fc:	d009      	beq.n	8002912 <__aeabi_dsub+0x12a>
 80028fe:	230f      	movs	r3, #15
 8002900:	402b      	ands	r3, r5
 8002902:	2b04      	cmp	r3, #4
 8002904:	d005      	beq.n	8002912 <__aeabi_dsub+0x12a>
 8002906:	1d2b      	adds	r3, r5, #4
 8002908:	42ab      	cmp	r3, r5
 800290a:	41ad      	sbcs	r5, r5
 800290c:	426d      	negs	r5, r5
 800290e:	1964      	adds	r4, r4, r5
 8002910:	001d      	movs	r5, r3
 8002912:	0223      	lsls	r3, r4, #8
 8002914:	d400      	bmi.n	8002918 <__aeabi_dsub+0x130>
 8002916:	e140      	b.n	8002b9a <__aeabi_dsub+0x3b2>
 8002918:	4a88      	ldr	r2, [pc, #544]	@ (8002b3c <__aeabi_dsub+0x354>)
 800291a:	3701      	adds	r7, #1
 800291c:	4297      	cmp	r7, r2
 800291e:	d100      	bne.n	8002922 <__aeabi_dsub+0x13a>
 8002920:	e101      	b.n	8002b26 <__aeabi_dsub+0x33e>
 8002922:	2601      	movs	r6, #1
 8002924:	4643      	mov	r3, r8
 8002926:	4986      	ldr	r1, [pc, #536]	@ (8002b40 <__aeabi_dsub+0x358>)
 8002928:	08ed      	lsrs	r5, r5, #3
 800292a:	4021      	ands	r1, r4
 800292c:	074a      	lsls	r2, r1, #29
 800292e:	432a      	orrs	r2, r5
 8002930:	057c      	lsls	r4, r7, #21
 8002932:	024d      	lsls	r5, r1, #9
 8002934:	0b2d      	lsrs	r5, r5, #12
 8002936:	0d64      	lsrs	r4, r4, #21
 8002938:	401e      	ands	r6, r3
 800293a:	0524      	lsls	r4, r4, #20
 800293c:	432c      	orrs	r4, r5
 800293e:	07f6      	lsls	r6, r6, #31
 8002940:	4334      	orrs	r4, r6
 8002942:	0010      	movs	r0, r2
 8002944:	0021      	movs	r1, r4
 8002946:	b005      	add	sp, #20
 8002948:	bcf0      	pop	{r4, r5, r6, r7}
 800294a:	46bb      	mov	fp, r7
 800294c:	46b2      	mov	sl, r6
 800294e:	46a9      	mov	r9, r5
 8002950:	46a0      	mov	r8, r4
 8002952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002954:	2d00      	cmp	r5, #0
 8002956:	dc00      	bgt.n	800295a <__aeabi_dsub+0x172>
 8002958:	e2d0      	b.n	8002efc <__aeabi_dsub+0x714>
 800295a:	4649      	mov	r1, r9
 800295c:	2900      	cmp	r1, #0
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x17a>
 8002960:	e0d4      	b.n	8002b0c <__aeabi_dsub+0x324>
 8002962:	4661      	mov	r1, ip
 8002964:	9b02      	ldr	r3, [sp, #8]
 8002966:	4319      	orrs	r1, r3
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x184>
 800296a:	e12b      	b.n	8002bc4 <__aeabi_dsub+0x3dc>
 800296c:	1e69      	subs	r1, r5, #1
 800296e:	2d01      	cmp	r5, #1
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x18c>
 8002972:	e1d9      	b.n	8002d28 <__aeabi_dsub+0x540>
 8002974:	4295      	cmp	r5, r2
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0x192>
 8002978:	e10a      	b.n	8002b90 <__aeabi_dsub+0x3a8>
 800297a:	2501      	movs	r5, #1
 800297c:	2938      	cmp	r1, #56	@ 0x38
 800297e:	dc17      	bgt.n	80029b0 <__aeabi_dsub+0x1c8>
 8002980:	468a      	mov	sl, r1
 8002982:	4653      	mov	r3, sl
 8002984:	2b1f      	cmp	r3, #31
 8002986:	dd00      	ble.n	800298a <__aeabi_dsub+0x1a2>
 8002988:	e1e7      	b.n	8002d5a <__aeabi_dsub+0x572>
 800298a:	2220      	movs	r2, #32
 800298c:	1ad2      	subs	r2, r2, r3
 800298e:	9b02      	ldr	r3, [sp, #8]
 8002990:	4661      	mov	r1, ip
 8002992:	4093      	lsls	r3, r2
 8002994:	001d      	movs	r5, r3
 8002996:	4653      	mov	r3, sl
 8002998:	40d9      	lsrs	r1, r3
 800299a:	4663      	mov	r3, ip
 800299c:	4093      	lsls	r3, r2
 800299e:	001a      	movs	r2, r3
 80029a0:	430d      	orrs	r5, r1
 80029a2:	1e51      	subs	r1, r2, #1
 80029a4:	418a      	sbcs	r2, r1
 80029a6:	4653      	mov	r3, sl
 80029a8:	4315      	orrs	r5, r2
 80029aa:	9a02      	ldr	r2, [sp, #8]
 80029ac:	40da      	lsrs	r2, r3
 80029ae:	18a4      	adds	r4, r4, r2
 80029b0:	182d      	adds	r5, r5, r0
 80029b2:	4285      	cmp	r5, r0
 80029b4:	4180      	sbcs	r0, r0
 80029b6:	4240      	negs	r0, r0
 80029b8:	1824      	adds	r4, r4, r0
 80029ba:	0223      	lsls	r3, r4, #8
 80029bc:	d400      	bmi.n	80029c0 <__aeabi_dsub+0x1d8>
 80029be:	e0b6      	b.n	8002b2e <__aeabi_dsub+0x346>
 80029c0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b3c <__aeabi_dsub+0x354>)
 80029c2:	3701      	adds	r7, #1
 80029c4:	429f      	cmp	r7, r3
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x1e2>
 80029c8:	e0ad      	b.n	8002b26 <__aeabi_dsub+0x33e>
 80029ca:	2101      	movs	r1, #1
 80029cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b40 <__aeabi_dsub+0x358>)
 80029ce:	086a      	lsrs	r2, r5, #1
 80029d0:	401c      	ands	r4, r3
 80029d2:	4029      	ands	r1, r5
 80029d4:	430a      	orrs	r2, r1
 80029d6:	07e5      	lsls	r5, r4, #31
 80029d8:	4315      	orrs	r5, r2
 80029da:	0864      	lsrs	r4, r4, #1
 80029dc:	e78d      	b.n	80028fa <__aeabi_dsub+0x112>
 80029de:	4a59      	ldr	r2, [pc, #356]	@ (8002b44 <__aeabi_dsub+0x35c>)
 80029e0:	9b02      	ldr	r3, [sp, #8]
 80029e2:	4692      	mov	sl, r2
 80029e4:	4662      	mov	r2, ip
 80029e6:	44ba      	add	sl, r7
 80029e8:	431a      	orrs	r2, r3
 80029ea:	d02c      	beq.n	8002a46 <__aeabi_dsub+0x25e>
 80029ec:	428e      	cmp	r6, r1
 80029ee:	d02e      	beq.n	8002a4e <__aeabi_dsub+0x266>
 80029f0:	4652      	mov	r2, sl
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	d060      	beq.n	8002ab8 <__aeabi_dsub+0x2d0>
 80029f6:	2f00      	cmp	r7, #0
 80029f8:	d100      	bne.n	80029fc <__aeabi_dsub+0x214>
 80029fa:	e0db      	b.n	8002bb4 <__aeabi_dsub+0x3cc>
 80029fc:	4663      	mov	r3, ip
 80029fe:	000e      	movs	r6, r1
 8002a00:	9c02      	ldr	r4, [sp, #8]
 8002a02:	08d8      	lsrs	r0, r3, #3
 8002a04:	0762      	lsls	r2, r4, #29
 8002a06:	4302      	orrs	r2, r0
 8002a08:	08e4      	lsrs	r4, r4, #3
 8002a0a:	0013      	movs	r3, r2
 8002a0c:	4323      	orrs	r3, r4
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dsub+0x22a>
 8002a10:	e254      	b.n	8002ebc <__aeabi_dsub+0x6d4>
 8002a12:	2580      	movs	r5, #128	@ 0x80
 8002a14:	032d      	lsls	r5, r5, #12
 8002a16:	4325      	orrs	r5, r4
 8002a18:	032d      	lsls	r5, r5, #12
 8002a1a:	4c48      	ldr	r4, [pc, #288]	@ (8002b3c <__aeabi_dsub+0x354>)
 8002a1c:	0b2d      	lsrs	r5, r5, #12
 8002a1e:	e78c      	b.n	800293a <__aeabi_dsub+0x152>
 8002a20:	4661      	mov	r1, ip
 8002a22:	9b02      	ldr	r3, [sp, #8]
 8002a24:	4319      	orrs	r1, r3
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x242>
 8002a28:	e0cc      	b.n	8002bc4 <__aeabi_dsub+0x3dc>
 8002a2a:	0029      	movs	r1, r5
 8002a2c:	3901      	subs	r1, #1
 8002a2e:	2d01      	cmp	r5, #1
 8002a30:	d100      	bne.n	8002a34 <__aeabi_dsub+0x24c>
 8002a32:	e188      	b.n	8002d46 <__aeabi_dsub+0x55e>
 8002a34:	4295      	cmp	r5, r2
 8002a36:	d100      	bne.n	8002a3a <__aeabi_dsub+0x252>
 8002a38:	e0aa      	b.n	8002b90 <__aeabi_dsub+0x3a8>
 8002a3a:	2501      	movs	r5, #1
 8002a3c:	2938      	cmp	r1, #56	@ 0x38
 8002a3e:	dd00      	ble.n	8002a42 <__aeabi_dsub+0x25a>
 8002a40:	e72f      	b.n	80028a2 <__aeabi_dsub+0xba>
 8002a42:	468a      	mov	sl, r1
 8002a44:	e718      	b.n	8002878 <__aeabi_dsub+0x90>
 8002a46:	2201      	movs	r2, #1
 8002a48:	4051      	eors	r1, r2
 8002a4a:	428e      	cmp	r6, r1
 8002a4c:	d1d0      	bne.n	80029f0 <__aeabi_dsub+0x208>
 8002a4e:	4653      	mov	r3, sl
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <__aeabi_dsub+0x26e>
 8002a54:	e0be      	b.n	8002bd4 <__aeabi_dsub+0x3ec>
 8002a56:	2f00      	cmp	r7, #0
 8002a58:	d000      	beq.n	8002a5c <__aeabi_dsub+0x274>
 8002a5a:	e138      	b.n	8002cce <__aeabi_dsub+0x4e6>
 8002a5c:	46ca      	mov	sl, r9
 8002a5e:	0022      	movs	r2, r4
 8002a60:	4302      	orrs	r2, r0
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x27e>
 8002a64:	e1e2      	b.n	8002e2c <__aeabi_dsub+0x644>
 8002a66:	4653      	mov	r3, sl
 8002a68:	1e59      	subs	r1, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x288>
 8002a6e:	e20d      	b.n	8002e8c <__aeabi_dsub+0x6a4>
 8002a70:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <__aeabi_dsub+0x354>)
 8002a72:	4592      	cmp	sl, r2
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x290>
 8002a76:	e1d2      	b.n	8002e1e <__aeabi_dsub+0x636>
 8002a78:	2701      	movs	r7, #1
 8002a7a:	2938      	cmp	r1, #56	@ 0x38
 8002a7c:	dc13      	bgt.n	8002aa6 <__aeabi_dsub+0x2be>
 8002a7e:	291f      	cmp	r1, #31
 8002a80:	dd00      	ble.n	8002a84 <__aeabi_dsub+0x29c>
 8002a82:	e1ee      	b.n	8002e62 <__aeabi_dsub+0x67a>
 8002a84:	2220      	movs	r2, #32
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	1a52      	subs	r2, r2, r1
 8002a8a:	0025      	movs	r5, r4
 8002a8c:	0007      	movs	r7, r0
 8002a8e:	469a      	mov	sl, r3
 8002a90:	40cc      	lsrs	r4, r1
 8002a92:	4090      	lsls	r0, r2
 8002a94:	4095      	lsls	r5, r2
 8002a96:	40cf      	lsrs	r7, r1
 8002a98:	44a2      	add	sl, r4
 8002a9a:	1e42      	subs	r2, r0, #1
 8002a9c:	4190      	sbcs	r0, r2
 8002a9e:	4653      	mov	r3, sl
 8002aa0:	432f      	orrs	r7, r5
 8002aa2:	4307      	orrs	r7, r0
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	003d      	movs	r5, r7
 8002aa8:	4465      	add	r5, ip
 8002aaa:	4565      	cmp	r5, ip
 8002aac:	4192      	sbcs	r2, r2
 8002aae:	9b02      	ldr	r3, [sp, #8]
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	464f      	mov	r7, r9
 8002ab4:	18d4      	adds	r4, r2, r3
 8002ab6:	e780      	b.n	80029ba <__aeabi_dsub+0x1d2>
 8002ab8:	4a23      	ldr	r2, [pc, #140]	@ (8002b48 <__aeabi_dsub+0x360>)
 8002aba:	1c7d      	adds	r5, r7, #1
 8002abc:	4215      	tst	r5, r2
 8002abe:	d000      	beq.n	8002ac2 <__aeabi_dsub+0x2da>
 8002ac0:	e0aa      	b.n	8002c18 <__aeabi_dsub+0x430>
 8002ac2:	4662      	mov	r2, ip
 8002ac4:	0025      	movs	r5, r4
 8002ac6:	9b02      	ldr	r3, [sp, #8]
 8002ac8:	4305      	orrs	r5, r0
 8002aca:	431a      	orrs	r2, r3
 8002acc:	2f00      	cmp	r7, #0
 8002ace:	d000      	beq.n	8002ad2 <__aeabi_dsub+0x2ea>
 8002ad0:	e0f5      	b.n	8002cbe <__aeabi_dsub+0x4d6>
 8002ad2:	2d00      	cmp	r5, #0
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x2f0>
 8002ad6:	e16b      	b.n	8002db0 <__aeabi_dsub+0x5c8>
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x2f6>
 8002adc:	e152      	b.n	8002d84 <__aeabi_dsub+0x59c>
 8002ade:	4663      	mov	r3, ip
 8002ae0:	1ac5      	subs	r5, r0, r3
 8002ae2:	9b02      	ldr	r3, [sp, #8]
 8002ae4:	1ae2      	subs	r2, r4, r3
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	419b      	sbcs	r3, r3
 8002aea:	425b      	negs	r3, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	021a      	lsls	r2, r3, #8
 8002af0:	d400      	bmi.n	8002af4 <__aeabi_dsub+0x30c>
 8002af2:	e1d5      	b.n	8002ea0 <__aeabi_dsub+0x6b8>
 8002af4:	4663      	mov	r3, ip
 8002af6:	1a1d      	subs	r5, r3, r0
 8002af8:	45ac      	cmp	ip, r5
 8002afa:	4192      	sbcs	r2, r2
 8002afc:	2601      	movs	r6, #1
 8002afe:	9b02      	ldr	r3, [sp, #8]
 8002b00:	4252      	negs	r2, r2
 8002b02:	1b1c      	subs	r4, r3, r4
 8002b04:	4688      	mov	r8, r1
 8002b06:	1aa4      	subs	r4, r4, r2
 8002b08:	400e      	ands	r6, r1
 8002b0a:	e6f6      	b.n	80028fa <__aeabi_dsub+0x112>
 8002b0c:	4297      	cmp	r7, r2
 8002b0e:	d03f      	beq.n	8002b90 <__aeabi_dsub+0x3a8>
 8002b10:	4652      	mov	r2, sl
 8002b12:	2501      	movs	r5, #1
 8002b14:	2a38      	cmp	r2, #56	@ 0x38
 8002b16:	dd00      	ble.n	8002b1a <__aeabi_dsub+0x332>
 8002b18:	e74a      	b.n	80029b0 <__aeabi_dsub+0x1c8>
 8002b1a:	2280      	movs	r2, #128	@ 0x80
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	0412      	lsls	r2, r2, #16
 8002b20:	4313      	orrs	r3, r2
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	e72d      	b.n	8002982 <__aeabi_dsub+0x19a>
 8002b26:	003c      	movs	r4, r7
 8002b28:	2500      	movs	r5, #0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	e705      	b.n	800293a <__aeabi_dsub+0x152>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	402b      	ands	r3, r5
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d000      	beq.n	8002b38 <__aeabi_dsub+0x350>
 8002b36:	e6e2      	b.n	80028fe <__aeabi_dsub+0x116>
 8002b38:	e06b      	b.n	8002c12 <__aeabi_dsub+0x42a>
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	000007ff 	.word	0x000007ff
 8002b40:	ff7fffff 	.word	0xff7fffff
 8002b44:	fffff801 	.word	0xfffff801
 8002b48:	000007fe 	.word	0x000007fe
 8002b4c:	0028      	movs	r0, r5
 8002b4e:	f000 fb03 	bl	8003158 <__clzsi2>
 8002b52:	0003      	movs	r3, r0
 8002b54:	3318      	adds	r3, #24
 8002b56:	2b1f      	cmp	r3, #31
 8002b58:	dc00      	bgt.n	8002b5c <__aeabi_dsub+0x374>
 8002b5a:	e6b4      	b.n	80028c6 <__aeabi_dsub+0xde>
 8002b5c:	002a      	movs	r2, r5
 8002b5e:	3808      	subs	r0, #8
 8002b60:	4082      	lsls	r2, r0
 8002b62:	429f      	cmp	r7, r3
 8002b64:	dd00      	ble.n	8002b68 <__aeabi_dsub+0x380>
 8002b66:	e0b9      	b.n	8002cdc <__aeabi_dsub+0x4f4>
 8002b68:	1bdb      	subs	r3, r3, r7
 8002b6a:	1c58      	adds	r0, r3, #1
 8002b6c:	281f      	cmp	r0, #31
 8002b6e:	dc00      	bgt.n	8002b72 <__aeabi_dsub+0x38a>
 8002b70:	e1a0      	b.n	8002eb4 <__aeabi_dsub+0x6cc>
 8002b72:	0015      	movs	r5, r2
 8002b74:	3b1f      	subs	r3, #31
 8002b76:	40dd      	lsrs	r5, r3
 8002b78:	2820      	cmp	r0, #32
 8002b7a:	d005      	beq.n	8002b88 <__aeabi_dsub+0x3a0>
 8002b7c:	2340      	movs	r3, #64	@ 0x40
 8002b7e:	1a1b      	subs	r3, r3, r0
 8002b80:	409a      	lsls	r2, r3
 8002b82:	1e53      	subs	r3, r2, #1
 8002b84:	419a      	sbcs	r2, r3
 8002b86:	4315      	orrs	r5, r2
 8002b88:	2307      	movs	r3, #7
 8002b8a:	2700      	movs	r7, #0
 8002b8c:	402b      	ands	r3, r5
 8002b8e:	e7d0      	b.n	8002b32 <__aeabi_dsub+0x34a>
 8002b90:	08c0      	lsrs	r0, r0, #3
 8002b92:	0762      	lsls	r2, r4, #29
 8002b94:	4302      	orrs	r2, r0
 8002b96:	08e4      	lsrs	r4, r4, #3
 8002b98:	e737      	b.n	8002a0a <__aeabi_dsub+0x222>
 8002b9a:	08ea      	lsrs	r2, r5, #3
 8002b9c:	0763      	lsls	r3, r4, #29
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	4bd3      	ldr	r3, [pc, #844]	@ (8002ef0 <__aeabi_dsub+0x708>)
 8002ba2:	08e4      	lsrs	r4, r4, #3
 8002ba4:	429f      	cmp	r7, r3
 8002ba6:	d100      	bne.n	8002baa <__aeabi_dsub+0x3c2>
 8002ba8:	e72f      	b.n	8002a0a <__aeabi_dsub+0x222>
 8002baa:	0324      	lsls	r4, r4, #12
 8002bac:	0b25      	lsrs	r5, r4, #12
 8002bae:	057c      	lsls	r4, r7, #21
 8002bb0:	0d64      	lsrs	r4, r4, #21
 8002bb2:	e6c2      	b.n	800293a <__aeabi_dsub+0x152>
 8002bb4:	46ca      	mov	sl, r9
 8002bb6:	0022      	movs	r2, r4
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	d158      	bne.n	8002c6e <__aeabi_dsub+0x486>
 8002bbc:	4663      	mov	r3, ip
 8002bbe:	000e      	movs	r6, r1
 8002bc0:	9c02      	ldr	r4, [sp, #8]
 8002bc2:	9303      	str	r3, [sp, #12]
 8002bc4:	9b03      	ldr	r3, [sp, #12]
 8002bc6:	4657      	mov	r7, sl
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	e7e7      	b.n	8002b9c <__aeabi_dsub+0x3b4>
 8002bcc:	4cc9      	ldr	r4, [pc, #804]	@ (8002ef4 <__aeabi_dsub+0x70c>)
 8002bce:	1aff      	subs	r7, r7, r3
 8002bd0:	4014      	ands	r4, r2
 8002bd2:	e692      	b.n	80028fa <__aeabi_dsub+0x112>
 8002bd4:	4dc8      	ldr	r5, [pc, #800]	@ (8002ef8 <__aeabi_dsub+0x710>)
 8002bd6:	1c7a      	adds	r2, r7, #1
 8002bd8:	422a      	tst	r2, r5
 8002bda:	d000      	beq.n	8002bde <__aeabi_dsub+0x3f6>
 8002bdc:	e084      	b.n	8002ce8 <__aeabi_dsub+0x500>
 8002bde:	0022      	movs	r2, r4
 8002be0:	4302      	orrs	r2, r0
 8002be2:	2f00      	cmp	r7, #0
 8002be4:	d000      	beq.n	8002be8 <__aeabi_dsub+0x400>
 8002be6:	e0ef      	b.n	8002dc8 <__aeabi_dsub+0x5e0>
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x406>
 8002bec:	e0e5      	b.n	8002dba <__aeabi_dsub+0x5d2>
 8002bee:	4662      	mov	r2, ip
 8002bf0:	9902      	ldr	r1, [sp, #8]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dsub+0x410>
 8002bf6:	e0c5      	b.n	8002d84 <__aeabi_dsub+0x59c>
 8002bf8:	4663      	mov	r3, ip
 8002bfa:	18c5      	adds	r5, r0, r3
 8002bfc:	468c      	mov	ip, r1
 8002bfe:	4285      	cmp	r5, r0
 8002c00:	4180      	sbcs	r0, r0
 8002c02:	4464      	add	r4, ip
 8002c04:	4240      	negs	r0, r0
 8002c06:	1824      	adds	r4, r4, r0
 8002c08:	0223      	lsls	r3, r4, #8
 8002c0a:	d502      	bpl.n	8002c12 <__aeabi_dsub+0x42a>
 8002c0c:	4bb9      	ldr	r3, [pc, #740]	@ (8002ef4 <__aeabi_dsub+0x70c>)
 8002c0e:	3701      	adds	r7, #1
 8002c10:	401c      	ands	r4, r3
 8002c12:	46ba      	mov	sl, r7
 8002c14:	9503      	str	r5, [sp, #12]
 8002c16:	e7d5      	b.n	8002bc4 <__aeabi_dsub+0x3dc>
 8002c18:	4662      	mov	r2, ip
 8002c1a:	1a85      	subs	r5, r0, r2
 8002c1c:	42a8      	cmp	r0, r5
 8002c1e:	4192      	sbcs	r2, r2
 8002c20:	4252      	negs	r2, r2
 8002c22:	4691      	mov	r9, r2
 8002c24:	9b02      	ldr	r3, [sp, #8]
 8002c26:	1ae3      	subs	r3, r4, r3
 8002c28:	001a      	movs	r2, r3
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	1ad2      	subs	r2, r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	4691      	mov	r9, r2
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	d46c      	bmi.n	8002d10 <__aeabi_dsub+0x528>
 8002c36:	464a      	mov	r2, r9
 8002c38:	464c      	mov	r4, r9
 8002c3a:	432a      	orrs	r2, r5
 8002c3c:	d000      	beq.n	8002c40 <__aeabi_dsub+0x458>
 8002c3e:	e63a      	b.n	80028b6 <__aeabi_dsub+0xce>
 8002c40:	2600      	movs	r6, #0
 8002c42:	2400      	movs	r4, #0
 8002c44:	2500      	movs	r5, #0
 8002c46:	e678      	b.n	800293a <__aeabi_dsub+0x152>
 8002c48:	9902      	ldr	r1, [sp, #8]
 8002c4a:	4653      	mov	r3, sl
 8002c4c:	000d      	movs	r5, r1
 8002c4e:	3a20      	subs	r2, #32
 8002c50:	40d5      	lsrs	r5, r2
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d006      	beq.n	8002c64 <__aeabi_dsub+0x47c>
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	4662      	mov	r2, ip
 8002c60:	431a      	orrs	r2, r3
 8002c62:	4693      	mov	fp, r2
 8002c64:	465b      	mov	r3, fp
 8002c66:	1e5a      	subs	r2, r3, #1
 8002c68:	4193      	sbcs	r3, r2
 8002c6a:	431d      	orrs	r5, r3
 8002c6c:	e619      	b.n	80028a2 <__aeabi_dsub+0xba>
 8002c6e:	4653      	mov	r3, sl
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d100      	bne.n	8002c78 <__aeabi_dsub+0x490>
 8002c76:	e0c6      	b.n	8002e06 <__aeabi_dsub+0x61e>
 8002c78:	4e9d      	ldr	r6, [pc, #628]	@ (8002ef0 <__aeabi_dsub+0x708>)
 8002c7a:	45b2      	cmp	sl, r6
 8002c7c:	d100      	bne.n	8002c80 <__aeabi_dsub+0x498>
 8002c7e:	e6bd      	b.n	80029fc <__aeabi_dsub+0x214>
 8002c80:	4688      	mov	r8, r1
 8002c82:	000e      	movs	r6, r1
 8002c84:	2501      	movs	r5, #1
 8002c86:	2a38      	cmp	r2, #56	@ 0x38
 8002c88:	dc10      	bgt.n	8002cac <__aeabi_dsub+0x4c4>
 8002c8a:	2a1f      	cmp	r2, #31
 8002c8c:	dc7f      	bgt.n	8002d8e <__aeabi_dsub+0x5a6>
 8002c8e:	2120      	movs	r1, #32
 8002c90:	0025      	movs	r5, r4
 8002c92:	1a89      	subs	r1, r1, r2
 8002c94:	0007      	movs	r7, r0
 8002c96:	4088      	lsls	r0, r1
 8002c98:	408d      	lsls	r5, r1
 8002c9a:	40d7      	lsrs	r7, r2
 8002c9c:	40d4      	lsrs	r4, r2
 8002c9e:	1e41      	subs	r1, r0, #1
 8002ca0:	4188      	sbcs	r0, r1
 8002ca2:	9b02      	ldr	r3, [sp, #8]
 8002ca4:	433d      	orrs	r5, r7
 8002ca6:	1b1b      	subs	r3, r3, r4
 8002ca8:	4305      	orrs	r5, r0
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	4662      	mov	r2, ip
 8002cae:	1b55      	subs	r5, r2, r5
 8002cb0:	45ac      	cmp	ip, r5
 8002cb2:	4192      	sbcs	r2, r2
 8002cb4:	9b02      	ldr	r3, [sp, #8]
 8002cb6:	4252      	negs	r2, r2
 8002cb8:	464f      	mov	r7, r9
 8002cba:	1a9c      	subs	r4, r3, r2
 8002cbc:	e5f6      	b.n	80028ac <__aeabi_dsub+0xc4>
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d000      	beq.n	8002cc4 <__aeabi_dsub+0x4dc>
 8002cc2:	e0b7      	b.n	8002e34 <__aeabi_dsub+0x64c>
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x4e2>
 8002cc8:	e0f0      	b.n	8002eac <__aeabi_dsub+0x6c4>
 8002cca:	2601      	movs	r6, #1
 8002ccc:	400e      	ands	r6, r1
 8002cce:	4663      	mov	r3, ip
 8002cd0:	9802      	ldr	r0, [sp, #8]
 8002cd2:	08d9      	lsrs	r1, r3, #3
 8002cd4:	0742      	lsls	r2, r0, #29
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	08c4      	lsrs	r4, r0, #3
 8002cda:	e696      	b.n	8002a0a <__aeabi_dsub+0x222>
 8002cdc:	4c85      	ldr	r4, [pc, #532]	@ (8002ef4 <__aeabi_dsub+0x70c>)
 8002cde:	1aff      	subs	r7, r7, r3
 8002ce0:	4014      	ands	r4, r2
 8002ce2:	0762      	lsls	r2, r4, #29
 8002ce4:	08e4      	lsrs	r4, r4, #3
 8002ce6:	e760      	b.n	8002baa <__aeabi_dsub+0x3c2>
 8002ce8:	4981      	ldr	r1, [pc, #516]	@ (8002ef0 <__aeabi_dsub+0x708>)
 8002cea:	428a      	cmp	r2, r1
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x508>
 8002cee:	e0c9      	b.n	8002e84 <__aeabi_dsub+0x69c>
 8002cf0:	4663      	mov	r3, ip
 8002cf2:	18c1      	adds	r1, r0, r3
 8002cf4:	4281      	cmp	r1, r0
 8002cf6:	4180      	sbcs	r0, r0
 8002cf8:	9b02      	ldr	r3, [sp, #8]
 8002cfa:	4240      	negs	r0, r0
 8002cfc:	18e3      	adds	r3, r4, r3
 8002cfe:	181b      	adds	r3, r3, r0
 8002d00:	07dd      	lsls	r5, r3, #31
 8002d02:	085c      	lsrs	r4, r3, #1
 8002d04:	2307      	movs	r3, #7
 8002d06:	0849      	lsrs	r1, r1, #1
 8002d08:	430d      	orrs	r5, r1
 8002d0a:	0017      	movs	r7, r2
 8002d0c:	402b      	ands	r3, r5
 8002d0e:	e710      	b.n	8002b32 <__aeabi_dsub+0x34a>
 8002d10:	4663      	mov	r3, ip
 8002d12:	1a1d      	subs	r5, r3, r0
 8002d14:	45ac      	cmp	ip, r5
 8002d16:	4192      	sbcs	r2, r2
 8002d18:	2601      	movs	r6, #1
 8002d1a:	9b02      	ldr	r3, [sp, #8]
 8002d1c:	4252      	negs	r2, r2
 8002d1e:	1b1c      	subs	r4, r3, r4
 8002d20:	4688      	mov	r8, r1
 8002d22:	1aa4      	subs	r4, r4, r2
 8002d24:	400e      	ands	r6, r1
 8002d26:	e5c6      	b.n	80028b6 <__aeabi_dsub+0xce>
 8002d28:	4663      	mov	r3, ip
 8002d2a:	18c5      	adds	r5, r0, r3
 8002d2c:	9b02      	ldr	r3, [sp, #8]
 8002d2e:	4285      	cmp	r5, r0
 8002d30:	4180      	sbcs	r0, r0
 8002d32:	469c      	mov	ip, r3
 8002d34:	4240      	negs	r0, r0
 8002d36:	4464      	add	r4, ip
 8002d38:	1824      	adds	r4, r4, r0
 8002d3a:	2701      	movs	r7, #1
 8002d3c:	0223      	lsls	r3, r4, #8
 8002d3e:	d400      	bmi.n	8002d42 <__aeabi_dsub+0x55a>
 8002d40:	e6f5      	b.n	8002b2e <__aeabi_dsub+0x346>
 8002d42:	2702      	movs	r7, #2
 8002d44:	e641      	b.n	80029ca <__aeabi_dsub+0x1e2>
 8002d46:	4663      	mov	r3, ip
 8002d48:	1ac5      	subs	r5, r0, r3
 8002d4a:	42a8      	cmp	r0, r5
 8002d4c:	4180      	sbcs	r0, r0
 8002d4e:	9b02      	ldr	r3, [sp, #8]
 8002d50:	4240      	negs	r0, r0
 8002d52:	1ae4      	subs	r4, r4, r3
 8002d54:	2701      	movs	r7, #1
 8002d56:	1a24      	subs	r4, r4, r0
 8002d58:	e5a8      	b.n	80028ac <__aeabi_dsub+0xc4>
 8002d5a:	9d02      	ldr	r5, [sp, #8]
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	002b      	movs	r3, r5
 8002d60:	3a20      	subs	r2, #32
 8002d62:	40d3      	lsrs	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d006      	beq.n	8002d7a <__aeabi_dsub+0x592>
 8002d6c:	2240      	movs	r2, #64	@ 0x40
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	002b      	movs	r3, r5
 8002d72:	4093      	lsls	r3, r2
 8002d74:	4662      	mov	r2, ip
 8002d76:	431a      	orrs	r2, r3
 8002d78:	4693      	mov	fp, r2
 8002d7a:	465d      	mov	r5, fp
 8002d7c:	1e6b      	subs	r3, r5, #1
 8002d7e:	419d      	sbcs	r5, r3
 8002d80:	430d      	orrs	r5, r1
 8002d82:	e615      	b.n	80029b0 <__aeabi_dsub+0x1c8>
 8002d84:	0762      	lsls	r2, r4, #29
 8002d86:	08c0      	lsrs	r0, r0, #3
 8002d88:	4302      	orrs	r2, r0
 8002d8a:	08e4      	lsrs	r4, r4, #3
 8002d8c:	e70d      	b.n	8002baa <__aeabi_dsub+0x3c2>
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0027      	movs	r7, r4
 8002d92:	3920      	subs	r1, #32
 8002d94:	40cf      	lsrs	r7, r1
 8002d96:	2a20      	cmp	r2, #32
 8002d98:	d005      	beq.n	8002da6 <__aeabi_dsub+0x5be>
 8002d9a:	2140      	movs	r1, #64	@ 0x40
 8002d9c:	1a8a      	subs	r2, r1, r2
 8002d9e:	4094      	lsls	r4, r2
 8002da0:	0025      	movs	r5, r4
 8002da2:	4305      	orrs	r5, r0
 8002da4:	9503      	str	r5, [sp, #12]
 8002da6:	9d03      	ldr	r5, [sp, #12]
 8002da8:	1e6a      	subs	r2, r5, #1
 8002daa:	4195      	sbcs	r5, r2
 8002dac:	433d      	orrs	r5, r7
 8002dae:	e77d      	b.n	8002cac <__aeabi_dsub+0x4c4>
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	d100      	bne.n	8002db6 <__aeabi_dsub+0x5ce>
 8002db4:	e744      	b.n	8002c40 <__aeabi_dsub+0x458>
 8002db6:	2601      	movs	r6, #1
 8002db8:	400e      	ands	r6, r1
 8002dba:	4663      	mov	r3, ip
 8002dbc:	08d9      	lsrs	r1, r3, #3
 8002dbe:	9b02      	ldr	r3, [sp, #8]
 8002dc0:	075a      	lsls	r2, r3, #29
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	08dc      	lsrs	r4, r3, #3
 8002dc6:	e6f0      	b.n	8002baa <__aeabi_dsub+0x3c2>
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	d028      	beq.n	8002e1e <__aeabi_dsub+0x636>
 8002dcc:	4662      	mov	r2, ip
 8002dce:	9f02      	ldr	r7, [sp, #8]
 8002dd0:	08c0      	lsrs	r0, r0, #3
 8002dd2:	433a      	orrs	r2, r7
 8002dd4:	d100      	bne.n	8002dd8 <__aeabi_dsub+0x5f0>
 8002dd6:	e6dc      	b.n	8002b92 <__aeabi_dsub+0x3aa>
 8002dd8:	0762      	lsls	r2, r4, #29
 8002dda:	4310      	orrs	r0, r2
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	08e4      	lsrs	r4, r4, #3
 8002de0:	0312      	lsls	r2, r2, #12
 8002de2:	4214      	tst	r4, r2
 8002de4:	d009      	beq.n	8002dfa <__aeabi_dsub+0x612>
 8002de6:	08fd      	lsrs	r5, r7, #3
 8002de8:	4215      	tst	r5, r2
 8002dea:	d106      	bne.n	8002dfa <__aeabi_dsub+0x612>
 8002dec:	4663      	mov	r3, ip
 8002dee:	2601      	movs	r6, #1
 8002df0:	002c      	movs	r4, r5
 8002df2:	08d8      	lsrs	r0, r3, #3
 8002df4:	077b      	lsls	r3, r7, #29
 8002df6:	4318      	orrs	r0, r3
 8002df8:	400e      	ands	r6, r1
 8002dfa:	0f42      	lsrs	r2, r0, #29
 8002dfc:	00c0      	lsls	r0, r0, #3
 8002dfe:	08c0      	lsrs	r0, r0, #3
 8002e00:	0752      	lsls	r2, r2, #29
 8002e02:	4302      	orrs	r2, r0
 8002e04:	e601      	b.n	8002a0a <__aeabi_dsub+0x222>
 8002e06:	4663      	mov	r3, ip
 8002e08:	1a1d      	subs	r5, r3, r0
 8002e0a:	45ac      	cmp	ip, r5
 8002e0c:	4192      	sbcs	r2, r2
 8002e0e:	9b02      	ldr	r3, [sp, #8]
 8002e10:	4252      	negs	r2, r2
 8002e12:	1b1c      	subs	r4, r3, r4
 8002e14:	000e      	movs	r6, r1
 8002e16:	4688      	mov	r8, r1
 8002e18:	2701      	movs	r7, #1
 8002e1a:	1aa4      	subs	r4, r4, r2
 8002e1c:	e546      	b.n	80028ac <__aeabi_dsub+0xc4>
 8002e1e:	4663      	mov	r3, ip
 8002e20:	08d9      	lsrs	r1, r3, #3
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	075a      	lsls	r2, r3, #29
 8002e26:	430a      	orrs	r2, r1
 8002e28:	08dc      	lsrs	r4, r3, #3
 8002e2a:	e5ee      	b.n	8002a0a <__aeabi_dsub+0x222>
 8002e2c:	4663      	mov	r3, ip
 8002e2e:	9c02      	ldr	r4, [sp, #8]
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	e6c7      	b.n	8002bc4 <__aeabi_dsub+0x3dc>
 8002e34:	08c0      	lsrs	r0, r0, #3
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x654>
 8002e3a:	e6aa      	b.n	8002b92 <__aeabi_dsub+0x3aa>
 8002e3c:	0762      	lsls	r2, r4, #29
 8002e3e:	4310      	orrs	r0, r2
 8002e40:	2280      	movs	r2, #128	@ 0x80
 8002e42:	08e4      	lsrs	r4, r4, #3
 8002e44:	0312      	lsls	r2, r2, #12
 8002e46:	4214      	tst	r4, r2
 8002e48:	d0d7      	beq.n	8002dfa <__aeabi_dsub+0x612>
 8002e4a:	9f02      	ldr	r7, [sp, #8]
 8002e4c:	08fd      	lsrs	r5, r7, #3
 8002e4e:	4215      	tst	r5, r2
 8002e50:	d1d3      	bne.n	8002dfa <__aeabi_dsub+0x612>
 8002e52:	4663      	mov	r3, ip
 8002e54:	2601      	movs	r6, #1
 8002e56:	08d8      	lsrs	r0, r3, #3
 8002e58:	077b      	lsls	r3, r7, #29
 8002e5a:	002c      	movs	r4, r5
 8002e5c:	4318      	orrs	r0, r3
 8002e5e:	400e      	ands	r6, r1
 8002e60:	e7cb      	b.n	8002dfa <__aeabi_dsub+0x612>
 8002e62:	000a      	movs	r2, r1
 8002e64:	0027      	movs	r7, r4
 8002e66:	3a20      	subs	r2, #32
 8002e68:	40d7      	lsrs	r7, r2
 8002e6a:	2920      	cmp	r1, #32
 8002e6c:	d005      	beq.n	8002e7a <__aeabi_dsub+0x692>
 8002e6e:	2240      	movs	r2, #64	@ 0x40
 8002e70:	1a52      	subs	r2, r2, r1
 8002e72:	4094      	lsls	r4, r2
 8002e74:	0025      	movs	r5, r4
 8002e76:	4305      	orrs	r5, r0
 8002e78:	9503      	str	r5, [sp, #12]
 8002e7a:	9d03      	ldr	r5, [sp, #12]
 8002e7c:	1e6a      	subs	r2, r5, #1
 8002e7e:	4195      	sbcs	r5, r2
 8002e80:	432f      	orrs	r7, r5
 8002e82:	e610      	b.n	8002aa6 <__aeabi_dsub+0x2be>
 8002e84:	0014      	movs	r4, r2
 8002e86:	2500      	movs	r5, #0
 8002e88:	2200      	movs	r2, #0
 8002e8a:	e556      	b.n	800293a <__aeabi_dsub+0x152>
 8002e8c:	9b02      	ldr	r3, [sp, #8]
 8002e8e:	4460      	add	r0, ip
 8002e90:	4699      	mov	r9, r3
 8002e92:	4560      	cmp	r0, ip
 8002e94:	4192      	sbcs	r2, r2
 8002e96:	444c      	add	r4, r9
 8002e98:	4252      	negs	r2, r2
 8002e9a:	0005      	movs	r5, r0
 8002e9c:	18a4      	adds	r4, r4, r2
 8002e9e:	e74c      	b.n	8002d3a <__aeabi_dsub+0x552>
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	001c      	movs	r4, r3
 8002ea4:	432a      	orrs	r2, r5
 8002ea6:	d000      	beq.n	8002eaa <__aeabi_dsub+0x6c2>
 8002ea8:	e6b3      	b.n	8002c12 <__aeabi_dsub+0x42a>
 8002eaa:	e6c9      	b.n	8002c40 <__aeabi_dsub+0x458>
 8002eac:	2480      	movs	r4, #128	@ 0x80
 8002eae:	2600      	movs	r6, #0
 8002eb0:	0324      	lsls	r4, r4, #12
 8002eb2:	e5ae      	b.n	8002a12 <__aeabi_dsub+0x22a>
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	1a09      	subs	r1, r1, r0
 8002eba:	e517      	b.n	80028ec <__aeabi_dsub+0x104>
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2500      	movs	r5, #0
 8002ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8002ef0 <__aeabi_dsub+0x708>)
 8002ec2:	e53a      	b.n	800293a <__aeabi_dsub+0x152>
 8002ec4:	2d00      	cmp	r5, #0
 8002ec6:	d100      	bne.n	8002eca <__aeabi_dsub+0x6e2>
 8002ec8:	e5f6      	b.n	8002ab8 <__aeabi_dsub+0x2d0>
 8002eca:	464b      	mov	r3, r9
 8002ecc:	1bda      	subs	r2, r3, r7
 8002ece:	4692      	mov	sl, r2
 8002ed0:	2f00      	cmp	r7, #0
 8002ed2:	d100      	bne.n	8002ed6 <__aeabi_dsub+0x6ee>
 8002ed4:	e66f      	b.n	8002bb6 <__aeabi_dsub+0x3ce>
 8002ed6:	2a38      	cmp	r2, #56	@ 0x38
 8002ed8:	dc05      	bgt.n	8002ee6 <__aeabi_dsub+0x6fe>
 8002eda:	2680      	movs	r6, #128	@ 0x80
 8002edc:	0436      	lsls	r6, r6, #16
 8002ede:	4334      	orrs	r4, r6
 8002ee0:	4688      	mov	r8, r1
 8002ee2:	000e      	movs	r6, r1
 8002ee4:	e6d1      	b.n	8002c8a <__aeabi_dsub+0x4a2>
 8002ee6:	4688      	mov	r8, r1
 8002ee8:	000e      	movs	r6, r1
 8002eea:	2501      	movs	r5, #1
 8002eec:	e6de      	b.n	8002cac <__aeabi_dsub+0x4c4>
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	000007ff 	.word	0x000007ff
 8002ef4:	ff7fffff 	.word	0xff7fffff
 8002ef8:	000007fe 	.word	0x000007fe
 8002efc:	2d00      	cmp	r5, #0
 8002efe:	d100      	bne.n	8002f02 <__aeabi_dsub+0x71a>
 8002f00:	e668      	b.n	8002bd4 <__aeabi_dsub+0x3ec>
 8002f02:	464b      	mov	r3, r9
 8002f04:	1bd9      	subs	r1, r3, r7
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d101      	bne.n	8002f0e <__aeabi_dsub+0x726>
 8002f0a:	468a      	mov	sl, r1
 8002f0c:	e5a7      	b.n	8002a5e <__aeabi_dsub+0x276>
 8002f0e:	2701      	movs	r7, #1
 8002f10:	2938      	cmp	r1, #56	@ 0x38
 8002f12:	dd00      	ble.n	8002f16 <__aeabi_dsub+0x72e>
 8002f14:	e5c7      	b.n	8002aa6 <__aeabi_dsub+0x2be>
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	0412      	lsls	r2, r2, #16
 8002f1a:	4314      	orrs	r4, r2
 8002f1c:	e5af      	b.n	8002a7e <__aeabi_dsub+0x296>
 8002f1e:	46c0      	nop			@ (mov r8, r8)

08002f20 <__aeabi_dcmpun>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	46c6      	mov	lr, r8
 8002f24:	031e      	lsls	r6, r3, #12
 8002f26:	0b36      	lsrs	r6, r6, #12
 8002f28:	46b0      	mov	r8, r6
 8002f2a:	4e0d      	ldr	r6, [pc, #52]	@ (8002f60 <__aeabi_dcmpun+0x40>)
 8002f2c:	030c      	lsls	r4, r1, #12
 8002f2e:	004d      	lsls	r5, r1, #1
 8002f30:	005f      	lsls	r7, r3, #1
 8002f32:	b500      	push	{lr}
 8002f34:	0b24      	lsrs	r4, r4, #12
 8002f36:	0d6d      	lsrs	r5, r5, #21
 8002f38:	0d7f      	lsrs	r7, r7, #21
 8002f3a:	42b5      	cmp	r5, r6
 8002f3c:	d00b      	beq.n	8002f56 <__aeabi_dcmpun+0x36>
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <__aeabi_dcmpun+0x40>)
 8002f40:	2000      	movs	r0, #0
 8002f42:	428f      	cmp	r7, r1
 8002f44:	d104      	bne.n	8002f50 <__aeabi_dcmpun+0x30>
 8002f46:	4646      	mov	r6, r8
 8002f48:	4316      	orrs	r6, r2
 8002f4a:	0030      	movs	r0, r6
 8002f4c:	1e43      	subs	r3, r0, #1
 8002f4e:	4198      	sbcs	r0, r3
 8002f50:	bc80      	pop	{r7}
 8002f52:	46b8      	mov	r8, r7
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	4304      	orrs	r4, r0
 8002f58:	2001      	movs	r0, #1
 8002f5a:	2c00      	cmp	r4, #0
 8002f5c:	d1f8      	bne.n	8002f50 <__aeabi_dcmpun+0x30>
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_dcmpun+0x1e>
 8002f60:	000007ff 	.word	0x000007ff

08002f64 <__aeabi_i2d>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d016      	beq.n	8002f98 <__aeabi_i2d+0x34>
 8002f6a:	17c3      	asrs	r3, r0, #31
 8002f6c:	18c5      	adds	r5, r0, r3
 8002f6e:	405d      	eors	r5, r3
 8002f70:	0fc4      	lsrs	r4, r0, #31
 8002f72:	0028      	movs	r0, r5
 8002f74:	f000 f8f0 	bl	8003158 <__clzsi2>
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <__aeabi_i2d+0x58>)
 8002f7a:	1a1b      	subs	r3, r3, r0
 8002f7c:	055b      	lsls	r3, r3, #21
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	280a      	cmp	r0, #10
 8002f82:	dc14      	bgt.n	8002fae <__aeabi_i2d+0x4a>
 8002f84:	0002      	movs	r2, r0
 8002f86:	002e      	movs	r6, r5
 8002f88:	3215      	adds	r2, #21
 8002f8a:	4096      	lsls	r6, r2
 8002f8c:	220b      	movs	r2, #11
 8002f8e:	1a12      	subs	r2, r2, r0
 8002f90:	40d5      	lsrs	r5, r2
 8002f92:	032d      	lsls	r5, r5, #12
 8002f94:	0b2d      	lsrs	r5, r5, #12
 8002f96:	e003      	b.n	8002fa0 <__aeabi_i2d+0x3c>
 8002f98:	2400      	movs	r4, #0
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	432b      	orrs	r3, r5
 8002fa4:	07e4      	lsls	r4, r4, #31
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	0030      	movs	r0, r6
 8002faa:	0019      	movs	r1, r3
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	380b      	subs	r0, #11
 8002fb0:	4085      	lsls	r5, r0
 8002fb2:	032d      	lsls	r5, r5, #12
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	e7f2      	b.n	8002fa0 <__aeabi_i2d+0x3c>
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	0000041e 	.word	0x0000041e

08002fc0 <__aeabi_f2d>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	0242      	lsls	r2, r0, #9
 8002fc4:	0043      	lsls	r3, r0, #1
 8002fc6:	0fc4      	lsrs	r4, r0, #31
 8002fc8:	20fe      	movs	r0, #254	@ 0xfe
 8002fca:	0e1b      	lsrs	r3, r3, #24
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	0a55      	lsrs	r5, r2, #9
 8002fd0:	4208      	tst	r0, r1
 8002fd2:	d00c      	beq.n	8002fee <__aeabi_f2d+0x2e>
 8002fd4:	21e0      	movs	r1, #224	@ 0xe0
 8002fd6:	0089      	lsls	r1, r1, #2
 8002fd8:	468c      	mov	ip, r1
 8002fda:	076d      	lsls	r5, r5, #29
 8002fdc:	0b12      	lsrs	r2, r2, #12
 8002fde:	4463      	add	r3, ip
 8002fe0:	051b      	lsls	r3, r3, #20
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	07e4      	lsls	r4, r4, #31
 8002fe6:	4323      	orrs	r3, r4
 8002fe8:	0028      	movs	r0, r5
 8002fea:	0019      	movs	r1, r3
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d114      	bne.n	800301c <__aeabi_f2d+0x5c>
 8002ff2:	2d00      	cmp	r5, #0
 8002ff4:	d01b      	beq.n	800302e <__aeabi_f2d+0x6e>
 8002ff6:	0028      	movs	r0, r5
 8002ff8:	f000 f8ae 	bl	8003158 <__clzsi2>
 8002ffc:	280a      	cmp	r0, #10
 8002ffe:	dc1c      	bgt.n	800303a <__aeabi_f2d+0x7a>
 8003000:	230b      	movs	r3, #11
 8003002:	002a      	movs	r2, r5
 8003004:	1a1b      	subs	r3, r3, r0
 8003006:	40da      	lsrs	r2, r3
 8003008:	0003      	movs	r3, r0
 800300a:	3315      	adds	r3, #21
 800300c:	409d      	lsls	r5, r3
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <__aeabi_f2d+0x88>)
 8003010:	0312      	lsls	r2, r2, #12
 8003012:	1a1b      	subs	r3, r3, r0
 8003014:	055b      	lsls	r3, r3, #21
 8003016:	0b12      	lsrs	r2, r2, #12
 8003018:	0d5b      	lsrs	r3, r3, #21
 800301a:	e7e1      	b.n	8002fe0 <__aeabi_f2d+0x20>
 800301c:	2d00      	cmp	r5, #0
 800301e:	d009      	beq.n	8003034 <__aeabi_f2d+0x74>
 8003020:	0b13      	lsrs	r3, r2, #12
 8003022:	2280      	movs	r2, #128	@ 0x80
 8003024:	0312      	lsls	r2, r2, #12
 8003026:	431a      	orrs	r2, r3
 8003028:	076d      	lsls	r5, r5, #29
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <__aeabi_f2d+0x8c>)
 800302c:	e7d8      	b.n	8002fe0 <__aeabi_f2d+0x20>
 800302e:	2300      	movs	r3, #0
 8003030:	2200      	movs	r2, #0
 8003032:	e7d5      	b.n	8002fe0 <__aeabi_f2d+0x20>
 8003034:	2200      	movs	r2, #0
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <__aeabi_f2d+0x8c>)
 8003038:	e7d2      	b.n	8002fe0 <__aeabi_f2d+0x20>
 800303a:	0003      	movs	r3, r0
 800303c:	002a      	movs	r2, r5
 800303e:	3b0b      	subs	r3, #11
 8003040:	409a      	lsls	r2, r3
 8003042:	2500      	movs	r5, #0
 8003044:	e7e3      	b.n	800300e <__aeabi_f2d+0x4e>
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	00000389 	.word	0x00000389
 800304c:	000007ff 	.word	0x000007ff

08003050 <__aeabi_d2f>:
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	004b      	lsls	r3, r1, #1
 8003054:	030f      	lsls	r7, r1, #12
 8003056:	0d5b      	lsrs	r3, r3, #21
 8003058:	4c3b      	ldr	r4, [pc, #236]	@ (8003148 <__aeabi_d2f+0xf8>)
 800305a:	0f45      	lsrs	r5, r0, #29
 800305c:	b083      	sub	sp, #12
 800305e:	0a7f      	lsrs	r7, r7, #9
 8003060:	1c5e      	adds	r6, r3, #1
 8003062:	432f      	orrs	r7, r5
 8003064:	9000      	str	r0, [sp, #0]
 8003066:	9101      	str	r1, [sp, #4]
 8003068:	0fca      	lsrs	r2, r1, #31
 800306a:	00c5      	lsls	r5, r0, #3
 800306c:	4226      	tst	r6, r4
 800306e:	d00b      	beq.n	8003088 <__aeabi_d2f+0x38>
 8003070:	4936      	ldr	r1, [pc, #216]	@ (800314c <__aeabi_d2f+0xfc>)
 8003072:	185c      	adds	r4, r3, r1
 8003074:	2cfe      	cmp	r4, #254	@ 0xfe
 8003076:	dd13      	ble.n	80030a0 <__aeabi_d2f+0x50>
 8003078:	20ff      	movs	r0, #255	@ 0xff
 800307a:	2300      	movs	r3, #0
 800307c:	05c0      	lsls	r0, r0, #23
 800307e:	4318      	orrs	r0, r3
 8003080:	07d2      	lsls	r2, r2, #31
 8003082:	4310      	orrs	r0, r2
 8003084:	b003      	add	sp, #12
 8003086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <__aeabi_d2f+0x42>
 800308c:	2000      	movs	r0, #0
 800308e:	2300      	movs	r3, #0
 8003090:	e7f4      	b.n	800307c <__aeabi_d2f+0x2c>
 8003092:	433d      	orrs	r5, r7
 8003094:	d0f0      	beq.n	8003078 <__aeabi_d2f+0x28>
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	03db      	lsls	r3, r3, #15
 800309a:	20ff      	movs	r0, #255	@ 0xff
 800309c:	433b      	orrs	r3, r7
 800309e:	e7ed      	b.n	800307c <__aeabi_d2f+0x2c>
 80030a0:	2c00      	cmp	r4, #0
 80030a2:	dd14      	ble.n	80030ce <__aeabi_d2f+0x7e>
 80030a4:	9b00      	ldr	r3, [sp, #0]
 80030a6:	00ff      	lsls	r7, r7, #3
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	4183      	sbcs	r3, r0
 80030ae:	0f69      	lsrs	r1, r5, #29
 80030b0:	433b      	orrs	r3, r7
 80030b2:	430b      	orrs	r3, r1
 80030b4:	0759      	lsls	r1, r3, #29
 80030b6:	d041      	beq.n	800313c <__aeabi_d2f+0xec>
 80030b8:	210f      	movs	r1, #15
 80030ba:	4019      	ands	r1, r3
 80030bc:	2904      	cmp	r1, #4
 80030be:	d028      	beq.n	8003112 <__aeabi_d2f+0xc2>
 80030c0:	3304      	adds	r3, #4
 80030c2:	0159      	lsls	r1, r3, #5
 80030c4:	d525      	bpl.n	8003112 <__aeabi_d2f+0xc2>
 80030c6:	3401      	adds	r4, #1
 80030c8:	2300      	movs	r3, #0
 80030ca:	b2e0      	uxtb	r0, r4
 80030cc:	e7d6      	b.n	800307c <__aeabi_d2f+0x2c>
 80030ce:	0021      	movs	r1, r4
 80030d0:	3117      	adds	r1, #23
 80030d2:	dbdb      	blt.n	800308c <__aeabi_d2f+0x3c>
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	201e      	movs	r0, #30
 80030d8:	0409      	lsls	r1, r1, #16
 80030da:	4339      	orrs	r1, r7
 80030dc:	1b00      	subs	r0, r0, r4
 80030de:	281f      	cmp	r0, #31
 80030e0:	dd1b      	ble.n	800311a <__aeabi_d2f+0xca>
 80030e2:	2602      	movs	r6, #2
 80030e4:	4276      	negs	r6, r6
 80030e6:	1b34      	subs	r4, r6, r4
 80030e8:	000e      	movs	r6, r1
 80030ea:	40e6      	lsrs	r6, r4
 80030ec:	0034      	movs	r4, r6
 80030ee:	2820      	cmp	r0, #32
 80030f0:	d004      	beq.n	80030fc <__aeabi_d2f+0xac>
 80030f2:	4817      	ldr	r0, [pc, #92]	@ (8003150 <__aeabi_d2f+0x100>)
 80030f4:	4684      	mov	ip, r0
 80030f6:	4463      	add	r3, ip
 80030f8:	4099      	lsls	r1, r3
 80030fa:	430d      	orrs	r5, r1
 80030fc:	002b      	movs	r3, r5
 80030fe:	1e59      	subs	r1, r3, #1
 8003100:	418b      	sbcs	r3, r1
 8003102:	4323      	orrs	r3, r4
 8003104:	0759      	lsls	r1, r3, #29
 8003106:	d015      	beq.n	8003134 <__aeabi_d2f+0xe4>
 8003108:	210f      	movs	r1, #15
 800310a:	2400      	movs	r4, #0
 800310c:	4019      	ands	r1, r3
 800310e:	2904      	cmp	r1, #4
 8003110:	d117      	bne.n	8003142 <__aeabi_d2f+0xf2>
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	0a5b      	lsrs	r3, r3, #9
 8003116:	b2e0      	uxtb	r0, r4
 8003118:	e7b0      	b.n	800307c <__aeabi_d2f+0x2c>
 800311a:	4c0e      	ldr	r4, [pc, #56]	@ (8003154 <__aeabi_d2f+0x104>)
 800311c:	191c      	adds	r4, r3, r4
 800311e:	002b      	movs	r3, r5
 8003120:	40a5      	lsls	r5, r4
 8003122:	40c3      	lsrs	r3, r0
 8003124:	40a1      	lsls	r1, r4
 8003126:	1e68      	subs	r0, r5, #1
 8003128:	4185      	sbcs	r5, r0
 800312a:	4329      	orrs	r1, r5
 800312c:	430b      	orrs	r3, r1
 800312e:	2400      	movs	r4, #0
 8003130:	0759      	lsls	r1, r3, #29
 8003132:	d1c1      	bne.n	80030b8 <__aeabi_d2f+0x68>
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	2000      	movs	r0, #0
 8003138:	0a5b      	lsrs	r3, r3, #9
 800313a:	e79f      	b.n	800307c <__aeabi_d2f+0x2c>
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	b2e0      	uxtb	r0, r4
 8003140:	e79c      	b.n	800307c <__aeabi_d2f+0x2c>
 8003142:	3304      	adds	r3, #4
 8003144:	e7e5      	b.n	8003112 <__aeabi_d2f+0xc2>
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	000007fe 	.word	0x000007fe
 800314c:	fffffc80 	.word	0xfffffc80
 8003150:	fffffca2 	.word	0xfffffca2
 8003154:	fffffc82 	.word	0xfffffc82

08003158 <__clzsi2>:
 8003158:	211c      	movs	r1, #28
 800315a:	2301      	movs	r3, #1
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	4298      	cmp	r0, r3
 8003160:	d301      	bcc.n	8003166 <__clzsi2+0xe>
 8003162:	0c00      	lsrs	r0, r0, #16
 8003164:	3910      	subs	r1, #16
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	4298      	cmp	r0, r3
 800316a:	d301      	bcc.n	8003170 <__clzsi2+0x18>
 800316c:	0a00      	lsrs	r0, r0, #8
 800316e:	3908      	subs	r1, #8
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	4298      	cmp	r0, r3
 8003174:	d301      	bcc.n	800317a <__clzsi2+0x22>
 8003176:	0900      	lsrs	r0, r0, #4
 8003178:	3904      	subs	r1, #4
 800317a:	a202      	add	r2, pc, #8	@ (adr r2, 8003184 <__clzsi2+0x2c>)
 800317c:	5c10      	ldrb	r0, [r2, r0]
 800317e:	1840      	adds	r0, r0, r1
 8003180:	4770      	bx	lr
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	02020304 	.word	0x02020304
 8003188:	01010101 	.word	0x01010101
	...

08003194 <calcular_temperatura>:
void transmitir_temperatura(float temperatura);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calcular_temperatura(uint32_t leitura) {
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	float ntc_resistance;
	/* calcula resistencia NTC */
	ntc_resistance = ((resistor)/((4095.0f/leitura) - 1.0f));
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe f871 	bl	8001284 <__aeabi_ui2f>
 80031a2:	1c03      	adds	r3, r0, #0
 80031a4:	1c19      	adds	r1, r3, #0
 80031a6:	4828      	ldr	r0, [pc, #160]	@ (8003248 <calcular_temperatura+0xb4>)
 80031a8:	f7fd fb38 	bl	800081c <__aeabi_fdiv>
 80031ac:	1c03      	adds	r3, r0, #0
 80031ae:	21fe      	movs	r1, #254	@ 0xfe
 80031b0:	0589      	lsls	r1, r1, #22
 80031b2:	1c18      	adds	r0, r3, #0
 80031b4:	f7fd fe56 	bl	8000e64 <__aeabi_fsub>
 80031b8:	1c03      	adds	r3, r0, #0
 80031ba:	1c19      	adds	r1, r3, #0
 80031bc:	4823      	ldr	r0, [pc, #140]	@ (800324c <calcular_temperatura+0xb8>)
 80031be:	f7fd fb2d 	bl	800081c <__aeabi_fdiv>
 80031c2:	1c03      	adds	r3, r0, #0
 80031c4:	617b      	str	r3, [r7, #20]
	/* Calcula temperatura usando equacao Steinhart-Hart  */
	float ntc_ln = log(ntc_resistance);
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff fefa 	bl	8002fc0 <__aeabi_f2d>
 80031cc:	0002      	movs	r2, r0
 80031ce:	000b      	movs	r3, r1
 80031d0:	0010      	movs	r0, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	f003 fc58 	bl	8006a88 <log>
 80031d8:	0002      	movs	r2, r0
 80031da:	000b      	movs	r3, r1
 80031dc:	0010      	movs	r0, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	f7ff ff36 	bl	8003050 <__aeabi_d2f>
 80031e4:	1c03      	adds	r3, r0, #0
 80031e6:	613b      	str	r3, [r7, #16]
	float temperatura = (1.0f / (A + B * ntc_ln + C * ntc_ln * ntc_ln * ntc_ln)) - 273.15f;
 80031e8:	4919      	ldr	r1, [pc, #100]	@ (8003250 <calcular_temperatura+0xbc>)
 80031ea:	6938      	ldr	r0, [r7, #16]
 80031ec:	f7fd fcfc 	bl	8000be8 <__aeabi_fmul>
 80031f0:	1c03      	adds	r3, r0, #0
 80031f2:	4918      	ldr	r1, [pc, #96]	@ (8003254 <calcular_temperatura+0xc0>)
 80031f4:	1c18      	adds	r0, r3, #0
 80031f6:	f7fd f987 	bl	8000508 <__aeabi_fadd>
 80031fa:	1c03      	adds	r3, r0, #0
 80031fc:	1c1c      	adds	r4, r3, #0
 80031fe:	4916      	ldr	r1, [pc, #88]	@ (8003258 <calcular_temperatura+0xc4>)
 8003200:	6938      	ldr	r0, [r7, #16]
 8003202:	f7fd fcf1 	bl	8000be8 <__aeabi_fmul>
 8003206:	1c03      	adds	r3, r0, #0
 8003208:	6939      	ldr	r1, [r7, #16]
 800320a:	1c18      	adds	r0, r3, #0
 800320c:	f7fd fcec 	bl	8000be8 <__aeabi_fmul>
 8003210:	1c03      	adds	r3, r0, #0
 8003212:	6939      	ldr	r1, [r7, #16]
 8003214:	1c18      	adds	r0, r3, #0
 8003216:	f7fd fce7 	bl	8000be8 <__aeabi_fmul>
 800321a:	1c03      	adds	r3, r0, #0
 800321c:	1c19      	adds	r1, r3, #0
 800321e:	1c20      	adds	r0, r4, #0
 8003220:	f7fd f972 	bl	8000508 <__aeabi_fadd>
 8003224:	1c03      	adds	r3, r0, #0
 8003226:	1c19      	adds	r1, r3, #0
 8003228:	20fe      	movs	r0, #254	@ 0xfe
 800322a:	0580      	lsls	r0, r0, #22
 800322c:	f7fd faf6 	bl	800081c <__aeabi_fdiv>
 8003230:	1c03      	adds	r3, r0, #0
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <calcular_temperatura+0xc8>)
 8003234:	1c18      	adds	r0, r3, #0
 8003236:	f7fd fe15 	bl	8000e64 <__aeabi_fsub>
 800323a:	1c03      	adds	r3, r0, #0
 800323c:	60fb      	str	r3, [r7, #12]
	return temperatura;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	1c18      	adds	r0, r3, #0
 8003242:	46bd      	mov	sp, r7
 8003244:	b007      	add	sp, #28
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	457ff000 	.word	0x457ff000
 800324c:	461c4000 	.word	0x461c4000
 8003250:	3973bdd2 	.word	0x3973bdd2
 8003254:	3a95365e 	.word	0x3a95365e
 8003258:	33cbc654 	.word	0x33cbc654
 800325c:	43889333 	.word	0x43889333

08003260 <controlar_leds_e_buzzer>:


void controlar_leds_e_buzzer(float temperatura) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    if (temperatura <= 15) {
 8003268:	4939      	ldr	r1, [pc, #228]	@ (8003350 <controlar_leds_e_buzzer+0xf0>)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd f92e 	bl	80004cc <__aeabi_fcmple>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d01c      	beq.n	80032ae <controlar_leds_e_buzzer+0x4e>
        // Ligar LED azul
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_SET);
 8003274:	23a0      	movs	r3, #160	@ 0xa0
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	2201      	movs	r2, #1
 800327a:	2108      	movs	r1, #8
 800327c:	0018      	movs	r0, r3
 800327e:	f001 fd47 	bl	8004d10 <HAL_GPIO_WritePin>
        // Desligar outros LEDs
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8003282:	23a0      	movs	r3, #160	@ 0xa0
 8003284:	05db      	lsls	r3, r3, #23
 8003286:	2200      	movs	r2, #0
 8003288:	2104      	movs	r1, #4
 800328a:	0018      	movs	r0, r3
 800328c:	f001 fd40 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8003290:	23a0      	movs	r3, #160	@ 0xa0
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	2200      	movs	r2, #0
 8003296:	2102      	movs	r1, #2
 8003298:	0018      	movs	r0, r3
 800329a:	f001 fd39 	bl	8004d10 <HAL_GPIO_WritePin>
        // Ligar buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800329e:	23a0      	movs	r3, #160	@ 0xa0
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	2201      	movs	r2, #1
 80032a4:	2140      	movs	r1, #64	@ 0x40
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 fd32 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
        // Ligar buzzer
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
    }
}
 80032ac:	e04b      	b.n	8003346 <controlar_leds_e_buzzer+0xe6>
    } else if (temperatura > 15 && temperatura <= 30) {
 80032ae:	4928      	ldr	r1, [pc, #160]	@ (8003350 <controlar_leds_e_buzzer+0xf0>)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd f915 	bl	80004e0 <__aeabi_fcmpgt>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d022      	beq.n	8003300 <controlar_leds_e_buzzer+0xa0>
 80032ba:	4926      	ldr	r1, [pc, #152]	@ (8003354 <controlar_leds_e_buzzer+0xf4>)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd f905 	bl	80004cc <__aeabi_fcmple>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d01c      	beq.n	8003300 <controlar_leds_e_buzzer+0xa0>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 80032c6:	23a0      	movs	r3, #160	@ 0xa0
 80032c8:	05db      	lsls	r3, r3, #23
 80032ca:	2201      	movs	r2, #1
 80032cc:	2104      	movs	r1, #4
 80032ce:	0018      	movs	r0, r3
 80032d0:	f001 fd1e 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 80032d4:	23a0      	movs	r3, #160	@ 0xa0
 80032d6:	05db      	lsls	r3, r3, #23
 80032d8:	2200      	movs	r2, #0
 80032da:	2108      	movs	r1, #8
 80032dc:	0018      	movs	r0, r3
 80032de:	f001 fd17 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 80032e2:	23a0      	movs	r3, #160	@ 0xa0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	2200      	movs	r2, #0
 80032e8:	2102      	movs	r1, #2
 80032ea:	0018      	movs	r0, r3
 80032ec:	f001 fd10 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80032f0:	23a0      	movs	r3, #160	@ 0xa0
 80032f2:	05db      	lsls	r3, r3, #23
 80032f4:	2200      	movs	r2, #0
 80032f6:	2140      	movs	r1, #64	@ 0x40
 80032f8:	0018      	movs	r0, r3
 80032fa:	f001 fd09 	bl	8004d10 <HAL_GPIO_WritePin>
}
 80032fe:	e022      	b.n	8003346 <controlar_leds_e_buzzer+0xe6>
    } else if (temperatura > 30) {
 8003300:	4914      	ldr	r1, [pc, #80]	@ (8003354 <controlar_leds_e_buzzer+0xf4>)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd f8ec 	bl	80004e0 <__aeabi_fcmpgt>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d100      	bne.n	800330e <controlar_leds_e_buzzer+0xae>
}
 800330c:	e01b      	b.n	8003346 <controlar_leds_e_buzzer+0xe6>
        HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 800330e:	23a0      	movs	r3, #160	@ 0xa0
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	2201      	movs	r2, #1
 8003314:	2102      	movs	r1, #2
 8003316:	0018      	movs	r0, r3
 8003318:	f001 fcfa 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 800331c:	23a0      	movs	r3, #160	@ 0xa0
 800331e:	05db      	lsls	r3, r3, #23
 8003320:	2200      	movs	r2, #0
 8003322:	2108      	movs	r1, #8
 8003324:	0018      	movs	r0, r3
 8003326:	f001 fcf3 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800332a:	23a0      	movs	r3, #160	@ 0xa0
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	2200      	movs	r2, #0
 8003330:	2104      	movs	r1, #4
 8003332:	0018      	movs	r0, r3
 8003334:	f001 fcec 	bl	8004d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003338:	23a0      	movs	r3, #160	@ 0xa0
 800333a:	05db      	lsls	r3, r3, #23
 800333c:	2201      	movs	r2, #1
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	0018      	movs	r0, r3
 8003342:	f001 fce5 	bl	8004d10 <HAL_GPIO_WritePin>
}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	41700000 	.word	0x41700000
 8003354:	41f00000 	.word	0x41f00000

08003358 <transmitir_temperatura>:

void transmitir_temperatura(float temperatura) {
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b093      	sub	sp, #76	@ 0x4c
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    // Divida a temperatura em parte inteira e parte decimal
    int parte_inteira = (int)temperatura;
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd ff23 	bl	80011ac <__aeabi_f2iz>
 8003366:	0003      	movs	r3, r0
 8003368:	647b      	str	r3, [r7, #68]	@ 0x44
    int parte_decimal = (int)((temperatura - parte_inteira) * 100); // Duas casas decimais
 800336a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800336c:	f7fd ff3e 	bl	80011ec <__aeabi_i2f>
 8003370:	1c03      	adds	r3, r0, #0
 8003372:	1c19      	adds	r1, r3, #0
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fd fd75 	bl	8000e64 <__aeabi_fsub>
 800337a:	1c03      	adds	r3, r0, #0
 800337c:	4910      	ldr	r1, [pc, #64]	@ (80033c0 <transmitir_temperatura+0x68>)
 800337e:	1c18      	adds	r0, r3, #0
 8003380:	f7fd fc32 	bl	8000be8 <__aeabi_fmul>
 8003384:	1c03      	adds	r3, r0, #0
 8003386:	1c18      	adds	r0, r3, #0
 8003388:	f7fd ff10 	bl	80011ac <__aeabi_f2iz>
 800338c:	0003      	movs	r3, r0
 800338e:	643b      	str	r3, [r7, #64]	@ 0x40

    // Buffer para a string a ser transmitida
    char buffer[50];

    // Converta as partes para string e envie via UART
    sprintf(buffer, "Temperatura: %d.%02d\r\n", parte_inteira, parte_decimal);
 8003390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003394:	490b      	ldr	r1, [pc, #44]	@ (80033c4 <transmitir_temperatura+0x6c>)
 8003396:	240c      	movs	r4, #12
 8003398:	1938      	adds	r0, r7, r4
 800339a:	f002 fed7 	bl	800614c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fc feb1 	bl	8000108 <strlen>
 80033a6:	0003      	movs	r3, r0
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	425b      	negs	r3, r3
 80033ae:	1939      	adds	r1, r7, r4
 80033b0:	4805      	ldr	r0, [pc, #20]	@ (80033c8 <transmitir_temperatura+0x70>)
 80033b2:	f002 f961 	bl	8005678 <HAL_UART_Transmit>
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b013      	add	sp, #76	@ 0x4c
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	42c80000 	.word	0x42c80000
 80033c4:	08006e7c 	.word	0x08006e7c
 80033c8:	200000dc 	.word	0x200000dc

080033cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d2:	f000 fad6 	bl	8003982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d6:	f000 f82d 	bl	8003434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033da:	f000 f929 	bl	8003630 <MX_GPIO_Init>
  MX_ADC1_Init();
 80033de:	f000 f86d 	bl	80034bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80033e2:	f000 f8d7 	bl	8003594 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// ADC Polling
	HAL_ADC_Start (&hadc1);   // inicia leitura ADC
 80033e6:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <main+0x64>)
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fe67 	bl	80040bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 1000); //aguarda conversao seja concluida
 80033ee:	23fa      	movs	r3, #250	@ 0xfa
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <main+0x64>)
 80033f4:	0011      	movs	r1, r2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 feea 	bl	80041d0 <HAL_ADC_PollForConversion>
	uint32_t leitura = HAL_ADC_GetValue (&hadc1); //  armazenar o valor lido pelo ADC
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <main+0x64>)
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 ff74 	bl	80042ec <HAL_ADC_GetValue>
 8003404:	0003      	movs	r3, r0
 8003406:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <main+0x64>)
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fea4 	bl	8004158 <HAL_ADC_Stop>
	// Calcula a temperatura
	float temperatura = calcular_temperatura(leitura);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff febe 	bl	8003194 <calcular_temperatura>
 8003418:	1c03      	adds	r3, r0, #0
 800341a:	603b      	str	r3, [r7, #0]
	// Controla os LEDs e o buzzer baseado na temperatura
	controlar_leds_e_buzzer(temperatura);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	1c18      	adds	r0, r3, #0
 8003420:	f7ff ff1e 	bl	8003260 <controlar_leds_e_buzzer>
	// Transmite a temperatura via UART
	transmitir_temperatura(temperatura);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	1c18      	adds	r0, r3, #0
 8003428:	f7ff ff96 	bl	8003358 <transmitir_temperatura>
  {
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	e7da      	b.n	80033e6 <main+0x1a>
 8003430:	20000078 	.word	0x20000078

08003434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b08d      	sub	sp, #52	@ 0x34
 8003438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800343a:	2414      	movs	r4, #20
 800343c:	193b      	adds	r3, r7, r4
 800343e:	0018      	movs	r0, r3
 8003440:	231c      	movs	r3, #28
 8003442:	001a      	movs	r2, r3
 8003444:	2100      	movs	r1, #0
 8003446:	f002 fea1 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800344a:	003b      	movs	r3, r7
 800344c:	0018      	movs	r0, r3
 800344e:	2314      	movs	r3, #20
 8003450:	001a      	movs	r2, r3
 8003452:	2100      	movs	r1, #0
 8003454:	f002 fe9a 	bl	800618c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003458:	193b      	adds	r3, r7, r4
 800345a:	2202      	movs	r2, #2
 800345c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800345e:	193b      	adds	r3, r7, r4
 8003460:	2280      	movs	r2, #128	@ 0x80
 8003462:	0052      	lsls	r2, r2, #1
 8003464:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003466:	193b      	adds	r3, r7, r4
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003472:	193b      	adds	r3, r7, r4
 8003474:	0018      	movs	r0, r3
 8003476:	f001 fc69 	bl	8004d4c <HAL_RCC_OscConfig>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800347e:	f000 f90d 	bl	800369c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003482:	003b      	movs	r3, r7
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003488:	003b      	movs	r3, r7
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800348e:	003b      	movs	r3, r7
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003494:	003b      	movs	r3, r7
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800349a:	003b      	movs	r3, r7
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034a0:	003b      	movs	r3, r7
 80034a2:	2101      	movs	r1, #1
 80034a4:	0018      	movs	r0, r3
 80034a6:	f001 fe35 	bl	8005114 <HAL_RCC_ClockConfig>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d001      	beq.n	80034b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80034ae:	f000 f8f5 	bl	800369c <Error_Handler>
  }
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b00d      	add	sp, #52	@ 0x34
 80034b8:	bd90      	pop	{r4, r7, pc}
	...

080034bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	0018      	movs	r0, r3
 80034c6:	230c      	movs	r3, #12
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f002 fe5e 	bl	800618c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80034d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034d2:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <MX_ADC1_Init+0xd0>)
 80034d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80034d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034d8:	2280      	movs	r2, #128	@ 0x80
 80034da:	05d2      	lsls	r2, r2, #23
 80034dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034de:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034ea:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034f0:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034f2:	2204      	movs	r2, #4
 80034f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80034fc:	4b22      	ldr	r3, [pc, #136]	@ (8003588 <MX_ADC1_Init+0xcc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003502:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003504:	2200      	movs	r2, #0
 8003506:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003508:	4b1f      	ldr	r3, [pc, #124]	@ (8003588 <MX_ADC1_Init+0xcc>)
 800350a:	2201      	movs	r2, #1
 800350c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003510:	2220      	movs	r2, #32
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003516:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003518:	2200      	movs	r2, #0
 800351a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800351c:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <MX_ADC1_Init+0xcc>)
 800351e:	2200      	movs	r2, #0
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003522:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003524:	222c      	movs	r2, #44	@ 0x2c
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800352a:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <MX_ADC1_Init+0xcc>)
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003530:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003532:	2200      	movs	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003536:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800353c:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <MX_ADC1_Init+0xcc>)
 800353e:	223c      	movs	r2, #60	@ 0x3c
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003544:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003546:	2200      	movs	r2, #0
 8003548:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800354a:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <MX_ADC1_Init+0xcc>)
 800354c:	0018      	movs	r0, r3
 800354e:	f000 fc0f 	bl	8003d70 <HAL_ADC_Init>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003556:	f000 f8a1 	bl	800369c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	4a0c      	ldr	r2, [pc, #48]	@ (8003590 <MX_ADC1_Init+0xd4>)
 800355e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2200      	movs	r2, #0
 8003564:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800356c:	1d3a      	adds	r2, r7, #4
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <MX_ADC1_Init+0xcc>)
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fec6 	bl	8004304 <HAL_ADC_ConfigChannel>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800357c:	f000 f88e 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000078 	.word	0x20000078
 800358c:	40012400 	.word	0x40012400
 8003590:	14000020 	.word	0x14000020

08003594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003598:	4b23      	ldr	r3, [pc, #140]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 800359a:	4a24      	ldr	r2, [pc, #144]	@ (800362c <MX_USART1_UART_Init+0x98>)
 800359c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800359e:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035a0:	22e1      	movs	r2, #225	@ 0xe1
 80035a2:	0252      	lsls	r2, r2, #9
 80035a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035a6:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035ba:	220c      	movs	r2, #12
 80035bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035d6:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035dc:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f001 fff4 	bl	80055cc <HAL_UART_Init>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80035e8:	f000 f858 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 80035ee:	2100      	movs	r1, #0
 80035f0:	0018      	movs	r0, r3
 80035f2:	f002 fccb 	bl	8005f8c <HAL_UARTEx_SetTxFifoThreshold>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d001      	beq.n	80035fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80035fa:	f000 f84f 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 8003600:	2100      	movs	r1, #0
 8003602:	0018      	movs	r0, r3
 8003604:	f002 fd02 	bl	800600c <HAL_UARTEx_SetRxFifoThreshold>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800360c:	f000 f846 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <MX_USART1_UART_Init+0x94>)
 8003612:	0018      	movs	r0, r3
 8003614:	f002 fc80 	bl	8005f18 <HAL_UARTEx_DisableFifoMode>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d001      	beq.n	8003620 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800361c:	f000 f83e 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	200000dc 	.word	0x200000dc
 800362c:	40013800 	.word	0x40013800

08003630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	0018      	movs	r0, r3
 800363a:	2314      	movs	r3, #20
 800363c:	001a      	movs	r2, r3
 800363e:	2100      	movs	r1, #0
 8003640:	f002 fda4 	bl	800618c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <MX_GPIO_Init+0x68>)
 8003646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <MX_GPIO_Init+0x68>)
 800364a:	2101      	movs	r1, #1
 800364c:	430a      	orrs	r2, r1
 800364e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003650:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <MX_GPIO_Init+0x68>)
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	2201      	movs	r2, #1
 8003656:	4013      	ands	r3, r2
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800365c:	23a0      	movs	r3, #160	@ 0xa0
 800365e:	05db      	lsls	r3, r3, #23
 8003660:	2200      	movs	r2, #0
 8003662:	214e      	movs	r1, #78	@ 0x4e
 8003664:	0018      	movs	r0, r3
 8003666:	f001 fb53 	bl	8004d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|BUZZER_Pin;
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	224e      	movs	r2, #78	@ 0x4e
 800366e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2201      	movs	r2, #1
 8003674:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003682:	1d3a      	adds	r2, r7, #4
 8003684:	23a0      	movs	r3, #160	@ 0xa0
 8003686:	05db      	lsls	r3, r3, #23
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f001 f9d6 	bl	8004a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b006      	add	sp, #24
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	e7fd      	b.n	80036a4 <Error_Handler+0x8>

080036a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_MspInit+0x50>)
 80036b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b2:	4b11      	ldr	r3, [pc, #68]	@ (80036f8 <HAL_MspInit+0x50>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <HAL_MspInit+0x50>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_MspInit+0x50>)
 80036c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_MspInit+0x50>)
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	0549      	lsls	r1, r1, #21
 80036d0:	430a      	orrs	r2, r1
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036d4:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_MspInit+0x50>)
 80036d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	055b      	lsls	r3, r3, #21
 80036dc:	4013      	ands	r3, r2
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80036e2:	2008      	movs	r0, #8
 80036e4:	f000 f9ca 	bl	8003a7c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80036e8:	2010      	movs	r0, #16
 80036ea:	f000 f9c7 	bl	8003a7c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	40021000 	.word	0x40021000

080036fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b091      	sub	sp, #68	@ 0x44
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	232c      	movs	r3, #44	@ 0x2c
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	0018      	movs	r0, r3
 800370a:	2314      	movs	r3, #20
 800370c:	001a      	movs	r2, r3
 800370e:	2100      	movs	r1, #0
 8003710:	f002 fd3c 	bl	800618c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003714:	2410      	movs	r4, #16
 8003716:	193b      	adds	r3, r7, r4
 8003718:	0018      	movs	r0, r3
 800371a:	231c      	movs	r3, #28
 800371c:	001a      	movs	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	f002 fd34 	bl	800618c <memset>
  if(hadc->Instance==ADC1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <HAL_ADC_MspInit+0xb0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d139      	bne.n	80037a2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800372e:	193b      	adds	r3, r7, r4
 8003730:	2280      	movs	r2, #128	@ 0x80
 8003732:	01d2      	lsls	r2, r2, #7
 8003734:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800373c:	193b      	adds	r3, r7, r4
 800373e:	0018      	movs	r0, r3
 8003740:	f001 fe56 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d001      	beq.n	800374c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003748:	f7ff ffa8 	bl	800369c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 800374e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003750:	4b17      	ldr	r3, [pc, #92]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	0349      	lsls	r1, r1, #13
 8003756:	430a      	orrs	r2, r1
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 800375c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	035b      	lsls	r3, r3, #13
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003768:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 800376a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 800376e:	2101      	movs	r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	635a      	str	r2, [r3, #52]	@ 0x34
 8003774:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <HAL_ADC_MspInit+0xb4>)
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003780:	212c      	movs	r1, #44	@ 0x2c
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2220      	movs	r2, #32
 8003786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2203      	movs	r2, #3
 800378c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003794:	187a      	adds	r2, r7, r1
 8003796:	23a0      	movs	r3, #160	@ 0xa0
 8003798:	05db      	lsls	r3, r3, #23
 800379a:	0011      	movs	r1, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f001 f94d 	bl	8004a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b011      	add	sp, #68	@ 0x44
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	40012400 	.word	0x40012400
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b091      	sub	sp, #68	@ 0x44
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	232c      	movs	r3, #44	@ 0x2c
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	0018      	movs	r0, r3
 80037c2:	2314      	movs	r3, #20
 80037c4:	001a      	movs	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f002 fce0 	bl	800618c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037cc:	2410      	movs	r4, #16
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	0018      	movs	r0, r3
 80037d2:	231c      	movs	r3, #28
 80037d4:	001a      	movs	r2, r3
 80037d6:	2100      	movs	r1, #0
 80037d8:	f002 fcd8 	bl	800618c <memset>
  if(huart->Instance==USART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a23      	ldr	r2, [pc, #140]	@ (8003870 <HAL_UART_MspInit+0xbc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d13f      	bne.n	8003866 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037e6:	193b      	adds	r3, r7, r4
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	0018      	movs	r0, r3
 80037f6:	f001 fdfb 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d001      	beq.n	8003802 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037fe:	f7ff ff4d 	bl	800369c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003802:	4b1c      	ldr	r3, [pc, #112]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 8003804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003806:	4b1b      	ldr	r3, [pc, #108]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	01c9      	lsls	r1, r1, #7
 800380c:	430a      	orrs	r2, r1
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003810:	4b18      	ldr	r3, [pc, #96]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 8003812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	01db      	lsls	r3, r3, #7
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 8003820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_UART_MspInit+0xc0>)
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003836:	212c      	movs	r1, #44	@ 0x2c
 8003838:	187b      	adds	r3, r7, r1
 800383a:	22c0      	movs	r2, #192	@ 0xc0
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2202      	movs	r2, #2
 8003844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2201      	movs	r2, #1
 8003856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	187a      	adds	r2, r7, r1
 800385a:	23a0      	movs	r3, #160	@ 0xa0
 800385c:	05db      	lsls	r3, r3, #23
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f001 f8eb 	bl	8004a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b011      	add	sp, #68	@ 0x44
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	40013800 	.word	0x40013800
 8003874:	40021000 	.word	0x40021000

08003878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	e7fd      	b.n	800387c <NMI_Handler+0x4>

08003880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	e7fd      	b.n	8003884 <HardFault_Handler+0x4>

08003888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a0:	f000 f8d0 	bl	8003a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b4:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <_sbrk+0x5c>)
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <_sbrk+0x60>)
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <_sbrk+0x64>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <_sbrk+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <_sbrk+0x64>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d207      	bcs.n	80038ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038dc:	f002 fc5e 	bl	800619c <__errno>
 80038e0:	0003      	movs	r3, r0
 80038e2:	220c      	movs	r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	425b      	negs	r3, r3
 80038ea:	e009      	b.n	8003900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038ec:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f2:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <_sbrk+0x64>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	18d2      	adds	r2, r2, r3
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <_sbrk+0x64>)
 80038fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b006      	add	sp, #24
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20001800 	.word	0x20001800
 800390c:	00000400 	.word	0x00000400
 8003910:	20000170 	.word	0x20000170
 8003914:	200002c0 	.word	0x200002c0

08003918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800391c:	4b03      	ldr	r3, [pc, #12]	@ (800392c <SystemInit+0x14>)
 800391e:	2280      	movs	r2, #128	@ 0x80
 8003920:	0512      	lsls	r2, r2, #20
 8003922:	609a      	str	r2, [r3, #8]
#endif
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003930:	480d      	ldr	r0, [pc, #52]	@ (8003968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003932:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003934:	f7ff fff0 	bl	8003918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003938:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800393a:	e003      	b.n	8003944 <LoopCopyDataInit>

0800393c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800393e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003940:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003942:	3104      	adds	r1, #4

08003944 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003944:	480a      	ldr	r0, [pc, #40]	@ (8003970 <LoopForever+0xa>)
  ldr r3, =_edata
 8003946:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <LoopForever+0xe>)
  adds r2, r0, r1
 8003948:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800394a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800394c:	d3f6      	bcc.n	800393c <CopyDataInit>
  ldr r2, =_sbss
 800394e:	4a0a      	ldr	r2, [pc, #40]	@ (8003978 <LoopForever+0x12>)
  b LoopFillZerobss
 8003950:	e002      	b.n	8003958 <LoopFillZerobss>

08003952 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  str  r3, [r2]
 8003954:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003956:	3204      	adds	r2, #4

08003958 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <LoopForever+0x16>)
  cmp r2, r3
 800395a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800395c:	d3f9      	bcc.n	8003952 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800395e:	f002 fc23 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003962:	f7ff fd33 	bl	80033cc <main>

08003966 <LoopForever>:

LoopForever:
    b LoopForever
 8003966:	e7fe      	b.n	8003966 <LoopForever>
  ldr   r0, =_estack
 8003968:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800396c:	08007014 	.word	0x08007014
  ldr r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003974:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8003978:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 800397c:	200002c0 	.word	0x200002c0

08003980 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC1_IRQHandler>

08003982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800398e:	2003      	movs	r0, #3
 8003990:	f000 f80e 	bl	80039b0 <HAL_InitTick>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d003      	beq.n	80039a0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e001      	b.n	80039a4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039a0:	f7ff fe82 	bl	80036a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	781b      	ldrb	r3, [r3, #0]
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039b8:	230f      	movs	r3, #15
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <HAL_InitTick+0x88>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02b      	beq.n	8003a20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80039c8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_InitTick+0x8c>)
 80039ca:	681c      	ldr	r4, [r3, #0]
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <HAL_InitTick+0x88>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	0019      	movs	r1, r3
 80039d2:	23fa      	movs	r3, #250	@ 0xfa
 80039d4:	0098      	lsls	r0, r3, #2
 80039d6:	f7fc fba9 	bl	800012c <__udivsi3>
 80039da:	0003      	movs	r3, r0
 80039dc:	0019      	movs	r1, r3
 80039de:	0020      	movs	r0, r4
 80039e0:	f7fc fba4 	bl	800012c <__udivsi3>
 80039e4:	0003      	movs	r3, r0
 80039e6:	0018      	movs	r0, r3
 80039e8:	f001 f81b 	bl	8004a22 <HAL_SYSTICK_Config>
 80039ec:	1e03      	subs	r3, r0, #0
 80039ee:	d112      	bne.n	8003a16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d80a      	bhi.n	8003a0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 fffa 	bl	80049f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a04:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_InitTick+0x90>)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e00d      	b.n	8003a28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e008      	b.n	8003a28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e003      	b.n	8003a28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a20:	230f      	movs	r3, #15
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a28:	230f      	movs	r3, #15
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b005      	add	sp, #20
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_IncTick+0x1c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_IncTick+0x20>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	18d2      	adds	r2, r2, r3
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_IncTick+0x20>)
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	20000008 	.word	0x20000008
 8003a64:	20000174 	.word	0x20000174

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b02      	ldr	r3, [pc, #8]	@ (8003a78 <HAL_GetTick+0x10>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	20000174 	.word	0x20000174

08003a7c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8003a84:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			@ (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40010000 	.word	0x40010000

08003a9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003aac:	401a      	ands	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	ff3fffff 	.word	0xff3fffff

08003ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	23c0      	movs	r3, #192	@ 0xc0
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	4013      	ands	r3, r2
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}

08003ade <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	2104      	movs	r1, #4
 8003af2:	400a      	ands	r2, r1
 8003af4:	2107      	movs	r1, #7
 8003af6:	4091      	lsls	r1, r2
 8003af8:	000a      	movs	r2, r1
 8003afa:	43d2      	mvns	r2, r2
 8003afc:	401a      	ands	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2104      	movs	r1, #4
 8003b02:	400b      	ands	r3, r1
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4099      	lsls	r1, r3
 8003b08:	000b      	movs	r3, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	2104      	movs	r1, #4
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	2107      	movs	r1, #7
 8003b2e:	4091      	lsls	r1, r2
 8003b30:	000a      	movs	r2, r1
 8003b32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2104      	movs	r1, #4
 8003b38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b3a:	40da      	lsrs	r2, r3
 8003b3c:	0013      	movs	r3, r2
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	23c0      	movs	r3, #192	@ 0xc0
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4013      	ands	r3, r2
 8003b58:	d101      	bne.n	8003b5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	211f      	movs	r1, #31
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	210f      	movs	r1, #15
 8003b80:	4091      	lsls	r1, r2
 8003b82:	000a      	movs	r2, r1
 8003b84:	43d2      	mvns	r2, r2
 8003b86:	401a      	ands	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	210f      	movs	r1, #15
 8003b8e:	4019      	ands	r1, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	201f      	movs	r0, #31
 8003b94:	4003      	ands	r3, r0
 8003b96:	4099      	lsls	r1, r3
 8003b98:	000b      	movs	r3, r1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b004      	add	sp, #16
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	025b      	lsls	r3, r3, #9
 8003bba:	0a5b      	lsrs	r3, r3, #9
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	0252      	lsls	r2, r2, #9
 8003bdc:	0a52      	lsrs	r2, r2, #9
 8003bde:	43d2      	mvns	r2, r2
 8003be0:	401a      	ands	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b002      	add	sp, #8
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	0212      	lsls	r2, r2, #8
 8003c04:	43d2      	mvns	r2, r2
 8003c06:	401a      	ands	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	400b      	ands	r3, r1
 8003c10:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b004      	add	sp, #16
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	7fffff00 	.word	0x7fffff00

08003c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a05      	ldr	r2, [pc, #20]	@ (8003c4c <LL_ADC_EnableInternalRegulator+0x24>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	0552      	lsls	r2, r2, #21
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	6fffffe8 	.word	0x6fffffe8

08003c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	2380      	movs	r3, #128	@ 0x80
 8003c5e:	055b      	lsls	r3, r3, #21
 8003c60:	401a      	ands	r2, r3
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	055b      	lsls	r3, r3, #21
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <LL_ADC_Enable+0x20>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	2201      	movs	r2, #1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	7fffffe8 	.word	0x7fffffe8

08003c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <LL_ADC_Disable+0x20>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	2202      	movs	r2, #2
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	7fffffe8 	.word	0x7fffffe8

08003cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <LL_ADC_IsEnabled+0x18>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <LL_ADC_IsEnabled+0x1a>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d101      	bne.n	8003cfa <LL_ADC_IsDisableOngoing+0x18>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_ADC_IsDisableOngoing+0x1a>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <LL_ADC_REG_StartConversion+0x20>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	2204      	movs	r2, #4
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	7fffffe8 	.word	0x7fffffe8

08003d28 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <LL_ADC_REG_StopConversion+0x20>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	2210      	movs	r2, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b002      	add	sp, #8
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	7fffffe8 	.word	0x7fffffe8

08003d4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d101      	bne.n	8003d64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d78:	231f      	movs	r3, #31
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e17e      	b.n	8004094 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff fcab 	bl	80036fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2254      	movs	r2, #84	@ 0x54
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ff49 	bl	8003c50 <LL_ADC_IsInternalRegulatorEnabled>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d114      	bne.n	8003dec <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff ff2e 	bl	8003c28 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dcc:	4bb3      	ldr	r3, [pc, #716]	@ (800409c <HAL_ADC_Init+0x32c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	49b3      	ldr	r1, [pc, #716]	@ (80040a0 <HAL_ADC_Init+0x330>)
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9aa 	bl	800012c <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dde:	e002      	b.n	8003de6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f9      	bne.n	8003de0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff ff2d 	bl	8003c50 <LL_ADC_IsInternalRegulatorEnabled>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d10f      	bne.n	8003e1a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	2210      	movs	r2, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e12:	231f      	movs	r3, #31
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7ff ff94 	bl	8003d4c <LL_ADC_REG_IsConversionOngoing>
 8003e24:	0003      	movs	r3, r0
 8003e26:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d000      	beq.n	8003e34 <HAL_ADC_Init+0xc4>
 8003e32:	e122      	b.n	800407a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d000      	beq.n	8003e3c <HAL_ADC_Init+0xcc>
 8003e3a:	e11e      	b.n	800407a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	4a98      	ldr	r2, [pc, #608]	@ (80040a4 <HAL_ADC_Init+0x334>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	2202      	movs	r2, #2
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff ff35 	bl	8003cc0 <LL_ADC_IsEnabled>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d000      	beq.n	8003e5c <HAL_ADC_Init+0xec>
 8003e5a:	e0ad      	b.n	8003fb8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7e1b      	ldrb	r3, [r3, #24]
 8003e64:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e66:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7e5b      	ldrb	r3, [r3, #25]
 8003e6c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e6e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7e9b      	ldrb	r3, [r3, #26]
 8003e74:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e76:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_ADC_Init+0x116>
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	015b      	lsls	r3, r3, #5
 8003e84:	e000      	b.n	8003e88 <HAL_ADC_Init+0x118>
 8003e86:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e88:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e8e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da04      	bge.n	8003ea2 <HAL_ADC_Init+0x132>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	e001      	b.n	8003ea6 <HAL_ADC_Init+0x136>
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003ea6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	212c      	movs	r1, #44	@ 0x2c
 8003eac:	5c5b      	ldrb	r3, [r3, r1]
 8003eae:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003eb0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	5c9b      	ldrb	r3, [r3, r2]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d115      	bne.n	8003eee <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7e9b      	ldrb	r3, [r3, #26]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2280      	movs	r2, #128	@ 0x80
 8003ece:	0252      	lsls	r2, r2, #9
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	e00b      	b.n	8003eee <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	2220      	movs	r2, #32
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003efa:	23e0      	movs	r3, #224	@ 0xe0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f04:	4313      	orrs	r3, r2
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	4a65      	ldr	r2, [pc, #404]	@ (80040a8 <HAL_ADC_Init+0x338>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0f9b      	lsrs	r3, r3, #30
 8003f28:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	223c      	movs	r2, #60	@ 0x3c
 8003f3a:	5c9b      	ldrb	r3, [r3, r2]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d111      	bne.n	8003f64 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0f9b      	lsrs	r3, r3, #30
 8003f46:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f4c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f52:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f58:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4a50      	ldr	r2, [pc, #320]	@ (80040ac <HAL_ADC_Init+0x33c>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	23c0      	movs	r3, #192	@ 0xc0
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d018      	beq.n	8003fb8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	05db      	lsls	r3, r3, #23
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d012      	beq.n	8003fb8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f9e:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <HAL_ADC_Init+0x340>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a44      	ldr	r2, [pc, #272]	@ (80040b4 <HAL_ADC_Init+0x344>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	23f0      	movs	r3, #240	@ 0xf0
 8003fae:	039b      	lsls	r3, r3, #14
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80040b0 <HAL_ADC_Init+0x340>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f7ff fd8b 	bl	8003ade <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	4939      	ldr	r1, [pc, #228]	@ (80040b8 <HAL_ADC_Init+0x348>)
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	f7ff fd83 	bl	8003ade <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2110      	movs	r1, #16
 8003fec:	4249      	negs	r1, r1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff2:	e018      	b.n	8004026 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	039b      	lsls	r3, r3, #14
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d112      	bne.n	8004026 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	3b01      	subs	r3, #1
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	221c      	movs	r2, #28
 8004010:	4013      	ands	r3, r2
 8004012:	2210      	movs	r2, #16
 8004014:	4252      	negs	r2, r2
 8004016:	409a      	lsls	r2, r3
 8004018:	0011      	movs	r1, r2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2100      	movs	r1, #0
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff fd73 	bl	8003b18 <LL_ADC_GetSamplingTimeCommonChannels>
 8004032:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004038:	429a      	cmp	r2, r3
 800403a:	d10b      	bne.n	8004054 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004046:	2203      	movs	r2, #3
 8004048:	4393      	bics	r3, r2
 800404a:	2201      	movs	r2, #1
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004052:	e01c      	b.n	800408e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	2212      	movs	r2, #18
 800405a:	4393      	bics	r3, r2
 800405c:	2210      	movs	r2, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	2201      	movs	r2, #1
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004070:	231f      	movs	r3, #31
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004078:	e009      	b.n	800408e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	2210      	movs	r2, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004086:	231f      	movs	r3, #31
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b008      	add	sp, #32
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000000 	.word	0x20000000
 80040a0:	00030d40 	.word	0x00030d40
 80040a4:	fffffefd 	.word	0xfffffefd
 80040a8:	ffde0201 	.word	0xffde0201
 80040ac:	1ffffc02 	.word	0x1ffffc02
 80040b0:	40012708 	.word	0x40012708
 80040b4:	ffc3ffff 	.word	0xffc3ffff
 80040b8:	7fffff04 	.word	0x7fffff04

080040bc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff fe3f 	bl	8003d4c <LL_ADC_REG_IsConversionOngoing>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d135      	bne.n	800413e <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2254      	movs	r2, #84	@ 0x54
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_Start+0x24>
 80040dc:	2302      	movs	r3, #2
 80040de:	e035      	b.n	800414c <HAL_ADC_Start+0x90>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2254      	movs	r2, #84	@ 0x54
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040e8:	250f      	movs	r5, #15
 80040ea:	197c      	adds	r4, r7, r5
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 fb1a 	bl	8004728 <ADC_Enable>
 80040f4:	0003      	movs	r3, r0
 80040f6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040f8:	197b      	adds	r3, r7, r5
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d119      	bne.n	8004134 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <HAL_ADC_Start+0x98>)
 8004106:	4013      	ands	r3, r2
 8004108:	2280      	movs	r2, #128	@ 0x80
 800410a:	0052      	lsls	r2, r2, #1
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	221c      	movs	r2, #28
 800411e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2254      	movs	r2, #84	@ 0x54
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fde9 	bl	8003d04 <LL_ADC_REG_StartConversion>
 8004132:	e008      	b.n	8004146 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2254      	movs	r2, #84	@ 0x54
 8004138:	2100      	movs	r1, #0
 800413a:	5499      	strb	r1, [r3, r2]
 800413c:	e003      	b.n	8004146 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800413e:	230f      	movs	r3, #15
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004146:	230f      	movs	r3, #15
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bdb0      	pop	{r4, r5, r7, pc}
 8004154:	fffff0fe 	.word	0xfffff0fe

08004158 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004158:	b5b0      	push	{r4, r5, r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2254      	movs	r2, #84	@ 0x54
 8004164:	5c9b      	ldrb	r3, [r3, r2]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_ADC_Stop+0x16>
 800416a:	2302      	movs	r3, #2
 800416c:	e029      	b.n	80041c2 <HAL_ADC_Stop+0x6a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2254      	movs	r2, #84	@ 0x54
 8004172:	2101      	movs	r1, #1
 8004174:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004176:	250f      	movs	r5, #15
 8004178:	197c      	adds	r4, r7, r5
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fa97 	bl	80046b0 <ADC_ConversionStop>
 8004182:	0003      	movs	r3, r0
 8004184:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004186:	197b      	adds	r3, r7, r5
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d112      	bne.n	80041b4 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800418e:	197c      	adds	r4, r7, r5
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 fb46 	bl	8004824 <ADC_Disable>
 8004198:	0003      	movs	r3, r0
 800419a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800419c:	197b      	adds	r3, r7, r5
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <HAL_ADC_Stop+0x74>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	2201      	movs	r2, #1
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2254      	movs	r2, #84	@ 0x54
 80041b8:	2100      	movs	r1, #0
 80041ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	fffffefe 	.word	0xfffffefe

080041d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d102      	bne.n	80041e8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80041e2:	2308      	movs	r3, #8
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e00f      	b.n	8004208 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d007      	beq.n	8004204 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	2220      	movs	r2, #32
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e06c      	b.n	80042de <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004204:	2304      	movs	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004208:	f7ff fc2e 	bl	8003a68 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004210:	e019      	b.n	8004246 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	d016      	beq.n	8004246 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004218:	f7ff fc26 	bl	8003a68 <HAL_GetTick>
 800421c:	0002      	movs	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <HAL_ADC_PollForConversion+0x5e>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004232:	2204      	movs	r2, #4
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2254      	movs	r2, #84	@ 0x54
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04b      	b.n	80042de <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	d0df      	beq.n	8004212 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	2280      	movs	r2, #128	@ 0x80
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fc6e 	bl	8003b46 <LL_ADC_REG_IsTriggerSourceSWStart>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d02e      	beq.n	80042cc <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7e9b      	ldrb	r3, [r3, #26]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d12a      	bne.n	80042cc <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	4013      	ands	r3, r2
 8004280:	2b08      	cmp	r3, #8
 8004282:	d123      	bne.n	80042cc <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fd5f 	bl	8003d4c <LL_ADC_REG_IsConversionOngoing>
 800428e:	1e03      	subs	r3, r0, #0
 8004290:	d110      	bne.n	80042b4 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	210c      	movs	r1, #12
 800429e:	438a      	bics	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	4a10      	ldr	r2, [pc, #64]	@ (80042e8 <HAL_ADC_PollForConversion+0x118>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	2201      	movs	r2, #1
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042b2:	e00b      	b.n	80042cc <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	2220      	movs	r2, #32
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	2201      	movs	r2, #1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7e1b      	ldrb	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	220c      	movs	r2, #12
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b004      	add	sp, #16
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	fffffefe 	.word	0xfffffefe

080042ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800430e:	2317      	movs	r3, #23
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2254      	movs	r2, #84	@ 0x54
 800431e:	5c9b      	ldrb	r3, [r3, r2]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x24>
 8004324:	2302      	movs	r3, #2
 8004326:	e1be      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x3a2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2254      	movs	r2, #84	@ 0x54
 800432c:	2101      	movs	r1, #1
 800432e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff fd09 	bl	8003d4c <LL_ADC_REG_IsConversionOngoing>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d000      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x3c>
 800433e:	e1a1      	b.n	8004684 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d100      	bne.n	800434a <HAL_ADC_ConfigChannel+0x46>
 8004348:	e152      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	429a      	cmp	r2, r3
 8004354:	d004      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800435a:	4ac2      	ldr	r2, [pc, #776]	@ (8004664 <HAL_ADC_ConfigChannel+0x360>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0019      	movs	r1, r3
 800436a:	0010      	movs	r0, r2
 800436c:	f7ff fc1c 	bl	8003ba8 <LL_ADC_REG_SetSequencerChAdd>
 8004370:	e0ed      	b.n	800454e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	211f      	movs	r1, #31
 800437c:	400b      	ands	r3, r1
 800437e:	210f      	movs	r1, #15
 8004380:	4099      	lsls	r1, r3
 8004382:	000b      	movs	r3, r1
 8004384:	43db      	mvns	r3, r3
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	025b      	lsls	r3, r3, #9
 8004390:	0a5b      	lsrs	r3, r3, #9
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x9c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e9b      	lsrs	r3, r3, #26
 800439a:	221f      	movs	r2, #31
 800439c:	4013      	ands	r3, r2
 800439e:	e0bc      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	d000      	beq.n	80043ac <HAL_ADC_ConfigChannel+0xa8>
 80043aa:	e0b5      	b.n	8004518 <HAL_ADC_ConfigChannel+0x214>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d000      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0xb4>
 80043b6:	e0ad      	b.n	8004514 <HAL_ADC_ConfigChannel+0x210>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2204      	movs	r2, #4
 80043be:	4013      	ands	r3, r2
 80043c0:	d000      	beq.n	80043c4 <HAL_ADC_ConfigChannel+0xc0>
 80043c2:	e0a5      	b.n	8004510 <HAL_ADC_ConfigChannel+0x20c>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	4013      	ands	r3, r2
 80043cc:	d000      	beq.n	80043d0 <HAL_ADC_ConfigChannel+0xcc>
 80043ce:	e09d      	b.n	800450c <HAL_ADC_ConfigChannel+0x208>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2210      	movs	r2, #16
 80043d6:	4013      	ands	r3, r2
 80043d8:	d000      	beq.n	80043dc <HAL_ADC_ConfigChannel+0xd8>
 80043da:	e095      	b.n	8004508 <HAL_ADC_ConfigChannel+0x204>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2220      	movs	r2, #32
 80043e2:	4013      	ands	r3, r2
 80043e4:	d000      	beq.n	80043e8 <HAL_ADC_ConfigChannel+0xe4>
 80043e6:	e08d      	b.n	8004504 <HAL_ADC_ConfigChannel+0x200>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2240      	movs	r2, #64	@ 0x40
 80043ee:	4013      	ands	r3, r2
 80043f0:	d000      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0xf0>
 80043f2:	e085      	b.n	8004500 <HAL_ADC_ConfigChannel+0x1fc>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2280      	movs	r2, #128	@ 0x80
 80043fa:	4013      	ands	r3, r2
 80043fc:	d000      	beq.n	8004400 <HAL_ADC_ConfigChannel+0xfc>
 80043fe:	e07d      	b.n	80044fc <HAL_ADC_ConfigChannel+0x1f8>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d000      	beq.n	800440e <HAL_ADC_ConfigChannel+0x10a>
 800440c:	e074      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x1f4>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4013      	ands	r3, r2
 8004418:	d000      	beq.n	800441c <HAL_ADC_ConfigChannel+0x118>
 800441a:	e06b      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x1f0>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4013      	ands	r3, r2
 8004426:	d000      	beq.n	800442a <HAL_ADC_ConfigChannel+0x126>
 8004428:	e062      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x1ec>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4013      	ands	r3, r2
 8004434:	d000      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x134>
 8004436:	e059      	b.n	80044ec <HAL_ADC_ConfigChannel+0x1e8>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	015b      	lsls	r3, r3, #5
 8004440:	4013      	ands	r3, r2
 8004442:	d151      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1e4>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	019b      	lsls	r3, r3, #6
 800444c:	4013      	ands	r3, r2
 800444e:	d149      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1e0>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	01db      	lsls	r3, r3, #7
 8004458:	4013      	ands	r3, r2
 800445a:	d141      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x1dc>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	4013      	ands	r3, r2
 8004466:	d139      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1d8>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	@ 0x80
 800446e:	025b      	lsls	r3, r3, #9
 8004470:	4013      	ands	r3, r2
 8004472:	d131      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x1d4>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	4013      	ands	r3, r2
 800447e:	d129      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x1d0>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	02db      	lsls	r3, r3, #11
 8004488:	4013      	ands	r3, r2
 800448a:	d121      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1cc>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	@ 0x80
 8004492:	031b      	lsls	r3, r3, #12
 8004494:	4013      	ands	r3, r2
 8004496:	d119      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x1c8>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	035b      	lsls	r3, r3, #13
 80044a0:	4013      	ands	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x1c4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	039b      	lsls	r3, r3, #14
 80044ac:	4013      	ands	r3, r2
 80044ae:	d109      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x1c0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	03db      	lsls	r3, r3, #15
 80044b8:	4013      	ands	r3, r2
 80044ba:	d001      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x1bc>
 80044bc:	2316      	movs	r3, #22
 80044be:	e02c      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044c0:	2300      	movs	r3, #0
 80044c2:	e02a      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044c4:	2315      	movs	r3, #21
 80044c6:	e028      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044c8:	2314      	movs	r3, #20
 80044ca:	e026      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044cc:	2313      	movs	r3, #19
 80044ce:	e024      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044d0:	2312      	movs	r3, #18
 80044d2:	e022      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044d4:	2311      	movs	r3, #17
 80044d6:	e020      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044d8:	2310      	movs	r3, #16
 80044da:	e01e      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044dc:	230f      	movs	r3, #15
 80044de:	e01c      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044e0:	230e      	movs	r3, #14
 80044e2:	e01a      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044e4:	230d      	movs	r3, #13
 80044e6:	e018      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044e8:	230c      	movs	r3, #12
 80044ea:	e016      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044ec:	230b      	movs	r3, #11
 80044ee:	e014      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044f0:	230a      	movs	r3, #10
 80044f2:	e012      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044f4:	2309      	movs	r3, #9
 80044f6:	e010      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044f8:	2308      	movs	r3, #8
 80044fa:	e00e      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 80044fc:	2307      	movs	r3, #7
 80044fe:	e00c      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004500:	2306      	movs	r3, #6
 8004502:	e00a      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004504:	2305      	movs	r3, #5
 8004506:	e008      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004508:	2304      	movs	r3, #4
 800450a:	e006      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 800450c:	2303      	movs	r3, #3
 800450e:	e004      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004510:	2302      	movs	r3, #2
 8004512:	e002      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_ADC_ConfigChannel+0x216>
 8004518:	2300      	movs	r3, #0
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	201f      	movs	r0, #31
 8004520:	4002      	ands	r2, r0
 8004522:	4093      	lsls	r3, r2
 8004524:	000a      	movs	r2, r1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	429a      	cmp	r2, r3
 800453a:	d808      	bhi.n	800454e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	001a      	movs	r2, r3
 800454a:	f7ff fb0d 	bl	8003b68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	001a      	movs	r2, r3
 800455c:	f7ff fb48 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db00      	blt.n	800456a <HAL_ADC_ConfigChannel+0x266>
 8004568:	e096      	b.n	8004698 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456a:	4b3f      	ldr	r3, [pc, #252]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff faa9 	bl	8003ac4 <LL_ADC_GetCommonPathInternalCh>
 8004572:	0003      	movs	r3, r0
 8004574:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3c      	ldr	r2, [pc, #240]	@ (800466c <HAL_ADC_ConfigChannel+0x368>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d123      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	2380      	movs	r3, #128	@ 0x80
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004588:	d11e      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2280      	movs	r2, #128	@ 0x80
 800458e:	0412      	lsls	r2, r2, #16
 8004590:	4313      	orrs	r3, r2
 8004592:	4a35      	ldr	r2, [pc, #212]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 8004594:	0019      	movs	r1, r3
 8004596:	0010      	movs	r0, r2
 8004598:	f7ff fa80 	bl	8003a9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800459c:	4b34      	ldr	r3, [pc, #208]	@ (8004670 <HAL_ADC_ConfigChannel+0x36c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4934      	ldr	r1, [pc, #208]	@ (8004674 <HAL_ADC_ConfigChannel+0x370>)
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7fb fdc2 	bl	800012c <__udivsi3>
 80045a8:	0003      	movs	r3, r0
 80045aa:	001a      	movs	r2, r3
 80045ac:	0013      	movs	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b8:	e002      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b01      	subs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f9      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045c6:	e067      	b.n	8004698 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004678 <HAL_ADC_ConfigChannel+0x374>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d162      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	2380      	movs	r3, #128	@ 0x80
 80045d6:	03db      	lsls	r3, r3, #15
 80045d8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045da:	d15d      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	03d2      	lsls	r2, r2, #15
 80045e2:	4313      	orrs	r3, r2
 80045e4:	4a20      	ldr	r2, [pc, #128]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 80045e6:	0019      	movs	r1, r3
 80045e8:	0010      	movs	r0, r2
 80045ea:	f7ff fa57 	bl	8003a9c <LL_ADC_SetCommonPathInternalCh>
 80045ee:	e053      	b.n	8004698 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d004      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004600:	4a18      	ldr	r2, [pc, #96]	@ (8004664 <HAL_ADC_ConfigChannel+0x360>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d107      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	0019      	movs	r1, r3
 8004610:	0010      	movs	r0, r2
 8004612:	f7ff fada 	bl	8003bca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	da3c      	bge.n	8004698 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff fa4f 	bl	8003ac4 <LL_ADC_GetCommonPathInternalCh>
 8004626:	0003      	movs	r3, r0
 8004628:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a0f      	ldr	r2, [pc, #60]	@ (800466c <HAL_ADC_ConfigChannel+0x368>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4a11      	ldr	r2, [pc, #68]	@ (800467c <HAL_ADC_ConfigChannel+0x378>)
 8004638:	4013      	ands	r3, r2
 800463a:	4a0b      	ldr	r2, [pc, #44]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 800463c:	0019      	movs	r1, r3
 800463e:	0010      	movs	r0, r2
 8004640:	f7ff fa2c 	bl	8003a9c <LL_ADC_SetCommonPathInternalCh>
 8004644:	e028      	b.n	8004698 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a0b      	ldr	r2, [pc, #44]	@ (8004678 <HAL_ADC_ConfigChannel+0x374>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d123      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4a0b      	ldr	r2, [pc, #44]	@ (8004680 <HAL_ADC_ConfigChannel+0x37c>)
 8004654:	4013      	ands	r3, r2
 8004656:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <HAL_ADC_ConfigChannel+0x364>)
 8004658:	0019      	movs	r1, r3
 800465a:	0010      	movs	r0, r2
 800465c:	f7ff fa1e 	bl	8003a9c <LL_ADC_SetCommonPathInternalCh>
 8004660:	e01a      	b.n	8004698 <HAL_ADC_ConfigChannel+0x394>
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	80000004 	.word	0x80000004
 8004668:	40012708 	.word	0x40012708
 800466c:	a4000200 	.word	0xa4000200
 8004670:	20000000 	.word	0x20000000
 8004674:	00030d40 	.word	0x00030d40
 8004678:	a8000400 	.word	0xa8000400
 800467c:	ff7fffff 	.word	0xff7fffff
 8004680:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004688:	2220      	movs	r2, #32
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004690:	2317      	movs	r3, #23
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2254      	movs	r2, #84	@ 0x54
 800469c:	2100      	movs	r1, #0
 800469e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80046a0:	2317      	movs	r3, #23
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b006      	add	sp, #24
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)

080046b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	0018      	movs	r0, r3
 80046be:	f7ff fb45 	bl	8003d4c <LL_ADC_REG_IsConversionOngoing>
 80046c2:	1e03      	subs	r3, r0, #0
 80046c4:	d02b      	beq.n	800471e <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f7ff fb09 	bl	8003ce2 <LL_ADC_IsDisableOngoing>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d104      	bne.n	80046de <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff fb25 	bl	8003d28 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046de:	f7ff f9c3 	bl	8003a68 <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046e6:	e014      	b.n	8004712 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046e8:	f7ff f9be 	bl	8003a68 <HAL_GetTick>
 80046ec:	0002      	movs	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d90d      	bls.n	8004712 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fa:	2210      	movs	r2, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	2201      	movs	r2, #1
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e006      	b.n	8004720 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2204      	movs	r2, #4
 800471a:	4013      	ands	r3, r2
 800471c:	d1e4      	bne.n	80046e8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b004      	add	sp, #16
 8004726:	bd80      	pop	{r7, pc}

08004728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff fac1 	bl	8003cc0 <LL_ADC_IsEnabled>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d162      	bne.n	8004808 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a32      	ldr	r2, [pc, #200]	@ (8004814 <ADC_Enable+0xec>)
 800474a:	4013      	ands	r3, r2
 800474c:	d00d      	beq.n	800476a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	2210      	movs	r2, #16
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	2201      	movs	r2, #1
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e04f      	b.n	800480a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0018      	movs	r0, r3
 8004770:	f7ff fa82 	bl	8003c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004774:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <ADC_Enable+0xf0>)
 8004776:	0018      	movs	r0, r3
 8004778:	f7ff f9a4 	bl	8003ac4 <LL_ADC_GetCommonPathInternalCh>
 800477c:	0002      	movs	r2, r0
 800477e:	2380      	movs	r3, #128	@ 0x80
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	4013      	ands	r3, r2
 8004784:	d00f      	beq.n	80047a6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004786:	4b25      	ldr	r3, [pc, #148]	@ (800481c <ADC_Enable+0xf4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4925      	ldr	r1, [pc, #148]	@ (8004820 <ADC_Enable+0xf8>)
 800478c:	0018      	movs	r0, r3
 800478e:	f7fb fccd 	bl	800012c <__udivsi3>
 8004792:	0003      	movs	r3, r0
 8004794:	3301      	adds	r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004798:	e002      	b.n	80047a0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3b01      	subs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f9      	bne.n	800479a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7e5b      	ldrb	r3, [r3, #25]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d02c      	beq.n	8004808 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80047ae:	f7ff f95b 	bl	8003a68 <HAL_GetTick>
 80047b2:	0003      	movs	r3, r0
 80047b4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b6:	e020      	b.n	80047fa <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff fa7f 	bl	8003cc0 <LL_ADC_IsEnabled>
 80047c2:	1e03      	subs	r3, r0, #0
 80047c4:	d104      	bne.n	80047d0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff fa54 	bl	8003c78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047d0:	f7ff f94a 	bl	8003a68 <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d90d      	bls.n	80047fa <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e2:	2210      	movs	r2, #16
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	2201      	movs	r2, #1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e007      	b.n	800480a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	4013      	ands	r3, r2
 8004804:	2b01      	cmp	r3, #1
 8004806:	d1d7      	bne.n	80047b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	80000017 	.word	0x80000017
 8004818:	40012708 	.word	0x40012708
 800481c:	20000000 	.word	0x20000000
 8004820:	00030d40 	.word	0x00030d40

08004824 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff fa56 	bl	8003ce2 <LL_ADC_IsDisableOngoing>
 8004836:	0003      	movs	r3, r0
 8004838:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0018      	movs	r0, r3
 8004840:	f7ff fa3e 	bl	8003cc0 <LL_ADC_IsEnabled>
 8004844:	1e03      	subs	r3, r0, #0
 8004846:	d040      	beq.n	80048ca <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d13d      	bne.n	80048ca <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2205      	movs	r2, #5
 8004856:	4013      	ands	r3, r2
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10d      	bne.n	8004878 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff fa1b 	bl	8003c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2203      	movs	r2, #3
 800486c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800486e:	f7ff f8fb 	bl	8003a68 <HAL_GetTick>
 8004872:	0003      	movs	r3, r0
 8004874:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004876:	e022      	b.n	80048be <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487c:	2210      	movs	r2, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004888:	2201      	movs	r2, #1
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01b      	b.n	80048cc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004894:	f7ff f8e8 	bl	8003a68 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d90d      	bls.n	80048be <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	2210      	movs	r2, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b2:	2201      	movs	r2, #1
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e006      	b.n	80048cc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2201      	movs	r2, #1
 80048c6:	4013      	ands	r3, r2
 80048c8:	d1e4      	bne.n	8004894 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b004      	add	sp, #16
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	0002      	movs	r2, r0
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	1dfb      	adds	r3, r7, #7
 80048e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048e8:	d828      	bhi.n	800493c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048ea:	4a2f      	ldr	r2, [pc, #188]	@ (80049a8 <__NVIC_SetPriority+0xd4>)
 80048ec:	1dfb      	adds	r3, r7, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	33c0      	adds	r3, #192	@ 0xc0
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	589b      	ldr	r3, [r3, r2]
 80048fa:	1dfa      	adds	r2, r7, #7
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	0011      	movs	r1, r2
 8004900:	2203      	movs	r2, #3
 8004902:	400a      	ands	r2, r1
 8004904:	00d2      	lsls	r2, r2, #3
 8004906:	21ff      	movs	r1, #255	@ 0xff
 8004908:	4091      	lsls	r1, r2
 800490a:	000a      	movs	r2, r1
 800490c:	43d2      	mvns	r2, r2
 800490e:	401a      	ands	r2, r3
 8004910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	22ff      	movs	r2, #255	@ 0xff
 8004918:	401a      	ands	r2, r3
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	0018      	movs	r0, r3
 8004920:	2303      	movs	r3, #3
 8004922:	4003      	ands	r3, r0
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004928:	481f      	ldr	r0, [pc, #124]	@ (80049a8 <__NVIC_SetPriority+0xd4>)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b25b      	sxtb	r3, r3
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	430a      	orrs	r2, r1
 8004934:	33c0      	adds	r3, #192	@ 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800493a:	e031      	b.n	80049a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <__NVIC_SetPriority+0xd8>)
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	0019      	movs	r1, r3
 8004944:	230f      	movs	r3, #15
 8004946:	400b      	ands	r3, r1
 8004948:	3b08      	subs	r3, #8
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3306      	adds	r3, #6
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	3304      	adds	r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1dfa      	adds	r2, r7, #7
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	0011      	movs	r1, r2
 800495c:	2203      	movs	r2, #3
 800495e:	400a      	ands	r2, r1
 8004960:	00d2      	lsls	r2, r2, #3
 8004962:	21ff      	movs	r1, #255	@ 0xff
 8004964:	4091      	lsls	r1, r2
 8004966:	000a      	movs	r2, r1
 8004968:	43d2      	mvns	r2, r2
 800496a:	401a      	ands	r2, r3
 800496c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	22ff      	movs	r2, #255	@ 0xff
 8004974:	401a      	ands	r2, r3
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	0018      	movs	r0, r3
 800497c:	2303      	movs	r3, #3
 800497e:	4003      	ands	r3, r0
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004984:	4809      	ldr	r0, [pc, #36]	@ (80049ac <__NVIC_SetPriority+0xd8>)
 8004986:	1dfb      	adds	r3, r7, #7
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	001c      	movs	r4, r3
 800498c:	230f      	movs	r3, #15
 800498e:	4023      	ands	r3, r4
 8004990:	3b08      	subs	r3, #8
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	430a      	orrs	r2, r1
 8004996:	3306      	adds	r3, #6
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	18c3      	adds	r3, r0, r3
 800499c:	3304      	adds	r3, #4
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b003      	add	sp, #12
 80049a6:	bd90      	pop	{r4, r7, pc}
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	1e5a      	subs	r2, r3, #1
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	045b      	lsls	r3, r3, #17
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d301      	bcc.n	80049c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049c4:	2301      	movs	r3, #1
 80049c6:	e010      	b.n	80049ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <SysTick_Config+0x44>)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	3a01      	subs	r2, #1
 80049ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049d0:	2301      	movs	r3, #1
 80049d2:	425b      	negs	r3, r3
 80049d4:	2103      	movs	r1, #3
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff ff7c 	bl	80048d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <SysTick_Config+0x44>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049e2:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <SysTick_Config+0x44>)
 80049e4:	2207      	movs	r2, #7
 80049e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	e000e010 	.word	0xe000e010

080049f8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	210f      	movs	r1, #15
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	1c02      	adds	r2, r0, #0
 8004a08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	0011      	movs	r1, r2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7ff ff5d 	bl	80048d4 <__NVIC_SetPriority>
}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b004      	add	sp, #16
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff ffbf 	bl	80049b0 <SysTick_Config>
 8004a32:	0003      	movs	r3, r0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a4a:	e14d      	b.n	8004ce8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4091      	lsls	r1, r2
 8004a56:	000a      	movs	r2, r1
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d100      	bne.n	8004a64 <HAL_GPIO_Init+0x28>
 8004a62:	e13e      	b.n	8004ce2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x38>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d125      	bne.n	8004ac0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	58d3      	ldr	r3, [r2, r3]
 8004a80:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2207      	movs	r2, #7
 8004a86:	4013      	ands	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	0013      	movs	r3, r2
 8004a90:	43da      	mvns	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4013      	ands	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2107      	movs	r1, #7
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	08da      	lsrs	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3208      	adds	r2, #8
 8004aba:	0092      	lsls	r2, r2, #2
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	409a      	lsls	r2, r3
 8004ace:	0013      	movs	r3, r2
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2203      	movs	r2, #3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	0013      	movs	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d00b      	beq.n	8004b14 <HAL_GPIO_Init+0xd8>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d007      	beq.n	8004b14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b08:	2b11      	cmp	r3, #17
 8004b0a:	d003      	beq.n	8004b14 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b12      	cmp	r3, #18
 8004b12:	d130      	bne.n	8004b76 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	2203      	movs	r2, #3
 8004b20:	409a      	lsls	r2, r3
 8004b22:	0013      	movs	r3, r2
 8004b24:	43da      	mvns	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	0013      	movs	r3, r2
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	43da      	mvns	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4013      	ands	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	2201      	movs	r2, #1
 8004b62:	401a      	ands	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0013      	movs	r3, r2
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d017      	beq.n	8004bae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	0013      	movs	r3, r2
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4013      	ands	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	055b      	lsls	r3, r3, #21
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d100      	bne.n	8004bbc <HAL_GPIO_Init+0x180>
 8004bba:	e092      	b.n	8004ce2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004bbc:	4a50      	ldr	r2, [pc, #320]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	589b      	ldr	r3, [r3, r2]
 8004bc8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	0013      	movs	r3, r2
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	23a0      	movs	r3, #160	@ 0xa0
 8004be4:	05db      	lsls	r3, r3, #23
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d013      	beq.n	8004c12 <HAL_GPIO_Init+0x1d6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a45      	ldr	r2, [pc, #276]	@ (8004d04 <HAL_GPIO_Init+0x2c8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00d      	beq.n	8004c0e <HAL_GPIO_Init+0x1d2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a44      	ldr	r2, [pc, #272]	@ (8004d08 <HAL_GPIO_Init+0x2cc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <HAL_GPIO_Init+0x1ce>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a43      	ldr	r2, [pc, #268]	@ (8004d0c <HAL_GPIO_Init+0x2d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_GPIO_Init+0x1ca>
 8004c02:	2305      	movs	r3, #5
 8004c04:	e006      	b.n	8004c14 <HAL_GPIO_Init+0x1d8>
 8004c06:	2306      	movs	r3, #6
 8004c08:	e004      	b.n	8004c14 <HAL_GPIO_Init+0x1d8>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e002      	b.n	8004c14 <HAL_GPIO_Init+0x1d8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_GPIO_Init+0x1d8>
 8004c12:	2300      	movs	r3, #0
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	2103      	movs	r1, #3
 8004c18:	400a      	ands	r2, r1
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	4093      	lsls	r3, r2
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c24:	4936      	ldr	r1, [pc, #216]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004c32:	4a33      	ldr	r2, [pc, #204]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	58d3      	ldr	r3, [r2, r3]
 8004c38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4013      	ands	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	025b      	lsls	r3, r3, #9
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004c58:	4929      	ldr	r1, [pc, #164]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c5a:	2280      	movs	r2, #128	@ 0x80
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c62:	2384      	movs	r3, #132	@ 0x84
 8004c64:	58d3      	ldr	r3, [r2, r3]
 8004c66:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	029b      	lsls	r3, r3, #10
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004c86:	491e      	ldr	r1, [pc, #120]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c88:	2284      	movs	r2, #132	@ 0x84
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43da      	mvns	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	035b      	lsls	r3, r3, #13
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004cb2:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	039b      	lsls	r3, r3, #14
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004cdc:	4b08      	ldr	r3, [pc, #32]	@ (8004d00 <HAL_GPIO_Init+0x2c4>)
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	40da      	lsrs	r2, r3
 8004cf0:	1e13      	subs	r3, r2, #0
 8004cf2:	d000      	beq.n	8004cf6 <HAL_GPIO_Init+0x2ba>
 8004cf4:	e6aa      	b.n	8004a4c <HAL_GPIO_Init+0x10>
  }
}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021800 	.word	0x40021800
 8004d04:	50000400 	.word	0x50000400
 8004d08:	50000800 	.word	0x50000800
 8004d0c:	50001400 	.word	0x50001400

08004d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	0008      	movs	r0, r1
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	1cbb      	adds	r3, r7, #2
 8004d1e:	1c02      	adds	r2, r0, #0
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	1c7b      	adds	r3, r7, #1
 8004d24:	1c0a      	adds	r2, r1, #0
 8004d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d28:	1c7b      	adds	r3, r7, #1
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d30:	1cbb      	adds	r3, r7, #2
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d38:	e003      	b.n	8004d42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d3a:	1cbb      	adds	r3, r7, #2
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b002      	add	sp, #8
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1d0      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2201      	movs	r2, #1
 8004d64:	4013      	ands	r3, r2
 8004d66:	d100      	bne.n	8004d6a <HAL_RCC_OscConfig+0x1e>
 8004d68:	e069      	b.n	8004e3e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6a:	4bc8      	ldr	r3, [pc, #800]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2238      	movs	r2, #56	@ 0x38
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d105      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15d      	bne.n	8004e3e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e1bc      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_OscConfig+0x56>
 8004d92:	4bbe      	ldr	r3, [pc, #760]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4bbd      	ldr	r3, [pc, #756]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004d98:	2180      	movs	r1, #128	@ 0x80
 8004d9a:	0249      	lsls	r1, r1, #9
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e020      	b.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	23a0      	movs	r3, #160	@ 0xa0
 8004da8:	02db      	lsls	r3, r3, #11
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10e      	bne.n	8004dcc <HAL_RCC_OscConfig+0x80>
 8004dae:	4bb7      	ldr	r3, [pc, #732]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4bb6      	ldr	r3, [pc, #728]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004db4:	2180      	movs	r1, #128	@ 0x80
 8004db6:	02c9      	lsls	r1, r1, #11
 8004db8:	430a      	orrs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	4bb3      	ldr	r3, [pc, #716]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4bb2      	ldr	r3, [pc, #712]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dc2:	2180      	movs	r1, #128	@ 0x80
 8004dc4:	0249      	lsls	r1, r1, #9
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dcc:	4baf      	ldr	r3, [pc, #700]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4bae      	ldr	r3, [pc, #696]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dd2:	49af      	ldr	r1, [pc, #700]	@ (8005090 <HAL_RCC_OscConfig+0x344>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	4bac      	ldr	r3, [pc, #688]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4bab      	ldr	r3, [pc, #684]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004dde:	49ad      	ldr	r1, [pc, #692]	@ (8005094 <HAL_RCC_OscConfig+0x348>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d014      	beq.n	8004e16 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe fe3c 	bl	8003a68 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004df6:	f7fe fe37 	bl	8003a68 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b64      	cmp	r3, #100	@ 0x64
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e17b      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e08:	4ba0      	ldr	r3, [pc, #640]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	4013      	ands	r3, r2
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0xaa>
 8004e14:	e013      	b.n	8004e3e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fe fe27 	bl	8003a68 <HAL_GetTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004e20:	f7fe fe22 	bl	8003a68 <HAL_GetTick>
 8004e24:	0002      	movs	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e166      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e32:	4b96      	ldr	r3, [pc, #600]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2380      	movs	r3, #128	@ 0x80
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d100      	bne.n	8004e4a <HAL_RCC_OscConfig+0xfe>
 8004e48:	e086      	b.n	8004f58 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4a:	4b90      	ldr	r3, [pc, #576]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2238      	movs	r2, #56	@ 0x38
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12f      	bne.n	8004eba <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e14c      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b89      	ldr	r3, [pc, #548]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a8b      	ldr	r2, [pc, #556]	@ (8005098 <HAL_RCC_OscConfig+0x34c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	4b85      	ldr	r3, [pc, #532]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e82:	4b82      	ldr	r3, [pc, #520]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a85      	ldr	r2, [pc, #532]	@ (800509c <HAL_RCC_OscConfig+0x350>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	4b7e      	ldr	r3, [pc, #504]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e96:	4b7d      	ldr	r3, [pc, #500]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0adb      	lsrs	r3, r3, #11
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	4a7f      	ldr	r2, [pc, #508]	@ (80050a0 <HAL_RCC_OscConfig+0x354>)
 8004ea2:	40da      	lsrs	r2, r3
 8004ea4:	4b7f      	ldr	r3, [pc, #508]	@ (80050a4 <HAL_RCC_OscConfig+0x358>)
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80050a8 <HAL_RCC_OscConfig+0x35c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7fe fd7f 	bl	80039b0 <HAL_InitTick>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d050      	beq.n	8004f58 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e122      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d030      	beq.n	8004f24 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ec2:	4b72      	ldr	r3, [pc, #456]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	@ (800509c <HAL_RCC_OscConfig+0x350>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b6c      	ldr	r3, [pc, #432]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004edc:	2180      	movs	r1, #128	@ 0x80
 8004ede:	0049      	lsls	r1, r1, #1
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fdc0 	bl	8003a68 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004eee:	f7fe fdbb 	bl	8003a68 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0ff      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f00:	4b62      	ldr	r3, [pc, #392]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a61      	ldr	r2, [pc, #388]	@ (8005098 <HAL_RCC_OscConfig+0x34c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
 8004f22:	e019      	b.n	8004f58 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004f24:	4b59      	ldr	r3, [pc, #356]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b58      	ldr	r3, [pc, #352]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f2a:	4960      	ldr	r1, [pc, #384]	@ (80050ac <HAL_RCC_OscConfig+0x360>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe fd9a 	bl	8003a68 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004f3a:	f7fe fd95 	bl	8003a68 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0d9      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d042      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004f62:	4b4a      	ldr	r3, [pc, #296]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2238      	movs	r2, #56	@ 0x38
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b18      	cmp	r3, #24
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d138      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0c2      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d019      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004f82:	4b42      	ldr	r3, [pc, #264]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f86:	4b41      	ldr	r3, [pc, #260]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004f88:	2101      	movs	r1, #1
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fe fd6b 	bl	8003a68 <HAL_GetTick>
 8004f92:	0003      	movs	r3, r0
 8004f94:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004f98:	f7fe fd66 	bl	8003a68 <HAL_GetTick>
 8004f9c:	0002      	movs	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0aa      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004faa:	4b38      	ldr	r3, [pc, #224]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d0f1      	beq.n	8004f98 <HAL_RCC_OscConfig+0x24c>
 8004fb4:	e018      	b.n	8004fe8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fba:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	438a      	bics	r2, r1
 8004fc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fd51 	bl	8003a68 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004fcc:	f7fe fd4c 	bl	8003a68 <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e090      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d1f1      	bne.n	8004fcc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2204      	movs	r2, #4
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d100      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x2a8>
 8004ff2:	e084      	b.n	80050fe <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff4:	230f      	movs	r3, #15
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004ffc:	4b23      	ldr	r3, [pc, #140]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2238      	movs	r2, #56	@ 0x38
 8005002:	4013      	ands	r3, r2
 8005004:	2b20      	cmp	r3, #32
 8005006:	d106      	bne.n	8005016 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d000      	beq.n	8005012 <HAL_RCC_OscConfig+0x2c6>
 8005010:	e075      	b.n	80050fe <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e074      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x2e0>
 800501e:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005020:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005022:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005024:	2101      	movs	r1, #1
 8005026:	430a      	orrs	r2, r1
 8005028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800502a:	e01c      	b.n	8005066 <HAL_RCC_OscConfig+0x31a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b05      	cmp	r3, #5
 8005032:	d10c      	bne.n	800504e <HAL_RCC_OscConfig+0x302>
 8005034:	4b15      	ldr	r3, [pc, #84]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005036:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005038:	4b14      	ldr	r3, [pc, #80]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 800503a:	2104      	movs	r1, #4
 800503c:	430a      	orrs	r2, r1
 800503e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005040:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005044:	4b11      	ldr	r3, [pc, #68]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005046:	2101      	movs	r1, #1
 8005048:	430a      	orrs	r2, r1
 800504a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800504c:	e00b      	b.n	8005066 <HAL_RCC_OscConfig+0x31a>
 800504e:	4b0f      	ldr	r3, [pc, #60]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005050:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005052:	4b0e      	ldr	r3, [pc, #56]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	65da      	str	r2, [r3, #92]	@ 0x5c
 800505a:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 800505c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800505e:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCC_OscConfig+0x340>)
 8005060:	2104      	movs	r1, #4
 8005062:	438a      	bics	r2, r1
 8005064:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d028      	beq.n	80050c0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fe fcfb 	bl	8003a68 <HAL_GetTick>
 8005072:	0003      	movs	r3, r0
 8005074:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005076:	e01d      	b.n	80050b4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fe fcf6 	bl	8003a68 <HAL_GetTick>
 800507c:	0002      	movs	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <HAL_RCC_OscConfig+0x364>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d915      	bls.n	80050b4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e039      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
 800508c:	40021000 	.word	0x40021000
 8005090:	fffeffff 	.word	0xfffeffff
 8005094:	fffbffff 	.word	0xfffbffff
 8005098:	ffff80ff 	.word	0xffff80ff
 800509c:	ffffc7ff 	.word	0xffffc7ff
 80050a0:	02dc6c00 	.word	0x02dc6c00
 80050a4:	20000000 	.word	0x20000000
 80050a8:	20000004 	.word	0x20000004
 80050ac:	fffffeff 	.word	0xfffffeff
 80050b0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80050b4:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <HAL_RCC_OscConfig+0x3bc>)
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	2202      	movs	r2, #2
 80050ba:	4013      	ands	r3, r2
 80050bc:	d0dc      	beq.n	8005078 <HAL_RCC_OscConfig+0x32c>
 80050be:	e013      	b.n	80050e8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fe fcd2 	bl	8003a68 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80050c8:	e009      	b.n	80050de <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fe fccd 	bl	8003a68 <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	4a0d      	ldr	r2, [pc, #52]	@ (800510c <HAL_RCC_OscConfig+0x3c0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e010      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80050de:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <HAL_RCC_OscConfig+0x3bc>)
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	2202      	movs	r2, #2
 80050e4:	4013      	ands	r3, r2
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80050e8:	230f      	movs	r3, #15
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCC_OscConfig+0x3bc>)
 80050f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f6:	4b04      	ldr	r3, [pc, #16]	@ (8005108 <HAL_RCC_OscConfig+0x3bc>)
 80050f8:	4905      	ldr	r1, [pc, #20]	@ (8005110 <HAL_RCC_OscConfig+0x3c4>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	0018      	movs	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	b006      	add	sp, #24
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	00001388 	.word	0x00001388
 8005110:	efffffff 	.word	0xefffffff

08005114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0e9      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b76      	ldr	r3, [pc, #472]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2207      	movs	r2, #7
 800512e:	4013      	ands	r3, r2
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d91e      	bls.n	8005174 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b73      	ldr	r3, [pc, #460]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2207      	movs	r2, #7
 800513c:	4393      	bics	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	4b70      	ldr	r3, [pc, #448]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005148:	f7fe fc8e 	bl	8003a68 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005150:	e009      	b.n	8005166 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005152:	f7fe fc89 	bl	8003a68 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	4a6a      	ldr	r2, [pc, #424]	@ (8005308 <HAL_RCC_ClockConfig+0x1f4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0ca      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005166:	4b67      	ldr	r3, [pc, #412]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2207      	movs	r2, #7
 800516c:	4013      	ands	r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d1ee      	bne.n	8005152 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2202      	movs	r2, #2
 800517a:	4013      	ands	r3, r2
 800517c:	d017      	beq.n	80051ae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2204      	movs	r2, #4
 8005184:	4013      	ands	r3, r2
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005188:	4b60      	ldr	r3, [pc, #384]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a60      	ldr	r2, [pc, #384]	@ (8005310 <HAL_RCC_ClockConfig+0x1fc>)
 800518e:	401a      	ands	r2, r3
 8005190:	4b5e      	ldr	r3, [pc, #376]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005192:	21b0      	movs	r1, #176	@ 0xb0
 8005194:	0109      	lsls	r1, r1, #4
 8005196:	430a      	orrs	r2, r1
 8005198:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519a:	4b5c      	ldr	r3, [pc, #368]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4a5d      	ldr	r2, [pc, #372]	@ (8005314 <HAL_RCC_ClockConfig+0x200>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4b58      	ldr	r3, [pc, #352]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80051aa:	430a      	orrs	r2, r1
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	4013      	ands	r3, r2
 80051b6:	d055      	beq.n	8005264 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80051b8:	4b54      	ldr	r3, [pc, #336]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	221c      	movs	r2, #28
 80051be:	4393      	bics	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d4:	4b4d      	ldr	r3, [pc, #308]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	4013      	ands	r3, r2
 80051de:	d11f      	bne.n	8005220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e08b      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ec:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4013      	ands	r3, r2
 80051f6:	d113      	bne.n	8005220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e07f      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d106      	bne.n	8005212 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005204:	4b41      	ldr	r3, [pc, #260]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005208:	2202      	movs	r2, #2
 800520a:	4013      	ands	r3, r2
 800520c:	d108      	bne.n	8005220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e074      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005212:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e06d      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005220:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2207      	movs	r2, #7
 8005226:	4393      	bics	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	4b37      	ldr	r3, [pc, #220]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fe fc18 	bl	8003a68 <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523c:	e009      	b.n	8005252 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800523e:	f7fe fc13 	bl	8003a68 <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a2f      	ldr	r2, [pc, #188]	@ (8005308 <HAL_RCC_ClockConfig+0x1f4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e054      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2e      	ldr	r3, [pc, #184]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2238      	movs	r2, #56	@ 0x38
 8005258:	401a      	ands	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	429a      	cmp	r2, r3
 8005262:	d1ec      	bne.n	800523e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b27      	ldr	r3, [pc, #156]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2207      	movs	r2, #7
 800526a:	4013      	ands	r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d21e      	bcs.n	80052b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b24      	ldr	r3, [pc, #144]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2207      	movs	r2, #7
 8005278:	4393      	bics	r3, r2
 800527a:	0019      	movs	r1, r3
 800527c:	4b21      	ldr	r3, [pc, #132]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005284:	f7fe fbf0 	bl	8003a68 <HAL_GetTick>
 8005288:	0003      	movs	r3, r0
 800528a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800528c:	e009      	b.n	80052a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800528e:	f7fe fbeb 	bl	8003a68 <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <HAL_RCC_ClockConfig+0x1f4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e02c      	b.n	80052fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052a2:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <HAL_RCC_ClockConfig+0x1f0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2207      	movs	r2, #7
 80052a8:	4013      	ands	r3, r2
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1ee      	bne.n	800528e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2204      	movs	r2, #4
 80052b6:	4013      	ands	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052ba:	4b14      	ldr	r3, [pc, #80]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_RCC_ClockConfig+0x204>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	4b10      	ldr	r3, [pc, #64]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052ce:	f000 f82b 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80052d2:	0001      	movs	r1, r0
 80052d4:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <HAL_RCC_ClockConfig+0x1f8>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	220f      	movs	r2, #15
 80052dc:	401a      	ands	r2, r3
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_RCC_ClockConfig+0x208>)
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	58d3      	ldr	r3, [r2, r3]
 80052e4:	221f      	movs	r2, #31
 80052e6:	4013      	ands	r3, r2
 80052e8:	000a      	movs	r2, r1
 80052ea:	40da      	lsrs	r2, r3
 80052ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <HAL_RCC_ClockConfig+0x20c>)
 80052ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <HAL_RCC_ClockConfig+0x210>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fe fb5b 	bl	80039b0 <HAL_InitTick>
 80052fa:	0003      	movs	r3, r0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40022000 	.word	0x40022000
 8005308:	00001388 	.word	0x00001388
 800530c:	40021000 	.word	0x40021000
 8005310:	ffff84ff 	.word	0xffff84ff
 8005314:	fffff0ff 	.word	0xfffff0ff
 8005318:	ffff8fff 	.word	0xffff8fff
 800531c:	08006f50 	.word	0x08006f50
 8005320:	20000000 	.word	0x20000000
 8005324:	20000004 	.word	0x20000004

08005328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800532e:	4b1c      	ldr	r3, [pc, #112]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2238      	movs	r2, #56	@ 0x38
 8005334:	4013      	ands	r3, r2
 8005336:	d10f      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0adb      	lsrs	r3, r3, #11
 800533e:	2207      	movs	r2, #7
 8005340:	4013      	ands	r3, r2
 8005342:	2201      	movs	r2, #1
 8005344:	409a      	lsls	r2, r3
 8005346:	0013      	movs	r3, r2
 8005348:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	4815      	ldr	r0, [pc, #84]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800534e:	f7fa feed 	bl	800012c <__udivsi3>
 8005352:	0003      	movs	r3, r0
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	e01e      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2238      	movs	r2, #56	@ 0x38
 800535e:	4013      	ands	r3, r2
 8005360:	2b08      	cmp	r3, #8
 8005362:	d102      	bne.n	800536a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e015      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x78>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2238      	movs	r2, #56	@ 0x38
 8005370:	4013      	ands	r3, r2
 8005372:	2b20      	cmp	r3, #32
 8005374:	d103      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005376:	2380      	movs	r3, #128	@ 0x80
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e00b      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800537e:	4b08      	ldr	r3, [pc, #32]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x78>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2238      	movs	r2, #56	@ 0x38
 8005384:	4013      	ands	r3, r2
 8005386:	2b18      	cmp	r3, #24
 8005388:	d103      	bne.n	8005392 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800538a:	23fa      	movs	r3, #250	@ 0xfa
 800538c:	01db      	lsls	r3, r3, #7
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e001      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8005396:	687b      	ldr	r3, [r7, #4]
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	02dc6c00 	.word	0x02dc6c00
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b02      	ldr	r3, [pc, #8]	@ (80053bc <HAL_RCC_GetHCLKFreq+0x10>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	20000000 	.word	0x20000000

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80053c4:	f7ff fff2 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053c8:	0001      	movs	r1, r0
 80053ca:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0b1b      	lsrs	r3, r3, #12
 80053d0:	2207      	movs	r2, #7
 80053d2:	401a      	ands	r2, r3
 80053d4:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCC_GetPCLK1Freq+0x2c>)
 80053d6:	0092      	lsls	r2, r2, #2
 80053d8:	58d3      	ldr	r3, [r2, r3]
 80053da:	221f      	movs	r2, #31
 80053dc:	4013      	ands	r3, r2
 80053de:	40d9      	lsrs	r1, r3
 80053e0:	000b      	movs	r3, r1
}
 80053e2:	0018      	movs	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08006f90 	.word	0x08006f90

080053f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053f8:	2313      	movs	r3, #19
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005400:	2312      	movs	r3, #18
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	4013      	ands	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005414:	e079      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2011      	movs	r0, #17
 8005418:	183b      	adds	r3, r7, r0
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541e:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005422:	2380      	movs	r3, #128	@ 0x80
 8005424:	055b      	lsls	r3, r3, #21
 8005426:	4013      	ands	r3, r2
 8005428:	d110      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	4b61      	ldr	r3, [pc, #388]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800542c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800542e:	4b60      	ldr	r3, [pc, #384]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005430:	2180      	movs	r1, #128	@ 0x80
 8005432:	0549      	lsls	r1, r1, #21
 8005434:	430a      	orrs	r2, r1
 8005436:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005438:	4b5d      	ldr	r3, [pc, #372]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800543a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	055b      	lsls	r3, r3, #21
 8005440:	4013      	ands	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005446:	183b      	adds	r3, r7, r0
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800544c:	4b58      	ldr	r3, [pc, #352]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800544e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005450:	23c0      	movs	r3, #192	@ 0xc0
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4013      	ands	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d019      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d014      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005468:	4b51      	ldr	r3, [pc, #324]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	4a51      	ldr	r2, [pc, #324]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800546e:	4013      	ands	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005472:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005474:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005476:	4b4e      	ldr	r3, [pc, #312]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005478:	2180      	movs	r1, #128	@ 0x80
 800547a:	0249      	lsls	r1, r1, #9
 800547c:	430a      	orrs	r2, r1
 800547e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005480:	4b4b      	ldr	r3, [pc, #300]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005484:	4b4a      	ldr	r3, [pc, #296]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005486:	494c      	ldr	r1, [pc, #304]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005488:	400a      	ands	r2, r1
 800548a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800548c:	4b48      	ldr	r3, [pc, #288]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d016      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fe fae5 	bl	8003a68 <HAL_GetTick>
 800549e:	0003      	movs	r3, r0
 80054a0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80054a2:	e00c      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a4:	f7fe fae0 	bl	8003a68 <HAL_GetTick>
 80054a8:	0002      	movs	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	4a43      	ldr	r2, [pc, #268]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d904      	bls.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80054b4:	2313      	movs	r3, #19
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	2203      	movs	r2, #3
 80054ba:	701a      	strb	r2, [r3, #0]
          break;
 80054bc:	e004      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80054be:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c2:	2202      	movs	r2, #2
 80054c4:	4013      	ands	r3, r2
 80054c6:	d0ed      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80054c8:	2313      	movs	r3, #19
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d2:	4b37      	ldr	r3, [pc, #220]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	4a37      	ldr	r2, [pc, #220]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054d8:	4013      	ands	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4b33      	ldr	r3, [pc, #204]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054e2:	430a      	orrs	r2, r1
 80054e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054e6:	e005      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	2312      	movs	r3, #18
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2213      	movs	r2, #19
 80054ee:	18ba      	adds	r2, r7, r2
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054f4:	2311      	movs	r3, #17
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fe:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005502:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005504:	492e      	ldr	r1, [pc, #184]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	400a      	ands	r2, r1
 8005508:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	4013      	ands	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005514:	4b26      	ldr	r3, [pc, #152]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	2203      	movs	r2, #3
 800551a:	4393      	bics	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	4b23      	ldr	r3, [pc, #140]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005524:	430a      	orrs	r2, r1
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2240      	movs	r2, #64	@ 0x40
 800552e:	4013      	ands	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005532:	4b1f      	ldr	r3, [pc, #124]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	4a23      	ldr	r2, [pc, #140]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005538:	4013      	ands	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005542:	430a      	orrs	r2, r1
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	01db      	lsls	r3, r3, #7
 800554e:	4013      	ands	r3, r2
 8005550:	d008      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005552:	4b17      	ldr	r3, [pc, #92]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	0899      	lsrs	r1, r3, #2
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005560:	430a      	orrs	r2, r1
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4013      	ands	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005570:	4b0f      	ldr	r3, [pc, #60]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005574:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005580:	430a      	orrs	r2, r1
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	da09      	bge.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800558c:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22e0      	movs	r2, #224	@ 0xe0
 8005592:	4393      	bics	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]
  }
  return status;
 80055a0:	2312      	movs	r3, #18
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
}
 80055a6:	0018      	movs	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b006      	add	sp, #24
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	40021000 	.word	0x40021000
 80055b4:	fffffcff 	.word	0xfffffcff
 80055b8:	fffeffff 	.word	0xfffeffff
 80055bc:	00001388 	.word	0x00001388
 80055c0:	efffffff 	.word	0xefffffff
 80055c4:	ffffcfff 	.word	0xffffcfff
 80055c8:	ffff3fff 	.word	0xffff3fff

080055cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e046      	b.n	800566c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2288      	movs	r2, #136	@ 0x88
 80055e2:	589b      	ldr	r3, [r3, r2]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2284      	movs	r2, #132	@ 0x84
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0018      	movs	r0, r3
 80055f4:	f7fe f8de 	bl	80037b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2288      	movs	r2, #136	@ 0x88
 80055fc:	2124      	movs	r1, #36	@ 0x24
 80055fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	438a      	bics	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fa4e 	bl	8005abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f8cc 	bl	80057c0 <UART_SetConfig>
 8005628:	0003      	movs	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e01c      	b.n	800566c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	490d      	ldr	r1, [pc, #52]	@ (8005674 <HAL_UART_Init+0xa8>)
 800563e:	400a      	ands	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	212a      	movs	r1, #42	@ 0x2a
 800564e:	438a      	bics	r2, r1
 8005650:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2101      	movs	r1, #1
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fadd 	bl	8005c24 <UART_CheckIdleState>
 800566a:	0003      	movs	r3, r0
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	ffffb7ff 	.word	0xffffb7ff

08005678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	@ 0x28
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	1dbb      	adds	r3, r7, #6
 8005686:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2288      	movs	r2, #136	@ 0x88
 800568c:	589b      	ldr	r3, [r3, r2]
 800568e:	2b20      	cmp	r3, #32
 8005690:	d000      	beq.n	8005694 <HAL_UART_Transmit+0x1c>
 8005692:	e090      	b.n	80057b6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_UART_Transmit+0x2a>
 800569a:	1dbb      	adds	r3, r7, #6
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e088      	b.n	80057b8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	2380      	movs	r3, #128	@ 0x80
 80056ac:	015b      	lsls	r3, r3, #5
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d109      	bne.n	80056c6 <HAL_UART_Transmit+0x4e>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2201      	movs	r2, #1
 80056be:	4013      	ands	r3, r2
 80056c0:	d001      	beq.n	80056c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e078      	b.n	80057b8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2290      	movs	r2, #144	@ 0x90
 80056ca:	2100      	movs	r1, #0
 80056cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2288      	movs	r2, #136	@ 0x88
 80056d2:	2121      	movs	r1, #33	@ 0x21
 80056d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d6:	f7fe f9c7 	bl	8003a68 <HAL_GetTick>
 80056da:	0003      	movs	r3, r0
 80056dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1dba      	adds	r2, r7, #6
 80056e2:	2154      	movs	r1, #84	@ 0x54
 80056e4:	8812      	ldrh	r2, [r2, #0]
 80056e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1dba      	adds	r2, r7, #6
 80056ec:	2156      	movs	r1, #86	@ 0x56
 80056ee:	8812      	ldrh	r2, [r2, #0]
 80056f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	015b      	lsls	r3, r3, #5
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d108      	bne.n	8005710 <HAL_UART_Transmit+0x98>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e003      	b.n	8005718 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005718:	e030      	b.n	800577c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	0013      	movs	r3, r2
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	f000 fb26 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d005      	beq.n	800573c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2288      	movs	r2, #136	@ 0x88
 8005734:	2120      	movs	r1, #32
 8005736:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e03d      	b.n	80057b8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	001a      	movs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	05d2      	lsls	r2, r2, #23
 800574e:	0dd2      	lsrs	r2, r2, #23
 8005750:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3302      	adds	r3, #2
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e007      	b.n	800576a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2256      	movs	r2, #86	@ 0x56
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b299      	uxth	r1, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2256      	movs	r2, #86	@ 0x56
 800577a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2256      	movs	r2, #86	@ 0x56
 8005780:	5a9b      	ldrh	r3, [r3, r2]
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1c8      	bne.n	800571a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	0013      	movs	r3, r2
 8005792:	2200      	movs	r2, #0
 8005794:	2140      	movs	r1, #64	@ 0x40
 8005796:	f000 faef 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 800579a:	1e03      	subs	r3, r0, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2288      	movs	r2, #136	@ 0x88
 80057a2:	2120      	movs	r1, #32
 80057a4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e006      	b.n	80057b8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2288      	movs	r2, #136	@ 0x88
 80057ae:	2120      	movs	r1, #32
 80057b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e000      	b.n	80057b8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
  }
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b008      	add	sp, #32
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c8:	231e      	movs	r3, #30
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4aab      	ldr	r2, [pc, #684]	@ (8005a9c <UART_SetConfig+0x2dc>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4aa6      	ldr	r2, [pc, #664]	@ (8005aa0 <UART_SetConfig+0x2e0>)
 8005806:	4013      	ands	r3, r2
 8005808:	0019      	movs	r1, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4a9d      	ldr	r2, [pc, #628]	@ (8005aa4 <UART_SetConfig+0x2e4>)
 800582e:	4013      	ands	r3, r2
 8005830:	0019      	movs	r1, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	430a      	orrs	r2, r1
 800583a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	220f      	movs	r2, #15
 8005844:	4393      	bics	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a93      	ldr	r2, [pc, #588]	@ (8005aa8 <UART_SetConfig+0x2e8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d127      	bne.n	80058ae <UART_SetConfig+0xee>
 800585e:	4b93      	ldr	r3, [pc, #588]	@ (8005aac <UART_SetConfig+0x2ec>)
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	2203      	movs	r2, #3
 8005864:	4013      	ands	r3, r2
 8005866:	2b03      	cmp	r3, #3
 8005868:	d017      	beq.n	800589a <UART_SetConfig+0xda>
 800586a:	d81b      	bhi.n	80058a4 <UART_SetConfig+0xe4>
 800586c:	2b02      	cmp	r3, #2
 800586e:	d00a      	beq.n	8005886 <UART_SetConfig+0xc6>
 8005870:	d818      	bhi.n	80058a4 <UART_SetConfig+0xe4>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <UART_SetConfig+0xbc>
 8005876:	2b01      	cmp	r3, #1
 8005878:	d00a      	beq.n	8005890 <UART_SetConfig+0xd0>
 800587a:	e013      	b.n	80058a4 <UART_SetConfig+0xe4>
 800587c:	231f      	movs	r3, #31
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e021      	b.n	80058ca <UART_SetConfig+0x10a>
 8005886:	231f      	movs	r3, #31
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	2202      	movs	r2, #2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e01c      	b.n	80058ca <UART_SetConfig+0x10a>
 8005890:	231f      	movs	r3, #31
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	2204      	movs	r2, #4
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e017      	b.n	80058ca <UART_SetConfig+0x10a>
 800589a:	231f      	movs	r3, #31
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2208      	movs	r2, #8
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e012      	b.n	80058ca <UART_SetConfig+0x10a>
 80058a4:	231f      	movs	r3, #31
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	2210      	movs	r2, #16
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e00d      	b.n	80058ca <UART_SetConfig+0x10a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ab0 <UART_SetConfig+0x2f0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d104      	bne.n	80058c2 <UART_SetConfig+0x102>
 80058b8:	231f      	movs	r3, #31
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e003      	b.n	80058ca <UART_SetConfig+0x10a>
 80058c2:	231f      	movs	r3, #31
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2210      	movs	r2, #16
 80058c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d000      	beq.n	80058d8 <UART_SetConfig+0x118>
 80058d6:	e06f      	b.n	80059b8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80058d8:	231f      	movs	r3, #31
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d01f      	beq.n	8005922 <UART_SetConfig+0x162>
 80058e2:	dc22      	bgt.n	800592a <UART_SetConfig+0x16a>
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d017      	beq.n	8005918 <UART_SetConfig+0x158>
 80058e8:	dc1f      	bgt.n	800592a <UART_SetConfig+0x16a>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <UART_SetConfig+0x134>
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d005      	beq.n	80058fe <UART_SetConfig+0x13e>
 80058f2:	e01a      	b.n	800592a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7ff fd64 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80058f8:	0003      	movs	r3, r0
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e01c      	b.n	8005938 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80058fe:	4b6b      	ldr	r3, [pc, #428]	@ (8005aac <UART_SetConfig+0x2ec>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2207      	movs	r2, #7
 8005906:	4013      	ands	r3, r2
 8005908:	3301      	adds	r3, #1
 800590a:	0019      	movs	r1, r3
 800590c:	4869      	ldr	r0, [pc, #420]	@ (8005ab4 <UART_SetConfig+0x2f4>)
 800590e:	f7fa fc0d 	bl	800012c <__udivsi3>
 8005912:	0003      	movs	r3, r0
 8005914:	61bb      	str	r3, [r7, #24]
        break;
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005918:	f7ff fd06 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 800591c:	0003      	movs	r3, r0
 800591e:	61bb      	str	r3, [r7, #24]
        break;
 8005920:	e00a      	b.n	8005938 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	61bb      	str	r3, [r7, #24]
        break;
 8005928:	e006      	b.n	8005938 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800592e:	231e      	movs	r3, #30
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
        break;
 8005936:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d100      	bne.n	8005940 <UART_SetConfig+0x180>
 800593e:	e097      	b.n	8005a70 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005944:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab8 <UART_SetConfig+0x2f8>)
 8005946:	0052      	lsls	r2, r2, #1
 8005948:	5ad3      	ldrh	r3, [r2, r3]
 800594a:	0019      	movs	r1, r3
 800594c:	69b8      	ldr	r0, [r7, #24]
 800594e:	f7fa fbed 	bl	800012c <__udivsi3>
 8005952:	0003      	movs	r3, r0
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	18d2      	adds	r2, r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	0019      	movs	r1, r3
 8005964:	0010      	movs	r0, r2
 8005966:	f7fa fbe1 	bl	800012c <__udivsi3>
 800596a:	0003      	movs	r3, r0
 800596c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b0f      	cmp	r3, #15
 8005972:	d91c      	bls.n	80059ae <UART_SetConfig+0x1ee>
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	2380      	movs	r3, #128	@ 0x80
 8005978:	025b      	lsls	r3, r3, #9
 800597a:	429a      	cmp	r2, r3
 800597c:	d217      	bcs.n	80059ae <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	b29a      	uxth	r2, r3
 8005982:	200e      	movs	r0, #14
 8005984:	183b      	adds	r3, r7, r0
 8005986:	210f      	movs	r1, #15
 8005988:	438a      	bics	r2, r1
 800598a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	b29b      	uxth	r3, r3
 8005992:	2207      	movs	r2, #7
 8005994:	4013      	ands	r3, r2
 8005996:	b299      	uxth	r1, r3
 8005998:	183b      	adds	r3, r7, r0
 800599a:	183a      	adds	r2, r7, r0
 800599c:	8812      	ldrh	r2, [r2, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	183a      	adds	r2, r7, r0
 80059a8:	8812      	ldrh	r2, [r2, #0]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e060      	b.n	8005a70 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80059ae:	231e      	movs	r3, #30
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e05b      	b.n	8005a70 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b8:	231f      	movs	r3, #31
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d01f      	beq.n	8005a02 <UART_SetConfig+0x242>
 80059c2:	dc22      	bgt.n	8005a0a <UART_SetConfig+0x24a>
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d017      	beq.n	80059f8 <UART_SetConfig+0x238>
 80059c8:	dc1f      	bgt.n	8005a0a <UART_SetConfig+0x24a>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <UART_SetConfig+0x214>
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d005      	beq.n	80059de <UART_SetConfig+0x21e>
 80059d2:	e01a      	b.n	8005a0a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7ff fcf4 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80059d8:	0003      	movs	r3, r0
 80059da:	61bb      	str	r3, [r7, #24]
        break;
 80059dc:	e01c      	b.n	8005a18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80059de:	4b33      	ldr	r3, [pc, #204]	@ (8005aac <UART_SetConfig+0x2ec>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2207      	movs	r2, #7
 80059e6:	4013      	ands	r3, r2
 80059e8:	3301      	adds	r3, #1
 80059ea:	0019      	movs	r1, r3
 80059ec:	4831      	ldr	r0, [pc, #196]	@ (8005ab4 <UART_SetConfig+0x2f4>)
 80059ee:	f7fa fb9d 	bl	800012c <__udivsi3>
 80059f2:	0003      	movs	r3, r0
 80059f4:	61bb      	str	r3, [r7, #24]
        break;
 80059f6:	e00f      	b.n	8005a18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f8:	f7ff fc96 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80059fc:	0003      	movs	r3, r0
 80059fe:	61bb      	str	r3, [r7, #24]
        break;
 8005a00:	e00a      	b.n	8005a18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	61bb      	str	r3, [r7, #24]
        break;
 8005a08:	e006      	b.n	8005a18 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a0e:	231e      	movs	r3, #30
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
        break;
 8005a16:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d028      	beq.n	8005a70 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a22:	4b25      	ldr	r3, [pc, #148]	@ (8005ab8 <UART_SetConfig+0x2f8>)
 8005a24:	0052      	lsls	r2, r2, #1
 8005a26:	5ad3      	ldrh	r3, [r2, r3]
 8005a28:	0019      	movs	r1, r3
 8005a2a:	69b8      	ldr	r0, [r7, #24]
 8005a2c:	f7fa fb7e 	bl	800012c <__udivsi3>
 8005a30:	0003      	movs	r3, r0
 8005a32:	001a      	movs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	18d2      	adds	r2, r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0019      	movs	r1, r3
 8005a42:	0010      	movs	r0, r2
 8005a44:	f7fa fb72 	bl	800012c <__udivsi3>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d90a      	bls.n	8005a68 <UART_SetConfig+0x2a8>
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	2380      	movs	r3, #128	@ 0x80
 8005a56:	025b      	lsls	r3, r3, #9
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d205      	bcs.n	8005a68 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e003      	b.n	8005a70 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a68:	231e      	movs	r3, #30
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	226a      	movs	r2, #106	@ 0x6a
 8005a74:	2101      	movs	r1, #1
 8005a76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2268      	movs	r2, #104	@ 0x68
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a8c:	231e      	movs	r3, #30
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b008      	add	sp, #32
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	cfff69f3 	.word	0xcfff69f3
 8005aa0:	ffffcfff 	.word	0xffffcfff
 8005aa4:	11fff4ff 	.word	0x11fff4ff
 8005aa8:	40013800 	.word	0x40013800
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	02dc6c00 	.word	0x02dc6c00
 8005ab8:	08006fb0 	.word	0x08006fb0

08005abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	2208      	movs	r2, #8
 8005aca:	4013      	ands	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8005c00 <UART_AdvFeatureConfig+0x144>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	2201      	movs	r2, #1
 8005aec:	4013      	ands	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4a43      	ldr	r2, [pc, #268]	@ (8005c04 <UART_AdvFeatureConfig+0x148>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a3b      	ldr	r2, [pc, #236]	@ (8005c08 <UART_AdvFeatureConfig+0x14c>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	2204      	movs	r2, #4
 8005b30:	4013      	ands	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <UART_AdvFeatureConfig+0x150>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	2210      	movs	r2, #16
 8005b52:	4013      	ands	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c10 <UART_AdvFeatureConfig+0x154>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	2220      	movs	r2, #32
 8005b74:	4013      	ands	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	4a25      	ldr	r2, [pc, #148]	@ (8005c14 <UART_AdvFeatureConfig+0x158>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	0019      	movs	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	2240      	movs	r2, #64	@ 0x40
 8005b96:	4013      	ands	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <UART_AdvFeatureConfig+0x15c>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb6:	2380      	movs	r3, #128	@ 0x80
 8005bb8:	035b      	lsls	r3, r3, #13
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d10b      	bne.n	8005bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <UART_AdvFeatureConfig+0x160>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	2280      	movs	r2, #128	@ 0x80
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4a0e      	ldr	r2, [pc, #56]	@ (8005c20 <UART_AdvFeatureConfig+0x164>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	605a      	str	r2, [r3, #4]
  }
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	ffff7fff 	.word	0xffff7fff
 8005c04:	fffdffff 	.word	0xfffdffff
 8005c08:	fffeffff 	.word	0xfffeffff
 8005c0c:	fffbffff 	.word	0xfffbffff
 8005c10:	ffffefff 	.word	0xffffefff
 8005c14:	ffffdfff 	.word	0xffffdfff
 8005c18:	ffefffff 	.word	0xffefffff
 8005c1c:	ff9fffff 	.word	0xff9fffff
 8005c20:	fff7ffff 	.word	0xfff7ffff

08005c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b092      	sub	sp, #72	@ 0x48
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2290      	movs	r2, #144	@ 0x90
 8005c30:	2100      	movs	r1, #0
 8005c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c34:	f7fd ff18 	bl	8003a68 <HAL_GetTick>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2208      	movs	r2, #8
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d12d      	bne.n	8005ca6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4c:	2280      	movs	r2, #128	@ 0x80
 8005c4e:	0391      	lsls	r1, r2, #14
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4a47      	ldr	r2, [pc, #284]	@ (8005d70 <UART_CheckIdleState+0x14c>)
 8005c54:	9200      	str	r2, [sp, #0]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f000 f88e 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005c5c:	1e03      	subs	r3, r0, #0
 8005c5e:	d022      	beq.n	8005ca6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			@ (mov r8, r8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2180      	movs	r1, #128	@ 0x80
 8005c82:	438a      	bics	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2288      	movs	r2, #136	@ 0x88
 8005c96:	2120      	movs	r1, #32
 8005c98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2284      	movs	r2, #132	@ 0x84
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e060      	b.n	8005d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2204      	movs	r2, #4
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d146      	bne.n	8005d42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb6:	2280      	movs	r2, #128	@ 0x80
 8005cb8:	03d1      	lsls	r1, r2, #15
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <UART_CheckIdleState+0x14c>)
 8005cbe:	9200      	str	r2, [sp, #0]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f000 f859 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	1e03      	subs	r3, r0, #0
 8005cc8:	d03b      	beq.n	8005d42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cca:	f3ef 8310 	mrs	r3, PRIMASK
 8005cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f383 8810 	msr	PRIMASK, r3
}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4922      	ldr	r1, [pc, #136]	@ (8005d74 <UART_CheckIdleState+0x150>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d06:	2301      	movs	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			@ (mov r8, r8)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	438a      	bics	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	228c      	movs	r2, #140	@ 0x8c
 8005d32:	2120      	movs	r1, #32
 8005d34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2284      	movs	r2, #132	@ 0x84
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e012      	b.n	8005d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2288      	movs	r2, #136	@ 0x88
 8005d46:	2120      	movs	r1, #32
 8005d48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	228c      	movs	r2, #140	@ 0x8c
 8005d4e:	2120      	movs	r1, #32
 8005d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2284      	movs	r2, #132	@ 0x84
 8005d62:	2100      	movs	r1, #0
 8005d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	0018      	movs	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b010      	add	sp, #64	@ 0x40
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	01ffffff 	.word	0x01ffffff
 8005d74:	fffffedf 	.word	0xfffffedf

08005d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	1dfb      	adds	r3, r7, #7
 8005d86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	e04b      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	d048      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fd fe6a 	bl	8003a68 <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e04b      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2204      	movs	r2, #4
 8005db2:	4013      	ands	r3, r2
 8005db4:	d035      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d111      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f000 f83c 	bl	8005e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2290      	movs	r2, #144	@ 0x90
 8005dd8:	2108      	movs	r1, #8
 8005dda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2284      	movs	r2, #132	@ 0x84
 8005de0:	2100      	movs	r1, #0
 8005de2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e02c      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	2380      	movs	r3, #128	@ 0x80
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	401a      	ands	r2, r3
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d112      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2280      	movs	r2, #128	@ 0x80
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 f81f 	bl	8005e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2290      	movs	r2, #144	@ 0x90
 8005e12:	2120      	movs	r1, #32
 8005e14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2284      	movs	r2, #132	@ 0x84
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e00f      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	425a      	negs	r2, r3
 8005e32:	4153      	adcs	r3, r2
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	001a      	movs	r2, r3
 8005e38:	1dfb      	adds	r3, r7, #7
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d0a4      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b004      	add	sp, #16
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	@ 0x38
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e54:	f3ef 8310 	mrs	r3, PRIMASK
 8005e58:	617b      	str	r3, [r7, #20]
  return(result);
 8005e5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f383 8810 	msr	PRIMASK, r3
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4926      	ldr	r1, [pc, #152]	@ (8005f10 <UART_EndRxTransfer+0xc4>)
 8005e76:	400a      	ands	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f383 8810 	msr	PRIMASK, r3
}
 8005e84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e86:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e90:	2301      	movs	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	f383 8810 	msr	PRIMASK, r3
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	491b      	ldr	r1, [pc, #108]	@ (8005f14 <UART_EndRxTransfer+0xc8>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	f383 8810 	msr	PRIMASK, r3
}
 8005eb6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d118      	bne.n	8005ef2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eca:	2301      	movs	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f383 8810 	msr	PRIMASK, r3
}
 8005ed4:	46c0      	nop			@ (mov r8, r8)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2110      	movs	r1, #16
 8005ee2:	438a      	bics	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f383 8810 	msr	PRIMASK, r3
}
 8005ef0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	228c      	movs	r2, #140	@ 0x8c
 8005ef6:	2120      	movs	r1, #32
 8005ef8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f06:	46c0      	nop			@ (mov r8, r8)
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b00e      	add	sp, #56	@ 0x38
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	fffffedf 	.word	0xfffffedf
 8005f14:	effffffe 	.word	0xeffffffe

08005f18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2284      	movs	r2, #132	@ 0x84
 8005f24:	5c9b      	ldrb	r3, [r3, r2]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_UARTEx_DisableFifoMode+0x16>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e027      	b.n	8005f7e <HAL_UARTEx_DisableFifoMode+0x66>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2284      	movs	r2, #132	@ 0x84
 8005f32:	2101      	movs	r1, #1
 8005f34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2288      	movs	r2, #136	@ 0x88
 8005f3a:	2124      	movs	r1, #36	@ 0x24
 8005f3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2101      	movs	r1, #1
 8005f52:	438a      	bics	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a0b      	ldr	r2, [pc, #44]	@ (8005f88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2288      	movs	r2, #136	@ 0x88
 8005f70:	2120      	movs	r1, #32
 8005f72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2284      	movs	r2, #132	@ 0x84
 8005f78:	2100      	movs	r1, #0
 8005f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b004      	add	sp, #16
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	dfffffff 	.word	0xdfffffff

08005f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2284      	movs	r2, #132	@ 0x84
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e02e      	b.n	8006002 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2284      	movs	r2, #132	@ 0x84
 8005fa8:	2101      	movs	r1, #1
 8005faa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2288      	movs	r2, #136	@ 0x88
 8005fb0:	2124      	movs	r1, #36	@ 0x24
 8005fb2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	438a      	bics	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	08d9      	lsrs	r1, r3, #3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 f854 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2288      	movs	r2, #136	@ 0x88
 8005ff4:	2120      	movs	r1, #32
 8005ff6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2284      	movs	r2, #132	@ 0x84
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	0018      	movs	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	b004      	add	sp, #16
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2284      	movs	r2, #132	@ 0x84
 800601a:	5c9b      	ldrb	r3, [r3, r2]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e02f      	b.n	8006084 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2284      	movs	r2, #132	@ 0x84
 8006028:	2101      	movs	r1, #1
 800602a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2288      	movs	r2, #136	@ 0x88
 8006030:	2124      	movs	r1, #36	@ 0x24
 8006032:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	438a      	bics	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4a0e      	ldr	r2, [pc, #56]	@ (800608c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006054:	4013      	ands	r3, r2
 8006056:	0019      	movs	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f813 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2288      	movs	r2, #136	@ 0x88
 8006076:	2120      	movs	r1, #32
 8006078:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2284      	movs	r2, #132	@ 0x84
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	f1ffffff 	.word	0xf1ffffff

08006090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	226a      	movs	r2, #106	@ 0x6a
 80060a4:	2101      	movs	r1, #1
 80060a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2268      	movs	r2, #104	@ 0x68
 80060ac:	2101      	movs	r1, #1
 80060ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060b0:	e043      	b.n	800613a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060b2:	260f      	movs	r6, #15
 80060b4:	19bb      	adds	r3, r7, r6
 80060b6:	2208      	movs	r2, #8
 80060b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060ba:	200e      	movs	r0, #14
 80060bc:	183b      	adds	r3, r7, r0
 80060be:	2208      	movs	r2, #8
 80060c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	0e5b      	lsrs	r3, r3, #25
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	240d      	movs	r4, #13
 80060ce:	193b      	adds	r3, r7, r4
 80060d0:	2107      	movs	r1, #7
 80060d2:	400a      	ands	r2, r1
 80060d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	0f5b      	lsrs	r3, r3, #29
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	250c      	movs	r5, #12
 80060e2:	197b      	adds	r3, r7, r5
 80060e4:	2107      	movs	r1, #7
 80060e6:	400a      	ands	r2, r1
 80060e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	197a      	adds	r2, r7, r5
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4914      	ldr	r1, [pc, #80]	@ (8006144 <UARTEx_SetNbDataToProcess+0xb4>)
 80060f4:	5c8a      	ldrb	r2, [r1, r2]
 80060f6:	435a      	muls	r2, r3
 80060f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80060fa:	197b      	adds	r3, r7, r5
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	4a12      	ldr	r2, [pc, #72]	@ (8006148 <UARTEx_SetNbDataToProcess+0xb8>)
 8006100:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006102:	0019      	movs	r1, r3
 8006104:	f7fa f89c 	bl	8000240 <__divsi3>
 8006108:	0003      	movs	r3, r0
 800610a:	b299      	uxth	r1, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	226a      	movs	r2, #106	@ 0x6a
 8006110:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006112:	19bb      	adds	r3, r7, r6
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	193a      	adds	r2, r7, r4
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	490a      	ldr	r1, [pc, #40]	@ (8006144 <UARTEx_SetNbDataToProcess+0xb4>)
 800611c:	5c8a      	ldrb	r2, [r1, r2]
 800611e:	435a      	muls	r2, r3
 8006120:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006122:	193b      	adds	r3, r7, r4
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	4a08      	ldr	r2, [pc, #32]	@ (8006148 <UARTEx_SetNbDataToProcess+0xb8>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800612a:	0019      	movs	r1, r3
 800612c:	f7fa f888 	bl	8000240 <__divsi3>
 8006130:	0003      	movs	r3, r0
 8006132:	b299      	uxth	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2268      	movs	r2, #104	@ 0x68
 8006138:	5299      	strh	r1, [r3, r2]
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b005      	add	sp, #20
 8006140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	08006fc8 	.word	0x08006fc8
 8006148:	08006fd0 	.word	0x08006fd0

0800614c <siprintf>:
 800614c:	b40e      	push	{r1, r2, r3}
 800614e:	b500      	push	{lr}
 8006150:	490b      	ldr	r1, [pc, #44]	@ (8006180 <siprintf+0x34>)
 8006152:	b09c      	sub	sp, #112	@ 0x70
 8006154:	ab1d      	add	r3, sp, #116	@ 0x74
 8006156:	9002      	str	r0, [sp, #8]
 8006158:	9006      	str	r0, [sp, #24]
 800615a:	9107      	str	r1, [sp, #28]
 800615c:	9104      	str	r1, [sp, #16]
 800615e:	4809      	ldr	r0, [pc, #36]	@ (8006184 <siprintf+0x38>)
 8006160:	4909      	ldr	r1, [pc, #36]	@ (8006188 <siprintf+0x3c>)
 8006162:	cb04      	ldmia	r3!, {r2}
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	a902      	add	r1, sp, #8
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	f000 f99e 	bl	80064ac <_svfiprintf_r>
 8006170:	2200      	movs	r2, #0
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	b01c      	add	sp, #112	@ 0x70
 8006178:	bc08      	pop	{r3}
 800617a:	b003      	add	sp, #12
 800617c:	4718      	bx	r3
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	7fffffff 	.word	0x7fffffff
 8006184:	2000000c 	.word	0x2000000c
 8006188:	ffff0208 	.word	0xffff0208

0800618c <memset>:
 800618c:	0003      	movs	r3, r0
 800618e:	1882      	adds	r2, r0, r2
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	7019      	strb	r1, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <__errno>:
 800619c:	4b01      	ldr	r3, [pc, #4]	@ (80061a4 <__errno+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	4770      	bx	lr
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	2000000c 	.word	0x2000000c

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	2600      	movs	r6, #0
 80061ac:	4c0c      	ldr	r4, [pc, #48]	@ (80061e0 <__libc_init_array+0x38>)
 80061ae:	4d0d      	ldr	r5, [pc, #52]	@ (80061e4 <__libc_init_array+0x3c>)
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	2600      	movs	r6, #0
 80061ba:	f000 fe53 	bl	8006e64 <_init>
 80061be:	4c0a      	ldr	r4, [pc, #40]	@ (80061e8 <__libc_init_array+0x40>)
 80061c0:	4d0a      	ldr	r5, [pc, #40]	@ (80061ec <__libc_init_array+0x44>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	00b3      	lsls	r3, r6, #2
 80061ce:	58eb      	ldr	r3, [r5, r3]
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	00b3      	lsls	r3, r6, #2
 80061d8:	58eb      	ldr	r3, [r5, r3]
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	0800700c 	.word	0x0800700c
 80061e4:	0800700c 	.word	0x0800700c
 80061e8:	08007010 	.word	0x08007010
 80061ec:	0800700c 	.word	0x0800700c

080061f0 <__retarget_lock_acquire_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <__retarget_lock_release_recursive>:
 80061f2:	4770      	bx	lr

080061f4 <_free_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	0005      	movs	r5, r0
 80061f8:	1e0c      	subs	r4, r1, #0
 80061fa:	d010      	beq.n	800621e <_free_r+0x2a>
 80061fc:	3c04      	subs	r4, #4
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da00      	bge.n	8006206 <_free_r+0x12>
 8006204:	18e4      	adds	r4, r4, r3
 8006206:	0028      	movs	r0, r5
 8006208:	f000 f8e0 	bl	80063cc <__malloc_lock>
 800620c:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <_free_r+0x90>)
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <_free_r+0x2c>
 8006214:	6063      	str	r3, [r4, #4]
 8006216:	6014      	str	r4, [r2, #0]
 8006218:	0028      	movs	r0, r5
 800621a:	f000 f8df 	bl	80063dc <__malloc_unlock>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	42a3      	cmp	r3, r4
 8006222:	d908      	bls.n	8006236 <_free_r+0x42>
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	1821      	adds	r1, r4, r0
 8006228:	428b      	cmp	r3, r1
 800622a:	d1f3      	bne.n	8006214 <_free_r+0x20>
 800622c:	6819      	ldr	r1, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	1809      	adds	r1, r1, r0
 8006232:	6021      	str	r1, [r4, #0]
 8006234:	e7ee      	b.n	8006214 <_free_r+0x20>
 8006236:	001a      	movs	r2, r3
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <_free_r+0x4e>
 800623e:	42a3      	cmp	r3, r4
 8006240:	d9f9      	bls.n	8006236 <_free_r+0x42>
 8006242:	6811      	ldr	r1, [r2, #0]
 8006244:	1850      	adds	r0, r2, r1
 8006246:	42a0      	cmp	r0, r4
 8006248:	d10b      	bne.n	8006262 <_free_r+0x6e>
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	1809      	adds	r1, r1, r0
 800624e:	1850      	adds	r0, r2, r1
 8006250:	6011      	str	r1, [r2, #0]
 8006252:	4283      	cmp	r3, r0
 8006254:	d1e0      	bne.n	8006218 <_free_r+0x24>
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	1841      	adds	r1, r0, r1
 800625c:	6011      	str	r1, [r2, #0]
 800625e:	6053      	str	r3, [r2, #4]
 8006260:	e7da      	b.n	8006218 <_free_r+0x24>
 8006262:	42a0      	cmp	r0, r4
 8006264:	d902      	bls.n	800626c <_free_r+0x78>
 8006266:	230c      	movs	r3, #12
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	e7d5      	b.n	8006218 <_free_r+0x24>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	d103      	bne.n	800627c <_free_r+0x88>
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	1809      	adds	r1, r1, r0
 800627a:	6021      	str	r1, [r4, #0]
 800627c:	6063      	str	r3, [r4, #4]
 800627e:	6054      	str	r4, [r2, #4]
 8006280:	e7ca      	b.n	8006218 <_free_r+0x24>
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	200002bc 	.word	0x200002bc

08006288 <sbrk_aligned>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4e0f      	ldr	r6, [pc, #60]	@ (80062c8 <sbrk_aligned+0x40>)
 800628c:	000d      	movs	r5, r1
 800628e:	6831      	ldr	r1, [r6, #0]
 8006290:	0004      	movs	r4, r0
 8006292:	2900      	cmp	r1, #0
 8006294:	d102      	bne.n	800629c <sbrk_aligned+0x14>
 8006296:	f000 fb99 	bl	80069cc <_sbrk_r>
 800629a:	6030      	str	r0, [r6, #0]
 800629c:	0029      	movs	r1, r5
 800629e:	0020      	movs	r0, r4
 80062a0:	f000 fb94 	bl	80069cc <_sbrk_r>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d103      	bne.n	80062b0 <sbrk_aligned+0x28>
 80062a8:	2501      	movs	r5, #1
 80062aa:	426d      	negs	r5, r5
 80062ac:	0028      	movs	r0, r5
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	2303      	movs	r3, #3
 80062b2:	1cc5      	adds	r5, r0, #3
 80062b4:	439d      	bics	r5, r3
 80062b6:	42a8      	cmp	r0, r5
 80062b8:	d0f8      	beq.n	80062ac <sbrk_aligned+0x24>
 80062ba:	1a29      	subs	r1, r5, r0
 80062bc:	0020      	movs	r0, r4
 80062be:	f000 fb85 	bl	80069cc <_sbrk_r>
 80062c2:	3001      	adds	r0, #1
 80062c4:	d1f2      	bne.n	80062ac <sbrk_aligned+0x24>
 80062c6:	e7ef      	b.n	80062a8 <sbrk_aligned+0x20>
 80062c8:	200002b8 	.word	0x200002b8

080062cc <_malloc_r>:
 80062cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ce:	2203      	movs	r2, #3
 80062d0:	1ccb      	adds	r3, r1, #3
 80062d2:	4393      	bics	r3, r2
 80062d4:	3308      	adds	r3, #8
 80062d6:	0005      	movs	r5, r0
 80062d8:	001f      	movs	r7, r3
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d234      	bcs.n	8006348 <_malloc_r+0x7c>
 80062de:	270c      	movs	r7, #12
 80062e0:	42b9      	cmp	r1, r7
 80062e2:	d833      	bhi.n	800634c <_malloc_r+0x80>
 80062e4:	0028      	movs	r0, r5
 80062e6:	f000 f871 	bl	80063cc <__malloc_lock>
 80062ea:	4e37      	ldr	r6, [pc, #220]	@ (80063c8 <_malloc_r+0xfc>)
 80062ec:	6833      	ldr	r3, [r6, #0]
 80062ee:	001c      	movs	r4, r3
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	d12f      	bne.n	8006354 <_malloc_r+0x88>
 80062f4:	0039      	movs	r1, r7
 80062f6:	0028      	movs	r0, r5
 80062f8:	f7ff ffc6 	bl	8006288 <sbrk_aligned>
 80062fc:	0004      	movs	r4, r0
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d15f      	bne.n	80063c2 <_malloc_r+0xf6>
 8006302:	6834      	ldr	r4, [r6, #0]
 8006304:	9400      	str	r4, [sp, #0]
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d14a      	bne.n	80063a2 <_malloc_r+0xd6>
 800630c:	2c00      	cmp	r4, #0
 800630e:	d052      	beq.n	80063b6 <_malloc_r+0xea>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	0028      	movs	r0, r5
 8006314:	18e3      	adds	r3, r4, r3
 8006316:	9900      	ldr	r1, [sp, #0]
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	f000 fb57 	bl	80069cc <_sbrk_r>
 800631e:	9b01      	ldr	r3, [sp, #4]
 8006320:	4283      	cmp	r3, r0
 8006322:	d148      	bne.n	80063b6 <_malloc_r+0xea>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	0028      	movs	r0, r5
 8006328:	1aff      	subs	r7, r7, r3
 800632a:	0039      	movs	r1, r7
 800632c:	f7ff ffac 	bl	8006288 <sbrk_aligned>
 8006330:	3001      	adds	r0, #1
 8006332:	d040      	beq.n	80063b6 <_malloc_r+0xea>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	19db      	adds	r3, r3, r7
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	6833      	ldr	r3, [r6, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	2a00      	cmp	r2, #0
 8006340:	d133      	bne.n	80063aa <_malloc_r+0xde>
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	e019      	b.n	800637c <_malloc_r+0xb0>
 8006348:	2b00      	cmp	r3, #0
 800634a:	dac9      	bge.n	80062e0 <_malloc_r+0x14>
 800634c:	230c      	movs	r3, #12
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	2000      	movs	r0, #0
 8006352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006354:	6821      	ldr	r1, [r4, #0]
 8006356:	1bc9      	subs	r1, r1, r7
 8006358:	d420      	bmi.n	800639c <_malloc_r+0xd0>
 800635a:	290b      	cmp	r1, #11
 800635c:	d90a      	bls.n	8006374 <_malloc_r+0xa8>
 800635e:	19e2      	adds	r2, r4, r7
 8006360:	6027      	str	r7, [r4, #0]
 8006362:	42a3      	cmp	r3, r4
 8006364:	d104      	bne.n	8006370 <_malloc_r+0xa4>
 8006366:	6032      	str	r2, [r6, #0]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6011      	str	r1, [r2, #0]
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	e005      	b.n	800637c <_malloc_r+0xb0>
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	e7f9      	b.n	8006368 <_malloc_r+0x9c>
 8006374:	6862      	ldr	r2, [r4, #4]
 8006376:	42a3      	cmp	r3, r4
 8006378:	d10e      	bne.n	8006398 <_malloc_r+0xcc>
 800637a:	6032      	str	r2, [r6, #0]
 800637c:	0028      	movs	r0, r5
 800637e:	f000 f82d 	bl	80063dc <__malloc_unlock>
 8006382:	0020      	movs	r0, r4
 8006384:	2207      	movs	r2, #7
 8006386:	300b      	adds	r0, #11
 8006388:	1d23      	adds	r3, r4, #4
 800638a:	4390      	bics	r0, r2
 800638c:	1ac2      	subs	r2, r0, r3
 800638e:	4298      	cmp	r0, r3
 8006390:	d0df      	beq.n	8006352 <_malloc_r+0x86>
 8006392:	1a1b      	subs	r3, r3, r0
 8006394:	50a3      	str	r3, [r4, r2]
 8006396:	e7dc      	b.n	8006352 <_malloc_r+0x86>
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	e7ef      	b.n	800637c <_malloc_r+0xb0>
 800639c:	0023      	movs	r3, r4
 800639e:	6864      	ldr	r4, [r4, #4]
 80063a0:	e7a6      	b.n	80062f0 <_malloc_r+0x24>
 80063a2:	9c00      	ldr	r4, [sp, #0]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	e7ad      	b.n	8006306 <_malloc_r+0x3a>
 80063aa:	001a      	movs	r2, r3
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	d1fb      	bne.n	80063aa <_malloc_r+0xde>
 80063b2:	2300      	movs	r3, #0
 80063b4:	e7da      	b.n	800636c <_malloc_r+0xa0>
 80063b6:	230c      	movs	r3, #12
 80063b8:	0028      	movs	r0, r5
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f000 f80e 	bl	80063dc <__malloc_unlock>
 80063c0:	e7c6      	b.n	8006350 <_malloc_r+0x84>
 80063c2:	6007      	str	r7, [r0, #0]
 80063c4:	e7da      	b.n	800637c <_malloc_r+0xb0>
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	200002bc 	.word	0x200002bc

080063cc <__malloc_lock>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	4802      	ldr	r0, [pc, #8]	@ (80063d8 <__malloc_lock+0xc>)
 80063d0:	f7ff ff0e 	bl	80061f0 <__retarget_lock_acquire_recursive>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	46c0      	nop			@ (mov r8, r8)
 80063d8:	200002b4 	.word	0x200002b4

080063dc <__malloc_unlock>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	4802      	ldr	r0, [pc, #8]	@ (80063e8 <__malloc_unlock+0xc>)
 80063e0:	f7ff ff07 	bl	80061f2 <__retarget_lock_release_recursive>
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	200002b4 	.word	0x200002b4

080063ec <__ssputs_r>:
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ee:	688e      	ldr	r6, [r1, #8]
 80063f0:	b085      	sub	sp, #20
 80063f2:	001f      	movs	r7, r3
 80063f4:	000c      	movs	r4, r1
 80063f6:	680b      	ldr	r3, [r1, #0]
 80063f8:	9002      	str	r0, [sp, #8]
 80063fa:	9203      	str	r2, [sp, #12]
 80063fc:	42be      	cmp	r6, r7
 80063fe:	d830      	bhi.n	8006462 <__ssputs_r+0x76>
 8006400:	210c      	movs	r1, #12
 8006402:	5e62      	ldrsh	r2, [r4, r1]
 8006404:	2190      	movs	r1, #144	@ 0x90
 8006406:	00c9      	lsls	r1, r1, #3
 8006408:	420a      	tst	r2, r1
 800640a:	d028      	beq.n	800645e <__ssputs_r+0x72>
 800640c:	2003      	movs	r0, #3
 800640e:	6921      	ldr	r1, [r4, #16]
 8006410:	1a5b      	subs	r3, r3, r1
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6963      	ldr	r3, [r4, #20]
 8006416:	4343      	muls	r3, r0
 8006418:	9801      	ldr	r0, [sp, #4]
 800641a:	0fdd      	lsrs	r5, r3, #31
 800641c:	18ed      	adds	r5, r5, r3
 800641e:	1c7b      	adds	r3, r7, #1
 8006420:	181b      	adds	r3, r3, r0
 8006422:	106d      	asrs	r5, r5, #1
 8006424:	42ab      	cmp	r3, r5
 8006426:	d900      	bls.n	800642a <__ssputs_r+0x3e>
 8006428:	001d      	movs	r5, r3
 800642a:	0552      	lsls	r2, r2, #21
 800642c:	d528      	bpl.n	8006480 <__ssputs_r+0x94>
 800642e:	0029      	movs	r1, r5
 8006430:	9802      	ldr	r0, [sp, #8]
 8006432:	f7ff ff4b 	bl	80062cc <_malloc_r>
 8006436:	1e06      	subs	r6, r0, #0
 8006438:	d02c      	beq.n	8006494 <__ssputs_r+0xa8>
 800643a:	9a01      	ldr	r2, [sp, #4]
 800643c:	6921      	ldr	r1, [r4, #16]
 800643e:	f000 fae2 	bl	8006a06 <memcpy>
 8006442:	89a2      	ldrh	r2, [r4, #12]
 8006444:	4b18      	ldr	r3, [pc, #96]	@ (80064a8 <__ssputs_r+0xbc>)
 8006446:	401a      	ands	r2, r3
 8006448:	2380      	movs	r3, #128	@ 0x80
 800644a:	4313      	orrs	r3, r2
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	6126      	str	r6, [r4, #16]
 8006452:	18f6      	adds	r6, r6, r3
 8006454:	6026      	str	r6, [r4, #0]
 8006456:	003e      	movs	r6, r7
 8006458:	6165      	str	r5, [r4, #20]
 800645a:	1aed      	subs	r5, r5, r3
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	42be      	cmp	r6, r7
 8006460:	d900      	bls.n	8006464 <__ssputs_r+0x78>
 8006462:	003e      	movs	r6, r7
 8006464:	0032      	movs	r2, r6
 8006466:	9903      	ldr	r1, [sp, #12]
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	f000 fa9b 	bl	80069a4 <memmove>
 800646e:	2000      	movs	r0, #0
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	1b9b      	subs	r3, r3, r6
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	199b      	adds	r3, r3, r6
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	b005      	add	sp, #20
 800647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006480:	002a      	movs	r2, r5
 8006482:	9802      	ldr	r0, [sp, #8]
 8006484:	f000 fac8 	bl	8006a18 <_realloc_r>
 8006488:	1e06      	subs	r6, r0, #0
 800648a:	d1e0      	bne.n	800644e <__ssputs_r+0x62>
 800648c:	6921      	ldr	r1, [r4, #16]
 800648e:	9802      	ldr	r0, [sp, #8]
 8006490:	f7ff feb0 	bl	80061f4 <_free_r>
 8006494:	230c      	movs	r3, #12
 8006496:	2001      	movs	r0, #1
 8006498:	9a02      	ldr	r2, [sp, #8]
 800649a:	4240      	negs	r0, r0
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	89a2      	ldrh	r2, [r4, #12]
 80064a0:	3334      	adds	r3, #52	@ 0x34
 80064a2:	4313      	orrs	r3, r2
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	e7e9      	b.n	800647c <__ssputs_r+0x90>
 80064a8:	fffffb7f 	.word	0xfffffb7f

080064ac <_svfiprintf_r>:
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	b0a1      	sub	sp, #132	@ 0x84
 80064b0:	9003      	str	r0, [sp, #12]
 80064b2:	001d      	movs	r5, r3
 80064b4:	898b      	ldrh	r3, [r1, #12]
 80064b6:	000f      	movs	r7, r1
 80064b8:	0016      	movs	r6, r2
 80064ba:	061b      	lsls	r3, r3, #24
 80064bc:	d511      	bpl.n	80064e2 <_svfiprintf_r+0x36>
 80064be:	690b      	ldr	r3, [r1, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10e      	bne.n	80064e2 <_svfiprintf_r+0x36>
 80064c4:	2140      	movs	r1, #64	@ 0x40
 80064c6:	f7ff ff01 	bl	80062cc <_malloc_r>
 80064ca:	6038      	str	r0, [r7, #0]
 80064cc:	6138      	str	r0, [r7, #16]
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d105      	bne.n	80064de <_svfiprintf_r+0x32>
 80064d2:	230c      	movs	r3, #12
 80064d4:	9a03      	ldr	r2, [sp, #12]
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	2001      	movs	r0, #1
 80064da:	4240      	negs	r0, r0
 80064dc:	e0cf      	b.n	800667e <_svfiprintf_r+0x1d2>
 80064de:	2340      	movs	r3, #64	@ 0x40
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	2300      	movs	r3, #0
 80064e4:	ac08      	add	r4, sp, #32
 80064e6:	6163      	str	r3, [r4, #20]
 80064e8:	3320      	adds	r3, #32
 80064ea:	7663      	strb	r3, [r4, #25]
 80064ec:	3310      	adds	r3, #16
 80064ee:	76a3      	strb	r3, [r4, #26]
 80064f0:	9507      	str	r5, [sp, #28]
 80064f2:	0035      	movs	r5, r6
 80064f4:	782b      	ldrb	r3, [r5, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <_svfiprintf_r+0x52>
 80064fa:	2b25      	cmp	r3, #37	@ 0x25
 80064fc:	d148      	bne.n	8006590 <_svfiprintf_r+0xe4>
 80064fe:	1bab      	subs	r3, r5, r6
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	42b5      	cmp	r5, r6
 8006504:	d00b      	beq.n	800651e <_svfiprintf_r+0x72>
 8006506:	0032      	movs	r2, r6
 8006508:	0039      	movs	r1, r7
 800650a:	9803      	ldr	r0, [sp, #12]
 800650c:	f7ff ff6e 	bl	80063ec <__ssputs_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d100      	bne.n	8006516 <_svfiprintf_r+0x6a>
 8006514:	e0ae      	b.n	8006674 <_svfiprintf_r+0x1c8>
 8006516:	6963      	ldr	r3, [r4, #20]
 8006518:	9a05      	ldr	r2, [sp, #20]
 800651a:	189b      	adds	r3, r3, r2
 800651c:	6163      	str	r3, [r4, #20]
 800651e:	782b      	ldrb	r3, [r5, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d100      	bne.n	8006526 <_svfiprintf_r+0x7a>
 8006524:	e0a6      	b.n	8006674 <_svfiprintf_r+0x1c8>
 8006526:	2201      	movs	r2, #1
 8006528:	2300      	movs	r3, #0
 800652a:	4252      	negs	r2, r2
 800652c:	6062      	str	r2, [r4, #4]
 800652e:	a904      	add	r1, sp, #16
 8006530:	3254      	adds	r2, #84	@ 0x54
 8006532:	1852      	adds	r2, r2, r1
 8006534:	1c6e      	adds	r6, r5, #1
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	60e3      	str	r3, [r4, #12]
 800653a:	60a3      	str	r3, [r4, #8]
 800653c:	7013      	strb	r3, [r2, #0]
 800653e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006540:	4b54      	ldr	r3, [pc, #336]	@ (8006694 <_svfiprintf_r+0x1e8>)
 8006542:	2205      	movs	r2, #5
 8006544:	0018      	movs	r0, r3
 8006546:	7831      	ldrb	r1, [r6, #0]
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	f000 fa51 	bl	80069f0 <memchr>
 800654e:	1c75      	adds	r5, r6, #1
 8006550:	2800      	cmp	r0, #0
 8006552:	d11f      	bne.n	8006594 <_svfiprintf_r+0xe8>
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	06d3      	lsls	r3, r2, #27
 8006558:	d504      	bpl.n	8006564 <_svfiprintf_r+0xb8>
 800655a:	2353      	movs	r3, #83	@ 0x53
 800655c:	a904      	add	r1, sp, #16
 800655e:	185b      	adds	r3, r3, r1
 8006560:	2120      	movs	r1, #32
 8006562:	7019      	strb	r1, [r3, #0]
 8006564:	0713      	lsls	r3, r2, #28
 8006566:	d504      	bpl.n	8006572 <_svfiprintf_r+0xc6>
 8006568:	2353      	movs	r3, #83	@ 0x53
 800656a:	a904      	add	r1, sp, #16
 800656c:	185b      	adds	r3, r3, r1
 800656e:	212b      	movs	r1, #43	@ 0x2b
 8006570:	7019      	strb	r1, [r3, #0]
 8006572:	7833      	ldrb	r3, [r6, #0]
 8006574:	2b2a      	cmp	r3, #42	@ 0x2a
 8006576:	d016      	beq.n	80065a6 <_svfiprintf_r+0xfa>
 8006578:	0035      	movs	r5, r6
 800657a:	2100      	movs	r1, #0
 800657c:	200a      	movs	r0, #10
 800657e:	68e3      	ldr	r3, [r4, #12]
 8006580:	782a      	ldrb	r2, [r5, #0]
 8006582:	1c6e      	adds	r6, r5, #1
 8006584:	3a30      	subs	r2, #48	@ 0x30
 8006586:	2a09      	cmp	r2, #9
 8006588:	d950      	bls.n	800662c <_svfiprintf_r+0x180>
 800658a:	2900      	cmp	r1, #0
 800658c:	d111      	bne.n	80065b2 <_svfiprintf_r+0x106>
 800658e:	e017      	b.n	80065c0 <_svfiprintf_r+0x114>
 8006590:	3501      	adds	r5, #1
 8006592:	e7af      	b.n	80064f4 <_svfiprintf_r+0x48>
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	2301      	movs	r3, #1
 800659c:	4083      	lsls	r3, r0
 800659e:	4313      	orrs	r3, r2
 80065a0:	002e      	movs	r6, r5
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	e7cc      	b.n	8006540 <_svfiprintf_r+0x94>
 80065a6:	9b07      	ldr	r3, [sp, #28]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9107      	str	r1, [sp, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	db01      	blt.n	80065b6 <_svfiprintf_r+0x10a>
 80065b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065b4:	e004      	b.n	80065c0 <_svfiprintf_r+0x114>
 80065b6:	425b      	negs	r3, r3
 80065b8:	60e3      	str	r3, [r4, #12]
 80065ba:	2302      	movs	r3, #2
 80065bc:	4313      	orrs	r3, r2
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	782b      	ldrb	r3, [r5, #0]
 80065c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c4:	d10c      	bne.n	80065e0 <_svfiprintf_r+0x134>
 80065c6:	786b      	ldrb	r3, [r5, #1]
 80065c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ca:	d134      	bne.n	8006636 <_svfiprintf_r+0x18a>
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	3502      	adds	r5, #2
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	9207      	str	r2, [sp, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da01      	bge.n	80065de <_svfiprintf_r+0x132>
 80065da:	2301      	movs	r3, #1
 80065dc:	425b      	negs	r3, r3
 80065de:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e0:	4e2d      	ldr	r6, [pc, #180]	@ (8006698 <_svfiprintf_r+0x1ec>)
 80065e2:	2203      	movs	r2, #3
 80065e4:	0030      	movs	r0, r6
 80065e6:	7829      	ldrb	r1, [r5, #0]
 80065e8:	f000 fa02 	bl	80069f0 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d006      	beq.n	80065fe <_svfiprintf_r+0x152>
 80065f0:	2340      	movs	r3, #64	@ 0x40
 80065f2:	1b80      	subs	r0, r0, r6
 80065f4:	4083      	lsls	r3, r0
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	3501      	adds	r5, #1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	7829      	ldrb	r1, [r5, #0]
 8006600:	2206      	movs	r2, #6
 8006602:	4826      	ldr	r0, [pc, #152]	@ (800669c <_svfiprintf_r+0x1f0>)
 8006604:	1c6e      	adds	r6, r5, #1
 8006606:	7621      	strb	r1, [r4, #24]
 8006608:	f000 f9f2 	bl	80069f0 <memchr>
 800660c:	2800      	cmp	r0, #0
 800660e:	d038      	beq.n	8006682 <_svfiprintf_r+0x1d6>
 8006610:	4b23      	ldr	r3, [pc, #140]	@ (80066a0 <_svfiprintf_r+0x1f4>)
 8006612:	2b00      	cmp	r3, #0
 8006614:	d122      	bne.n	800665c <_svfiprintf_r+0x1b0>
 8006616:	2207      	movs	r2, #7
 8006618:	9b07      	ldr	r3, [sp, #28]
 800661a:	3307      	adds	r3, #7
 800661c:	4393      	bics	r3, r2
 800661e:	3308      	adds	r3, #8
 8006620:	9307      	str	r3, [sp, #28]
 8006622:	6963      	ldr	r3, [r4, #20]
 8006624:	9a04      	ldr	r2, [sp, #16]
 8006626:	189b      	adds	r3, r3, r2
 8006628:	6163      	str	r3, [r4, #20]
 800662a:	e762      	b.n	80064f2 <_svfiprintf_r+0x46>
 800662c:	4343      	muls	r3, r0
 800662e:	0035      	movs	r5, r6
 8006630:	2101      	movs	r1, #1
 8006632:	189b      	adds	r3, r3, r2
 8006634:	e7a4      	b.n	8006580 <_svfiprintf_r+0xd4>
 8006636:	2300      	movs	r3, #0
 8006638:	200a      	movs	r0, #10
 800663a:	0019      	movs	r1, r3
 800663c:	3501      	adds	r5, #1
 800663e:	6063      	str	r3, [r4, #4]
 8006640:	782a      	ldrb	r2, [r5, #0]
 8006642:	1c6e      	adds	r6, r5, #1
 8006644:	3a30      	subs	r2, #48	@ 0x30
 8006646:	2a09      	cmp	r2, #9
 8006648:	d903      	bls.n	8006652 <_svfiprintf_r+0x1a6>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0c8      	beq.n	80065e0 <_svfiprintf_r+0x134>
 800664e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006650:	e7c6      	b.n	80065e0 <_svfiprintf_r+0x134>
 8006652:	4341      	muls	r1, r0
 8006654:	0035      	movs	r5, r6
 8006656:	2301      	movs	r3, #1
 8006658:	1889      	adds	r1, r1, r2
 800665a:	e7f1      	b.n	8006640 <_svfiprintf_r+0x194>
 800665c:	aa07      	add	r2, sp, #28
 800665e:	9200      	str	r2, [sp, #0]
 8006660:	0021      	movs	r1, r4
 8006662:	003a      	movs	r2, r7
 8006664:	4b0f      	ldr	r3, [pc, #60]	@ (80066a4 <_svfiprintf_r+0x1f8>)
 8006666:	9803      	ldr	r0, [sp, #12]
 8006668:	e000      	b.n	800666c <_svfiprintf_r+0x1c0>
 800666a:	bf00      	nop
 800666c:	9004      	str	r0, [sp, #16]
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	d1d6      	bne.n	8006622 <_svfiprintf_r+0x176>
 8006674:	89bb      	ldrh	r3, [r7, #12]
 8006676:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006678:	065b      	lsls	r3, r3, #25
 800667a:	d500      	bpl.n	800667e <_svfiprintf_r+0x1d2>
 800667c:	e72c      	b.n	80064d8 <_svfiprintf_r+0x2c>
 800667e:	b021      	add	sp, #132	@ 0x84
 8006680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006682:	aa07      	add	r2, sp, #28
 8006684:	9200      	str	r2, [sp, #0]
 8006686:	0021      	movs	r1, r4
 8006688:	003a      	movs	r2, r7
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <_svfiprintf_r+0x1f8>)
 800668c:	9803      	ldr	r0, [sp, #12]
 800668e:	f000 f87b 	bl	8006788 <_printf_i>
 8006692:	e7eb      	b.n	800666c <_svfiprintf_r+0x1c0>
 8006694:	08006fd8 	.word	0x08006fd8
 8006698:	08006fde 	.word	0x08006fde
 800669c:	08006fe2 	.word	0x08006fe2
 80066a0:	00000000 	.word	0x00000000
 80066a4:	080063ed 	.word	0x080063ed

080066a8 <_printf_common>:
 80066a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066aa:	0016      	movs	r6, r2
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	688a      	ldr	r2, [r1, #8]
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	000c      	movs	r4, r1
 80066b4:	9000      	str	r0, [sp, #0]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	da00      	bge.n	80066bc <_printf_common+0x14>
 80066ba:	0013      	movs	r3, r2
 80066bc:	0022      	movs	r2, r4
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	3243      	adds	r2, #67	@ 0x43
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	d001      	beq.n	80066cc <_printf_common+0x24>
 80066c8:	3301      	adds	r3, #1
 80066ca:	6033      	str	r3, [r6, #0]
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	069b      	lsls	r3, r3, #26
 80066d0:	d502      	bpl.n	80066d8 <_printf_common+0x30>
 80066d2:	6833      	ldr	r3, [r6, #0]
 80066d4:	3302      	adds	r3, #2
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	2306      	movs	r3, #6
 80066dc:	0015      	movs	r5, r2
 80066de:	401d      	ands	r5, r3
 80066e0:	421a      	tst	r2, r3
 80066e2:	d027      	beq.n	8006734 <_printf_common+0x8c>
 80066e4:	0023      	movs	r3, r4
 80066e6:	3343      	adds	r3, #67	@ 0x43
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	1e5a      	subs	r2, r3, #1
 80066ec:	4193      	sbcs	r3, r2
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	0692      	lsls	r2, r2, #26
 80066f2:	d430      	bmi.n	8006756 <_printf_common+0xae>
 80066f4:	0022      	movs	r2, r4
 80066f6:	9901      	ldr	r1, [sp, #4]
 80066f8:	9800      	ldr	r0, [sp, #0]
 80066fa:	9d08      	ldr	r5, [sp, #32]
 80066fc:	3243      	adds	r2, #67	@ 0x43
 80066fe:	47a8      	blx	r5
 8006700:	3001      	adds	r0, #1
 8006702:	d025      	beq.n	8006750 <_printf_common+0xa8>
 8006704:	2206      	movs	r2, #6
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	2500      	movs	r5, #0
 800670a:	4013      	ands	r3, r2
 800670c:	2b04      	cmp	r3, #4
 800670e:	d105      	bne.n	800671c <_printf_common+0x74>
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	68e5      	ldr	r5, [r4, #12]
 8006714:	1aed      	subs	r5, r5, r3
 8006716:	43eb      	mvns	r3, r5
 8006718:	17db      	asrs	r3, r3, #31
 800671a:	401d      	ands	r5, r3
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	6922      	ldr	r2, [r4, #16]
 8006720:	4293      	cmp	r3, r2
 8006722:	dd01      	ble.n	8006728 <_printf_common+0x80>
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	18ed      	adds	r5, r5, r3
 8006728:	2600      	movs	r6, #0
 800672a:	42b5      	cmp	r5, r6
 800672c:	d120      	bne.n	8006770 <_printf_common+0xc8>
 800672e:	2000      	movs	r0, #0
 8006730:	e010      	b.n	8006754 <_printf_common+0xac>
 8006732:	3501      	adds	r5, #1
 8006734:	68e3      	ldr	r3, [r4, #12]
 8006736:	6832      	ldr	r2, [r6, #0]
 8006738:	1a9b      	subs	r3, r3, r2
 800673a:	42ab      	cmp	r3, r5
 800673c:	ddd2      	ble.n	80066e4 <_printf_common+0x3c>
 800673e:	0022      	movs	r2, r4
 8006740:	2301      	movs	r3, #1
 8006742:	9901      	ldr	r1, [sp, #4]
 8006744:	9800      	ldr	r0, [sp, #0]
 8006746:	9f08      	ldr	r7, [sp, #32]
 8006748:	3219      	adds	r2, #25
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	d1f0      	bne.n	8006732 <_printf_common+0x8a>
 8006750:	2001      	movs	r0, #1
 8006752:	4240      	negs	r0, r0
 8006754:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006756:	2030      	movs	r0, #48	@ 0x30
 8006758:	18e1      	adds	r1, r4, r3
 800675a:	3143      	adds	r1, #67	@ 0x43
 800675c:	7008      	strb	r0, [r1, #0]
 800675e:	0021      	movs	r1, r4
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	3145      	adds	r1, #69	@ 0x45
 8006764:	7809      	ldrb	r1, [r1, #0]
 8006766:	18a2      	adds	r2, r4, r2
 8006768:	3243      	adds	r2, #67	@ 0x43
 800676a:	3302      	adds	r3, #2
 800676c:	7011      	strb	r1, [r2, #0]
 800676e:	e7c1      	b.n	80066f4 <_printf_common+0x4c>
 8006770:	0022      	movs	r2, r4
 8006772:	2301      	movs	r3, #1
 8006774:	9901      	ldr	r1, [sp, #4]
 8006776:	9800      	ldr	r0, [sp, #0]
 8006778:	9f08      	ldr	r7, [sp, #32]
 800677a:	321a      	adds	r2, #26
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa8>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d1      	b.n	800672a <_printf_common+0x82>
	...

08006788 <_printf_i>:
 8006788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678a:	b08b      	sub	sp, #44	@ 0x2c
 800678c:	9206      	str	r2, [sp, #24]
 800678e:	000a      	movs	r2, r1
 8006790:	3243      	adds	r2, #67	@ 0x43
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	9005      	str	r0, [sp, #20]
 8006796:	9203      	str	r2, [sp, #12]
 8006798:	7e0a      	ldrb	r2, [r1, #24]
 800679a:	000c      	movs	r4, r1
 800679c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800679e:	2a78      	cmp	r2, #120	@ 0x78
 80067a0:	d809      	bhi.n	80067b6 <_printf_i+0x2e>
 80067a2:	2a62      	cmp	r2, #98	@ 0x62
 80067a4:	d80b      	bhi.n	80067be <_printf_i+0x36>
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	d100      	bne.n	80067ac <_printf_i+0x24>
 80067aa:	e0bc      	b.n	8006926 <_printf_i+0x19e>
 80067ac:	497b      	ldr	r1, [pc, #492]	@ (800699c <_printf_i+0x214>)
 80067ae:	9104      	str	r1, [sp, #16]
 80067b0:	2a58      	cmp	r2, #88	@ 0x58
 80067b2:	d100      	bne.n	80067b6 <_printf_i+0x2e>
 80067b4:	e090      	b.n	80068d8 <_printf_i+0x150>
 80067b6:	0025      	movs	r5, r4
 80067b8:	3542      	adds	r5, #66	@ 0x42
 80067ba:	702a      	strb	r2, [r5, #0]
 80067bc:	e022      	b.n	8006804 <_printf_i+0x7c>
 80067be:	0010      	movs	r0, r2
 80067c0:	3863      	subs	r0, #99	@ 0x63
 80067c2:	2815      	cmp	r0, #21
 80067c4:	d8f7      	bhi.n	80067b6 <_printf_i+0x2e>
 80067c6:	f7f9 fca7 	bl	8000118 <__gnu_thumb1_case_shi>
 80067ca:	0016      	.short	0x0016
 80067cc:	fff6001f 	.word	0xfff6001f
 80067d0:	fff6fff6 	.word	0xfff6fff6
 80067d4:	001ffff6 	.word	0x001ffff6
 80067d8:	fff6fff6 	.word	0xfff6fff6
 80067dc:	fff6fff6 	.word	0xfff6fff6
 80067e0:	003600a1 	.word	0x003600a1
 80067e4:	fff60080 	.word	0xfff60080
 80067e8:	00b2fff6 	.word	0x00b2fff6
 80067ec:	0036fff6 	.word	0x0036fff6
 80067f0:	fff6fff6 	.word	0xfff6fff6
 80067f4:	0084      	.short	0x0084
 80067f6:	0025      	movs	r5, r4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	3542      	adds	r5, #66	@ 0x42
 80067fc:	1d11      	adds	r1, r2, #4
 80067fe:	6019      	str	r1, [r3, #0]
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	702b      	strb	r3, [r5, #0]
 8006804:	2301      	movs	r3, #1
 8006806:	e0a0      	b.n	800694a <_printf_i+0x1c2>
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	6809      	ldr	r1, [r1, #0]
 800680c:	1d02      	adds	r2, r0, #4
 800680e:	060d      	lsls	r5, r1, #24
 8006810:	d50b      	bpl.n	800682a <_printf_i+0xa2>
 8006812:	6806      	ldr	r6, [r0, #0]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	2e00      	cmp	r6, #0
 8006818:	da03      	bge.n	8006822 <_printf_i+0x9a>
 800681a:	232d      	movs	r3, #45	@ 0x2d
 800681c:	9a03      	ldr	r2, [sp, #12]
 800681e:	4276      	negs	r6, r6
 8006820:	7013      	strb	r3, [r2, #0]
 8006822:	4b5e      	ldr	r3, [pc, #376]	@ (800699c <_printf_i+0x214>)
 8006824:	270a      	movs	r7, #10
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	e018      	b.n	800685c <_printf_i+0xd4>
 800682a:	6806      	ldr	r6, [r0, #0]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	0649      	lsls	r1, r1, #25
 8006830:	d5f1      	bpl.n	8006816 <_printf_i+0x8e>
 8006832:	b236      	sxth	r6, r6
 8006834:	e7ef      	b.n	8006816 <_printf_i+0x8e>
 8006836:	6808      	ldr	r0, [r1, #0]
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	c940      	ldmia	r1!, {r6}
 800683c:	0605      	lsls	r5, r0, #24
 800683e:	d402      	bmi.n	8006846 <_printf_i+0xbe>
 8006840:	0640      	lsls	r0, r0, #25
 8006842:	d500      	bpl.n	8006846 <_printf_i+0xbe>
 8006844:	b2b6      	uxth	r6, r6
 8006846:	6019      	str	r1, [r3, #0]
 8006848:	4b54      	ldr	r3, [pc, #336]	@ (800699c <_printf_i+0x214>)
 800684a:	270a      	movs	r7, #10
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006850:	d100      	bne.n	8006854 <_printf_i+0xcc>
 8006852:	3f02      	subs	r7, #2
 8006854:	0023      	movs	r3, r4
 8006856:	2200      	movs	r2, #0
 8006858:	3343      	adds	r3, #67	@ 0x43
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6863      	ldr	r3, [r4, #4]
 800685e:	60a3      	str	r3, [r4, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	db03      	blt.n	800686c <_printf_i+0xe4>
 8006864:	2104      	movs	r1, #4
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	438a      	bics	r2, r1
 800686a:	6022      	str	r2, [r4, #0]
 800686c:	2e00      	cmp	r6, #0
 800686e:	d102      	bne.n	8006876 <_printf_i+0xee>
 8006870:	9d03      	ldr	r5, [sp, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <_printf_i+0x108>
 8006876:	9d03      	ldr	r5, [sp, #12]
 8006878:	0030      	movs	r0, r6
 800687a:	0039      	movs	r1, r7
 800687c:	f7f9 fcdc 	bl	8000238 <__aeabi_uidivmod>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	3d01      	subs	r5, #1
 8006884:	5c5b      	ldrb	r3, [r3, r1]
 8006886:	702b      	strb	r3, [r5, #0]
 8006888:	0033      	movs	r3, r6
 800688a:	0006      	movs	r6, r0
 800688c:	429f      	cmp	r7, r3
 800688e:	d9f3      	bls.n	8006878 <_printf_i+0xf0>
 8006890:	2f08      	cmp	r7, #8
 8006892:	d109      	bne.n	80068a8 <_printf_i+0x120>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d506      	bpl.n	80068a8 <_printf_i+0x120>
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	dc02      	bgt.n	80068a8 <_printf_i+0x120>
 80068a2:	2330      	movs	r3, #48	@ 0x30
 80068a4:	3d01      	subs	r5, #1
 80068a6:	702b      	strb	r3, [r5, #0]
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	1b5b      	subs	r3, r3, r5
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	0021      	movs	r1, r4
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	9805      	ldr	r0, [sp, #20]
 80068b6:	9b06      	ldr	r3, [sp, #24]
 80068b8:	aa09      	add	r2, sp, #36	@ 0x24
 80068ba:	f7ff fef5 	bl	80066a8 <_printf_common>
 80068be:	3001      	adds	r0, #1
 80068c0:	d148      	bne.n	8006954 <_printf_i+0x1cc>
 80068c2:	2001      	movs	r0, #1
 80068c4:	4240      	negs	r0, r0
 80068c6:	b00b      	add	sp, #44	@ 0x2c
 80068c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ca:	2220      	movs	r2, #32
 80068cc:	6809      	ldr	r1, [r1, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	2278      	movs	r2, #120	@ 0x78
 80068d4:	4932      	ldr	r1, [pc, #200]	@ (80069a0 <_printf_i+0x218>)
 80068d6:	9104      	str	r1, [sp, #16]
 80068d8:	0021      	movs	r1, r4
 80068da:	3145      	adds	r1, #69	@ 0x45
 80068dc:	700a      	strb	r2, [r1, #0]
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	c940      	ldmia	r1!, {r6}
 80068e4:	0610      	lsls	r0, r2, #24
 80068e6:	d402      	bmi.n	80068ee <_printf_i+0x166>
 80068e8:	0650      	lsls	r0, r2, #25
 80068ea:	d500      	bpl.n	80068ee <_printf_i+0x166>
 80068ec:	b2b6      	uxth	r6, r6
 80068ee:	6019      	str	r1, [r3, #0]
 80068f0:	07d3      	lsls	r3, r2, #31
 80068f2:	d502      	bpl.n	80068fa <_printf_i+0x172>
 80068f4:	2320      	movs	r3, #32
 80068f6:	4313      	orrs	r3, r2
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	d001      	beq.n	8006902 <_printf_i+0x17a>
 80068fe:	2710      	movs	r7, #16
 8006900:	e7a8      	b.n	8006854 <_printf_i+0xcc>
 8006902:	2220      	movs	r2, #32
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	4393      	bics	r3, r2
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	e7f8      	b.n	80068fe <_printf_i+0x176>
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	680d      	ldr	r5, [r1, #0]
 8006910:	1d10      	adds	r0, r2, #4
 8006912:	6949      	ldr	r1, [r1, #20]
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	062e      	lsls	r6, r5, #24
 800691a:	d501      	bpl.n	8006920 <_printf_i+0x198>
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0x19e>
 8006920:	066d      	lsls	r5, r5, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0x194>
 8006924:	8019      	strh	r1, [r3, #0]
 8006926:	2300      	movs	r3, #0
 8006928:	9d03      	ldr	r5, [sp, #12]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	e7bf      	b.n	80068ae <_printf_i+0x126>
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	1d11      	adds	r1, r2, #4
 8006932:	6019      	str	r1, [r3, #0]
 8006934:	6815      	ldr	r5, [r2, #0]
 8006936:	2100      	movs	r1, #0
 8006938:	0028      	movs	r0, r5
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	f000 f858 	bl	80069f0 <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d001      	beq.n	8006948 <_printf_i+0x1c0>
 8006944:	1b40      	subs	r0, r0, r5
 8006946:	6060      	str	r0, [r4, #4]
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	2300      	movs	r3, #0
 800694e:	9a03      	ldr	r2, [sp, #12]
 8006950:	7013      	strb	r3, [r2, #0]
 8006952:	e7ac      	b.n	80068ae <_printf_i+0x126>
 8006954:	002a      	movs	r2, r5
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	9906      	ldr	r1, [sp, #24]
 800695a:	9805      	ldr	r0, [sp, #20]
 800695c:	9d07      	ldr	r5, [sp, #28]
 800695e:	47a8      	blx	r5
 8006960:	3001      	adds	r0, #1
 8006962:	d0ae      	beq.n	80068c2 <_printf_i+0x13a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d415      	bmi.n	8006996 <_printf_i+0x20e>
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	68e0      	ldr	r0, [r4, #12]
 800696e:	4298      	cmp	r0, r3
 8006970:	daa9      	bge.n	80068c6 <_printf_i+0x13e>
 8006972:	0018      	movs	r0, r3
 8006974:	e7a7      	b.n	80068c6 <_printf_i+0x13e>
 8006976:	0022      	movs	r2, r4
 8006978:	2301      	movs	r3, #1
 800697a:	9906      	ldr	r1, [sp, #24]
 800697c:	9805      	ldr	r0, [sp, #20]
 800697e:	9e07      	ldr	r6, [sp, #28]
 8006980:	3219      	adds	r2, #25
 8006982:	47b0      	blx	r6
 8006984:	3001      	adds	r0, #1
 8006986:	d09c      	beq.n	80068c2 <_printf_i+0x13a>
 8006988:	3501      	adds	r5, #1
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dcf0      	bgt.n	8006976 <_printf_i+0x1ee>
 8006994:	e7e9      	b.n	800696a <_printf_i+0x1e2>
 8006996:	2500      	movs	r5, #0
 8006998:	e7f7      	b.n	800698a <_printf_i+0x202>
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	08006fe9 	.word	0x08006fe9
 80069a0:	08006ffa 	.word	0x08006ffa

080069a4 <memmove>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4288      	cmp	r0, r1
 80069a8:	d806      	bhi.n	80069b8 <memmove+0x14>
 80069aa:	2300      	movs	r3, #0
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d008      	beq.n	80069c2 <memmove+0x1e>
 80069b0:	5ccc      	ldrb	r4, [r1, r3]
 80069b2:	54c4      	strb	r4, [r0, r3]
 80069b4:	3301      	adds	r3, #1
 80069b6:	e7f9      	b.n	80069ac <memmove+0x8>
 80069b8:	188b      	adds	r3, r1, r2
 80069ba:	4298      	cmp	r0, r3
 80069bc:	d2f5      	bcs.n	80069aa <memmove+0x6>
 80069be:	3a01      	subs	r2, #1
 80069c0:	d200      	bcs.n	80069c4 <memmove+0x20>
 80069c2:	bd10      	pop	{r4, pc}
 80069c4:	5c8b      	ldrb	r3, [r1, r2]
 80069c6:	5483      	strb	r3, [r0, r2]
 80069c8:	e7f9      	b.n	80069be <memmove+0x1a>
	...

080069cc <_sbrk_r>:
 80069cc:	2300      	movs	r3, #0
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	4d06      	ldr	r5, [pc, #24]	@ (80069ec <_sbrk_r+0x20>)
 80069d2:	0004      	movs	r4, r0
 80069d4:	0008      	movs	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fc ff68 	bl	80038ac <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d103      	bne.n	80069e8 <_sbrk_r+0x1c>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d000      	beq.n	80069e8 <_sbrk_r+0x1c>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	200002b0 	.word	0x200002b0

080069f0 <memchr>:
 80069f0:	b2c9      	uxtb	r1, r1
 80069f2:	1882      	adds	r2, r0, r2
 80069f4:	4290      	cmp	r0, r2
 80069f6:	d101      	bne.n	80069fc <memchr+0xc>
 80069f8:	2000      	movs	r0, #0
 80069fa:	4770      	bx	lr
 80069fc:	7803      	ldrb	r3, [r0, #0]
 80069fe:	428b      	cmp	r3, r1
 8006a00:	d0fb      	beq.n	80069fa <memchr+0xa>
 8006a02:	3001      	adds	r0, #1
 8006a04:	e7f6      	b.n	80069f4 <memchr+0x4>

08006a06 <memcpy>:
 8006a06:	2300      	movs	r3, #0
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d100      	bne.n	8006a10 <memcpy+0xa>
 8006a0e:	bd10      	pop	{r4, pc}
 8006a10:	5ccc      	ldrb	r4, [r1, r3]
 8006a12:	54c4      	strb	r4, [r0, r3]
 8006a14:	3301      	adds	r3, #1
 8006a16:	e7f8      	b.n	8006a0a <memcpy+0x4>

08006a18 <_realloc_r>:
 8006a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1a:	0006      	movs	r6, r0
 8006a1c:	000c      	movs	r4, r1
 8006a1e:	0015      	movs	r5, r2
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d105      	bne.n	8006a30 <_realloc_r+0x18>
 8006a24:	0011      	movs	r1, r2
 8006a26:	f7ff fc51 	bl	80062cc <_malloc_r>
 8006a2a:	0004      	movs	r4, r0
 8006a2c:	0020      	movs	r0, r4
 8006a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d103      	bne.n	8006a3c <_realloc_r+0x24>
 8006a34:	f7ff fbde 	bl	80061f4 <_free_r>
 8006a38:	2400      	movs	r4, #0
 8006a3a:	e7f7      	b.n	8006a2c <_realloc_r+0x14>
 8006a3c:	f000 f81b 	bl	8006a76 <_malloc_usable_size_r>
 8006a40:	0007      	movs	r7, r0
 8006a42:	4285      	cmp	r5, r0
 8006a44:	d802      	bhi.n	8006a4c <_realloc_r+0x34>
 8006a46:	0843      	lsrs	r3, r0, #1
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	d3ef      	bcc.n	8006a2c <_realloc_r+0x14>
 8006a4c:	0029      	movs	r1, r5
 8006a4e:	0030      	movs	r0, r6
 8006a50:	f7ff fc3c 	bl	80062cc <_malloc_r>
 8006a54:	9001      	str	r0, [sp, #4]
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0ee      	beq.n	8006a38 <_realloc_r+0x20>
 8006a5a:	002a      	movs	r2, r5
 8006a5c:	42bd      	cmp	r5, r7
 8006a5e:	d900      	bls.n	8006a62 <_realloc_r+0x4a>
 8006a60:	003a      	movs	r2, r7
 8006a62:	0021      	movs	r1, r4
 8006a64:	9801      	ldr	r0, [sp, #4]
 8006a66:	f7ff ffce 	bl	8006a06 <memcpy>
 8006a6a:	0021      	movs	r1, r4
 8006a6c:	0030      	movs	r0, r6
 8006a6e:	f7ff fbc1 	bl	80061f4 <_free_r>
 8006a72:	9c01      	ldr	r4, [sp, #4]
 8006a74:	e7da      	b.n	8006a2c <_realloc_r+0x14>

08006a76 <_malloc_usable_size_r>:
 8006a76:	1f0b      	subs	r3, r1, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	1f18      	subs	r0, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da01      	bge.n	8006a84 <_malloc_usable_size_r+0xe>
 8006a80:	580b      	ldr	r3, [r1, r0]
 8006a82:	18c0      	adds	r0, r0, r3
 8006a84:	4770      	bx	lr
	...

08006a88 <log>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	0004      	movs	r4, r0
 8006a8c:	000d      	movs	r5, r1
 8006a8e:	f000 f837 	bl	8006b00 <__ieee754_log>
 8006a92:	0022      	movs	r2, r4
 8006a94:	0006      	movs	r6, r0
 8006a96:	000f      	movs	r7, r1
 8006a98:	002b      	movs	r3, r5
 8006a9a:	0020      	movs	r0, r4
 8006a9c:	0029      	movs	r1, r5
 8006a9e:	f7fc fa3f 	bl	8002f20 <__aeabi_dcmpun>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d115      	bne.n	8006ad2 <log+0x4a>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	0020      	movs	r0, r4
 8006aac:	0029      	movs	r1, r5
 8006aae:	f7f9 fcdd 	bl	800046c <__aeabi_dcmpgt>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d10d      	bne.n	8006ad2 <log+0x4a>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	0020      	movs	r0, r4
 8006abc:	0029      	movs	r1, r5
 8006abe:	f7f9 fcbb 	bl	8000438 <__aeabi_dcmpeq>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d008      	beq.n	8006ad8 <log+0x50>
 8006ac6:	f7ff fb69 	bl	800619c <__errno>
 8006aca:	2322      	movs	r3, #34	@ 0x22
 8006acc:	2600      	movs	r6, #0
 8006ace:	4f07      	ldr	r7, [pc, #28]	@ (8006aec <log+0x64>)
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	0030      	movs	r0, r6
 8006ad4:	0039      	movs	r1, r7
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad8:	f7ff fb60 	bl	800619c <__errno>
 8006adc:	2321      	movs	r3, #33	@ 0x21
 8006ade:	6003      	str	r3, [r0, #0]
 8006ae0:	4803      	ldr	r0, [pc, #12]	@ (8006af0 <log+0x68>)
 8006ae2:	f000 f807 	bl	8006af4 <nan>
 8006ae6:	0006      	movs	r6, r0
 8006ae8:	000f      	movs	r7, r1
 8006aea:	e7f2      	b.n	8006ad2 <log+0x4a>
 8006aec:	fff00000 	.word	0xfff00000
 8006af0:	08006fdd 	.word	0x08006fdd

08006af4 <nan>:
 8006af4:	2000      	movs	r0, #0
 8006af6:	4901      	ldr	r1, [pc, #4]	@ (8006afc <nan+0x8>)
 8006af8:	4770      	bx	lr
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	7ff80000 	.word	0x7ff80000

08006b00 <__ieee754_log>:
 8006b00:	2380      	movs	r3, #128	@ 0x80
 8006b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b04:	035b      	lsls	r3, r3, #13
 8006b06:	000e      	movs	r6, r1
 8006b08:	b08d      	sub	sp, #52	@ 0x34
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	da23      	bge.n	8006b56 <__ieee754_log+0x56>
 8006b0e:	004b      	lsls	r3, r1, #1
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	4303      	orrs	r3, r0
 8006b14:	d107      	bne.n	8006b26 <__ieee754_log+0x26>
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	49b4      	ldr	r1, [pc, #720]	@ (8006df0 <__ieee754_log+0x2f0>)
 8006b1e:	f7fa ff57 	bl	80019d0 <__aeabi_ddiv>
 8006b22:	b00d      	add	sp, #52	@ 0x34
 8006b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b26:	2900      	cmp	r1, #0
 8006b28:	da06      	bge.n	8006b38 <__ieee754_log+0x38>
 8006b2a:	0002      	movs	r2, r0
 8006b2c:	000b      	movs	r3, r1
 8006b2e:	f7fb fe5b 	bl	80027e8 <__aeabi_dsub>
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	e7f2      	b.n	8006b1e <__ieee754_log+0x1e>
 8006b38:	4bae      	ldr	r3, [pc, #696]	@ (8006df4 <__ieee754_log+0x2f4>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7fb fb8c 	bl	8002258 <__aeabi_dmul>
 8006b40:	2336      	movs	r3, #54	@ 0x36
 8006b42:	000e      	movs	r6, r1
 8006b44:	425b      	negs	r3, r3
 8006b46:	4aac      	ldr	r2, [pc, #688]	@ (8006df8 <__ieee754_log+0x2f8>)
 8006b48:	4296      	cmp	r6, r2
 8006b4a:	dd06      	ble.n	8006b5a <__ieee754_log+0x5a>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	000b      	movs	r3, r1
 8006b50:	f7fa fbda 	bl	8001308 <__aeabi_dadd>
 8006b54:	e7e5      	b.n	8006b22 <__ieee754_log+0x22>
 8006b56:	2300      	movs	r3, #0
 8006b58:	e7f5      	b.n	8006b46 <__ieee754_log+0x46>
 8006b5a:	4ca8      	ldr	r4, [pc, #672]	@ (8006dfc <__ieee754_log+0x2fc>)
 8006b5c:	1532      	asrs	r2, r6, #20
 8006b5e:	1912      	adds	r2, r2, r4
 8006b60:	0336      	lsls	r6, r6, #12
 8006b62:	4ca7      	ldr	r4, [pc, #668]	@ (8006e00 <__ieee754_log+0x300>)
 8006b64:	18d2      	adds	r2, r2, r3
 8006b66:	0b33      	lsrs	r3, r6, #12
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	191b      	adds	r3, r3, r4
 8006b6c:	2480      	movs	r4, #128	@ 0x80
 8006b6e:	0364      	lsls	r4, r4, #13
 8006b70:	4023      	ands	r3, r4
 8006b72:	4ca4      	ldr	r4, [pc, #656]	@ (8006e04 <__ieee754_log+0x304>)
 8006b74:	9d02      	ldr	r5, [sp, #8]
 8006b76:	405c      	eors	r4, r3
 8006b78:	151b      	asrs	r3, r3, #20
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	4325      	orrs	r5, r4
 8006b7e:	2200      	movs	r2, #0
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	0029      	movs	r1, r5
 8006b84:	4b9f      	ldr	r3, [pc, #636]	@ (8006e04 <__ieee754_log+0x304>)
 8006b86:	f7fb fe2f 	bl	80027e8 <__aeabi_dsub>
 8006b8a:	9b02      	ldr	r3, [sp, #8]
 8006b8c:	0006      	movs	r6, r0
 8006b8e:	3302      	adds	r3, #2
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	000f      	movs	r7, r1
 8006b94:	2200      	movs	r2, #0
 8006b96:	0b1b      	lsrs	r3, r3, #12
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	dc64      	bgt.n	8006c66 <__ieee754_log+0x166>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f7f9 fc4b 	bl	8000438 <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d019      	beq.n	8006bda <__ieee754_log+0xda>
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d100      	bne.n	8006bae <__ieee754_log+0xae>
 8006bac:	e11c      	b.n	8006de8 <__ieee754_log+0x2e8>
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fc f9d8 	bl	8002f64 <__aeabi_i2d>
 8006bb4:	4a94      	ldr	r2, [pc, #592]	@ (8006e08 <__ieee754_log+0x308>)
 8006bb6:	4b95      	ldr	r3, [pc, #596]	@ (8006e0c <__ieee754_log+0x30c>)
 8006bb8:	0004      	movs	r4, r0
 8006bba:	000d      	movs	r5, r1
 8006bbc:	f7fb fb4c 	bl	8002258 <__aeabi_dmul>
 8006bc0:	4a93      	ldr	r2, [pc, #588]	@ (8006e10 <__ieee754_log+0x310>)
 8006bc2:	0006      	movs	r6, r0
 8006bc4:	000f      	movs	r7, r1
 8006bc6:	4b93      	ldr	r3, [pc, #588]	@ (8006e14 <__ieee754_log+0x314>)
 8006bc8:	0020      	movs	r0, r4
 8006bca:	0029      	movs	r1, r5
 8006bcc:	f7fb fb44 	bl	8002258 <__aeabi_dmul>
 8006bd0:	0002      	movs	r2, r0
 8006bd2:	000b      	movs	r3, r1
 8006bd4:	0030      	movs	r0, r6
 8006bd6:	0039      	movs	r1, r7
 8006bd8:	e7ba      	b.n	8006b50 <__ieee754_log+0x50>
 8006bda:	4a8f      	ldr	r2, [pc, #572]	@ (8006e18 <__ieee754_log+0x318>)
 8006bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8006e1c <__ieee754_log+0x31c>)
 8006bde:	0030      	movs	r0, r6
 8006be0:	0039      	movs	r1, r7
 8006be2:	f7fb fb39 	bl	8002258 <__aeabi_dmul>
 8006be6:	0002      	movs	r2, r0
 8006be8:	000b      	movs	r3, r1
 8006bea:	2000      	movs	r0, #0
 8006bec:	498c      	ldr	r1, [pc, #560]	@ (8006e20 <__ieee754_log+0x320>)
 8006bee:	f7fb fdfb 	bl	80027e8 <__aeabi_dsub>
 8006bf2:	0032      	movs	r2, r6
 8006bf4:	0004      	movs	r4, r0
 8006bf6:	000d      	movs	r5, r1
 8006bf8:	003b      	movs	r3, r7
 8006bfa:	0030      	movs	r0, r6
 8006bfc:	0039      	movs	r1, r7
 8006bfe:	f7fb fb2b 	bl	8002258 <__aeabi_dmul>
 8006c02:	000b      	movs	r3, r1
 8006c04:	0002      	movs	r2, r0
 8006c06:	0029      	movs	r1, r5
 8006c08:	0020      	movs	r0, r4
 8006c0a:	f7fb fb25 	bl	8002258 <__aeabi_dmul>
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	9002      	str	r0, [sp, #8]
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <__ieee754_log+0x126>
 8006c18:	0002      	movs	r2, r0
 8006c1a:	000b      	movs	r3, r1
 8006c1c:	0030      	movs	r0, r6
 8006c1e:	0039      	movs	r1, r7
 8006c20:	f7fb fde2 	bl	80027e8 <__aeabi_dsub>
 8006c24:	e77d      	b.n	8006b22 <__ieee754_log+0x22>
 8006c26:	9800      	ldr	r0, [sp, #0]
 8006c28:	f7fc f99c 	bl	8002f64 <__aeabi_i2d>
 8006c2c:	4a76      	ldr	r2, [pc, #472]	@ (8006e08 <__ieee754_log+0x308>)
 8006c2e:	4b77      	ldr	r3, [pc, #476]	@ (8006e0c <__ieee754_log+0x30c>)
 8006c30:	0004      	movs	r4, r0
 8006c32:	000d      	movs	r5, r1
 8006c34:	f7fb fb10 	bl	8002258 <__aeabi_dmul>
 8006c38:	4a75      	ldr	r2, [pc, #468]	@ (8006e10 <__ieee754_log+0x310>)
 8006c3a:	9000      	str	r0, [sp, #0]
 8006c3c:	9101      	str	r1, [sp, #4]
 8006c3e:	4b75      	ldr	r3, [pc, #468]	@ (8006e14 <__ieee754_log+0x314>)
 8006c40:	0020      	movs	r0, r4
 8006c42:	0029      	movs	r1, r5
 8006c44:	f7fb fb08 	bl	8002258 <__aeabi_dmul>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	000b      	movs	r3, r1
 8006c4c:	9802      	ldr	r0, [sp, #8]
 8006c4e:	9903      	ldr	r1, [sp, #12]
 8006c50:	f7fb fdca 	bl	80027e8 <__aeabi_dsub>
 8006c54:	0032      	movs	r2, r6
 8006c56:	003b      	movs	r3, r7
 8006c58:	f7fb fdc6 	bl	80027e8 <__aeabi_dsub>
 8006c5c:	0002      	movs	r2, r0
 8006c5e:	000b      	movs	r3, r1
 8006c60:	9800      	ldr	r0, [sp, #0]
 8006c62:	9901      	ldr	r1, [sp, #4]
 8006c64:	e7dc      	b.n	8006c20 <__ieee754_log+0x120>
 8006c66:	2380      	movs	r3, #128	@ 0x80
 8006c68:	05db      	lsls	r3, r3, #23
 8006c6a:	f7fa fb4d 	bl	8001308 <__aeabi_dadd>
 8006c6e:	0002      	movs	r2, r0
 8006c70:	000b      	movs	r3, r1
 8006c72:	0030      	movs	r0, r6
 8006c74:	0039      	movs	r1, r7
 8006c76:	f7fa feab 	bl	80019d0 <__aeabi_ddiv>
 8006c7a:	9004      	str	r0, [sp, #16]
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	9800      	ldr	r0, [sp, #0]
 8006c80:	f7fc f970 	bl	8002f64 <__aeabi_i2d>
 8006c84:	9a04      	ldr	r2, [sp, #16]
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	9006      	str	r0, [sp, #24]
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	0019      	movs	r1, r3
 8006c90:	f7fb fae2 	bl	8002258 <__aeabi_dmul>
 8006c94:	4a63      	ldr	r2, [pc, #396]	@ (8006e24 <__ieee754_log+0x324>)
 8006c96:	9b02      	ldr	r3, [sp, #8]
 8006c98:	4694      	mov	ip, r2
 8006c9a:	4463      	add	r3, ip
 8006c9c:	0002      	movs	r2, r0
 8006c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca0:	000b      	movs	r3, r1
 8006ca2:	9008      	str	r0, [sp, #32]
 8006ca4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ca6:	f7fb fad7 	bl	8002258 <__aeabi_dmul>
 8006caa:	0004      	movs	r4, r0
 8006cac:	000d      	movs	r5, r1
 8006cae:	4a5e      	ldr	r2, [pc, #376]	@ (8006e28 <__ieee754_log+0x328>)
 8006cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8006e2c <__ieee754_log+0x32c>)
 8006cb2:	f7fb fad1 	bl	8002258 <__aeabi_dmul>
 8006cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e30 <__ieee754_log+0x330>)
 8006cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8006e34 <__ieee754_log+0x334>)
 8006cba:	f7fa fb25 	bl	8001308 <__aeabi_dadd>
 8006cbe:	0022      	movs	r2, r4
 8006cc0:	002b      	movs	r3, r5
 8006cc2:	f7fb fac9 	bl	8002258 <__aeabi_dmul>
 8006cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8006e38 <__ieee754_log+0x338>)
 8006cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8006e3c <__ieee754_log+0x33c>)
 8006cca:	f7fa fb1d 	bl	8001308 <__aeabi_dadd>
 8006cce:	0022      	movs	r2, r4
 8006cd0:	002b      	movs	r3, r5
 8006cd2:	f7fb fac1 	bl	8002258 <__aeabi_dmul>
 8006cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8006e40 <__ieee754_log+0x340>)
 8006cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8006e44 <__ieee754_log+0x344>)
 8006cda:	f7fa fb15 	bl	8001308 <__aeabi_dadd>
 8006cde:	9a08      	ldr	r2, [sp, #32]
 8006ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce2:	f7fb fab9 	bl	8002258 <__aeabi_dmul>
 8006ce6:	4a58      	ldr	r2, [pc, #352]	@ (8006e48 <__ieee754_log+0x348>)
 8006ce8:	9008      	str	r0, [sp, #32]
 8006cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cec:	4b57      	ldr	r3, [pc, #348]	@ (8006e4c <__ieee754_log+0x34c>)
 8006cee:	0020      	movs	r0, r4
 8006cf0:	0029      	movs	r1, r5
 8006cf2:	f7fb fab1 	bl	8002258 <__aeabi_dmul>
 8006cf6:	4a56      	ldr	r2, [pc, #344]	@ (8006e50 <__ieee754_log+0x350>)
 8006cf8:	4b56      	ldr	r3, [pc, #344]	@ (8006e54 <__ieee754_log+0x354>)
 8006cfa:	f7fa fb05 	bl	8001308 <__aeabi_dadd>
 8006cfe:	0022      	movs	r2, r4
 8006d00:	002b      	movs	r3, r5
 8006d02:	f7fb faa9 	bl	8002258 <__aeabi_dmul>
 8006d06:	4a54      	ldr	r2, [pc, #336]	@ (8006e58 <__ieee754_log+0x358>)
 8006d08:	4b54      	ldr	r3, [pc, #336]	@ (8006e5c <__ieee754_log+0x35c>)
 8006d0a:	f7fa fafd 	bl	8001308 <__aeabi_dadd>
 8006d0e:	0022      	movs	r2, r4
 8006d10:	002b      	movs	r3, r5
 8006d12:	f7fb faa1 	bl	8002258 <__aeabi_dmul>
 8006d16:	0002      	movs	r2, r0
 8006d18:	000b      	movs	r3, r1
 8006d1a:	9808      	ldr	r0, [sp, #32]
 8006d1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d1e:	f7fa faf3 	bl	8001308 <__aeabi_dadd>
 8006d22:	9a02      	ldr	r2, [sp, #8]
 8006d24:	4b4e      	ldr	r3, [pc, #312]	@ (8006e60 <__ieee754_log+0x360>)
 8006d26:	0004      	movs	r4, r0
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d2c:	000d      	movs	r5, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dd34      	ble.n	8006d9e <__ieee754_log+0x29e>
 8006d34:	2200      	movs	r2, #0
 8006d36:	4b3a      	ldr	r3, [pc, #232]	@ (8006e20 <__ieee754_log+0x320>)
 8006d38:	0030      	movs	r0, r6
 8006d3a:	0039      	movs	r1, r7
 8006d3c:	f7fb fa8c 	bl	8002258 <__aeabi_dmul>
 8006d40:	0032      	movs	r2, r6
 8006d42:	003b      	movs	r3, r7
 8006d44:	f7fb fa88 	bl	8002258 <__aeabi_dmul>
 8006d48:	0002      	movs	r2, r0
 8006d4a:	000b      	movs	r3, r1
 8006d4c:	9002      	str	r0, [sp, #8]
 8006d4e:	9103      	str	r1, [sp, #12]
 8006d50:	0020      	movs	r0, r4
 8006d52:	0029      	movs	r1, r5
 8006d54:	f7fa fad8 	bl	8001308 <__aeabi_dadd>
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	9b05      	ldr	r3, [sp, #20]
 8006d5c:	f7fb fa7c 	bl	8002258 <__aeabi_dmul>
 8006d60:	9b00      	ldr	r3, [sp, #0]
 8006d62:	0004      	movs	r4, r0
 8006d64:	000d      	movs	r5, r1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <__ieee754_log+0x278>
 8006d6a:	0002      	movs	r2, r0
 8006d6c:	000b      	movs	r3, r1
 8006d6e:	9802      	ldr	r0, [sp, #8]
 8006d70:	9903      	ldr	r1, [sp, #12]
 8006d72:	f7fb fd39 	bl	80027e8 <__aeabi_dsub>
 8006d76:	e74f      	b.n	8006c18 <__ieee754_log+0x118>
 8006d78:	4a23      	ldr	r2, [pc, #140]	@ (8006e08 <__ieee754_log+0x308>)
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <__ieee754_log+0x30c>)
 8006d7c:	9806      	ldr	r0, [sp, #24]
 8006d7e:	9907      	ldr	r1, [sp, #28]
 8006d80:	f7fb fa6a 	bl	8002258 <__aeabi_dmul>
 8006d84:	4a22      	ldr	r2, [pc, #136]	@ (8006e10 <__ieee754_log+0x310>)
 8006d86:	9000      	str	r0, [sp, #0]
 8006d88:	9101      	str	r1, [sp, #4]
 8006d8a:	9806      	ldr	r0, [sp, #24]
 8006d8c:	9907      	ldr	r1, [sp, #28]
 8006d8e:	4b21      	ldr	r3, [pc, #132]	@ (8006e14 <__ieee754_log+0x314>)
 8006d90:	f7fb fa62 	bl	8002258 <__aeabi_dmul>
 8006d94:	0022      	movs	r2, r4
 8006d96:	002b      	movs	r3, r5
 8006d98:	f7fa fab6 	bl	8001308 <__aeabi_dadd>
 8006d9c:	e754      	b.n	8006c48 <__ieee754_log+0x148>
 8006d9e:	0002      	movs	r2, r0
 8006da0:	000b      	movs	r3, r1
 8006da2:	0030      	movs	r0, r6
 8006da4:	0039      	movs	r1, r7
 8006da6:	f7fb fd1f 	bl	80027e8 <__aeabi_dsub>
 8006daa:	9a04      	ldr	r2, [sp, #16]
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	f7fb fa53 	bl	8002258 <__aeabi_dmul>
 8006db2:	9b00      	ldr	r3, [sp, #0]
 8006db4:	0004      	movs	r4, r0
 8006db6:	000d      	movs	r5, r1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <__ieee754_log+0x2c2>
 8006dbc:	0002      	movs	r2, r0
 8006dbe:	000b      	movs	r3, r1
 8006dc0:	e72c      	b.n	8006c1c <__ieee754_log+0x11c>
 8006dc2:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <__ieee754_log+0x308>)
 8006dc4:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <__ieee754_log+0x30c>)
 8006dc6:	9806      	ldr	r0, [sp, #24]
 8006dc8:	9907      	ldr	r1, [sp, #28]
 8006dca:	f7fb fa45 	bl	8002258 <__aeabi_dmul>
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <__ieee754_log+0x310>)
 8006dd0:	9000      	str	r0, [sp, #0]
 8006dd2:	9101      	str	r1, [sp, #4]
 8006dd4:	9806      	ldr	r0, [sp, #24]
 8006dd6:	9907      	ldr	r1, [sp, #28]
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e14 <__ieee754_log+0x314>)
 8006dda:	f7fb fa3d 	bl	8002258 <__aeabi_dmul>
 8006dde:	0002      	movs	r2, r0
 8006de0:	000b      	movs	r3, r1
 8006de2:	0020      	movs	r0, r4
 8006de4:	0029      	movs	r1, r5
 8006de6:	e733      	b.n	8006c50 <__ieee754_log+0x150>
 8006de8:	2000      	movs	r0, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	e699      	b.n	8006b22 <__ieee754_log+0x22>
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	c3500000 	.word	0xc3500000
 8006df4:	43500000 	.word	0x43500000
 8006df8:	7fefffff 	.word	0x7fefffff
 8006dfc:	fffffc01 	.word	0xfffffc01
 8006e00:	00095f64 	.word	0x00095f64
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	fee00000 	.word	0xfee00000
 8006e0c:	3fe62e42 	.word	0x3fe62e42
 8006e10:	35793c76 	.word	0x35793c76
 8006e14:	3dea39ef 	.word	0x3dea39ef
 8006e18:	55555555 	.word	0x55555555
 8006e1c:	3fd55555 	.word	0x3fd55555
 8006e20:	3fe00000 	.word	0x3fe00000
 8006e24:	fff9eb86 	.word	0xfff9eb86
 8006e28:	df3e5244 	.word	0xdf3e5244
 8006e2c:	3fc2f112 	.word	0x3fc2f112
 8006e30:	96cb03de 	.word	0x96cb03de
 8006e34:	3fc74664 	.word	0x3fc74664
 8006e38:	94229359 	.word	0x94229359
 8006e3c:	3fd24924 	.word	0x3fd24924
 8006e40:	55555593 	.word	0x55555593
 8006e44:	3fe55555 	.word	0x3fe55555
 8006e48:	d078c69f 	.word	0xd078c69f
 8006e4c:	3fc39a09 	.word	0x3fc39a09
 8006e50:	1d8e78af 	.word	0x1d8e78af
 8006e54:	3fcc71c5 	.word	0x3fcc71c5
 8006e58:	9997fa04 	.word	0x9997fa04
 8006e5c:	3fd99999 	.word	0x3fd99999
 8006e60:	0006b851 	.word	0x0006b851

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
