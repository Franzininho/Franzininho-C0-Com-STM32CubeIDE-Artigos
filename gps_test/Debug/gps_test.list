
gps_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800539c  0800539c  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  0800539c  0800539c  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800539c  0800539c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000068  0800540c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800540c  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b199  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbd  00000000  00000000  00012229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069b  00000000  00000000  00014888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b9a  00000000  00000000  00014f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9cc  00000000  00000000  00028abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075fae  00000000  00000000  00034489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  000aa47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000ace10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050d8 	.word	0x080050d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080050d8 	.word	0x080050d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <analisarGPGGA>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Função para analisar a sentença GPGGA do GPS e preencher a estrutura de dados */
void analisarGPGGA(char* sentenca, DadosGPS* dados) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
    char* token;
    int indiceCampo = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
    token = strtok(sentenca, ",");
 8000426:	4a34      	ldr	r2, [pc, #208]	@ (80004f8 <analisarGPGGA+0xe0>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f003 fd7f 	bl	8003f30 <strtok>
 8000432:	0003      	movs	r3, r0
 8000434:	60fb      	str	r3, [r7, #12]
    while (token != NULL) {
 8000436:	e057      	b.n	80004e8 <analisarGPGGA+0xd0>
        switch (indiceCampo) {
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d03f      	beq.n	80004be <analisarGPGGA+0xa6>
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	2b09      	cmp	r3, #9
 8000442:	dc47      	bgt.n	80004d4 <analisarGPGGA+0xbc>
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d003      	beq.n	8000452 <analisarGPGGA+0x3a>
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	2b04      	cmp	r3, #4
 800044e:	d01b      	beq.n	8000488 <analisarGPGGA+0x70>
 8000450:	e040      	b.n	80004d4 <analisarGPGGA+0xbc>
            case 2:
                // Convertendo latitude para graus decimais
                dados->latitudeInteira = atoi(token) / 100;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fb71 	bl	8003b3c <atoi>
 800045a:	0003      	movs	r3, r0
 800045c:	2164      	movs	r1, #100	@ 0x64
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff feee 	bl	8000240 <__divsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	b2da      	uxtb	r2, r3
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	701a      	strb	r2, [r3, #0]
                dados->latitudeDecimal = atoi(token) % 100;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	0018      	movs	r0, r3
 8000470:	f003 fb64 	bl	8003b3c <atoi>
 8000474:	0003      	movs	r3, r0
 8000476:	2164      	movs	r1, #100	@ 0x64
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ffc7 	bl	800040c <__aeabi_idivmod>
 800047e:	000b      	movs	r3, r1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	705a      	strb	r2, [r3, #1]
                break;
 8000486:	e025      	b.n	80004d4 <analisarGPGGA+0xbc>
            case 4:
                // Convertendo longitude para graus decimais
                dados->longitudeInteira = atoi(token) / 100;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	0018      	movs	r0, r3
 800048c:	f003 fb56 	bl	8003b3c <atoi>
 8000490:	0003      	movs	r3, r0
 8000492:	2164      	movs	r1, #100	@ 0x64
 8000494:	0018      	movs	r0, r3
 8000496:	f7ff fed3 	bl	8000240 <__divsi3>
 800049a:	0003      	movs	r3, r0
 800049c:	b2da      	uxtb	r2, r3
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	709a      	strb	r2, [r3, #2]
                dados->longitudeDecimal = atoi(token) % 100;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	0018      	movs	r0, r3
 80004a6:	f003 fb49 	bl	8003b3c <atoi>
 80004aa:	0003      	movs	r3, r0
 80004ac:	2164      	movs	r1, #100	@ 0x64
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff ffac 	bl	800040c <__aeabi_idivmod>
 80004b4:	000b      	movs	r3, r1
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	70da      	strb	r2, [r3, #3]
                break;
 80004bc:	e00a      	b.n	80004d4 <analisarGPGGA+0xbc>
            case 9:
                strncpy(dados->altitude, token, sizeof(dados->altitude) - 1);
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	3304      	adds	r3, #4
 80004c2:	68f9      	ldr	r1, [r7, #12]
 80004c4:	2207      	movs	r2, #7
 80004c6:	0018      	movs	r0, r3
 80004c8:	f003 fd1d 	bl	8003f06 <strncpy>
                dados->altitude[sizeof(dados->altitude) - 1] = '\0'; // Assegura terminação nula
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	2200      	movs	r2, #0
 80004d0:	72da      	strb	r2, [r3, #11]
                break;
 80004d2:	46c0      	nop			@ (mov r8, r8)
        }
        token = strtok(NULL, ",");
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <analisarGPGGA+0xe0>)
 80004d6:	0019      	movs	r1, r3
 80004d8:	2000      	movs	r0, #0
 80004da:	f003 fd29 	bl	8003f30 <strtok>
 80004de:	0003      	movs	r3, r0
 80004e0:	60fb      	str	r3, [r7, #12]
        indiceCampo++;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
    while (token != NULL) {
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1a4      	bne.n	8000438 <analisarGPGGA+0x20>
    }
}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	080050f0 	.word	0x080050f0

080004fc <processarDadosGPS>:

/* Função para processar os dados do GPS */
void processarDadosGPS(char* dadosGPS) {
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08b      	sub	sp, #44	@ 0x2c
 8000500:	af04      	add	r7, sp, #16
 8000502:	6078      	str	r0, [r7, #4]
    if (strncmp(dadosGPS, "$GPGGA", 6) == 0) {
 8000504:	491b      	ldr	r1, [pc, #108]	@ (8000574 <processarDadosGPS+0x78>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2206      	movs	r2, #6
 800050a:	0018      	movs	r0, r3
 800050c:	f003 fcea 	bl	8003ee4 <strncmp>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d12b      	bne.n	800056c <processarDadosGPS+0x70>
        DadosGPS dados;
        analisarGPGGA(dadosGPS, &dados);
 8000514:	240c      	movs	r4, #12
 8000516:	193a      	adds	r2, r7, r4
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff ff7b 	bl	8000418 <analisarGPGGA>

        // Formata os dados para o buffer de transmissão
        sprintf(bufferTransmissao, "Latitude: %d.%d, Longitude: %d.%d, Altitude: %s\r\n",
                 dados.latitudeInteira, dados.latitudeDecimal, dados.longitudeInteira, dados.longitudeDecimal, dados.altitude);
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	781b      	ldrb	r3, [r3, #0]
        sprintf(bufferTransmissao, "Latitude: %d.%d, Longitude: %d.%d, Altitude: %s\r\n",
 8000528:	001d      	movs	r5, r3
                 dados.latitudeInteira, dados.latitudeDecimal, dados.longitudeInteira, dados.longitudeDecimal, dados.altitude);
 800052a:	187b      	adds	r3, r7, r1
 800052c:	785b      	ldrb	r3, [r3, #1]
        sprintf(bufferTransmissao, "Latitude: %d.%d, Longitude: %d.%d, Altitude: %s\r\n",
 800052e:	001e      	movs	r6, r3
                 dados.latitudeInteira, dados.latitudeDecimal, dados.longitudeInteira, dados.longitudeDecimal, dados.altitude);
 8000530:	187b      	adds	r3, r7, r1
 8000532:	789b      	ldrb	r3, [r3, #2]
        sprintf(bufferTransmissao, "Latitude: %d.%d, Longitude: %d.%d, Altitude: %s\r\n",
 8000534:	001a      	movs	r2, r3
                 dados.latitudeInteira, dados.latitudeDecimal, dados.longitudeInteira, dados.longitudeDecimal, dados.altitude);
 8000536:	187b      	adds	r3, r7, r1
 8000538:	78db      	ldrb	r3, [r3, #3]
        sprintf(bufferTransmissao, "Latitude: %d.%d, Longitude: %d.%d, Altitude: %s\r\n",
 800053a:	001c      	movs	r4, r3
 800053c:	490e      	ldr	r1, [pc, #56]	@ (8000578 <processarDadosGPS+0x7c>)
 800053e:	480f      	ldr	r0, [pc, #60]	@ (800057c <processarDadosGPS+0x80>)
 8000540:	230c      	movs	r3, #12
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	3304      	adds	r3, #4
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	9401      	str	r4, [sp, #4]
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	0033      	movs	r3, r6
 800054e:	002a      	movs	r2, r5
 8000550:	f003 fc54 	bl	8003dfc <siprintf>
        // Transmite os dados formatados via UART
        HAL_UART_Transmit(&huart1, (uint8_t *)bufferTransmissao, strlen(bufferTransmissao), 1000);
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <processarDadosGPS+0x80>)
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fdd6 	bl	8000108 <strlen>
 800055c:	0003      	movs	r3, r0
 800055e:	b29a      	uxth	r2, r3
 8000560:	23fa      	movs	r3, #250	@ 0xfa
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4905      	ldr	r1, [pc, #20]	@ (800057c <processarDadosGPS+0x80>)
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <processarDadosGPS+0x84>)
 8000568:	f001 fb70 	bl	8001c4c <HAL_UART_Transmit>
    }
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b007      	add	sp, #28
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	080050f4 	.word	0x080050f4
 8000578:	080050fc 	.word	0x080050fc
 800057c:	200002b0 	.word	0x200002b0
 8000580:	20000084 	.word	0x20000084

08000584 <HAL_UART_RxCpltCallback>:

/* Callback de recepção de dados UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <HAL_UART_RxCpltCallback+0x68>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d126      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x60>
        if (indiceBuffer < BUFFER_SIZE - 1) {
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	2bfe      	cmp	r3, #254	@ 0xfe
 800059c:	d81c      	bhi.n	80005d8 <HAL_UART_RxCpltCallback+0x54>
            if (dadoRecebido != '\n') { // Verifica fim de linha
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b0a      	cmp	r3, #10
 80005a4:	d00b      	beq.n	80005be <HAL_UART_RxCpltCallback+0x3a>
                bufferRecepcao[indiceBuffer++] = dadoRecebido;
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	b291      	uxth	r1, r2
 80005ae:	4a10      	ldr	r2, [pc, #64]	@ (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005b0:	8011      	strh	r1, [r2, #0]
 80005b2:	001a      	movs	r2, r3
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005b6:	7819      	ldrb	r1, [r3, #0]
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005ba:	5499      	strb	r1, [r3, r2]
 80005bc:	e00c      	b.n	80005d8 <HAL_UART_RxCpltCallback+0x54>
            } else {
                //bufferRecepcao[indiceBuffer++] = '\r'; // Adiciona retorno de carro
                //bufferRecepcao[indiceBuffer++] = '\n'; // Adiciona nova linha
                bufferRecepcao[indiceBuffer] = '\0';
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	001a      	movs	r2, r3
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	5499      	strb	r1, [r3, r2]
                indiceBuffer = 0; // Reseta o índice do buffer
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	801a      	strh	r2, [r3, #0]
                //HAL_UART_Transmit(&huart1, bufferRecepcao, strlen((char*)bufferRecepcao), 1000); // Transmite a linha completa via UART
                processarDadosGPS((char*)bufferRecepcao);
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ff92 	bl	80004fc <processarDadosGPS>
            }
        }
        // Recomeça a recepção de dados
        HAL_UART_Receive_IT(&huart2, &dadoRecebido, 1); // Substitua pelo seu handler
 80005d8:	4906      	ldr	r1, [pc, #24]	@ (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_UART_RxCpltCallback+0x78>)
 80005dc:	2201      	movs	r2, #1
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fbd8 	bl	8001d94 <HAL_UART_Receive_IT>
    }
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b002      	add	sp, #8
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40004400 	.word	0x40004400
 80005f0:	200002ae 	.word	0x200002ae
 80005f4:	200002ac 	.word	0x200002ac
 80005f8:	200001ac 	.word	0x200001ac
 80005fc:	20000118 	.word	0x20000118

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fadb 	bl	8000bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f812 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8d6 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8a0 	bl	8000754 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f850 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &dadoRecebido, 1);
 8000618:	4903      	ldr	r1, [pc, #12]	@ (8000628 <main+0x28>)
 800061a:	4b04      	ldr	r3, [pc, #16]	@ (800062c <main+0x2c>)
 800061c:	2201      	movs	r2, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fbb8 	bl	8001d94 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	e7fd      	b.n	8000624 <main+0x24>
 8000628:	200002ac 	.word	0x200002ac
 800062c:	20000118 	.word	0x20000118

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08d      	sub	sp, #52	@ 0x34
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	231c      	movs	r3, #28
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 fc47 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	003b      	movs	r3, r7
 8000648:	0018      	movs	r0, r3
 800064a:	2314      	movs	r3, #20
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f003 fc40 	bl	8003ed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2202      	movs	r2, #2
 8000658:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2280      	movs	r2, #128	@ 0x80
 8000666:	0152      	lsls	r2, r2, #5
 8000668:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2240      	movs	r2, #64	@ 0x40
 800066e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fe54 	bl	8001320 <HAL_RCC_OscConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800067c:	f000 f8b4 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	003b      	movs	r3, r7
 8000682:	2207      	movs	r2, #7
 8000684:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	003b      	movs	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 f820 	bl	80016e8 <HAL_RCC_ClockConfig>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006ac:	f000 f89c 	bl	80007e8 <Error_Handler>
  }
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b00d      	add	sp, #52	@ 0x34
 80006b6:	bd90      	pop	{r4, r7, pc}

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006be:	4a24      	ldr	r2, [pc, #144]	@ (8000750 <MX_USART1_UART_Init+0x98>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	0252      	lsls	r2, r2, #9
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fa4c 	bl	8001ba0 <HAL_UART_Init>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f86c 	bl	80007e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f003 f931 	bl	800397c <HAL_UARTEx_SetTxFifoThreshold>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f863 	bl	80007e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f003 f968 	bl	80039fc <HAL_UARTEx_SetRxFifoThreshold>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f85a 	bl	80007e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <MX_USART1_UART_Init+0x94>)
 8000736:	0018      	movs	r0, r3
 8000738:	f003 f8e6 	bl	8003908 <HAL_UARTEx_DisableFifoMode>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f852 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	20000084 	.word	0x20000084
 8000750:	40013800 	.word	0x40013800

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 800075a:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <MX_USART2_UART_Init+0x64>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000760:	2296      	movs	r2, #150	@ 0x96
 8000762:	0192      	lsls	r2, r2, #6
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x60>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f9fe 	bl	8001ba0 <HAL_UART_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f81e 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000118 	.word	0x20000118
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0x28>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_GPIO_Init+0x28>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x28>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_MspInit+0x50>)
 80007fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_MspInit+0x50>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	641a      	str	r2, [r3, #64]	@ 0x40
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x50>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x50>)
 8000814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <HAL_MspInit+0x50>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	0549      	lsls	r1, r1, #21
 800081c:	430a      	orrs	r2, r1
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_MspInit+0x50>)
 8000822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	055b      	lsls	r3, r3, #21
 8000828:	4013      	ands	r3, r2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800082e:	2008      	movs	r0, #8
 8000830:	f000 fa42 	bl	8000cb8 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8000834:	2010      	movs	r0, #16
 8000836:	f000 fa3f 	bl	8000cb8 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b093      	sub	sp, #76	@ 0x4c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2334      	movs	r3, #52	@ 0x34
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f003 fb3a 	bl	8003ed4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	2418      	movs	r4, #24
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	231c      	movs	r3, #28
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fb32 	bl	8003ed4 <memset>
  if(huart->Instance==USART1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a42      	ldr	r2, [pc, #264]	@ (8000980 <HAL_UART_MspInit+0x138>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d140      	bne.n	80008fc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	f001 f89b 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000892:	f7ff ffa9 	bl	80007e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089a:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	01c9      	lsls	r1, r1, #7
 80008a0:	430a      	orrs	r2, r1
 80008a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 80008a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	01db      	lsls	r3, r3, #7
 80008ac:	4013      	ands	r3, r2
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b6:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ca:	2134      	movs	r1, #52	@ 0x34
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	22c0      	movs	r2, #192	@ 0xc0
 80008d0:	00d2      	lsls	r2, r2, #3
 80008d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2202      	movs	r2, #2
 80008d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2201      	movs	r2, #1
 80008ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	187a      	adds	r2, r7, r1
 80008ee:	23a0      	movs	r3, #160	@ 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fba9 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fa:	e03d      	b.n	8000978 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <HAL_UART_MspInit+0x140>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d138      	bne.n	8000978 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	0289      	lsls	r1, r1, #10
 8000910:	430a      	orrs	r2, r1
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	029b      	lsls	r3, r3, #10
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_UART_MspInit+0x13c>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093a:	2134      	movs	r1, #52	@ 0x34
 800093c:	187b      	adds	r3, r7, r1
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2202      	movs	r2, #2
 8000946:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2201      	movs	r2, #1
 8000958:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	187a      	adds	r2, r7, r1
 800095c:	23a0      	movs	r3, #160	@ 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fb72 	bl	800104c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	201c      	movs	r0, #28
 800096e:	f000 fa5f 	bl	8000e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000972:	201c      	movs	r0, #28
 8000974:	f000 fa71 	bl	8000e5a <HAL_NVIC_EnableIRQ>
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b013      	add	sp, #76	@ 0x4c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	40021000 	.word	0x40021000
 8000988:	40004400 	.word	0x40004400

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f964 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <USART2_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fa3c 	bl	8001e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	20000118 	.word	0x20000118

080009d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  return 1;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_kill>:

int _kill(int pid, int sig)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ee:	f003 fb4d 	bl	800408c <__errno>
 80009f2:	0003      	movs	r3, r0
 80009f4:	2216      	movs	r2, #22
 80009f6:	601a      	str	r2, [r3, #0]
  return -1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_exit>:

void _exit (int status)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	425a      	negs	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ffe5 	bl	80009e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	e7fd      	b.n	8000a1a <_exit+0x16>

08000a1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e00a      	b.n	8000a46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a30:	e000      	b.n	8000a34 <_read+0x16>
 8000a32:	bf00      	nop
 8000a34:	0001      	movs	r1, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	60ba      	str	r2, [r7, #8]
 8000a3c:	b2ca      	uxtb	r2, r1
 8000a3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dbf0      	blt.n	8000a30 <_read+0x12>
  }

  return len;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b006      	add	sp, #24
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e009      	b.n	8000a7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	60ba      	str	r2, [r7, #8]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	e000      	b.n	8000a78 <_write+0x20>
 8000a76:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbf1      	blt.n	8000a6a <_write+0x12>
  }
  return len;
 8000a86:	687b      	ldr	r3, [r7, #4]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_close>:

int _close(int file)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	0192      	lsls	r2, r2, #6
 8000ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_isatty>:

int _isatty(int file)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b004      	add	sp, #16
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f003 fab8 	bl	800408c <__errno>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	425b      	negs	r3, r3
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	18d2      	adds	r2, r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b006      	add	sp, #24
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20001800 	.word	0x20001800
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200003b0 	.word	0x200003b0
 8000b50:	20000508 	.word	0x20000508

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <SystemInit+0x14>)
 8000b5a:	2280      	movs	r2, #128	@ 0x80
 8000b5c:	0512      	lsls	r2, r2, #20
 8000b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b70:	f7ff fff0 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b80:	480a      	ldr	r0, [pc, #40]	@ (8000bac <LoopForever+0xa>)
  ldr r3, =_edata
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b90:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b92:	3204      	adds	r2, #4

08000b94 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <LoopForever+0x16>)
  cmp r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b9a:	f003 fa7d 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fd2f 	bl	8000600 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000ba8:	080053a4 	.word	0x080053a4
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bb0:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000bb4:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000bb8:	20000504 	.word	0x20000504

08000bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f80e 	bl	8000bec <HAL_InitTick>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e001      	b.n	8000be0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bdc:	f7ff fe0a 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <HAL_InitTick+0x88>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d02b      	beq.n	8000c5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_InitTick+0x8c>)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_InitTick+0x88>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	23fa      	movs	r3, #250	@ 0xfa
 8000c10:	0098      	lsls	r0, r3, #2
 8000c12:	f7ff fa8b 	bl	800012c <__udivsi3>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f7ff fa86 	bl	800012c <__udivsi3>
 8000c20:	0003      	movs	r3, r0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f929 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d112      	bne.n	8000c52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d80a      	bhi.n	8000c48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 f8f8 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_InitTick+0x90>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e00d      	b.n	8000c64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e008      	b.n	8000c64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	230f      	movs	r3, #15
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e003      	b.n	8000c64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b005      	add	sp, #20
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	18d2      	adds	r2, r2, r3
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	200003b4 	.word	0x200003b4

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	@ (8000cb4 <HAL_GetTick+0x10>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	200003b4 	.word	0x200003b4

08000cb8 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cea:	d809      	bhi.n	8000d00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	231f      	movs	r3, #31
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_EnableIRQ+0x30>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d20:	d828      	bhi.n	8000d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d22:	4a2f      	ldr	r2, [pc, #188]	@ (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	33c0      	adds	r3, #192	@ 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	589b      	ldr	r3, [r3, r2]
 8000d32:	1dfa      	adds	r2, r7, #7
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	0011      	movs	r1, r2
 8000d38:	2203      	movs	r2, #3
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	21ff      	movs	r1, #255	@ 0xff
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	43d2      	mvns	r2, r2
 8000d46:	401a      	ands	r2, r3
 8000d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	019b      	lsls	r3, r3, #6
 8000d4e:	22ff      	movs	r2, #255	@ 0xff
 8000d50:	401a      	ands	r2, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	2303      	movs	r3, #3
 8000d5a:	4003      	ands	r3, r0
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	481f      	ldr	r0, [pc, #124]	@ (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d72:	e031      	b.n	8000dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	400b      	ands	r3, r1
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3306      	adds	r3, #6
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1dfa      	adds	r2, r7, #7
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	2203      	movs	r2, #3
 8000d96:	400a      	ands	r2, r1
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	21ff      	movs	r1, #255	@ 0xff
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	22ff      	movs	r2, #255	@ 0xff
 8000dac:	401a      	ands	r2, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0018      	movs	r0, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	4003      	ands	r3, r0
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	4023      	ands	r3, r4
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	3306      	adds	r3, #6
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	18c3      	adds	r3, r0, r3
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b003      	add	sp, #12
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	045b      	lsls	r3, r3, #17
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d301      	bcc.n	8000e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e010      	b.n	8000e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <SysTick_Config+0x44>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	3a01      	subs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff ff7c 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x44>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x44>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	1c02      	adds	r2, r0, #0
 8000e40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	0002      	movs	r2, r0
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff33 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ffaf 	bl	8000de8 <SysTick_Config>
 8000e8a:	0003      	movs	r3, r0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e050      	b.n	8000f48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2225      	movs	r2, #37	@ 0x25
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d008      	beq.n	8000ec4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2224      	movs	r2, #36	@ 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e041      	b.n	8000f48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	210e      	movs	r1, #14
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	491c      	ldr	r1, [pc, #112]	@ (8000f50 <HAL_DMA_Abort+0xbc>)
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_DMA_Abort+0xc0>)
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	221c      	movs	r2, #28
 8000efe:	4013      	ands	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_DMA_Abort+0xc0>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f26:	490a      	ldr	r1, [pc, #40]	@ (8000f50 <HAL_DMA_Abort+0xbc>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2225      	movs	r2, #37	@ 0x25
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2224      	movs	r2, #36	@ 0x24
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	fffffeff 	.word	0xfffffeff
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2224      	movs	r2, #36	@ 0x24
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2224      	movs	r2, #36	@ 0x24
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_DMA_Abort_IT+0x26>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e05e      	b.n	800103c <HAL_DMA_Abort_IT+0xe4>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2224      	movs	r2, #36	@ 0x24
 8000f82:	2101      	movs	r1, #1
 8000f84:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2225      	movs	r2, #37	@ 0x25
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2204      	movs	r2, #4
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e049      	b.n	8001036 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	210e      	movs	r1, #14
 8000fae:	438a      	bics	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fcc:	491d      	ldr	r1, [pc, #116]	@ (8001044 <HAL_DMA_Abort_IT+0xec>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <HAL_DMA_Abort_IT+0xf0>)
 8000fd4:	6859      	ldr	r1, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	221c      	movs	r2, #28
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2201      	movs	r2, #1
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_DMA_Abort_IT+0xf0>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ff0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00c      	beq.n	8001014 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001004:	490f      	ldr	r1, [pc, #60]	@ (8001044 <HAL_DMA_Abort_IT+0xec>)
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001012:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2225      	movs	r2, #37	@ 0x25
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2224      	movs	r2, #36	@ 0x24
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	0010      	movs	r0, r2
 8001034:	4798      	blx	r3
    }
  }
  return status;
 8001036:	230f      	movs	r3, #15
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b004      	add	sp, #16
 8001042:	bd80      	pop	{r7, pc}
 8001044:	fffffeff 	.word	0xfffffeff
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800105a:	e14d      	b.n	80012f8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x28>
 8001072:	e13e      	b.n	80012f2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x38>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b12      	cmp	r3, #18
 8001082:	d125      	bne.n	80010d0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	58d3      	ldr	r3, [r2, r3]
 8001090:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2207      	movs	r2, #7
 8001096:	4013      	ands	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	43da      	mvns	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	220f      	movs	r2, #15
 80010ae:	401a      	ands	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2107      	movs	r1, #7
 80010b4:	400b      	ands	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	409a      	lsls	r2, r3
 80010ba:	0013      	movs	r3, r2
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	6979      	ldr	r1, [r7, #20]
 80010ce:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	43da      	mvns	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	401a      	ands	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <HAL_GPIO_Init+0xd8>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d007      	beq.n	8001124 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	2b11      	cmp	r3, #17
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d130      	bne.n	8001186 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	43da      	mvns	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	409a      	lsls	r2, r3
 8001146:	0013      	movs	r3, r2
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115a:	2201      	movs	r2, #1
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	43da      	mvns	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4013      	ands	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	2201      	movs	r2, #1
 8001172:	401a      	ands	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4013      	ands	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	055b      	lsls	r3, r3, #21
 80011c6:	4013      	ands	r3, r2
 80011c8:	d100      	bne.n	80011cc <HAL_GPIO_Init+0x180>
 80011ca:	e092      	b.n	80012f2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011cc:	4a50      	ldr	r2, [pc, #320]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3318      	adds	r3, #24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	589b      	ldr	r3, [r3, r2]
 80011d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	220f      	movs	r2, #15
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	23a0      	movs	r3, #160	@ 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x1d6>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a45      	ldr	r2, [pc, #276]	@ (8001314 <HAL_GPIO_Init+0x2c8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x1d2>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a44      	ldr	r2, [pc, #272]	@ (8001318 <HAL_GPIO_Init+0x2cc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x1ce>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a43      	ldr	r2, [pc, #268]	@ (800131c <HAL_GPIO_Init+0x2d0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x1ca>
 8001212:	2305      	movs	r3, #5
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x1d8>
 8001216:	2306      	movs	r3, #6
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x1d8>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x1d8>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x1d8>
 8001222:	2300      	movs	r3, #0
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	2103      	movs	r1, #3
 8001228:	400a      	ands	r2, r1
 800122a:	00d2      	lsls	r2, r2, #3
 800122c:	4093      	lsls	r3, r2
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001234:	4936      	ldr	r1, [pc, #216]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3318      	adds	r3, #24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001242:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	58d3      	ldr	r3, [r2, r3]
 8001248:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43da      	mvns	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	4013      	ands	r3, r2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001268:	4929      	ldr	r1, [pc, #164]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001270:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 8001272:	2384      	movs	r3, #132	@ 0x84
 8001274:	58d3      	ldr	r3, [r2, r3]
 8001276:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4013      	ands	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	029b      	lsls	r3, r3, #10
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001296:	491e      	ldr	r1, [pc, #120]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 8001298:	2284      	movs	r2, #132	@ 0x84
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4013      	ands	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	035b      	lsls	r3, r3, #13
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	039b      	lsls	r3, r3, #14
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_GPIO_Init+0x2c4>)
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	3301      	adds	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	1e13      	subs	r3, r2, #0
 8001302:	d000      	beq.n	8001306 <HAL_GPIO_Init+0x2ba>
 8001304:	e6aa      	b.n	800105c <HAL_GPIO_Init+0x10>
  }
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021800 	.word	0x40021800
 8001314:	50000400 	.word	0x50000400
 8001318:	50000800 	.word	0x50000800
 800131c:	50001400 	.word	0x50001400

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1d0      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x1e>
 800133c:	e069      	b.n	8001412 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4bc8      	ldr	r3, [pc, #800]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b08      	cmp	r3, #8
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d15d      	bne.n	8001412 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1bc      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	429a      	cmp	r2, r3
 8001364:	d107      	bne.n	8001376 <HAL_RCC_OscConfig+0x56>
 8001366:	4bbe      	ldr	r3, [pc, #760]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4bbd      	ldr	r3, [pc, #756]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0249      	lsls	r1, r1, #9
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e020      	b.n	80013b8 <HAL_RCC_OscConfig+0x98>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	23a0      	movs	r3, #160	@ 0xa0
 800137c:	02db      	lsls	r3, r3, #11
 800137e:	429a      	cmp	r2, r3
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x80>
 8001382:	4bb7      	ldr	r3, [pc, #732]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4bb6      	ldr	r3, [pc, #728]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	02c9      	lsls	r1, r1, #11
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	4bb3      	ldr	r3, [pc, #716]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4bb2      	ldr	r3, [pc, #712]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001396:	2180      	movs	r1, #128	@ 0x80
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0x98>
 80013a0:	4baf      	ldr	r3, [pc, #700]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4bae      	ldr	r3, [pc, #696]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80013a6:	49af      	ldr	r1, [pc, #700]	@ (8001664 <HAL_RCC_OscConfig+0x344>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	4bac      	ldr	r3, [pc, #688]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4bab      	ldr	r3, [pc, #684]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80013b2:	49ad      	ldr	r1, [pc, #692]	@ (8001668 <HAL_RCC_OscConfig+0x348>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d014      	beq.n	80013ea <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc70 	bl	8000ca4 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013ca:	f7ff fc6b 	bl	8000ca4 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	@ 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e17b      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0xaa>
 80013e8:	e013      	b.n	8001412 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc5b 	bl	8000ca4 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc56 	bl	8000ca4 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e166      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	4b96      	ldr	r3, [pc, #600]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0xfe>
 800141c:	e086      	b.n	800152c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b90      	ldr	r3, [pc, #576]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2238      	movs	r2, #56	@ 0x38
 8001424:	4013      	ands	r3, r2
 8001426:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d12f      	bne.n	800148e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e14c      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b89      	ldr	r3, [pc, #548]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a8b      	ldr	r2, [pc, #556]	@ (800166c <HAL_RCC_OscConfig+0x34c>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	021a      	lsls	r2, r3, #8
 800144a:	4b85      	ldr	r3, [pc, #532]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001456:	4b82      	ldr	r3, [pc, #520]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a85      	ldr	r2, [pc, #532]	@ (8001670 <HAL_RCC_OscConfig+0x350>)
 800145c:	4013      	ands	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	4b7e      	ldr	r3, [pc, #504]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800146a:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0adb      	lsrs	r3, r3, #11
 8001470:	2207      	movs	r2, #7
 8001472:	4013      	ands	r3, r2
 8001474:	4a7f      	ldr	r2, [pc, #508]	@ (8001674 <HAL_RCC_OscConfig+0x354>)
 8001476:	40da      	lsrs	r2, r3
 8001478:	4b7f      	ldr	r3, [pc, #508]	@ (8001678 <HAL_RCC_OscConfig+0x358>)
 800147a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800147c:	4b7f      	ldr	r3, [pc, #508]	@ (800167c <HAL_RCC_OscConfig+0x35c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fbb3 	bl	8000bec <HAL_InitTick>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d050      	beq.n	800152c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e122      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001496:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a75      	ldr	r2, [pc, #468]	@ (8001670 <HAL_RCC_OscConfig+0x350>)
 800149c:	4013      	ands	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80014aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	0049      	lsls	r1, r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbf4 	bl	8000ca4 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbef 	bl	8000ca4 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0ff      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	4b62      	ldr	r3, [pc, #392]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a61      	ldr	r2, [pc, #388]	@ (800166c <HAL_RCC_OscConfig+0x34c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	021a      	lsls	r2, r3, #8
 80014f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e019      	b.n	800152c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80014f8:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80014fe:	4960      	ldr	r1, [pc, #384]	@ (8001680 <HAL_RCC_OscConfig+0x360>)
 8001500:	400a      	ands	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fbce 	bl	8000ca4 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800150e:	f7ff fbc9 	bl	8000ca4 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0d9      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4013      	ands	r3, r2
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	4013      	ands	r3, r2
 8001534:	d042      	beq.n	80015bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2238      	movs	r2, #56	@ 0x38
 800153c:	4013      	ands	r3, r2
 800153e:	2b18      	cmp	r3, #24
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d138      	bne.n	80015bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0c2      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d019      	beq.n	800158a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001556:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001558:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fb9f 	bl	8000ca4 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800156c:	f7ff fb9a 	bl	8000ca4 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0aa      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800157e:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0x24c>
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800158a:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800158c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb85 	bl	8000ca4 <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb80 	bl	8000ca4 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e090      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1f1      	bne.n	80015a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2204      	movs	r2, #4
 80015c2:	4013      	ands	r3, r2
 80015c4:	d100      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2a8>
 80015c6:	e084      	b.n	80016d2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c8:	230f      	movs	r3, #15
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015d0:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2238      	movs	r2, #56	@ 0x38
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2c6>
 80015e4:	e075      	b.n	80016d2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e074      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x2e0>
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80015f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015fe:	e01c      	b.n	800163a <HAL_RCC_OscConfig+0x31a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x302>
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800160a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800160e:	2104      	movs	r1, #4
 8001610:	430a      	orrs	r2, r1
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0x31a>
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_OscConfig+0x340>)
 8001634:	2104      	movs	r1, #4
 8001636:	438a      	bics	r2, r1
 8001638:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d028      	beq.n	8001694 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb2f 	bl	8000ca4 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fb2a 	bl	8000ca4 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <HAL_RCC_OscConfig+0x364>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d915      	bls.n	8001688 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e039      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
 8001660:	40021000 	.word	0x40021000
 8001664:	fffeffff 	.word	0xfffeffff
 8001668:	fffbffff 	.word	0xfffbffff
 800166c:	ffff80ff 	.word	0xffff80ff
 8001670:	ffffc7ff 	.word	0xffffc7ff
 8001674:	02dc6c00 	.word	0x02dc6c00
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004
 8001680:	fffffeff 	.word	0xfffffeff
 8001684:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_RCC_OscConfig+0x3bc>)
 800168a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d0dc      	beq.n	800164c <HAL_RCC_OscConfig+0x32c>
 8001692:	e013      	b.n	80016bc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fb06 	bl	8000ca4 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb01 	bl	8000ca4 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_RCC_OscConfig+0x3c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e010      	b.n	80016d4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_RCC_OscConfig+0x3bc>)
 80016b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b6:	2202      	movs	r2, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_RCC_OscConfig+0x3bc>)
 80016c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <HAL_RCC_OscConfig+0x3bc>)
 80016cc:	4905      	ldr	r1, [pc, #20]	@ (80016e4 <HAL_RCC_OscConfig+0x3c4>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b006      	add	sp, #24
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	00001388 	.word	0x00001388
 80016e4:	efffffff 	.word	0xefffffff

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0e9      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b76      	ldr	r3, [pc, #472]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2207      	movs	r2, #7
 8001702:	4013      	ands	r3, r2
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d91e      	bls.n	8001748 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2207      	movs	r2, #7
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800171c:	f7ff fac2 	bl	8000ca4 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001724:	e009      	b.n	800173a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001726:	f7ff fabd 	bl	8000ca4 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0ca      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173a:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d017      	beq.n	8001782 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800175c:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a60      	ldr	r2, [pc, #384]	@ (80018e4 <HAL_RCC_ClockConfig+0x1fc>)
 8001762:	401a      	ands	r2, r3
 8001764:	4b5e      	ldr	r3, [pc, #376]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	21b0      	movs	r1, #176	@ 0xb0
 8001768:	0109      	lsls	r1, r1, #4
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176e:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4a5d      	ldr	r2, [pc, #372]	@ (80018e8 <HAL_RCC_ClockConfig+0x200>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d055      	beq.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800178c:	4b54      	ldr	r3, [pc, #336]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	221c      	movs	r2, #28
 8001792:	4393      	bics	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	029b      	lsls	r3, r3, #10
 80017b0:	4013      	ands	r3, r2
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e08b      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d113      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07f      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017d8:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e074      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e06d      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4393      	bics	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	430a      	orrs	r2, r1
 8001806:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001808:	f7ff fa4c 	bl	8000ca4 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001810:	e009      	b.n	8001826 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001812:	f7ff fa47 	bl	8000ca4 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e054      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	429a      	cmp	r2, r3
 8001836:	d1ec      	bne.n	8001812 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d21e      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2207      	movs	r2, #7
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001858:	f7ff fa24 	bl	8000ca4 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	e009      	b.n	8001876 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff fa1f 	bl	8000ca4 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e02c      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2204      	movs	r2, #4
 800188a:	4013      	ands	r3, r2
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_RCC_ClockConfig+0x204>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018a2:	f000 f82b 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018a6:	0001      	movs	r1, r0
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	220f      	movs	r2, #15
 80018b0:	401a      	ands	r2, r3
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_RCC_ClockConfig+0x208>)
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_RCC_ClockConfig+0x20c>)
 80018c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <HAL_RCC_ClockConfig+0x210>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff f98f 	bl	8000bec <HAL_InitTick>
 80018ce:	0003      	movs	r3, r0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b004      	add	sp, #16
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	00001388 	.word	0x00001388
 80018e0:	40021000 	.word	0x40021000
 80018e4:	ffff84ff 	.word	0xffff84ff
 80018e8:	fffff0ff 	.word	0xfffff0ff
 80018ec:	ffff8fff 	.word	0xffff8fff
 80018f0:	08005130 	.word	0x08005130
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x78>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	@ 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	d10f      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x78>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	2207      	movs	r2, #7
 8001914:	4013      	ands	r3, r2
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4815      	ldr	r0, [pc, #84]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001922:	f7fe fc03 	bl	800012c <__udivsi3>
 8001926:	0003      	movs	r3, r0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e01e      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x78>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2238      	movs	r2, #56	@ 0x38
 8001932:	4013      	ands	r3, r2
 8001934:	2b08      	cmp	r3, #8
 8001936:	d102      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_RCC_GetSysClockFreq+0x80>)
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	e015      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x78>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2238      	movs	r2, #56	@ 0x38
 8001944:	4013      	ands	r3, r2
 8001946:	2b20      	cmp	r3, #32
 8001948:	d103      	bne.n	8001952 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	e00b      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x78>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2238      	movs	r2, #56	@ 0x38
 8001958:	4013      	ands	r3, r2
 800195a:	2b18      	cmp	r3, #24
 800195c:	d103      	bne.n	8001966 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800195e:	23fa      	movs	r3, #250	@ 0xfa
 8001960:	01db      	lsls	r3, r3, #7
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	e001      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	02dc6c00 	.word	0x02dc6c00
 800197c:	007a1200 	.word	0x007a1200

08001980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b02      	ldr	r3, [pc, #8]	@ (8001990 <HAL_RCC_GetHCLKFreq+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001998:	f7ff fff2 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 800199c:	0001      	movs	r1, r0
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b1b      	lsrs	r3, r3, #12
 80019a4:	2207      	movs	r2, #7
 80019a6:	401a      	ands	r2, r3
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	58d3      	ldr	r3, [r2, r3]
 80019ae:	221f      	movs	r2, #31
 80019b0:	4013      	ands	r3, r2
 80019b2:	40d9      	lsrs	r1, r3
 80019b4:	000b      	movs	r3, r1
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08005170 	.word	0x08005170

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019cc:	2313      	movs	r3, #19
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019d4:	2312      	movs	r3, #18
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80019e8:	e079      	b.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2011      	movs	r0, #17
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b64      	ldr	r3, [pc, #400]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d110      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b61      	ldr	r3, [pc, #388]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a02:	4b60      	ldr	r3, [pc, #384]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001a20:	4b58      	ldr	r3, [pc, #352]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d019      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d014      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001a3c:	4b51      	ldr	r3, [pc, #324]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	4a51      	ldr	r2, [pc, #324]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a46:	4b4f      	ldr	r3, [pc, #316]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0249      	lsls	r1, r1, #9
 8001a50:	430a      	orrs	r2, r1
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a54:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a5a:	494c      	ldr	r1, [pc, #304]	@ (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001a60:	4b48      	ldr	r3, [pc, #288]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f919 	bl	8000ca4 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a76:	e00c      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff f914 	bl	8000ca4 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4a43      	ldr	r2, [pc, #268]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d904      	bls.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001a88:	2313      	movs	r3, #19
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	701a      	strb	r2, [r3, #0]
          break;
 8001a90:	e004      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a92:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0ed      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001a9c:	2313      	movs	r3, #19
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa6:	4b37      	ldr	r3, [pc, #220]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	4a37      	ldr	r2, [pc, #220]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aba:	e005      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001abc:	2312      	movs	r3, #18
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2213      	movs	r2, #19
 8001ac2:	18ba      	adds	r2, r7, r2
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac8:	2311      	movs	r3, #17
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ad8:	492e      	ldr	r1, [pc, #184]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d009      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ae8:	4b26      	ldr	r3, [pc, #152]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	2203      	movs	r2, #3
 8001aee:	4393      	bics	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2240      	movs	r2, #64	@ 0x40
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b06:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	4a23      	ldr	r2, [pc, #140]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	01db      	lsls	r3, r3, #7
 8001b22:	4013      	ands	r3, r2
 8001b24:	d008      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b26:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	0899      	lsrs	r1, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da09      	bge.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	22e0      	movs	r2, #224	@ 0xe0
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001b74:	2312      	movs	r3, #18
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b006      	add	sp, #24
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	40021000 	.word	0x40021000
 8001b88:	fffffcff 	.word	0xfffffcff
 8001b8c:	fffeffff 	.word	0xfffeffff
 8001b90:	00001388 	.word	0x00001388
 8001b94:	efffffff 	.word	0xefffffff
 8001b98:	ffffcfff 	.word	0xffffcfff
 8001b9c:	ffff3fff 	.word	0xffff3fff

08001ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e046      	b.n	8001c40 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2288      	movs	r2, #136	@ 0x88
 8001bb6:	589b      	ldr	r3, [r3, r2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2284      	movs	r2, #132	@ 0x84
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7fe fe3e 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2288      	movs	r2, #136	@ 0x88
 8001bd0:	2124      	movs	r1, #36	@ 0x24
 8001bd2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 fde8 	bl	80027c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fc66 	bl	80024c8 <UART_SetConfig>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e01c      	b.n	8001c40 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <HAL_UART_Init+0xa8>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	212a      	movs	r1, #42	@ 0x2a
 8001c22:	438a      	bics	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 fe77 	bl	800292c <UART_CheckIdleState>
 8001c3e:	0003      	movs	r3, r0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	ffffb7ff 	.word	0xffffb7ff

08001c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	1dbb      	adds	r3, r7, #6
 8001c5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2288      	movs	r2, #136	@ 0x88
 8001c60:	589b      	ldr	r3, [r3, r2]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d000      	beq.n	8001c68 <HAL_UART_Transmit+0x1c>
 8001c66:	e090      	b.n	8001d8a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_Transmit+0x2a>
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e088      	b.n	8001d8c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d109      	bne.n	8001c9a <HAL_UART_Transmit+0x4e>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e078      	b.n	8001d8c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2290      	movs	r2, #144	@ 0x90
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2288      	movs	r2, #136	@ 0x88
 8001ca6:	2121      	movs	r1, #33	@ 0x21
 8001ca8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001caa:	f7fe fffb 	bl	8000ca4 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1dba      	adds	r2, r7, #6
 8001cb6:	2154      	movs	r1, #84	@ 0x54
 8001cb8:	8812      	ldrh	r2, [r2, #0]
 8001cba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1dba      	adds	r2, r7, #6
 8001cc0:	2156      	movs	r1, #86	@ 0x56
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	015b      	lsls	r3, r3, #5
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d108      	bne.n	8001ce4 <HAL_UART_Transmit+0x98>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	e003      	b.n	8001cec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cec:	e030      	b.n	8001d50 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	f000 fec0 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2288      	movs	r2, #136	@ 0x88
 8001d08:	2120      	movs	r1, #32
 8001d0a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e03d      	b.n	8001d8c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10b      	bne.n	8001d2e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	05d2      	lsls	r2, r2, #23
 8001d22:	0dd2      	lsrs	r2, r2, #23
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	e007      	b.n	8001d3e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2256      	movs	r2, #86	@ 0x56
 8001d42:	5a9b      	ldrh	r3, [r3, r2]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2256      	movs	r2, #86	@ 0x56
 8001d4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2256      	movs	r2, #86	@ 0x56
 8001d54:	5a9b      	ldrh	r3, [r3, r2]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1c8      	bne.n	8001cee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	0013      	movs	r3, r2
 8001d66:	2200      	movs	r2, #0
 8001d68:	2140      	movs	r1, #64	@ 0x40
 8001d6a:	f000 fe89 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2288      	movs	r2, #136	@ 0x88
 8001d76:	2120      	movs	r1, #32
 8001d78:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e006      	b.n	8001d8c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2288      	movs	r2, #136	@ 0x88
 8001d82:	2120      	movs	r1, #32
 8001d84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b008      	add	sp, #32
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	228c      	movs	r2, #140	@ 0x8c
 8001da6:	589b      	ldr	r3, [r3, r2]
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d145      	bne.n	8001e38 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_UART_Receive_IT+0x26>
 8001db2:	1dbb      	adds	r3, r7, #6
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e03d      	b.n	8001e3a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d109      	bne.n	8001dde <HAL_UART_Receive_IT+0x4a>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d001      	beq.n	8001dde <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e02d      	b.n	8001e3a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	4013      	ands	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001df2:	f3ef 8310 	mrs	r3, PRIMASK
 8001df6:	613b      	str	r3, [r7, #16]
  return(result);
 8001df8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f383 8810 	msr	PRIMASK, r3
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	04c9      	lsls	r1, r1, #19
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f383 8810 	msr	PRIMASK, r3
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e26:	1dbb      	adds	r3, r7, #6
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 fe90 	bl	8002b54 <UART_Start_Receive_IT>
 8001e34:	0003      	movs	r3, r0
 8001e36:	e000      	b.n	8001e3a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
  }
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b008      	add	sp, #32
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	b0aa      	sub	sp, #168	@ 0xa8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	22a4      	movs	r2, #164	@ 0xa4
 8001e54:	18b9      	adds	r1, r7, r2
 8001e56:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	20a0      	movs	r0, #160	@ 0xa0
 8001e60:	1839      	adds	r1, r7, r0
 8001e62:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	249c      	movs	r4, #156	@ 0x9c
 8001e6c:	1939      	adds	r1, r7, r4
 8001e6e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e70:	0011      	movs	r1, r2
 8001e72:	18bb      	adds	r3, r7, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4aa2      	ldr	r2, [pc, #648]	@ (8002100 <HAL_UART_IRQHandler+0x2bc>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2298      	movs	r2, #152	@ 0x98
 8001e7c:	18bd      	adds	r5, r7, r2
 8001e7e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001e80:	18bb      	adds	r3, r7, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d11a      	bne.n	8001ebe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d015      	beq.n	8001ebe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2220      	movs	r2, #32
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d105      	bne.n	8001ea8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00a      	beq.n	8001ebe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d100      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x6e>
 8001eb0:	e2dc      	b.n	800246c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	0010      	movs	r0, r2
 8001eba:	4798      	blx	r3
      }
      return;
 8001ebc:	e2d6      	b.n	800246c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ebe:	2398      	movs	r3, #152	@ 0x98
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <HAL_UART_IRQHandler+0x86>
 8001ec8:	e122      	b.n	8002110 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001eca:	239c      	movs	r3, #156	@ 0x9c
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a8c      	ldr	r2, [pc, #560]	@ (8002104 <HAL_UART_IRQHandler+0x2c0>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001ed6:	23a0      	movs	r3, #160	@ 0xa0
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a8a      	ldr	r2, [pc, #552]	@ (8002108 <HAL_UART_IRQHandler+0x2c4>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <HAL_UART_IRQHandler+0xa0>
 8001ee2:	e115      	b.n	8002110 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ee4:	23a4      	movs	r3, #164	@ 0xa4
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	d012      	beq.n	8001f16 <HAL_UART_IRQHandler+0xd2>
 8001ef0:	23a0      	movs	r3, #160	@ 0xa0
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	d00b      	beq.n	8001f16 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2290      	movs	r2, #144	@ 0x90
 8001f0a:	589b      	ldr	r3, [r3, r2]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2190      	movs	r1, #144	@ 0x90
 8001f14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f16:	23a4      	movs	r3, #164	@ 0xa4
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d011      	beq.n	8001f46 <HAL_UART_IRQHandler+0x102>
 8001f22:	239c      	movs	r3, #156	@ 0x9c
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2202      	movs	r2, #2
 8001f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2290      	movs	r2, #144	@ 0x90
 8001f3a:	589b      	ldr	r3, [r3, r2]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2190      	movs	r1, #144	@ 0x90
 8001f44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f46:	23a4      	movs	r3, #164	@ 0xa4
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d011      	beq.n	8001f76 <HAL_UART_IRQHandler+0x132>
 8001f52:	239c      	movs	r3, #156	@ 0x9c
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d00b      	beq.n	8001f76 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2204      	movs	r2, #4
 8001f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2290      	movs	r2, #144	@ 0x90
 8001f6a:	589b      	ldr	r3, [r3, r2]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2190      	movs	r1, #144	@ 0x90
 8001f74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f76:	23a4      	movs	r3, #164	@ 0xa4
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d017      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001f82:	23a0      	movs	r3, #160	@ 0xa0
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d105      	bne.n	8001f9a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001f8e:	239c      	movs	r3, #156	@ 0x9c
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5b      	ldr	r2, [pc, #364]	@ (8002104 <HAL_UART_IRQHandler+0x2c0>)
 8001f96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001f98:	d00b      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2290      	movs	r2, #144	@ 0x90
 8001fa6:	589b      	ldr	r3, [r3, r2]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2190      	movs	r1, #144	@ 0x90
 8001fb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fb2:	23a4      	movs	r3, #164	@ 0xa4
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x1a4>
 8001fc0:	23a0      	movs	r3, #160	@ 0xa0
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	04db      	lsls	r3, r3, #19
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2290      	movs	r2, #144	@ 0x90
 8001fdc:	589b      	ldr	r3, [r3, r2]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2190      	movs	r1, #144	@ 0x90
 8001fe6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2290      	movs	r2, #144	@ 0x90
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d100      	bne.n	8001ff4 <HAL_UART_IRQHandler+0x1b0>
 8001ff2:	e23d      	b.n	8002470 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001ff4:	23a4      	movs	r3, #164	@ 0xa4
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d015      	beq.n	800202c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002000:	23a0      	movs	r3, #160	@ 0xa0
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	d106      	bne.n	800201a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800200c:	239c      	movs	r3, #156	@ 0x9c
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	055b      	lsls	r3, r3, #21
 8002016:	4013      	ands	r3, r2
 8002018:	d008      	beq.n	800202c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	0010      	movs	r0, r2
 800202a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2290      	movs	r2, #144	@ 0x90
 8002030:	589b      	ldr	r3, [r3, r2]
 8002032:	2194      	movs	r1, #148	@ 0x94
 8002034:	187a      	adds	r2, r7, r1
 8002036:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	4013      	ands	r3, r2
 8002042:	2b40      	cmp	r3, #64	@ 0x40
 8002044:	d004      	beq.n	8002050 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002046:	187b      	adds	r3, r7, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2228      	movs	r2, #40	@ 0x28
 800204c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800204e:	d04c      	beq.n	80020ea <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fea2 	bl	8002d9c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2240      	movs	r2, #64	@ 0x40
 8002060:	4013      	ands	r3, r2
 8002062:	2b40      	cmp	r3, #64	@ 0x40
 8002064:	d13c      	bne.n	80020e0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002066:	f3ef 8310 	mrs	r3, PRIMASK
 800206a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800206c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800206e:	2090      	movs	r0, #144	@ 0x90
 8002070:	183a      	adds	r2, r7, r0
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800207a:	f383 8810 	msr	PRIMASK, r3
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2140      	movs	r1, #64	@ 0x40
 800208c:	438a      	bics	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	183b      	adds	r3, r7, r0
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002098:	f383 8810 	msr	PRIMASK, r3
}
 800209c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	589b      	ldr	r3, [r3, r2]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2280      	movs	r2, #128	@ 0x80
 80020ac:	589b      	ldr	r3, [r3, r2]
 80020ae:	4a17      	ldr	r2, [pc, #92]	@ (800210c <HAL_UART_IRQHandler+0x2c8>)
 80020b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2280      	movs	r2, #128	@ 0x80
 80020b6:	589b      	ldr	r3, [r3, r2]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe ff4d 	bl	8000f58 <HAL_DMA_Abort_IT>
 80020be:	1e03      	subs	r3, r0, #0
 80020c0:	d01c      	beq.n	80020fc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	589b      	ldr	r3, [r3, r2]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	5852      	ldr	r2, [r2, r1]
 80020d0:	0010      	movs	r0, r2
 80020d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d4:	e012      	b.n	80020fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f9e1 	bl	80024a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020de:	e00d      	b.n	80020fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f9dc 	bl	80024a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	e008      	b.n	80020fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f9d7 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2290      	movs	r2, #144	@ 0x90
 80020f6:	2100      	movs	r1, #0
 80020f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80020fa:	e1b9      	b.n	8002470 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fc:	46c0      	nop			@ (mov r8, r8)
    return;
 80020fe:	e1b7      	b.n	8002470 <HAL_UART_IRQHandler+0x62c>
 8002100:	0000080f 	.word	0x0000080f
 8002104:	10000001 	.word	0x10000001
 8002108:	04000120 	.word	0x04000120
 800210c:	08002e69 	.word	0x08002e69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d000      	beq.n	800211a <HAL_UART_IRQHandler+0x2d6>
 8002118:	e13e      	b.n	8002398 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800211a:	23a4      	movs	r3, #164	@ 0xa4
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	4013      	ands	r3, r2
 8002124:	d100      	bne.n	8002128 <HAL_UART_IRQHandler+0x2e4>
 8002126:	e137      	b.n	8002398 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002128:	23a0      	movs	r3, #160	@ 0xa0
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <HAL_UART_IRQHandler+0x2f2>
 8002134:	e130      	b.n	8002398 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	2b40      	cmp	r3, #64	@ 0x40
 800214a:	d000      	beq.n	800214e <HAL_UART_IRQHandler+0x30a>
 800214c:	e0a4      	b.n	8002298 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	589b      	ldr	r3, [r3, r2]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	217e      	movs	r1, #126	@ 0x7e
 800215a:	187b      	adds	r3, r7, r1
 800215c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800215e:	187b      	adds	r3, r7, r1
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d100      	bne.n	8002168 <HAL_UART_IRQHandler+0x324>
 8002166:	e185      	b.n	8002474 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	225c      	movs	r2, #92	@ 0x5c
 800216c:	5a9b      	ldrh	r3, [r3, r2]
 800216e:	187a      	adds	r2, r7, r1
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d300      	bcc.n	8002178 <HAL_UART_IRQHandler+0x334>
 8002176:	e17d      	b.n	8002474 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	187a      	adds	r2, r7, r1
 800217c:	215e      	movs	r1, #94	@ 0x5e
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	589b      	ldr	r3, [r3, r2]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	4013      	ands	r3, r2
 8002190:	d170      	bne.n	8002274 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002192:	f3ef 8310 	mrs	r3, PRIMASK
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800219a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800219c:	2301      	movs	r3, #1
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a2:	f383 8810 	msr	PRIMASK, r3
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	49b4      	ldr	r1, [pc, #720]	@ (8002484 <HAL_UART_IRQHandler+0x640>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021be:	f383 8810 	msr	PRIMASK, r3
}
 80021c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021c4:	f3ef 8310 	mrs	r3, PRIMASK
 80021c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80021ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80021ce:	2301      	movs	r3, #1
 80021d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	438a      	bics	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f0:	f383 8810 	msr	PRIMASK, r3
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021f6:	f3ef 8310 	mrs	r3, PRIMASK
 80021fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80021fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002200:	2301      	movs	r3, #1
 8002202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2140      	movs	r1, #64	@ 0x40
 8002218:	438a      	bics	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800221e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002222:	f383 8810 	msr	PRIMASK, r3
}
 8002226:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	228c      	movs	r2, #140	@ 0x8c
 800222c:	2120      	movs	r1, #32
 800222e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002236:	f3ef 8310 	mrs	r3, PRIMASK
 800223a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800223c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800223e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002240:	2301      	movs	r3, #1
 8002242:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002246:	f383 8810 	msr	PRIMASK, r3
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2110      	movs	r1, #16
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800225e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002262:	f383 8810 	msr	PRIMASK, r3
}
 8002266:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	589b      	ldr	r3, [r3, r2]
 800226e:	0018      	movs	r0, r3
 8002270:	f7fe fe10 	bl	8000e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	225c      	movs	r2, #92	@ 0x5c
 800227e:	5a9a      	ldrh	r2, [r3, r2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	215e      	movs	r1, #94	@ 0x5e
 8002284:	5a5b      	ldrh	r3, [r3, r1]
 8002286:	b29b      	uxth	r3, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f000 f90d 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002296:	e0ed      	b.n	8002474 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	225c      	movs	r2, #92	@ 0x5c
 800229c:	5a99      	ldrh	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	225e      	movs	r2, #94	@ 0x5e
 80022a2:	5a9b      	ldrh	r3, [r3, r2]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	208e      	movs	r0, #142	@ 0x8e
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	1a8a      	subs	r2, r1, r2
 80022ac:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	225e      	movs	r2, #94	@ 0x5e
 80022b2:	5a9b      	ldrh	r3, [r3, r2]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d100      	bne.n	80022bc <HAL_UART_IRQHandler+0x478>
 80022ba:	e0dd      	b.n	8002478 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80022bc:	183b      	adds	r3, r7, r0
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d100      	bne.n	80022c6 <HAL_UART_IRQHandler+0x482>
 80022c4:	e0d8      	b.n	8002478 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022c6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80022cc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80022ce:	2488      	movs	r4, #136	@ 0x88
 80022d0:	193a      	adds	r2, r7, r4
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4967      	ldr	r1, [pc, #412]	@ (8002488 <HAL_UART_IRQHandler+0x644>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f383 8810 	msr	PRIMASK, r3
}
 80022fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002302:	61bb      	str	r3, [r7, #24]
  return(result);
 8002304:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002306:	2484      	movs	r4, #132	@ 0x84
 8002308:	193a      	adds	r2, r7, r4
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	495a      	ldr	r1, [pc, #360]	@ (800248c <HAL_UART_IRQHandler+0x648>)
 8002324:	400a      	ands	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	193b      	adds	r3, r7, r4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f383 8810 	msr	PRIMASK, r3
}
 8002334:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	228c      	movs	r2, #140	@ 0x8c
 800233a:	2120      	movs	r1, #32
 800233c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800234a:	f3ef 8310 	mrs	r3, PRIMASK
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002352:	2480      	movs	r4, #128	@ 0x80
 8002354:	193a      	adds	r2, r7, r4
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235e:	f383 8810 	msr	PRIMASK, r3
}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2110      	movs	r1, #16
 8002370:	438a      	bics	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	193b      	adds	r3, r7, r4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	f383 8810 	msr	PRIMASK, r3
}
 8002380:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002388:	183b      	adds	r3, r7, r0
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0011      	movs	r1, r2
 8002390:	0018      	movs	r0, r3
 8002392:	f000 f88d 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002396:	e06f      	b.n	8002478 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002398:	23a4      	movs	r3, #164	@ 0xa4
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	035b      	lsls	r3, r3, #13
 80023a2:	4013      	ands	r3, r2
 80023a4:	d010      	beq.n	80023c8 <HAL_UART_IRQHandler+0x584>
 80023a6:	239c      	movs	r3, #156	@ 0x9c
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	03db      	lsls	r3, r3, #15
 80023b0:	4013      	ands	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2280      	movs	r2, #128	@ 0x80
 80023ba:	0352      	lsls	r2, r2, #13
 80023bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f001 fa89 	bl	80038d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023c6:	e05a      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80023c8:	23a4      	movs	r3, #164	@ 0xa4
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	4013      	ands	r3, r2
 80023d2:	d016      	beq.n	8002402 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80023d4:	23a0      	movs	r3, #160	@ 0xa0
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	4013      	ands	r3, r2
 80023de:	d106      	bne.n	80023ee <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80023e0:	239c      	movs	r3, #156	@ 0x9c
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	4013      	ands	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d042      	beq.n	800247c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	0010      	movs	r0, r2
 80023fe:	4798      	blx	r3
    }
    return;
 8002400:	e03c      	b.n	800247c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002402:	23a4      	movs	r3, #164	@ 0xa4
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2240      	movs	r2, #64	@ 0x40
 800240a:	4013      	ands	r3, r2
 800240c:	d00a      	beq.n	8002424 <HAL_UART_IRQHandler+0x5e0>
 800240e:	23a0      	movs	r3, #160	@ 0xa0
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2240      	movs	r2, #64	@ 0x40
 8002416:	4013      	ands	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fd3a 	bl	8002e96 <UART_EndTransmit_IT>
    return;
 8002422:	e02c      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002424:	23a4      	movs	r3, #164	@ 0xa4
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	4013      	ands	r3, r2
 8002430:	d00b      	beq.n	800244a <HAL_UART_IRQHandler+0x606>
 8002432:	23a0      	movs	r3, #160	@ 0xa0
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	05db      	lsls	r3, r3, #23
 800243c:	4013      	ands	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f001 fa58 	bl	80038f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002448:	e019      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800244a:	23a4      	movs	r3, #164	@ 0xa4
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	045b      	lsls	r3, r3, #17
 8002454:	4013      	ands	r3, r2
 8002456:	d012      	beq.n	800247e <HAL_UART_IRQHandler+0x63a>
 8002458:	23a0      	movs	r3, #160	@ 0xa0
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	da0d      	bge.n	800247e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f001 fa3f 	bl	80038e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800246a:	e008      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
      return;
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	e006      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
    return;
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	e004      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
      return;
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	e002      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
      return;
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	e000      	b.n	800247e <HAL_UART_IRQHandler+0x63a>
    return;
 800247c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800247e:	46bd      	mov	sp, r7
 8002480:	b02a      	add	sp, #168	@ 0xa8
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	fffffeff 	.word	0xfffffeff
 8002488:	fffffedf 	.word	0xfffffedf
 800248c:	effffffe 	.word	0xeffffffe

08002490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	000a      	movs	r2, r1
 80024ba:	1cbb      	adds	r3, r7, #2
 80024bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024d0:	231e      	movs	r3, #30
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4aab      	ldr	r2, [pc, #684]	@ (80027a4 <UART_SetConfig+0x2dc>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4aa6      	ldr	r2, [pc, #664]	@ (80027a8 <UART_SetConfig+0x2e0>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a9d      	ldr	r2, [pc, #628]	@ (80027ac <UART_SetConfig+0x2e4>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	220f      	movs	r2, #15
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a93      	ldr	r2, [pc, #588]	@ (80027b0 <UART_SetConfig+0x2e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d127      	bne.n	80025b6 <UART_SetConfig+0xee>
 8002566:	4b93      	ldr	r3, [pc, #588]	@ (80027b4 <UART_SetConfig+0x2ec>)
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	2203      	movs	r2, #3
 800256c:	4013      	ands	r3, r2
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <UART_SetConfig+0xda>
 8002572:	d81b      	bhi.n	80025ac <UART_SetConfig+0xe4>
 8002574:	2b02      	cmp	r3, #2
 8002576:	d00a      	beq.n	800258e <UART_SetConfig+0xc6>
 8002578:	d818      	bhi.n	80025ac <UART_SetConfig+0xe4>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <UART_SetConfig+0xbc>
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00a      	beq.n	8002598 <UART_SetConfig+0xd0>
 8002582:	e013      	b.n	80025ac <UART_SetConfig+0xe4>
 8002584:	231f      	movs	r3, #31
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e021      	b.n	80025d2 <UART_SetConfig+0x10a>
 800258e:	231f      	movs	r3, #31
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e01c      	b.n	80025d2 <UART_SetConfig+0x10a>
 8002598:	231f      	movs	r3, #31
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2204      	movs	r2, #4
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e017      	b.n	80025d2 <UART_SetConfig+0x10a>
 80025a2:	231f      	movs	r3, #31
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2208      	movs	r2, #8
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e012      	b.n	80025d2 <UART_SetConfig+0x10a>
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2210      	movs	r2, #16
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e00d      	b.n	80025d2 <UART_SetConfig+0x10a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7f      	ldr	r2, [pc, #508]	@ (80027b8 <UART_SetConfig+0x2f0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d104      	bne.n	80025ca <UART_SetConfig+0x102>
 80025c0:	231f      	movs	r3, #31
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e003      	b.n	80025d2 <UART_SetConfig+0x10a>
 80025ca:	231f      	movs	r3, #31
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2210      	movs	r2, #16
 80025d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	429a      	cmp	r2, r3
 80025dc:	d000      	beq.n	80025e0 <UART_SetConfig+0x118>
 80025de:	e06f      	b.n	80026c0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d01f      	beq.n	800262a <UART_SetConfig+0x162>
 80025ea:	dc22      	bgt.n	8002632 <UART_SetConfig+0x16a>
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d017      	beq.n	8002620 <UART_SetConfig+0x158>
 80025f0:	dc1f      	bgt.n	8002632 <UART_SetConfig+0x16a>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <UART_SetConfig+0x134>
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d005      	beq.n	8002606 <UART_SetConfig+0x13e>
 80025fa:	e01a      	b.n	8002632 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025fc:	f7ff f9ca 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8002600:	0003      	movs	r3, r0
 8002602:	61bb      	str	r3, [r7, #24]
        break;
 8002604:	e01c      	b.n	8002640 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002606:	4b6b      	ldr	r3, [pc, #428]	@ (80027b4 <UART_SetConfig+0x2ec>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2207      	movs	r2, #7
 800260e:	4013      	ands	r3, r2
 8002610:	3301      	adds	r3, #1
 8002612:	0019      	movs	r1, r3
 8002614:	4869      	ldr	r0, [pc, #420]	@ (80027bc <UART_SetConfig+0x2f4>)
 8002616:	f7fd fd89 	bl	800012c <__udivsi3>
 800261a:	0003      	movs	r3, r0
 800261c:	61bb      	str	r3, [r7, #24]
        break;
 800261e:	e00f      	b.n	8002640 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002620:	f7ff f96c 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
        break;
 8002628:	e00a      	b.n	8002640 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	61bb      	str	r3, [r7, #24]
        break;
 8002630:	e006      	b.n	8002640 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002636:	231e      	movs	r3, #30
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
        break;
 800263e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d100      	bne.n	8002648 <UART_SetConfig+0x180>
 8002646:	e097      	b.n	8002778 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800264c:	4b5c      	ldr	r3, [pc, #368]	@ (80027c0 <UART_SetConfig+0x2f8>)
 800264e:	0052      	lsls	r2, r2, #1
 8002650:	5ad3      	ldrh	r3, [r2, r3]
 8002652:	0019      	movs	r1, r3
 8002654:	69b8      	ldr	r0, [r7, #24]
 8002656:	f7fd fd69 	bl	800012c <__udivsi3>
 800265a:	0003      	movs	r3, r0
 800265c:	005a      	lsls	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	18d2      	adds	r2, r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0019      	movs	r1, r3
 800266c:	0010      	movs	r0, r2
 800266e:	f7fd fd5d 	bl	800012c <__udivsi3>
 8002672:	0003      	movs	r3, r0
 8002674:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d91c      	bls.n	80026b6 <UART_SetConfig+0x1ee>
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	429a      	cmp	r2, r3
 8002684:	d217      	bcs.n	80026b6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	b29a      	uxth	r2, r3
 800268a:	200e      	movs	r0, #14
 800268c:	183b      	adds	r3, r7, r0
 800268e:	210f      	movs	r1, #15
 8002690:	438a      	bics	r2, r1
 8002692:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	b29b      	uxth	r3, r3
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	b299      	uxth	r1, r3
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	183a      	adds	r2, r7, r0
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	183a      	adds	r2, r7, r0
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	e060      	b.n	8002778 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80026b6:	231e      	movs	r3, #30
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e05b      	b.n	8002778 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026c0:	231f      	movs	r3, #31
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d01f      	beq.n	800270a <UART_SetConfig+0x242>
 80026ca:	dc22      	bgt.n	8002712 <UART_SetConfig+0x24a>
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d017      	beq.n	8002700 <UART_SetConfig+0x238>
 80026d0:	dc1f      	bgt.n	8002712 <UART_SetConfig+0x24a>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <UART_SetConfig+0x214>
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d005      	beq.n	80026e6 <UART_SetConfig+0x21e>
 80026da:	e01a      	b.n	8002712 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026dc:	f7ff f95a 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        break;
 80026e4:	e01c      	b.n	8002720 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <UART_SetConfig+0x2ec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2207      	movs	r2, #7
 80026ee:	4013      	ands	r3, r2
 80026f0:	3301      	adds	r3, #1
 80026f2:	0019      	movs	r1, r3
 80026f4:	4831      	ldr	r0, [pc, #196]	@ (80027bc <UART_SetConfig+0x2f4>)
 80026f6:	f7fd fd19 	bl	800012c <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	61bb      	str	r3, [r7, #24]
        break;
 80026fe:	e00f      	b.n	8002720 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002700:	f7ff f8fc 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 8002704:	0003      	movs	r3, r0
 8002706:	61bb      	str	r3, [r7, #24]
        break;
 8002708:	e00a      	b.n	8002720 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	61bb      	str	r3, [r7, #24]
        break;
 8002710:	e006      	b.n	8002720 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002716:	231e      	movs	r3, #30
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
        break;
 800271e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d028      	beq.n	8002778 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <UART_SetConfig+0x2f8>)
 800272c:	0052      	lsls	r2, r2, #1
 800272e:	5ad3      	ldrh	r3, [r2, r3]
 8002730:	0019      	movs	r1, r3
 8002732:	69b8      	ldr	r0, [r7, #24]
 8002734:	f7fd fcfa 	bl	800012c <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	001a      	movs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	18d2      	adds	r2, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0019      	movs	r1, r3
 800274a:	0010      	movs	r0, r2
 800274c:	f7fd fcee 	bl	800012c <__udivsi3>
 8002750:	0003      	movs	r3, r0
 8002752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d90a      	bls.n	8002770 <UART_SetConfig+0x2a8>
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d205      	bcs.n	8002770 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	e003      	b.n	8002778 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002770:	231e      	movs	r3, #30
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	226a      	movs	r2, #106	@ 0x6a
 800277c:	2101      	movs	r1, #1
 800277e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2268      	movs	r2, #104	@ 0x68
 8002784:	2101      	movs	r1, #1
 8002786:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002794:	231e      	movs	r3, #30
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	781b      	ldrb	r3, [r3, #0]
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b008      	add	sp, #32
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	cfff69f3 	.word	0xcfff69f3
 80027a8:	ffffcfff 	.word	0xffffcfff
 80027ac:	11fff4ff 	.word	0x11fff4ff
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40004400 	.word	0x40004400
 80027bc:	02dc6c00 	.word	0x02dc6c00
 80027c0:	08005190 	.word	0x08005190

080027c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	2208      	movs	r2, #8
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00b      	beq.n	80027ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002908 <UART_AdvFeatureConfig+0x144>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d00b      	beq.n	8002810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a43      	ldr	r2, [pc, #268]	@ (800290c <UART_AdvFeatureConfig+0x148>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	2202      	movs	r2, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d00b      	beq.n	8002832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a3b      	ldr	r2, [pc, #236]	@ (8002910 <UART_AdvFeatureConfig+0x14c>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	2204      	movs	r2, #4
 8002838:	4013      	ands	r3, r2
 800283a:	d00b      	beq.n	8002854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a34      	ldr	r2, [pc, #208]	@ (8002914 <UART_AdvFeatureConfig+0x150>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	2210      	movs	r2, #16
 800285a:	4013      	ands	r3, r2
 800285c:	d00b      	beq.n	8002876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a2c      	ldr	r2, [pc, #176]	@ (8002918 <UART_AdvFeatureConfig+0x154>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2220      	movs	r2, #32
 800287c:	4013      	ands	r3, r2
 800287e:	d00b      	beq.n	8002898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a25      	ldr	r2, [pc, #148]	@ (800291c <UART_AdvFeatureConfig+0x158>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	2240      	movs	r2, #64	@ 0x40
 800289e:	4013      	ands	r3, r2
 80028a0:	d01d      	beq.n	80028de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <UART_AdvFeatureConfig+0x15c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	035b      	lsls	r3, r3, #13
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10b      	bne.n	80028de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <UART_AdvFeatureConfig+0x160>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	2280      	movs	r2, #128	@ 0x80
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00b      	beq.n	8002900 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <UART_AdvFeatureConfig+0x164>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  }
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}
 8002908:	ffff7fff 	.word	0xffff7fff
 800290c:	fffdffff 	.word	0xfffdffff
 8002910:	fffeffff 	.word	0xfffeffff
 8002914:	fffbffff 	.word	0xfffbffff
 8002918:	ffffefff 	.word	0xffffefff
 800291c:	ffffdfff 	.word	0xffffdfff
 8002920:	ffefffff 	.word	0xffefffff
 8002924:	ff9fffff 	.word	0xff9fffff
 8002928:	fff7ffff 	.word	0xfff7ffff

0800292c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b092      	sub	sp, #72	@ 0x48
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2290      	movs	r2, #144	@ 0x90
 8002938:	2100      	movs	r1, #0
 800293a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800293c:	f7fe f9b2 	bl	8000ca4 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2208      	movs	r2, #8
 800294c:	4013      	ands	r3, r2
 800294e:	2b08      	cmp	r3, #8
 8002950:	d12d      	bne.n	80029ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	0391      	lsls	r1, r2, #14
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4a47      	ldr	r2, [pc, #284]	@ (8002a78 <UART_CheckIdleState+0x14c>)
 800295c:	9200      	str	r2, [sp, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	f000 f88e 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d022      	beq.n	80029ae <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002968:	f3ef 8310 	mrs	r3, PRIMASK
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002970:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002972:	2301      	movs	r3, #1
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	438a      	bics	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2288      	movs	r2, #136	@ 0x88
 800299e:	2120      	movs	r1, #32
 80029a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2284      	movs	r2, #132	@ 0x84
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e060      	b.n	8002a70 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2204      	movs	r2, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d146      	bne.n	8002a4a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	03d1      	lsls	r1, r2, #15
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a78 <UART_CheckIdleState+0x14c>)
 80029c6:	9200      	str	r2, [sp, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f000 f859 	bl	8002a80 <UART_WaitOnFlagUntilTimeout>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d03b      	beq.n	8002a4a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029d2:	f3ef 8310 	mrs	r3, PRIMASK
 80029d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80029d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <UART_CheckIdleState+0x150>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a04:	f3ef 8310 	mrs	r3, PRIMASK
 8002a08:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a0a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f383 8810 	msr	PRIMASK, r3
}
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	438a      	bics	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f383 8810 	msr	PRIMASK, r3
}
 8002a34:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	228c      	movs	r2, #140	@ 0x8c
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2284      	movs	r2, #132	@ 0x84
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e012      	b.n	8002a70 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2288      	movs	r2, #136	@ 0x88
 8002a4e:	2120      	movs	r1, #32
 8002a50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	228c      	movs	r2, #140	@ 0x8c
 8002a56:	2120      	movs	r1, #32
 8002a58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2284      	movs	r2, #132	@ 0x84
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b010      	add	sp, #64	@ 0x40
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	01ffffff 	.word	0x01ffffff
 8002a7c:	fffffedf 	.word	0xfffffedf

08002a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a90:	e04b      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3301      	adds	r3, #1
 8002a96:	d048      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7fe f904 	bl	8000ca4 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04b      	b.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4013      	ands	r3, r2
 8002abc:	d035      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d111      	bne.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f960 	bl	8002d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2290      	movs	r2, #144	@ 0x90
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2284      	movs	r2, #132	@ 0x84
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e02c      	b.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	401a      	ands	r2, r3
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d112      	bne.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f943 	bl	8002d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2290      	movs	r2, #144	@ 0x90
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2284      	movs	r2, #132	@ 0x84
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e00f      	b.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	425a      	negs	r2, r3
 8002b3a:	4153      	adcs	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	001a      	movs	r2, r3
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d0a4      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b098      	sub	sp, #96	@ 0x60
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	1dbb      	adds	r3, r7, #6
 8002b60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1dba      	adds	r2, r7, #6
 8002b6c:	215c      	movs	r1, #92	@ 0x5c
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1dba      	adds	r2, r7, #6
 8002b76:	215e      	movs	r1, #94	@ 0x5e
 8002b78:	8812      	ldrh	r2, [r2, #0]
 8002b7a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	015b      	lsls	r3, r3, #5
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10d      	bne.n	8002baa <UART_Start_Receive_IT+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <UART_Start_Receive_IT+0x4c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2260      	movs	r2, #96	@ 0x60
 8002b9a:	497b      	ldr	r1, [pc, #492]	@ (8002d88 <UART_Start_Receive_IT+0x234>)
 8002b9c:	5299      	strh	r1, [r3, r2]
 8002b9e:	e02e      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2260      	movs	r2, #96	@ 0x60
 8002ba4:	21ff      	movs	r1, #255	@ 0xff
 8002ba6:	5299      	strh	r1, [r3, r2]
 8002ba8:	e029      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <UART_Start_Receive_IT+0x7a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <UART_Start_Receive_IT+0x70>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2260      	movs	r2, #96	@ 0x60
 8002bbe:	21ff      	movs	r1, #255	@ 0xff
 8002bc0:	5299      	strh	r1, [r3, r2]
 8002bc2:	e01c      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2260      	movs	r2, #96	@ 0x60
 8002bc8:	217f      	movs	r1, #127	@ 0x7f
 8002bca:	5299      	strh	r1, [r3, r2]
 8002bcc:	e017      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	055b      	lsls	r3, r3, #21
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10d      	bne.n	8002bf6 <UART_Start_Receive_IT+0xa2>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <UART_Start_Receive_IT+0x98>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2260      	movs	r2, #96	@ 0x60
 8002be6:	217f      	movs	r1, #127	@ 0x7f
 8002be8:	5299      	strh	r1, [r3, r2]
 8002bea:	e008      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2260      	movs	r2, #96	@ 0x60
 8002bf0:	213f      	movs	r1, #63	@ 0x3f
 8002bf2:	5299      	strh	r1, [r3, r2]
 8002bf4:	e003      	b.n	8002bfe <UART_Start_Receive_IT+0xaa>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2260      	movs	r2, #96	@ 0x60
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2290      	movs	r2, #144	@ 0x90
 8002c02:	2100      	movs	r1, #0
 8002c04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	228c      	movs	r2, #140	@ 0x8c
 8002c0a:	2122      	movs	r1, #34	@ 0x22
 8002c0c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c12:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c18:	2301      	movs	r3, #1
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3a:	f383 8810 	msr	PRIMASK, r3
}
 8002c3e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	059b      	lsls	r3, r3, #22
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d150      	bne.n	8002cee <UART_Start_Receive_IT+0x19a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2268      	movs	r2, #104	@ 0x68
 8002c50:	5a9b      	ldrh	r3, [r3, r2]
 8002c52:	1dba      	adds	r2, r7, #6
 8002c54:	8812      	ldrh	r2, [r2, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d349      	bcc.n	8002cee <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	015b      	lsls	r3, r3, #5
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d107      	bne.n	8002c76 <UART_Start_Receive_IT+0x122>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a46      	ldr	r2, [pc, #280]	@ (8002d8c <UART_Start_Receive_IT+0x238>)
 8002c72:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c74:	e002      	b.n	8002c7c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a45      	ldr	r2, [pc, #276]	@ (8002d90 <UART_Start_Receive_IT+0x23c>)
 8002c7a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d019      	beq.n	8002cb8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c84:	f3ef 8310 	mrs	r3, PRIMASK
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c8e:	2301      	movs	r3, #1
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2180      	movs	r1, #128	@ 0x80
 8002ca6:	0049      	lsls	r1, r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0549      	lsls	r1, r1, #21
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	e047      	b.n	8002d7e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	015b      	lsls	r3, r3, #5
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d107      	bne.n	8002d0a <UART_Start_Receive_IT+0x1b6>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a23      	ldr	r2, [pc, #140]	@ (8002d94 <UART_Start_Receive_IT+0x240>)
 8002d06:	675a      	str	r2, [r3, #116]	@ 0x74
 8002d08:	e002      	b.n	8002d10 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a22      	ldr	r2, [pc, #136]	@ (8002d98 <UART_Start_Receive_IT+0x244>)
 8002d0e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d019      	beq.n	8002d4c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d22:	2301      	movs	r3, #1
 8002d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2190      	movs	r1, #144	@ 0x90
 8002d3a:	0049      	lsls	r1, r1, #1
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	e018      	b.n	8002d7e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d50:	613b      	str	r3, [r7, #16]
  return(result);
 8002d52:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d56:	2301      	movs	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b018      	add	sp, #96	@ 0x60
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	000001ff 	.word	0x000001ff
 8002d8c:	08003591 	.word	0x08003591
 8002d90:	08003261 	.word	0x08003261
 8002d94:	080030a9 	.word	0x080030a9
 8002d98:	08002ef1 	.word	0x08002ef1

08002d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	@ 0x38
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	617b      	str	r3, [r7, #20]
  return(result);
 8002daa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4926      	ldr	r1, [pc, #152]	@ (8002e60 <UART_EndRxTransfer+0xc4>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	623b      	str	r3, [r7, #32]
  return(result);
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de0:	2301      	movs	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	f383 8810 	msr	PRIMASK, r3
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	491b      	ldr	r1, [pc, #108]	@ (8002e64 <UART_EndRxTransfer+0xc8>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d118      	bne.n	8002e42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e10:	f3ef 8310 	mrs	r3, PRIMASK
 8002e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f383 8810 	msr	PRIMASK, r3
}
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2110      	movs	r1, #16
 8002e32:	438a      	bics	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f383 8810 	msr	PRIMASK, r3
}
 8002e40:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	228c      	movs	r2, #140	@ 0x8c
 8002e46:	2120      	movs	r1, #32
 8002e48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b00e      	add	sp, #56	@ 0x38
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	fffffedf 	.word	0xfffffedf
 8002e64:	effffffe 	.word	0xeffffffe

08002e68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	225e      	movs	r2, #94	@ 0x5e
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2256      	movs	r2, #86	@ 0x56
 8002e82:	2100      	movs	r1, #0
 8002e84:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff fb09 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2140      	movs	r1, #64	@ 0x40
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2288      	movs	r2, #136	@ 0x88
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fad5 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b094      	sub	sp, #80	@ 0x50
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ef8:	204e      	movs	r0, #78	@ 0x4e
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	2160      	movs	r1, #96	@ 0x60
 8002f00:	5a52      	ldrh	r2, [r2, r1]
 8002f02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	228c      	movs	r2, #140	@ 0x8c
 8002f08:	589b      	ldr	r3, [r3, r2]
 8002f0a:	2b22      	cmp	r3, #34	@ 0x22
 8002f0c:	d000      	beq.n	8002f10 <UART_RxISR_8BIT+0x20>
 8002f0e:	e0ba      	b.n	8003086 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f16:	214c      	movs	r1, #76	@ 0x4c
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	183b      	adds	r3, r7, r0
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b2d9      	uxtb	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	225e      	movs	r2, #94	@ 0x5e
 8002f40:	5a9b      	ldrh	r3, [r3, r2]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b299      	uxth	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	225e      	movs	r2, #94	@ 0x5e
 8002f4c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	225e      	movs	r2, #94	@ 0x5e
 8002f52:	5a9b      	ldrh	r3, [r3, r2]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d000      	beq.n	8002f5c <UART_RxISR_8BIT+0x6c>
 8002f5a:	e09c      	b.n	8003096 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f66:	2301      	movs	r3, #1
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4948      	ldr	r1, [pc, #288]	@ (80030a0 <UART_RxISR_8BIT+0x1b0>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f98:	2301      	movs	r3, #1
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	f383 8810 	msr	PRIMASK, r3
}
 8002fbe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	228c      	movs	r2, #140	@ 0x8c
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d018      	beq.n	8003014 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fec:	2301      	movs	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4928      	ldr	r1, [pc, #160]	@ (80030a4 <UART_RxISR_8BIT+0x1b4>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800300a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d12f      	bne.n	800307c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	60fb      	str	r3, [r7, #12]
  return(result);
 8003028:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2110      	movs	r1, #16
 8003044:	438a      	bics	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f383 8810 	msr	PRIMASK, r3
}
 8003052:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	2210      	movs	r2, #16
 800305c:	4013      	ands	r3, r2
 800305e:	2b10      	cmp	r3, #16
 8003060:	d103      	bne.n	800306a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	225c      	movs	r2, #92	@ 0x5c
 800306e:	5a9a      	ldrh	r2, [r3, r2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff fa1b 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800307a:	e00c      	b.n	8003096 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f7fd fa80 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 8003084:	e007      	b.n	8003096 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2108      	movs	r1, #8
 8003092:	430a      	orrs	r2, r1
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b014      	add	sp, #80	@ 0x50
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	fffffedf 	.word	0xfffffedf
 80030a4:	fbffffff 	.word	0xfbffffff

080030a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b094      	sub	sp, #80	@ 0x50
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80030b0:	204e      	movs	r0, #78	@ 0x4e
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	2160      	movs	r1, #96	@ 0x60
 80030b8:	5a52      	ldrh	r2, [r2, r1]
 80030ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	228c      	movs	r2, #140	@ 0x8c
 80030c0:	589b      	ldr	r3, [r3, r2]
 80030c2:	2b22      	cmp	r3, #34	@ 0x22
 80030c4:	d000      	beq.n	80030c8 <UART_RxISR_16BIT+0x20>
 80030c6:	e0ba      	b.n	800323e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ce:	214c      	movs	r1, #76	@ 0x4c
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	183a      	adds	r2, r7, r0
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	8812      	ldrh	r2, [r2, #0]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	1c9a      	adds	r2, r3, #2
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	225e      	movs	r2, #94	@ 0x5e
 80030f8:	5a9b      	ldrh	r3, [r3, r2]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b299      	uxth	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	225e      	movs	r2, #94	@ 0x5e
 8003104:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	225e      	movs	r2, #94	@ 0x5e
 800310a:	5a9b      	ldrh	r3, [r3, r2]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d000      	beq.n	8003114 <UART_RxISR_16BIT+0x6c>
 8003112:	e09c      	b.n	800324e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003114:	f3ef 8310 	mrs	r3, PRIMASK
 8003118:	623b      	str	r3, [r7, #32]
  return(result);
 800311a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4948      	ldr	r1, [pc, #288]	@ (8003258 <UART_RxISR_16BIT+0x1b0>)
 8003136:	400a      	ands	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003146:	f3ef 8310 	mrs	r3, PRIMASK
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003150:	2301      	movs	r3, #1
 8003152:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	438a      	bics	r2, r1
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	228c      	movs	r2, #140	@ 0x8c
 800317c:	2120      	movs	r1, #32
 800317e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	4013      	ands	r3, r2
 8003198:	d018      	beq.n	80031cc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800319a:	f3ef 8310 	mrs	r3, PRIMASK
 800319e:	617b      	str	r3, [r7, #20]
  return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a4:	2301      	movs	r3, #1
 80031a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4928      	ldr	r1, [pc, #160]	@ (800325c <UART_RxISR_16BIT+0x1b4>)
 80031bc:	400a      	ands	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d12f      	bne.n	8003234 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031e4:	2301      	movs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2110      	movs	r1, #16
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f383 8810 	msr	PRIMASK, r3
}
 800320a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2210      	movs	r2, #16
 8003214:	4013      	ands	r3, r2
 8003216:	2b10      	cmp	r3, #16
 8003218:	d103      	bne.n	8003222 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	225c      	movs	r2, #92	@ 0x5c
 8003226:	5a9a      	ldrh	r2, [r3, r2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff f93f 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003232:	e00c      	b.n	800324e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0018      	movs	r0, r3
 8003238:	f7fd f9a4 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 800323c:	e007      	b.n	800324e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2108      	movs	r1, #8
 800324a:	430a      	orrs	r2, r1
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b014      	add	sp, #80	@ 0x50
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	fffffedf 	.word	0xfffffedf
 800325c:	fbffffff 	.word	0xfbffffff

08003260 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b0a0      	sub	sp, #128	@ 0x80
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003268:	237a      	movs	r3, #122	@ 0x7a
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	2160      	movs	r1, #96	@ 0x60
 8003270:	5a52      	ldrh	r2, [r2, r1]
 8003272:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	228c      	movs	r2, #140	@ 0x8c
 8003290:	589b      	ldr	r3, [r3, r2]
 8003292:	2b22      	cmp	r3, #34	@ 0x22
 8003294:	d000      	beq.n	8003298 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003296:	e165      	b.n	8003564 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003298:	236e      	movs	r3, #110	@ 0x6e
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	2168      	movs	r1, #104	@ 0x68
 80032a0:	5a52      	ldrh	r2, [r2, r1]
 80032a2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80032a4:	e10c      	b.n	80034c0 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ac:	216c      	movs	r1, #108	@ 0x6c
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	237a      	movs	r3, #122	@ 0x7a
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b2d9      	uxtb	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	400a      	ands	r2, r1
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	225e      	movs	r2, #94	@ 0x5e
 80032d8:	5a9b      	ldrh	r3, [r3, r2]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b299      	uxth	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	225e      	movs	r2, #94	@ 0x5e
 80032e4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80032ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	d049      	beq.n	800338a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d010      	beq.n	8003320 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80032fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d00b      	beq.n	8003320 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2290      	movs	r2, #144	@ 0x90
 8003314:	589b      	ldr	r3, [r3, r2]
 8003316:	2201      	movs	r2, #1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2190      	movs	r1, #144	@ 0x90
 800331e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003320:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d00f      	beq.n	8003348 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003328:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d00b      	beq.n	8003348 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2202      	movs	r2, #2
 8003336:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2290      	movs	r2, #144	@ 0x90
 800333c:	589b      	ldr	r3, [r3, r2]
 800333e:	2204      	movs	r2, #4
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2190      	movs	r1, #144	@ 0x90
 8003346:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003348:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d00f      	beq.n	8003370 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003352:	2201      	movs	r2, #1
 8003354:	4013      	ands	r3, r2
 8003356:	d00b      	beq.n	8003370 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2204      	movs	r2, #4
 800335e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2290      	movs	r2, #144	@ 0x90
 8003364:	589b      	ldr	r3, [r3, r2]
 8003366:	2202      	movs	r2, #2
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2190      	movs	r1, #144	@ 0x90
 800336e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2290      	movs	r2, #144	@ 0x90
 8003374:	589b      	ldr	r3, [r3, r2]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff f88f 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2290      	movs	r2, #144	@ 0x90
 8003386:	2100      	movs	r1, #0
 8003388:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	225e      	movs	r2, #94	@ 0x5e
 800338e:	5a9b      	ldrh	r3, [r3, r2]
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d000      	beq.n	8003398 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003396:	e093      	b.n	80034c0 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a2:	2301      	movs	r3, #1
 80033a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			@ (mov r8, r8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4970      	ldr	r1, [pc, #448]	@ (800357c <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80033ba:	400a      	ands	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d4:	2301      	movs	r3, #1
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4965      	ldr	r1, [pc, #404]	@ (8003580 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	228c      	movs	r2, #140	@ 0x8c
 8003400:	2120      	movs	r1, #32
 8003402:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	2380      	movs	r3, #128	@ 0x80
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d018      	beq.n	8003450 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003426:	663b      	str	r3, [r7, #96]	@ 0x60
 8003428:	2301      	movs	r3, #1
 800342a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4951      	ldr	r1, [pc, #324]	@ (8003584 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8003440:	400a      	ands	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d12f      	bne.n	80034b8 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	623b      	str	r3, [r7, #32]
  return(result);
 8003464:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003468:	2301      	movs	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2110      	movs	r1, #16
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	2210      	movs	r2, #16
 8003498:	4013      	ands	r3, r2
 800349a:	2b10      	cmp	r3, #16
 800349c:	d103      	bne.n	80034a6 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	225c      	movs	r2, #92	@ 0x5c
 80034aa:	5a9a      	ldrh	r2, [r3, r2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fe fffd 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
 80034b6:	e003      	b.n	80034c0 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7fd f862 	bl	8000584 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80034c0:	236e      	movs	r3, #110	@ 0x6e
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80034ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034cc:	2220      	movs	r2, #32
 80034ce:	4013      	ands	r3, r2
 80034d0:	d000      	beq.n	80034d4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80034d2:	e6e8      	b.n	80032a6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80034d4:	205a      	movs	r0, #90	@ 0x5a
 80034d6:	183b      	adds	r3, r7, r0
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	215e      	movs	r1, #94	@ 0x5e
 80034dc:	5a52      	ldrh	r2, [r2, r1]
 80034de:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80034e0:	0001      	movs	r1, r0
 80034e2:	187b      	adds	r3, r7, r1
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d044      	beq.n	8003574 <UART_RxISR_8BIT_FIFOEN+0x314>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2268      	movs	r2, #104	@ 0x68
 80034ee:	5a9b      	ldrh	r3, [r3, r2]
 80034f0:	187a      	adds	r2, r7, r1
 80034f2:	8812      	ldrh	r2, [r2, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d23d      	bcs.n	8003574 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fe:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003500:	657b      	str	r3, [r7, #84]	@ 0x54
 8003502:	2301      	movs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	491b      	ldr	r1, [pc, #108]	@ (8003588 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800351a:	400a      	ands	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800352e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003530:	f3ef 8310 	mrs	r3, PRIMASK
 8003534:	617b      	str	r3, [r7, #20]
  return(result);
 8003536:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003538:	653b      	str	r3, [r7, #80]	@ 0x50
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2120      	movs	r1, #32
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003562:	e007      	b.n	8003574 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2108      	movs	r1, #8
 8003570:	430a      	orrs	r2, r1
 8003572:	619a      	str	r2, [r3, #24]
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b020      	add	sp, #128	@ 0x80
 800357a:	bd80      	pop	{r7, pc}
 800357c:	fffffeff 	.word	0xfffffeff
 8003580:	effffffe 	.word	0xeffffffe
 8003584:	fbffffff 	.word	0xfbffffff
 8003588:	efffffff 	.word	0xefffffff
 800358c:	08002ef1 	.word	0x08002ef1

08003590 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0a2      	sub	sp, #136	@ 0x88
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003598:	2382      	movs	r3, #130	@ 0x82
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	2160      	movs	r1, #96	@ 0x60
 80035a0:	5a52      	ldrh	r2, [r2, r1]
 80035a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2284      	movs	r2, #132	@ 0x84
 80035ac:	18ba      	adds	r2, r7, r2
 80035ae:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	228c      	movs	r2, #140	@ 0x8c
 80035c4:	589b      	ldr	r3, [r3, r2]
 80035c6:	2b22      	cmp	r3, #34	@ 0x22
 80035c8:	d000      	beq.n	80035cc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80035ca:	e16f      	b.n	80038ac <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80035cc:	2376      	movs	r3, #118	@ 0x76
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	2168      	movs	r1, #104	@ 0x68
 80035d4:	5a52      	ldrh	r2, [r2, r1]
 80035d6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80035d8:	e114      	b.n	8003804 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e0:	2174      	movs	r1, #116	@ 0x74
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2282      	movs	r2, #130	@ 0x82
 80035f0:	18ba      	adds	r2, r7, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	8812      	ldrh	r2, [r2, #0]
 80035f6:	4013      	ands	r3, r2
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	1c9a      	adds	r2, r3, #2
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	225e      	movs	r2, #94	@ 0x5e
 800360c:	5a9b      	ldrh	r3, [r3, r2]
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b299      	uxth	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	225e      	movs	r2, #94	@ 0x5e
 8003618:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2184      	movs	r1, #132	@ 0x84
 8003622:	187a      	adds	r2, r7, r1
 8003624:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003626:	187b      	adds	r3, r7, r1
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2207      	movs	r2, #7
 800362c:	4013      	ands	r3, r2
 800362e:	d04e      	beq.n	80036ce <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003630:	187b      	adds	r3, r7, r1
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d010      	beq.n	800365c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800363a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4013      	ands	r3, r2
 8003642:	d00b      	beq.n	800365c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2201      	movs	r2, #1
 800364a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2290      	movs	r2, #144	@ 0x90
 8003650:	589b      	ldr	r3, [r3, r2]
 8003652:	2201      	movs	r2, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2190      	movs	r1, #144	@ 0x90
 800365a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800365c:	2384      	movs	r3, #132	@ 0x84
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2202      	movs	r2, #2
 8003664:	4013      	ands	r3, r2
 8003666:	d00f      	beq.n	8003688 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800366a:	2201      	movs	r2, #1
 800366c:	4013      	ands	r3, r2
 800366e:	d00b      	beq.n	8003688 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2202      	movs	r2, #2
 8003676:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2290      	movs	r2, #144	@ 0x90
 800367c:	589b      	ldr	r3, [r3, r2]
 800367e:	2204      	movs	r2, #4
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2190      	movs	r1, #144	@ 0x90
 8003686:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003688:	2384      	movs	r3, #132	@ 0x84
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	d00f      	beq.n	80036b4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003696:	2201      	movs	r2, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d00b      	beq.n	80036b4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2204      	movs	r2, #4
 80036a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2290      	movs	r2, #144	@ 0x90
 80036a8:	589b      	ldr	r3, [r3, r2]
 80036aa:	2202      	movs	r2, #2
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2190      	movs	r1, #144	@ 0x90
 80036b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2290      	movs	r2, #144	@ 0x90
 80036b8:	589b      	ldr	r3, [r3, r2]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fe feed 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2290      	movs	r2, #144	@ 0x90
 80036ca:	2100      	movs	r1, #0
 80036cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	225e      	movs	r2, #94	@ 0x5e
 80036d2:	5a9b      	ldrh	r3, [r3, r2]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d000      	beq.n	80036dc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80036da:	e093      	b.n	8003804 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036e6:	2301      	movs	r3, #1
 80036e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4971      	ldr	r1, [pc, #452]	@ (80038c4 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003704:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800370e:	f3ef 8310 	mrs	r3, PRIMASK
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003716:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003718:	2301      	movs	r3, #1
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800371e:	f383 8810 	msr	PRIMASK, r3
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4966      	ldr	r1, [pc, #408]	@ (80038c8 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003730:	400a      	ands	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003736:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	228c      	movs	r2, #140	@ 0x8c
 8003744:	2120      	movs	r1, #32
 8003746:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	4013      	ands	r3, r2
 8003760:	d018      	beq.n	8003794 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003762:	f3ef 8310 	mrs	r3, PRIMASK
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800376a:	667b      	str	r3, [r7, #100]	@ 0x64
 800376c:	2301      	movs	r3, #1
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4952      	ldr	r1, [pc, #328]	@ (80038cc <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003784:	400a      	ands	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d12f      	bne.n	80037fc <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ac:	2301      	movs	r3, #1
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2110      	movs	r1, #16
 80037c4:	438a      	bics	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2210      	movs	r2, #16
 80037dc:	4013      	ands	r3, r2
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d103      	bne.n	80037ea <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2210      	movs	r2, #16
 80037e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	225c      	movs	r2, #92	@ 0x5c
 80037ee:	5a9a      	ldrh	r2, [r3, r2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0011      	movs	r1, r2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fe fe5b 	bl	80024b0 <HAL_UARTEx_RxEventCallback>
 80037fa:	e003      	b.n	8003804 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f7fc fec0 	bl	8000584 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003804:	2376      	movs	r3, #118	@ 0x76
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800380e:	2384      	movs	r3, #132	@ 0x84
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2220      	movs	r2, #32
 8003816:	4013      	ands	r3, r2
 8003818:	d000      	beq.n	800381c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800381a:	e6de      	b.n	80035da <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800381c:	205e      	movs	r0, #94	@ 0x5e
 800381e:	183b      	adds	r3, r7, r0
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	215e      	movs	r1, #94	@ 0x5e
 8003824:	5a52      	ldrh	r2, [r2, r1]
 8003826:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003828:	0001      	movs	r1, r0
 800382a:	187b      	adds	r3, r7, r1
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <UART_RxISR_16BIT_FIFOEN+0x32c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2268      	movs	r2, #104	@ 0x68
 8003836:	5a9b      	ldrh	r3, [r3, r2]
 8003838:	187a      	adds	r2, r7, r1
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d23d      	bcs.n	80038bc <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003840:	f3ef 8310 	mrs	r3, PRIMASK
 8003844:	60fb      	str	r3, [r7, #12]
  return(result);
 8003846:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800384a:	2301      	movs	r3, #1
 800384c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	491b      	ldr	r1, [pc, #108]	@ (80038d0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003862:	400a      	ands	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003876:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	61bb      	str	r3, [r7, #24]
  return(result);
 800387e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003880:	657b      	str	r3, [r7, #84]	@ 0x54
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2120      	movs	r1, #32
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038aa:	e007      	b.n	80038bc <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2108      	movs	r1, #8
 80038b8:	430a      	orrs	r2, r1
 80038ba:	619a      	str	r2, [r3, #24]
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b022      	add	sp, #136	@ 0x88
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fffffeff 	.word	0xfffffeff
 80038c8:	effffffe 	.word	0xeffffffe
 80038cc:	fbffffff 	.word	0xfbffffff
 80038d0:	efffffff 	.word	0xefffffff
 80038d4:	080030a9 	.word	0x080030a9

080038d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038e0:	46c0      	nop			@ (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2284      	movs	r2, #132	@ 0x84
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UARTEx_DisableFifoMode+0x16>
 800391a:	2302      	movs	r3, #2
 800391c:	e027      	b.n	800396e <HAL_UARTEx_DisableFifoMode+0x66>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2284      	movs	r2, #132	@ 0x84
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2288      	movs	r2, #136	@ 0x88
 800392a:	2124      	movs	r1, #36	@ 0x24
 800392c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	438a      	bics	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0b      	ldr	r2, [pc, #44]	@ (8003978 <HAL_UARTEx_DisableFifoMode+0x70>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2288      	movs	r2, #136	@ 0x88
 8003960:	2120      	movs	r1, #32
 8003962:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2284      	movs	r2, #132	@ 0x84
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	dfffffff 	.word	0xdfffffff

0800397c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2284      	movs	r2, #132	@ 0x84
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e02e      	b.n	80039f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2284      	movs	r2, #132	@ 0x84
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2288      	movs	r2, #136	@ 0x88
 80039a0:	2124      	movs	r1, #36	@ 0x24
 80039a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	08d9      	lsrs	r1, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f854 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2288      	movs	r2, #136	@ 0x88
 80039e4:	2120      	movs	r1, #32
 80039e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2284      	movs	r2, #132	@ 0x84
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2284      	movs	r2, #132	@ 0x84
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e02f      	b.n	8003a74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2284      	movs	r2, #132	@ 0x84
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2288      	movs	r2, #136	@ 0x88
 8003a20:	2124      	movs	r1, #36	@ 0x24
 8003a22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	@ (8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f813 	bl	8003a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2288      	movs	r2, #136	@ 0x88
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2284      	movs	r2, #132	@ 0x84
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	f1ffffff 	.word	0xf1ffffff

08003a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	226a      	movs	r2, #106	@ 0x6a
 8003a94:	2101      	movs	r1, #1
 8003a96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2268      	movs	r2, #104	@ 0x68
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003aa0:	e043      	b.n	8003b2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003aa2:	260f      	movs	r6, #15
 8003aa4:	19bb      	adds	r3, r7, r6
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aaa:	200e      	movs	r0, #14
 8003aac:	183b      	adds	r3, r7, r0
 8003aae:	2208      	movs	r2, #8
 8003ab0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	240d      	movs	r4, #13
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	0f5b      	lsrs	r3, r3, #29
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	250c      	movs	r5, #12
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	197a      	adds	r2, r7, r5
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	4914      	ldr	r1, [pc, #80]	@ (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	435a      	muls	r2, r3
 8003ae8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	197b      	adds	r3, r7, r5
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af2:	0019      	movs	r1, r3
 8003af4:	f7fc fba4 	bl	8000240 <__divsi3>
 8003af8:	0003      	movs	r3, r0
 8003afa:	b299      	uxth	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	226a      	movs	r2, #106	@ 0x6a
 8003b00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b02:	19bb      	adds	r3, r7, r6
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	193a      	adds	r2, r7, r4
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	490a      	ldr	r1, [pc, #40]	@ (8003b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
 8003b0e:	435a      	muls	r2, r3
 8003b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	f7fc fb90 	bl	8000240 <__divsi3>
 8003b20:	0003      	movs	r3, r0
 8003b22:	b299      	uxth	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2268      	movs	r2, #104	@ 0x68
 8003b28:	5299      	strh	r1, [r3, r2]
}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b005      	add	sp, #20
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	080051a8 	.word	0x080051a8
 8003b38:	080051b0 	.word	0x080051b0

08003b3c <atoi>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	220a      	movs	r2, #10
 8003b40:	2100      	movs	r1, #0
 8003b42:	f000 f88b 	bl	8003c5c <strtol>
 8003b46:	bd10      	pop	{r4, pc}

08003b48 <_strtol_l.constprop.0>:
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	0017      	movs	r7, r2
 8003b4e:	001e      	movs	r6, r3
 8003b50:	9003      	str	r0, [sp, #12]
 8003b52:	9101      	str	r1, [sp, #4]
 8003b54:	2b24      	cmp	r3, #36	@ 0x24
 8003b56:	d844      	bhi.n	8003be2 <_strtol_l.constprop.0+0x9a>
 8003b58:	000c      	movs	r4, r1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d041      	beq.n	8003be2 <_strtol_l.constprop.0+0x9a>
 8003b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c54 <_strtol_l.constprop.0+0x10c>)
 8003b60:	2208      	movs	r2, #8
 8003b62:	469c      	mov	ip, r3
 8003b64:	0023      	movs	r3, r4
 8003b66:	4661      	mov	r1, ip
 8003b68:	781d      	ldrb	r5, [r3, #0]
 8003b6a:	3401      	adds	r4, #1
 8003b6c:	5d48      	ldrb	r0, [r1, r5]
 8003b6e:	0001      	movs	r1, r0
 8003b70:	4011      	ands	r1, r2
 8003b72:	4210      	tst	r0, r2
 8003b74:	d1f6      	bne.n	8003b64 <_strtol_l.constprop.0+0x1c>
 8003b76:	2d2d      	cmp	r5, #45	@ 0x2d
 8003b78:	d13a      	bne.n	8003bf0 <_strtol_l.constprop.0+0xa8>
 8003b7a:	7825      	ldrb	r5, [r4, #0]
 8003b7c:	1c9c      	adds	r4, r3, #2
 8003b7e:	2301      	movs	r3, #1
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	0033      	movs	r3, r6
 8003b86:	4393      	bics	r3, r2
 8003b88:	d109      	bne.n	8003b9e <_strtol_l.constprop.0+0x56>
 8003b8a:	2d30      	cmp	r5, #48	@ 0x30
 8003b8c:	d136      	bne.n	8003bfc <_strtol_l.constprop.0+0xb4>
 8003b8e:	2120      	movs	r1, #32
 8003b90:	7823      	ldrb	r3, [r4, #0]
 8003b92:	438b      	bics	r3, r1
 8003b94:	2b58      	cmp	r3, #88	@ 0x58
 8003b96:	d131      	bne.n	8003bfc <_strtol_l.constprop.0+0xb4>
 8003b98:	0016      	movs	r6, r2
 8003b9a:	7865      	ldrb	r5, [r4, #1]
 8003b9c:	3402      	adds	r4, #2
 8003b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c58 <_strtol_l.constprop.0+0x110>)
 8003ba0:	9b00      	ldr	r3, [sp, #0]
 8003ba2:	4694      	mov	ip, r2
 8003ba4:	4463      	add	r3, ip
 8003ba6:	0031      	movs	r1, r6
 8003ba8:	0018      	movs	r0, r3
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	f7fc fb44 	bl	8000238 <__aeabi_uidivmod>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4684      	mov	ip, r0
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	002b      	movs	r3, r5
 8003bb8:	3b30      	subs	r3, #48	@ 0x30
 8003bba:	2b09      	cmp	r3, #9
 8003bbc:	d825      	bhi.n	8003c0a <_strtol_l.constprop.0+0xc2>
 8003bbe:	001d      	movs	r5, r3
 8003bc0:	42ae      	cmp	r6, r5
 8003bc2:	dd31      	ble.n	8003c28 <_strtol_l.constprop.0+0xe0>
 8003bc4:	1c53      	adds	r3, r2, #1
 8003bc6:	d009      	beq.n	8003bdc <_strtol_l.constprop.0+0x94>
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4252      	negs	r2, r2
 8003bcc:	4584      	cmp	ip, r0
 8003bce:	d305      	bcc.n	8003bdc <_strtol_l.constprop.0+0x94>
 8003bd0:	d101      	bne.n	8003bd6 <_strtol_l.constprop.0+0x8e>
 8003bd2:	42a9      	cmp	r1, r5
 8003bd4:	db25      	blt.n	8003c22 <_strtol_l.constprop.0+0xda>
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4370      	muls	r0, r6
 8003bda:	1828      	adds	r0, r5, r0
 8003bdc:	7825      	ldrb	r5, [r4, #0]
 8003bde:	3401      	adds	r4, #1
 8003be0:	e7e9      	b.n	8003bb6 <_strtol_l.constprop.0+0x6e>
 8003be2:	f000 fa53 	bl	800408c <__errno>
 8003be6:	2316      	movs	r3, #22
 8003be8:	6003      	str	r3, [r0, #0]
 8003bea:	2000      	movs	r0, #0
 8003bec:	b005      	add	sp, #20
 8003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf0:	9100      	str	r1, [sp, #0]
 8003bf2:	2d2b      	cmp	r5, #43	@ 0x2b
 8003bf4:	d1c5      	bne.n	8003b82 <_strtol_l.constprop.0+0x3a>
 8003bf6:	7825      	ldrb	r5, [r4, #0]
 8003bf8:	1c9c      	adds	r4, r3, #2
 8003bfa:	e7c2      	b.n	8003b82 <_strtol_l.constprop.0+0x3a>
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	d1ce      	bne.n	8003b9e <_strtol_l.constprop.0+0x56>
 8003c00:	3608      	adds	r6, #8
 8003c02:	2d30      	cmp	r5, #48	@ 0x30
 8003c04:	d0cb      	beq.n	8003b9e <_strtol_l.constprop.0+0x56>
 8003c06:	3602      	adds	r6, #2
 8003c08:	e7c9      	b.n	8003b9e <_strtol_l.constprop.0+0x56>
 8003c0a:	002b      	movs	r3, r5
 8003c0c:	3b41      	subs	r3, #65	@ 0x41
 8003c0e:	2b19      	cmp	r3, #25
 8003c10:	d801      	bhi.n	8003c16 <_strtol_l.constprop.0+0xce>
 8003c12:	3d37      	subs	r5, #55	@ 0x37
 8003c14:	e7d4      	b.n	8003bc0 <_strtol_l.constprop.0+0x78>
 8003c16:	002b      	movs	r3, r5
 8003c18:	3b61      	subs	r3, #97	@ 0x61
 8003c1a:	2b19      	cmp	r3, #25
 8003c1c:	d804      	bhi.n	8003c28 <_strtol_l.constprop.0+0xe0>
 8003c1e:	3d57      	subs	r5, #87	@ 0x57
 8003c20:	e7ce      	b.n	8003bc0 <_strtol_l.constprop.0+0x78>
 8003c22:	2201      	movs	r2, #1
 8003c24:	4252      	negs	r2, r2
 8003c26:	e7d9      	b.n	8003bdc <_strtol_l.constprop.0+0x94>
 8003c28:	1c53      	adds	r3, r2, #1
 8003c2a:	d108      	bne.n	8003c3e <_strtol_l.constprop.0+0xf6>
 8003c2c:	2322      	movs	r3, #34	@ 0x22
 8003c2e:	9a03      	ldr	r2, [sp, #12]
 8003c30:	9802      	ldr	r0, [sp, #8]
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	d0d9      	beq.n	8003bec <_strtol_l.constprop.0+0xa4>
 8003c38:	1e63      	subs	r3, r4, #1
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	e007      	b.n	8003c4e <_strtol_l.constprop.0+0x106>
 8003c3e:	9b00      	ldr	r3, [sp, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d000      	beq.n	8003c46 <_strtol_l.constprop.0+0xfe>
 8003c44:	4240      	negs	r0, r0
 8003c46:	2f00      	cmp	r7, #0
 8003c48:	d0d0      	beq.n	8003bec <_strtol_l.constprop.0+0xa4>
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	d1f4      	bne.n	8003c38 <_strtol_l.constprop.0+0xf0>
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	e7cb      	b.n	8003bec <_strtol_l.constprop.0+0xa4>
 8003c54:	080051b9 	.word	0x080051b9
 8003c58:	7fffffff 	.word	0x7fffffff

08003c5c <strtol>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4c04      	ldr	r4, [pc, #16]	@ (8003c70 <strtol+0x14>)
 8003c60:	0013      	movs	r3, r2
 8003c62:	000a      	movs	r2, r1
 8003c64:	0001      	movs	r1, r0
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	f7ff ff6e 	bl	8003b48 <_strtol_l.constprop.0>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	20000018 	.word	0x20000018

08003c74 <std>:
 8003c74:	2300      	movs	r3, #0
 8003c76:	b510      	push	{r4, lr}
 8003c78:	0004      	movs	r4, r0
 8003c7a:	6003      	str	r3, [r0, #0]
 8003c7c:	6043      	str	r3, [r0, #4]
 8003c7e:	6083      	str	r3, [r0, #8]
 8003c80:	8181      	strh	r1, [r0, #12]
 8003c82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c84:	81c2      	strh	r2, [r0, #14]
 8003c86:	6103      	str	r3, [r0, #16]
 8003c88:	6143      	str	r3, [r0, #20]
 8003c8a:	6183      	str	r3, [r0, #24]
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	2208      	movs	r2, #8
 8003c90:	305c      	adds	r0, #92	@ 0x5c
 8003c92:	f000 f91f 	bl	8003ed4 <memset>
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <std+0x50>)
 8003c98:	6224      	str	r4, [r4, #32]
 8003c9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <std+0x54>)
 8003c9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <std+0x58>)
 8003ca2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <std+0x5c>)
 8003ca6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <std+0x60>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d005      	beq.n	8003cba <std+0x46>
 8003cae:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <std+0x64>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	d002      	beq.n	8003cba <std+0x46>
 8003cb4:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <std+0x68>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d103      	bne.n	8003cc2 <std+0x4e>
 8003cba:	0020      	movs	r0, r4
 8003cbc:	3058      	adds	r0, #88	@ 0x58
 8003cbe:	f000 fa0f 	bl	80040e0 <__retarget_lock_init_recursive>
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	08003e3d 	.word	0x08003e3d
 8003cc8:	08003e65 	.word	0x08003e65
 8003ccc:	08003e9d 	.word	0x08003e9d
 8003cd0:	08003ec9 	.word	0x08003ec9
 8003cd4:	200003b8 	.word	0x200003b8
 8003cd8:	20000420 	.word	0x20000420
 8003cdc:	20000488 	.word	0x20000488

08003ce0 <stdio_exit_handler>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4a03      	ldr	r2, [pc, #12]	@ (8003cf0 <stdio_exit_handler+0x10>)
 8003ce4:	4903      	ldr	r1, [pc, #12]	@ (8003cf4 <stdio_exit_handler+0x14>)
 8003ce6:	4804      	ldr	r0, [pc, #16]	@ (8003cf8 <stdio_exit_handler+0x18>)
 8003ce8:	f000 f86c 	bl	8003dc4 <_fwalk_sglue>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	080049f5 	.word	0x080049f5
 8003cf8:	2000001c 	.word	0x2000001c

08003cfc <cleanup_stdio>:
 8003cfc:	6841      	ldr	r1, [r0, #4]
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <cleanup_stdio+0x30>)
 8003d00:	b510      	push	{r4, lr}
 8003d02:	0004      	movs	r4, r0
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d001      	beq.n	8003d0c <cleanup_stdio+0x10>
 8003d08:	f000 fe74 	bl	80049f4 <_fflush_r>
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <cleanup_stdio+0x34>)
 8003d10:	4299      	cmp	r1, r3
 8003d12:	d002      	beq.n	8003d1a <cleanup_stdio+0x1e>
 8003d14:	0020      	movs	r0, r4
 8003d16:	f000 fe6d 	bl	80049f4 <_fflush_r>
 8003d1a:	68e1      	ldr	r1, [r4, #12]
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <cleanup_stdio+0x38>)
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d002      	beq.n	8003d28 <cleanup_stdio+0x2c>
 8003d22:	0020      	movs	r0, r4
 8003d24:	f000 fe66 	bl	80049f4 <_fflush_r>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	200003b8 	.word	0x200003b8
 8003d30:	20000420 	.word	0x20000420
 8003d34:	20000488 	.word	0x20000488

08003d38 <global_stdio_init.part.0>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <global_stdio_init.part.0+0x28>)
 8003d3c:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <global_stdio_init.part.0+0x2c>)
 8003d3e:	2104      	movs	r1, #4
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4809      	ldr	r0, [pc, #36]	@ (8003d68 <global_stdio_init.part.0+0x30>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	f7ff ff95 	bl	8003c74 <std>
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2109      	movs	r1, #9
 8003d4e:	4807      	ldr	r0, [pc, #28]	@ (8003d6c <global_stdio_init.part.0+0x34>)
 8003d50:	f7ff ff90 	bl	8003c74 <std>
 8003d54:	2202      	movs	r2, #2
 8003d56:	2112      	movs	r1, #18
 8003d58:	4805      	ldr	r0, [pc, #20]	@ (8003d70 <global_stdio_init.part.0+0x38>)
 8003d5a:	f7ff ff8b 	bl	8003c74 <std>
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	200004f0 	.word	0x200004f0
 8003d64:	08003ce1 	.word	0x08003ce1
 8003d68:	200003b8 	.word	0x200003b8
 8003d6c:	20000420 	.word	0x20000420
 8003d70:	20000488 	.word	0x20000488

08003d74 <__sfp_lock_acquire>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <__sfp_lock_acquire+0xc>)
 8003d78:	f000 f9b3 	bl	80040e2 <__retarget_lock_acquire_recursive>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	200004f9 	.word	0x200004f9

08003d84 <__sfp_lock_release>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <__sfp_lock_release+0xc>)
 8003d88:	f000 f9ac 	bl	80040e4 <__retarget_lock_release_recursive>
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	200004f9 	.word	0x200004f9

08003d94 <__sinit>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	0004      	movs	r4, r0
 8003d98:	f7ff ffec 	bl	8003d74 <__sfp_lock_acquire>
 8003d9c:	6a23      	ldr	r3, [r4, #32]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <__sinit+0x14>
 8003da2:	f7ff ffef 	bl	8003d84 <__sfp_lock_release>
 8003da6:	bd10      	pop	{r4, pc}
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <__sinit+0x28>)
 8003daa:	6223      	str	r3, [r4, #32]
 8003dac:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <__sinit+0x2c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f6      	bne.n	8003da2 <__sinit+0xe>
 8003db4:	f7ff ffc0 	bl	8003d38 <global_stdio_init.part.0>
 8003db8:	e7f3      	b.n	8003da2 <__sinit+0xe>
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	08003cfd 	.word	0x08003cfd
 8003dc0:	200004f0 	.word	0x200004f0

08003dc4 <_fwalk_sglue>:
 8003dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dc6:	0014      	movs	r4, r2
 8003dc8:	2600      	movs	r6, #0
 8003dca:	9000      	str	r0, [sp, #0]
 8003dcc:	9101      	str	r1, [sp, #4]
 8003dce:	68a5      	ldr	r5, [r4, #8]
 8003dd0:	6867      	ldr	r7, [r4, #4]
 8003dd2:	3f01      	subs	r7, #1
 8003dd4:	d504      	bpl.n	8003de0 <_fwalk_sglue+0x1c>
 8003dd6:	6824      	ldr	r4, [r4, #0]
 8003dd8:	2c00      	cmp	r4, #0
 8003dda:	d1f8      	bne.n	8003dce <_fwalk_sglue+0xa>
 8003ddc:	0030      	movs	r0, r6
 8003dde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003de0:	89ab      	ldrh	r3, [r5, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d908      	bls.n	8003df8 <_fwalk_sglue+0x34>
 8003de6:	220e      	movs	r2, #14
 8003de8:	5eab      	ldrsh	r3, [r5, r2]
 8003dea:	3301      	adds	r3, #1
 8003dec:	d004      	beq.n	8003df8 <_fwalk_sglue+0x34>
 8003dee:	0029      	movs	r1, r5
 8003df0:	9800      	ldr	r0, [sp, #0]
 8003df2:	9b01      	ldr	r3, [sp, #4]
 8003df4:	4798      	blx	r3
 8003df6:	4306      	orrs	r6, r0
 8003df8:	3568      	adds	r5, #104	@ 0x68
 8003dfa:	e7ea      	b.n	8003dd2 <_fwalk_sglue+0xe>

08003dfc <siprintf>:
 8003dfc:	b40e      	push	{r1, r2, r3}
 8003dfe:	b500      	push	{lr}
 8003e00:	490b      	ldr	r1, [pc, #44]	@ (8003e30 <siprintf+0x34>)
 8003e02:	b09c      	sub	sp, #112	@ 0x70
 8003e04:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e06:	9002      	str	r0, [sp, #8]
 8003e08:	9006      	str	r0, [sp, #24]
 8003e0a:	9107      	str	r1, [sp, #28]
 8003e0c:	9104      	str	r1, [sp, #16]
 8003e0e:	4809      	ldr	r0, [pc, #36]	@ (8003e34 <siprintf+0x38>)
 8003e10:	4909      	ldr	r1, [pc, #36]	@ (8003e38 <siprintf+0x3c>)
 8003e12:	cb04      	ldmia	r3!, {r2}
 8003e14:	9105      	str	r1, [sp, #20]
 8003e16:	6800      	ldr	r0, [r0, #0]
 8003e18:	a902      	add	r1, sp, #8
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	f000 fae8 	bl	80043f0 <_svfiprintf_r>
 8003e20:	2200      	movs	r2, #0
 8003e22:	9b02      	ldr	r3, [sp, #8]
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	b01c      	add	sp, #112	@ 0x70
 8003e28:	bc08      	pop	{r3}
 8003e2a:	b003      	add	sp, #12
 8003e2c:	4718      	bx	r3
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	7fffffff 	.word	0x7fffffff
 8003e34:	20000018 	.word	0x20000018
 8003e38:	ffff0208 	.word	0xffff0208

08003e3c <__sread>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	000c      	movs	r4, r1
 8003e40:	250e      	movs	r5, #14
 8003e42:	5f49      	ldrsh	r1, [r1, r5]
 8003e44:	f000 f8fa 	bl	800403c <_read_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	db03      	blt.n	8003e54 <__sread+0x18>
 8003e4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e4e:	181b      	adds	r3, r3, r0
 8003e50:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	4a02      	ldr	r2, [pc, #8]	@ (8003e60 <__sread+0x24>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	e7f9      	b.n	8003e52 <__sread+0x16>
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	ffffefff 	.word	0xffffefff

08003e64 <__swrite>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	001f      	movs	r7, r3
 8003e68:	898b      	ldrh	r3, [r1, #12]
 8003e6a:	0005      	movs	r5, r0
 8003e6c:	000c      	movs	r4, r1
 8003e6e:	0016      	movs	r6, r2
 8003e70:	05db      	lsls	r3, r3, #23
 8003e72:	d505      	bpl.n	8003e80 <__swrite+0x1c>
 8003e74:	230e      	movs	r3, #14
 8003e76:	5ec9      	ldrsh	r1, [r1, r3]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f000 f8ca 	bl	8004014 <_lseek_r>
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	4a05      	ldr	r2, [pc, #20]	@ (8003e98 <__swrite+0x34>)
 8003e84:	0028      	movs	r0, r5
 8003e86:	4013      	ands	r3, r2
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	0032      	movs	r2, r6
 8003e8c:	230e      	movs	r3, #14
 8003e8e:	5ee1      	ldrsh	r1, [r4, r3]
 8003e90:	003b      	movs	r3, r7
 8003e92:	f000 f8e7 	bl	8004064 <_write_r>
 8003e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e98:	ffffefff 	.word	0xffffefff

08003e9c <__sseek>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	000c      	movs	r4, r1
 8003ea0:	250e      	movs	r5, #14
 8003ea2:	5f49      	ldrsh	r1, [r1, r5]
 8003ea4:	f000 f8b6 	bl	8004014 <_lseek_r>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	1c42      	adds	r2, r0, #1
 8003eac:	d103      	bne.n	8003eb6 <__sseek+0x1a>
 8003eae:	4a05      	ldr	r2, [pc, #20]	@ (8003ec4 <__sseek+0x28>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	0152      	lsls	r2, r2, #5
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ec0:	e7f8      	b.n	8003eb4 <__sseek+0x18>
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	ffffefff 	.word	0xffffefff

08003ec8 <__sclose>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	230e      	movs	r3, #14
 8003ecc:	5ec9      	ldrsh	r1, [r1, r3]
 8003ece:	f000 f88f 	bl	8003ff0 <_close_r>
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <memset>:
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	1882      	adds	r2, r0, r2
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <strncmp>:
 8003ee4:	b530      	push	{r4, r5, lr}
 8003ee6:	0005      	movs	r5, r0
 8003ee8:	1e10      	subs	r0, r2, #0
 8003eea:	d00b      	beq.n	8003f04 <strncmp+0x20>
 8003eec:	2400      	movs	r4, #0
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	5d2b      	ldrb	r3, [r5, r4]
 8003ef2:	5d08      	ldrb	r0, [r1, r4]
 8003ef4:	4283      	cmp	r3, r0
 8003ef6:	d104      	bne.n	8003f02 <strncmp+0x1e>
 8003ef8:	42a2      	cmp	r2, r4
 8003efa:	d002      	beq.n	8003f02 <strncmp+0x1e>
 8003efc:	3401      	adds	r4, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f6      	bne.n	8003ef0 <strncmp+0xc>
 8003f02:	1a18      	subs	r0, r3, r0
 8003f04:	bd30      	pop	{r4, r5, pc}

08003f06 <strncpy>:
 8003f06:	0003      	movs	r3, r0
 8003f08:	b530      	push	{r4, r5, lr}
 8003f0a:	001d      	movs	r5, r3
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d006      	beq.n	8003f1e <strncpy+0x18>
 8003f10:	780c      	ldrb	r4, [r1, #0]
 8003f12:	3a01      	subs	r2, #1
 8003f14:	3301      	adds	r3, #1
 8003f16:	702c      	strb	r4, [r5, #0]
 8003f18:	3101      	adds	r1, #1
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1f5      	bne.n	8003f0a <strncpy+0x4>
 8003f1e:	2100      	movs	r1, #0
 8003f20:	189a      	adds	r2, r3, r2
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d100      	bne.n	8003f28 <strncpy+0x22>
 8003f26:	bd30      	pop	{r4, r5, pc}
 8003f28:	7019      	strb	r1, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	e7f9      	b.n	8003f22 <strncpy+0x1c>
	...

08003f30 <strtok>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <strtok+0x5c>)
 8003f34:	0005      	movs	r5, r0
 8003f36:	681f      	ldr	r7, [r3, #0]
 8003f38:	000e      	movs	r6, r1
 8003f3a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	d11d      	bne.n	8003f7c <strtok+0x4c>
 8003f40:	2050      	movs	r0, #80	@ 0x50
 8003f42:	f000 f939 	bl	80041b8 <malloc>
 8003f46:	1e02      	subs	r2, r0, #0
 8003f48:	6478      	str	r0, [r7, #68]	@ 0x44
 8003f4a:	d104      	bne.n	8003f56 <strtok+0x26>
 8003f4c:	215b      	movs	r1, #91	@ 0x5b
 8003f4e:	4b10      	ldr	r3, [pc, #64]	@ (8003f90 <strtok+0x60>)
 8003f50:	4810      	ldr	r0, [pc, #64]	@ (8003f94 <strtok+0x64>)
 8003f52:	f000 f8c9 	bl	80040e8 <__assert_func>
 8003f56:	6004      	str	r4, [r0, #0]
 8003f58:	6044      	str	r4, [r0, #4]
 8003f5a:	6084      	str	r4, [r0, #8]
 8003f5c:	60c4      	str	r4, [r0, #12]
 8003f5e:	6104      	str	r4, [r0, #16]
 8003f60:	6144      	str	r4, [r0, #20]
 8003f62:	6184      	str	r4, [r0, #24]
 8003f64:	6284      	str	r4, [r0, #40]	@ 0x28
 8003f66:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8003f68:	6304      	str	r4, [r0, #48]	@ 0x30
 8003f6a:	6344      	str	r4, [r0, #52]	@ 0x34
 8003f6c:	6384      	str	r4, [r0, #56]	@ 0x38
 8003f6e:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8003f70:	6404      	str	r4, [r0, #64]	@ 0x40
 8003f72:	6444      	str	r4, [r0, #68]	@ 0x44
 8003f74:	6484      	str	r4, [r0, #72]	@ 0x48
 8003f76:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8003f78:	7704      	strb	r4, [r0, #28]
 8003f7a:	6244      	str	r4, [r0, #36]	@ 0x24
 8003f7c:	0031      	movs	r1, r6
 8003f7e:	0028      	movs	r0, r5
 8003f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f82:	2301      	movs	r3, #1
 8003f84:	f000 f808 	bl	8003f98 <__strtok_r>
 8003f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	20000018 	.word	0x20000018
 8003f90:	080052b9 	.word	0x080052b9
 8003f94:	080052d0 	.word	0x080052d0

08003f98 <__strtok_r>:
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9a:	1e04      	subs	r4, r0, #0
 8003f9c:	d102      	bne.n	8003fa4 <__strtok_r+0xc>
 8003f9e:	6814      	ldr	r4, [r2, #0]
 8003fa0:	2c00      	cmp	r4, #0
 8003fa2:	d009      	beq.n	8003fb8 <__strtok_r+0x20>
 8003fa4:	0020      	movs	r0, r4
 8003fa6:	000e      	movs	r6, r1
 8003fa8:	7805      	ldrb	r5, [r0, #0]
 8003faa:	3401      	adds	r4, #1
 8003fac:	7837      	ldrb	r7, [r6, #0]
 8003fae:	2f00      	cmp	r7, #0
 8003fb0:	d104      	bne.n	8003fbc <__strtok_r+0x24>
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	d10d      	bne.n	8003fd2 <__strtok_r+0x3a>
 8003fb6:	6015      	str	r5, [r2, #0]
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e006      	b.n	8003fca <__strtok_r+0x32>
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	42bd      	cmp	r5, r7
 8003fc0:	d1f4      	bne.n	8003fac <__strtok_r+0x14>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ee      	bne.n	8003fa4 <__strtok_r+0xc>
 8003fc6:	6014      	str	r4, [r2, #0]
 8003fc8:	7003      	strb	r3, [r0, #0]
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	3301      	adds	r3, #1
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	d102      	bne.n	8003fd8 <__strtok_r+0x40>
 8003fd2:	000b      	movs	r3, r1
 8003fd4:	7826      	ldrb	r6, [r4, #0]
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	781d      	ldrb	r5, [r3, #0]
 8003fda:	42ae      	cmp	r6, r5
 8003fdc:	d1f6      	bne.n	8003fcc <__strtok_r+0x34>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	001d      	movs	r5, r3
 8003fe2:	429e      	cmp	r6, r3
 8003fe4:	d002      	beq.n	8003fec <__strtok_r+0x54>
 8003fe6:	0023      	movs	r3, r4
 8003fe8:	1e61      	subs	r1, r4, #1
 8003fea:	700d      	strb	r5, [r1, #0]
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e7ec      	b.n	8003fca <__strtok_r+0x32>

08003ff0 <_close_r>:
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	b570      	push	{r4, r5, r6, lr}
 8003ff4:	4d06      	ldr	r5, [pc, #24]	@ (8004010 <_close_r+0x20>)
 8003ff6:	0004      	movs	r4, r0
 8003ff8:	0008      	movs	r0, r1
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	f7fc fd48 	bl	8000a90 <_close>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d103      	bne.n	800400c <_close_r+0x1c>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d000      	beq.n	800400c <_close_r+0x1c>
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	200004f4 	.word	0x200004f4

08004014 <_lseek_r>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	0004      	movs	r4, r0
 8004018:	0008      	movs	r0, r1
 800401a:	0011      	movs	r1, r2
 800401c:	001a      	movs	r2, r3
 800401e:	2300      	movs	r3, #0
 8004020:	4d05      	ldr	r5, [pc, #20]	@ (8004038 <_lseek_r+0x24>)
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc fd55 	bl	8000ad2 <_lseek>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d103      	bne.n	8004034 <_lseek_r+0x20>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d000      	beq.n	8004034 <_lseek_r+0x20>
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	bd70      	pop	{r4, r5, r6, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	200004f4 	.word	0x200004f4

0800403c <_read_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	0004      	movs	r4, r0
 8004040:	0008      	movs	r0, r1
 8004042:	0011      	movs	r1, r2
 8004044:	001a      	movs	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	4d05      	ldr	r5, [pc, #20]	@ (8004060 <_read_r+0x24>)
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc fce7 	bl	8000a1e <_read>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_read_r+0x20>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_read_r+0x20>
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	200004f4 	.word	0x200004f4

08004064 <_write_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	0004      	movs	r4, r0
 8004068:	0008      	movs	r0, r1
 800406a:	0011      	movs	r1, r2
 800406c:	001a      	movs	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	4d05      	ldr	r5, [pc, #20]	@ (8004088 <_write_r+0x24>)
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fcf0 	bl	8000a58 <_write>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d103      	bne.n	8004084 <_write_r+0x20>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d000      	beq.n	8004084 <_write_r+0x20>
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	200004f4 	.word	0x200004f4

0800408c <__errno>:
 800408c:	4b01      	ldr	r3, [pc, #4]	@ (8004094 <__errno+0x8>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	20000018 	.word	0x20000018

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	2600      	movs	r6, #0
 800409c:	4c0c      	ldr	r4, [pc, #48]	@ (80040d0 <__libc_init_array+0x38>)
 800409e:	4d0d      	ldr	r5, [pc, #52]	@ (80040d4 <__libc_init_array+0x3c>)
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	2600      	movs	r6, #0
 80040aa:	f001 f815 	bl	80050d8 <_init>
 80040ae:	4c0a      	ldr	r4, [pc, #40]	@ (80040d8 <__libc_init_array+0x40>)
 80040b0:	4d0a      	ldr	r5, [pc, #40]	@ (80040dc <__libc_init_array+0x44>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	00b3      	lsls	r3, r6, #2
 80040be:	58eb      	ldr	r3, [r5, r3]
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	00b3      	lsls	r3, r6, #2
 80040c8:	58eb      	ldr	r3, [r5, r3]
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	0800539c 	.word	0x0800539c
 80040d4:	0800539c 	.word	0x0800539c
 80040d8:	080053a0 	.word	0x080053a0
 80040dc:	0800539c 	.word	0x0800539c

080040e0 <__retarget_lock_init_recursive>:
 80040e0:	4770      	bx	lr

080040e2 <__retarget_lock_acquire_recursive>:
 80040e2:	4770      	bx	lr

080040e4 <__retarget_lock_release_recursive>:
 80040e4:	4770      	bx	lr
	...

080040e8 <__assert_func>:
 80040e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80040ea:	0014      	movs	r4, r2
 80040ec:	001a      	movs	r2, r3
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <__assert_func+0x2c>)
 80040f0:	0005      	movs	r5, r0
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	000e      	movs	r6, r1
 80040f6:	68d8      	ldr	r0, [r3, #12]
 80040f8:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <__assert_func+0x30>)
 80040fa:	2c00      	cmp	r4, #0
 80040fc:	d101      	bne.n	8004102 <__assert_func+0x1a>
 80040fe:	4b07      	ldr	r3, [pc, #28]	@ (800411c <__assert_func+0x34>)
 8004100:	001c      	movs	r4, r3
 8004102:	4907      	ldr	r1, [pc, #28]	@ (8004120 <__assert_func+0x38>)
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	9402      	str	r4, [sp, #8]
 8004108:	002b      	movs	r3, r5
 800410a:	9600      	str	r6, [sp, #0]
 800410c:	f000 fc9e 	bl	8004a4c <fiprintf>
 8004110:	f000 fce6 	bl	8004ae0 <abort>
 8004114:	20000018 	.word	0x20000018
 8004118:	0800532a 	.word	0x0800532a
 800411c:	08005365 	.word	0x08005365
 8004120:	08005337 	.word	0x08005337

08004124 <_free_r>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	0005      	movs	r5, r0
 8004128:	1e0c      	subs	r4, r1, #0
 800412a:	d010      	beq.n	800414e <_free_r+0x2a>
 800412c:	3c04      	subs	r4, #4
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da00      	bge.n	8004136 <_free_r+0x12>
 8004134:	18e4      	adds	r4, r4, r3
 8004136:	0028      	movs	r0, r5
 8004138:	f000 f8ea 	bl	8004310 <__malloc_lock>
 800413c:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <_free_r+0x90>)
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <_free_r+0x2c>
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6014      	str	r4, [r2, #0]
 8004148:	0028      	movs	r0, r5
 800414a:	f000 f8e9 	bl	8004320 <__malloc_unlock>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	42a3      	cmp	r3, r4
 8004152:	d908      	bls.n	8004166 <_free_r+0x42>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	1821      	adds	r1, r4, r0
 8004158:	428b      	cmp	r3, r1
 800415a:	d1f3      	bne.n	8004144 <_free_r+0x20>
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	1809      	adds	r1, r1, r0
 8004162:	6021      	str	r1, [r4, #0]
 8004164:	e7ee      	b.n	8004144 <_free_r+0x20>
 8004166:	001a      	movs	r2, r3
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <_free_r+0x4e>
 800416e:	42a3      	cmp	r3, r4
 8004170:	d9f9      	bls.n	8004166 <_free_r+0x42>
 8004172:	6811      	ldr	r1, [r2, #0]
 8004174:	1850      	adds	r0, r2, r1
 8004176:	42a0      	cmp	r0, r4
 8004178:	d10b      	bne.n	8004192 <_free_r+0x6e>
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	1809      	adds	r1, r1, r0
 800417e:	1850      	adds	r0, r2, r1
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	4283      	cmp	r3, r0
 8004184:	d1e0      	bne.n	8004148 <_free_r+0x24>
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	1841      	adds	r1, r0, r1
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	6053      	str	r3, [r2, #4]
 8004190:	e7da      	b.n	8004148 <_free_r+0x24>
 8004192:	42a0      	cmp	r0, r4
 8004194:	d902      	bls.n	800419c <_free_r+0x78>
 8004196:	230c      	movs	r3, #12
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	e7d5      	b.n	8004148 <_free_r+0x24>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d103      	bne.n	80041ac <_free_r+0x88>
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	1809      	adds	r1, r1, r0
 80041aa:	6021      	str	r1, [r4, #0]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6054      	str	r4, [r2, #4]
 80041b0:	e7ca      	b.n	8004148 <_free_r+0x24>
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	20000500 	.word	0x20000500

080041b8 <malloc>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <malloc+0x10>)
 80041bc:	0001      	movs	r1, r0
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	f000 f826 	bl	8004210 <_malloc_r>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	20000018 	.word	0x20000018

080041cc <sbrk_aligned>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4e0f      	ldr	r6, [pc, #60]	@ (800420c <sbrk_aligned+0x40>)
 80041d0:	000d      	movs	r5, r1
 80041d2:	6831      	ldr	r1, [r6, #0]
 80041d4:	0004      	movs	r4, r0
 80041d6:	2900      	cmp	r1, #0
 80041d8:	d102      	bne.n	80041e0 <sbrk_aligned+0x14>
 80041da:	f000 fc5b 	bl	8004a94 <_sbrk_r>
 80041de:	6030      	str	r0, [r6, #0]
 80041e0:	0029      	movs	r1, r5
 80041e2:	0020      	movs	r0, r4
 80041e4:	f000 fc56 	bl	8004a94 <_sbrk_r>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d103      	bne.n	80041f4 <sbrk_aligned+0x28>
 80041ec:	2501      	movs	r5, #1
 80041ee:	426d      	negs	r5, r5
 80041f0:	0028      	movs	r0, r5
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	2303      	movs	r3, #3
 80041f6:	1cc5      	adds	r5, r0, #3
 80041f8:	439d      	bics	r5, r3
 80041fa:	42a8      	cmp	r0, r5
 80041fc:	d0f8      	beq.n	80041f0 <sbrk_aligned+0x24>
 80041fe:	1a29      	subs	r1, r5, r0
 8004200:	0020      	movs	r0, r4
 8004202:	f000 fc47 	bl	8004a94 <_sbrk_r>
 8004206:	3001      	adds	r0, #1
 8004208:	d1f2      	bne.n	80041f0 <sbrk_aligned+0x24>
 800420a:	e7ef      	b.n	80041ec <sbrk_aligned+0x20>
 800420c:	200004fc 	.word	0x200004fc

08004210 <_malloc_r>:
 8004210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004212:	2203      	movs	r2, #3
 8004214:	1ccb      	adds	r3, r1, #3
 8004216:	4393      	bics	r3, r2
 8004218:	3308      	adds	r3, #8
 800421a:	0005      	movs	r5, r0
 800421c:	001f      	movs	r7, r3
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d234      	bcs.n	800428c <_malloc_r+0x7c>
 8004222:	270c      	movs	r7, #12
 8004224:	42b9      	cmp	r1, r7
 8004226:	d833      	bhi.n	8004290 <_malloc_r+0x80>
 8004228:	0028      	movs	r0, r5
 800422a:	f000 f871 	bl	8004310 <__malloc_lock>
 800422e:	4e37      	ldr	r6, [pc, #220]	@ (800430c <_malloc_r+0xfc>)
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	001c      	movs	r4, r3
 8004234:	2c00      	cmp	r4, #0
 8004236:	d12f      	bne.n	8004298 <_malloc_r+0x88>
 8004238:	0039      	movs	r1, r7
 800423a:	0028      	movs	r0, r5
 800423c:	f7ff ffc6 	bl	80041cc <sbrk_aligned>
 8004240:	0004      	movs	r4, r0
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	d15f      	bne.n	8004306 <_malloc_r+0xf6>
 8004246:	6834      	ldr	r4, [r6, #0]
 8004248:	9400      	str	r4, [sp, #0]
 800424a:	9b00      	ldr	r3, [sp, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d14a      	bne.n	80042e6 <_malloc_r+0xd6>
 8004250:	2c00      	cmp	r4, #0
 8004252:	d052      	beq.n	80042fa <_malloc_r+0xea>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	0028      	movs	r0, r5
 8004258:	18e3      	adds	r3, r4, r3
 800425a:	9900      	ldr	r1, [sp, #0]
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	f000 fc19 	bl	8004a94 <_sbrk_r>
 8004262:	9b01      	ldr	r3, [sp, #4]
 8004264:	4283      	cmp	r3, r0
 8004266:	d148      	bne.n	80042fa <_malloc_r+0xea>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	0028      	movs	r0, r5
 800426c:	1aff      	subs	r7, r7, r3
 800426e:	0039      	movs	r1, r7
 8004270:	f7ff ffac 	bl	80041cc <sbrk_aligned>
 8004274:	3001      	adds	r0, #1
 8004276:	d040      	beq.n	80042fa <_malloc_r+0xea>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	19db      	adds	r3, r3, r7
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	6833      	ldr	r3, [r6, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d133      	bne.n	80042ee <_malloc_r+0xde>
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	6033      	str	r3, [r6, #0]
 800428a:	e019      	b.n	80042c0 <_malloc_r+0xb0>
 800428c:	2b00      	cmp	r3, #0
 800428e:	dac9      	bge.n	8004224 <_malloc_r+0x14>
 8004290:	230c      	movs	r3, #12
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	2000      	movs	r0, #0
 8004296:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004298:	6821      	ldr	r1, [r4, #0]
 800429a:	1bc9      	subs	r1, r1, r7
 800429c:	d420      	bmi.n	80042e0 <_malloc_r+0xd0>
 800429e:	290b      	cmp	r1, #11
 80042a0:	d90a      	bls.n	80042b8 <_malloc_r+0xa8>
 80042a2:	19e2      	adds	r2, r4, r7
 80042a4:	6027      	str	r7, [r4, #0]
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	d104      	bne.n	80042b4 <_malloc_r+0xa4>
 80042aa:	6032      	str	r2, [r6, #0]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	6053      	str	r3, [r2, #4]
 80042b2:	e005      	b.n	80042c0 <_malloc_r+0xb0>
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e7f9      	b.n	80042ac <_malloc_r+0x9c>
 80042b8:	6862      	ldr	r2, [r4, #4]
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	d10e      	bne.n	80042dc <_malloc_r+0xcc>
 80042be:	6032      	str	r2, [r6, #0]
 80042c0:	0028      	movs	r0, r5
 80042c2:	f000 f82d 	bl	8004320 <__malloc_unlock>
 80042c6:	0020      	movs	r0, r4
 80042c8:	2207      	movs	r2, #7
 80042ca:	300b      	adds	r0, #11
 80042cc:	1d23      	adds	r3, r4, #4
 80042ce:	4390      	bics	r0, r2
 80042d0:	1ac2      	subs	r2, r0, r3
 80042d2:	4298      	cmp	r0, r3
 80042d4:	d0df      	beq.n	8004296 <_malloc_r+0x86>
 80042d6:	1a1b      	subs	r3, r3, r0
 80042d8:	50a3      	str	r3, [r4, r2]
 80042da:	e7dc      	b.n	8004296 <_malloc_r+0x86>
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e7ef      	b.n	80042c0 <_malloc_r+0xb0>
 80042e0:	0023      	movs	r3, r4
 80042e2:	6864      	ldr	r4, [r4, #4]
 80042e4:	e7a6      	b.n	8004234 <_malloc_r+0x24>
 80042e6:	9c00      	ldr	r4, [sp, #0]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	e7ad      	b.n	800424a <_malloc_r+0x3a>
 80042ee:	001a      	movs	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	d1fb      	bne.n	80042ee <_malloc_r+0xde>
 80042f6:	2300      	movs	r3, #0
 80042f8:	e7da      	b.n	80042b0 <_malloc_r+0xa0>
 80042fa:	230c      	movs	r3, #12
 80042fc:	0028      	movs	r0, r5
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	f000 f80e 	bl	8004320 <__malloc_unlock>
 8004304:	e7c6      	b.n	8004294 <_malloc_r+0x84>
 8004306:	6007      	str	r7, [r0, #0]
 8004308:	e7da      	b.n	80042c0 <_malloc_r+0xb0>
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	20000500 	.word	0x20000500

08004310 <__malloc_lock>:
 8004310:	b510      	push	{r4, lr}
 8004312:	4802      	ldr	r0, [pc, #8]	@ (800431c <__malloc_lock+0xc>)
 8004314:	f7ff fee5 	bl	80040e2 <__retarget_lock_acquire_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	200004f8 	.word	0x200004f8

08004320 <__malloc_unlock>:
 8004320:	b510      	push	{r4, lr}
 8004322:	4802      	ldr	r0, [pc, #8]	@ (800432c <__malloc_unlock+0xc>)
 8004324:	f7ff fede 	bl	80040e4 <__retarget_lock_release_recursive>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	200004f8 	.word	0x200004f8

08004330 <__ssputs_r>:
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	688e      	ldr	r6, [r1, #8]
 8004334:	b085      	sub	sp, #20
 8004336:	001f      	movs	r7, r3
 8004338:	000c      	movs	r4, r1
 800433a:	680b      	ldr	r3, [r1, #0]
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9203      	str	r2, [sp, #12]
 8004340:	42be      	cmp	r6, r7
 8004342:	d830      	bhi.n	80043a6 <__ssputs_r+0x76>
 8004344:	210c      	movs	r1, #12
 8004346:	5e62      	ldrsh	r2, [r4, r1]
 8004348:	2190      	movs	r1, #144	@ 0x90
 800434a:	00c9      	lsls	r1, r1, #3
 800434c:	420a      	tst	r2, r1
 800434e:	d028      	beq.n	80043a2 <__ssputs_r+0x72>
 8004350:	2003      	movs	r0, #3
 8004352:	6921      	ldr	r1, [r4, #16]
 8004354:	1a5b      	subs	r3, r3, r1
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	6963      	ldr	r3, [r4, #20]
 800435a:	4343      	muls	r3, r0
 800435c:	9801      	ldr	r0, [sp, #4]
 800435e:	0fdd      	lsrs	r5, r3, #31
 8004360:	18ed      	adds	r5, r5, r3
 8004362:	1c7b      	adds	r3, r7, #1
 8004364:	181b      	adds	r3, r3, r0
 8004366:	106d      	asrs	r5, r5, #1
 8004368:	42ab      	cmp	r3, r5
 800436a:	d900      	bls.n	800436e <__ssputs_r+0x3e>
 800436c:	001d      	movs	r5, r3
 800436e:	0552      	lsls	r2, r2, #21
 8004370:	d528      	bpl.n	80043c4 <__ssputs_r+0x94>
 8004372:	0029      	movs	r1, r5
 8004374:	9802      	ldr	r0, [sp, #8]
 8004376:	f7ff ff4b 	bl	8004210 <_malloc_r>
 800437a:	1e06      	subs	r6, r0, #0
 800437c:	d02c      	beq.n	80043d8 <__ssputs_r+0xa8>
 800437e:	9a01      	ldr	r2, [sp, #4]
 8004380:	6921      	ldr	r1, [r4, #16]
 8004382:	f000 fba4 	bl	8004ace <memcpy>
 8004386:	89a2      	ldrh	r2, [r4, #12]
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <__ssputs_r+0xbc>)
 800438a:	401a      	ands	r2, r3
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	4313      	orrs	r3, r2
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	9b01      	ldr	r3, [sp, #4]
 8004394:	6126      	str	r6, [r4, #16]
 8004396:	18f6      	adds	r6, r6, r3
 8004398:	6026      	str	r6, [r4, #0]
 800439a:	003e      	movs	r6, r7
 800439c:	6165      	str	r5, [r4, #20]
 800439e:	1aed      	subs	r5, r5, r3
 80043a0:	60a5      	str	r5, [r4, #8]
 80043a2:	42be      	cmp	r6, r7
 80043a4:	d900      	bls.n	80043a8 <__ssputs_r+0x78>
 80043a6:	003e      	movs	r6, r7
 80043a8:	0032      	movs	r2, r6
 80043aa:	9903      	ldr	r1, [sp, #12]
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	f000 fb5d 	bl	8004a6c <memmove>
 80043b2:	2000      	movs	r0, #0
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	1b9b      	subs	r3, r3, r6
 80043b8:	60a3      	str	r3, [r4, #8]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	199b      	adds	r3, r3, r6
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	b005      	add	sp, #20
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	002a      	movs	r2, r5
 80043c6:	9802      	ldr	r0, [sp, #8]
 80043c8:	f000 fb91 	bl	8004aee <_realloc_r>
 80043cc:	1e06      	subs	r6, r0, #0
 80043ce:	d1e0      	bne.n	8004392 <__ssputs_r+0x62>
 80043d0:	6921      	ldr	r1, [r4, #16]
 80043d2:	9802      	ldr	r0, [sp, #8]
 80043d4:	f7ff fea6 	bl	8004124 <_free_r>
 80043d8:	230c      	movs	r3, #12
 80043da:	2001      	movs	r0, #1
 80043dc:	9a02      	ldr	r2, [sp, #8]
 80043de:	4240      	negs	r0, r0
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	89a2      	ldrh	r2, [r4, #12]
 80043e4:	3334      	adds	r3, #52	@ 0x34
 80043e6:	4313      	orrs	r3, r2
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	e7e9      	b.n	80043c0 <__ssputs_r+0x90>
 80043ec:	fffffb7f 	.word	0xfffffb7f

080043f0 <_svfiprintf_r>:
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b0a1      	sub	sp, #132	@ 0x84
 80043f4:	9003      	str	r0, [sp, #12]
 80043f6:	001d      	movs	r5, r3
 80043f8:	898b      	ldrh	r3, [r1, #12]
 80043fa:	000f      	movs	r7, r1
 80043fc:	0016      	movs	r6, r2
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	d511      	bpl.n	8004426 <_svfiprintf_r+0x36>
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10e      	bne.n	8004426 <_svfiprintf_r+0x36>
 8004408:	2140      	movs	r1, #64	@ 0x40
 800440a:	f7ff ff01 	bl	8004210 <_malloc_r>
 800440e:	6038      	str	r0, [r7, #0]
 8004410:	6138      	str	r0, [r7, #16]
 8004412:	2800      	cmp	r0, #0
 8004414:	d105      	bne.n	8004422 <_svfiprintf_r+0x32>
 8004416:	230c      	movs	r3, #12
 8004418:	9a03      	ldr	r2, [sp, #12]
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	2001      	movs	r0, #1
 800441e:	4240      	negs	r0, r0
 8004420:	e0cf      	b.n	80045c2 <_svfiprintf_r+0x1d2>
 8004422:	2340      	movs	r3, #64	@ 0x40
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	ac08      	add	r4, sp, #32
 800442a:	6163      	str	r3, [r4, #20]
 800442c:	3320      	adds	r3, #32
 800442e:	7663      	strb	r3, [r4, #25]
 8004430:	3310      	adds	r3, #16
 8004432:	76a3      	strb	r3, [r4, #26]
 8004434:	9507      	str	r5, [sp, #28]
 8004436:	0035      	movs	r5, r6
 8004438:	782b      	ldrb	r3, [r5, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <_svfiprintf_r+0x52>
 800443e:	2b25      	cmp	r3, #37	@ 0x25
 8004440:	d148      	bne.n	80044d4 <_svfiprintf_r+0xe4>
 8004442:	1bab      	subs	r3, r5, r6
 8004444:	9305      	str	r3, [sp, #20]
 8004446:	42b5      	cmp	r5, r6
 8004448:	d00b      	beq.n	8004462 <_svfiprintf_r+0x72>
 800444a:	0032      	movs	r2, r6
 800444c:	0039      	movs	r1, r7
 800444e:	9803      	ldr	r0, [sp, #12]
 8004450:	f7ff ff6e 	bl	8004330 <__ssputs_r>
 8004454:	3001      	adds	r0, #1
 8004456:	d100      	bne.n	800445a <_svfiprintf_r+0x6a>
 8004458:	e0ae      	b.n	80045b8 <_svfiprintf_r+0x1c8>
 800445a:	6963      	ldr	r3, [r4, #20]
 800445c:	9a05      	ldr	r2, [sp, #20]
 800445e:	189b      	adds	r3, r3, r2
 8004460:	6163      	str	r3, [r4, #20]
 8004462:	782b      	ldrb	r3, [r5, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d100      	bne.n	800446a <_svfiprintf_r+0x7a>
 8004468:	e0a6      	b.n	80045b8 <_svfiprintf_r+0x1c8>
 800446a:	2201      	movs	r2, #1
 800446c:	2300      	movs	r3, #0
 800446e:	4252      	negs	r2, r2
 8004470:	6062      	str	r2, [r4, #4]
 8004472:	a904      	add	r1, sp, #16
 8004474:	3254      	adds	r2, #84	@ 0x54
 8004476:	1852      	adds	r2, r2, r1
 8004478:	1c6e      	adds	r6, r5, #1
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	60e3      	str	r3, [r4, #12]
 800447e:	60a3      	str	r3, [r4, #8]
 8004480:	7013      	strb	r3, [r2, #0]
 8004482:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004484:	4b54      	ldr	r3, [pc, #336]	@ (80045d8 <_svfiprintf_r+0x1e8>)
 8004486:	2205      	movs	r2, #5
 8004488:	0018      	movs	r0, r3
 800448a:	7831      	ldrb	r1, [r6, #0]
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	f000 fb13 	bl	8004ab8 <memchr>
 8004492:	1c75      	adds	r5, r6, #1
 8004494:	2800      	cmp	r0, #0
 8004496:	d11f      	bne.n	80044d8 <_svfiprintf_r+0xe8>
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	06d3      	lsls	r3, r2, #27
 800449c:	d504      	bpl.n	80044a8 <_svfiprintf_r+0xb8>
 800449e:	2353      	movs	r3, #83	@ 0x53
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	185b      	adds	r3, r3, r1
 80044a4:	2120      	movs	r1, #32
 80044a6:	7019      	strb	r1, [r3, #0]
 80044a8:	0713      	lsls	r3, r2, #28
 80044aa:	d504      	bpl.n	80044b6 <_svfiprintf_r+0xc6>
 80044ac:	2353      	movs	r3, #83	@ 0x53
 80044ae:	a904      	add	r1, sp, #16
 80044b0:	185b      	adds	r3, r3, r1
 80044b2:	212b      	movs	r1, #43	@ 0x2b
 80044b4:	7019      	strb	r1, [r3, #0]
 80044b6:	7833      	ldrb	r3, [r6, #0]
 80044b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ba:	d016      	beq.n	80044ea <_svfiprintf_r+0xfa>
 80044bc:	0035      	movs	r5, r6
 80044be:	2100      	movs	r1, #0
 80044c0:	200a      	movs	r0, #10
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	782a      	ldrb	r2, [r5, #0]
 80044c6:	1c6e      	adds	r6, r5, #1
 80044c8:	3a30      	subs	r2, #48	@ 0x30
 80044ca:	2a09      	cmp	r2, #9
 80044cc:	d950      	bls.n	8004570 <_svfiprintf_r+0x180>
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d111      	bne.n	80044f6 <_svfiprintf_r+0x106>
 80044d2:	e017      	b.n	8004504 <_svfiprintf_r+0x114>
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7af      	b.n	8004438 <_svfiprintf_r+0x48>
 80044d8:	9b05      	ldr	r3, [sp, #20]
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	4083      	lsls	r3, r0
 80044e2:	4313      	orrs	r3, r2
 80044e4:	002e      	movs	r6, r5
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	e7cc      	b.n	8004484 <_svfiprintf_r+0x94>
 80044ea:	9b07      	ldr	r3, [sp, #28]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9107      	str	r1, [sp, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db01      	blt.n	80044fa <_svfiprintf_r+0x10a>
 80044f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044f8:	e004      	b.n	8004504 <_svfiprintf_r+0x114>
 80044fa:	425b      	negs	r3, r3
 80044fc:	60e3      	str	r3, [r4, #12]
 80044fe:	2302      	movs	r3, #2
 8004500:	4313      	orrs	r3, r2
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	782b      	ldrb	r3, [r5, #0]
 8004506:	2b2e      	cmp	r3, #46	@ 0x2e
 8004508:	d10c      	bne.n	8004524 <_svfiprintf_r+0x134>
 800450a:	786b      	ldrb	r3, [r5, #1]
 800450c:	2b2a      	cmp	r3, #42	@ 0x2a
 800450e:	d134      	bne.n	800457a <_svfiprintf_r+0x18a>
 8004510:	9b07      	ldr	r3, [sp, #28]
 8004512:	3502      	adds	r5, #2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9207      	str	r2, [sp, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	da01      	bge.n	8004522 <_svfiprintf_r+0x132>
 800451e:	2301      	movs	r3, #1
 8004520:	425b      	negs	r3, r3
 8004522:	9309      	str	r3, [sp, #36]	@ 0x24
 8004524:	4e2d      	ldr	r6, [pc, #180]	@ (80045dc <_svfiprintf_r+0x1ec>)
 8004526:	2203      	movs	r2, #3
 8004528:	0030      	movs	r0, r6
 800452a:	7829      	ldrb	r1, [r5, #0]
 800452c:	f000 fac4 	bl	8004ab8 <memchr>
 8004530:	2800      	cmp	r0, #0
 8004532:	d006      	beq.n	8004542 <_svfiprintf_r+0x152>
 8004534:	2340      	movs	r3, #64	@ 0x40
 8004536:	1b80      	subs	r0, r0, r6
 8004538:	4083      	lsls	r3, r0
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	3501      	adds	r5, #1
 800453e:	4313      	orrs	r3, r2
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	7829      	ldrb	r1, [r5, #0]
 8004544:	2206      	movs	r2, #6
 8004546:	4826      	ldr	r0, [pc, #152]	@ (80045e0 <_svfiprintf_r+0x1f0>)
 8004548:	1c6e      	adds	r6, r5, #1
 800454a:	7621      	strb	r1, [r4, #24]
 800454c:	f000 fab4 	bl	8004ab8 <memchr>
 8004550:	2800      	cmp	r0, #0
 8004552:	d038      	beq.n	80045c6 <_svfiprintf_r+0x1d6>
 8004554:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <_svfiprintf_r+0x1f4>)
 8004556:	2b00      	cmp	r3, #0
 8004558:	d122      	bne.n	80045a0 <_svfiprintf_r+0x1b0>
 800455a:	2207      	movs	r2, #7
 800455c:	9b07      	ldr	r3, [sp, #28]
 800455e:	3307      	adds	r3, #7
 8004560:	4393      	bics	r3, r2
 8004562:	3308      	adds	r3, #8
 8004564:	9307      	str	r3, [sp, #28]
 8004566:	6963      	ldr	r3, [r4, #20]
 8004568:	9a04      	ldr	r2, [sp, #16]
 800456a:	189b      	adds	r3, r3, r2
 800456c:	6163      	str	r3, [r4, #20]
 800456e:	e762      	b.n	8004436 <_svfiprintf_r+0x46>
 8004570:	4343      	muls	r3, r0
 8004572:	0035      	movs	r5, r6
 8004574:	2101      	movs	r1, #1
 8004576:	189b      	adds	r3, r3, r2
 8004578:	e7a4      	b.n	80044c4 <_svfiprintf_r+0xd4>
 800457a:	2300      	movs	r3, #0
 800457c:	200a      	movs	r0, #10
 800457e:	0019      	movs	r1, r3
 8004580:	3501      	adds	r5, #1
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	782a      	ldrb	r2, [r5, #0]
 8004586:	1c6e      	adds	r6, r5, #1
 8004588:	3a30      	subs	r2, #48	@ 0x30
 800458a:	2a09      	cmp	r2, #9
 800458c:	d903      	bls.n	8004596 <_svfiprintf_r+0x1a6>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0c8      	beq.n	8004524 <_svfiprintf_r+0x134>
 8004592:	9109      	str	r1, [sp, #36]	@ 0x24
 8004594:	e7c6      	b.n	8004524 <_svfiprintf_r+0x134>
 8004596:	4341      	muls	r1, r0
 8004598:	0035      	movs	r5, r6
 800459a:	2301      	movs	r3, #1
 800459c:	1889      	adds	r1, r1, r2
 800459e:	e7f1      	b.n	8004584 <_svfiprintf_r+0x194>
 80045a0:	aa07      	add	r2, sp, #28
 80045a2:	9200      	str	r2, [sp, #0]
 80045a4:	0021      	movs	r1, r4
 80045a6:	003a      	movs	r2, r7
 80045a8:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <_svfiprintf_r+0x1f8>)
 80045aa:	9803      	ldr	r0, [sp, #12]
 80045ac:	e000      	b.n	80045b0 <_svfiprintf_r+0x1c0>
 80045ae:	bf00      	nop
 80045b0:	9004      	str	r0, [sp, #16]
 80045b2:	9b04      	ldr	r3, [sp, #16]
 80045b4:	3301      	adds	r3, #1
 80045b6:	d1d6      	bne.n	8004566 <_svfiprintf_r+0x176>
 80045b8:	89bb      	ldrh	r3, [r7, #12]
 80045ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045bc:	065b      	lsls	r3, r3, #25
 80045be:	d500      	bpl.n	80045c2 <_svfiprintf_r+0x1d2>
 80045c0:	e72c      	b.n	800441c <_svfiprintf_r+0x2c>
 80045c2:	b021      	add	sp, #132	@ 0x84
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	aa07      	add	r2, sp, #28
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	0021      	movs	r1, r4
 80045cc:	003a      	movs	r2, r7
 80045ce:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <_svfiprintf_r+0x1f8>)
 80045d0:	9803      	ldr	r0, [sp, #12]
 80045d2:	f000 f87b 	bl	80046cc <_printf_i>
 80045d6:	e7eb      	b.n	80045b0 <_svfiprintf_r+0x1c0>
 80045d8:	08005366 	.word	0x08005366
 80045dc:	0800536c 	.word	0x0800536c
 80045e0:	08005370 	.word	0x08005370
 80045e4:	00000000 	.word	0x00000000
 80045e8:	08004331 	.word	0x08004331

080045ec <_printf_common>:
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	0016      	movs	r6, r2
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	688a      	ldr	r2, [r1, #8]
 80045f4:	690b      	ldr	r3, [r1, #16]
 80045f6:	000c      	movs	r4, r1
 80045f8:	9000      	str	r0, [sp, #0]
 80045fa:	4293      	cmp	r3, r2
 80045fc:	da00      	bge.n	8004600 <_printf_common+0x14>
 80045fe:	0013      	movs	r3, r2
 8004600:	0022      	movs	r2, r4
 8004602:	6033      	str	r3, [r6, #0]
 8004604:	3243      	adds	r2, #67	@ 0x43
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	2a00      	cmp	r2, #0
 800460a:	d001      	beq.n	8004610 <_printf_common+0x24>
 800460c:	3301      	adds	r3, #1
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	069b      	lsls	r3, r3, #26
 8004614:	d502      	bpl.n	800461c <_printf_common+0x30>
 8004616:	6833      	ldr	r3, [r6, #0]
 8004618:	3302      	adds	r3, #2
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	2306      	movs	r3, #6
 8004620:	0015      	movs	r5, r2
 8004622:	401d      	ands	r5, r3
 8004624:	421a      	tst	r2, r3
 8004626:	d027      	beq.n	8004678 <_printf_common+0x8c>
 8004628:	0023      	movs	r3, r4
 800462a:	3343      	adds	r3, #67	@ 0x43
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	1e5a      	subs	r2, r3, #1
 8004630:	4193      	sbcs	r3, r2
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	0692      	lsls	r2, r2, #26
 8004636:	d430      	bmi.n	800469a <_printf_common+0xae>
 8004638:	0022      	movs	r2, r4
 800463a:	9901      	ldr	r1, [sp, #4]
 800463c:	9800      	ldr	r0, [sp, #0]
 800463e:	9d08      	ldr	r5, [sp, #32]
 8004640:	3243      	adds	r2, #67	@ 0x43
 8004642:	47a8      	blx	r5
 8004644:	3001      	adds	r0, #1
 8004646:	d025      	beq.n	8004694 <_printf_common+0xa8>
 8004648:	2206      	movs	r2, #6
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	2500      	movs	r5, #0
 800464e:	4013      	ands	r3, r2
 8004650:	2b04      	cmp	r3, #4
 8004652:	d105      	bne.n	8004660 <_printf_common+0x74>
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	68e5      	ldr	r5, [r4, #12]
 8004658:	1aed      	subs	r5, r5, r3
 800465a:	43eb      	mvns	r3, r5
 800465c:	17db      	asrs	r3, r3, #31
 800465e:	401d      	ands	r5, r3
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	6922      	ldr	r2, [r4, #16]
 8004664:	4293      	cmp	r3, r2
 8004666:	dd01      	ble.n	800466c <_printf_common+0x80>
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	18ed      	adds	r5, r5, r3
 800466c:	2600      	movs	r6, #0
 800466e:	42b5      	cmp	r5, r6
 8004670:	d120      	bne.n	80046b4 <_printf_common+0xc8>
 8004672:	2000      	movs	r0, #0
 8004674:	e010      	b.n	8004698 <_printf_common+0xac>
 8004676:	3501      	adds	r5, #1
 8004678:	68e3      	ldr	r3, [r4, #12]
 800467a:	6832      	ldr	r2, [r6, #0]
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	42ab      	cmp	r3, r5
 8004680:	ddd2      	ble.n	8004628 <_printf_common+0x3c>
 8004682:	0022      	movs	r2, r4
 8004684:	2301      	movs	r3, #1
 8004686:	9901      	ldr	r1, [sp, #4]
 8004688:	9800      	ldr	r0, [sp, #0]
 800468a:	9f08      	ldr	r7, [sp, #32]
 800468c:	3219      	adds	r2, #25
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	d1f0      	bne.n	8004676 <_printf_common+0x8a>
 8004694:	2001      	movs	r0, #1
 8004696:	4240      	negs	r0, r0
 8004698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800469a:	2030      	movs	r0, #48	@ 0x30
 800469c:	18e1      	adds	r1, r4, r3
 800469e:	3143      	adds	r1, #67	@ 0x43
 80046a0:	7008      	strb	r0, [r1, #0]
 80046a2:	0021      	movs	r1, r4
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	3145      	adds	r1, #69	@ 0x45
 80046a8:	7809      	ldrb	r1, [r1, #0]
 80046aa:	18a2      	adds	r2, r4, r2
 80046ac:	3243      	adds	r2, #67	@ 0x43
 80046ae:	3302      	adds	r3, #2
 80046b0:	7011      	strb	r1, [r2, #0]
 80046b2:	e7c1      	b.n	8004638 <_printf_common+0x4c>
 80046b4:	0022      	movs	r2, r4
 80046b6:	2301      	movs	r3, #1
 80046b8:	9901      	ldr	r1, [sp, #4]
 80046ba:	9800      	ldr	r0, [sp, #0]
 80046bc:	9f08      	ldr	r7, [sp, #32]
 80046be:	321a      	adds	r2, #26
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	d0e6      	beq.n	8004694 <_printf_common+0xa8>
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7d1      	b.n	800466e <_printf_common+0x82>
	...

080046cc <_printf_i>:
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	b08b      	sub	sp, #44	@ 0x2c
 80046d0:	9206      	str	r2, [sp, #24]
 80046d2:	000a      	movs	r2, r1
 80046d4:	3243      	adds	r2, #67	@ 0x43
 80046d6:	9307      	str	r3, [sp, #28]
 80046d8:	9005      	str	r0, [sp, #20]
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	7e0a      	ldrb	r2, [r1, #24]
 80046de:	000c      	movs	r4, r1
 80046e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046e2:	2a78      	cmp	r2, #120	@ 0x78
 80046e4:	d809      	bhi.n	80046fa <_printf_i+0x2e>
 80046e6:	2a62      	cmp	r2, #98	@ 0x62
 80046e8:	d80b      	bhi.n	8004702 <_printf_i+0x36>
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d100      	bne.n	80046f0 <_printf_i+0x24>
 80046ee:	e0bc      	b.n	800486a <_printf_i+0x19e>
 80046f0:	497b      	ldr	r1, [pc, #492]	@ (80048e0 <_printf_i+0x214>)
 80046f2:	9104      	str	r1, [sp, #16]
 80046f4:	2a58      	cmp	r2, #88	@ 0x58
 80046f6:	d100      	bne.n	80046fa <_printf_i+0x2e>
 80046f8:	e090      	b.n	800481c <_printf_i+0x150>
 80046fa:	0025      	movs	r5, r4
 80046fc:	3542      	adds	r5, #66	@ 0x42
 80046fe:	702a      	strb	r2, [r5, #0]
 8004700:	e022      	b.n	8004748 <_printf_i+0x7c>
 8004702:	0010      	movs	r0, r2
 8004704:	3863      	subs	r0, #99	@ 0x63
 8004706:	2815      	cmp	r0, #21
 8004708:	d8f7      	bhi.n	80046fa <_printf_i+0x2e>
 800470a:	f7fb fd05 	bl	8000118 <__gnu_thumb1_case_shi>
 800470e:	0016      	.short	0x0016
 8004710:	fff6001f 	.word	0xfff6001f
 8004714:	fff6fff6 	.word	0xfff6fff6
 8004718:	001ffff6 	.word	0x001ffff6
 800471c:	fff6fff6 	.word	0xfff6fff6
 8004720:	fff6fff6 	.word	0xfff6fff6
 8004724:	003600a1 	.word	0x003600a1
 8004728:	fff60080 	.word	0xfff60080
 800472c:	00b2fff6 	.word	0x00b2fff6
 8004730:	0036fff6 	.word	0x0036fff6
 8004734:	fff6fff6 	.word	0xfff6fff6
 8004738:	0084      	.short	0x0084
 800473a:	0025      	movs	r5, r4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	3542      	adds	r5, #66	@ 0x42
 8004740:	1d11      	adds	r1, r2, #4
 8004742:	6019      	str	r1, [r3, #0]
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	702b      	strb	r3, [r5, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	e0a0      	b.n	800488e <_printf_i+0x1c2>
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	1d02      	adds	r2, r0, #4
 8004752:	060d      	lsls	r5, r1, #24
 8004754:	d50b      	bpl.n	800476e <_printf_i+0xa2>
 8004756:	6806      	ldr	r6, [r0, #0]
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	2e00      	cmp	r6, #0
 800475c:	da03      	bge.n	8004766 <_printf_i+0x9a>
 800475e:	232d      	movs	r3, #45	@ 0x2d
 8004760:	9a03      	ldr	r2, [sp, #12]
 8004762:	4276      	negs	r6, r6
 8004764:	7013      	strb	r3, [r2, #0]
 8004766:	4b5e      	ldr	r3, [pc, #376]	@ (80048e0 <_printf_i+0x214>)
 8004768:	270a      	movs	r7, #10
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	e018      	b.n	80047a0 <_printf_i+0xd4>
 800476e:	6806      	ldr	r6, [r0, #0]
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	0649      	lsls	r1, r1, #25
 8004774:	d5f1      	bpl.n	800475a <_printf_i+0x8e>
 8004776:	b236      	sxth	r6, r6
 8004778:	e7ef      	b.n	800475a <_printf_i+0x8e>
 800477a:	6808      	ldr	r0, [r1, #0]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	c940      	ldmia	r1!, {r6}
 8004780:	0605      	lsls	r5, r0, #24
 8004782:	d402      	bmi.n	800478a <_printf_i+0xbe>
 8004784:	0640      	lsls	r0, r0, #25
 8004786:	d500      	bpl.n	800478a <_printf_i+0xbe>
 8004788:	b2b6      	uxth	r6, r6
 800478a:	6019      	str	r1, [r3, #0]
 800478c:	4b54      	ldr	r3, [pc, #336]	@ (80048e0 <_printf_i+0x214>)
 800478e:	270a      	movs	r7, #10
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	2a6f      	cmp	r2, #111	@ 0x6f
 8004794:	d100      	bne.n	8004798 <_printf_i+0xcc>
 8004796:	3f02      	subs	r7, #2
 8004798:	0023      	movs	r3, r4
 800479a:	2200      	movs	r2, #0
 800479c:	3343      	adds	r3, #67	@ 0x43
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	60a3      	str	r3, [r4, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db03      	blt.n	80047b0 <_printf_i+0xe4>
 80047a8:	2104      	movs	r1, #4
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	438a      	bics	r2, r1
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d102      	bne.n	80047ba <_printf_i+0xee>
 80047b4:	9d03      	ldr	r5, [sp, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <_printf_i+0x108>
 80047ba:	9d03      	ldr	r5, [sp, #12]
 80047bc:	0030      	movs	r0, r6
 80047be:	0039      	movs	r1, r7
 80047c0:	f7fb fd3a 	bl	8000238 <__aeabi_uidivmod>
 80047c4:	9b04      	ldr	r3, [sp, #16]
 80047c6:	3d01      	subs	r5, #1
 80047c8:	5c5b      	ldrb	r3, [r3, r1]
 80047ca:	702b      	strb	r3, [r5, #0]
 80047cc:	0033      	movs	r3, r6
 80047ce:	0006      	movs	r6, r0
 80047d0:	429f      	cmp	r7, r3
 80047d2:	d9f3      	bls.n	80047bc <_printf_i+0xf0>
 80047d4:	2f08      	cmp	r7, #8
 80047d6:	d109      	bne.n	80047ec <_printf_i+0x120>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d506      	bpl.n	80047ec <_printf_i+0x120>
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dc02      	bgt.n	80047ec <_printf_i+0x120>
 80047e6:	2330      	movs	r3, #48	@ 0x30
 80047e8:	3d01      	subs	r5, #1
 80047ea:	702b      	strb	r3, [r5, #0]
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	1b5b      	subs	r3, r3, r5
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	9b07      	ldr	r3, [sp, #28]
 80047f4:	0021      	movs	r1, r4
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	9805      	ldr	r0, [sp, #20]
 80047fa:	9b06      	ldr	r3, [sp, #24]
 80047fc:	aa09      	add	r2, sp, #36	@ 0x24
 80047fe:	f7ff fef5 	bl	80045ec <_printf_common>
 8004802:	3001      	adds	r0, #1
 8004804:	d148      	bne.n	8004898 <_printf_i+0x1cc>
 8004806:	2001      	movs	r0, #1
 8004808:	4240      	negs	r0, r0
 800480a:	b00b      	add	sp, #44	@ 0x2c
 800480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480e:	2220      	movs	r2, #32
 8004810:	6809      	ldr	r1, [r1, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	2278      	movs	r2, #120	@ 0x78
 8004818:	4932      	ldr	r1, [pc, #200]	@ (80048e4 <_printf_i+0x218>)
 800481a:	9104      	str	r1, [sp, #16]
 800481c:	0021      	movs	r1, r4
 800481e:	3145      	adds	r1, #69	@ 0x45
 8004820:	700a      	strb	r2, [r1, #0]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	c940      	ldmia	r1!, {r6}
 8004828:	0610      	lsls	r0, r2, #24
 800482a:	d402      	bmi.n	8004832 <_printf_i+0x166>
 800482c:	0650      	lsls	r0, r2, #25
 800482e:	d500      	bpl.n	8004832 <_printf_i+0x166>
 8004830:	b2b6      	uxth	r6, r6
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	07d3      	lsls	r3, r2, #31
 8004836:	d502      	bpl.n	800483e <_printf_i+0x172>
 8004838:	2320      	movs	r3, #32
 800483a:	4313      	orrs	r3, r2
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	2e00      	cmp	r6, #0
 8004840:	d001      	beq.n	8004846 <_printf_i+0x17a>
 8004842:	2710      	movs	r7, #16
 8004844:	e7a8      	b.n	8004798 <_printf_i+0xcc>
 8004846:	2220      	movs	r2, #32
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	4393      	bics	r3, r2
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	e7f8      	b.n	8004842 <_printf_i+0x176>
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	680d      	ldr	r5, [r1, #0]
 8004854:	1d10      	adds	r0, r2, #4
 8004856:	6949      	ldr	r1, [r1, #20]
 8004858:	6018      	str	r0, [r3, #0]
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	062e      	lsls	r6, r5, #24
 800485e:	d501      	bpl.n	8004864 <_printf_i+0x198>
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e002      	b.n	800486a <_printf_i+0x19e>
 8004864:	066d      	lsls	r5, r5, #25
 8004866:	d5fb      	bpl.n	8004860 <_printf_i+0x194>
 8004868:	8019      	strh	r1, [r3, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	9d03      	ldr	r5, [sp, #12]
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	e7bf      	b.n	80047f2 <_printf_i+0x126>
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	1d11      	adds	r1, r2, #4
 8004876:	6019      	str	r1, [r3, #0]
 8004878:	6815      	ldr	r5, [r2, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	0028      	movs	r0, r5
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	f000 f91a 	bl	8004ab8 <memchr>
 8004884:	2800      	cmp	r0, #0
 8004886:	d001      	beq.n	800488c <_printf_i+0x1c0>
 8004888:	1b40      	subs	r0, r0, r5
 800488a:	6060      	str	r0, [r4, #4]
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	2300      	movs	r3, #0
 8004892:	9a03      	ldr	r2, [sp, #12]
 8004894:	7013      	strb	r3, [r2, #0]
 8004896:	e7ac      	b.n	80047f2 <_printf_i+0x126>
 8004898:	002a      	movs	r2, r5
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	9906      	ldr	r1, [sp, #24]
 800489e:	9805      	ldr	r0, [sp, #20]
 80048a0:	9d07      	ldr	r5, [sp, #28]
 80048a2:	47a8      	blx	r5
 80048a4:	3001      	adds	r0, #1
 80048a6:	d0ae      	beq.n	8004806 <_printf_i+0x13a>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	079b      	lsls	r3, r3, #30
 80048ac:	d415      	bmi.n	80048da <_printf_i+0x20e>
 80048ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	4298      	cmp	r0, r3
 80048b4:	daa9      	bge.n	800480a <_printf_i+0x13e>
 80048b6:	0018      	movs	r0, r3
 80048b8:	e7a7      	b.n	800480a <_printf_i+0x13e>
 80048ba:	0022      	movs	r2, r4
 80048bc:	2301      	movs	r3, #1
 80048be:	9906      	ldr	r1, [sp, #24]
 80048c0:	9805      	ldr	r0, [sp, #20]
 80048c2:	9e07      	ldr	r6, [sp, #28]
 80048c4:	3219      	adds	r2, #25
 80048c6:	47b0      	blx	r6
 80048c8:	3001      	adds	r0, #1
 80048ca:	d09c      	beq.n	8004806 <_printf_i+0x13a>
 80048cc:	3501      	adds	r5, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	dcf0      	bgt.n	80048ba <_printf_i+0x1ee>
 80048d8:	e7e9      	b.n	80048ae <_printf_i+0x1e2>
 80048da:	2500      	movs	r5, #0
 80048dc:	e7f7      	b.n	80048ce <_printf_i+0x202>
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	08005377 	.word	0x08005377
 80048e4:	08005388 	.word	0x08005388

080048e8 <__sflush_r>:
 80048e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ea:	220c      	movs	r2, #12
 80048ec:	5e8b      	ldrsh	r3, [r1, r2]
 80048ee:	0005      	movs	r5, r0
 80048f0:	000c      	movs	r4, r1
 80048f2:	071a      	lsls	r2, r3, #28
 80048f4:	d456      	bmi.n	80049a4 <__sflush_r+0xbc>
 80048f6:	684a      	ldr	r2, [r1, #4]
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	dc02      	bgt.n	8004902 <__sflush_r+0x1a>
 80048fc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80048fe:	2a00      	cmp	r2, #0
 8004900:	dd4e      	ble.n	80049a0 <__sflush_r+0xb8>
 8004902:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004904:	2f00      	cmp	r7, #0
 8004906:	d04b      	beq.n	80049a0 <__sflush_r+0xb8>
 8004908:	2200      	movs	r2, #0
 800490a:	2080      	movs	r0, #128	@ 0x80
 800490c:	682e      	ldr	r6, [r5, #0]
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	001a      	movs	r2, r3
 8004912:	0140      	lsls	r0, r0, #5
 8004914:	6a21      	ldr	r1, [r4, #32]
 8004916:	4002      	ands	r2, r0
 8004918:	4203      	tst	r3, r0
 800491a:	d033      	beq.n	8004984 <__sflush_r+0x9c>
 800491c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	075b      	lsls	r3, r3, #29
 8004922:	d506      	bpl.n	8004932 <__sflush_r+0x4a>
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <__sflush_r+0x4a>
 800492e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004930:	1ad2      	subs	r2, r2, r3
 8004932:	2300      	movs	r3, #0
 8004934:	0028      	movs	r0, r5
 8004936:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004938:	6a21      	ldr	r1, [r4, #32]
 800493a:	47b8      	blx	r7
 800493c:	89a2      	ldrh	r2, [r4, #12]
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	d106      	bne.n	8004950 <__sflush_r+0x68>
 8004942:	6829      	ldr	r1, [r5, #0]
 8004944:	291d      	cmp	r1, #29
 8004946:	d846      	bhi.n	80049d6 <__sflush_r+0xee>
 8004948:	4b29      	ldr	r3, [pc, #164]	@ (80049f0 <__sflush_r+0x108>)
 800494a:	410b      	asrs	r3, r1
 800494c:	07db      	lsls	r3, r3, #31
 800494e:	d442      	bmi.n	80049d6 <__sflush_r+0xee>
 8004950:	2300      	movs	r3, #0
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	04d2      	lsls	r2, r2, #19
 800495a:	d505      	bpl.n	8004968 <__sflush_r+0x80>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <__sflush_r+0x7e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d100      	bne.n	8004968 <__sflush_r+0x80>
 8004966:	6560      	str	r0, [r4, #84]	@ 0x54
 8004968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800496a:	602e      	str	r6, [r5, #0]
 800496c:	2900      	cmp	r1, #0
 800496e:	d017      	beq.n	80049a0 <__sflush_r+0xb8>
 8004970:	0023      	movs	r3, r4
 8004972:	3344      	adds	r3, #68	@ 0x44
 8004974:	4299      	cmp	r1, r3
 8004976:	d002      	beq.n	800497e <__sflush_r+0x96>
 8004978:	0028      	movs	r0, r5
 800497a:	f7ff fbd3 	bl	8004124 <_free_r>
 800497e:	2300      	movs	r3, #0
 8004980:	6363      	str	r3, [r4, #52]	@ 0x34
 8004982:	e00d      	b.n	80049a0 <__sflush_r+0xb8>
 8004984:	2301      	movs	r3, #1
 8004986:	0028      	movs	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	0002      	movs	r2, r0
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d1c6      	bne.n	800491e <__sflush_r+0x36>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0c3      	beq.n	800491e <__sflush_r+0x36>
 8004996:	2b1d      	cmp	r3, #29
 8004998:	d001      	beq.n	800499e <__sflush_r+0xb6>
 800499a:	2b16      	cmp	r3, #22
 800499c:	d11a      	bne.n	80049d4 <__sflush_r+0xec>
 800499e:	602e      	str	r6, [r5, #0]
 80049a0:	2000      	movs	r0, #0
 80049a2:	e01e      	b.n	80049e2 <__sflush_r+0xfa>
 80049a4:	690e      	ldr	r6, [r1, #16]
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d0fa      	beq.n	80049a0 <__sflush_r+0xb8>
 80049aa:	680f      	ldr	r7, [r1, #0]
 80049ac:	600e      	str	r6, [r1, #0]
 80049ae:	1bba      	subs	r2, r7, r6
 80049b0:	9201      	str	r2, [sp, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	079b      	lsls	r3, r3, #30
 80049b6:	d100      	bne.n	80049ba <__sflush_r+0xd2>
 80049b8:	694a      	ldr	r2, [r1, #20]
 80049ba:	60a2      	str	r2, [r4, #8]
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	ddee      	ble.n	80049a0 <__sflush_r+0xb8>
 80049c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80049c4:	0032      	movs	r2, r6
 80049c6:	001f      	movs	r7, r3
 80049c8:	0028      	movs	r0, r5
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	6a21      	ldr	r1, [r4, #32]
 80049ce:	47b8      	blx	r7
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dc07      	bgt.n	80049e4 <__sflush_r+0xfc>
 80049d4:	89a2      	ldrh	r2, [r4, #12]
 80049d6:	2340      	movs	r3, #64	@ 0x40
 80049d8:	2001      	movs	r0, #1
 80049da:	4313      	orrs	r3, r2
 80049dc:	b21b      	sxth	r3, r3
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	4240      	negs	r0, r0
 80049e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	1836      	adds	r6, r6, r0
 80049e8:	1a1b      	subs	r3, r3, r0
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	e7e6      	b.n	80049bc <__sflush_r+0xd4>
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	dfbffffe 	.word	0xdfbffffe

080049f4 <_fflush_r>:
 80049f4:	690b      	ldr	r3, [r1, #16]
 80049f6:	b570      	push	{r4, r5, r6, lr}
 80049f8:	0005      	movs	r5, r0
 80049fa:	000c      	movs	r4, r1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <_fflush_r+0x12>
 8004a00:	2500      	movs	r5, #0
 8004a02:	0028      	movs	r0, r5
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d004      	beq.n	8004a14 <_fflush_r+0x20>
 8004a0a:	6a03      	ldr	r3, [r0, #32]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <_fflush_r+0x20>
 8004a10:	f7ff f9c0 	bl	8003d94 <__sinit>
 8004a14:	220c      	movs	r2, #12
 8004a16:	5ea3      	ldrsh	r3, [r4, r2]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f1      	beq.n	8004a00 <_fflush_r+0xc>
 8004a1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a1e:	07d2      	lsls	r2, r2, #31
 8004a20:	d404      	bmi.n	8004a2c <_fflush_r+0x38>
 8004a22:	059b      	lsls	r3, r3, #22
 8004a24:	d402      	bmi.n	8004a2c <_fflush_r+0x38>
 8004a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a28:	f7ff fb5b 	bl	80040e2 <__retarget_lock_acquire_recursive>
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	0021      	movs	r1, r4
 8004a30:	f7ff ff5a 	bl	80048e8 <__sflush_r>
 8004a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a36:	0005      	movs	r5, r0
 8004a38:	07db      	lsls	r3, r3, #31
 8004a3a:	d4e2      	bmi.n	8004a02 <_fflush_r+0xe>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	059b      	lsls	r3, r3, #22
 8004a40:	d4df      	bmi.n	8004a02 <_fflush_r+0xe>
 8004a42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a44:	f7ff fb4e 	bl	80040e4 <__retarget_lock_release_recursive>
 8004a48:	e7db      	b.n	8004a02 <_fflush_r+0xe>
	...

08004a4c <fiprintf>:
 8004a4c:	b40e      	push	{r1, r2, r3}
 8004a4e:	b517      	push	{r0, r1, r2, r4, lr}
 8004a50:	4c05      	ldr	r4, [pc, #20]	@ (8004a68 <fiprintf+0x1c>)
 8004a52:	ab05      	add	r3, sp, #20
 8004a54:	cb04      	ldmia	r3!, {r2}
 8004a56:	0001      	movs	r1, r0
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	f000 f89e 	bl	8004b9c <_vfiprintf_r>
 8004a60:	bc1e      	pop	{r1, r2, r3, r4}
 8004a62:	bc08      	pop	{r3}
 8004a64:	b003      	add	sp, #12
 8004a66:	4718      	bx	r3
 8004a68:	20000018 	.word	0x20000018

08004a6c <memmove>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	4288      	cmp	r0, r1
 8004a70:	d806      	bhi.n	8004a80 <memmove+0x14>
 8004a72:	2300      	movs	r3, #0
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d008      	beq.n	8004a8a <memmove+0x1e>
 8004a78:	5ccc      	ldrb	r4, [r1, r3]
 8004a7a:	54c4      	strb	r4, [r0, r3]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	e7f9      	b.n	8004a74 <memmove+0x8>
 8004a80:	188b      	adds	r3, r1, r2
 8004a82:	4298      	cmp	r0, r3
 8004a84:	d2f5      	bcs.n	8004a72 <memmove+0x6>
 8004a86:	3a01      	subs	r2, #1
 8004a88:	d200      	bcs.n	8004a8c <memmove+0x20>
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	5c8b      	ldrb	r3, [r1, r2]
 8004a8e:	5483      	strb	r3, [r0, r2]
 8004a90:	e7f9      	b.n	8004a86 <memmove+0x1a>
	...

08004a94 <_sbrk_r>:
 8004a94:	2300      	movs	r3, #0
 8004a96:	b570      	push	{r4, r5, r6, lr}
 8004a98:	4d06      	ldr	r5, [pc, #24]	@ (8004ab4 <_sbrk_r+0x20>)
 8004a9a:	0004      	movs	r4, r0
 8004a9c:	0008      	movs	r0, r1
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	f7fc f822 	bl	8000ae8 <_sbrk>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_sbrk_r+0x1c>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d000      	beq.n	8004ab0 <_sbrk_r+0x1c>
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	200004f4 	.word	0x200004f4

08004ab8 <memchr>:
 8004ab8:	b2c9      	uxtb	r1, r1
 8004aba:	1882      	adds	r2, r0, r2
 8004abc:	4290      	cmp	r0, r2
 8004abe:	d101      	bne.n	8004ac4 <memchr+0xc>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4770      	bx	lr
 8004ac4:	7803      	ldrb	r3, [r0, #0]
 8004ac6:	428b      	cmp	r3, r1
 8004ac8:	d0fb      	beq.n	8004ac2 <memchr+0xa>
 8004aca:	3001      	adds	r0, #1
 8004acc:	e7f6      	b.n	8004abc <memchr+0x4>

08004ace <memcpy>:
 8004ace:	2300      	movs	r3, #0
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d100      	bne.n	8004ad8 <memcpy+0xa>
 8004ad6:	bd10      	pop	{r4, pc}
 8004ad8:	5ccc      	ldrb	r4, [r1, r3]
 8004ada:	54c4      	strb	r4, [r0, r3]
 8004adc:	3301      	adds	r3, #1
 8004ade:	e7f8      	b.n	8004ad2 <memcpy+0x4>

08004ae0 <abort>:
 8004ae0:	2006      	movs	r0, #6
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	f000 fa40 	bl	8004f68 <raise>
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fb ff8b 	bl	8000a04 <_exit>

08004aee <_realloc_r>:
 8004aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af0:	0006      	movs	r6, r0
 8004af2:	000c      	movs	r4, r1
 8004af4:	0015      	movs	r5, r2
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d105      	bne.n	8004b06 <_realloc_r+0x18>
 8004afa:	0011      	movs	r1, r2
 8004afc:	f7ff fb88 	bl	8004210 <_malloc_r>
 8004b00:	0004      	movs	r4, r0
 8004b02:	0020      	movs	r0, r4
 8004b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	d103      	bne.n	8004b12 <_realloc_r+0x24>
 8004b0a:	f7ff fb0b 	bl	8004124 <_free_r>
 8004b0e:	2400      	movs	r4, #0
 8004b10:	e7f7      	b.n	8004b02 <_realloc_r+0x14>
 8004b12:	f000 fa49 	bl	8004fa8 <_malloc_usable_size_r>
 8004b16:	0007      	movs	r7, r0
 8004b18:	4285      	cmp	r5, r0
 8004b1a:	d802      	bhi.n	8004b22 <_realloc_r+0x34>
 8004b1c:	0843      	lsrs	r3, r0, #1
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	d3ef      	bcc.n	8004b02 <_realloc_r+0x14>
 8004b22:	0029      	movs	r1, r5
 8004b24:	0030      	movs	r0, r6
 8004b26:	f7ff fb73 	bl	8004210 <_malloc_r>
 8004b2a:	9001      	str	r0, [sp, #4]
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d0ee      	beq.n	8004b0e <_realloc_r+0x20>
 8004b30:	002a      	movs	r2, r5
 8004b32:	42bd      	cmp	r5, r7
 8004b34:	d900      	bls.n	8004b38 <_realloc_r+0x4a>
 8004b36:	003a      	movs	r2, r7
 8004b38:	0021      	movs	r1, r4
 8004b3a:	9801      	ldr	r0, [sp, #4]
 8004b3c:	f7ff ffc7 	bl	8004ace <memcpy>
 8004b40:	0021      	movs	r1, r4
 8004b42:	0030      	movs	r0, r6
 8004b44:	f7ff faee 	bl	8004124 <_free_r>
 8004b48:	9c01      	ldr	r4, [sp, #4]
 8004b4a:	e7da      	b.n	8004b02 <_realloc_r+0x14>

08004b4c <__sfputc_r>:
 8004b4c:	6893      	ldr	r3, [r2, #8]
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	3b01      	subs	r3, #1
 8004b52:	6093      	str	r3, [r2, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da04      	bge.n	8004b62 <__sfputc_r+0x16>
 8004b58:	6994      	ldr	r4, [r2, #24]
 8004b5a:	42a3      	cmp	r3, r4
 8004b5c:	db07      	blt.n	8004b6e <__sfputc_r+0x22>
 8004b5e:	290a      	cmp	r1, #10
 8004b60:	d005      	beq.n	8004b6e <__sfputc_r+0x22>
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	1c58      	adds	r0, r3, #1
 8004b66:	6010      	str	r0, [r2, #0]
 8004b68:	7019      	strb	r1, [r3, #0]
 8004b6a:	0008      	movs	r0, r1
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	f000 f931 	bl	8004dd4 <__swbuf_r>
 8004b72:	0001      	movs	r1, r0
 8004b74:	e7f9      	b.n	8004b6a <__sfputc_r+0x1e>

08004b76 <__sfputs_r>:
 8004b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b78:	0006      	movs	r6, r0
 8004b7a:	000f      	movs	r7, r1
 8004b7c:	0014      	movs	r4, r2
 8004b7e:	18d5      	adds	r5, r2, r3
 8004b80:	42ac      	cmp	r4, r5
 8004b82:	d101      	bne.n	8004b88 <__sfputs_r+0x12>
 8004b84:	2000      	movs	r0, #0
 8004b86:	e007      	b.n	8004b98 <__sfputs_r+0x22>
 8004b88:	7821      	ldrb	r1, [r4, #0]
 8004b8a:	003a      	movs	r2, r7
 8004b8c:	0030      	movs	r0, r6
 8004b8e:	f7ff ffdd 	bl	8004b4c <__sfputc_r>
 8004b92:	3401      	adds	r4, #1
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d1f3      	bne.n	8004b80 <__sfputs_r+0xa>
 8004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b9c <_vfiprintf_r>:
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9e:	b0a1      	sub	sp, #132	@ 0x84
 8004ba0:	000f      	movs	r7, r1
 8004ba2:	0015      	movs	r5, r2
 8004ba4:	001e      	movs	r6, r3
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d004      	beq.n	8004bb6 <_vfiprintf_r+0x1a>
 8004bac:	6a03      	ldr	r3, [r0, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <_vfiprintf_r+0x1a>
 8004bb2:	f7ff f8ef 	bl	8003d94 <__sinit>
 8004bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb8:	07db      	lsls	r3, r3, #31
 8004bba:	d405      	bmi.n	8004bc8 <_vfiprintf_r+0x2c>
 8004bbc:	89bb      	ldrh	r3, [r7, #12]
 8004bbe:	059b      	lsls	r3, r3, #22
 8004bc0:	d402      	bmi.n	8004bc8 <_vfiprintf_r+0x2c>
 8004bc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004bc4:	f7ff fa8d 	bl	80040e2 <__retarget_lock_acquire_recursive>
 8004bc8:	89bb      	ldrh	r3, [r7, #12]
 8004bca:	071b      	lsls	r3, r3, #28
 8004bcc:	d502      	bpl.n	8004bd4 <_vfiprintf_r+0x38>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d113      	bne.n	8004bfc <_vfiprintf_r+0x60>
 8004bd4:	0039      	movs	r1, r7
 8004bd6:	9803      	ldr	r0, [sp, #12]
 8004bd8:	f000 f93e 	bl	8004e58 <__swsetup_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d00d      	beq.n	8004bfc <_vfiprintf_r+0x60>
 8004be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d503      	bpl.n	8004bee <_vfiprintf_r+0x52>
 8004be6:	2001      	movs	r0, #1
 8004be8:	4240      	negs	r0, r0
 8004bea:	b021      	add	sp, #132	@ 0x84
 8004bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bee:	89bb      	ldrh	r3, [r7, #12]
 8004bf0:	059b      	lsls	r3, r3, #22
 8004bf2:	d4f8      	bmi.n	8004be6 <_vfiprintf_r+0x4a>
 8004bf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004bf6:	f7ff fa75 	bl	80040e4 <__retarget_lock_release_recursive>
 8004bfa:	e7f4      	b.n	8004be6 <_vfiprintf_r+0x4a>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	ac08      	add	r4, sp, #32
 8004c00:	6163      	str	r3, [r4, #20]
 8004c02:	3320      	adds	r3, #32
 8004c04:	7663      	strb	r3, [r4, #25]
 8004c06:	3310      	adds	r3, #16
 8004c08:	76a3      	strb	r3, [r4, #26]
 8004c0a:	9607      	str	r6, [sp, #28]
 8004c0c:	002e      	movs	r6, r5
 8004c0e:	7833      	ldrb	r3, [r6, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <_vfiprintf_r+0x7c>
 8004c14:	2b25      	cmp	r3, #37	@ 0x25
 8004c16:	d148      	bne.n	8004caa <_vfiprintf_r+0x10e>
 8004c18:	1b73      	subs	r3, r6, r5
 8004c1a:	9305      	str	r3, [sp, #20]
 8004c1c:	42ae      	cmp	r6, r5
 8004c1e:	d00b      	beq.n	8004c38 <_vfiprintf_r+0x9c>
 8004c20:	002a      	movs	r2, r5
 8004c22:	0039      	movs	r1, r7
 8004c24:	9803      	ldr	r0, [sp, #12]
 8004c26:	f7ff ffa6 	bl	8004b76 <__sfputs_r>
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d100      	bne.n	8004c30 <_vfiprintf_r+0x94>
 8004c2e:	e0ae      	b.n	8004d8e <_vfiprintf_r+0x1f2>
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	9a05      	ldr	r2, [sp, #20]
 8004c34:	189b      	adds	r3, r3, r2
 8004c36:	6163      	str	r3, [r4, #20]
 8004c38:	7833      	ldrb	r3, [r6, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d100      	bne.n	8004c40 <_vfiprintf_r+0xa4>
 8004c3e:	e0a6      	b.n	8004d8e <_vfiprintf_r+0x1f2>
 8004c40:	2201      	movs	r2, #1
 8004c42:	2300      	movs	r3, #0
 8004c44:	4252      	negs	r2, r2
 8004c46:	6062      	str	r2, [r4, #4]
 8004c48:	a904      	add	r1, sp, #16
 8004c4a:	3254      	adds	r2, #84	@ 0x54
 8004c4c:	1852      	adds	r2, r2, r1
 8004c4e:	1c75      	adds	r5, r6, #1
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	60e3      	str	r3, [r4, #12]
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	7013      	strb	r3, [r2, #0]
 8004c58:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004c5a:	4b59      	ldr	r3, [pc, #356]	@ (8004dc0 <_vfiprintf_r+0x224>)
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	0018      	movs	r0, r3
 8004c60:	7829      	ldrb	r1, [r5, #0]
 8004c62:	9305      	str	r3, [sp, #20]
 8004c64:	f7ff ff28 	bl	8004ab8 <memchr>
 8004c68:	1c6e      	adds	r6, r5, #1
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d11f      	bne.n	8004cae <_vfiprintf_r+0x112>
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	06d3      	lsls	r3, r2, #27
 8004c72:	d504      	bpl.n	8004c7e <_vfiprintf_r+0xe2>
 8004c74:	2353      	movs	r3, #83	@ 0x53
 8004c76:	a904      	add	r1, sp, #16
 8004c78:	185b      	adds	r3, r3, r1
 8004c7a:	2120      	movs	r1, #32
 8004c7c:	7019      	strb	r1, [r3, #0]
 8004c7e:	0713      	lsls	r3, r2, #28
 8004c80:	d504      	bpl.n	8004c8c <_vfiprintf_r+0xf0>
 8004c82:	2353      	movs	r3, #83	@ 0x53
 8004c84:	a904      	add	r1, sp, #16
 8004c86:	185b      	adds	r3, r3, r1
 8004c88:	212b      	movs	r1, #43	@ 0x2b
 8004c8a:	7019      	strb	r1, [r3, #0]
 8004c8c:	782b      	ldrb	r3, [r5, #0]
 8004c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c90:	d016      	beq.n	8004cc0 <_vfiprintf_r+0x124>
 8004c92:	002e      	movs	r6, r5
 8004c94:	2100      	movs	r1, #0
 8004c96:	200a      	movs	r0, #10
 8004c98:	68e3      	ldr	r3, [r4, #12]
 8004c9a:	7832      	ldrb	r2, [r6, #0]
 8004c9c:	1c75      	adds	r5, r6, #1
 8004c9e:	3a30      	subs	r2, #48	@ 0x30
 8004ca0:	2a09      	cmp	r2, #9
 8004ca2:	d950      	bls.n	8004d46 <_vfiprintf_r+0x1aa>
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d111      	bne.n	8004ccc <_vfiprintf_r+0x130>
 8004ca8:	e017      	b.n	8004cda <_vfiprintf_r+0x13e>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7af      	b.n	8004c0e <_vfiprintf_r+0x72>
 8004cae:	9b05      	ldr	r3, [sp, #20]
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	1ac0      	subs	r0, r0, r3
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4083      	lsls	r3, r0
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	0035      	movs	r5, r6
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	e7cc      	b.n	8004c5a <_vfiprintf_r+0xbe>
 8004cc0:	9b07      	ldr	r3, [sp, #28]
 8004cc2:	1d19      	adds	r1, r3, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	9107      	str	r1, [sp, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db01      	blt.n	8004cd0 <_vfiprintf_r+0x134>
 8004ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cce:	e004      	b.n	8004cda <_vfiprintf_r+0x13e>
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	60e3      	str	r3, [r4, #12]
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	7833      	ldrb	r3, [r6, #0]
 8004cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cde:	d10c      	bne.n	8004cfa <_vfiprintf_r+0x15e>
 8004ce0:	7873      	ldrb	r3, [r6, #1]
 8004ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce4:	d134      	bne.n	8004d50 <_vfiprintf_r+0x1b4>
 8004ce6:	9b07      	ldr	r3, [sp, #28]
 8004ce8:	3602      	adds	r6, #2
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	9207      	str	r2, [sp, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da01      	bge.n	8004cf8 <_vfiprintf_r+0x15c>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cfa:	4d32      	ldr	r5, [pc, #200]	@ (8004dc4 <_vfiprintf_r+0x228>)
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	0028      	movs	r0, r5
 8004d00:	7831      	ldrb	r1, [r6, #0]
 8004d02:	f7ff fed9 	bl	8004ab8 <memchr>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d006      	beq.n	8004d18 <_vfiprintf_r+0x17c>
 8004d0a:	2340      	movs	r3, #64	@ 0x40
 8004d0c:	1b40      	subs	r0, r0, r5
 8004d0e:	4083      	lsls	r3, r0
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	3601      	adds	r6, #1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	7831      	ldrb	r1, [r6, #0]
 8004d1a:	2206      	movs	r2, #6
 8004d1c:	482a      	ldr	r0, [pc, #168]	@ (8004dc8 <_vfiprintf_r+0x22c>)
 8004d1e:	1c75      	adds	r5, r6, #1
 8004d20:	7621      	strb	r1, [r4, #24]
 8004d22:	f7ff fec9 	bl	8004ab8 <memchr>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d040      	beq.n	8004dac <_vfiprintf_r+0x210>
 8004d2a:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <_vfiprintf_r+0x230>)
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d122      	bne.n	8004d76 <_vfiprintf_r+0x1da>
 8004d30:	2207      	movs	r2, #7
 8004d32:	9b07      	ldr	r3, [sp, #28]
 8004d34:	3307      	adds	r3, #7
 8004d36:	4393      	bics	r3, r2
 8004d38:	3308      	adds	r3, #8
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	6963      	ldr	r3, [r4, #20]
 8004d3e:	9a04      	ldr	r2, [sp, #16]
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	6163      	str	r3, [r4, #20]
 8004d44:	e762      	b.n	8004c0c <_vfiprintf_r+0x70>
 8004d46:	4343      	muls	r3, r0
 8004d48:	002e      	movs	r6, r5
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	e7a4      	b.n	8004c9a <_vfiprintf_r+0xfe>
 8004d50:	2300      	movs	r3, #0
 8004d52:	200a      	movs	r0, #10
 8004d54:	0019      	movs	r1, r3
 8004d56:	3601      	adds	r6, #1
 8004d58:	6063      	str	r3, [r4, #4]
 8004d5a:	7832      	ldrb	r2, [r6, #0]
 8004d5c:	1c75      	adds	r5, r6, #1
 8004d5e:	3a30      	subs	r2, #48	@ 0x30
 8004d60:	2a09      	cmp	r2, #9
 8004d62:	d903      	bls.n	8004d6c <_vfiprintf_r+0x1d0>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0c8      	beq.n	8004cfa <_vfiprintf_r+0x15e>
 8004d68:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d6a:	e7c6      	b.n	8004cfa <_vfiprintf_r+0x15e>
 8004d6c:	4341      	muls	r1, r0
 8004d6e:	002e      	movs	r6, r5
 8004d70:	2301      	movs	r3, #1
 8004d72:	1889      	adds	r1, r1, r2
 8004d74:	e7f1      	b.n	8004d5a <_vfiprintf_r+0x1be>
 8004d76:	aa07      	add	r2, sp, #28
 8004d78:	9200      	str	r2, [sp, #0]
 8004d7a:	0021      	movs	r1, r4
 8004d7c:	003a      	movs	r2, r7
 8004d7e:	4b14      	ldr	r3, [pc, #80]	@ (8004dd0 <_vfiprintf_r+0x234>)
 8004d80:	9803      	ldr	r0, [sp, #12]
 8004d82:	e000      	b.n	8004d86 <_vfiprintf_r+0x1ea>
 8004d84:	bf00      	nop
 8004d86:	9004      	str	r0, [sp, #16]
 8004d88:	9b04      	ldr	r3, [sp, #16]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	d1d6      	bne.n	8004d3c <_vfiprintf_r+0x1a0>
 8004d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d90:	07db      	lsls	r3, r3, #31
 8004d92:	d405      	bmi.n	8004da0 <_vfiprintf_r+0x204>
 8004d94:	89bb      	ldrh	r3, [r7, #12]
 8004d96:	059b      	lsls	r3, r3, #22
 8004d98:	d402      	bmi.n	8004da0 <_vfiprintf_r+0x204>
 8004d9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004d9c:	f7ff f9a2 	bl	80040e4 <__retarget_lock_release_recursive>
 8004da0:	89bb      	ldrh	r3, [r7, #12]
 8004da2:	065b      	lsls	r3, r3, #25
 8004da4:	d500      	bpl.n	8004da8 <_vfiprintf_r+0x20c>
 8004da6:	e71e      	b.n	8004be6 <_vfiprintf_r+0x4a>
 8004da8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004daa:	e71e      	b.n	8004bea <_vfiprintf_r+0x4e>
 8004dac:	aa07      	add	r2, sp, #28
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	0021      	movs	r1, r4
 8004db2:	003a      	movs	r2, r7
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <_vfiprintf_r+0x234>)
 8004db6:	9803      	ldr	r0, [sp, #12]
 8004db8:	f7ff fc88 	bl	80046cc <_printf_i>
 8004dbc:	e7e3      	b.n	8004d86 <_vfiprintf_r+0x1ea>
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	08005366 	.word	0x08005366
 8004dc4:	0800536c 	.word	0x0800536c
 8004dc8:	08005370 	.word	0x08005370
 8004dcc:	00000000 	.word	0x00000000
 8004dd0:	08004b77 	.word	0x08004b77

08004dd4 <__swbuf_r>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	0006      	movs	r6, r0
 8004dd8:	000d      	movs	r5, r1
 8004dda:	0014      	movs	r4, r2
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d004      	beq.n	8004dea <__swbuf_r+0x16>
 8004de0:	6a03      	ldr	r3, [r0, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <__swbuf_r+0x16>
 8004de6:	f7fe ffd5 	bl	8003d94 <__sinit>
 8004dea:	69a3      	ldr	r3, [r4, #24]
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	d502      	bpl.n	8004dfa <__swbuf_r+0x26>
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <__swbuf_r+0x3a>
 8004dfa:	0021      	movs	r1, r4
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	f000 f82b 	bl	8004e58 <__swsetup_r>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d003      	beq.n	8004e0e <__swbuf_r+0x3a>
 8004e06:	2501      	movs	r5, #1
 8004e08:	426d      	negs	r5, r5
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	b2ef      	uxtb	r7, r5
 8004e14:	1ac0      	subs	r0, r0, r3
 8004e16:	6963      	ldr	r3, [r4, #20]
 8004e18:	b2ed      	uxtb	r5, r5
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	dc05      	bgt.n	8004e2a <__swbuf_r+0x56>
 8004e1e:	0021      	movs	r1, r4
 8004e20:	0030      	movs	r0, r6
 8004e22:	f7ff fde7 	bl	80049f4 <_fflush_r>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d1ed      	bne.n	8004e06 <__swbuf_r+0x32>
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	701f      	strb	r7, [r3, #0]
 8004e3a:	6963      	ldr	r3, [r4, #20]
 8004e3c:	4283      	cmp	r3, r0
 8004e3e:	d004      	beq.n	8004e4a <__swbuf_r+0x76>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d5e1      	bpl.n	8004e0a <__swbuf_r+0x36>
 8004e46:	2d0a      	cmp	r5, #10
 8004e48:	d1df      	bne.n	8004e0a <__swbuf_r+0x36>
 8004e4a:	0021      	movs	r1, r4
 8004e4c:	0030      	movs	r0, r6
 8004e4e:	f7ff fdd1 	bl	80049f4 <_fflush_r>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0d9      	beq.n	8004e0a <__swbuf_r+0x36>
 8004e56:	e7d6      	b.n	8004e06 <__swbuf_r+0x32>

08004e58 <__swsetup_r>:
 8004e58:	4b2d      	ldr	r3, [pc, #180]	@ (8004f10 <__swsetup_r+0xb8>)
 8004e5a:	b570      	push	{r4, r5, r6, lr}
 8004e5c:	0005      	movs	r5, r0
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	000c      	movs	r4, r1
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d004      	beq.n	8004e70 <__swsetup_r+0x18>
 8004e66:	6a03      	ldr	r3, [r0, #32]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <__swsetup_r+0x18>
 8004e6c:	f7fe ff92 	bl	8003d94 <__sinit>
 8004e70:	230c      	movs	r3, #12
 8004e72:	5ee2      	ldrsh	r2, [r4, r3]
 8004e74:	0713      	lsls	r3, r2, #28
 8004e76:	d423      	bmi.n	8004ec0 <__swsetup_r+0x68>
 8004e78:	06d3      	lsls	r3, r2, #27
 8004e7a:	d407      	bmi.n	8004e8c <__swsetup_r+0x34>
 8004e7c:	2309      	movs	r3, #9
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	2340      	movs	r3, #64	@ 0x40
 8004e82:	2001      	movs	r0, #1
 8004e84:	4313      	orrs	r3, r2
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	4240      	negs	r0, r0
 8004e8a:	e03a      	b.n	8004f02 <__swsetup_r+0xaa>
 8004e8c:	0752      	lsls	r2, r2, #29
 8004e8e:	d513      	bpl.n	8004eb8 <__swsetup_r+0x60>
 8004e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d008      	beq.n	8004ea8 <__swsetup_r+0x50>
 8004e96:	0023      	movs	r3, r4
 8004e98:	3344      	adds	r3, #68	@ 0x44
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d002      	beq.n	8004ea4 <__swsetup_r+0x4c>
 8004e9e:	0028      	movs	r0, r5
 8004ea0:	f7ff f940 	bl	8004124 <_free_r>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ea8:	2224      	movs	r2, #36	@ 0x24
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	4393      	bics	r3, r2
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6063      	str	r3, [r4, #4]
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	2308      	movs	r3, #8
 8004eba:	89a2      	ldrh	r2, [r4, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <__swsetup_r+0x86>
 8004ec6:	21a0      	movs	r1, #160	@ 0xa0
 8004ec8:	2280      	movs	r2, #128	@ 0x80
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	0089      	lsls	r1, r1, #2
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <__swsetup_r+0x86>
 8004ed6:	0021      	movs	r1, r4
 8004ed8:	0028      	movs	r0, r5
 8004eda:	f000 f897 	bl	800500c <__smakebuf_r>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	5ee2      	ldrsh	r2, [r4, r3]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	0013      	movs	r3, r2
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	420a      	tst	r2, r1
 8004eea:	d00b      	beq.n	8004f04 <__swsetup_r+0xac>
 8004eec:	2300      	movs	r3, #0
 8004eee:	60a3      	str	r3, [r4, #8]
 8004ef0:	6963      	ldr	r3, [r4, #20]
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	61a3      	str	r3, [r4, #24]
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	4283      	cmp	r3, r0
 8004efc:	d101      	bne.n	8004f02 <__swsetup_r+0xaa>
 8004efe:	0613      	lsls	r3, r2, #24
 8004f00:	d4be      	bmi.n	8004e80 <__swsetup_r+0x28>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	0791      	lsls	r1, r2, #30
 8004f06:	d400      	bmi.n	8004f0a <__swsetup_r+0xb2>
 8004f08:	6963      	ldr	r3, [r4, #20]
 8004f0a:	60a3      	str	r3, [r4, #8]
 8004f0c:	e7f3      	b.n	8004ef6 <__swsetup_r+0x9e>
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20000018 	.word	0x20000018

08004f14 <_raise_r>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	0004      	movs	r4, r0
 8004f18:	000d      	movs	r5, r1
 8004f1a:	291f      	cmp	r1, #31
 8004f1c:	d904      	bls.n	8004f28 <_raise_r+0x14>
 8004f1e:	2316      	movs	r3, #22
 8004f20:	6003      	str	r3, [r0, #0]
 8004f22:	2001      	movs	r0, #1
 8004f24:	4240      	negs	r0, r0
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <_raise_r+0x24>
 8004f2e:	008a      	lsls	r2, r1, #2
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	d108      	bne.n	8004f4a <_raise_r+0x36>
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f000 f831 	bl	8004fa0 <_getpid_r>
 8004f3e:	002a      	movs	r2, r5
 8004f40:	0001      	movs	r1, r0
 8004f42:	0020      	movs	r0, r4
 8004f44:	f000 f81a 	bl	8004f7c <_kill_r>
 8004f48:	e7ed      	b.n	8004f26 <_raise_r+0x12>
 8004f4a:	2a01      	cmp	r2, #1
 8004f4c:	d009      	beq.n	8004f62 <_raise_r+0x4e>
 8004f4e:	1c51      	adds	r1, r2, #1
 8004f50:	d103      	bne.n	8004f5a <_raise_r+0x46>
 8004f52:	2316      	movs	r3, #22
 8004f54:	6003      	str	r3, [r0, #0]
 8004f56:	2001      	movs	r0, #1
 8004f58:	e7e5      	b.n	8004f26 <_raise_r+0x12>
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	0028      	movs	r0, r5
 8004f5e:	6019      	str	r1, [r3, #0]
 8004f60:	4790      	blx	r2
 8004f62:	2000      	movs	r0, #0
 8004f64:	e7df      	b.n	8004f26 <_raise_r+0x12>
	...

08004f68 <raise>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <raise+0x10>)
 8004f6c:	0001      	movs	r1, r0
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	f7ff ffd0 	bl	8004f14 <_raise_r>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	20000018 	.word	0x20000018

08004f7c <_kill_r>:
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	b570      	push	{r4, r5, r6, lr}
 8004f80:	4d06      	ldr	r5, [pc, #24]	@ (8004f9c <_kill_r+0x20>)
 8004f82:	0004      	movs	r4, r0
 8004f84:	0008      	movs	r0, r1
 8004f86:	0011      	movs	r1, r2
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	f7fb fd2b 	bl	80009e4 <_kill>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d103      	bne.n	8004f9a <_kill_r+0x1e>
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d000      	beq.n	8004f9a <_kill_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	200004f4 	.word	0x200004f4

08004fa0 <_getpid_r>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	f7fb fd19 	bl	80009d8 <_getpid>
 8004fa6:	bd10      	pop	{r4, pc}

08004fa8 <_malloc_usable_size_r>:
 8004fa8:	1f0b      	subs	r3, r1, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	1f18      	subs	r0, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da01      	bge.n	8004fb6 <_malloc_usable_size_r+0xe>
 8004fb2:	580b      	ldr	r3, [r1, r0]
 8004fb4:	18c0      	adds	r0, r0, r3
 8004fb6:	4770      	bx	lr

08004fb8 <__swhatbuf_r>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	000e      	movs	r6, r1
 8004fbc:	001d      	movs	r5, r3
 8004fbe:	230e      	movs	r3, #14
 8004fc0:	5ec9      	ldrsh	r1, [r1, r3]
 8004fc2:	0014      	movs	r4, r2
 8004fc4:	b096      	sub	sp, #88	@ 0x58
 8004fc6:	2900      	cmp	r1, #0
 8004fc8:	da0c      	bge.n	8004fe4 <__swhatbuf_r+0x2c>
 8004fca:	89b2      	ldrh	r2, [r6, #12]
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	0011      	movs	r1, r2
 8004fd0:	4019      	ands	r1, r3
 8004fd2:	421a      	tst	r2, r3
 8004fd4:	d114      	bne.n	8005000 <__swhatbuf_r+0x48>
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	2000      	movs	r0, #0
 8004fdc:	6029      	str	r1, [r5, #0]
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	b016      	add	sp, #88	@ 0x58
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	466a      	mov	r2, sp
 8004fe6:	f000 f853 	bl	8005090 <_fstat_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	dbed      	blt.n	8004fca <__swhatbuf_r+0x12>
 8004fee:	23f0      	movs	r3, #240	@ 0xf0
 8004ff0:	9901      	ldr	r1, [sp, #4]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	4019      	ands	r1, r3
 8004ff6:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <__swhatbuf_r+0x50>)
 8004ff8:	18c9      	adds	r1, r1, r3
 8004ffa:	424b      	negs	r3, r1
 8004ffc:	4159      	adcs	r1, r3
 8004ffe:	e7ea      	b.n	8004fd6 <__swhatbuf_r+0x1e>
 8005000:	2100      	movs	r1, #0
 8005002:	2340      	movs	r3, #64	@ 0x40
 8005004:	e7e9      	b.n	8004fda <__swhatbuf_r+0x22>
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	ffffe000 	.word	0xffffe000

0800500c <__smakebuf_r>:
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	2602      	movs	r6, #2
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	0005      	movs	r5, r0
 8005014:	000c      	movs	r4, r1
 8005016:	b085      	sub	sp, #20
 8005018:	4233      	tst	r3, r6
 800501a:	d007      	beq.n	800502c <__smakebuf_r+0x20>
 800501c:	0023      	movs	r3, r4
 800501e:	3347      	adds	r3, #71	@ 0x47
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	2301      	movs	r3, #1
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	b005      	add	sp, #20
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	ab03      	add	r3, sp, #12
 800502e:	aa02      	add	r2, sp, #8
 8005030:	f7ff ffc2 	bl	8004fb8 <__swhatbuf_r>
 8005034:	9f02      	ldr	r7, [sp, #8]
 8005036:	9001      	str	r0, [sp, #4]
 8005038:	0039      	movs	r1, r7
 800503a:	0028      	movs	r0, r5
 800503c:	f7ff f8e8 	bl	8004210 <_malloc_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	d108      	bne.n	8005056 <__smakebuf_r+0x4a>
 8005044:	220c      	movs	r2, #12
 8005046:	5ea3      	ldrsh	r3, [r4, r2]
 8005048:	059a      	lsls	r2, r3, #22
 800504a:	d4ed      	bmi.n	8005028 <__smakebuf_r+0x1c>
 800504c:	2203      	movs	r2, #3
 800504e:	4393      	bics	r3, r2
 8005050:	431e      	orrs	r6, r3
 8005052:	81a6      	strh	r6, [r4, #12]
 8005054:	e7e2      	b.n	800501c <__smakebuf_r+0x10>
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	89a2      	ldrh	r2, [r4, #12]
 800505a:	6020      	str	r0, [r4, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	6120      	str	r0, [r4, #16]
 8005064:	6167      	str	r7, [r4, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <__smakebuf_r+0x78>
 800506a:	0028      	movs	r0, r5
 800506c:	230e      	movs	r3, #14
 800506e:	5ee1      	ldrsh	r1, [r4, r3]
 8005070:	f000 f820 	bl	80050b4 <_isatty_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	d005      	beq.n	8005084 <__smakebuf_r+0x78>
 8005078:	2303      	movs	r3, #3
 800507a:	89a2      	ldrh	r2, [r4, #12]
 800507c:	439a      	bics	r2, r3
 800507e:	3b02      	subs	r3, #2
 8005080:	4313      	orrs	r3, r2
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	9a01      	ldr	r2, [sp, #4]
 8005088:	4313      	orrs	r3, r2
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	e7cc      	b.n	8005028 <__smakebuf_r+0x1c>
	...

08005090 <_fstat_r>:
 8005090:	2300      	movs	r3, #0
 8005092:	b570      	push	{r4, r5, r6, lr}
 8005094:	4d06      	ldr	r5, [pc, #24]	@ (80050b0 <_fstat_r+0x20>)
 8005096:	0004      	movs	r4, r0
 8005098:	0008      	movs	r0, r1
 800509a:	0011      	movs	r1, r2
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f7fb fd01 	bl	8000aa4 <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d103      	bne.n	80050ae <_fstat_r+0x1e>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d000      	beq.n	80050ae <_fstat_r+0x1e>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	200004f4 	.word	0x200004f4

080050b4 <_isatty_r>:
 80050b4:	2300      	movs	r3, #0
 80050b6:	b570      	push	{r4, r5, r6, lr}
 80050b8:	4d06      	ldr	r5, [pc, #24]	@ (80050d4 <_isatty_r+0x20>)
 80050ba:	0004      	movs	r4, r0
 80050bc:	0008      	movs	r0, r1
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	f7fb fcfe 	bl	8000ac0 <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d103      	bne.n	80050d0 <_isatty_r+0x1c>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d000      	beq.n	80050d0 <_isatty_r+0x1c>
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	200004f4 	.word	0x200004f4

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
