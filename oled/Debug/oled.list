
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  08002448  08002448  00003448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003604  08003604  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003604  08003604  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003604  08003604  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003608  08003608  00004608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800360c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000000c  08003618  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08003618  00005488  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079ec  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a87  00000000  00000000  0000ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d3  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bc9  00000000  00000000  0000f243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b188  00000000  00000000  00021e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000716eb  00000000  00000000  0002cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e67f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a54  00000000  00000000  0009e6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000a0118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002430 	.word	0x08002430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002430 	.word	0x08002430

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fcfe 	bl	8000c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f845 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8c7 	bl	80003c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f885 	bl	8000340 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000236:	f000 f931 	bl	800049c <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ssd1306_Fill(Black);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f99a 	bl	8000574 <ssd1306_Fill>
	ssd1306_SetCursor(4, 4);
 8000240:	2104      	movs	r1, #4
 8000242:	2004      	movs	r0, #4
 8000244:	f000 fb0e 	bl	8000864 <ssd1306_SetCursor>
	ssd1306_WriteString("Portal", Font_11x18, White);
 8000248:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <main+0x88>)
 800024a:	4818      	ldr	r0, [pc, #96]	@ (80002ac <main+0x8c>)
 800024c:	2201      	movs	r2, #1
 800024e:	9200      	str	r2, [sp, #0]
 8000250:	6819      	ldr	r1, [r3, #0]
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f000 fad9 	bl	800080c <ssd1306_WriteString>
	ssd1306_SetCursor(4, 24);
 800025a:	2118      	movs	r1, #24
 800025c:	2004      	movs	r0, #4
 800025e:	f000 fb01 	bl	8000864 <ssd1306_SetCursor>
	ssd1306_WriteString("Embarcados", Font_11x18, White);
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <main+0x88>)
 8000264:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <main+0x90>)
 8000266:	2201      	movs	r2, #1
 8000268:	9200      	str	r2, [sp, #0]
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	f000 facc 	bl	800080c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000274:	f000 f998 	bl	80005a8 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8000278:	23fa      	movs	r3, #250	@ 0xfa
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fd4f 	bl	8000d20 <HAL_Delay>
	ssd1306_DrawBitmap(0,0,franzininho_128x64,128,64, White);
 8000282:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <main+0x94>)
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2340      	movs	r3, #64	@ 0x40
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	2100      	movs	r1, #0
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fb01 	bl	8000898 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8000296:	f000 f987 	bl	80005a8 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800029a:	23fa      	movs	r3, #250	@ 0xfa
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fd3e 	bl	8000d20 <HAL_Delay>
	ssd1306_Fill(Black);
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	e7c8      	b.n	800023a <main+0x1a>
 80002a8:	080035b8 	.word	0x080035b8
 80002ac:	08002448 	.word	0x08002448
 80002b0:	08002450 	.word	0x08002450
 80002b4:	0800245c 	.word	0x0800245c

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	@ 0x34
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	231c      	movs	r3, #28
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 f885 	bl	80023d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 f87e 	bl	80023d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2202      	movs	r2, #2
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2240      	movs	r2, #64	@ 0x40
 80002f4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fc4f 	bl	8001b9c <HAL_RCC_OscConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000302:	f000 f88b 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	003b      	movs	r3, r7
 8000308:	2207      	movs	r2, #7
 800030a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	2101      	movs	r1, #1
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fe1b 	bl	8001f64 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000332:	f000 f873 	bl	800041c <Error_Handler>
  }
}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b00d      	add	sp, #52	@ 0x34
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	@ (80003b8 <MX_I2C1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <MX_I2C1_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800037c:	0018      	movs	r0, r3
 800037e:	f000 ff11 	bl	80011a4 <HAL_I2C_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 f849 	bl	800041c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800038c:	2100      	movs	r1, #0
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fb6c 	bl	8001a6c <HAL_I2CEx_ConfigAnalogFilter>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 f840 	bl	800041c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800039e:	2100      	movs	r1, #0
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fbaf 	bl	8001b04 <HAL_I2CEx_ConfigDigitalFilter>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f837 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40005400 	.word	0x40005400
 80003bc:	20303e5d 	.word	0x20303e5d

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ca:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003cc:	2104      	movs	r1, #4
 80003ce:	430a      	orrs	r2, r1
 80003d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d6:	2204      	movs	r2, #4
 80003d8:	4013      	ands	r3, r2
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <MX_GPIO_Init+0x58>)
 80003fc:	2102      	movs	r1, #2
 80003fe:	430a      	orrs	r2, r1
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
 8000402:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <MX_GPIO_Init+0x58>)
 8000404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000406:	2202      	movs	r2, #2
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b004      	add	sp, #16
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	40021000 	.word	0x40021000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af04      	add	r7, sp, #16
 800043a:	0002      	movs	r2, r0
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <ssd1306_WriteCommand+0x30>)
 8000442:	2301      	movs	r3, #1
 8000444:	425b      	negs	r3, r3
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	2301      	movs	r3, #1
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	2301      	movs	r3, #1
 8000452:	2200      	movs	r2, #0
 8000454:	2178      	movs	r1, #120	@ 0x78
 8000456:	f000 ff4b 	bl	80012f0 <HAL_I2C_Mem_Write>
}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	20000028 	.word	0x20000028

08000468 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af04      	add	r7, sp, #16
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	b29b      	uxth	r3, r3
 8000476:	4808      	ldr	r0, [pc, #32]	@ (8000498 <ssd1306_WriteData+0x30>)
 8000478:	2201      	movs	r2, #1
 800047a:	4252      	negs	r2, r2
 800047c:	9202      	str	r2, [sp, #8]
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	2240      	movs	r2, #64	@ 0x40
 8000488:	2178      	movs	r1, #120	@ 0x78
 800048a:	f000 ff31 	bl	80012f0 <HAL_I2C_Mem_Write>
}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	20000028 	.word	0x20000028

0800049c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80004a0:	f7ff ffc2 	bl	8000428 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80004a4:	2064      	movs	r0, #100	@ 0x64
 80004a6:	f000 fc3b 	bl	8000d20 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fa9a 	bl	80009e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80004b0:	2020      	movs	r0, #32
 80004b2:	f7ff ffbf 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ffbc 	bl	8000434 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004bc:	20b0      	movs	r0, #176	@ 0xb0
 80004be:	f7ff ffb9 	bl	8000434 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80004c2:	20c8      	movs	r0, #200	@ 0xc8
 80004c4:	f7ff ffb6 	bl	8000434 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ffb3 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80004ce:	2010      	movs	r0, #16
 80004d0:	f7ff ffb0 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80004d4:	2040      	movs	r0, #64	@ 0x40
 80004d6:	f7ff ffad 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80004da:	20ff      	movs	r0, #255	@ 0xff
 80004dc:	f000 fa6a 	bl	80009b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80004e0:	20a1      	movs	r0, #161	@ 0xa1
 80004e2:	f7ff ffa7 	bl	8000434 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80004e6:	20a6      	movs	r0, #166	@ 0xa6
 80004e8:	f7ff ffa4 	bl	8000434 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80004ec:	20a8      	movs	r0, #168	@ 0xa8
 80004ee:	f7ff ffa1 	bl	8000434 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80004f2:	203f      	movs	r0, #63	@ 0x3f
 80004f4:	f7ff ff9e 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004f8:	20a4      	movs	r0, #164	@ 0xa4
 80004fa:	f7ff ff9b 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80004fe:	20d3      	movs	r0, #211	@ 0xd3
 8000500:	f7ff ff98 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff ff95 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800050a:	20d5      	movs	r0, #213	@ 0xd5
 800050c:	f7ff ff92 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000510:	20f0      	movs	r0, #240	@ 0xf0
 8000512:	f7ff ff8f 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000516:	20d9      	movs	r0, #217	@ 0xd9
 8000518:	f7ff ff8c 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800051c:	2022      	movs	r0, #34	@ 0x22
 800051e:	f7ff ff89 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000522:	20da      	movs	r0, #218	@ 0xda
 8000524:	f7ff ff86 	bl	8000434 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000528:	2012      	movs	r0, #18
 800052a:	f7ff ff83 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800052e:	20db      	movs	r0, #219	@ 0xdb
 8000530:	f7ff ff80 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000534:	2020      	movs	r0, #32
 8000536:	f7ff ff7d 	bl	8000434 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800053a:	208d      	movs	r0, #141	@ 0x8d
 800053c:	f7ff ff7a 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000540:	2014      	movs	r0, #20
 8000542:	f7ff ff77 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fa4c 	bl	80009e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f811 	bl	8000574 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000552:	f000 f829 	bl	80005a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <ssd1306_Init+0xd4>)
 8000558:	2200      	movs	r2, #0
 800055a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <ssd1306_Init+0xd4>)
 800055e:	2200      	movs	r2, #0
 8000560:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000562:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <ssd1306_Init+0xd4>)
 8000564:	2201      	movs	r2, #1
 8000566:	711a      	strb	r2, [r3, #4]
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	2000047c 	.word	0x2000047c

08000574 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <ssd1306_Fill+0x18>
 8000588:	2300      	movs	r3, #0
 800058a:	e000      	b.n	800058e <ssd1306_Fill+0x1a>
 800058c:	23ff      	movs	r3, #255	@ 0xff
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	00d2      	lsls	r2, r2, #3
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <ssd1306_Fill+0x30>)
 8000594:	0019      	movs	r1, r3
 8000596:	f001 ff1f 	bl	80023d8 <memset>
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	2000007c 	.word	0x2000007c

080005a8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	e01a      	b.n	80005ec <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	3b50      	subs	r3, #80	@ 0x50
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff38 	bl	8000434 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ff35 	bl	8000434 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80005ca:	2010      	movs	r0, #16
 80005cc:	f7ff ff32 	bl	8000434 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	01da      	lsls	r2, r3, #7
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <ssd1306_UpdateScreen+0x58>)
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ff43 	bl	8000468 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	3201      	adds	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d9e0      	bls.n	80005b6 <ssd1306_UpdateScreen+0xe>
    }
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	2000007c 	.word	0x2000007c

08000604 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	0004      	movs	r4, r0
 800060c:	0008      	movs	r0, r1
 800060e:	0011      	movs	r1, r2
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	1c22      	adds	r2, r4, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	1c02      	adds	r2, r0, #0
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	1d7b      	adds	r3, r7, #5
 800061e:	1c0a      	adds	r2, r1, #0
 8000620:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	db47      	blt.n	80006bc <ssd1306_DrawPixel+0xb8>
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b3f      	cmp	r3, #63	@ 0x3f
 8000632:	d843      	bhi.n	80006bc <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000634:	1d7b      	adds	r3, r7, #5
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d11e      	bne.n	800067a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b2d8      	uxtb	r0, r3
 8000648:	0003      	movs	r3, r0
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	4a1d      	ldr	r2, [pc, #116]	@ (80006c4 <ssd1306_DrawPixel+0xc0>)
 8000650:	5cd3      	ldrb	r3, [r2, r3]
 8000652:	b25a      	sxtb	r2, r3
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2107      	movs	r1, #7
 800065a:	400b      	ands	r3, r1
 800065c:	2101      	movs	r1, #1
 800065e:	4099      	lsls	r1, r3
 8000660:	000b      	movs	r3, r1
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b259      	sxtb	r1, r3
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	0003      	movs	r3, r0
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	18d3      	adds	r3, r2, r3
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <ssd1306_DrawPixel+0xc0>)
 8000676:	54d1      	strb	r1, [r2, r3]
 8000678:	e021      	b.n	80006be <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	1dbb      	adds	r3, r7, #6
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	0003      	movs	r3, r0
 8000688:	01db      	lsls	r3, r3, #7
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <ssd1306_DrawPixel+0xc0>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	b25b      	sxtb	r3, r3
 8000692:	1dba      	adds	r2, r7, #6
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	2107      	movs	r1, #7
 8000698:	400a      	ands	r2, r1
 800069a:	2101      	movs	r1, #1
 800069c:	4091      	lsls	r1, r2
 800069e:	000a      	movs	r2, r1
 80006a0:	b252      	sxtb	r2, r2
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	b252      	sxtb	r2, r2
 80006a6:	4013      	ands	r3, r2
 80006a8:	b259      	sxtb	r1, r3
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	0003      	movs	r3, r0
 80006b0:	01db      	lsls	r3, r3, #7
 80006b2:	18d3      	adds	r3, r2, r3
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	4a03      	ldr	r2, [pc, #12]	@ (80006c4 <ssd1306_DrawPixel+0xc0>)
 80006b8:	54d1      	strb	r1, [r2, r3]
 80006ba:	e000      	b.n	80006be <ssd1306_DrawPixel+0xba>
        return;
 80006bc:	46c0      	nop			@ (mov r8, r8)
    }
}
 80006be:	46bd      	mov	sp, r7
 80006c0:	b003      	add	sp, #12
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	2000007c 	.word	0x2000007c

080006c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	@ 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0004      	movs	r4, r0
 80006d0:	0038      	movs	r0, r7
 80006d2:	6001      	str	r1, [r0, #0]
 80006d4:	6042      	str	r2, [r0, #4]
 80006d6:	6083      	str	r3, [r0, #8]
 80006d8:	210f      	movs	r1, #15
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	1c22      	adds	r2, r4, #0
 80006de:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80006e0:	000a      	movs	r2, r1
 80006e2:	18bb      	adds	r3, r7, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b1f      	cmp	r3, #31
 80006e8:	d903      	bls.n	80006f2 <ssd1306_WriteChar+0x2a>
 80006ea:	18bb      	adds	r3, r7, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80006f0:	d901      	bls.n	80006f6 <ssd1306_WriteChar+0x2e>
        return 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e084      	b.n	8000800 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80006f6:	4b44      	ldr	r3, [pc, #272]	@ (8000808 <ssd1306_WriteChar+0x140>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	001a      	movs	r2, r3
 80006fc:	003b      	movs	r3, r7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	18d3      	adds	r3, r2, r3
 8000702:	2b80      	cmp	r3, #128	@ 0x80
 8000704:	dc07      	bgt.n	8000716 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000706:	4b40      	ldr	r3, [pc, #256]	@ (8000808 <ssd1306_WriteChar+0x140>)
 8000708:	885b      	ldrh	r3, [r3, #2]
 800070a:	001a      	movs	r2, r3
 800070c:	003b      	movs	r3, r7
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000712:	2b40      	cmp	r3, #64	@ 0x40
 8000714:	dd01      	ble.n	800071a <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8000716:	2300      	movs	r3, #0
 8000718:	e072      	b.n	8000800 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	e051      	b.n	80007c4 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 8000720:	003b      	movs	r3, r7
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	230f      	movs	r3, #15
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	3b20      	subs	r3, #32
 800072c:	0039      	movs	r1, r7
 800072e:	7849      	ldrb	r1, [r1, #1]
 8000730:	434b      	muls	r3, r1
 8000732:	0019      	movs	r1, r3
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	18cb      	adds	r3, r1, r3
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	e035      	b.n	80007b2 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	409a      	lsls	r2, r3
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	4013      	ands	r3, r2
 8000752:	d014      	beq.n	800077e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000754:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <ssd1306_WriteChar+0x140>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	b2d8      	uxtb	r0, r3
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <ssd1306_WriteChar+0x140>)
 8000764:	885b      	ldrh	r3, [r3, #2]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	18d3      	adds	r3, r2, r3
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	2330      	movs	r3, #48	@ 0x30
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	001a      	movs	r2, r3
 8000778:	f7ff ff44 	bl	8000604 <ssd1306_DrawPixel>
 800077c:	e016      	b.n	80007ac <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800077e:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <ssd1306_WriteChar+0x140>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	b2d8      	uxtb	r0, r3
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <ssd1306_WriteChar+0x140>)
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	18d3      	adds	r3, r2, r3
 8000798:	b2d9      	uxtb	r1, r3
 800079a:	2330      	movs	r3, #48	@ 0x30
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	425a      	negs	r2, r3
 80007a2:	4153      	adcs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	001a      	movs	r2, r3
 80007a8:	f7ff ff2c 	bl	8000604 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3301      	adds	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	003b      	movs	r3, r7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	001a      	movs	r2, r3
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d3c3      	bcc.n	8000746 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	003b      	movs	r3, r7
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	001a      	movs	r2, r3
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d3a7      	bcc.n	8000720 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <ssd1306_WriteChar+0x140>)
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	003b      	movs	r3, r7
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <ssd1306_WriteChar+0x126>
 80007dc:	003b      	movs	r3, r7
 80007de:	6899      	ldr	r1, [r3, #8]
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3b20      	subs	r3, #32
 80007e8:	18cb      	adds	r3, r1, r3
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	e001      	b.n	80007f2 <ssd1306_WriteChar+0x12a>
 80007ee:	003b      	movs	r3, r7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <ssd1306_WriteChar+0x140>)
 80007f8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80007fa:	230f      	movs	r3, #15
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	781b      	ldrb	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b009      	add	sp, #36	@ 0x24
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	2000047c 	.word	0x2000047c

0800080c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	0038      	movs	r0, r7
 8000816:	6001      	str	r1, [r0, #0]
 8000818:	6042      	str	r2, [r0, #4]
 800081a:	6083      	str	r3, [r0, #8]
    while (*str) {
 800081c:	e017      	b.n	800084e <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	7818      	ldrb	r0, [r3, #0]
 8000822:	003b      	movs	r3, r7
 8000824:	2218      	movs	r2, #24
 8000826:	18ba      	adds	r2, r7, r2
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	9200      	str	r2, [sp, #0]
 800082c:	6819      	ldr	r1, [r3, #0]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f7ff ff49 	bl	80006c8 <ssd1306_WriteChar>
 8000836:	0003      	movs	r3, r0
 8000838:	001a      	movs	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d002      	beq.n	8000848 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	e008      	b.n	800085a <ssd1306_WriteString+0x4e>
        }
        str++;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1e3      	bne.n	800081e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	1c0a      	adds	r2, r1, #0
 8000874:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <ssd1306_SetCursor+0x30>)
 800087e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <ssd1306_SetCursor+0x30>)
 8000888:	805a      	strh	r2, [r3, #2]
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	2000047c 	.word	0x2000047c

08000898 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	0004      	movs	r4, r0
 80008a0:	0008      	movs	r0, r1
 80008a2:	603a      	str	r2, [r7, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	1c22      	adds	r2, r4, #0
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1d7b      	adds	r3, r7, #5
 80008b4:	1c0a      	adds	r2, r1, #0
 80008b6:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80008b8:	1d7b      	adds	r3, r7, #5
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3307      	adds	r3, #7
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <ssd1306_DrawBitmap+0x2c>
 80008c2:	3307      	adds	r3, #7
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	001a      	movs	r2, r3
 80008c8:	230a      	movs	r3, #10
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db65      	blt.n	80009ac <ssd1306_DrawBitmap+0x114>
 80008e0:	1dbb      	adds	r3, r7, #6
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80008e6:	d861      	bhi.n	80009ac <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80008e8:	230e      	movs	r3, #14
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e053      	b.n	800099a <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 80008f2:	230d      	movs	r3, #13
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e03c      	b.n	8000976 <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 80008fc:	230d      	movs	r3, #13
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2207      	movs	r2, #7
 8000904:	4013      	ands	r3, r2
 8000906:	d006      	beq.n	8000916 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8000908:	230f      	movs	r3, #15
 800090a:	18fa      	adds	r2, r7, r3
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	18db      	adds	r3, r3, r3
 8000912:	7013      	strb	r3, [r2, #0]
 8000914:	e014      	b.n	8000940 <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000916:	230e      	movs	r3, #14
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	220a      	movs	r2, #10
 800091e:	18ba      	adds	r2, r7, r2
 8000920:	2100      	movs	r1, #0
 8000922:	5e52      	ldrsh	r2, [r2, r1]
 8000924:	4353      	muls	r3, r2
 8000926:	220d      	movs	r2, #13
 8000928:	18ba      	adds	r2, r7, r2
 800092a:	7812      	ldrb	r2, [r2, #0]
 800092c:	08d2      	lsrs	r2, r2, #3
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	189b      	adds	r3, r3, r2
 8000932:	001a      	movs	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	189a      	adds	r2, r3, r2
 8000938:	230f      	movs	r3, #15
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	da0e      	bge.n	800096a <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 800094c:	1dfa      	adds	r2, r7, #7
 800094e:	230d      	movs	r3, #13
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	18d3      	adds	r3, r2, r3
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	2324      	movs	r3, #36	@ 0x24
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0019      	movs	r1, r3
 8000966:	f7ff fe4d 	bl	8000604 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800096a:	210d      	movs	r1, #13
 800096c:	187b      	adds	r3, r7, r1
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	187b      	adds	r3, r7, r1
 8000972:	3201      	adds	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	230d      	movs	r3, #13
 8000978:	18fa      	adds	r2, r7, r3
 800097a:	1d7b      	adds	r3, r7, #5
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3bb      	bcc.n	80008fc <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000984:	210e      	movs	r1, #14
 8000986:	187b      	adds	r3, r7, r1
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	187b      	adds	r3, r7, r1
 800098c:	3201      	adds	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	3201      	adds	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	230e      	movs	r3, #14
 800099c:	18fa      	adds	r2, r7, r3
 800099e:	2320      	movs	r3, #32
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	7812      	ldrb	r2, [r2, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3a3      	bcc.n	80008f2 <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 80009aa:	e000      	b.n	80009ae <ssd1306_DrawBitmap+0x116>
        return;
 80009ac:	46c0      	nop			@ (mov r8, r8)
}
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b005      	add	sp, #20
 80009b2:	bd90      	pop	{r4, r7, pc}

080009b4 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009c0:	210f      	movs	r1, #15
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2281      	movs	r2, #129	@ 0x81
 80009c6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fd31 	bl	8000434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fd2c 	bl	8000434 <ssd1306_WriteCommand>
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d007      	beq.n	8000a08 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80009f8:	230f      	movs	r3, #15
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	22af      	movs	r2, #175	@ 0xaf
 80009fe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <ssd1306_SetDisplayOn+0x48>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	715a      	strb	r2, [r3, #5]
 8000a06:	e006      	b.n	8000a16 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	22ae      	movs	r2, #174	@ 0xae
 8000a0e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <ssd1306_SetDisplayOn+0x48>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a16:	230f      	movs	r3, #15
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fd09 	bl	8000434 <ssd1306_WriteCommand>
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	2000047c 	.word	0x2000047c

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a54:	2180      	movs	r1, #128	@ 0x80
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	055b      	lsls	r3, r3, #21
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b093      	sub	sp, #76	@ 0x4c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2334      	movs	r3, #52	@ 0x34
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f001 fca4 	bl	80023d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	2418      	movs	r4, #24
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	231c      	movs	r3, #28
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f001 fc9c 	bl	80023d8 <memset>
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a34      	ldr	r2, [pc, #208]	@ (8000b78 <HAL_I2C_MspInit+0x100>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d161      	bne.n	8000b6e <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2240      	movs	r2, #64	@ 0x40
 8000aae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 fb9f 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff fcab 	bl	800041c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000acc:	2104      	movs	r1, #4
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4013      	ands	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aee:	2202      	movs	r2, #2
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000af6:	2134      	movs	r1, #52	@ 0x34
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	01d2      	lsls	r2, r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	000c      	movs	r4, r1
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2212      	movs	r2, #18
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	220e      	movs	r2, #14
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <HAL_I2C_MspInit+0x108>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f000 f9d5 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b26:	0021      	movs	r1, r4
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2240      	movs	r2, #64	@ 0x40
 8000b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2212      	movs	r2, #18
 8000b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2206      	movs	r2, #6
 8000b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_I2C_MspInit+0x10c>)
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	0010      	movs	r0, r2
 8000b4e:	f000 f9bf 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	0389      	lsls	r1, r1, #14
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_I2C_MspInit+0x104>)
 8000b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	039b      	lsls	r3, r3, #14
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b013      	add	sp, #76	@ 0x4c
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	50000800 	.word	0x50000800
 8000b84:	50000400 	.word	0x50000400

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f89a 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <SystemInit+0x14>)
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	0512      	lsls	r2, r2, #20
 8000bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd4:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd8:	f7ff fff0 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bdc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <LoopForever+0xa>)
  ldr r3, =_edata
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <LoopForever+0x12>)
  b LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000bf8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfa:	3204      	adds	r2, #4

08000bfc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <LoopForever+0x16>)
  cmp r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c02:	f001 fbf1 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c06:	f7ff fb0b 	bl	8000220 <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
  ldr   r0, =_estack
 8000c0c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c10:	0800360c 	.word	0x0800360c
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c20:	20000488 	.word	0x20000488

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>

08000c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fef4 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_InitTick+0x88>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d02b      	beq.n	8000cc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <HAL_InitTick+0x8c>)
 8000c6e:	681c      	ldr	r4, [r3, #0]
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_InitTick+0x88>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	0019      	movs	r1, r3
 8000c76:	23fa      	movs	r3, #250	@ 0xfa
 8000c78:	0098      	lsls	r0, r3, #2
 8000c7a:	f7ff fa45 	bl	8000108 <__udivsi3>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	0019      	movs	r1, r3
 8000c82:	0020      	movs	r0, r4
 8000c84:	f7ff fa40 	bl	8000108 <__udivsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f913 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d112      	bne.n	8000cba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d80a      	bhi.n	8000cb0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	425b      	negs	r3, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f8f2 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_InitTick+0x90>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e00d      	b.n	8000ccc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e008      	b.n	8000ccc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e003      	b.n	8000ccc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b005      	add	sp, #20
 8000cd8:	bd90      	pop	{r4, r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	18d2      	adds	r2, r2, r3
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000484 	.word	0x20000484

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	@ (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	20000484 	.word	0x20000484

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff0 	bl	8000d0c <HAL_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3301      	adds	r3, #1
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001a      	movs	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	189b      	adds	r3, r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	f7ff ffe0 	bl	8000d0c <HAL_GetTick>
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d7c:	d828      	bhi.n	8000dd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e3c <__NVIC_SetPriority+0xd4>)
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	33c0      	adds	r3, #192	@ 0xc0
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	589b      	ldr	r3, [r3, r2]
 8000d8e:	1dfa      	adds	r2, r7, #7
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	2203      	movs	r2, #3
 8000d96:	400a      	ands	r2, r1
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	21ff      	movs	r1, #255	@ 0xff
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	22ff      	movs	r2, #255	@ 0xff
 8000dac:	401a      	ands	r2, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0018      	movs	r0, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	4003      	ands	r3, r0
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <__NVIC_SetPriority+0xd4>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	33c0      	adds	r3, #192	@ 0xc0
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dce:	e031      	b.n	8000e34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <__NVIC_SetPriority+0xd8>)
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	230f      	movs	r3, #15
 8000dda:	400b      	ands	r3, r1
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3306      	adds	r3, #6
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	18d3      	adds	r3, r2, r3
 8000de6:	3304      	adds	r3, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1dfa      	adds	r2, r7, #7
 8000dec:	7812      	ldrb	r2, [r2, #0]
 8000dee:	0011      	movs	r1, r2
 8000df0:	2203      	movs	r2, #3
 8000df2:	400a      	ands	r2, r1
 8000df4:	00d2      	lsls	r2, r2, #3
 8000df6:	21ff      	movs	r1, #255	@ 0xff
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	22ff      	movs	r2, #255	@ 0xff
 8000e08:	401a      	ands	r2, r3
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2303      	movs	r3, #3
 8000e12:	4003      	ands	r3, r0
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e18:	4809      	ldr	r0, [pc, #36]	@ (8000e40 <__NVIC_SetPriority+0xd8>)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	001c      	movs	r4, r3
 8000e20:	230f      	movs	r3, #15
 8000e22:	4023      	ands	r3, r4
 8000e24:	3b08      	subs	r3, #8
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	18c3      	adds	r3, r0, r3
 8000e30:	3304      	adds	r3, #4
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	045b      	lsls	r3, r3, #17
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d301      	bcc.n	8000e5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e010      	b.n	8000e7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <SysTick_Config+0x44>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	3a01      	subs	r2, #1
 8000e62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e64:	2301      	movs	r3, #1
 8000e66:	425b      	negs	r3, r3
 8000e68:	2103      	movs	r1, #3
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ff7c 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <SysTick_Config+0x44>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <SysTick_Config+0x44>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	210f      	movs	r1, #15
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	1c02      	adds	r2, r0, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ffbf 	bl	8000e44 <SysTick_Config>
 8000ec6:	0003      	movs	r3, r0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ede:	e14d      	b.n	800117c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x28>
 8000ef6:	e13e      	b.n	8001176 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x38>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b12      	cmp	r3, #18
 8000f06:	d125      	bne.n	8000f54 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	58d3      	ldr	r3, [r2, r3]
 8000f14:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2207      	movs	r2, #7
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	220f      	movs	r2, #15
 8000f32:	401a      	ands	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2107      	movs	r1, #7
 8000f38:	400b      	ands	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	6979      	ldr	r1, [r7, #20]
 8000f52:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	409a      	lsls	r2, r3
 8000f62:	0013      	movs	r3, r2
 8000f64:	43da      	mvns	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	401a      	ands	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d00b      	beq.n	8000fa8 <HAL_GPIO_Init+0xd8>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9c:	2b11      	cmp	r3, #17
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b12      	cmp	r3, #18
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4013      	ands	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	43da      	mvns	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4013      	ands	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_Init+0x180>
 800104e:	e092      	b.n	8001176 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001050:	4a50      	ldr	r2, [pc, #320]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3318      	adds	r3, #24
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	589b      	ldr	r3, [r3, r2]
 800105c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2203      	movs	r2, #3
 8001062:	4013      	ands	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	220f      	movs	r2, #15
 8001068:	409a      	lsls	r2, r3
 800106a:	0013      	movs	r3, r2
 800106c:	43da      	mvns	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	429a      	cmp	r2, r3
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1d6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	@ (8001198 <HAL_GPIO_Init+0x2c8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1d2>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a44      	ldr	r2, [pc, #272]	@ (800119c <HAL_GPIO_Init+0x2cc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1ce>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a43      	ldr	r2, [pc, #268]	@ (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1ca>
 8001096:	2305      	movs	r3, #5
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 800109a:	2306      	movs	r3, #6
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a6:	2300      	movs	r3, #0
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	2103      	movs	r1, #3
 80010ac:	400a      	ands	r2, r1
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	4093      	lsls	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010b8:	4936      	ldr	r1, [pc, #216]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3318      	adds	r3, #24
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010c6:	4a33      	ldr	r2, [pc, #204]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	58d3      	ldr	r3, [r2, r3]
 80010cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80010ec:	4929      	ldr	r1, [pc, #164]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80010f4:	4a27      	ldr	r2, [pc, #156]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 80010f6:	2384      	movs	r3, #132	@ 0x84
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4013      	ands	r3, r2
 8001104:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800111a:	491e      	ldr	r1, [pc, #120]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 800111c:	2284      	movs	r2, #132	@ 0x84
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4013      	ands	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_GPIO_Init+0x2c4>)
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	40da      	lsrs	r2, r3
 8001184:	1e13      	subs	r3, r2, #0
 8001186:	d000      	beq.n	800118a <HAL_GPIO_Init+0x2ba>
 8001188:	e6aa      	b.n	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b006      	add	sp, #24
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021800 	.word	0x40021800
 8001198:	50000400 	.word	0x50000400
 800119c:	50000800 	.word	0x50000800
 80011a0:	50001400 	.word	0x50001400

080011a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e08f      	b.n	80012d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2241      	movs	r2, #65	@ 0x41
 80011ba:	5c9b      	ldrb	r3, [r3, r2]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2240      	movs	r2, #64	@ 0x40
 80011c6:	2100      	movs	r1, #0
 80011c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fc53 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2241      	movs	r2, #65	@ 0x41
 80011d6:	2124      	movs	r1, #36	@ 0x24
 80011d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	438a      	bics	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	493b      	ldr	r1, [pc, #236]	@ (80012e0 <HAL_I2C_Init+0x13c>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4938      	ldr	r1, [pc, #224]	@ (80012e4 <HAL_I2C_Init+0x140>)
 8001204:	400a      	ands	r2, r1
 8001206:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0209      	lsls	r1, r1, #8
 800121c:	430a      	orrs	r2, r1
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	e007      	b.n	8001232 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2184      	movs	r1, #132	@ 0x84
 800122c:	0209      	lsls	r1, r1, #8
 800122e:	430a      	orrs	r2, r1
 8001230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d109      	bne.n	800124e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	0109      	lsls	r1, r1, #4
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	e007      	b.n	800125e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4923      	ldr	r1, [pc, #140]	@ (80012e8 <HAL_I2C_Init+0x144>)
 800125a:	400a      	ands	r2, r1
 800125c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4920      	ldr	r1, [pc, #128]	@ (80012ec <HAL_I2C_Init+0x148>)
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	491a      	ldr	r1, [pc, #104]	@ (80012e4 <HAL_I2C_Init+0x140>)
 800127a:	400a      	ands	r2, r1
 800127c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	431a      	orrs	r2, r3
 8001288:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69d9      	ldr	r1, [r3, #28]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2241      	movs	r2, #65	@ 0x41
 80012c2:	2120      	movs	r1, #32
 80012c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2242      	movs	r2, #66	@ 0x42
 80012d0:	2100      	movs	r1, #0
 80012d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	f0ffffff 	.word	0xf0ffffff
 80012e4:	ffff7fff 	.word	0xffff7fff
 80012e8:	fffff7ff 	.word	0xfffff7ff
 80012ec:	02008000 	.word	0x02008000

080012f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	000c      	movs	r4, r1
 80012fa:	0010      	movs	r0, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	230a      	movs	r3, #10
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	1c22      	adds	r2, r4, #0
 8001304:	801a      	strh	r2, [r3, #0]
 8001306:	2308      	movs	r3, #8
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	801a      	strh	r2, [r3, #0]
 800130e:	1dbb      	adds	r3, r7, #6
 8001310:	1c0a      	adds	r2, r1, #0
 8001312:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2241      	movs	r2, #65	@ 0x41
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b20      	cmp	r3, #32
 800131e:	d000      	beq.n	8001322 <HAL_I2C_Mem_Write+0x32>
 8001320:	e10c      	b.n	800153c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_I2C_Mem_Write+0x42>
 8001328:	232c      	movs	r3, #44	@ 0x2c
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0ff      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2240      	movs	r2, #64	@ 0x40
 8001342:	5c9b      	ldrb	r3, [r3, r2]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_I2C_Mem_Write+0x5c>
 8001348:	2302      	movs	r3, #2
 800134a:	e0f8      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2240      	movs	r2, #64	@ 0x40
 8001350:	2101      	movs	r1, #1
 8001352:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001354:	f7ff fcda 	bl	8000d0c <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	0219      	lsls	r1, r3, #8
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2319      	movs	r3, #25
 8001368:	2201      	movs	r2, #1
 800136a:	f000 f975 	bl	8001658 <I2C_WaitOnFlagUntilTimeout>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0e3      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2241      	movs	r2, #65	@ 0x41
 800137a:	2121      	movs	r1, #33	@ 0x21
 800137c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2242      	movs	r2, #66	@ 0x42
 8001382:	2140      	movs	r1, #64	@ 0x40
 8001384:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	222c      	movs	r2, #44	@ 0x2c
 8001396:	18ba      	adds	r2, r7, r2
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a2:	1dbb      	adds	r3, r7, #6
 80013a4:	881c      	ldrh	r4, [r3, #0]
 80013a6:	2308      	movs	r3, #8
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	230a      	movs	r3, #10
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	8819      	ldrh	r1, [r3, #0]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	0023      	movs	r3, r4
 80013be:	f000 f8c5 	bl	800154c <I2C_RequestMemoryWrite>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2240      	movs	r2, #64	@ 0x40
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0b5      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2bff      	cmp	r3, #255	@ 0xff
 80013da:	d911      	bls.n	8001400 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	22ff      	movs	r2, #255	@ 0xff
 80013e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	045c      	lsls	r4, r3, #17
 80013ec:	230a      	movs	r3, #10
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	8819      	ldrh	r1, [r3, #0]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	0023      	movs	r3, r4
 80013fa:	f000 fafd 	bl	80019f8 <I2C_TransferConfig>
 80013fe:	e012      	b.n	8001426 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001404:	b29a      	uxth	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800140e:	b2da      	uxtb	r2, r3
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	049c      	lsls	r4, r3, #18
 8001414:	230a      	movs	r3, #10
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	8819      	ldrh	r1, [r3, #0]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	0023      	movs	r3, r4
 8001422:	f000 fae9 	bl	80019f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f961 	bl	80016f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e081      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03a      	beq.n	80014ea <HAL_I2C_Mem_Write+0x1fa>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001478:	2b00      	cmp	r3, #0
 800147a:	d136      	bne.n	80014ea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800147c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	0013      	movs	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	2180      	movs	r1, #128	@ 0x80
 800148a:	f000 f8e5 	bl	8001658 <I2C_WaitOnFlagUntilTimeout>
 800148e:	1e03      	subs	r3, r0, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e053      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2bff      	cmp	r3, #255	@ 0xff
 800149e:	d911      	bls.n	80014c4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	22ff      	movs	r2, #255	@ 0xff
 80014a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	045c      	lsls	r4, r3, #17
 80014b0:	230a      	movs	r3, #10
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	8819      	ldrh	r1, [r3, #0]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	2300      	movs	r3, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	0023      	movs	r3, r4
 80014be:	f000 fa9b 	bl	80019f8 <I2C_TransferConfig>
 80014c2:	e012      	b.n	80014ea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	049c      	lsls	r4, r3, #18
 80014d8:	230a      	movs	r3, #10
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	8819      	ldrh	r1, [r3, #0]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	0023      	movs	r3, r4
 80014e6:	f000 fa87 	bl	80019f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d198      	bne.n	8001426 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f940 	bl	8001780 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e01a      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2220      	movs	r2, #32
 800150e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	490b      	ldr	r1, [pc, #44]	@ (8001548 <HAL_I2C_Mem_Write+0x258>)
 800151c:	400a      	ands	r2, r1
 800151e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2241      	movs	r2, #65	@ 0x41
 8001524:	2120      	movs	r1, #32
 8001526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2242      	movs	r2, #66	@ 0x42
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2240      	movs	r2, #64	@ 0x40
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b007      	add	sp, #28
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	000c      	movs	r4, r1
 8001556:	0010      	movs	r0, r2
 8001558:	0019      	movs	r1, r3
 800155a:	250a      	movs	r5, #10
 800155c:	197b      	adds	r3, r7, r5
 800155e:	1c22      	adds	r2, r4, #0
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	2308      	movs	r3, #8
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	1c02      	adds	r2, r0, #0
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	1c0a      	adds	r2, r1, #0
 800156e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	045c      	lsls	r4, r3, #17
 800157a:	197b      	adds	r3, r7, r5
 800157c:	8819      	ldrh	r1, [r3, #0]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <I2C_RequestMemoryWrite+0xc4>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	0023      	movs	r3, r4
 8001586:	f000 fa37 	bl	80019f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800158a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	0018      	movs	r0, r3
 8001592:	f000 f8af 	bl	80016f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e033      	b.n	8001606 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800159e:	1dbb      	adds	r3, r7, #6
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015a6:	2308      	movs	r3, #8
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80015b4:	e019      	b.n	80015ea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015b6:	2308      	movs	r3, #8
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f890 	bl	80016f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e014      	b.n	8001606 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015dc:	2308      	movs	r3, #8
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80015ea:	6a3a      	ldr	r2, [r7, #32]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	0013      	movs	r3, r2
 80015f4:	2200      	movs	r2, #0
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	f000 f82e 	bl	8001658 <I2C_WaitOnFlagUntilTimeout>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	80002000 	.word	0x80002000

08001614 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	2b02      	cmp	r3, #2
 8001628:	d103      	bne.n	8001632 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	2b01      	cmp	r3, #1
 800163e:	d007      	beq.n	8001650 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	619a      	str	r2, [r3, #24]
  }
}
 8001650:	46c0      	nop			@ (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001668:	e030      	b.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	d02d      	beq.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001670:	f7ff fb4c 	bl	8000d0c <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d302      	bcc.n	8001686 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d122      	bne.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	4013      	ands	r3, r2
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	425a      	negs	r2, r3
 8001696:	4153      	adcs	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	001a      	movs	r2, r3
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d113      	bne.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	2220      	movs	r2, #32
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2241      	movs	r2, #65	@ 0x41
 80016b4:	2120      	movs	r1, #32
 80016b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2242      	movs	r2, #66	@ 0x42
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	2100      	movs	r1, #0
 80016c6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e00f      	b.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	4013      	ands	r3, r2
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	425a      	negs	r2, r3
 80016dc:	4153      	adcs	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d0bf      	beq.n	800166a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b004      	add	sp, #16
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001700:	e032      	b.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0018      	movs	r0, r3
 800170a:	f000 f87d 	bl	8001808 <I2C_IsErrorOccurred>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e030      	b.n	8001778 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	d025      	beq.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171c:	f7ff faf6 	bl	8000d0c <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	d302      	bcc.n	8001732 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11a      	bne.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	2b02      	cmp	r3, #2
 800173e:	d013      	beq.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001744:	2220      	movs	r2, #32
 8001746:	431a      	orrs	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2241      	movs	r2, #65	@ 0x41
 8001750:	2120      	movs	r1, #32
 8001752:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2242      	movs	r2, #66	@ 0x42
 8001758:	2100      	movs	r1, #0
 800175a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e007      	b.n	8001778 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d1c5      	bne.n	8001702 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}

08001780 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800178c:	e02f      	b.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	0018      	movs	r0, r3
 8001796:	f000 f837 	bl	8001808 <I2C_IsErrorOccurred>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e02d      	b.n	80017fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a2:	f7ff fab3 	bl	8000d0c <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d302      	bcc.n	80017b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d11a      	bne.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d013      	beq.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	2220      	movs	r2, #32
 80017cc:	431a      	orrs	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2241      	movs	r2, #65	@ 0x41
 80017d6:	2120      	movs	r1, #32
 80017d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2242      	movs	r2, #66	@ 0x42
 80017de:	2100      	movs	r1, #0
 80017e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2240      	movs	r2, #64	@ 0x40
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e007      	b.n	80017fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2220      	movs	r2, #32
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d1c8      	bne.n	800178e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2327      	movs	r3, #39	@ 0x27
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2210      	movs	r2, #16
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <I2C_IsErrorOccurred+0x2e>
 8001834:	e079      	b.n	800192a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2210      	movs	r2, #16
 800183c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800183e:	e057      	b.n	80018f0 <I2C_IsErrorOccurred+0xe8>
 8001840:	2227      	movs	r2, #39	@ 0x27
 8001842:	18bb      	adds	r3, r7, r2
 8001844:	18ba      	adds	r2, r7, r2
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	d04f      	beq.n	80018f0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7ff fa5c 	bl	8000d0c <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	d302      	bcc.n	8001866 <I2C_IsErrorOccurred+0x5e>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d144      	bne.n	80018f0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	4013      	ands	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001874:	2013      	movs	r0, #19
 8001876:	183b      	adds	r3, r7, r0
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	2142      	movs	r1, #66	@ 0x42
 800187c:	5c52      	ldrb	r2, [r2, r1]
 800187e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	401a      	ands	r2, r3
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	429a      	cmp	r2, r3
 8001892:	d126      	bne.n	80018e2 <I2C_IsErrorOccurred+0xda>
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	2380      	movs	r3, #128	@ 0x80
 8001898:	01db      	lsls	r3, r3, #7
 800189a:	429a      	cmp	r2, r3
 800189c:	d021      	beq.n	80018e2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800189e:	183b      	adds	r3, r7, r0
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d01d      	beq.n	80018e2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	01c9      	lsls	r1, r1, #7
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018b8:	f7ff fa28 	bl	8000d0c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c0:	e00f      	b.n	80018e2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018c2:	f7ff fa23 	bl	8000d0c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b19      	cmp	r3, #25
 80018ce:	d908      	bls.n	80018e2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2220      	movs	r2, #32
 80018d4:	4313      	orrs	r3, r2
 80018d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018d8:	2327      	movs	r3, #39	@ 0x27
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]

              break;
 80018e0:	e006      	b.n	80018f0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2220      	movs	r2, #32
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d1e8      	bne.n	80018c2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2220      	movs	r2, #32
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d004      	beq.n	8001908 <I2C_IsErrorOccurred+0x100>
 80018fe:	2327      	movs	r3, #39	@ 0x27
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d09b      	beq.n	8001840 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001908:	2327      	movs	r3, #39	@ 0x27
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2220      	movs	r2, #32
 8001918:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2204      	movs	r2, #4
 800191e:	4313      	orrs	r3, r2
 8001920:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001922:	2327      	movs	r3, #39	@ 0x27
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d00c      	beq.n	8001956 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	2201      	movs	r2, #1
 8001940:	4313      	orrs	r3, r2
 8001942:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800194e:	2327      	movs	r3, #39	@ 0x27
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4013      	ands	r3, r2
 800195e:	d00c      	beq.n	800197a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2208      	movs	r2, #8
 8001964:	4313      	orrs	r3, r2
 8001966:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	00d2      	lsls	r2, r2, #3
 8001970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001972:	2327      	movs	r3, #39	@ 0x27
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d00c      	beq.n	800199e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	2202      	movs	r2, #2
 8001988:	4313      	orrs	r3, r2
 800198a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001996:	2327      	movs	r3, #39	@ 0x27
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800199e:	2327      	movs	r3, #39	@ 0x27
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01d      	beq.n	80019e4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fe32 	bl	8001614 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	490e      	ldr	r1, [pc, #56]	@ (80019f4 <I2C_IsErrorOccurred+0x1ec>)
 80019bc:	400a      	ands	r2, r1
 80019be:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2241      	movs	r2, #65	@ 0x41
 80019d0:	2120      	movs	r1, #32
 80019d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2242      	movs	r2, #66	@ 0x42
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2240      	movs	r2, #64	@ 0x40
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80019e4:	2327      	movs	r3, #39	@ 0x27
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b00a      	add	sp, #40	@ 0x28
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	fe00e800 	.word	0xfe00e800

080019f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	0008      	movs	r0, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	240a      	movs	r4, #10
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	1c02      	adds	r2, r0, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	2009      	movs	r0, #9
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	1c0a      	adds	r2, r1, #0
 8001a14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	059b      	lsls	r3, r3, #22
 8001a1c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a1e:	183b      	adds	r3, r7, r0
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	0419      	lsls	r1, r3, #16
 8001a24:	23ff      	movs	r3, #255	@ 0xff
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a2a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a32:	4313      	orrs	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a42:	0d51      	lsrs	r1, r2, #21
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	00d2      	lsls	r2, r2, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <I2C_TransferConfig+0x70>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	43d2      	mvns	r2, r2
 8001a50:	401a      	ands	r2, r3
 8001a52:	0011      	movs	r1, r2
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b007      	add	sp, #28
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	03ff63ff 	.word	0x03ff63ff

08001a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2241      	movs	r2, #65	@ 0x41
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d138      	bne.n	8001af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e032      	b.n	8001af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	2101      	movs	r1, #1
 8001a96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2241      	movs	r2, #65	@ 0x41
 8001a9c:	2124      	movs	r1, #36	@ 0x24
 8001a9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4911      	ldr	r1, [pc, #68]	@ (8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2241      	movs	r2, #65	@ 0x41
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2240      	movs	r2, #64	@ 0x40
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	ffffefff 	.word	0xffffefff

08001b04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2241      	movs	r2, #65	@ 0x41
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d139      	bne.n	8001b8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2240      	movs	r2, #64	@ 0x40
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e033      	b.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2241      	movs	r2, #65	@ 0x41
 8001b34:	2124      	movs	r1, #36	@ 0x24
 8001b36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2241      	movs	r2, #65	@ 0x41
 8001b7e:	2120      	movs	r1, #32
 8001b80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2240      	movs	r2, #64	@ 0x40
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
  }
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	fffff0ff 	.word	0xfffff0ff

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1d0      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x1e>
 8001bb8:	e069      	b.n	8001c8e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4bc8      	ldr	r3, [pc, #800]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	@ 0x38
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d15d      	bne.n	8001c8e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1bc      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	025b      	lsls	r3, r3, #9
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x56>
 8001be2:	4bbe      	ldr	r3, [pc, #760]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4bbd      	ldr	r3, [pc, #756]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0249      	lsls	r1, r1, #9
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e020      	b.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	23a0      	movs	r3, #160	@ 0xa0
 8001bf8:	02db      	lsls	r3, r3, #11
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d10e      	bne.n	8001c1c <HAL_RCC_OscConfig+0x80>
 8001bfe:	4bb7      	ldr	r3, [pc, #732]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4bb6      	ldr	r3, [pc, #728]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	02c9      	lsls	r1, r1, #11
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4bb3      	ldr	r3, [pc, #716]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4bb2      	ldr	r3, [pc, #712]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	0249      	lsls	r1, r1, #9
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1c:	4baf      	ldr	r3, [pc, #700]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4bae      	ldr	r3, [pc, #696]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c22:	49af      	ldr	r1, [pc, #700]	@ (8001ee0 <HAL_RCC_OscConfig+0x344>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4bac      	ldr	r3, [pc, #688]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4bab      	ldr	r3, [pc, #684]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c2e:	49ad      	ldr	r1, [pc, #692]	@ (8001ee4 <HAL_RCC_OscConfig+0x348>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d014      	beq.n	8001c66 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f866 	bl	8000d0c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c46:	f7ff f861 	bl	8000d0c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	@ 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e17b      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c58:	4ba0      	ldr	r3, [pc, #640]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	029b      	lsls	r3, r3, #10
 8001c60:	4013      	ands	r3, r2
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0xaa>
 8001c64:	e013      	b.n	8001c8e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f851 	bl	8000d0c <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f84c 	bl	8000d0c <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e166      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	4b96      	ldr	r3, [pc, #600]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0xfe>
 8001c98:	e086      	b.n	8001da8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9a:	4b90      	ldr	r3, [pc, #576]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2238      	movs	r2, #56	@ 0x38
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e14c      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b89      	ldr	r3, [pc, #548]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a8b      	ldr	r2, [pc, #556]	@ (8001ee8 <HAL_RCC_OscConfig+0x34c>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	021a      	lsls	r2, r3, #8
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a85      	ldr	r2, [pc, #532]	@ (8001eec <HAL_RCC_OscConfig+0x350>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef0 <HAL_RCC_OscConfig+0x354>)
 8001cf2:	40da      	lsrs	r2, r3
 8001cf4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef4 <HAL_RCC_OscConfig+0x358>)
 8001cf6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef8 <HAL_RCC_OscConfig+0x35c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7fe ffa9 	bl	8000c54 <HAL_InitTick>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d050      	beq.n	8001da8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e122      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d030      	beq.n	8001d74 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d12:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a75      	ldr	r2, [pc, #468]	@ (8001eec <HAL_RCC_OscConfig+0x350>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	4b6e      	ldr	r3, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0049      	lsls	r1, r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe ffea 	bl	8000d0c <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d3e:	f7fe ffe5 	bl	8000d0c <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0ff      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d50:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a61      	ldr	r2, [pc, #388]	@ (8001ee8 <HAL_RCC_OscConfig+0x34c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	021a      	lsls	r2, r3, #8
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e019      	b.n	8001da8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b58      	ldr	r3, [pc, #352]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d7a:	4960      	ldr	r1, [pc, #384]	@ (8001efc <HAL_RCC_OscConfig+0x360>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7fe ffc4 	bl	8000d0c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe ffbf 	bl	8000d0c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0d9      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2208      	movs	r2, #8
 8001dae:	4013      	ands	r3, r2
 8001db0:	d042      	beq.n	8001e38 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b18      	cmp	r3, #24
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d138      	bne.n	8001e38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0c2      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001dd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7fe ff95 	bl	8000d0c <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001de8:	f7fe ff90 	bl	8000d0c <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0aa      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0f1      	beq.n	8001de8 <HAL_RCC_OscConfig+0x24c>
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e06:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e0a:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	438a      	bics	r2, r1
 8001e10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ff7b 	bl	8000d0c <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e1c:	f7fe ff76 	bl	8000d0c <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e090      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d1f1      	bne.n	8001e1c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2a8>
 8001e42:	e084      	b.n	8001f4e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2238      	movs	r2, #56	@ 0x38
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d000      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2c6>
 8001e60:	e075      	b.n	8001f4e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e074      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2e0>
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e7a:	e01c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x31a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x302>
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x31a>
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001ea0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001eac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x340>)
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d028      	beq.n	8001f10 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ff25 	bl	8000d0c <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff20 	bl	8000d0c <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f00 <HAL_RCC_OscConfig+0x364>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d915      	bls.n	8001f04 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e039      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	fffbffff 	.word	0xfffbffff
 8001ee8:	ffff80ff 	.word	0xffff80ff
 8001eec:	ffffc7ff 	.word	0xffffc7ff
 8001ef0:	02dc6c00 	.word	0x02dc6c00
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	fffffeff 	.word	0xfffffeff
 8001f00:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_RCC_OscConfig+0x3bc>)
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d0dc      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x32c>
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe fefc 	bl	8000d0c <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe fef7 	bl	8000d0c <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <HAL_RCC_OscConfig+0x3c0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e010      	b.n	8001f50 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_RCC_OscConfig+0x3bc>)
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_RCC_OscConfig+0x3bc>)
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <HAL_RCC_OscConfig+0x3bc>)
 8001f48:	4905      	ldr	r1, [pc, #20]	@ (8001f60 <HAL_RCC_OscConfig+0x3c4>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b006      	add	sp, #24
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0e9      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4013      	ands	r3, r2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d91e      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b73      	ldr	r3, [pc, #460]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4b70      	ldr	r3, [pc, #448]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f98:	f7fe feb8 	bl	8000d0c <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7fe feb3 	bl	8000d0c <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a6a      	ldr	r2, [pc, #424]	@ (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0ca      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb6:	4b67      	ldr	r3, [pc, #412]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2207      	movs	r2, #7
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d017      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fd8:	4b60      	ldr	r3, [pc, #384]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	@ (8002160 <HAL_RCC_ClockConfig+0x1fc>)
 8001fde:	401a      	ands	r2, r3
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	21b0      	movs	r1, #176	@ 0xb0
 8001fe4:	0109      	lsls	r1, r1, #4
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fea:	4b5c      	ldr	r3, [pc, #368]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <HAL_RCC_ClockConfig+0x200>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4b58      	ldr	r3, [pc, #352]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	4013      	ands	r3, r2
 8002006:	d055      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002008:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	221c      	movs	r2, #28
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b51      	ldr	r3, [pc, #324]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002024:	4b4d      	ldr	r3, [pc, #308]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d11f      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e08b      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203c:	4b47      	ldr	r3, [pc, #284]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4013      	ands	r3, r2
 8002046:	d113      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e07f      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002054:	4b41      	ldr	r3, [pc, #260]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d108      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e074      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002062:	4b3e      	ldr	r3, [pc, #248]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e06d      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002070:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2207      	movs	r2, #7
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4b37      	ldr	r3, [pc, #220]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002084:	f7fe fe42 	bl	8000d0c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7fe fe3d 	bl	8000d0c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a2f      	ldr	r2, [pc, #188]	@ (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e054      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2238      	movs	r2, #56	@ 0x38
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d21e      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2207      	movs	r2, #7
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fe1a 	bl	8000d0c <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fe15 	bl	8000d0c <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e02c      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2204      	movs	r2, #4
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_RCC_ClockConfig+0x204>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800211e:	f000 f82b 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002122:	0001      	movs	r1, r0
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	220f      	movs	r2, #15
 800212c:	401a      	ands	r2, r3
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_RCC_ClockConfig+0x208>)
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	58d3      	ldr	r3, [r2, r3]
 8002134:	221f      	movs	r2, #31
 8002136:	4013      	ands	r3, r2
 8002138:	000a      	movs	r2, r1
 800213a:	40da      	lsrs	r2, r3
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_RCC_ClockConfig+0x20c>)
 800213e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCC_ClockConfig+0x210>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fd85 	bl	8000c54 <HAL_InitTick>
 800214a:	0003      	movs	r3, r0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	00001388 	.word	0x00001388
 800215c:	40021000 	.word	0x40021000
 8002160:	ffff84ff 	.word	0xffff84ff
 8002164:	fffff0ff 	.word	0xfffff0ff
 8002168:	ffff8fff 	.word	0xffff8fff
 800216c:	080035c4 	.word	0x080035c4
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2238      	movs	r2, #56	@ 0x38
 8002184:	4013      	ands	r3, r2
 8002186:	d10f      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x78>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0adb      	lsrs	r3, r3, #11
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	2201      	movs	r2, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	0013      	movs	r3, r2
 8002198:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	4815      	ldr	r0, [pc, #84]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800219e:	f7fd ffb3 	bl	8000108 <__udivsi3>
 80021a2:	0003      	movs	r3, r0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	e01e      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2238      	movs	r2, #56	@ 0x38
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b4:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x80>)
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2238      	movs	r2, #56	@ 0x38
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d103      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x78>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2238      	movs	r2, #56	@ 0x38
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b18      	cmp	r3, #24
 80021d8:	d103      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021da:	23fa      	movs	r3, #250	@ 0xfa
 80021dc:	01db      	lsls	r3, r3, #7
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80021e6:	687b      	ldr	r3, [r7, #4]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	02dc6c00 	.word	0x02dc6c00
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002204:	2313      	movs	r3, #19
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800220c:	2312      	movs	r3, #18
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002220:	e079      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2011      	movs	r0, #17
 8002224:	183b      	adds	r3, r7, r0
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b64      	ldr	r3, [pc, #400]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800222c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	055b      	lsls	r3, r3, #21
 8002232:	4013      	ands	r3, r2
 8002234:	d110      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b61      	ldr	r3, [pc, #388]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	0549      	lsls	r1, r1, #21
 8002240:	430a      	orrs	r2, r1
 8002242:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002244:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	055b      	lsls	r3, r3, #21
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	183b      	adds	r3, r7, r0
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002258:	4b58      	ldr	r3, [pc, #352]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800225a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800225c:	23c0      	movs	r3, #192	@ 0xc0
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d019      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d014      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002274:	4b51      	ldr	r3, [pc, #324]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	4a51      	ldr	r2, [pc, #324]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800227a:	4013      	ands	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227e:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002280:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002282:	4b4e      	ldr	r3, [pc, #312]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	0249      	lsls	r1, r1, #9
 8002288:	430a      	orrs	r2, r1
 800228a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800228c:	4b4b      	ldr	r3, [pc, #300]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800228e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002290:	4b4a      	ldr	r3, [pc, #296]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002292:	494c      	ldr	r1, [pc, #304]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002294:	400a      	ands	r2, r1
 8002296:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002298:	4b48      	ldr	r3, [pc, #288]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d016      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe fd31 	bl	8000d0c <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fd2c 	bl	8000d0c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a43      	ldr	r2, [pc, #268]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d904      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80022c0:	2313      	movs	r3, #19
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2203      	movs	r2, #3
 80022c6:	701a      	strb	r2, [r3, #0]
          break;
 80022c8:	e004      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022ca:	4b3c      	ldr	r3, [pc, #240]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d0ed      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80022d4:	2313      	movs	r3, #19
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022de:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	4a37      	ldr	r2, [pc, #220]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	4b33      	ldr	r3, [pc, #204]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f2:	e005      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f4:	2312      	movs	r3, #18
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2213      	movs	r2, #19
 80022fa:	18ba      	adds	r2, r7, r2
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002300:	2311      	movs	r3, #17
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b2c      	ldr	r3, [pc, #176]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800230c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002310:	492e      	ldr	r1, [pc, #184]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	400a      	ands	r2, r1
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002320:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	2203      	movs	r2, #3
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	4b23      	ldr	r3, [pc, #140]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002330:	430a      	orrs	r2, r1
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2240      	movs	r2, #64	@ 0x40
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234e:	430a      	orrs	r2, r1
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	01db      	lsls	r3, r3, #7
 800235a:	4013      	ands	r3, r2
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800235e:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	0899      	lsrs	r1, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236c:	430a      	orrs	r2, r1
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	da09      	bge.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	22e0      	movs	r2, #224	@ 0xe0
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
  }
  return status;
 80023ac:	2312      	movs	r3, #18
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b006      	add	sp, #24
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	40021000 	.word	0x40021000
 80023c0:	fffffcff 	.word	0xfffffcff
 80023c4:	fffeffff 	.word	0xfffeffff
 80023c8:	00001388 	.word	0x00001388
 80023cc:	efffffff 	.word	0xefffffff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	ffff3fff 	.word	0xffff3fff

080023d8 <memset>:
 80023d8:	0003      	movs	r3, r0
 80023da:	1882      	adds	r2, r0, r2
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	7019      	strb	r1, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	2600      	movs	r6, #0
 80023ec:	4c0c      	ldr	r4, [pc, #48]	@ (8002420 <__libc_init_array+0x38>)
 80023ee:	4d0d      	ldr	r5, [pc, #52]	@ (8002424 <__libc_init_array+0x3c>)
 80023f0:	1b64      	subs	r4, r4, r5
 80023f2:	10a4      	asrs	r4, r4, #2
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	2600      	movs	r6, #0
 80023fa:	f000 f819 	bl	8002430 <_init>
 80023fe:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <__libc_init_array+0x40>)
 8002400:	4d0a      	ldr	r5, [pc, #40]	@ (800242c <__libc_init_array+0x44>)
 8002402:	1b64      	subs	r4, r4, r5
 8002404:	10a4      	asrs	r4, r4, #2
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	00b3      	lsls	r3, r6, #2
 800240e:	58eb      	ldr	r3, [r5, r3]
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	00b3      	lsls	r3, r6, #2
 8002418:	58eb      	ldr	r3, [r5, r3]
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08003604 	.word	0x08003604
 8002424:	08003604 	.word	0x08003604
 8002428:	08003608 	.word	0x08003608
 800242c:	08003604 	.word	0x08003604

08002430 <_init>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr

0800243c <_fini>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr
