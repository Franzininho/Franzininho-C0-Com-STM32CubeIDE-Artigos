
ldr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003420  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003574  08003574  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003574  08003574  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003574  08003574  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003574  08003574  00004574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003578  08003578  00004578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800357c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003588  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003588  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2a9  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fb  00000000  00000000  0000f2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00010cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  00011890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000136a7  00000000  00000000  000121a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd35  00000000  00000000  00025849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f370  00000000  00000000  0003257e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b18ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  000b1934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b43bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034c8 	.word	0x080034c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034c8 	.word	0x080034c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
  * @brief  The application entry point.
  * @retval int
  */
/* Main program body */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  HAL_Init();
 8000224:	f000 fb19 	bl	800085a <HAL_Init>
  SystemClock_Config();
 8000228:	f000 f846 	bl	80002b8 <SystemClock_Config>
  MX_GPIO_Init();
 800022c:	f000 f9c0 	bl	80005b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000230:	f000 f886 	bl	8000340 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000234:	f000 f8f0 	bl	8000418 <MX_TIM1_Init>

  // Inicia o PWM no canal especificado
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000238:	4b1a      	ldr	r3, [pc, #104]	@ (80002a4 <main+0x84>)
 800023a:	2108      	movs	r1, #8
 800023c:	0018      	movs	r0, r3
 800023e:	f002 f999 	bl	8002574 <HAL_TIM_PWM_Start>

  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000242:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <main+0x88>)
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fe95 	bl	8000f74 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800024a:	23fa      	movs	r3, #250	@ 0xfa
 800024c:	009a      	lsls	r2, r3, #2
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <main+0x88>)
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 ff18 	bl	8001088 <HAL_ADC_PollForConversion>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d106      	bne.n	800026a <main+0x4a>
      leitura = HAL_ADC_GetValue(&hadc1);
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <main+0x88>)
 800025e:	0018      	movs	r0, r3
 8000260:	f000 ffa0 	bl	80011a4 <HAL_ADC_GetValue>
 8000264:	0002      	movs	r2, r0
 8000266:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <main+0x8c>)
 8000268:	601a      	str	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x88>)
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fecf 	bl	8001010 <HAL_ADC_Stop>

    // Inverte a lógica: quanto maior a leitura do ADC (mais luz), maior o PWM
    pwm = 1000 - ((leitura * 1000) / 4095);
 8000272:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <main+0x8c>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	0013      	movs	r3, r2
 8000278:	015b      	lsls	r3, r3, #5
 800027a:	1a9b      	subs	r3, r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	189b      	adds	r3, r3, r2
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	490b      	ldr	r1, [pc, #44]	@ (80002b0 <main+0x90>)
 8000284:	0018      	movs	r0, r3
 8000286:	f7ff ff3f 	bl	8000108 <__udivsi3>
 800028a:	0003      	movs	r3, r0
 800028c:	001a      	movs	r2, r3
 800028e:	23fa      	movs	r3, #250	@ 0xfa
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <main+0x94>)
 8000296:	601a      	str	r2, [r3, #0]

    // Atualiza a intensidade do LED
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm);
 8000298:	4b02      	ldr	r3, [pc, #8]	@ (80002a4 <main+0x84>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <main+0x94>)
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_ADC_Start(&hadc1);
 80002a2:	e7ce      	b.n	8000242 <main+0x22>
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	20000028 	.word	0x20000028
 80002ac:	200000d8 	.word	0x200000d8
 80002b0:	00000fff 	.word	0x00000fff
 80002b4:	200000dc 	.word	0x200000dc

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	@ 0x34
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	231c      	movs	r3, #28
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f003 f8d1 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f003 f8ca 	bl	8003470 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2202      	movs	r2, #2
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2240      	movs	r2, #64	@ 0x40
 80002f4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fc65 	bl	8001bc8 <HAL_RCC_OscConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000302:	f000 f977 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	003b      	movs	r3, r7
 8000308:	2207      	movs	r2, #7
 800030a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	2101      	movs	r1, #1
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fe31 	bl	8001f90 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000332:	f000 f95f 	bl	80005f4 <Error_Handler>
  }
}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b00d      	add	sp, #52	@ 0x34
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	230c      	movs	r3, #12
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f003 f88e 	bl	8003470 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000356:	4a2e      	ldr	r2, [pc, #184]	@ (8000410 <MX_ADC1_Init+0xd0>)
 8000358:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <MX_ADC1_Init+0xcc>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	05d2      	lsls	r2, r2, #23
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b28      	ldr	r3, [pc, #160]	@ (800040c <MX_ADC1_Init+0xcc>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036e:	4b27      	ldr	r3, [pc, #156]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000374:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000376:	2204      	movs	r2, #4
 8000378:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <MX_ADC1_Init+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000380:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000382:	2200      	movs	r2, #0
 8000384:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000386:	4b21      	ldr	r3, [pc, #132]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800038c:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_ADC1_Init+0xcc>)
 800038e:	2201      	movs	r2, #1
 8000390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000392:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <MX_ADC1_Init+0xcc>)
 8000394:	2220      	movs	r2, #32
 8000396:	2100      	movs	r1, #0
 8000398:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <MX_ADC1_Init+0xcc>)
 800039c:	2200      	movs	r2, #0
 800039e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a6:	4b19      	ldr	r3, [pc, #100]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003a8:	222c      	movs	r2, #44	@ 0x2c
 80003aa:	2100      	movs	r1, #0
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003c2:	223c      	movs	r2, #60	@ 0x3c
 80003c4:	2100      	movs	r1, #0
 80003c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fc29 	bl	8000c28 <HAL_ADC_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003da:	f000 f90b 	bl	80005f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000414 <MX_ADC1_Init+0xd4>)
 80003e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f0:	1d3a      	adds	r2, r7, #4
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_ADC1_Init+0xcc>)
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fee0 	bl	80011bc <HAL_ADC_ConfigChannel>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000400:	f000 f8f8 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b004      	add	sp, #16
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000028 	.word	0x20000028
 8000410:	40012400 	.word	0x40012400
 8000414:	14000020 	.word	0x14000020

08000418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09c      	sub	sp, #112	@ 0x70
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	2360      	movs	r3, #96	@ 0x60
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f003 f821 	bl	8003470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	2354      	movs	r3, #84	@ 0x54
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	230c      	movs	r3, #12
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f003 f819 	bl	8003470 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043e:	2338      	movs	r3, #56	@ 0x38
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	0018      	movs	r0, r3
 8000444:	231c      	movs	r3, #28
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f003 f811 	bl	8003470 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	0018      	movs	r0, r3
 8000452:	2334      	movs	r3, #52	@ 0x34
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f003 f80a 	bl	8003470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045c:	4b51      	ldr	r3, [pc, #324]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 800045e:	4a52      	ldr	r2, [pc, #328]	@ (80005a8 <MX_TIM1_Init+0x190>)
 8000460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000462:	4b50      	ldr	r3, [pc, #320]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000464:	222f      	movs	r2, #47	@ 0x2f
 8000466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b4e      	ldr	r3, [pc, #312]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800046e:	4b4d      	ldr	r3, [pc, #308]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000470:	4a4e      	ldr	r2, [pc, #312]	@ (80005ac <MX_TIM1_Init+0x194>)
 8000472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b4b      	ldr	r3, [pc, #300]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047a:	4b4a      	ldr	r3, [pc, #296]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000480:	4b48      	ldr	r3, [pc, #288]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000486:	4b47      	ldr	r3, [pc, #284]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 ffbb 	bl	8002404 <HAL_TIM_Base_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000492:	f000 f8af 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000496:	2160      	movs	r1, #96	@ 0x60
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	0152      	lsls	r2, r2, #5
 800049e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a0:	187a      	adds	r2, r7, r1
 80004a2:	4b40      	ldr	r3, [pc, #256]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fa3c 	bl	8002924 <HAL_TIM_ConfigClockSource>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004b0:	f000 f8a0 	bl	80005f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004b4:	4b3b      	ldr	r3, [pc, #236]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fffc 	bl	80024b4 <HAL_TIM_PWM_Init>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004c0:	f000 f898 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2154      	movs	r1, #84	@ 0x54
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d8:	187a      	adds	r2, r7, r1
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 febe 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80004e8:	f000 f884 	bl	80005f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2138      	movs	r1, #56	@ 0x38
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2260      	movs	r2, #96	@ 0x60
 80004f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000518:	1879      	adds	r1, r7, r1
 800051a:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 800051c:	2208      	movs	r2, #8
 800051e:	0018      	movs	r0, r3
 8000520:	f002 f900 	bl	8002724 <HAL_TIM_PWM_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000528:	f000 f864 	bl	80005f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2280      	movs	r2, #128	@ 0x80
 800054e:	0192      	lsls	r2, r2, #6
 8000550:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	0492      	lsls	r2, r2, #18
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800057e:	1d3a      	adds	r2, r7, #4
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f002 fecd 	bl	8003324 <HAL_TIMEx_ConfigBreakDeadTime>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800058e:	f000 f831 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000592:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <MX_TIM1_Init+0x18c>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 f8d3 	bl	8000740 <HAL_TIM_MspPostInit>

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b01c      	add	sp, #112	@ 0x70
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	2000008c 	.word	0x2000008c
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	000003e7 	.word	0x000003e7

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <MX_GPIO_Init+0x40>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005de:	2202      	movs	r2, #2
 80005e0:	4013      	ands	r3, r2
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_MspInit+0x44>)
 8000608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <HAL_MspInit+0x44>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_MspInit+0x44>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_MspInit+0x44>)
 8000620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <HAL_MspInit+0x44>)
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	0549      	lsls	r1, r1, #21
 8000628:	430a      	orrs	r2, r1
 800062a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <HAL_MspInit+0x44>)
 800062e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000630:	2380      	movs	r3, #128	@ 0x80
 8000632:	055b      	lsls	r3, r3, #21
 8000634:	4013      	ands	r3, r2
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b091      	sub	sp, #68	@ 0x44
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	232c      	movs	r3, #44	@ 0x2c
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 ff08 	bl	8003470 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	2410      	movs	r4, #16
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	231c      	movs	r3, #28
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f002 ff00 	bl	8003470 <memset>
  if(hadc->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <HAL_ADC_MspInit+0xb0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d139      	bne.n	80006ee <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	01d2      	lsls	r2, r2, #7
 8000680:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fdcc 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000694:	f7ff ffae 	bl	80005f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 800069a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	0349      	lsls	r1, r1, #13
 80006a2:	430a      	orrs	r2, r1
 80006a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 80006a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	035b      	lsls	r3, r3, #13
 80006ae:	4013      	ands	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 80006b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	430a      	orrs	r2, r1
 80006be:	635a      	str	r2, [r3, #52]	@ 0x34
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <HAL_ADC_MspInit+0xb4>)
 80006c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c4:	2201      	movs	r2, #1
 80006c6:	4013      	ands	r3, r2
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006cc:	212c      	movs	r1, #44	@ 0x2c
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2220      	movs	r2, #32
 80006d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2203      	movs	r2, #3
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	23a0      	movs	r3, #160	@ 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 f903 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b011      	add	sp, #68	@ 0x44
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40012400 	.word	0x40012400
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_TIM_Base_MspInit+0x38>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10d      	bne.n	800072e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000718:	2180      	movs	r1, #128	@ 0x80
 800071a:	0109      	lsls	r1, r1, #4
 800071c:	430a      	orrs	r2, r1
 800071e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_TIM_Base_MspInit+0x3c>)
 8000722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b004      	add	sp, #16
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40012c00 	.word	0x40012c00
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	@ 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	240c      	movs	r4, #12
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fe8c 	bl	8003470 <memset>
  if(htim->Instance==TIM1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <HAL_TIM_MspPostInit+0x70>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d121      	bne.n	80007a6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_TIM_MspPostInit+0x74>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_TIM_MspPostInit+0x74>)
 8000768:	2102      	movs	r1, #2
 800076a:	430a      	orrs	r2, r1
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_TIM_MspPostInit+0x74>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	2202      	movs	r2, #2
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800077a:	0021      	movs	r1, r4
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2240      	movs	r2, #64	@ 0x40
 8000780:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2202      	movs	r2, #2
 8000786:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2201      	movs	r2, #1
 8000798:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	187b      	adds	r3, r7, r1
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_TIM_MspPostInit+0x78>)
 800079e:	0019      	movs	r1, r3
 80007a0:	0010      	movs	r0, r2
 80007a2:	f001 f8a7 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b009      	add	sp, #36	@ 0x24
 80007ac:	bd90      	pop	{r4, r7, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	40012c00 	.word	0x40012c00
 80007b4:	40021000 	.word	0x40021000
 80007b8:	50000400 	.word	0x50000400

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f89a 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f4:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <SystemInit+0x14>)
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	0512      	lsls	r2, r2, #20
 80007fa:	609a      	str	r2, [r3, #8]
#endif
}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800080c:	f7ff fff0 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000810:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000812:	e003      	b.n	800081c <LoopCopyDataInit>

08000814 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000816:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000818:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800081a:	3104      	adds	r1, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <LoopForever+0xa>)
  ldr r3, =_edata
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <LoopForever+0xe>)
  adds r2, r0, r1
 8000820:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000822:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000824:	d3f6      	bcc.n	8000814 <CopyDataInit>
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopForever+0x12>)
  b LoopFillZerobss
 8000828:	e002      	b.n	8000830 <LoopFillZerobss>

0800082a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  str  r3, [r2]
 800082c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082e:	3204      	adds	r2, #4

08000830 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <LoopForever+0x16>)
  cmp r2, r3
 8000832:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000834:	d3f9      	bcc.n	800082a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000836:	f002 fe23 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fcf1 	bl	8000220 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000844:	0800357c 	.word	0x0800357c
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800084c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000854:	200000e4 	.word	0x200000e4

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>

0800085a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	2003      	movs	r0, #3
 8000868:	f000 f80e 	bl	8000888 <HAL_InitTick>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d003      	beq.n	8000878 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e001      	b.n	800087c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fec2 	bl	8000600 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <HAL_InitTick+0x88>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d02b      	beq.n	80008f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <HAL_InitTick+0x8c>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <HAL_InitTick+0x88>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	0019      	movs	r1, r3
 80008aa:	23fa      	movs	r3, #250	@ 0xfa
 80008ac:	0098      	lsls	r0, r3, #2
 80008ae:	f7ff fc2b 	bl	8000108 <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	0019      	movs	r1, r3
 80008b6:	0020      	movs	r0, r4
 80008b8:	f7ff fc26 	bl	8000108 <__udivsi3>
 80008bc:	0003      	movs	r3, r0
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f80b 	bl	80018da <HAL_SYSTICK_Config>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d112      	bne.n	80008ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d80a      	bhi.n	80008e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 ffea 	bl	80018b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_InitTick+0x90>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e00d      	b.n	8000900 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e008      	b.n	8000900 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ee:	230f      	movs	r3, #15
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e003      	b.n	8000900 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f8:	230f      	movs	r3, #15
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000900:	230f      	movs	r3, #15
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	781b      	ldrb	r3, [r3, #0]
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b005      	add	sp, #20
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	20000008 	.word	0x20000008
 8000914:	20000000 	.word	0x20000000
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001a      	movs	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	18d2      	adds	r2, r2, r3
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <HAL_IncTick+0x20>)
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	20000008 	.word	0x20000008
 800093c:	200000e0 	.word	0x200000e0

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	@ (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	200000e0 	.word	0x200000e0

08000954 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000964:	401a      	ands	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	ff3fffff 	.word	0xff3fffff

0800097c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	23c0      	movs	r3, #192	@ 0xc0
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	4013      	ands	r3, r2
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}

08000996 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	2104      	movs	r1, #4
 80009aa:	400a      	ands	r2, r1
 80009ac:	2107      	movs	r1, #7
 80009ae:	4091      	lsls	r1, r2
 80009b0:	000a      	movs	r2, r1
 80009b2:	43d2      	mvns	r2, r2
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2104      	movs	r1, #4
 80009ba:	400b      	ands	r3, r1
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4099      	lsls	r1, r3
 80009c0:	000b      	movs	r3, r1
 80009c2:	431a      	orrs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	2104      	movs	r1, #4
 80009e2:	400a      	ands	r2, r1
 80009e4:	2107      	movs	r1, #7
 80009e6:	4091      	lsls	r1, r2
 80009e8:	000a      	movs	r2, r1
 80009ea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2104      	movs	r1, #4
 80009f0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009f2:	40da      	lsrs	r2, r3
 80009f4:	0013      	movs	r3, r2
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	23c0      	movs	r3, #192	@ 0xc0
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d101      	bne.n	8000a16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	211f      	movs	r1, #31
 8000a34:	400a      	ands	r2, r1
 8000a36:	210f      	movs	r1, #15
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0e9b      	lsrs	r3, r3, #26
 8000a44:	210f      	movs	r1, #15
 8000a46:	4019      	ands	r1, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	201f      	movs	r0, #31
 8000a4c:	4003      	ands	r3, r0
 8000a4e:	4099      	lsls	r1, r3
 8000a50:	000b      	movs	r3, r1
 8000a52:	431a      	orrs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	0a5b      	lsrs	r3, r3, #9
 8000a74:	431a      	orrs	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	0252      	lsls	r2, r2, #9
 8000a94:	0a52      	lsrs	r2, r2, #9
 8000a96:	43d2      	mvns	r2, r2
 8000a98:	401a      	ands	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	0212      	lsls	r2, r2, #8
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	4904      	ldr	r1, [pc, #16]	@ (8000adc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000aca:	400b      	ands	r3, r1
 8000acc:	431a      	orrs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	7fffff00 	.word	0x7fffff00

08000ae0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <LL_ADC_EnableInternalRegulator+0x24>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	0552      	lsls	r2, r2, #21
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	6fffffe8 	.word	0x6fffffe8

08000b08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	401a      	ands	r2, r3
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	055b      	lsls	r3, r3, #21
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d101      	bne.n	8000b26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <LL_ADC_Enable+0x20>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2201      	movs	r2, #1
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	7fffffe8 	.word	0x7fffffe8

08000b54 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <LL_ADC_Disable+0x20>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	2202      	movs	r2, #2
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	7fffffe8 	.word	0x7fffffe8

08000b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2201      	movs	r2, #1
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d101      	bne.n	8000b90 <LL_ADC_IsEnabled+0x18>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <LL_ADC_IsEnabled+0x1a>
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d101      	bne.n	8000bb2 <LL_ADC_IsDisableOngoing+0x18>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <LL_ADC_IsDisableOngoing+0x1a>
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <LL_ADC_REG_StartConversion+0x20>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2204      	movs	r2, #4
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	7fffffe8 	.word	0x7fffffe8

08000be0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <LL_ADC_REG_StopConversion+0x20>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	7fffffe8 	.word	0x7fffffe8

08000c04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2204      	movs	r2, #4
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d101      	bne.n	8000c1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c30:	231f      	movs	r3, #31
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e17e      	b.n	8000f4c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10a      	bne.n	8000c6c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fcf5 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2254      	movs	r2, #84	@ 0x54
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff49 	bl	8000b08 <LL_ADC_IsInternalRegulatorEnabled>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d114      	bne.n	8000ca4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff ff2e 	bl	8000ae0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c84:	4bb3      	ldr	r3, [pc, #716]	@ (8000f54 <HAL_ADC_Init+0x32c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	49b3      	ldr	r1, [pc, #716]	@ (8000f58 <HAL_ADC_Init+0x330>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fa3c 	bl	8000108 <__udivsi3>
 8000c90:	0003      	movs	r3, r0
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c96:	e002      	b.n	8000c9e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f9      	bne.n	8000c98 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff2d 	bl	8000b08 <LL_ADC_IsInternalRegulatorEnabled>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d10f      	bne.n	8000cd2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff ff94 	bl	8000c04 <LL_ADC_REG_IsConversionOngoing>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d000      	beq.n	8000cec <HAL_ADC_Init+0xc4>
 8000cea:	e122      	b.n	8000f32 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d000      	beq.n	8000cf4 <HAL_ADC_Init+0xcc>
 8000cf2:	e11e      	b.n	8000f32 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	4a98      	ldr	r2, [pc, #608]	@ (8000f5c <HAL_ADC_Init+0x334>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff35 	bl	8000b78 <LL_ADC_IsEnabled>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d000      	beq.n	8000d14 <HAL_ADC_Init+0xec>
 8000d12:	e0ad      	b.n	8000e70 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7e1b      	ldrb	r3, [r3, #24]
 8000d1c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d1e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7e5b      	ldrb	r3, [r3, #25]
 8000d24:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d26:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e9b      	ldrb	r3, [r3, #26]
 8000d2c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d2e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_ADC_Init+0x116>
 8000d38:	2380      	movs	r3, #128	@ 0x80
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	e000      	b.n	8000d40 <HAL_ADC_Init+0x118>
 8000d3e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d40:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d46:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da04      	bge.n	8000d5a <HAL_ADC_Init+0x132>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	e001      	b.n	8000d5e <HAL_ADC_Init+0x136>
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000d5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	212c      	movs	r1, #44	@ 0x2c
 8000d64:	5c5b      	ldrb	r3, [r3, r1]
 8000d66:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d68:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2220      	movs	r2, #32
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d115      	bne.n	8000da6 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7e9b      	ldrb	r3, [r3, #26]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	0252      	lsls	r2, r2, #9
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	e00b      	b.n	8000da6 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d92:	2220      	movs	r2, #32
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00a      	beq.n	8000dc4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000db2:	23e0      	movs	r3, #224	@ 0xe0
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	4a65      	ldr	r2, [pc, #404]	@ (8000f60 <HAL_ADC_Init+0x338>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	0019      	movs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	0f9b      	lsrs	r3, r3, #30
 8000de0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	223c      	movs	r2, #60	@ 0x3c
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d111      	bne.n	8000e1c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	0f9b      	lsrs	r3, r3, #30
 8000dfe:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e04:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000e0a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000e10:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	2201      	movs	r2, #1
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	4a50      	ldr	r2, [pc, #320]	@ (8000f64 <HAL_ADC_Init+0x33c>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	23c0      	movs	r3, #192	@ 0xc0
 8000e38:	061b      	lsls	r3, r3, #24
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d018      	beq.n	8000e70 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d012      	beq.n	8000e70 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	061b      	lsls	r3, r3, #24
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d00c      	beq.n	8000e70 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e56:	4b44      	ldr	r3, [pc, #272]	@ (8000f68 <HAL_ADC_Init+0x340>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a44      	ldr	r2, [pc, #272]	@ (8000f6c <HAL_ADC_Init+0x344>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	0019      	movs	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	23f0      	movs	r3, #240	@ 0xf0
 8000e66:	039b      	lsls	r3, r3, #14
 8000e68:	401a      	ands	r2, r3
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <HAL_ADC_Init+0x340>)
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f7ff fd8b 	bl	8000996 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e88:	4939      	ldr	r1, [pc, #228]	@ (8000f70 <HAL_ADC_Init+0x348>)
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	f7ff fd83 	bl	8000996 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4249      	negs	r1, r1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eaa:	e018      	b.n	8000ede <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	039b      	lsls	r3, r3, #14
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d112      	bne.n	8000ede <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	221c      	movs	r2, #28
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2210      	movs	r2, #16
 8000ecc:	4252      	negs	r2, r2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fd73 	bl	80009d0 <LL_ADC_GetSamplingTimeCommonChannels>
 8000eea:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d10b      	bne.n	8000f0c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	2203      	movs	r2, #3
 8000f00:	4393      	bics	r3, r2
 8000f02:	2201      	movs	r2, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f0a:	e01c      	b.n	8000f46 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f10:	2212      	movs	r2, #18
 8000f12:	4393      	bics	r3, r2
 8000f14:	2210      	movs	r2, #16
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f20:	2201      	movs	r2, #1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f28:	231f      	movs	r3, #31
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f30:	e009      	b.n	8000f46 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	2210      	movs	r2, #16
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f3e:	231f      	movs	r3, #31
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f46:	231f      	movs	r3, #31
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	781b      	ldrb	r3, [r3, #0]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b008      	add	sp, #32
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	00030d40 	.word	0x00030d40
 8000f5c:	fffffefd 	.word	0xfffffefd
 8000f60:	ffde0201 	.word	0xffde0201
 8000f64:	1ffffc02 	.word	0x1ffffc02
 8000f68:	40012708 	.word	0x40012708
 8000f6c:	ffc3ffff 	.word	0xffc3ffff
 8000f70:	7fffff04 	.word	0x7fffff04

08000f74 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fe3f 	bl	8000c04 <LL_ADC_REG_IsConversionOngoing>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d135      	bne.n	8000ff6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2254      	movs	r2, #84	@ 0x54
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_ADC_Start+0x24>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e035      	b.n	8001004 <HAL_ADC_Start+0x90>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2254      	movs	r2, #84	@ 0x54
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fa0:	250f      	movs	r5, #15
 8000fa2:	197c      	adds	r4, r7, r5
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fb1a 	bl	80015e0 <ADC_Enable>
 8000fac:	0003      	movs	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fb0:	197b      	adds	r3, r7, r5
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <HAL_ADC_Start+0x98>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2280      	movs	r2, #128	@ 0x80
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2254      	movs	r2, #84	@ 0x54
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fde9 	bl	8000bbc <LL_ADC_REG_StartConversion>
 8000fea:	e008      	b.n	8000ffe <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2254      	movs	r2, #84	@ 0x54
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]
 8000ff4:	e003      	b.n	8000ffe <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	781b      	ldrb	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b004      	add	sp, #16
 800100a:	bdb0      	pop	{r4, r5, r7, pc}
 800100c:	fffff0fe 	.word	0xfffff0fe

08001010 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2254      	movs	r2, #84	@ 0x54
 800101c:	5c9b      	ldrb	r3, [r3, r2]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Stop+0x16>
 8001022:	2302      	movs	r3, #2
 8001024:	e029      	b.n	800107a <HAL_ADC_Stop+0x6a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2254      	movs	r2, #84	@ 0x54
 800102a:	2101      	movs	r1, #1
 800102c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800102e:	250f      	movs	r5, #15
 8001030:	197c      	adds	r4, r7, r5
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fa97 	bl	8001568 <ADC_ConversionStop>
 800103a:	0003      	movs	r3, r0
 800103c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800103e:	197b      	adds	r3, r7, r5
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d112      	bne.n	800106c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001046:	197c      	adds	r4, r7, r5
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fb46 	bl	80016dc <ADC_Disable>
 8001050:	0003      	movs	r3, r0
 8001052:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001054:	197b      	adds	r3, r7, r5
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_ADC_Stop+0x74>)
 8001062:	4013      	ands	r3, r2
 8001064:	2201      	movs	r2, #1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2254      	movs	r2, #84	@ 0x54
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	fffffefe 	.word	0xfffffefe

08001088 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d102      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800109a:	2308      	movs	r3, #8
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e00f      	b.n	80010c0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	d007      	beq.n	80010bc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	2220      	movs	r2, #32
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e06c      	b.n	8001196 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80010bc:	2304      	movs	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fc3e 	bl	8000940 <HAL_GetTick>
 80010c4:	0003      	movs	r3, r0
 80010c6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010c8:	e019      	b.n	80010fe <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	d016      	beq.n	80010fe <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80010d0:	f7ff fc36 	bl	8000940 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d302      	bcc.n	80010e6 <HAL_ADC_PollForConversion+0x5e>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10b      	bne.n	80010fe <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	2204      	movs	r2, #4
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2254      	movs	r2, #84	@ 0x54
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e04b      	b.n	8001196 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	d0df      	beq.n	80010ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	2280      	movs	r2, #128	@ 0x80
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fc6e 	bl	80009fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d02e      	beq.n	8001184 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7e9b      	ldrb	r3, [r3, #26]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d12a      	bne.n	8001184 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	4013      	ands	r3, r2
 8001138:	2b08      	cmp	r3, #8
 800113a:	d123      	bne.n	8001184 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fd5f 	bl	8000c04 <LL_ADC_REG_IsConversionOngoing>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d110      	bne.n	800116c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	210c      	movs	r1, #12
 8001156:	438a      	bics	r2, r1
 8001158:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_ADC_PollForConversion+0x118>)
 8001160:	4013      	ands	r3, r2
 8001162:	2201      	movs	r2, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	659a      	str	r2, [r3, #88]	@ 0x58
 800116a:	e00b      	b.n	8001184 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	2220      	movs	r2, #32
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	2201      	movs	r2, #1
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7e1b      	ldrb	r3, [r3, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	220c      	movs	r2, #12
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	fffffefe 	.word	0xfffffefe

080011a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c6:	2317      	movs	r3, #23
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2254      	movs	r2, #84	@ 0x54
 80011d6:	5c9b      	ldrb	r3, [r3, r2]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x24>
 80011dc:	2302      	movs	r3, #2
 80011de:	e1be      	b.n	800155e <HAL_ADC_ConfigChannel+0x3a2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2254      	movs	r2, #84	@ 0x54
 80011e4:	2101      	movs	r1, #1
 80011e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff fd09 	bl	8000c04 <LL_ADC_REG_IsConversionOngoing>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d000      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x3c>
 80011f6:	e1a1      	b.n	800153c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d100      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 8001200:	e152      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	429a      	cmp	r2, r3
 800120c:	d004      	beq.n	8001218 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001212:	4ac2      	ldr	r2, [pc, #776]	@ (800151c <HAL_ADC_ConfigChannel+0x360>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d108      	bne.n	800122a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0019      	movs	r1, r3
 8001222:	0010      	movs	r0, r2
 8001224:	f7ff fc1c 	bl	8000a60 <LL_ADC_REG_SetSequencerChAdd>
 8001228:	e0ed      	b.n	8001406 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	211f      	movs	r1, #31
 8001234:	400b      	ands	r3, r1
 8001236:	210f      	movs	r1, #15
 8001238:	4099      	lsls	r1, r3
 800123a:	000b      	movs	r3, r1
 800123c:	43db      	mvns	r3, r3
 800123e:	4013      	ands	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	0a5b      	lsrs	r3, r3, #9
 800124a:	d105      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x9c>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0e9b      	lsrs	r3, r3, #26
 8001252:	221f      	movs	r2, #31
 8001254:	4013      	ands	r3, r2
 8001256:	e0bc      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	d000      	beq.n	8001264 <HAL_ADC_ConfigChannel+0xa8>
 8001262:	e0b5      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x214>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d000      	beq.n	8001270 <HAL_ADC_ConfigChannel+0xb4>
 800126e:	e0ad      	b.n	80013cc <HAL_ADC_ConfigChannel+0x210>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2204      	movs	r2, #4
 8001276:	4013      	ands	r3, r2
 8001278:	d000      	beq.n	800127c <HAL_ADC_ConfigChannel+0xc0>
 800127a:	e0a5      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x20c>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2208      	movs	r2, #8
 8001282:	4013      	ands	r3, r2
 8001284:	d000      	beq.n	8001288 <HAL_ADC_ConfigChannel+0xcc>
 8001286:	e09d      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x208>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2210      	movs	r2, #16
 800128e:	4013      	ands	r3, r2
 8001290:	d000      	beq.n	8001294 <HAL_ADC_ConfigChannel+0xd8>
 8001292:	e095      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x204>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2220      	movs	r2, #32
 800129a:	4013      	ands	r3, r2
 800129c:	d000      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0xe4>
 800129e:	e08d      	b.n	80013bc <HAL_ADC_ConfigChannel+0x200>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2240      	movs	r2, #64	@ 0x40
 80012a6:	4013      	ands	r3, r2
 80012a8:	d000      	beq.n	80012ac <HAL_ADC_ConfigChannel+0xf0>
 80012aa:	e085      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1fc>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	4013      	ands	r3, r2
 80012b4:	d000      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0xfc>
 80012b6:	e07d      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1f8>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d000      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x10a>
 80012c4:	e074      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x1f4>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d000      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x118>
 80012d2:	e06b      	b.n	80013ac <HAL_ADC_ConfigChannel+0x1f0>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	d000      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x126>
 80012e0:	e062      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x1ec>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4013      	ands	r3, r2
 80012ec:	d000      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x134>
 80012ee:	e059      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	4013      	ands	r3, r2
 80012fa:	d151      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1e4>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	4013      	ands	r3, r2
 8001306:	d149      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1e0>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4013      	ands	r3, r2
 8001312:	d141      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1dc>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4013      	ands	r3, r2
 800131e:	d139      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1d8>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	4013      	ands	r3, r2
 800132a:	d131      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d4>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d129      	bne.n	800138c <HAL_ADC_ConfigChannel+0x1d0>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	02db      	lsls	r3, r3, #11
 8001340:	4013      	ands	r3, r2
 8001342:	d121      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1cc>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	031b      	lsls	r3, r3, #12
 800134c:	4013      	ands	r3, r2
 800134e:	d119      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1c8>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	035b      	lsls	r3, r3, #13
 8001358:	4013      	ands	r3, r2
 800135a:	d111      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1c4>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	039b      	lsls	r3, r3, #14
 8001364:	4013      	ands	r3, r2
 8001366:	d109      	bne.n	800137c <HAL_ADC_ConfigChannel+0x1c0>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	03db      	lsls	r3, r3, #15
 8001370:	4013      	ands	r3, r2
 8001372:	d001      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x1bc>
 8001374:	2316      	movs	r3, #22
 8001376:	e02c      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001378:	2300      	movs	r3, #0
 800137a:	e02a      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 800137c:	2315      	movs	r3, #21
 800137e:	e028      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001380:	2314      	movs	r3, #20
 8001382:	e026      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001384:	2313      	movs	r3, #19
 8001386:	e024      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001388:	2312      	movs	r3, #18
 800138a:	e022      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 800138c:	2311      	movs	r3, #17
 800138e:	e020      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001390:	2310      	movs	r3, #16
 8001392:	e01e      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001394:	230f      	movs	r3, #15
 8001396:	e01c      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 8001398:	230e      	movs	r3, #14
 800139a:	e01a      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 800139c:	230d      	movs	r3, #13
 800139e:	e018      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013a0:	230c      	movs	r3, #12
 80013a2:	e016      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013a4:	230b      	movs	r3, #11
 80013a6:	e014      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013a8:	230a      	movs	r3, #10
 80013aa:	e012      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013ac:	2309      	movs	r3, #9
 80013ae:	e010      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013b0:	2308      	movs	r3, #8
 80013b2:	e00e      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013b4:	2307      	movs	r3, #7
 80013b6:	e00c      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e00a      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013bc:	2305      	movs	r3, #5
 80013be:	e008      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e006      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e004      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x216>
 80013d0:	2300      	movs	r3, #0
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6852      	ldr	r2, [r2, #4]
 80013d6:	201f      	movs	r0, #31
 80013d8:	4002      	ands	r2, r0
 80013da:	4093      	lsls	r3, r2
 80013dc:	000a      	movs	r2, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d808      	bhi.n	8001406 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	f7ff fb0d 	bl	8000a20 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	001a      	movs	r2, r3
 8001414:	f7ff fb48 	bl	8000aa8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db00      	blt.n	8001422 <HAL_ADC_ConfigChannel+0x266>
 8001420:	e096      	b.n	8001550 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff faa9 	bl	800097c <LL_ADC_GetCommonPathInternalCh>
 800142a:	0003      	movs	r3, r0
 800142c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a3c      	ldr	r2, [pc, #240]	@ (8001524 <HAL_ADC_ConfigChannel+0x368>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d123      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001440:	d11e      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	0412      	lsls	r2, r2, #16
 8001448:	4313      	orrs	r3, r2
 800144a:	4a35      	ldr	r2, [pc, #212]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 800144c:	0019      	movs	r1, r3
 800144e:	0010      	movs	r0, r2
 8001450:	f7ff fa80 	bl	8000954 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001454:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_ADC_ConfigChannel+0x36c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4934      	ldr	r1, [pc, #208]	@ (800152c <HAL_ADC_ConfigChannel+0x370>)
 800145a:	0018      	movs	r0, r3
 800145c:	f7fe fe54 	bl	8000108 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	001a      	movs	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	189b      	adds	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001470:	e002      	b.n	8001478 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3b01      	subs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f9      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800147e:	e067      	b.n	8001550 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2a      	ldr	r2, [pc, #168]	@ (8001530 <HAL_ADC_ConfigChannel+0x374>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d162      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	03db      	lsls	r3, r3, #15
 8001490:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001492:	d15d      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	03d2      	lsls	r2, r2, #15
 800149a:	4313      	orrs	r3, r2
 800149c:	4a20      	ldr	r2, [pc, #128]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 800149e:	0019      	movs	r1, r3
 80014a0:	0010      	movs	r0, r2
 80014a2:	f7ff fa57 	bl	8000954 <LL_ADC_SetCommonPathInternalCh>
 80014a6:	e053      	b.n	8001550 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	061b      	lsls	r3, r3, #24
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d004      	beq.n	80014be <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014b8:	4a18      	ldr	r2, [pc, #96]	@ (800151c <HAL_ADC_ConfigChannel+0x360>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d107      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	0019      	movs	r1, r3
 80014c8:	0010      	movs	r0, r2
 80014ca:	f7ff fada 	bl	8000a82 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da3c      	bge.n	8001550 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fa4f 	bl	800097c <LL_ADC_GetCommonPathInternalCh>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <HAL_ADC_ConfigChannel+0x368>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d108      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_ADC_ConfigChannel+0x378>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f7ff fa2c 	bl	8000954 <LL_ADC_SetCommonPathInternalCh>
 80014fc:	e028      	b.n	8001550 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_ADC_ConfigChannel+0x374>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d123      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <HAL_ADC_ConfigChannel+0x37c>)
 800150c:	4013      	ands	r3, r2
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_ADC_ConfigChannel+0x364>)
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f7ff fa1e 	bl	8000954 <LL_ADC_SetCommonPathInternalCh>
 8001518:	e01a      	b.n	8001550 <HAL_ADC_ConfigChannel+0x394>
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	80000004 	.word	0x80000004
 8001520:	40012708 	.word	0x40012708
 8001524:	a4000200 	.word	0xa4000200
 8001528:	20000000 	.word	0x20000000
 800152c:	00030d40 	.word	0x00030d40
 8001530:	a8000400 	.word	0xa8000400
 8001534:	ff7fffff 	.word	0xff7fffff
 8001538:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001540:	2220      	movs	r2, #32
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001548:	2317      	movs	r3, #23
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2254      	movs	r2, #84	@ 0x54
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001558:	2317      	movs	r3, #23
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	781b      	ldrb	r3, [r3, #0]
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b006      	add	sp, #24
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)

08001568 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fb45 	bl	8000c04 <LL_ADC_REG_IsConversionOngoing>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d02b      	beq.n	80015d6 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fb09 	bl	8000b9a <LL_ADC_IsDisableOngoing>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d104      	bne.n	8001596 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff fb25 	bl	8000be0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001596:	f7ff f9d3 	bl	8000940 <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800159e:	e014      	b.n	80015ca <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80015a0:	f7ff f9ce 	bl	8000940 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d90d      	bls.n	80015ca <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	2210      	movs	r2, #16
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015be:	2201      	movs	r2, #1
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e006      	b.n	80015d8 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1e4      	bne.n	80015a0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fac1 	bl	8000b78 <LL_ADC_IsEnabled>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d162      	bne.n	80016c0 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a32      	ldr	r2, [pc, #200]	@ (80016cc <ADC_Enable+0xec>)
 8001602:	4013      	ands	r3, r2
 8001604:	d00d      	beq.n	8001622 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	2210      	movs	r2, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001616:	2201      	movs	r2, #1
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e04f      	b.n	80016c2 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff fa82 	bl	8000b30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <ADC_Enable+0xf0>)
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff f9a4 	bl	800097c <LL_ADC_GetCommonPathInternalCh>
 8001634:	0002      	movs	r2, r0
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	4013      	ands	r3, r2
 800163c:	d00f      	beq.n	800165e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800163e:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <ADC_Enable+0xf4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4925      	ldr	r1, [pc, #148]	@ (80016d8 <ADC_Enable+0xf8>)
 8001644:	0018      	movs	r0, r3
 8001646:	f7fe fd5f 	bl	8000108 <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	3301      	adds	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001650:	e002      	b.n	8001658 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f9      	bne.n	8001652 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e5b      	ldrb	r3, [r3, #25]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d02c      	beq.n	80016c0 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001666:	f7ff f96b 	bl	8000940 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800166e:	e020      	b.n	80016b2 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fa7f 	bl	8000b78 <LL_ADC_IsEnabled>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d104      	bne.n	8001688 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff fa54 	bl	8000b30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001688:	f7ff f95a 	bl	8000940 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d90d      	bls.n	80016b2 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	2210      	movs	r2, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	2201      	movs	r2, #1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e007      	b.n	80016c2 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d1d7      	bne.n	8001670 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b004      	add	sp, #16
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	80000017 	.word	0x80000017
 80016d0:	40012708 	.word	0x40012708
 80016d4:	20000000 	.word	0x20000000
 80016d8:	00030d40 	.word	0x00030d40

080016dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff fa56 	bl	8000b9a <LL_ADC_IsDisableOngoing>
 80016ee:	0003      	movs	r3, r0
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff fa3e 	bl	8000b78 <LL_ADC_IsEnabled>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d040      	beq.n	8001782 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d13d      	bne.n	8001782 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2205      	movs	r2, #5
 800170e:	4013      	ands	r3, r2
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10d      	bne.n	8001730 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fa1b 	bl	8000b54 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2203      	movs	r2, #3
 8001724:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001726:	f7ff f90b 	bl	8000940 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800172e:	e022      	b.n	8001776 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	2210      	movs	r2, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001740:	2201      	movs	r2, #1
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e01b      	b.n	8001784 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800174c:	f7ff f8f8 	bl	8000940 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d90d      	bls.n	8001776 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	2210      	movs	r2, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176a:	2201      	movs	r2, #1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e006      	b.n	8001784 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d1e4      	bne.n	800174c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	0002      	movs	r2, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b7f      	cmp	r3, #127	@ 0x7f
 80017a0:	d828      	bhi.n	80017f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <__NVIC_SetPriority+0xd4>)
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	33c0      	adds	r3, #192	@ 0xc0
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	589b      	ldr	r3, [r3, r2]
 80017b2:	1dfa      	adds	r2, r7, #7
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	0011      	movs	r1, r2
 80017b8:	2203      	movs	r2, #3
 80017ba:	400a      	ands	r2, r1
 80017bc:	00d2      	lsls	r2, r2, #3
 80017be:	21ff      	movs	r1, #255	@ 0xff
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	43d2      	mvns	r2, r2
 80017c6:	401a      	ands	r2, r3
 80017c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	22ff      	movs	r2, #255	@ 0xff
 80017d0:	401a      	ands	r2, r3
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	2303      	movs	r3, #3
 80017da:	4003      	ands	r3, r0
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e0:	481f      	ldr	r0, [pc, #124]	@ (8001860 <__NVIC_SetPriority+0xd4>)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	430a      	orrs	r2, r1
 80017ec:	33c0      	adds	r3, #192	@ 0xc0
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017f2:	e031      	b.n	8001858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <__NVIC_SetPriority+0xd8>)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	0019      	movs	r1, r3
 80017fc:	230f      	movs	r3, #15
 80017fe:	400b      	ands	r3, r1
 8001800:	3b08      	subs	r3, #8
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3306      	adds	r3, #6
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	18d3      	adds	r3, r2, r3
 800180a:	3304      	adds	r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1dfa      	adds	r2, r7, #7
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	0011      	movs	r1, r2
 8001814:	2203      	movs	r2, #3
 8001816:	400a      	ands	r2, r1
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	21ff      	movs	r1, #255	@ 0xff
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	43d2      	mvns	r2, r2
 8001822:	401a      	ands	r2, r3
 8001824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	22ff      	movs	r2, #255	@ 0xff
 800182c:	401a      	ands	r2, r3
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	2303      	movs	r3, #3
 8001836:	4003      	ands	r3, r0
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <__NVIC_SetPriority+0xd8>)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	001c      	movs	r4, r3
 8001844:	230f      	movs	r3, #15
 8001846:	4023      	ands	r3, r4
 8001848:	3b08      	subs	r3, #8
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	430a      	orrs	r2, r1
 800184e:	3306      	adds	r3, #6
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	18c3      	adds	r3, r0, r3
 8001854:	3304      	adds	r3, #4
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b003      	add	sp, #12
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	045b      	lsls	r3, r3, #17
 8001878:	429a      	cmp	r2, r3
 800187a:	d301      	bcc.n	8001880 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187c:	2301      	movs	r3, #1
 800187e:	e010      	b.n	80018a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001880:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <SysTick_Config+0x44>)
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	3a01      	subs	r2, #1
 8001886:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001888:	2301      	movs	r3, #1
 800188a:	425b      	negs	r3, r3
 800188c:	2103      	movs	r1, #3
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff7c 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <SysTick_Config+0x44>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <SysTick_Config+0x44>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	210f      	movs	r1, #15
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ffbf 	bl	8001868 <SysTick_Config>
 80018ea:	0003      	movs	r3, r0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001902:	e14d      	b.n	8001ba0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d100      	bne.n	800191c <HAL_GPIO_Init+0x28>
 800191a:	e13e      	b.n	8001b9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x38>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d125      	bne.n	8001978 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	58d3      	ldr	r3, [r2, r3]
 8001938:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	43da      	mvns	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4013      	ands	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	220f      	movs	r2, #15
 8001956:	401a      	ands	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2107      	movs	r1, #7
 800195c:	400b      	ands	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	409a      	lsls	r2, r3
 8001962:	0013      	movs	r3, r2
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	6979      	ldr	r1, [r7, #20]
 8001976:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	43da      	mvns	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	401a      	ands	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d00b      	beq.n	80019cc <HAL_GPIO_Init+0xd8>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b12      	cmp	r3, #18
 80019ca:	d130      	bne.n	8001a2e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	409a      	lsls	r2, r3
 80019da:	0013      	movs	r3, r2
 80019dc:	43da      	mvns	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a02:	2201      	movs	r2, #1
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	409a      	lsls	r2, r3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	2201      	movs	r2, #1
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d017      	beq.n	8001a66 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	43da      	mvns	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	055b      	lsls	r3, r3, #21
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d100      	bne.n	8001a74 <HAL_GPIO_Init+0x180>
 8001a72:	e092      	b.n	8001b9a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001a74:	4a50      	ldr	r2, [pc, #320]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	589b      	ldr	r3, [r3, r2]
 8001a80:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4013      	ands	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	43da      	mvns	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	23a0      	movs	r3, #160	@ 0xa0
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x1d6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a45      	ldr	r2, [pc, #276]	@ (8001bbc <HAL_GPIO_Init+0x2c8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x1d2>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a44      	ldr	r2, [pc, #272]	@ (8001bc0 <HAL_GPIO_Init+0x2cc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x1ce>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a43      	ldr	r2, [pc, #268]	@ (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x1ca>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001aca:	2300      	movs	r3, #0
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	2103      	movs	r1, #3
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	00d2      	lsls	r2, r2, #3
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001adc:	4936      	ldr	r1, [pc, #216]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001aea:	4a33      	ldr	r2, [pc, #204]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	58d3      	ldr	r3, [r2, r3]
 8001af0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	4013      	ands	r3, r2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001b10:	4929      	ldr	r1, [pc, #164]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001b18:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b1a:	2384      	movs	r3, #132	@ 0x84
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4013      	ands	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	4013      	ands	r3, r2
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001b3e:	491e      	ldr	r1, [pc, #120]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b40:	2284      	movs	r2, #132	@ 0x84
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4013      	ands	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	035b      	lsls	r3, r3, #13
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	039b      	lsls	r3, r3, #14
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	40da      	lsrs	r2, r3
 8001ba8:	1e13      	subs	r3, r2, #0
 8001baa:	d000      	beq.n	8001bae <HAL_GPIO_Init+0x2ba>
 8001bac:	e6aa      	b.n	8001904 <HAL_GPIO_Init+0x10>
  }
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b006      	add	sp, #24
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	50000400 	.word	0x50000400
 8001bc0:	50000800 	.word	0x50000800
 8001bc4:	50001400 	.word	0x50001400

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1d0      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x1e>
 8001be4:	e069      	b.n	8001cba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	4bc8      	ldr	r3, [pc, #800]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	@ 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d15d      	bne.n	8001cba <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1bc      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_OscConfig+0x56>
 8001c0e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4bbd      	ldr	r3, [pc, #756]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0249      	lsls	r1, r1, #9
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e020      	b.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	23a0      	movs	r3, #160	@ 0xa0
 8001c24:	02db      	lsls	r3, r3, #11
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10e      	bne.n	8001c48 <HAL_RCC_OscConfig+0x80>
 8001c2a:	4bb7      	ldr	r3, [pc, #732]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4bb6      	ldr	r3, [pc, #728]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c30:	2180      	movs	r1, #128	@ 0x80
 8001c32:	02c9      	lsls	r1, r1, #11
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4bb3      	ldr	r3, [pc, #716]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4bb2      	ldr	r3, [pc, #712]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c3e:	2180      	movs	r1, #128	@ 0x80
 8001c40:	0249      	lsls	r1, r1, #9
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c48:	4baf      	ldr	r3, [pc, #700]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4bae      	ldr	r3, [pc, #696]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c4e:	49af      	ldr	r1, [pc, #700]	@ (8001f0c <HAL_RCC_OscConfig+0x344>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4bac      	ldr	r3, [pc, #688]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4bab      	ldr	r3, [pc, #684]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c5a:	49ad      	ldr	r1, [pc, #692]	@ (8001f10 <HAL_RCC_OscConfig+0x348>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d014      	beq.n	8001c92 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe fe6a 	bl	8000940 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c72:	f7fe fe65 	bl	8000940 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	@ 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e17b      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c84:	4ba0      	ldr	r3, [pc, #640]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0xaa>
 8001c90:	e013      	b.n	8001cba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7fe fe55 	bl	8000940 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fe50 	bl	8000940 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e166      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	4b96      	ldr	r3, [pc, #600]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xfe>
 8001cc4:	e086      	b.n	8001dd4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	4b90      	ldr	r3, [pc, #576]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2238      	movs	r2, #56	@ 0x38
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d12f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e14c      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b89      	ldr	r3, [pc, #548]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a8b      	ldr	r2, [pc, #556]	@ (8001f14 <HAL_RCC_OscConfig+0x34c>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	021a      	lsls	r2, r3, #8
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d112      	bne.n	8001d24 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a85      	ldr	r2, [pc, #532]	@ (8001f18 <HAL_RCC_OscConfig+0x350>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d12:	4b7d      	ldr	r3, [pc, #500]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	2207      	movs	r2, #7
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f1c <HAL_RCC_OscConfig+0x354>)
 8001d1e:	40da      	lsrs	r2, r3
 8001d20:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <HAL_RCC_OscConfig+0x358>)
 8001d22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d24:	4b7f      	ldr	r3, [pc, #508]	@ (8001f24 <HAL_RCC_OscConfig+0x35c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe fdad 	bl	8000888 <HAL_InitTick>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d050      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e122      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d3e:	4b72      	ldr	r3, [pc, #456]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x350>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001d52:	4b6d      	ldr	r3, [pc, #436]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	0049      	lsls	r1, r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe fdee 	bl	8000940 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d6a:	f7fe fde9 	bl	8000940 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ff      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	4b62      	ldr	r3, [pc, #392]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a61      	ldr	r2, [pc, #388]	@ (8001f14 <HAL_RCC_OscConfig+0x34c>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	e019      	b.n	8001dd4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b58      	ldr	r3, [pc, #352]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001da6:	4960      	ldr	r1, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x360>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe fdc8 	bl	8000940 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001db6:	f7fe fdc3 	bl	8000940 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0d9      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d042      	beq.n	8001e64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2238      	movs	r2, #56	@ 0x38
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b18      	cmp	r3, #24
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d138      	bne.n	8001e64 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0c2      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	430a      	orrs	r2, r1
 8001e08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fd99 	bl	8000940 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e14:	f7fe fd94 	bl	8000940 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0aa      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e26:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0x24c>
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e32:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e36:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fd7f 	bl	8000940 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e48:	f7fe fd7a 	bl	8000940 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e090      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f1      	bne.n	8001e48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d100      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2a8>
 8001e6e:	e084      	b.n	8001f7a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2238      	movs	r2, #56	@ 0x38
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d000      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2c6>
 8001e8c:	e075      	b.n	8001f7a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e074      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x2e0>
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x31a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x302>
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001eb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ebe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x31a>
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ecc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001edc:	2104      	movs	r1, #4
 8001ede:	438a      	bics	r2, r1
 8001ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d028      	beq.n	8001f3c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe fd29 	bl	8000940 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fd24 	bl	8000940 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x364>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d915      	bls.n	8001f30 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e039      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	fffeffff 	.word	0xfffeffff
 8001f10:	fffbffff 	.word	0xfffbffff
 8001f14:	ffff80ff 	.word	0xffff80ff
 8001f18:	ffffc7ff 	.word	0xffffc7ff
 8001f1c:	02dc6c00 	.word	0x02dc6c00
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004
 8001f28:	fffffeff 	.word	0xfffffeff
 8001f2c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_RCC_OscConfig+0x3bc>)
 8001f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0dc      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x32c>
 8001f3a:	e013      	b.n	8001f64 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fd00 	bl	8000940 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fcfb 	bl	8000940 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <HAL_RCC_OscConfig+0x3c0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e010      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_RCC_OscConfig+0x3bc>)
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f64:	230f      	movs	r3, #15
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_OscConfig+0x3bc>)
 8001f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <HAL_RCC_OscConfig+0x3bc>)
 8001f74:	4905      	ldr	r1, [pc, #20]	@ (8001f8c <HAL_RCC_OscConfig+0x3c4>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b006      	add	sp, #24
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	00001388 	.word	0x00001388
 8001f8c:	efffffff 	.word	0xefffffff

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0e9      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2207      	movs	r2, #7
 8001faa:	4013      	ands	r3, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d91e      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b73      	ldr	r3, [pc, #460]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	4b70      	ldr	r3, [pc, #448]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fc4:	f7fe fcbc 	bl	8000940 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fce:	f7fe fcb7 	bl	8000940 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_RCC_ClockConfig+0x1f4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0ca      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe2:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1ee      	bne.n	8001fce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d017      	beq.n	800202a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002004:	4b60      	ldr	r3, [pc, #384]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_RCC_ClockConfig+0x1fc>)
 800200a:	401a      	ands	r2, r3
 800200c:	4b5e      	ldr	r3, [pc, #376]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	21b0      	movs	r1, #176	@ 0xb0
 8002010:	0109      	lsls	r1, r1, #4
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002016:	4b5c      	ldr	r3, [pc, #368]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4a5d      	ldr	r2, [pc, #372]	@ (8002190 <HAL_RCC_ClockConfig+0x200>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b58      	ldr	r3, [pc, #352]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d055      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002034:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	221c      	movs	r2, #28
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b51      	ldr	r3, [pc, #324]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002050:	4b4d      	ldr	r3, [pc, #308]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	4013      	ands	r3, r2
 800205a:	d11f      	bne.n	800209c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e08b      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	4b47      	ldr	r3, [pc, #284]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4013      	ands	r3, r2
 8002072:	d113      	bne.n	800209c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e07f      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d106      	bne.n	800208e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d108      	bne.n	800209c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e074      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800208e:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e06d      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209c:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2207      	movs	r2, #7
 80020a2:	4393      	bics	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4b37      	ldr	r3, [pc, #220]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe fc46 	bl	8000940 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe fc41 	bl	8000940 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e054      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2238      	movs	r2, #56	@ 0x38
 80020d4:	401a      	ands	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1ec      	bne.n	80020ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d21e      	bcs.n	800212c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2207      	movs	r2, #7
 80020f4:	4393      	bics	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002100:	f7fe fc1e 	bl	8000940 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002108:	e009      	b.n	800211e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f7fe fc19 	bl	8000940 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a1b      	ldr	r2, [pc, #108]	@ (8002184 <HAL_RCC_ClockConfig+0x1f4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e02c      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2207      	movs	r2, #7
 8002124:	4013      	ands	r3, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <HAL_RCC_ClockConfig+0x204>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800214a:	f000 f82b 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800214e:	0001      	movs	r1, r0
 8002150:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	220f      	movs	r2, #15
 8002158:	401a      	ands	r2, r3
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_RCC_ClockConfig+0x208>)
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	58d3      	ldr	r3, [r2, r3]
 8002160:	221f      	movs	r2, #31
 8002162:	4013      	ands	r3, r2
 8002164:	000a      	movs	r2, r1
 8002166:	40da      	lsrs	r2, r3
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_RCC_ClockConfig+0x20c>)
 800216a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_RCC_ClockConfig+0x210>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0018      	movs	r0, r3
 8002172:	f7fe fb89 	bl	8000888 <HAL_InitTick>
 8002176:	0003      	movs	r3, r0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000
 8002184:	00001388 	.word	0x00001388
 8002188:	40021000 	.word	0x40021000
 800218c:	ffff84ff 	.word	0xffff84ff
 8002190:	fffff0ff 	.word	0xfffff0ff
 8002194:	ffff8fff 	.word	0xffff8fff
 8002198:	080034e0 	.word	0x080034e0
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_RCC_GetSysClockFreq+0x78>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2238      	movs	r2, #56	@ 0x38
 80021b0:	4013      	ands	r3, r2
 80021b2:	d10f      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_RCC_GetSysClockFreq+0x78>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0adb      	lsrs	r3, r3, #11
 80021ba:	2207      	movs	r2, #7
 80021bc:	4013      	ands	r3, r2
 80021be:	2201      	movs	r2, #1
 80021c0:	409a      	lsls	r2, r3
 80021c2:	0013      	movs	r3, r2
 80021c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	4815      	ldr	r0, [pc, #84]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x7c>)
 80021ca:	f7fd ff9d 	bl	8000108 <__udivsi3>
 80021ce:	0003      	movs	r3, r0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	e01e      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_GetSysClockFreq+0x78>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2238      	movs	r2, #56	@ 0x38
 80021da:	4013      	ands	r3, r2
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x80>)
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RCC_GetSysClockFreq+0x78>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	@ 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d103      	bne.n	80021fa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_RCC_GetSysClockFreq+0x78>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2238      	movs	r2, #56	@ 0x38
 8002200:	4013      	ands	r3, r2
 8002202:	2b18      	cmp	r3, #24
 8002204:	d103      	bne.n	800220e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002206:	23fa      	movs	r3, #250	@ 0xfa
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	e001      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	02dc6c00 	.word	0x02dc6c00
 8002224:	007a1200 	.word	0x007a1200

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002230:	2313      	movs	r3, #19
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002238:	2312      	movs	r3, #18
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d100      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800224c:	e079      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2011      	movs	r0, #17
 8002250:	183b      	adds	r3, r7, r0
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002256:	4b64      	ldr	r3, [pc, #400]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	055b      	lsls	r3, r3, #21
 800225e:	4013      	ands	r3, r2
 8002260:	d110      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b61      	ldr	r3, [pc, #388]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002266:	4b60      	ldr	r3, [pc, #384]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	0549      	lsls	r1, r1, #21
 800226c:	430a      	orrs	r2, r1
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002270:	4b5d      	ldr	r3, [pc, #372]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	055b      	lsls	r3, r3, #21
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	183b      	adds	r3, r7, r0
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002284:	4b58      	ldr	r3, [pc, #352]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002288:	23c0      	movs	r3, #192	@ 0xc0
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4013      	ands	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	d014      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80022a0:	4b51      	ldr	r3, [pc, #324]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	4a51      	ldr	r2, [pc, #324]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ae:	4b4e      	ldr	r3, [pc, #312]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022b0:	2180      	movs	r1, #128	@ 0x80
 80022b2:	0249      	lsls	r1, r1, #9
 80022b4:	430a      	orrs	r2, r1
 80022b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b8:	4b4b      	ldr	r3, [pc, #300]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022bc:	4b4a      	ldr	r3, [pc, #296]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022be:	494c      	ldr	r1, [pc, #304]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80022c4:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	d016      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fb35 	bl	8000940 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe fb30 	bl	8000940 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	4a43      	ldr	r2, [pc, #268]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d904      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80022ec:	2313      	movs	r3, #19
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2203      	movs	r2, #3
 80022f2:	701a      	strb	r2, [r3, #0]
          break;
 80022f4:	e004      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022f6:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d0ed      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002300:	2313      	movs	r3, #19
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	4a37      	ldr	r2, [pc, #220]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002310:	4013      	ands	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800231a:	430a      	orrs	r2, r1
 800231c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800231e:	e005      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	2312      	movs	r3, #18
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2213      	movs	r2, #19
 8002326:	18ba      	adds	r2, r7, r2
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232c:	2311      	movs	r3, #17
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b2c      	ldr	r3, [pc, #176]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800233a:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800233c:	492e      	ldr	r1, [pc, #184]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233e:	400a      	ands	r2, r1
 8002340:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	2203      	movs	r2, #3
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800235c:	430a      	orrs	r2, r1
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	4013      	ands	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236a:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	4a23      	ldr	r2, [pc, #140]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800237a:	430a      	orrs	r2, r1
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	01db      	lsls	r3, r3, #7
 8002386:	4013      	ands	r3, r2
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	0899      	lsrs	r1, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002398:	430a      	orrs	r2, r1
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da09      	bge.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	22e0      	movs	r2, #224	@ 0xe0
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80023d8:	2312      	movs	r3, #18
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b006      	add	sp, #24
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	40021000 	.word	0x40021000
 80023ec:	fffffcff 	.word	0xfffffcff
 80023f0:	fffeffff 	.word	0xfffeffff
 80023f4:	00001388 	.word	0x00001388
 80023f8:	efffffff 	.word	0xefffffff
 80023fc:	ffffcfff 	.word	0xffffcfff
 8002400:	ffff3fff 	.word	0xffff3fff

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e04a      	b.n	80024ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223d      	movs	r2, #61	@ 0x3d
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	223c      	movs	r2, #60	@ 0x3c
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe f967 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223d      	movs	r2, #61	@ 0x3d
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	0019      	movs	r1, r3
 8002444:	0010      	movs	r0, r2
 8002446:	f000 fb43 	bl	8002ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2248      	movs	r2, #72	@ 0x48
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223e      	movs	r2, #62	@ 0x3e
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223f      	movs	r2, #63	@ 0x3f
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2240      	movs	r2, #64	@ 0x40
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	@ 0x41
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2242      	movs	r2, #66	@ 0x42
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2243      	movs	r2, #67	@ 0x43
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2244      	movs	r2, #68	@ 0x44
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2245      	movs	r2, #69	@ 0x45
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2246      	movs	r2, #70	@ 0x46
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2247      	movs	r2, #71	@ 0x47
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223d      	movs	r2, #61	@ 0x3d
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04a      	b.n	800255c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	@ 0x3d
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223c      	movs	r2, #60	@ 0x3c
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 f841 	bl	8002564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223d      	movs	r2, #61	@ 0x3d
 80024e6:	2102      	movs	r1, #2
 80024e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f000 faeb 	bl	8002ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2248      	movs	r2, #72	@ 0x48
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223e      	movs	r2, #62	@ 0x3e
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	223f      	movs	r2, #63	@ 0x3f
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2240      	movs	r2, #64	@ 0x40
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2241      	movs	r2, #65	@ 0x41
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2242      	movs	r2, #66	@ 0x42
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2243      	movs	r2, #67	@ 0x43
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2244      	movs	r2, #68	@ 0x44
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2245      	movs	r2, #69	@ 0x45
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2246      	movs	r2, #70	@ 0x46
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2247      	movs	r2, #71	@ 0x47
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223d      	movs	r2, #61	@ 0x3d
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800256c:	46c0      	nop			@ (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b002      	add	sp, #8
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_TIM_PWM_Start+0x22>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223e      	movs	r2, #62	@ 0x3e
 8002588:	5c9b      	ldrb	r3, [r3, r2]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	4193      	sbcs	r3, r2
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e037      	b.n	8002606 <HAL_TIM_PWM_Start+0x92>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d108      	bne.n	80025ae <HAL_TIM_PWM_Start+0x3a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	223f      	movs	r2, #63	@ 0x3f
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	4193      	sbcs	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e02b      	b.n	8002606 <HAL_TIM_PWM_Start+0x92>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d108      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x52>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	1e5a      	subs	r2, r3, #1
 80025c0:	4193      	sbcs	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e01f      	b.n	8002606 <HAL_TIM_PWM_Start+0x92>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d108      	bne.n	80025de <HAL_TIM_PWM_Start+0x6a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2241      	movs	r2, #65	@ 0x41
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	4193      	sbcs	r3, r2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e013      	b.n	8002606 <HAL_TIM_PWM_Start+0x92>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d108      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2242      	movs	r2, #66	@ 0x42
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	4193      	sbcs	r3, r2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e007      	b.n	8002606 <HAL_TIM_PWM_Start+0x92>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2243      	movs	r2, #67	@ 0x43
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	4193      	sbcs	r3, r2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07b      	b.n	8002706 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0xaa>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223e      	movs	r2, #62	@ 0x3e
 8002618:	2102      	movs	r1, #2
 800261a:	5499      	strb	r1, [r3, r2]
 800261c:	e023      	b.n	8002666 <HAL_TIM_PWM_Start+0xf2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0xba>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223f      	movs	r2, #63	@ 0x3f
 8002628:	2102      	movs	r1, #2
 800262a:	5499      	strb	r1, [r3, r2]
 800262c:	e01b      	b.n	8002666 <HAL_TIM_PWM_Start+0xf2>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0xca>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2240      	movs	r2, #64	@ 0x40
 8002638:	2102      	movs	r1, #2
 800263a:	5499      	strb	r1, [r3, r2]
 800263c:	e013      	b.n	8002666 <HAL_TIM_PWM_Start+0xf2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0xda>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2241      	movs	r2, #65	@ 0x41
 8002648:	2102      	movs	r1, #2
 800264a:	5499      	strb	r1, [r3, r2]
 800264c:	e00b      	b.n	8002666 <HAL_TIM_PWM_Start+0xf2>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b10      	cmp	r3, #16
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0xea>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2242      	movs	r2, #66	@ 0x42
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]
 800265c:	e003      	b.n	8002666 <HAL_TIM_PWM_Start+0xf2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2243      	movs	r2, #67	@ 0x43
 8002662:	2102      	movs	r1, #2
 8002664:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fdd2 	bl	8003218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a25      	ldr	r2, [pc, #148]	@ (8002710 <HAL_TIM_PWM_Start+0x19c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_TIM_PWM_Start+0x11e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_TIM_PWM_Start+0x1a0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_TIM_PWM_Start+0x11e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_TIM_PWM_Start+0x1a4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PWM_Start+0x122>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_TIM_PWM_Start+0x124>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0209      	lsls	r1, r1, #8
 80026aa:	430a      	orrs	r2, r1
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_TIM_PWM_Start+0x19c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x14e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a17      	ldr	r2, [pc, #92]	@ (800271c <HAL_TIM_PWM_Start+0x1a8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d116      	bne.n	80026f0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <HAL_TIM_PWM_Start+0x1ac>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d016      	beq.n	8002702 <HAL_TIM_PWM_Start+0x18e>
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	429a      	cmp	r2, r3
 80026dc:	d011      	beq.n	8002702 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e008      	b.n	8002702 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2101      	movs	r1, #1
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e000      	b.n	8002704 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40014400 	.word	0x40014400
 8002718:	40014800 	.word	0x40014800
 800271c:	40000400 	.word	0x40000400
 8002720:	00010007 	.word	0x00010007

08002724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	223c      	movs	r2, #60	@ 0x3c
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e0e5      	b.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	223c      	movs	r2, #60	@ 0x3c
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b14      	cmp	r3, #20
 8002752:	d900      	bls.n	8002756 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002754:	e0d1      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	4b70      	ldr	r3, [pc, #448]	@ (800291c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa1c 	bl	8002ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2108      	movs	r1, #8
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
      break;
 80027a2:	e0af      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 fa7b 	bl	8002ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	0109      	lsls	r1, r1, #4
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4954      	ldr	r1, [pc, #336]	@ (8002920 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
      break;
 80027e8:	e08c      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 fad6 	bl	8002da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2108      	movs	r1, #8
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69d9      	ldr	r1, [r3, #28]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	61da      	str	r2, [r3, #28]
      break;
 800282a:	e06b      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fb37 	bl	8002ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0109      	lsls	r1, r1, #4
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4932      	ldr	r1, [pc, #200]	@ (8002920 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002858:	400a      	ands	r2, r1
 800285a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69d9      	ldr	r1, [r3, #28]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
      break;
 8002870:	e048      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f000 fb78 	bl	8002f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2108      	movs	r1, #8
 800288c:	430a      	orrs	r2, r1
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2104      	movs	r1, #4
 800289c:	438a      	bics	r2, r1
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028b2:	e027      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	0011      	movs	r1, r2
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fbb1 	bl	8003024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	0109      	lsls	r1, r1, #4
 80028d0:	430a      	orrs	r2, r1
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4910      	ldr	r1, [pc, #64]	@ (8002920 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028f8:	e004      	b.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80028fa:	2317      	movs	r3, #23
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
      break;
 8002902:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	223c      	movs	r2, #60	@ 0x3c
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

  return status;
 800290c:	2317      	movs	r3, #23
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b006      	add	sp, #24
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	08003520 	.word	0x08003520
 8002920:	fffffbff 	.word	0xfffffbff

08002924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	223c      	movs	r2, #60	@ 0x3c
 800293a:	5c9b      	ldrb	r3, [r3, r2]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIM_ConfigClockSource+0x20>
 8002940:	2302      	movs	r3, #2
 8002942:	e0bc      	b.n	8002abe <HAL_TIM_ConfigClockSource+0x19a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223c      	movs	r2, #60	@ 0x3c
 8002948:	2101      	movs	r1, #1
 800294a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	223d      	movs	r2, #61	@ 0x3d
 8002950:	2102      	movs	r1, #2
 8002952:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a59      	ldr	r2, [pc, #356]	@ (8002acc <HAL_TIM_ConfigClockSource+0x1a8>)
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0192      	lsls	r2, r2, #6
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xde>
 8002980:	2280      	movs	r2, #128	@ 0x80
 8002982:	0192      	lsls	r2, r2, #6
 8002984:	4293      	cmp	r3, r2
 8002986:	d900      	bls.n	800298a <HAL_TIM_ConfigClockSource+0x66>
 8002988:	e088      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	0152      	lsls	r2, r2, #5
 800298e:	4293      	cmp	r3, r2
 8002990:	d100      	bne.n	8002994 <HAL_TIM_ConfigClockSource+0x70>
 8002992:	e088      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x182>
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	0152      	lsls	r2, r2, #5
 8002998:	4293      	cmp	r3, r2
 800299a:	d900      	bls.n	800299e <HAL_TIM_ConfigClockSource+0x7a>
 800299c:	e07e      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 800299e:	2b70      	cmp	r3, #112	@ 0x70
 80029a0:	d018      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0xb0>
 80029a2:	d900      	bls.n	80029a6 <HAL_TIM_ConfigClockSource+0x82>
 80029a4:	e07a      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2b60      	cmp	r3, #96	@ 0x60
 80029a8:	d04f      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x126>
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_ConfigClockSource+0x8a>
 80029ac:	e076      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029ae:	2b50      	cmp	r3, #80	@ 0x50
 80029b0:	d03b      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x106>
 80029b2:	d900      	bls.n	80029b6 <HAL_TIM_ConfigClockSource+0x92>
 80029b4:	e072      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2b40      	cmp	r3, #64	@ 0x40
 80029b8:	d057      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x146>
 80029ba:	d900      	bls.n	80029be <HAL_TIM_ConfigClockSource+0x9a>
 80029bc:	e06e      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029be:	2b30      	cmp	r3, #48	@ 0x30
 80029c0:	d063      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029c2:	d86b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d060      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029c8:	d868      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d05d      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d05b      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029d2:	e063      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	f000 fbf8 	bl	80031d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2277      	movs	r2, #119	@ 0x77
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
      break;
 8002a00:	e052      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	f000 fbe1 	bl	80031d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2180      	movs	r1, #128	@ 0x80
 8002a22:	01c9      	lsls	r1, r1, #7
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
      break;
 8002a28:	e03e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	001a      	movs	r2, r3
 8002a38:	f000 fb52 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2150      	movs	r1, #80	@ 0x50
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fbac 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e02e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	001a      	movs	r2, r3
 8002a58:	f000 fb70 	bl	800313c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2160      	movs	r1, #96	@ 0x60
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fb9c 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e01e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	001a      	movs	r2, r3
 8002a78:	f000 fb32 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2140      	movs	r1, #64	@ 0x40
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fb8c 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e00e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f000 fb83 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
      break;
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002aa6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223d      	movs	r2, #61	@ 0x3d
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223c      	movs	r2, #60	@ 0x3c
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	ffceff88 	.word	0xffceff88
 8002acc:	ffff00ff 	.word	0xffff00ff

08002ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b90 <TIM_Base_SetConfig+0xc0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_Base_SetConfig+0x20>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <TIM_Base_SetConfig+0xc4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2270      	movs	r2, #112	@ 0x70
 8002af4:	4393      	bics	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a22      	ldr	r2, [pc, #136]	@ (8002b90 <TIM_Base_SetConfig+0xc0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0x5a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <TIM_Base_SetConfig+0xc4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0x5a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <TIM_Base_SetConfig+0xc8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x5a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <TIM_Base_SetConfig+0xcc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x5a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <TIM_Base_SetConfig+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <TIM_Base_SetConfig+0xd4>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	4393      	bics	r3, r2
 8002b42:	001a      	movs	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <TIM_Base_SetConfig+0xc0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0xaa>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b9c <TIM_Base_SetConfig+0xcc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xaa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba0 <TIM_Base_SetConfig+0xd0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d103      	bne.n	8002b82 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	615a      	str	r2, [r3, #20]
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40002000 	.word	0x40002000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800
 8002ba4:	fffffcff 	.word	0xfffffcff

08002ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c90 <TIM_OC1_SetConfig+0xe8>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4393      	bics	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a24      	ldr	r2, [pc, #144]	@ (8002c94 <TIM_OC1_SetConfig+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_OC1_SetConfig+0x6e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <TIM_OC1_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC1_SetConfig+0x6e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <TIM_OC1_SetConfig+0xf4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10c      	bne.n	8002c30 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <TIM_OC1_SetConfig+0xec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_OC1_SetConfig+0xa0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <TIM_OC1_SetConfig+0xf0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_OC1_SetConfig+0xa0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <TIM_OC1_SetConfig+0xf4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ca0 <TIM_OC1_SetConfig+0xf8>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <TIM_OC1_SetConfig+0xfc>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	fffeff8f 	.word	0xfffeff8f
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	fffffeff 	.word	0xfffffeff
 8002ca4:	fffffdff 	.word	0xfffffdff

08002ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d88 <TIM_OC2_SetConfig+0xe0>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d8c <TIM_OC2_SetConfig+0xe4>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a22      	ldr	r2, [pc, #136]	@ (8002d90 <TIM_OC2_SetConfig+0xe8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10d      	bne.n	8002d26 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	4393      	bics	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2240      	movs	r2, #64	@ 0x40
 8002d22:	4393      	bics	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <TIM_OC2_SetConfig+0xe8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_OC2_SetConfig+0x96>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <TIM_OC2_SetConfig+0xec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_OC2_SetConfig+0x96>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <TIM_OC2_SetConfig+0xf0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <TIM_OC2_SetConfig+0xf4>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <TIM_OC2_SetConfig+0xf8>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b006      	add	sp, #24
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	feff8fff 	.word	0xfeff8fff
 8002d8c:	fffffcff 	.word	0xfffffcff
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40014400 	.word	0x40014400
 8002d98:	40014800 	.word	0x40014800
 8002d9c:	fffffbff 	.word	0xfffffbff
 8002da0:	fffff7ff 	.word	0xfffff7ff

08002da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a31      	ldr	r2, [pc, #196]	@ (8002e80 <TIM_OC3_SetConfig+0xdc>)
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <TIM_OC3_SetConfig+0xe0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4393      	bics	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4a27      	ldr	r2, [pc, #156]	@ (8002e88 <TIM_OC3_SetConfig+0xe4>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a23      	ldr	r2, [pc, #140]	@ (8002e8c <TIM_OC3_SetConfig+0xe8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10d      	bne.n	8002e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4a22      	ldr	r2, [pc, #136]	@ (8002e90 <TIM_OC3_SetConfig+0xec>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4a1e      	ldr	r2, [pc, #120]	@ (8002e94 <TIM_OC3_SetConfig+0xf0>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1a      	ldr	r2, [pc, #104]	@ (8002e8c <TIM_OC3_SetConfig+0xe8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <TIM_OC3_SetConfig+0x92>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1b      	ldr	r2, [pc, #108]	@ (8002e98 <TIM_OC3_SetConfig+0xf4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_OC3_SetConfig+0x92>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	@ (8002e9c <TIM_OC3_SetConfig+0xf8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d113      	bne.n	8002e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <TIM_OC3_SetConfig+0xfc>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <TIM_OC3_SetConfig+0x100>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b006      	add	sp, #24
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fffffeff 	.word	0xfffffeff
 8002e84:	fffeff8f 	.word	0xfffeff8f
 8002e88:	fffffdff 	.word	0xfffffdff
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	fffff7ff 	.word	0xfffff7ff
 8002e94:	fffffbff 	.word	0xfffffbff
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800
 8002ea0:	ffffefff 	.word	0xffffefff
 8002ea4:	ffffdfff 	.word	0xffffdfff

08002ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <TIM_OC4_SetConfig+0xa8>)
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a20      	ldr	r2, [pc, #128]	@ (8002f54 <TIM_OC4_SetConfig+0xac>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	@ (8002f58 <TIM_OC4_SetConfig+0xb0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <TIM_OC4_SetConfig+0xb4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	031b      	lsls	r3, r3, #12
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a17      	ldr	r2, [pc, #92]	@ (8002f60 <TIM_OC4_SetConfig+0xb8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <TIM_OC4_SetConfig+0x70>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <TIM_OC4_SetConfig+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_OC4_SetConfig+0x70>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <TIM_OC4_SetConfig+0xc0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d109      	bne.n	8002f2c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <TIM_OC4_SetConfig+0xc4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b006      	add	sp, #24
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	ffffefff 	.word	0xffffefff
 8002f54:	feff8fff 	.word	0xfeff8fff
 8002f58:	fffffcff 	.word	0xfffffcff
 8002f5c:	ffffdfff 	.word	0xffffdfff
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40014400 	.word	0x40014400
 8002f68:	40014800 	.word	0x40014800
 8002f6c:	ffffbfff 	.word	0xffffbfff

08002f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a21      	ldr	r2, [pc, #132]	@ (800300c <TIM_OC5_SetConfig+0x9c>)
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003010 <TIM_OC5_SetConfig+0xa0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <TIM_OC5_SetConfig+0xa4>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <TIM_OC5_SetConfig+0xa8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_OC5_SetConfig+0x66>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <TIM_OC5_SetConfig+0xac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC5_SetConfig+0x66>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <TIM_OC5_SetConfig+0xb0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d109      	bne.n	8002fea <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800300c <TIM_OC5_SetConfig+0x9c>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	fffeffff 	.word	0xfffeffff
 8003010:	fffeff8f 	.word	0xfffeff8f
 8003014:	fffdffff 	.word	0xfffdffff
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800

08003024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <TIM_OC6_SetConfig+0xa0>)
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <TIM_OC6_SetConfig+0xa4>)
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <TIM_OC6_SetConfig+0xa8>)
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	051b      	lsls	r3, r3, #20
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <TIM_OC6_SetConfig+0xac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_OC6_SetConfig+0x68>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <TIM_OC6_SetConfig+0xb0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_OC6_SetConfig+0x68>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a14      	ldr	r2, [pc, #80]	@ (80030d8 <TIM_OC6_SetConfig+0xb4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a13      	ldr	r2, [pc, #76]	@ (80030dc <TIM_OC6_SetConfig+0xb8>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	029b      	lsls	r3, r3, #10
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b006      	add	sp, #24
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	ffefffff 	.word	0xffefffff
 80030c8:	feff8fff 	.word	0xfeff8fff
 80030cc:	ffdfffff 	.word	0xffdfffff
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800
 80030dc:	fffbffff 	.word	0xfffbffff

080030e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4393      	bics	r3, r2
 80030fa:	001a      	movs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	22f0      	movs	r2, #240	@ 0xf0
 800310a:	4393      	bics	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	220a      	movs	r2, #10
 800311c:	4393      	bics	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2210      	movs	r2, #16
 8003154:	4393      	bics	r3, r2
 8003156:	001a      	movs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <TIM_TI2_ConfigInputStage+0x60>)
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	22a0      	movs	r2, #160	@ 0xa0
 8003178:	4393      	bics	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	ffff0fff 	.word	0xffff0fff

080031a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <TIM_ITRx_SetConfig+0x34>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	2207      	movs	r2, #7
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	609a      	str	r2, [r3, #8]
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	ffcfff8f 	.word	0xffcfff8f

080031d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <TIM_ETR_SetConfig+0x3c>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	46c0      	nop			@ (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b006      	add	sp, #24
 8003212:	bd80      	pop	{r7, pc}
 8003214:	ffff00ff 	.word	0xffff00ff

08003218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	221f      	movs	r2, #31
 8003228:	4013      	ands	r3, r2
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	43d2      	mvns	r2, r2
 800323a:	401a      	ands	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	211f      	movs	r1, #31
 8003248:	400b      	ands	r3, r1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4099      	lsls	r1, r3
 800324e:	000b      	movs	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b006      	add	sp, #24
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	223c      	movs	r2, #60	@ 0x3c
 800326e:	5c9b      	ldrb	r3, [r3, r2]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003274:	2302      	movs	r3, #2
 8003276:	e04a      	b.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	223c      	movs	r2, #60	@ 0x3c
 800327c:	2101      	movs	r1, #1
 800327e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	223d      	movs	r2, #61	@ 0x3d
 8003284:	2102      	movs	r1, #2
 8003286:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2270      	movs	r2, #112	@ 0x70
 80032b8:	4393      	bics	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a10      	ldr	r2, [pc, #64]	@ (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	4393      	bics	r3, r2
 80032e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	223d      	movs	r2, #61	@ 0x3d
 8003300:	2101      	movs	r1, #1
 8003302:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	223c      	movs	r2, #60	@ 0x3c
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	40012c00 	.word	0x40012c00
 800331c:	ff0fffff 	.word	0xff0fffff
 8003320:	40000400 	.word	0x40000400

08003324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223c      	movs	r2, #60	@ 0x3c
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800333c:	2302      	movs	r3, #2
 800333e:	e079      	b.n	8003434 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223c      	movs	r2, #60	@ 0x3c
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	4393      	bics	r3, r2
 800334e:	001a      	movs	r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a38      	ldr	r2, [pc, #224]	@ (800343c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800335c:	401a      	ands	r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a35      	ldr	r2, [pc, #212]	@ (8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800336a:	401a      	ands	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a33      	ldr	r2, [pc, #204]	@ (8003444 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003378:	401a      	ands	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a30      	ldr	r2, [pc, #192]	@ (8003448 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003386:	401a      	ands	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003394:	401a      	ands	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003450 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80033a2:	401a      	ands	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80033b0:	401a      	ands	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a25      	ldr	r2, [pc, #148]	@ (8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d106      	bne.n	80033d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a24      	ldr	r2, [pc, #144]	@ (800345c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80033ca:	401a      	ands	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d121      	bne.n	8003422 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80033e2:	401a      	ands	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	051b      	lsls	r3, r3, #20
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003464 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80033f2:	401a      	ands	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003468 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003400:	401a      	ands	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d106      	bne.n	8003422 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a15      	ldr	r2, [pc, #84]	@ (800346c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003418:	401a      	ands	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223c      	movs	r2, #60	@ 0x3c
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	fffffcff 	.word	0xfffffcff
 8003440:	fffffbff 	.word	0xfffffbff
 8003444:	fffff7ff 	.word	0xfffff7ff
 8003448:	ffffefff 	.word	0xffffefff
 800344c:	ffffdfff 	.word	0xffffdfff
 8003450:	ffffbfff 	.word	0xffffbfff
 8003454:	fff0ffff 	.word	0xfff0ffff
 8003458:	40012c00 	.word	0x40012c00
 800345c:	efffffff 	.word	0xefffffff
 8003460:	ff0fffff 	.word	0xff0fffff
 8003464:	feffffff 	.word	0xfeffffff
 8003468:	fdffffff 	.word	0xfdffffff
 800346c:	dfffffff 	.word	0xdfffffff

08003470 <memset>:
 8003470:	0003      	movs	r3, r0
 8003472:	1882      	adds	r2, r0, r2
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	7019      	strb	r1, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	2600      	movs	r6, #0
 8003484:	4c0c      	ldr	r4, [pc, #48]	@ (80034b8 <__libc_init_array+0x38>)
 8003486:	4d0d      	ldr	r5, [pc, #52]	@ (80034bc <__libc_init_array+0x3c>)
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	2600      	movs	r6, #0
 8003492:	f000 f819 	bl	80034c8 <_init>
 8003496:	4c0a      	ldr	r4, [pc, #40]	@ (80034c0 <__libc_init_array+0x40>)
 8003498:	4d0a      	ldr	r5, [pc, #40]	@ (80034c4 <__libc_init_array+0x44>)
 800349a:	1b64      	subs	r4, r4, r5
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	00b3      	lsls	r3, r6, #2
 80034a6:	58eb      	ldr	r3, [r5, r3]
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	00b3      	lsls	r3, r6, #2
 80034b0:	58eb      	ldr	r3, [r5, r3]
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	08003574 	.word	0x08003574
 80034bc:	08003574 	.word	0x08003574
 80034c0:	08003578 	.word	0x08003578
 80034c4:	08003574 	.word	0x08003574

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
