
SensorTemperaturaInterno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006b8c  08006b8c  00007b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d1c  08006d1c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d1c  08006d1c  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d1c  08006d1c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00007d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006d24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  08006d80  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006d80  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e2c  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267a  00000000  00000000  00019eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  0001d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154a9  00000000  00000000  0001e221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013470  00000000  00000000  000336ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e37  00000000  00000000  00046b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000426c  00000000  00000000  000cf9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d3c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006b74 	.word	0x08006b74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006b74 	.word	0x08006b74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_fdiv>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	464f      	mov	r7, r9
 800041c:	4646      	mov	r6, r8
 800041e:	46d6      	mov	lr, sl
 8000420:	0244      	lsls	r4, r0, #9
 8000422:	b5c0      	push	{r6, r7, lr}
 8000424:	0047      	lsls	r7, r0, #1
 8000426:	1c0e      	adds	r6, r1, #0
 8000428:	0a64      	lsrs	r4, r4, #9
 800042a:	0e3f      	lsrs	r7, r7, #24
 800042c:	0fc5      	lsrs	r5, r0, #31
 800042e:	2f00      	cmp	r7, #0
 8000430:	d03c      	beq.n	80004ac <__aeabi_fdiv+0x94>
 8000432:	2fff      	cmp	r7, #255	@ 0xff
 8000434:	d042      	beq.n	80004bc <__aeabi_fdiv+0xa4>
 8000436:	2300      	movs	r3, #0
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	4699      	mov	r9, r3
 800043c:	469a      	mov	sl, r3
 800043e:	00e4      	lsls	r4, r4, #3
 8000440:	04d2      	lsls	r2, r2, #19
 8000442:	4314      	orrs	r4, r2
 8000444:	3f7f      	subs	r7, #127	@ 0x7f
 8000446:	0273      	lsls	r3, r6, #9
 8000448:	0a5b      	lsrs	r3, r3, #9
 800044a:	4698      	mov	r8, r3
 800044c:	0073      	lsls	r3, r6, #1
 800044e:	0e1b      	lsrs	r3, r3, #24
 8000450:	0ff6      	lsrs	r6, r6, #31
 8000452:	2b00      	cmp	r3, #0
 8000454:	d01b      	beq.n	800048e <__aeabi_fdiv+0x76>
 8000456:	2bff      	cmp	r3, #255	@ 0xff
 8000458:	d013      	beq.n	8000482 <__aeabi_fdiv+0x6a>
 800045a:	4642      	mov	r2, r8
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	00d2      	lsls	r2, r2, #3
 8000460:	04c9      	lsls	r1, r1, #19
 8000462:	4311      	orrs	r1, r2
 8000464:	4688      	mov	r8, r1
 8000466:	2000      	movs	r0, #0
 8000468:	3b7f      	subs	r3, #127	@ 0x7f
 800046a:	0029      	movs	r1, r5
 800046c:	1aff      	subs	r7, r7, r3
 800046e:	464b      	mov	r3, r9
 8000470:	4071      	eors	r1, r6
 8000472:	b2c9      	uxtb	r1, r1
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d900      	bls.n	800047a <__aeabi_fdiv+0x62>
 8000478:	e0b5      	b.n	80005e6 <__aeabi_fdiv+0x1ce>
 800047a:	4a74      	ldr	r2, [pc, #464]	@ (800064c <__aeabi_fdiv+0x234>)
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	58d3      	ldr	r3, [r2, r3]
 8000480:	469f      	mov	pc, r3
 8000482:	4643      	mov	r3, r8
 8000484:	2b00      	cmp	r3, #0
 8000486:	d13f      	bne.n	8000508 <__aeabi_fdiv+0xf0>
 8000488:	3fff      	subs	r7, #255	@ 0xff
 800048a:	3302      	adds	r3, #2
 800048c:	e003      	b.n	8000496 <__aeabi_fdiv+0x7e>
 800048e:	4643      	mov	r3, r8
 8000490:	2b00      	cmp	r3, #0
 8000492:	d12d      	bne.n	80004f0 <__aeabi_fdiv+0xd8>
 8000494:	2301      	movs	r3, #1
 8000496:	0029      	movs	r1, r5
 8000498:	464a      	mov	r2, r9
 800049a:	4071      	eors	r1, r6
 800049c:	b2c9      	uxtb	r1, r1
 800049e:	431a      	orrs	r2, r3
 80004a0:	2a0e      	cmp	r2, #14
 80004a2:	d838      	bhi.n	8000516 <__aeabi_fdiv+0xfe>
 80004a4:	486a      	ldr	r0, [pc, #424]	@ (8000650 <__aeabi_fdiv+0x238>)
 80004a6:	0092      	lsls	r2, r2, #2
 80004a8:	5882      	ldr	r2, [r0, r2]
 80004aa:	4697      	mov	pc, r2
 80004ac:	2c00      	cmp	r4, #0
 80004ae:	d113      	bne.n	80004d8 <__aeabi_fdiv+0xc0>
 80004b0:	2304      	movs	r3, #4
 80004b2:	4699      	mov	r9, r3
 80004b4:	3b03      	subs	r3, #3
 80004b6:	2700      	movs	r7, #0
 80004b8:	469a      	mov	sl, r3
 80004ba:	e7c4      	b.n	8000446 <__aeabi_fdiv+0x2e>
 80004bc:	2c00      	cmp	r4, #0
 80004be:	d105      	bne.n	80004cc <__aeabi_fdiv+0xb4>
 80004c0:	2308      	movs	r3, #8
 80004c2:	4699      	mov	r9, r3
 80004c4:	3b06      	subs	r3, #6
 80004c6:	27ff      	movs	r7, #255	@ 0xff
 80004c8:	469a      	mov	sl, r3
 80004ca:	e7bc      	b.n	8000446 <__aeabi_fdiv+0x2e>
 80004cc:	230c      	movs	r3, #12
 80004ce:	4699      	mov	r9, r3
 80004d0:	3b09      	subs	r3, #9
 80004d2:	27ff      	movs	r7, #255	@ 0xff
 80004d4:	469a      	mov	sl, r3
 80004d6:	e7b6      	b.n	8000446 <__aeabi_fdiv+0x2e>
 80004d8:	0020      	movs	r0, r4
 80004da:	f001 fe87 	bl	80021ec <__clzsi2>
 80004de:	2776      	movs	r7, #118	@ 0x76
 80004e0:	1f43      	subs	r3, r0, #5
 80004e2:	409c      	lsls	r4, r3
 80004e4:	2300      	movs	r3, #0
 80004e6:	427f      	negs	r7, r7
 80004e8:	4699      	mov	r9, r3
 80004ea:	469a      	mov	sl, r3
 80004ec:	1a3f      	subs	r7, r7, r0
 80004ee:	e7aa      	b.n	8000446 <__aeabi_fdiv+0x2e>
 80004f0:	4640      	mov	r0, r8
 80004f2:	f001 fe7b 	bl	80021ec <__clzsi2>
 80004f6:	4642      	mov	r2, r8
 80004f8:	1f43      	subs	r3, r0, #5
 80004fa:	409a      	lsls	r2, r3
 80004fc:	2376      	movs	r3, #118	@ 0x76
 80004fe:	425b      	negs	r3, r3
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	4690      	mov	r8, r2
 8000504:	2000      	movs	r0, #0
 8000506:	e7b0      	b.n	800046a <__aeabi_fdiv+0x52>
 8000508:	2303      	movs	r3, #3
 800050a:	464a      	mov	r2, r9
 800050c:	431a      	orrs	r2, r3
 800050e:	4691      	mov	r9, r2
 8000510:	2003      	movs	r0, #3
 8000512:	33fc      	adds	r3, #252	@ 0xfc
 8000514:	e7a9      	b.n	800046a <__aeabi_fdiv+0x52>
 8000516:	000d      	movs	r5, r1
 8000518:	20ff      	movs	r0, #255	@ 0xff
 800051a:	2200      	movs	r2, #0
 800051c:	05c0      	lsls	r0, r0, #23
 800051e:	07ed      	lsls	r5, r5, #31
 8000520:	4310      	orrs	r0, r2
 8000522:	4328      	orrs	r0, r5
 8000524:	bce0      	pop	{r5, r6, r7}
 8000526:	46ba      	mov	sl, r7
 8000528:	46b1      	mov	r9, r6
 800052a:	46a8      	mov	r8, r5
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	000d      	movs	r5, r1
 8000530:	2000      	movs	r0, #0
 8000532:	2200      	movs	r2, #0
 8000534:	e7f2      	b.n	800051c <__aeabi_fdiv+0x104>
 8000536:	4653      	mov	r3, sl
 8000538:	2b02      	cmp	r3, #2
 800053a:	d0ed      	beq.n	8000518 <__aeabi_fdiv+0x100>
 800053c:	2b03      	cmp	r3, #3
 800053e:	d033      	beq.n	80005a8 <__aeabi_fdiv+0x190>
 8000540:	46a0      	mov	r8, r4
 8000542:	2b01      	cmp	r3, #1
 8000544:	d105      	bne.n	8000552 <__aeabi_fdiv+0x13a>
 8000546:	2000      	movs	r0, #0
 8000548:	2200      	movs	r2, #0
 800054a:	e7e7      	b.n	800051c <__aeabi_fdiv+0x104>
 800054c:	0035      	movs	r5, r6
 800054e:	2803      	cmp	r0, #3
 8000550:	d07a      	beq.n	8000648 <__aeabi_fdiv+0x230>
 8000552:	003b      	movs	r3, r7
 8000554:	337f      	adds	r3, #127	@ 0x7f
 8000556:	2b00      	cmp	r3, #0
 8000558:	dd2d      	ble.n	80005b6 <__aeabi_fdiv+0x19e>
 800055a:	4642      	mov	r2, r8
 800055c:	0752      	lsls	r2, r2, #29
 800055e:	d007      	beq.n	8000570 <__aeabi_fdiv+0x158>
 8000560:	220f      	movs	r2, #15
 8000562:	4641      	mov	r1, r8
 8000564:	400a      	ands	r2, r1
 8000566:	2a04      	cmp	r2, #4
 8000568:	d002      	beq.n	8000570 <__aeabi_fdiv+0x158>
 800056a:	2204      	movs	r2, #4
 800056c:	4694      	mov	ip, r2
 800056e:	44e0      	add	r8, ip
 8000570:	4642      	mov	r2, r8
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	d505      	bpl.n	8000582 <__aeabi_fdiv+0x16a>
 8000576:	4642      	mov	r2, r8
 8000578:	4b36      	ldr	r3, [pc, #216]	@ (8000654 <__aeabi_fdiv+0x23c>)
 800057a:	401a      	ands	r2, r3
 800057c:	003b      	movs	r3, r7
 800057e:	4690      	mov	r8, r2
 8000580:	3380      	adds	r3, #128	@ 0x80
 8000582:	2bfe      	cmp	r3, #254	@ 0xfe
 8000584:	dcc8      	bgt.n	8000518 <__aeabi_fdiv+0x100>
 8000586:	4642      	mov	r2, r8
 8000588:	0192      	lsls	r2, r2, #6
 800058a:	0a52      	lsrs	r2, r2, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e7c5      	b.n	800051c <__aeabi_fdiv+0x104>
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	2500      	movs	r5, #0
 8000594:	20ff      	movs	r0, #255	@ 0xff
 8000596:	03d2      	lsls	r2, r2, #15
 8000598:	e7c0      	b.n	800051c <__aeabi_fdiv+0x104>
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	03d2      	lsls	r2, r2, #15
 800059e:	4214      	tst	r4, r2
 80005a0:	d002      	beq.n	80005a8 <__aeabi_fdiv+0x190>
 80005a2:	4643      	mov	r3, r8
 80005a4:	4213      	tst	r3, r2
 80005a6:	d049      	beq.n	800063c <__aeabi_fdiv+0x224>
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	03d2      	lsls	r2, r2, #15
 80005ac:	4322      	orrs	r2, r4
 80005ae:	0252      	lsls	r2, r2, #9
 80005b0:	20ff      	movs	r0, #255	@ 0xff
 80005b2:	0a52      	lsrs	r2, r2, #9
 80005b4:	e7b2      	b.n	800051c <__aeabi_fdiv+0x104>
 80005b6:	2201      	movs	r2, #1
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2b1b      	cmp	r3, #27
 80005bc:	dcc3      	bgt.n	8000546 <__aeabi_fdiv+0x12e>
 80005be:	4642      	mov	r2, r8
 80005c0:	40da      	lsrs	r2, r3
 80005c2:	4643      	mov	r3, r8
 80005c4:	379e      	adds	r7, #158	@ 0x9e
 80005c6:	40bb      	lsls	r3, r7
 80005c8:	1e59      	subs	r1, r3, #1
 80005ca:	418b      	sbcs	r3, r1
 80005cc:	431a      	orrs	r2, r3
 80005ce:	0753      	lsls	r3, r2, #29
 80005d0:	d004      	beq.n	80005dc <__aeabi_fdiv+0x1c4>
 80005d2:	230f      	movs	r3, #15
 80005d4:	4013      	ands	r3, r2
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d000      	beq.n	80005dc <__aeabi_fdiv+0x1c4>
 80005da:	3204      	adds	r2, #4
 80005dc:	0153      	lsls	r3, r2, #5
 80005de:	d529      	bpl.n	8000634 <__aeabi_fdiv+0x21c>
 80005e0:	2001      	movs	r0, #1
 80005e2:	2200      	movs	r2, #0
 80005e4:	e79a      	b.n	800051c <__aeabi_fdiv+0x104>
 80005e6:	4642      	mov	r2, r8
 80005e8:	0163      	lsls	r3, r4, #5
 80005ea:	0155      	lsls	r5, r2, #5
 80005ec:	42ab      	cmp	r3, r5
 80005ee:	d215      	bcs.n	800061c <__aeabi_fdiv+0x204>
 80005f0:	201b      	movs	r0, #27
 80005f2:	2200      	movs	r2, #0
 80005f4:	3f01      	subs	r7, #1
 80005f6:	2601      	movs	r6, #1
 80005f8:	001c      	movs	r4, r3
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2c00      	cmp	r4, #0
 8000600:	db01      	blt.n	8000606 <__aeabi_fdiv+0x1ee>
 8000602:	429d      	cmp	r5, r3
 8000604:	d801      	bhi.n	800060a <__aeabi_fdiv+0x1f2>
 8000606:	1b5b      	subs	r3, r3, r5
 8000608:	4332      	orrs	r2, r6
 800060a:	3801      	subs	r0, #1
 800060c:	2800      	cmp	r0, #0
 800060e:	d1f3      	bne.n	80005f8 <__aeabi_fdiv+0x1e0>
 8000610:	1e58      	subs	r0, r3, #1
 8000612:	4183      	sbcs	r3, r0
 8000614:	4313      	orrs	r3, r2
 8000616:	4698      	mov	r8, r3
 8000618:	000d      	movs	r5, r1
 800061a:	e79a      	b.n	8000552 <__aeabi_fdiv+0x13a>
 800061c:	201a      	movs	r0, #26
 800061e:	2201      	movs	r2, #1
 8000620:	1b5b      	subs	r3, r3, r5
 8000622:	e7e8      	b.n	80005f6 <__aeabi_fdiv+0x1de>
 8000624:	3b02      	subs	r3, #2
 8000626:	425a      	negs	r2, r3
 8000628:	4153      	adcs	r3, r2
 800062a:	425b      	negs	r3, r3
 800062c:	0035      	movs	r5, r6
 800062e:	2200      	movs	r2, #0
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	e773      	b.n	800051c <__aeabi_fdiv+0x104>
 8000634:	0192      	lsls	r2, r2, #6
 8000636:	2000      	movs	r0, #0
 8000638:	0a52      	lsrs	r2, r2, #9
 800063a:	e76f      	b.n	800051c <__aeabi_fdiv+0x104>
 800063c:	431a      	orrs	r2, r3
 800063e:	0252      	lsls	r2, r2, #9
 8000640:	0035      	movs	r5, r6
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	e769      	b.n	800051c <__aeabi_fdiv+0x104>
 8000648:	4644      	mov	r4, r8
 800064a:	e7ad      	b.n	80005a8 <__aeabi_fdiv+0x190>
 800064c:	08006ba4 	.word	0x08006ba4
 8000650:	08006be4 	.word	0x08006be4
 8000654:	f7ffffff 	.word	0xf7ffffff

08000658 <__aeabi_fmul>:
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	464f      	mov	r7, r9
 800065c:	4646      	mov	r6, r8
 800065e:	46d6      	mov	lr, sl
 8000660:	0243      	lsls	r3, r0, #9
 8000662:	0a5b      	lsrs	r3, r3, #9
 8000664:	0045      	lsls	r5, r0, #1
 8000666:	b5c0      	push	{r6, r7, lr}
 8000668:	4699      	mov	r9, r3
 800066a:	1c0f      	adds	r7, r1, #0
 800066c:	0e2d      	lsrs	r5, r5, #24
 800066e:	0fc6      	lsrs	r6, r0, #31
 8000670:	2d00      	cmp	r5, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fmul+0x1e>
 8000674:	e088      	b.n	8000788 <__aeabi_fmul+0x130>
 8000676:	2dff      	cmp	r5, #255	@ 0xff
 8000678:	d100      	bne.n	800067c <__aeabi_fmul+0x24>
 800067a:	e08d      	b.n	8000798 <__aeabi_fmul+0x140>
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	04d2      	lsls	r2, r2, #19
 8000682:	431a      	orrs	r2, r3
 8000684:	2300      	movs	r3, #0
 8000686:	4691      	mov	r9, r2
 8000688:	4698      	mov	r8, r3
 800068a:	469a      	mov	sl, r3
 800068c:	3d7f      	subs	r5, #127	@ 0x7f
 800068e:	027c      	lsls	r4, r7, #9
 8000690:	007b      	lsls	r3, r7, #1
 8000692:	0a64      	lsrs	r4, r4, #9
 8000694:	0e1b      	lsrs	r3, r3, #24
 8000696:	0fff      	lsrs	r7, r7, #31
 8000698:	2b00      	cmp	r3, #0
 800069a:	d068      	beq.n	800076e <__aeabi_fmul+0x116>
 800069c:	2bff      	cmp	r3, #255	@ 0xff
 800069e:	d021      	beq.n	80006e4 <__aeabi_fmul+0x8c>
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	00e4      	lsls	r4, r4, #3
 80006a4:	04d2      	lsls	r2, r2, #19
 80006a6:	4314      	orrs	r4, r2
 80006a8:	4642      	mov	r2, r8
 80006aa:	3b7f      	subs	r3, #127	@ 0x7f
 80006ac:	195b      	adds	r3, r3, r5
 80006ae:	2100      	movs	r1, #0
 80006b0:	1c5d      	adds	r5, r3, #1
 80006b2:	2a0a      	cmp	r2, #10
 80006b4:	dc2e      	bgt.n	8000714 <__aeabi_fmul+0xbc>
 80006b6:	407e      	eors	r6, r7
 80006b8:	4642      	mov	r2, r8
 80006ba:	2a02      	cmp	r2, #2
 80006bc:	dc23      	bgt.n	8000706 <__aeabi_fmul+0xae>
 80006be:	3a01      	subs	r2, #1
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d900      	bls.n	80006c6 <__aeabi_fmul+0x6e>
 80006c4:	e0bd      	b.n	8000842 <__aeabi_fmul+0x1ea>
 80006c6:	2902      	cmp	r1, #2
 80006c8:	d06e      	beq.n	80007a8 <__aeabi_fmul+0x150>
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d12c      	bne.n	8000728 <__aeabi_fmul+0xd0>
 80006ce:	2000      	movs	r0, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	05c0      	lsls	r0, r0, #23
 80006d4:	07f6      	lsls	r6, r6, #31
 80006d6:	4310      	orrs	r0, r2
 80006d8:	4330      	orrs	r0, r6
 80006da:	bce0      	pop	{r5, r6, r7}
 80006dc:	46ba      	mov	sl, r7
 80006de:	46b1      	mov	r9, r6
 80006e0:	46a8      	mov	r8, r5
 80006e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e4:	002b      	movs	r3, r5
 80006e6:	33ff      	adds	r3, #255	@ 0xff
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d065      	beq.n	80007b8 <__aeabi_fmul+0x160>
 80006ec:	2203      	movs	r2, #3
 80006ee:	4641      	mov	r1, r8
 80006f0:	4311      	orrs	r1, r2
 80006f2:	0032      	movs	r2, r6
 80006f4:	3501      	adds	r5, #1
 80006f6:	4688      	mov	r8, r1
 80006f8:	407a      	eors	r2, r7
 80006fa:	35ff      	adds	r5, #255	@ 0xff
 80006fc:	290a      	cmp	r1, #10
 80006fe:	dd00      	ble.n	8000702 <__aeabi_fmul+0xaa>
 8000700:	e0d8      	b.n	80008b4 <__aeabi_fmul+0x25c>
 8000702:	0016      	movs	r6, r2
 8000704:	2103      	movs	r1, #3
 8000706:	4640      	mov	r0, r8
 8000708:	2201      	movs	r2, #1
 800070a:	4082      	lsls	r2, r0
 800070c:	20a6      	movs	r0, #166	@ 0xa6
 800070e:	00c0      	lsls	r0, r0, #3
 8000710:	4202      	tst	r2, r0
 8000712:	d020      	beq.n	8000756 <__aeabi_fmul+0xfe>
 8000714:	4653      	mov	r3, sl
 8000716:	2b02      	cmp	r3, #2
 8000718:	d046      	beq.n	80007a8 <__aeabi_fmul+0x150>
 800071a:	2b03      	cmp	r3, #3
 800071c:	d100      	bne.n	8000720 <__aeabi_fmul+0xc8>
 800071e:	e0bb      	b.n	8000898 <__aeabi_fmul+0x240>
 8000720:	4651      	mov	r1, sl
 8000722:	464c      	mov	r4, r9
 8000724:	2901      	cmp	r1, #1
 8000726:	d0d2      	beq.n	80006ce <__aeabi_fmul+0x76>
 8000728:	002b      	movs	r3, r5
 800072a:	337f      	adds	r3, #127	@ 0x7f
 800072c:	2b00      	cmp	r3, #0
 800072e:	dd70      	ble.n	8000812 <__aeabi_fmul+0x1ba>
 8000730:	0762      	lsls	r2, r4, #29
 8000732:	d004      	beq.n	800073e <__aeabi_fmul+0xe6>
 8000734:	220f      	movs	r2, #15
 8000736:	4022      	ands	r2, r4
 8000738:	2a04      	cmp	r2, #4
 800073a:	d000      	beq.n	800073e <__aeabi_fmul+0xe6>
 800073c:	3404      	adds	r4, #4
 800073e:	0122      	lsls	r2, r4, #4
 8000740:	d503      	bpl.n	800074a <__aeabi_fmul+0xf2>
 8000742:	4b63      	ldr	r3, [pc, #396]	@ (80008d0 <__aeabi_fmul+0x278>)
 8000744:	401c      	ands	r4, r3
 8000746:	002b      	movs	r3, r5
 8000748:	3380      	adds	r3, #128	@ 0x80
 800074a:	2bfe      	cmp	r3, #254	@ 0xfe
 800074c:	dc2c      	bgt.n	80007a8 <__aeabi_fmul+0x150>
 800074e:	01a2      	lsls	r2, r4, #6
 8000750:	0a52      	lsrs	r2, r2, #9
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	e7bd      	b.n	80006d2 <__aeabi_fmul+0x7a>
 8000756:	2090      	movs	r0, #144	@ 0x90
 8000758:	0080      	lsls	r0, r0, #2
 800075a:	4202      	tst	r2, r0
 800075c:	d127      	bne.n	80007ae <__aeabi_fmul+0x156>
 800075e:	38b9      	subs	r0, #185	@ 0xb9
 8000760:	38ff      	subs	r0, #255	@ 0xff
 8000762:	4210      	tst	r0, r2
 8000764:	d06d      	beq.n	8000842 <__aeabi_fmul+0x1ea>
 8000766:	003e      	movs	r6, r7
 8000768:	46a1      	mov	r9, r4
 800076a:	468a      	mov	sl, r1
 800076c:	e7d2      	b.n	8000714 <__aeabi_fmul+0xbc>
 800076e:	2c00      	cmp	r4, #0
 8000770:	d141      	bne.n	80007f6 <__aeabi_fmul+0x19e>
 8000772:	2301      	movs	r3, #1
 8000774:	4642      	mov	r2, r8
 8000776:	431a      	orrs	r2, r3
 8000778:	4690      	mov	r8, r2
 800077a:	002b      	movs	r3, r5
 800077c:	4642      	mov	r2, r8
 800077e:	2101      	movs	r1, #1
 8000780:	1c5d      	adds	r5, r3, #1
 8000782:	2a0a      	cmp	r2, #10
 8000784:	dd97      	ble.n	80006b6 <__aeabi_fmul+0x5e>
 8000786:	e7c5      	b.n	8000714 <__aeabi_fmul+0xbc>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d126      	bne.n	80007da <__aeabi_fmul+0x182>
 800078c:	2304      	movs	r3, #4
 800078e:	4698      	mov	r8, r3
 8000790:	3b03      	subs	r3, #3
 8000792:	2500      	movs	r5, #0
 8000794:	469a      	mov	sl, r3
 8000796:	e77a      	b.n	800068e <__aeabi_fmul+0x36>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d118      	bne.n	80007ce <__aeabi_fmul+0x176>
 800079c:	2308      	movs	r3, #8
 800079e:	4698      	mov	r8, r3
 80007a0:	3b06      	subs	r3, #6
 80007a2:	25ff      	movs	r5, #255	@ 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e772      	b.n	800068e <__aeabi_fmul+0x36>
 80007a8:	20ff      	movs	r0, #255	@ 0xff
 80007aa:	2200      	movs	r2, #0
 80007ac:	e791      	b.n	80006d2 <__aeabi_fmul+0x7a>
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	2600      	movs	r6, #0
 80007b2:	20ff      	movs	r0, #255	@ 0xff
 80007b4:	03d2      	lsls	r2, r2, #15
 80007b6:	e78c      	b.n	80006d2 <__aeabi_fmul+0x7a>
 80007b8:	4641      	mov	r1, r8
 80007ba:	2202      	movs	r2, #2
 80007bc:	3501      	adds	r5, #1
 80007be:	4311      	orrs	r1, r2
 80007c0:	4688      	mov	r8, r1
 80007c2:	35ff      	adds	r5, #255	@ 0xff
 80007c4:	290a      	cmp	r1, #10
 80007c6:	dca5      	bgt.n	8000714 <__aeabi_fmul+0xbc>
 80007c8:	2102      	movs	r1, #2
 80007ca:	407e      	eors	r6, r7
 80007cc:	e774      	b.n	80006b8 <__aeabi_fmul+0x60>
 80007ce:	230c      	movs	r3, #12
 80007d0:	4698      	mov	r8, r3
 80007d2:	3b09      	subs	r3, #9
 80007d4:	25ff      	movs	r5, #255	@ 0xff
 80007d6:	469a      	mov	sl, r3
 80007d8:	e759      	b.n	800068e <__aeabi_fmul+0x36>
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fd06 	bl	80021ec <__clzsi2>
 80007e0:	464a      	mov	r2, r9
 80007e2:	1f43      	subs	r3, r0, #5
 80007e4:	2576      	movs	r5, #118	@ 0x76
 80007e6:	409a      	lsls	r2, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	426d      	negs	r5, r5
 80007ec:	4691      	mov	r9, r2
 80007ee:	4698      	mov	r8, r3
 80007f0:	469a      	mov	sl, r3
 80007f2:	1a2d      	subs	r5, r5, r0
 80007f4:	e74b      	b.n	800068e <__aeabi_fmul+0x36>
 80007f6:	0020      	movs	r0, r4
 80007f8:	f001 fcf8 	bl	80021ec <__clzsi2>
 80007fc:	4642      	mov	r2, r8
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	409c      	lsls	r4, r3
 8000802:	1a2b      	subs	r3, r5, r0
 8000804:	3b76      	subs	r3, #118	@ 0x76
 8000806:	2100      	movs	r1, #0
 8000808:	1c5d      	adds	r5, r3, #1
 800080a:	2a0a      	cmp	r2, #10
 800080c:	dc00      	bgt.n	8000810 <__aeabi_fmul+0x1b8>
 800080e:	e752      	b.n	80006b6 <__aeabi_fmul+0x5e>
 8000810:	e780      	b.n	8000714 <__aeabi_fmul+0xbc>
 8000812:	2201      	movs	r2, #1
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b1b      	cmp	r3, #27
 8000818:	dd00      	ble.n	800081c <__aeabi_fmul+0x1c4>
 800081a:	e758      	b.n	80006ce <__aeabi_fmul+0x76>
 800081c:	359e      	adds	r5, #158	@ 0x9e
 800081e:	0022      	movs	r2, r4
 8000820:	40ac      	lsls	r4, r5
 8000822:	40da      	lsrs	r2, r3
 8000824:	1e63      	subs	r3, r4, #1
 8000826:	419c      	sbcs	r4, r3
 8000828:	4322      	orrs	r2, r4
 800082a:	0753      	lsls	r3, r2, #29
 800082c:	d004      	beq.n	8000838 <__aeabi_fmul+0x1e0>
 800082e:	230f      	movs	r3, #15
 8000830:	4013      	ands	r3, r2
 8000832:	2b04      	cmp	r3, #4
 8000834:	d000      	beq.n	8000838 <__aeabi_fmul+0x1e0>
 8000836:	3204      	adds	r2, #4
 8000838:	0153      	lsls	r3, r2, #5
 800083a:	d537      	bpl.n	80008ac <__aeabi_fmul+0x254>
 800083c:	2001      	movs	r0, #1
 800083e:	2200      	movs	r2, #0
 8000840:	e747      	b.n	80006d2 <__aeabi_fmul+0x7a>
 8000842:	0c21      	lsrs	r1, r4, #16
 8000844:	464a      	mov	r2, r9
 8000846:	0424      	lsls	r4, r4, #16
 8000848:	0c24      	lsrs	r4, r4, #16
 800084a:	0027      	movs	r7, r4
 800084c:	0c10      	lsrs	r0, r2, #16
 800084e:	0412      	lsls	r2, r2, #16
 8000850:	0c12      	lsrs	r2, r2, #16
 8000852:	4344      	muls	r4, r0
 8000854:	4357      	muls	r7, r2
 8000856:	4348      	muls	r0, r1
 8000858:	4351      	muls	r1, r2
 800085a:	0c3a      	lsrs	r2, r7, #16
 800085c:	1909      	adds	r1, r1, r4
 800085e:	1852      	adds	r2, r2, r1
 8000860:	4294      	cmp	r4, r2
 8000862:	d903      	bls.n	800086c <__aeabi_fmul+0x214>
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0249      	lsls	r1, r1, #9
 8000868:	468c      	mov	ip, r1
 800086a:	4460      	add	r0, ip
 800086c:	043f      	lsls	r7, r7, #16
 800086e:	0411      	lsls	r1, r2, #16
 8000870:	0c3f      	lsrs	r7, r7, #16
 8000872:	19c9      	adds	r1, r1, r7
 8000874:	018c      	lsls	r4, r1, #6
 8000876:	1e67      	subs	r7, r4, #1
 8000878:	41bc      	sbcs	r4, r7
 800087a:	0c12      	lsrs	r2, r2, #16
 800087c:	0e89      	lsrs	r1, r1, #26
 800087e:	1812      	adds	r2, r2, r0
 8000880:	430c      	orrs	r4, r1
 8000882:	0192      	lsls	r2, r2, #6
 8000884:	4314      	orrs	r4, r2
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	d50e      	bpl.n	80008a8 <__aeabi_fmul+0x250>
 800088a:	2301      	movs	r3, #1
 800088c:	0862      	lsrs	r2, r4, #1
 800088e:	401c      	ands	r4, r3
 8000890:	4314      	orrs	r4, r2
 8000892:	e749      	b.n	8000728 <__aeabi_fmul+0xd0>
 8000894:	003e      	movs	r6, r7
 8000896:	46a1      	mov	r9, r4
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	464b      	mov	r3, r9
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	431a      	orrs	r2, r3
 80008a0:	0252      	lsls	r2, r2, #9
 80008a2:	20ff      	movs	r0, #255	@ 0xff
 80008a4:	0a52      	lsrs	r2, r2, #9
 80008a6:	e714      	b.n	80006d2 <__aeabi_fmul+0x7a>
 80008a8:	001d      	movs	r5, r3
 80008aa:	e73d      	b.n	8000728 <__aeabi_fmul+0xd0>
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	2000      	movs	r0, #0
 80008b0:	0a52      	lsrs	r2, r2, #9
 80008b2:	e70e      	b.n	80006d2 <__aeabi_fmul+0x7a>
 80008b4:	290f      	cmp	r1, #15
 80008b6:	d1ed      	bne.n	8000894 <__aeabi_fmul+0x23c>
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	464b      	mov	r3, r9
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	4213      	tst	r3, r2
 80008c0:	d0ea      	beq.n	8000898 <__aeabi_fmul+0x240>
 80008c2:	4214      	tst	r4, r2
 80008c4:	d1e8      	bne.n	8000898 <__aeabi_fmul+0x240>
 80008c6:	003e      	movs	r6, r7
 80008c8:	20ff      	movs	r0, #255	@ 0xff
 80008ca:	4322      	orrs	r2, r4
 80008cc:	e701      	b.n	80006d2 <__aeabi_fmul+0x7a>
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	f7ffffff 	.word	0xf7ffffff

080008d4 <__aeabi_fsub>:
 80008d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d6:	4647      	mov	r7, r8
 80008d8:	46ce      	mov	lr, r9
 80008da:	024e      	lsls	r6, r1, #9
 80008dc:	0243      	lsls	r3, r0, #9
 80008de:	0045      	lsls	r5, r0, #1
 80008e0:	0a72      	lsrs	r2, r6, #9
 80008e2:	0fc4      	lsrs	r4, r0, #31
 80008e4:	0048      	lsls	r0, r1, #1
 80008e6:	b580      	push	{r7, lr}
 80008e8:	4694      	mov	ip, r2
 80008ea:	0a5f      	lsrs	r7, r3, #9
 80008ec:	0e2d      	lsrs	r5, r5, #24
 80008ee:	099b      	lsrs	r3, r3, #6
 80008f0:	0e00      	lsrs	r0, r0, #24
 80008f2:	0fc9      	lsrs	r1, r1, #31
 80008f4:	09b6      	lsrs	r6, r6, #6
 80008f6:	28ff      	cmp	r0, #255	@ 0xff
 80008f8:	d024      	beq.n	8000944 <__aeabi_fsub+0x70>
 80008fa:	2201      	movs	r2, #1
 80008fc:	4051      	eors	r1, r2
 80008fe:	1a2a      	subs	r2, r5, r0
 8000900:	428c      	cmp	r4, r1
 8000902:	d00f      	beq.n	8000924 <__aeabi_fsub+0x50>
 8000904:	2a00      	cmp	r2, #0
 8000906:	dc00      	bgt.n	800090a <__aeabi_fsub+0x36>
 8000908:	e16a      	b.n	8000be0 <__aeabi_fsub+0x30c>
 800090a:	2800      	cmp	r0, #0
 800090c:	d135      	bne.n	800097a <__aeabi_fsub+0xa6>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x40>
 8000912:	e0a2      	b.n	8000a5a <__aeabi_fsub+0x186>
 8000914:	1e51      	subs	r1, r2, #1
 8000916:	2a01      	cmp	r2, #1
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x48>
 800091a:	e124      	b.n	8000b66 <__aeabi_fsub+0x292>
 800091c:	2aff      	cmp	r2, #255	@ 0xff
 800091e:	d021      	beq.n	8000964 <__aeabi_fsub+0x90>
 8000920:	000a      	movs	r2, r1
 8000922:	e02f      	b.n	8000984 <__aeabi_fsub+0xb0>
 8000924:	2a00      	cmp	r2, #0
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x56>
 8000928:	e167      	b.n	8000bfa <__aeabi_fsub+0x326>
 800092a:	2800      	cmp	r0, #0
 800092c:	d05e      	beq.n	80009ec <__aeabi_fsub+0x118>
 800092e:	2dff      	cmp	r5, #255	@ 0xff
 8000930:	d018      	beq.n	8000964 <__aeabi_fsub+0x90>
 8000932:	2180      	movs	r1, #128	@ 0x80
 8000934:	04c9      	lsls	r1, r1, #19
 8000936:	430e      	orrs	r6, r1
 8000938:	2a1b      	cmp	r2, #27
 800093a:	dc00      	bgt.n	800093e <__aeabi_fsub+0x6a>
 800093c:	e076      	b.n	8000a2c <__aeabi_fsub+0x158>
 800093e:	002a      	movs	r2, r5
 8000940:	3301      	adds	r3, #1
 8000942:	e032      	b.n	80009aa <__aeabi_fsub+0xd6>
 8000944:	002a      	movs	r2, r5
 8000946:	3aff      	subs	r2, #255	@ 0xff
 8000948:	4691      	mov	r9, r2
 800094a:	2e00      	cmp	r6, #0
 800094c:	d042      	beq.n	80009d4 <__aeabi_fsub+0x100>
 800094e:	428c      	cmp	r4, r1
 8000950:	d055      	beq.n	80009fe <__aeabi_fsub+0x12a>
 8000952:	464a      	mov	r2, r9
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_fsub+0x86>
 8000958:	e09c      	b.n	8000a94 <__aeabi_fsub+0x1c0>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x8c>
 800095e:	e077      	b.n	8000a50 <__aeabi_fsub+0x17c>
 8000960:	000c      	movs	r4, r1
 8000962:	0033      	movs	r3, r6
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fsub+0x98>
 800096a:	e06e      	b.n	8000a4a <__aeabi_fsub+0x176>
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4313      	orrs	r3, r2
 8000972:	025b      	lsls	r3, r3, #9
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	e024      	b.n	80009c4 <__aeabi_fsub+0xf0>
 800097a:	2dff      	cmp	r5, #255	@ 0xff
 800097c:	d0f2      	beq.n	8000964 <__aeabi_fsub+0x90>
 800097e:	2180      	movs	r1, #128	@ 0x80
 8000980:	04c9      	lsls	r1, r1, #19
 8000982:	430e      	orrs	r6, r1
 8000984:	2101      	movs	r1, #1
 8000986:	2a1b      	cmp	r2, #27
 8000988:	dc08      	bgt.n	800099c <__aeabi_fsub+0xc8>
 800098a:	0031      	movs	r1, r6
 800098c:	2020      	movs	r0, #32
 800098e:	40d1      	lsrs	r1, r2
 8000990:	1a82      	subs	r2, r0, r2
 8000992:	4096      	lsls	r6, r2
 8000994:	0032      	movs	r2, r6
 8000996:	1e50      	subs	r0, r2, #1
 8000998:	4182      	sbcs	r2, r0
 800099a:	4311      	orrs	r1, r2
 800099c:	1a5b      	subs	r3, r3, r1
 800099e:	015a      	lsls	r2, r3, #5
 80009a0:	d460      	bmi.n	8000a64 <__aeabi_fsub+0x190>
 80009a2:	2107      	movs	r1, #7
 80009a4:	002a      	movs	r2, r5
 80009a6:	4019      	ands	r1, r3
 80009a8:	d057      	beq.n	8000a5a <__aeabi_fsub+0x186>
 80009aa:	210f      	movs	r1, #15
 80009ac:	4019      	ands	r1, r3
 80009ae:	2904      	cmp	r1, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0xe0>
 80009b2:	3304      	adds	r3, #4
 80009b4:	0159      	lsls	r1, r3, #5
 80009b6:	d550      	bpl.n	8000a5a <__aeabi_fsub+0x186>
 80009b8:	1c50      	adds	r0, r2, #1
 80009ba:	2afe      	cmp	r2, #254	@ 0xfe
 80009bc:	d045      	beq.n	8000a4a <__aeabi_fsub+0x176>
 80009be:	019b      	lsls	r3, r3, #6
 80009c0:	b2c0      	uxtb	r0, r0
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	05c0      	lsls	r0, r0, #23
 80009c6:	4318      	orrs	r0, r3
 80009c8:	07e4      	lsls	r4, r4, #31
 80009ca:	4320      	orrs	r0, r4
 80009cc:	bcc0      	pop	{r6, r7}
 80009ce:	46b9      	mov	r9, r7
 80009d0:	46b0      	mov	r8, r6
 80009d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d4:	2201      	movs	r2, #1
 80009d6:	4051      	eors	r1, r2
 80009d8:	428c      	cmp	r4, r1
 80009da:	d1ba      	bne.n	8000952 <__aeabi_fsub+0x7e>
 80009dc:	464a      	mov	r2, r9
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d010      	beq.n	8000a04 <__aeabi_fsub+0x130>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fsub+0x114>
 80009e6:	e098      	b.n	8000b1a <__aeabi_fsub+0x246>
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7bb      	b.n	8000964 <__aeabi_fsub+0x90>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d034      	beq.n	8000a5a <__aeabi_fsub+0x186>
 80009f0:	1e51      	subs	r1, r2, #1
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d06e      	beq.n	8000ad4 <__aeabi_fsub+0x200>
 80009f6:	2aff      	cmp	r2, #255	@ 0xff
 80009f8:	d0b4      	beq.n	8000964 <__aeabi_fsub+0x90>
 80009fa:	000a      	movs	r2, r1
 80009fc:	e79c      	b.n	8000938 <__aeabi_fsub+0x64>
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fsub+0x130>
 8000a02:	e088      	b.n	8000b16 <__aeabi_fsub+0x242>
 8000a04:	20fe      	movs	r0, #254	@ 0xfe
 8000a06:	1c6a      	adds	r2, r5, #1
 8000a08:	4210      	tst	r0, r2
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fsub+0x13a>
 8000a0c:	e092      	b.n	8000b34 <__aeabi_fsub+0x260>
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fsub+0x140>
 8000a12:	e0a4      	b.n	8000b5e <__aeabi_fsub+0x28a>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x146>
 8000a18:	e0cb      	b.n	8000bb2 <__aeabi_fsub+0x2de>
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fsub+0x14c>
 8000a1e:	e0ca      	b.n	8000bb6 <__aeabi_fsub+0x2e2>
 8000a20:	2200      	movs	r2, #0
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	0a5b      	lsrs	r3, r3, #9
 8000a28:	b2d0      	uxtb	r0, r2
 8000a2a:	e7cb      	b.n	80009c4 <__aeabi_fsub+0xf0>
 8000a2c:	0031      	movs	r1, r6
 8000a2e:	2020      	movs	r0, #32
 8000a30:	40d1      	lsrs	r1, r2
 8000a32:	1a82      	subs	r2, r0, r2
 8000a34:	4096      	lsls	r6, r2
 8000a36:	0032      	movs	r2, r6
 8000a38:	1e50      	subs	r0, r2, #1
 8000a3a:	4182      	sbcs	r2, r0
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	015a      	lsls	r2, r3, #5
 8000a42:	d5ae      	bpl.n	80009a2 <__aeabi_fsub+0xce>
 8000a44:	1c6a      	adds	r2, r5, #1
 8000a46:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a48:	d14a      	bne.n	8000ae0 <__aeabi_fsub+0x20c>
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7b9      	b.n	80009c4 <__aeabi_fsub+0xf0>
 8000a50:	22ff      	movs	r2, #255	@ 0xff
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d14b      	bne.n	8000aee <__aeabi_fsub+0x21a>
 8000a56:	000c      	movs	r4, r1
 8000a58:	0033      	movs	r3, r6
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	2aff      	cmp	r2, #255	@ 0xff
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x18e>
 8000a60:	e781      	b.n	8000966 <__aeabi_fsub+0x92>
 8000a62:	e7df      	b.n	8000a24 <__aeabi_fsub+0x150>
 8000a64:	019f      	lsls	r7, r3, #6
 8000a66:	09bf      	lsrs	r7, r7, #6
 8000a68:	0038      	movs	r0, r7
 8000a6a:	f001 fbbf 	bl	80021ec <__clzsi2>
 8000a6e:	3805      	subs	r0, #5
 8000a70:	4087      	lsls	r7, r0
 8000a72:	4285      	cmp	r5, r0
 8000a74:	dc21      	bgt.n	8000aba <__aeabi_fsub+0x1e6>
 8000a76:	003b      	movs	r3, r7
 8000a78:	2120      	movs	r1, #32
 8000a7a:	1b42      	subs	r2, r0, r5
 8000a7c:	3201      	adds	r2, #1
 8000a7e:	40d3      	lsrs	r3, r2
 8000a80:	1a8a      	subs	r2, r1, r2
 8000a82:	4097      	lsls	r7, r2
 8000a84:	1e7a      	subs	r2, r7, #1
 8000a86:	4197      	sbcs	r7, r2
 8000a88:	2200      	movs	r2, #0
 8000a8a:	433b      	orrs	r3, r7
 8000a8c:	0759      	lsls	r1, r3, #29
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fsub+0x1be>
 8000a90:	e78b      	b.n	80009aa <__aeabi_fsub+0xd6>
 8000a92:	e78f      	b.n	80009b4 <__aeabi_fsub+0xe0>
 8000a94:	20fe      	movs	r0, #254	@ 0xfe
 8000a96:	1c6a      	adds	r2, r5, #1
 8000a98:	4210      	tst	r0, r2
 8000a9a:	d112      	bne.n	8000ac2 <__aeabi_fsub+0x1ee>
 8000a9c:	2d00      	cmp	r5, #0
 8000a9e:	d152      	bne.n	8000b46 <__aeabi_fsub+0x272>
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d07c      	beq.n	8000b9e <__aeabi_fsub+0x2ca>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d0bb      	beq.n	8000a20 <__aeabi_fsub+0x14c>
 8000aa8:	1b9a      	subs	r2, r3, r6
 8000aaa:	0150      	lsls	r0, r2, #5
 8000aac:	d400      	bmi.n	8000ab0 <__aeabi_fsub+0x1dc>
 8000aae:	e08b      	b.n	8000bc8 <__aeabi_fsub+0x2f4>
 8000ab0:	2401      	movs	r4, #1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	1af3      	subs	r3, r6, r3
 8000ab6:	400c      	ands	r4, r1
 8000ab8:	e7e8      	b.n	8000a8c <__aeabi_fsub+0x1b8>
 8000aba:	4b56      	ldr	r3, [pc, #344]	@ (8000c14 <__aeabi_fsub+0x340>)
 8000abc:	1a2a      	subs	r2, r5, r0
 8000abe:	403b      	ands	r3, r7
 8000ac0:	e7e4      	b.n	8000a8c <__aeabi_fsub+0x1b8>
 8000ac2:	1b9f      	subs	r7, r3, r6
 8000ac4:	017a      	lsls	r2, r7, #5
 8000ac6:	d446      	bmi.n	8000b56 <__aeabi_fsub+0x282>
 8000ac8:	2f00      	cmp	r7, #0
 8000aca:	d1cd      	bne.n	8000a68 <__aeabi_fsub+0x194>
 8000acc:	2400      	movs	r4, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e777      	b.n	80009c4 <__aeabi_fsub+0xf0>
 8000ad4:	199b      	adds	r3, r3, r6
 8000ad6:	2501      	movs	r5, #1
 8000ad8:	3201      	adds	r2, #1
 8000ada:	0159      	lsls	r1, r3, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fsub+0x20c>
 8000ade:	e760      	b.n	80009a2 <__aeabi_fsub+0xce>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	484d      	ldr	r0, [pc, #308]	@ (8000c18 <__aeabi_fsub+0x344>)
 8000ae4:	4019      	ands	r1, r3
 8000ae6:	085b      	lsrs	r3, r3, #1
 8000ae8:	4003      	ands	r3, r0
 8000aea:	430b      	orrs	r3, r1
 8000aec:	e7ce      	b.n	8000a8c <__aeabi_fsub+0x1b8>
 8000aee:	1e57      	subs	r7, r2, #1
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	d05a      	beq.n	8000baa <__aeabi_fsub+0x2d6>
 8000af4:	000c      	movs	r4, r1
 8000af6:	2aff      	cmp	r2, #255	@ 0xff
 8000af8:	d033      	beq.n	8000b62 <__aeabi_fsub+0x28e>
 8000afa:	2201      	movs	r2, #1
 8000afc:	2f1b      	cmp	r7, #27
 8000afe:	dc07      	bgt.n	8000b10 <__aeabi_fsub+0x23c>
 8000b00:	2120      	movs	r1, #32
 8000b02:	1bc9      	subs	r1, r1, r7
 8000b04:	001a      	movs	r2, r3
 8000b06:	408b      	lsls	r3, r1
 8000b08:	40fa      	lsrs	r2, r7
 8000b0a:	1e59      	subs	r1, r3, #1
 8000b0c:	418b      	sbcs	r3, r1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	0005      	movs	r5, r0
 8000b12:	1ab3      	subs	r3, r6, r2
 8000b14:	e743      	b.n	800099e <__aeabi_fsub+0xca>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d123      	bne.n	8000b62 <__aeabi_fsub+0x28e>
 8000b1a:	22ff      	movs	r2, #255	@ 0xff
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d09b      	beq.n	8000a58 <__aeabi_fsub+0x184>
 8000b20:	1e51      	subs	r1, r2, #1
 8000b22:	2a01      	cmp	r2, #1
 8000b24:	d0d6      	beq.n	8000ad4 <__aeabi_fsub+0x200>
 8000b26:	2aff      	cmp	r2, #255	@ 0xff
 8000b28:	d01b      	beq.n	8000b62 <__aeabi_fsub+0x28e>
 8000b2a:	291b      	cmp	r1, #27
 8000b2c:	dd2c      	ble.n	8000b88 <__aeabi_fsub+0x2b4>
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1c73      	adds	r3, r6, #1
 8000b32:	e73a      	b.n	80009aa <__aeabi_fsub+0xd6>
 8000b34:	2aff      	cmp	r2, #255	@ 0xff
 8000b36:	d088      	beq.n	8000a4a <__aeabi_fsub+0x176>
 8000b38:	199b      	adds	r3, r3, r6
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	0759      	lsls	r1, r3, #29
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_fsub+0x26e>
 8000b40:	e733      	b.n	80009aa <__aeabi_fsub+0xd6>
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	e76e      	b.n	8000a24 <__aeabi_fsub+0x150>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d110      	bne.n	8000b6c <__aeabi_fsub+0x298>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d043      	beq.n	8000bd6 <__aeabi_fsub+0x302>
 8000b4e:	2401      	movs	r4, #1
 8000b50:	0033      	movs	r3, r6
 8000b52:	400c      	ands	r4, r1
 8000b54:	e706      	b.n	8000964 <__aeabi_fsub+0x90>
 8000b56:	2401      	movs	r4, #1
 8000b58:	1af7      	subs	r7, r6, r3
 8000b5a:	400c      	ands	r4, r1
 8000b5c:	e784      	b.n	8000a68 <__aeabi_fsub+0x194>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <__aeabi_fsub+0x298>
 8000b62:	0033      	movs	r3, r6
 8000b64:	e6fe      	b.n	8000964 <__aeabi_fsub+0x90>
 8000b66:	2501      	movs	r5, #1
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	e718      	b.n	800099e <__aeabi_fsub+0xca>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x29e>
 8000b70:	e6f8      	b.n	8000964 <__aeabi_fsub+0x90>
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	03d2      	lsls	r2, r2, #15
 8000b76:	4297      	cmp	r7, r2
 8000b78:	d304      	bcc.n	8000b84 <__aeabi_fsub+0x2b0>
 8000b7a:	4594      	cmp	ip, r2
 8000b7c:	d202      	bcs.n	8000b84 <__aeabi_fsub+0x2b0>
 8000b7e:	2401      	movs	r4, #1
 8000b80:	0033      	movs	r3, r6
 8000b82:	400c      	ands	r4, r1
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	e6f1      	b.n	800096c <__aeabi_fsub+0x98>
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2520      	movs	r5, #32
 8000b8c:	40ca      	lsrs	r2, r1
 8000b8e:	1a69      	subs	r1, r5, r1
 8000b90:	408b      	lsls	r3, r1
 8000b92:	1e59      	subs	r1, r3, #1
 8000b94:	418b      	sbcs	r3, r1
 8000b96:	4313      	orrs	r3, r2
 8000b98:	0005      	movs	r5, r0
 8000b9a:	199b      	adds	r3, r3, r6
 8000b9c:	e750      	b.n	8000a40 <__aeabi_fsub+0x16c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d094      	beq.n	8000acc <__aeabi_fsub+0x1f8>
 8000ba2:	2401      	movs	r4, #1
 8000ba4:	0033      	movs	r3, r6
 8000ba6:	400c      	ands	r4, r1
 8000ba8:	e73a      	b.n	8000a20 <__aeabi_fsub+0x14c>
 8000baa:	000c      	movs	r4, r1
 8000bac:	2501      	movs	r5, #1
 8000bae:	1af3      	subs	r3, r6, r3
 8000bb0:	e6f5      	b.n	800099e <__aeabi_fsub+0xca>
 8000bb2:	0033      	movs	r3, r6
 8000bb4:	e734      	b.n	8000a20 <__aeabi_fsub+0x14c>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0159      	lsls	r1, r3, #5
 8000bbc:	d5c1      	bpl.n	8000b42 <__aeabi_fsub+0x26e>
 8000bbe:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <__aeabi_fsub+0x340>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	e72d      	b.n	8000a24 <__aeabi_fsub+0x150>
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x2fa>
 8000bcc:	e77e      	b.n	8000acc <__aeabi_fsub+0x1f8>
 8000bce:	0013      	movs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	e726      	b.n	8000a24 <__aeabi_fsub+0x150>
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	2400      	movs	r4, #0
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	03db      	lsls	r3, r3, #15
 8000bde:	e6f1      	b.n	80009c4 <__aeabi_fsub+0xf0>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x312>
 8000be4:	e756      	b.n	8000a94 <__aeabi_fsub+0x1c0>
 8000be6:	1b47      	subs	r7, r0, r5
 8000be8:	003a      	movs	r2, r7
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fsub+0x31c>
 8000bee:	e730      	b.n	8000a52 <__aeabi_fsub+0x17e>
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	04d2      	lsls	r2, r2, #19
 8000bf4:	000c      	movs	r4, r1
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	e77f      	b.n	8000afa <__aeabi_fsub+0x226>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x32c>
 8000bfe:	e701      	b.n	8000a04 <__aeabi_fsub+0x130>
 8000c00:	1b41      	subs	r1, r0, r5
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d101      	bne.n	8000c0a <__aeabi_fsub+0x336>
 8000c06:	000a      	movs	r2, r1
 8000c08:	e788      	b.n	8000b1c <__aeabi_fsub+0x248>
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	04d2      	lsls	r2, r2, #19
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	e78b      	b.n	8000b2a <__aeabi_fsub+0x256>
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	fbffffff 	.word	0xfbffffff
 8000c18:	7dffffff 	.word	0x7dffffff

08000c1c <__aeabi_f2iz>:
 8000c1c:	0241      	lsls	r1, r0, #9
 8000c1e:	0042      	lsls	r2, r0, #1
 8000c20:	0fc3      	lsrs	r3, r0, #31
 8000c22:	0a49      	lsrs	r1, r1, #9
 8000c24:	2000      	movs	r0, #0
 8000c26:	0e12      	lsrs	r2, r2, #24
 8000c28:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c2a:	dd03      	ble.n	8000c34 <__aeabi_f2iz+0x18>
 8000c2c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c2e:	dd02      	ble.n	8000c36 <__aeabi_f2iz+0x1a>
 8000c30:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <__aeabi_f2iz+0x3c>)
 8000c32:	1898      	adds	r0, r3, r2
 8000c34:	4770      	bx	lr
 8000c36:	2080      	movs	r0, #128	@ 0x80
 8000c38:	0400      	lsls	r0, r0, #16
 8000c3a:	4301      	orrs	r1, r0
 8000c3c:	2a95      	cmp	r2, #149	@ 0x95
 8000c3e:	dc07      	bgt.n	8000c50 <__aeabi_f2iz+0x34>
 8000c40:	2096      	movs	r0, #150	@ 0x96
 8000c42:	1a82      	subs	r2, r0, r2
 8000c44:	40d1      	lsrs	r1, r2
 8000c46:	4248      	negs	r0, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f3      	bne.n	8000c34 <__aeabi_f2iz+0x18>
 8000c4c:	0008      	movs	r0, r1
 8000c4e:	e7f1      	b.n	8000c34 <__aeabi_f2iz+0x18>
 8000c50:	3a96      	subs	r2, #150	@ 0x96
 8000c52:	4091      	lsls	r1, r2
 8000c54:	e7f7      	b.n	8000c46 <__aeabi_f2iz+0x2a>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	7fffffff 	.word	0x7fffffff

08000c5c <__aeabi_i2f>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d013      	beq.n	8000c8a <__aeabi_i2f+0x2e>
 8000c62:	17c3      	asrs	r3, r0, #31
 8000c64:	18c5      	adds	r5, r0, r3
 8000c66:	405d      	eors	r5, r3
 8000c68:	0fc4      	lsrs	r4, r0, #31
 8000c6a:	0028      	movs	r0, r5
 8000c6c:	f001 fabe 	bl	80021ec <__clzsi2>
 8000c70:	239e      	movs	r3, #158	@ 0x9e
 8000c72:	0001      	movs	r1, r0
 8000c74:	1a1b      	subs	r3, r3, r0
 8000c76:	2b96      	cmp	r3, #150	@ 0x96
 8000c78:	dc0f      	bgt.n	8000c9a <__aeabi_i2f+0x3e>
 8000c7a:	2808      	cmp	r0, #8
 8000c7c:	d034      	beq.n	8000ce8 <__aeabi_i2f+0x8c>
 8000c7e:	3908      	subs	r1, #8
 8000c80:	408d      	lsls	r5, r1
 8000c82:	026d      	lsls	r5, r5, #9
 8000c84:	0a6d      	lsrs	r5, r5, #9
 8000c86:	b2d8      	uxtb	r0, r3
 8000c88:	e002      	b.n	8000c90 <__aeabi_i2f+0x34>
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	2500      	movs	r5, #0
 8000c90:	05c0      	lsls	r0, r0, #23
 8000c92:	4328      	orrs	r0, r5
 8000c94:	07e4      	lsls	r4, r4, #31
 8000c96:	4320      	orrs	r0, r4
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
 8000c9a:	2b99      	cmp	r3, #153	@ 0x99
 8000c9c:	dc16      	bgt.n	8000ccc <__aeabi_i2f+0x70>
 8000c9e:	1f42      	subs	r2, r0, #5
 8000ca0:	2805      	cmp	r0, #5
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_i2f+0x4a>
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	002a      	movs	r2, r5
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <__aeabi_i2f+0x94>)
 8000caa:	4002      	ands	r2, r0
 8000cac:	076e      	lsls	r6, r5, #29
 8000cae:	d009      	beq.n	8000cc4 <__aeabi_i2f+0x68>
 8000cb0:	260f      	movs	r6, #15
 8000cb2:	4035      	ands	r5, r6
 8000cb4:	2d04      	cmp	r5, #4
 8000cb6:	d005      	beq.n	8000cc4 <__aeabi_i2f+0x68>
 8000cb8:	3204      	adds	r2, #4
 8000cba:	0155      	lsls	r5, r2, #5
 8000cbc:	d502      	bpl.n	8000cc4 <__aeabi_i2f+0x68>
 8000cbe:	239f      	movs	r3, #159	@ 0x9f
 8000cc0:	4002      	ands	r2, r0
 8000cc2:	1a5b      	subs	r3, r3, r1
 8000cc4:	0192      	lsls	r2, r2, #6
 8000cc6:	0a55      	lsrs	r5, r2, #9
 8000cc8:	b2d8      	uxtb	r0, r3
 8000cca:	e7e1      	b.n	8000c90 <__aeabi_i2f+0x34>
 8000ccc:	2205      	movs	r2, #5
 8000cce:	1a12      	subs	r2, r2, r0
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	40d0      	lsrs	r0, r2
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	0008      	movs	r0, r1
 8000cd8:	301b      	adds	r0, #27
 8000cda:	4085      	lsls	r5, r0
 8000cdc:	0028      	movs	r0, r5
 8000cde:	1e45      	subs	r5, r0, #1
 8000ce0:	41a8      	sbcs	r0, r5
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	0015      	movs	r5, r2
 8000ce6:	e7de      	b.n	8000ca6 <__aeabi_i2f+0x4a>
 8000ce8:	026d      	lsls	r5, r5, #9
 8000cea:	2096      	movs	r0, #150	@ 0x96
 8000cec:	0a6d      	lsrs	r5, r5, #9
 8000cee:	e7cf      	b.n	8000c90 <__aeabi_i2f+0x34>
 8000cf0:	fbffffff 	.word	0xfbffffff

08000cf4 <__aeabi_dadd>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	b083      	sub	sp, #12
 8000d02:	9000      	str	r0, [sp, #0]
 8000d04:	9101      	str	r1, [sp, #4]
 8000d06:	030c      	lsls	r4, r1, #12
 8000d08:	004f      	lsls	r7, r1, #1
 8000d0a:	0fce      	lsrs	r6, r1, #31
 8000d0c:	0a61      	lsrs	r1, r4, #9
 8000d0e:	9c00      	ldr	r4, [sp, #0]
 8000d10:	031d      	lsls	r5, r3, #12
 8000d12:	0f64      	lsrs	r4, r4, #29
 8000d14:	430c      	orrs	r4, r1
 8000d16:	9900      	ldr	r1, [sp, #0]
 8000d18:	9200      	str	r2, [sp, #0]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	00c8      	lsls	r0, r1, #3
 8000d1e:	0059      	lsls	r1, r3, #1
 8000d20:	0d4b      	lsrs	r3, r1, #21
 8000d22:	4699      	mov	r9, r3
 8000d24:	9a00      	ldr	r2, [sp, #0]
 8000d26:	9b01      	ldr	r3, [sp, #4]
 8000d28:	0a6d      	lsrs	r5, r5, #9
 8000d2a:	0fd9      	lsrs	r1, r3, #31
 8000d2c:	0f53      	lsrs	r3, r2, #29
 8000d2e:	432b      	orrs	r3, r5
 8000d30:	469a      	mov	sl, r3
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	0d7f      	lsrs	r7, r7, #21
 8000d36:	00da      	lsls	r2, r3, #3
 8000d38:	4694      	mov	ip, r2
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	46b0      	mov	r8, r6
 8000d3e:	1aba      	subs	r2, r7, r2
 8000d40:	428e      	cmp	r6, r1
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x52>
 8000d44:	e0b0      	b.n	8000ea8 <__aeabi_dadd+0x1b4>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_dadd+0x58>
 8000d4a:	e078      	b.n	8000e3e <__aeabi_dadd+0x14a>
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	2900      	cmp	r1, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x60>
 8000d52:	e0e9      	b.n	8000f28 <__aeabi_dadd+0x234>
 8000d54:	49c9      	ldr	r1, [pc, #804]	@ (800107c <__aeabi_dadd+0x388>)
 8000d56:	428f      	cmp	r7, r1
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x68>
 8000d5a:	e195      	b.n	8001088 <__aeabi_dadd+0x394>
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	2a38      	cmp	r2, #56	@ 0x38
 8000d60:	dc16      	bgt.n	8000d90 <__aeabi_dadd+0x9c>
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	4653      	mov	r3, sl
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	2a1f      	cmp	r2, #31
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_dadd+0x7e>
 8000d70:	e1e7      	b.n	8001142 <__aeabi_dadd+0x44e>
 8000d72:	2120      	movs	r1, #32
 8000d74:	4655      	mov	r5, sl
 8000d76:	1a8b      	subs	r3, r1, r2
 8000d78:	4661      	mov	r1, ip
 8000d7a:	409d      	lsls	r5, r3
 8000d7c:	40d1      	lsrs	r1, r2
 8000d7e:	430d      	orrs	r5, r1
 8000d80:	4661      	mov	r1, ip
 8000d82:	4099      	lsls	r1, r3
 8000d84:	1e4b      	subs	r3, r1, #1
 8000d86:	4199      	sbcs	r1, r3
 8000d88:	4653      	mov	r3, sl
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	430d      	orrs	r5, r1
 8000d8e:	1ae4      	subs	r4, r4, r3
 8000d90:	1b45      	subs	r5, r0, r5
 8000d92:	42a8      	cmp	r0, r5
 8000d94:	4180      	sbcs	r0, r0
 8000d96:	4240      	negs	r0, r0
 8000d98:	1a24      	subs	r4, r4, r0
 8000d9a:	0223      	lsls	r3, r4, #8
 8000d9c:	d400      	bmi.n	8000da0 <__aeabi_dadd+0xac>
 8000d9e:	e10f      	b.n	8000fc0 <__aeabi_dadd+0x2cc>
 8000da0:	0264      	lsls	r4, r4, #9
 8000da2:	0a64      	lsrs	r4, r4, #9
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0xb6>
 8000da8:	e139      	b.n	800101e <__aeabi_dadd+0x32a>
 8000daa:	0020      	movs	r0, r4
 8000dac:	f001 fa1e 	bl	80021ec <__clzsi2>
 8000db0:	0003      	movs	r3, r0
 8000db2:	3b08      	subs	r3, #8
 8000db4:	2120      	movs	r1, #32
 8000db6:	0028      	movs	r0, r5
 8000db8:	1aca      	subs	r2, r1, r3
 8000dba:	40d0      	lsrs	r0, r2
 8000dbc:	409c      	lsls	r4, r3
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	409d      	lsls	r5, r3
 8000dc2:	4322      	orrs	r2, r4
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_dadd+0xd6>
 8000dc8:	e173      	b.n	80010b2 <__aeabi_dadd+0x3be>
 8000dca:	1bd8      	subs	r0, r3, r7
 8000dcc:	3001      	adds	r0, #1
 8000dce:	1a09      	subs	r1, r1, r0
 8000dd0:	002c      	movs	r4, r5
 8000dd2:	408d      	lsls	r5, r1
 8000dd4:	40c4      	lsrs	r4, r0
 8000dd6:	1e6b      	subs	r3, r5, #1
 8000dd8:	419d      	sbcs	r5, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	40c2      	lsrs	r2, r0
 8000dde:	408b      	lsls	r3, r1
 8000de0:	4325      	orrs	r5, r4
 8000de2:	2700      	movs	r7, #0
 8000de4:	0014      	movs	r4, r2
 8000de6:	431d      	orrs	r5, r3
 8000de8:	076b      	lsls	r3, r5, #29
 8000dea:	d009      	beq.n	8000e00 <__aeabi_dadd+0x10c>
 8000dec:	230f      	movs	r3, #15
 8000dee:	402b      	ands	r3, r5
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dadd+0x10c>
 8000df4:	1d2b      	adds	r3, r5, #4
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	41ad      	sbcs	r5, r5
 8000dfa:	426d      	negs	r5, r5
 8000dfc:	1964      	adds	r4, r4, r5
 8000dfe:	001d      	movs	r5, r3
 8000e00:	0223      	lsls	r3, r4, #8
 8000e02:	d400      	bmi.n	8000e06 <__aeabi_dadd+0x112>
 8000e04:	e12d      	b.n	8001062 <__aeabi_dadd+0x36e>
 8000e06:	4a9d      	ldr	r2, [pc, #628]	@ (800107c <__aeabi_dadd+0x388>)
 8000e08:	3701      	adds	r7, #1
 8000e0a:	4297      	cmp	r7, r2
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x11c>
 8000e0e:	e0d3      	b.n	8000fb8 <__aeabi_dadd+0x2c4>
 8000e10:	4646      	mov	r6, r8
 8000e12:	499b      	ldr	r1, [pc, #620]	@ (8001080 <__aeabi_dadd+0x38c>)
 8000e14:	08ed      	lsrs	r5, r5, #3
 8000e16:	4021      	ands	r1, r4
 8000e18:	074a      	lsls	r2, r1, #29
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	057c      	lsls	r4, r7, #21
 8000e1e:	024d      	lsls	r5, r1, #9
 8000e20:	0b2d      	lsrs	r5, r5, #12
 8000e22:	0d64      	lsrs	r4, r4, #21
 8000e24:	0524      	lsls	r4, r4, #20
 8000e26:	432c      	orrs	r4, r5
 8000e28:	07f6      	lsls	r6, r6, #31
 8000e2a:	4334      	orrs	r4, r6
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	0021      	movs	r1, r4
 8000e30:	b003      	add	sp, #12
 8000e32:	bcf0      	pop	{r4, r5, r6, r7}
 8000e34:	46bb      	mov	fp, r7
 8000e36:	46b2      	mov	sl, r6
 8000e38:	46a9      	mov	r9, r5
 8000e3a:	46a0      	mov	r8, r4
 8000e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x150>
 8000e42:	e084      	b.n	8000f4e <__aeabi_dadd+0x25a>
 8000e44:	464a      	mov	r2, r9
 8000e46:	1bd2      	subs	r2, r2, r7
 8000e48:	2f00      	cmp	r7, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x15a>
 8000e4c:	e16d      	b.n	800112a <__aeabi_dadd+0x436>
 8000e4e:	0025      	movs	r5, r4
 8000e50:	4305      	orrs	r5, r0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x162>
 8000e54:	e127      	b.n	80010a6 <__aeabi_dadd+0x3b2>
 8000e56:	1e56      	subs	r6, r2, #1
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0x16a>
 8000e5c:	e23b      	b.n	80012d6 <__aeabi_dadd+0x5e2>
 8000e5e:	4d87      	ldr	r5, [pc, #540]	@ (800107c <__aeabi_dadd+0x388>)
 8000e60:	42aa      	cmp	r2, r5
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dadd+0x172>
 8000e64:	e26a      	b.n	800133c <__aeabi_dadd+0x648>
 8000e66:	2501      	movs	r5, #1
 8000e68:	2e38      	cmp	r6, #56	@ 0x38
 8000e6a:	dc12      	bgt.n	8000e92 <__aeabi_dadd+0x19e>
 8000e6c:	0032      	movs	r2, r6
 8000e6e:	2a1f      	cmp	r2, #31
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_dadd+0x180>
 8000e72:	e1f8      	b.n	8001266 <__aeabi_dadd+0x572>
 8000e74:	2620      	movs	r6, #32
 8000e76:	0025      	movs	r5, r4
 8000e78:	1ab6      	subs	r6, r6, r2
 8000e7a:	0007      	movs	r7, r0
 8000e7c:	4653      	mov	r3, sl
 8000e7e:	40b0      	lsls	r0, r6
 8000e80:	40d4      	lsrs	r4, r2
 8000e82:	40b5      	lsls	r5, r6
 8000e84:	40d7      	lsrs	r7, r2
 8000e86:	1e46      	subs	r6, r0, #1
 8000e88:	41b0      	sbcs	r0, r6
 8000e8a:	1b1b      	subs	r3, r3, r4
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	433d      	orrs	r5, r7
 8000e90:	4305      	orrs	r5, r0
 8000e92:	4662      	mov	r2, ip
 8000e94:	1b55      	subs	r5, r2, r5
 8000e96:	45ac      	cmp	ip, r5
 8000e98:	4192      	sbcs	r2, r2
 8000e9a:	4653      	mov	r3, sl
 8000e9c:	4252      	negs	r2, r2
 8000e9e:	000e      	movs	r6, r1
 8000ea0:	464f      	mov	r7, r9
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	1a9c      	subs	r4, r3, r2
 8000ea6:	e778      	b.n	8000d9a <__aeabi_dadd+0xa6>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_dadd+0x1ba>
 8000eac:	e08e      	b.n	8000fcc <__aeabi_dadd+0x2d8>
 8000eae:	4649      	mov	r1, r9
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d175      	bne.n	8000fa0 <__aeabi_dadd+0x2ac>
 8000eb4:	4661      	mov	r1, ip
 8000eb6:	4653      	mov	r3, sl
 8000eb8:	4319      	orrs	r1, r3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x1ca>
 8000ebc:	e0f6      	b.n	80010ac <__aeabi_dadd+0x3b8>
 8000ebe:	1e51      	subs	r1, r2, #1
 8000ec0:	2a01      	cmp	r2, #1
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dadd+0x1d2>
 8000ec4:	e191      	b.n	80011ea <__aeabi_dadd+0x4f6>
 8000ec6:	4d6d      	ldr	r5, [pc, #436]	@ (800107c <__aeabi_dadd+0x388>)
 8000ec8:	42aa      	cmp	r2, r5
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x1da>
 8000ecc:	e0dc      	b.n	8001088 <__aeabi_dadd+0x394>
 8000ece:	2501      	movs	r5, #1
 8000ed0:	2938      	cmp	r1, #56	@ 0x38
 8000ed2:	dc14      	bgt.n	8000efe <__aeabi_dadd+0x20a>
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	2a1f      	cmp	r2, #31
 8000ed8:	dd00      	ble.n	8000edc <__aeabi_dadd+0x1e8>
 8000eda:	e1a2      	b.n	8001222 <__aeabi_dadd+0x52e>
 8000edc:	2120      	movs	r1, #32
 8000ede:	4653      	mov	r3, sl
 8000ee0:	1a89      	subs	r1, r1, r2
 8000ee2:	408b      	lsls	r3, r1
 8000ee4:	001d      	movs	r5, r3
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	40d3      	lsrs	r3, r2
 8000eea:	431d      	orrs	r5, r3
 8000eec:	4663      	mov	r3, ip
 8000eee:	408b      	lsls	r3, r1
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	1e4b      	subs	r3, r1, #1
 8000ef4:	4199      	sbcs	r1, r3
 8000ef6:	4653      	mov	r3, sl
 8000ef8:	40d3      	lsrs	r3, r2
 8000efa:	430d      	orrs	r5, r1
 8000efc:	18e4      	adds	r4, r4, r3
 8000efe:	182d      	adds	r5, r5, r0
 8000f00:	4285      	cmp	r5, r0
 8000f02:	4180      	sbcs	r0, r0
 8000f04:	4240      	negs	r0, r0
 8000f06:	1824      	adds	r4, r4, r0
 8000f08:	0223      	lsls	r3, r4, #8
 8000f0a:	d559      	bpl.n	8000fc0 <__aeabi_dadd+0x2cc>
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	@ (800107c <__aeabi_dadd+0x388>)
 8000f0e:	3701      	adds	r7, #1
 8000f10:	429f      	cmp	r7, r3
 8000f12:	d051      	beq.n	8000fb8 <__aeabi_dadd+0x2c4>
 8000f14:	2101      	movs	r1, #1
 8000f16:	4b5a      	ldr	r3, [pc, #360]	@ (8001080 <__aeabi_dadd+0x38c>)
 8000f18:	086a      	lsrs	r2, r5, #1
 8000f1a:	401c      	ands	r4, r3
 8000f1c:	4029      	ands	r1, r5
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	07e5      	lsls	r5, r4, #31
 8000f22:	4315      	orrs	r5, r2
 8000f24:	0864      	lsrs	r4, r4, #1
 8000f26:	e75f      	b.n	8000de8 <__aeabi_dadd+0xf4>
 8000f28:	4661      	mov	r1, ip
 8000f2a:	4653      	mov	r3, sl
 8000f2c:	4319      	orrs	r1, r3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x23e>
 8000f30:	e0bc      	b.n	80010ac <__aeabi_dadd+0x3b8>
 8000f32:	1e51      	subs	r1, r2, #1
 8000f34:	2a01      	cmp	r2, #1
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x246>
 8000f38:	e164      	b.n	8001204 <__aeabi_dadd+0x510>
 8000f3a:	4d50      	ldr	r5, [pc, #320]	@ (800107c <__aeabi_dadd+0x388>)
 8000f3c:	42aa      	cmp	r2, r5
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x24e>
 8000f40:	e16a      	b.n	8001218 <__aeabi_dadd+0x524>
 8000f42:	2501      	movs	r5, #1
 8000f44:	2938      	cmp	r1, #56	@ 0x38
 8000f46:	dd00      	ble.n	8000f4a <__aeabi_dadd+0x256>
 8000f48:	e722      	b.n	8000d90 <__aeabi_dadd+0x9c>
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	e70e      	b.n	8000d6c <__aeabi_dadd+0x78>
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <__aeabi_dadd+0x390>)
 8000f50:	1c7d      	adds	r5, r7, #1
 8000f52:	4215      	tst	r5, r2
 8000f54:	d000      	beq.n	8000f58 <__aeabi_dadd+0x264>
 8000f56:	e0d0      	b.n	80010fa <__aeabi_dadd+0x406>
 8000f58:	0025      	movs	r5, r4
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	4653      	mov	r3, sl
 8000f5e:	4305      	orrs	r5, r0
 8000f60:	431a      	orrs	r2, r3
 8000f62:	2f00      	cmp	r7, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x274>
 8000f66:	e137      	b.n	80011d8 <__aeabi_dadd+0x4e4>
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x27a>
 8000f6c:	e1a8      	b.n	80012c0 <__aeabi_dadd+0x5cc>
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x280>
 8000f72:	e16a      	b.n	800124a <__aeabi_dadd+0x556>
 8000f74:	4663      	mov	r3, ip
 8000f76:	1ac5      	subs	r5, r0, r3
 8000f78:	4653      	mov	r3, sl
 8000f7a:	1ae2      	subs	r2, r4, r3
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	425b      	negs	r3, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	021a      	lsls	r2, r3, #8
 8000f86:	d400      	bmi.n	8000f8a <__aeabi_dadd+0x296>
 8000f88:	e203      	b.n	8001392 <__aeabi_dadd+0x69e>
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	1a1d      	subs	r5, r3, r0
 8000f8e:	45ac      	cmp	ip, r5
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	4653      	mov	r3, sl
 8000f94:	4252      	negs	r2, r2
 8000f96:	1b1c      	subs	r4, r3, r4
 8000f98:	000e      	movs	r6, r1
 8000f9a:	4688      	mov	r8, r1
 8000f9c:	1aa4      	subs	r4, r4, r2
 8000f9e:	e723      	b.n	8000de8 <__aeabi_dadd+0xf4>
 8000fa0:	4936      	ldr	r1, [pc, #216]	@ (800107c <__aeabi_dadd+0x388>)
 8000fa2:	428f      	cmp	r7, r1
 8000fa4:	d070      	beq.n	8001088 <__aeabi_dadd+0x394>
 8000fa6:	2501      	movs	r5, #1
 8000fa8:	2a38      	cmp	r2, #56	@ 0x38
 8000faa:	dca8      	bgt.n	8000efe <__aeabi_dadd+0x20a>
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	4653      	mov	r3, sl
 8000fb0:	0409      	lsls	r1, r1, #16
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	e78e      	b.n	8000ed6 <__aeabi_dadd+0x1e2>
 8000fb8:	003c      	movs	r4, r7
 8000fba:	2500      	movs	r5, #0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	e731      	b.n	8000e24 <__aeabi_dadd+0x130>
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	402b      	ands	r3, r5
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d000      	beq.n	8000fca <__aeabi_dadd+0x2d6>
 8000fc8:	e710      	b.n	8000dec <__aeabi_dadd+0xf8>
 8000fca:	e093      	b.n	80010f4 <__aeabi_dadd+0x400>
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d074      	beq.n	80010ba <__aeabi_dadd+0x3c6>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	1bd2      	subs	r2, r2, r7
 8000fd4:	2f00      	cmp	r7, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x2e6>
 8000fd8:	e0c7      	b.n	800116a <__aeabi_dadd+0x476>
 8000fda:	4928      	ldr	r1, [pc, #160]	@ (800107c <__aeabi_dadd+0x388>)
 8000fdc:	4589      	cmp	r9, r1
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dadd+0x2ee>
 8000fe0:	e185      	b.n	80012ee <__aeabi_dadd+0x5fa>
 8000fe2:	2501      	movs	r5, #1
 8000fe4:	2a38      	cmp	r2, #56	@ 0x38
 8000fe6:	dc12      	bgt.n	800100e <__aeabi_dadd+0x31a>
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	0409      	lsls	r1, r1, #16
 8000fec:	430c      	orrs	r4, r1
 8000fee:	2a1f      	cmp	r2, #31
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_dadd+0x300>
 8000ff2:	e1ab      	b.n	800134c <__aeabi_dadd+0x658>
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	0025      	movs	r5, r4
 8000ff8:	1a89      	subs	r1, r1, r2
 8000ffa:	0007      	movs	r7, r0
 8000ffc:	4088      	lsls	r0, r1
 8000ffe:	408d      	lsls	r5, r1
 8001000:	40d7      	lsrs	r7, r2
 8001002:	1e41      	subs	r1, r0, #1
 8001004:	4188      	sbcs	r0, r1
 8001006:	40d4      	lsrs	r4, r2
 8001008:	433d      	orrs	r5, r7
 800100a:	4305      	orrs	r5, r0
 800100c:	44a2      	add	sl, r4
 800100e:	4465      	add	r5, ip
 8001010:	4565      	cmp	r5, ip
 8001012:	4192      	sbcs	r2, r2
 8001014:	4252      	negs	r2, r2
 8001016:	4452      	add	r2, sl
 8001018:	0014      	movs	r4, r2
 800101a:	464f      	mov	r7, r9
 800101c:	e774      	b.n	8000f08 <__aeabi_dadd+0x214>
 800101e:	0028      	movs	r0, r5
 8001020:	f001 f8e4 	bl	80021ec <__clzsi2>
 8001024:	0003      	movs	r3, r0
 8001026:	3318      	adds	r3, #24
 8001028:	2b1f      	cmp	r3, #31
 800102a:	dc00      	bgt.n	800102e <__aeabi_dadd+0x33a>
 800102c:	e6c2      	b.n	8000db4 <__aeabi_dadd+0xc0>
 800102e:	002a      	movs	r2, r5
 8001030:	3808      	subs	r0, #8
 8001032:	4082      	lsls	r2, r0
 8001034:	429f      	cmp	r7, r3
 8001036:	dd00      	ble.n	800103a <__aeabi_dadd+0x346>
 8001038:	e0a9      	b.n	800118e <__aeabi_dadd+0x49a>
 800103a:	1bdb      	subs	r3, r3, r7
 800103c:	1c58      	adds	r0, r3, #1
 800103e:	281f      	cmp	r0, #31
 8001040:	dc00      	bgt.n	8001044 <__aeabi_dadd+0x350>
 8001042:	e1ac      	b.n	800139e <__aeabi_dadd+0x6aa>
 8001044:	0015      	movs	r5, r2
 8001046:	3b1f      	subs	r3, #31
 8001048:	40dd      	lsrs	r5, r3
 800104a:	2820      	cmp	r0, #32
 800104c:	d005      	beq.n	800105a <__aeabi_dadd+0x366>
 800104e:	2340      	movs	r3, #64	@ 0x40
 8001050:	1a1b      	subs	r3, r3, r0
 8001052:	409a      	lsls	r2, r3
 8001054:	1e53      	subs	r3, r2, #1
 8001056:	419a      	sbcs	r2, r3
 8001058:	4315      	orrs	r5, r2
 800105a:	2307      	movs	r3, #7
 800105c:	2700      	movs	r7, #0
 800105e:	402b      	ands	r3, r5
 8001060:	e7b0      	b.n	8000fc4 <__aeabi_dadd+0x2d0>
 8001062:	08ed      	lsrs	r5, r5, #3
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <__aeabi_dadd+0x388>)
 8001066:	0762      	lsls	r2, r4, #29
 8001068:	432a      	orrs	r2, r5
 800106a:	08e4      	lsrs	r4, r4, #3
 800106c:	429f      	cmp	r7, r3
 800106e:	d00f      	beq.n	8001090 <__aeabi_dadd+0x39c>
 8001070:	0324      	lsls	r4, r4, #12
 8001072:	0b25      	lsrs	r5, r4, #12
 8001074:	057c      	lsls	r4, r7, #21
 8001076:	0d64      	lsrs	r4, r4, #21
 8001078:	e6d4      	b.n	8000e24 <__aeabi_dadd+0x130>
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	000007ff 	.word	0x000007ff
 8001080:	ff7fffff 	.word	0xff7fffff
 8001084:	000007fe 	.word	0x000007fe
 8001088:	08c0      	lsrs	r0, r0, #3
 800108a:	0762      	lsls	r2, r4, #29
 800108c:	4302      	orrs	r2, r0
 800108e:	08e4      	lsrs	r4, r4, #3
 8001090:	0013      	movs	r3, r2
 8001092:	4323      	orrs	r3, r4
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x3a4>
 8001096:	e186      	b.n	80013a6 <__aeabi_dadd+0x6b2>
 8001098:	2580      	movs	r5, #128	@ 0x80
 800109a:	032d      	lsls	r5, r5, #12
 800109c:	4325      	orrs	r5, r4
 800109e:	032d      	lsls	r5, r5, #12
 80010a0:	4cc3      	ldr	r4, [pc, #780]	@ (80013b0 <__aeabi_dadd+0x6bc>)
 80010a2:	0b2d      	lsrs	r5, r5, #12
 80010a4:	e6be      	b.n	8000e24 <__aeabi_dadd+0x130>
 80010a6:	4660      	mov	r0, ip
 80010a8:	4654      	mov	r4, sl
 80010aa:	000e      	movs	r6, r1
 80010ac:	0017      	movs	r7, r2
 80010ae:	08c5      	lsrs	r5, r0, #3
 80010b0:	e7d8      	b.n	8001064 <__aeabi_dadd+0x370>
 80010b2:	4cc0      	ldr	r4, [pc, #768]	@ (80013b4 <__aeabi_dadd+0x6c0>)
 80010b4:	1aff      	subs	r7, r7, r3
 80010b6:	4014      	ands	r4, r2
 80010b8:	e696      	b.n	8000de8 <__aeabi_dadd+0xf4>
 80010ba:	4abf      	ldr	r2, [pc, #764]	@ (80013b8 <__aeabi_dadd+0x6c4>)
 80010bc:	1c79      	adds	r1, r7, #1
 80010be:	4211      	tst	r1, r2
 80010c0:	d16b      	bne.n	800119a <__aeabi_dadd+0x4a6>
 80010c2:	0022      	movs	r2, r4
 80010c4:	4302      	orrs	r2, r0
 80010c6:	2f00      	cmp	r7, #0
 80010c8:	d000      	beq.n	80010cc <__aeabi_dadd+0x3d8>
 80010ca:	e0db      	b.n	8001284 <__aeabi_dadd+0x590>
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dadd+0x3de>
 80010d0:	e12d      	b.n	800132e <__aeabi_dadd+0x63a>
 80010d2:	4662      	mov	r2, ip
 80010d4:	4653      	mov	r3, sl
 80010d6:	431a      	orrs	r2, r3
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x3e8>
 80010da:	e0b6      	b.n	800124a <__aeabi_dadd+0x556>
 80010dc:	4663      	mov	r3, ip
 80010de:	18c5      	adds	r5, r0, r3
 80010e0:	4285      	cmp	r5, r0
 80010e2:	4180      	sbcs	r0, r0
 80010e4:	4454      	add	r4, sl
 80010e6:	4240      	negs	r0, r0
 80010e8:	1824      	adds	r4, r4, r0
 80010ea:	0223      	lsls	r3, r4, #8
 80010ec:	d502      	bpl.n	80010f4 <__aeabi_dadd+0x400>
 80010ee:	000f      	movs	r7, r1
 80010f0:	4bb0      	ldr	r3, [pc, #704]	@ (80013b4 <__aeabi_dadd+0x6c0>)
 80010f2:	401c      	ands	r4, r3
 80010f4:	003a      	movs	r2, r7
 80010f6:	0028      	movs	r0, r5
 80010f8:	e7d8      	b.n	80010ac <__aeabi_dadd+0x3b8>
 80010fa:	4662      	mov	r2, ip
 80010fc:	1a85      	subs	r5, r0, r2
 80010fe:	42a8      	cmp	r0, r5
 8001100:	4192      	sbcs	r2, r2
 8001102:	4653      	mov	r3, sl
 8001104:	4252      	negs	r2, r2
 8001106:	4691      	mov	r9, r2
 8001108:	1ae3      	subs	r3, r4, r3
 800110a:	001a      	movs	r2, r3
 800110c:	464b      	mov	r3, r9
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	4691      	mov	r9, r2
 8001114:	021a      	lsls	r2, r3, #8
 8001116:	d454      	bmi.n	80011c2 <__aeabi_dadd+0x4ce>
 8001118:	464a      	mov	r2, r9
 800111a:	464c      	mov	r4, r9
 800111c:	432a      	orrs	r2, r5
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x42e>
 8001120:	e640      	b.n	8000da4 <__aeabi_dadd+0xb0>
 8001122:	2600      	movs	r6, #0
 8001124:	2400      	movs	r4, #0
 8001126:	2500      	movs	r5, #0
 8001128:	e67c      	b.n	8000e24 <__aeabi_dadd+0x130>
 800112a:	4da1      	ldr	r5, [pc, #644]	@ (80013b0 <__aeabi_dadd+0x6bc>)
 800112c:	45a9      	cmp	r9, r5
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x43e>
 8001130:	e090      	b.n	8001254 <__aeabi_dadd+0x560>
 8001132:	2501      	movs	r5, #1
 8001134:	2a38      	cmp	r2, #56	@ 0x38
 8001136:	dd00      	ble.n	800113a <__aeabi_dadd+0x446>
 8001138:	e6ab      	b.n	8000e92 <__aeabi_dadd+0x19e>
 800113a:	2580      	movs	r5, #128	@ 0x80
 800113c:	042d      	lsls	r5, r5, #16
 800113e:	432c      	orrs	r4, r5
 8001140:	e695      	b.n	8000e6e <__aeabi_dadd+0x17a>
 8001142:	0011      	movs	r1, r2
 8001144:	4655      	mov	r5, sl
 8001146:	3920      	subs	r1, #32
 8001148:	40cd      	lsrs	r5, r1
 800114a:	46a9      	mov	r9, r5
 800114c:	2a20      	cmp	r2, #32
 800114e:	d006      	beq.n	800115e <__aeabi_dadd+0x46a>
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4653      	mov	r3, sl
 8001154:	1a8a      	subs	r2, r1, r2
 8001156:	4093      	lsls	r3, r2
 8001158:	4662      	mov	r2, ip
 800115a:	431a      	orrs	r2, r3
 800115c:	4694      	mov	ip, r2
 800115e:	4665      	mov	r5, ip
 8001160:	1e6b      	subs	r3, r5, #1
 8001162:	419d      	sbcs	r5, r3
 8001164:	464b      	mov	r3, r9
 8001166:	431d      	orrs	r5, r3
 8001168:	e612      	b.n	8000d90 <__aeabi_dadd+0x9c>
 800116a:	0021      	movs	r1, r4
 800116c:	4301      	orrs	r1, r0
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x47e>
 8001170:	e0c4      	b.n	80012fc <__aeabi_dadd+0x608>
 8001172:	1e51      	subs	r1, r2, #1
 8001174:	2a01      	cmp	r2, #1
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x486>
 8001178:	e0fb      	b.n	8001372 <__aeabi_dadd+0x67e>
 800117a:	4d8d      	ldr	r5, [pc, #564]	@ (80013b0 <__aeabi_dadd+0x6bc>)
 800117c:	42aa      	cmp	r2, r5
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x48e>
 8001180:	e0b5      	b.n	80012ee <__aeabi_dadd+0x5fa>
 8001182:	2501      	movs	r5, #1
 8001184:	2938      	cmp	r1, #56	@ 0x38
 8001186:	dd00      	ble.n	800118a <__aeabi_dadd+0x496>
 8001188:	e741      	b.n	800100e <__aeabi_dadd+0x31a>
 800118a:	000a      	movs	r2, r1
 800118c:	e72f      	b.n	8000fee <__aeabi_dadd+0x2fa>
 800118e:	4c89      	ldr	r4, [pc, #548]	@ (80013b4 <__aeabi_dadd+0x6c0>)
 8001190:	1aff      	subs	r7, r7, r3
 8001192:	4014      	ands	r4, r2
 8001194:	0762      	lsls	r2, r4, #29
 8001196:	08e4      	lsrs	r4, r4, #3
 8001198:	e76a      	b.n	8001070 <__aeabi_dadd+0x37c>
 800119a:	4a85      	ldr	r2, [pc, #532]	@ (80013b0 <__aeabi_dadd+0x6bc>)
 800119c:	4291      	cmp	r1, r2
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x4ae>
 80011a0:	e0e3      	b.n	800136a <__aeabi_dadd+0x676>
 80011a2:	4663      	mov	r3, ip
 80011a4:	18c2      	adds	r2, r0, r3
 80011a6:	4282      	cmp	r2, r0
 80011a8:	4180      	sbcs	r0, r0
 80011aa:	0023      	movs	r3, r4
 80011ac:	4240      	negs	r0, r0
 80011ae:	4453      	add	r3, sl
 80011b0:	181b      	adds	r3, r3, r0
 80011b2:	07dd      	lsls	r5, r3, #31
 80011b4:	085c      	lsrs	r4, r3, #1
 80011b6:	2307      	movs	r3, #7
 80011b8:	0852      	lsrs	r2, r2, #1
 80011ba:	4315      	orrs	r5, r2
 80011bc:	000f      	movs	r7, r1
 80011be:	402b      	ands	r3, r5
 80011c0:	e700      	b.n	8000fc4 <__aeabi_dadd+0x2d0>
 80011c2:	4663      	mov	r3, ip
 80011c4:	1a1d      	subs	r5, r3, r0
 80011c6:	45ac      	cmp	ip, r5
 80011c8:	4192      	sbcs	r2, r2
 80011ca:	4653      	mov	r3, sl
 80011cc:	4252      	negs	r2, r2
 80011ce:	1b1c      	subs	r4, r3, r4
 80011d0:	000e      	movs	r6, r1
 80011d2:	4688      	mov	r8, r1
 80011d4:	1aa4      	subs	r4, r4, r2
 80011d6:	e5e5      	b.n	8000da4 <__aeabi_dadd+0xb0>
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d000      	beq.n	80011de <__aeabi_dadd+0x4ea>
 80011dc:	e091      	b.n	8001302 <__aeabi_dadd+0x60e>
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d138      	bne.n	8001254 <__aeabi_dadd+0x560>
 80011e2:	2480      	movs	r4, #128	@ 0x80
 80011e4:	2600      	movs	r6, #0
 80011e6:	0324      	lsls	r4, r4, #12
 80011e8:	e756      	b.n	8001098 <__aeabi_dadd+0x3a4>
 80011ea:	4663      	mov	r3, ip
 80011ec:	18c5      	adds	r5, r0, r3
 80011ee:	4285      	cmp	r5, r0
 80011f0:	4180      	sbcs	r0, r0
 80011f2:	4454      	add	r4, sl
 80011f4:	4240      	negs	r0, r0
 80011f6:	1824      	adds	r4, r4, r0
 80011f8:	2701      	movs	r7, #1
 80011fa:	0223      	lsls	r3, r4, #8
 80011fc:	d400      	bmi.n	8001200 <__aeabi_dadd+0x50c>
 80011fe:	e6df      	b.n	8000fc0 <__aeabi_dadd+0x2cc>
 8001200:	2702      	movs	r7, #2
 8001202:	e687      	b.n	8000f14 <__aeabi_dadd+0x220>
 8001204:	4663      	mov	r3, ip
 8001206:	1ac5      	subs	r5, r0, r3
 8001208:	42a8      	cmp	r0, r5
 800120a:	4180      	sbcs	r0, r0
 800120c:	4653      	mov	r3, sl
 800120e:	4240      	negs	r0, r0
 8001210:	1ae4      	subs	r4, r4, r3
 8001212:	2701      	movs	r7, #1
 8001214:	1a24      	subs	r4, r4, r0
 8001216:	e5c0      	b.n	8000d9a <__aeabi_dadd+0xa6>
 8001218:	0762      	lsls	r2, r4, #29
 800121a:	08c0      	lsrs	r0, r0, #3
 800121c:	4302      	orrs	r2, r0
 800121e:	08e4      	lsrs	r4, r4, #3
 8001220:	e736      	b.n	8001090 <__aeabi_dadd+0x39c>
 8001222:	0011      	movs	r1, r2
 8001224:	4653      	mov	r3, sl
 8001226:	3920      	subs	r1, #32
 8001228:	40cb      	lsrs	r3, r1
 800122a:	4699      	mov	r9, r3
 800122c:	2a20      	cmp	r2, #32
 800122e:	d006      	beq.n	800123e <__aeabi_dadd+0x54a>
 8001230:	2140      	movs	r1, #64	@ 0x40
 8001232:	4653      	mov	r3, sl
 8001234:	1a8a      	subs	r2, r1, r2
 8001236:	4093      	lsls	r3, r2
 8001238:	4662      	mov	r2, ip
 800123a:	431a      	orrs	r2, r3
 800123c:	4694      	mov	ip, r2
 800123e:	4665      	mov	r5, ip
 8001240:	1e6b      	subs	r3, r5, #1
 8001242:	419d      	sbcs	r5, r3
 8001244:	464b      	mov	r3, r9
 8001246:	431d      	orrs	r5, r3
 8001248:	e659      	b.n	8000efe <__aeabi_dadd+0x20a>
 800124a:	0762      	lsls	r2, r4, #29
 800124c:	08c0      	lsrs	r0, r0, #3
 800124e:	4302      	orrs	r2, r0
 8001250:	08e4      	lsrs	r4, r4, #3
 8001252:	e70d      	b.n	8001070 <__aeabi_dadd+0x37c>
 8001254:	4653      	mov	r3, sl
 8001256:	075a      	lsls	r2, r3, #29
 8001258:	4663      	mov	r3, ip
 800125a:	08d8      	lsrs	r0, r3, #3
 800125c:	4653      	mov	r3, sl
 800125e:	000e      	movs	r6, r1
 8001260:	4302      	orrs	r2, r0
 8001262:	08dc      	lsrs	r4, r3, #3
 8001264:	e714      	b.n	8001090 <__aeabi_dadd+0x39c>
 8001266:	0015      	movs	r5, r2
 8001268:	0026      	movs	r6, r4
 800126a:	3d20      	subs	r5, #32
 800126c:	40ee      	lsrs	r6, r5
 800126e:	2a20      	cmp	r2, #32
 8001270:	d003      	beq.n	800127a <__aeabi_dadd+0x586>
 8001272:	2540      	movs	r5, #64	@ 0x40
 8001274:	1aaa      	subs	r2, r5, r2
 8001276:	4094      	lsls	r4, r2
 8001278:	4320      	orrs	r0, r4
 800127a:	1e42      	subs	r2, r0, #1
 800127c:	4190      	sbcs	r0, r2
 800127e:	0005      	movs	r5, r0
 8001280:	4335      	orrs	r5, r6
 8001282:	e606      	b.n	8000e92 <__aeabi_dadd+0x19e>
 8001284:	2a00      	cmp	r2, #0
 8001286:	d07c      	beq.n	8001382 <__aeabi_dadd+0x68e>
 8001288:	4662      	mov	r2, ip
 800128a:	4653      	mov	r3, sl
 800128c:	08c0      	lsrs	r0, r0, #3
 800128e:	431a      	orrs	r2, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x5a0>
 8001292:	e6fa      	b.n	800108a <__aeabi_dadd+0x396>
 8001294:	0762      	lsls	r2, r4, #29
 8001296:	4310      	orrs	r0, r2
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	08e4      	lsrs	r4, r4, #3
 800129c:	0312      	lsls	r2, r2, #12
 800129e:	4214      	tst	r4, r2
 80012a0:	d008      	beq.n	80012b4 <__aeabi_dadd+0x5c0>
 80012a2:	08d9      	lsrs	r1, r3, #3
 80012a4:	4211      	tst	r1, r2
 80012a6:	d105      	bne.n	80012b4 <__aeabi_dadd+0x5c0>
 80012a8:	4663      	mov	r3, ip
 80012aa:	08d8      	lsrs	r0, r3, #3
 80012ac:	4653      	mov	r3, sl
 80012ae:	000c      	movs	r4, r1
 80012b0:	075b      	lsls	r3, r3, #29
 80012b2:	4318      	orrs	r0, r3
 80012b4:	0f42      	lsrs	r2, r0, #29
 80012b6:	00c0      	lsls	r0, r0, #3
 80012b8:	08c0      	lsrs	r0, r0, #3
 80012ba:	0752      	lsls	r2, r2, #29
 80012bc:	4302      	orrs	r2, r0
 80012be:	e6e7      	b.n	8001090 <__aeabi_dadd+0x39c>
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x5d2>
 80012c4:	e72d      	b.n	8001122 <__aeabi_dadd+0x42e>
 80012c6:	4663      	mov	r3, ip
 80012c8:	08d8      	lsrs	r0, r3, #3
 80012ca:	4653      	mov	r3, sl
 80012cc:	075a      	lsls	r2, r3, #29
 80012ce:	000e      	movs	r6, r1
 80012d0:	4302      	orrs	r2, r0
 80012d2:	08dc      	lsrs	r4, r3, #3
 80012d4:	e6cc      	b.n	8001070 <__aeabi_dadd+0x37c>
 80012d6:	4663      	mov	r3, ip
 80012d8:	1a1d      	subs	r5, r3, r0
 80012da:	45ac      	cmp	ip, r5
 80012dc:	4192      	sbcs	r2, r2
 80012de:	4653      	mov	r3, sl
 80012e0:	4252      	negs	r2, r2
 80012e2:	1b1c      	subs	r4, r3, r4
 80012e4:	000e      	movs	r6, r1
 80012e6:	4688      	mov	r8, r1
 80012e8:	1aa4      	subs	r4, r4, r2
 80012ea:	3701      	adds	r7, #1
 80012ec:	e555      	b.n	8000d9a <__aeabi_dadd+0xa6>
 80012ee:	4663      	mov	r3, ip
 80012f0:	08d9      	lsrs	r1, r3, #3
 80012f2:	4653      	mov	r3, sl
 80012f4:	075a      	lsls	r2, r3, #29
 80012f6:	430a      	orrs	r2, r1
 80012f8:	08dc      	lsrs	r4, r3, #3
 80012fa:	e6c9      	b.n	8001090 <__aeabi_dadd+0x39c>
 80012fc:	4660      	mov	r0, ip
 80012fe:	4654      	mov	r4, sl
 8001300:	e6d4      	b.n	80010ac <__aeabi_dadd+0x3b8>
 8001302:	08c0      	lsrs	r0, r0, #3
 8001304:	2a00      	cmp	r2, #0
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x616>
 8001308:	e6bf      	b.n	800108a <__aeabi_dadd+0x396>
 800130a:	0762      	lsls	r2, r4, #29
 800130c:	4310      	orrs	r0, r2
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	08e4      	lsrs	r4, r4, #3
 8001312:	0312      	lsls	r2, r2, #12
 8001314:	4214      	tst	r4, r2
 8001316:	d0cd      	beq.n	80012b4 <__aeabi_dadd+0x5c0>
 8001318:	08dd      	lsrs	r5, r3, #3
 800131a:	4215      	tst	r5, r2
 800131c:	d1ca      	bne.n	80012b4 <__aeabi_dadd+0x5c0>
 800131e:	4663      	mov	r3, ip
 8001320:	08d8      	lsrs	r0, r3, #3
 8001322:	4653      	mov	r3, sl
 8001324:	075b      	lsls	r3, r3, #29
 8001326:	000e      	movs	r6, r1
 8001328:	002c      	movs	r4, r5
 800132a:	4318      	orrs	r0, r3
 800132c:	e7c2      	b.n	80012b4 <__aeabi_dadd+0x5c0>
 800132e:	4663      	mov	r3, ip
 8001330:	08d9      	lsrs	r1, r3, #3
 8001332:	4653      	mov	r3, sl
 8001334:	075a      	lsls	r2, r3, #29
 8001336:	430a      	orrs	r2, r1
 8001338:	08dc      	lsrs	r4, r3, #3
 800133a:	e699      	b.n	8001070 <__aeabi_dadd+0x37c>
 800133c:	4663      	mov	r3, ip
 800133e:	08d8      	lsrs	r0, r3, #3
 8001340:	4653      	mov	r3, sl
 8001342:	075a      	lsls	r2, r3, #29
 8001344:	000e      	movs	r6, r1
 8001346:	4302      	orrs	r2, r0
 8001348:	08dc      	lsrs	r4, r3, #3
 800134a:	e6a1      	b.n	8001090 <__aeabi_dadd+0x39c>
 800134c:	0011      	movs	r1, r2
 800134e:	0027      	movs	r7, r4
 8001350:	3920      	subs	r1, #32
 8001352:	40cf      	lsrs	r7, r1
 8001354:	2a20      	cmp	r2, #32
 8001356:	d003      	beq.n	8001360 <__aeabi_dadd+0x66c>
 8001358:	2140      	movs	r1, #64	@ 0x40
 800135a:	1a8a      	subs	r2, r1, r2
 800135c:	4094      	lsls	r4, r2
 800135e:	4320      	orrs	r0, r4
 8001360:	1e42      	subs	r2, r0, #1
 8001362:	4190      	sbcs	r0, r2
 8001364:	0005      	movs	r5, r0
 8001366:	433d      	orrs	r5, r7
 8001368:	e651      	b.n	800100e <__aeabi_dadd+0x31a>
 800136a:	000c      	movs	r4, r1
 800136c:	2500      	movs	r5, #0
 800136e:	2200      	movs	r2, #0
 8001370:	e558      	b.n	8000e24 <__aeabi_dadd+0x130>
 8001372:	4460      	add	r0, ip
 8001374:	4560      	cmp	r0, ip
 8001376:	4192      	sbcs	r2, r2
 8001378:	4454      	add	r4, sl
 800137a:	4252      	negs	r2, r2
 800137c:	0005      	movs	r5, r0
 800137e:	18a4      	adds	r4, r4, r2
 8001380:	e73a      	b.n	80011f8 <__aeabi_dadd+0x504>
 8001382:	4653      	mov	r3, sl
 8001384:	075a      	lsls	r2, r3, #29
 8001386:	4663      	mov	r3, ip
 8001388:	08d9      	lsrs	r1, r3, #3
 800138a:	4653      	mov	r3, sl
 800138c:	430a      	orrs	r2, r1
 800138e:	08dc      	lsrs	r4, r3, #3
 8001390:	e67e      	b.n	8001090 <__aeabi_dadd+0x39c>
 8001392:	001a      	movs	r2, r3
 8001394:	001c      	movs	r4, r3
 8001396:	432a      	orrs	r2, r5
 8001398:	d000      	beq.n	800139c <__aeabi_dadd+0x6a8>
 800139a:	e6ab      	b.n	80010f4 <__aeabi_dadd+0x400>
 800139c:	e6c1      	b.n	8001122 <__aeabi_dadd+0x42e>
 800139e:	2120      	movs	r1, #32
 80013a0:	2500      	movs	r5, #0
 80013a2:	1a09      	subs	r1, r1, r0
 80013a4:	e519      	b.n	8000dda <__aeabi_dadd+0xe6>
 80013a6:	2200      	movs	r2, #0
 80013a8:	2500      	movs	r5, #0
 80013aa:	4c01      	ldr	r4, [pc, #4]	@ (80013b0 <__aeabi_dadd+0x6bc>)
 80013ac:	e53a      	b.n	8000e24 <__aeabi_dadd+0x130>
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	ff7fffff 	.word	0xff7fffff
 80013b8:	000007fe 	.word	0x000007fe

080013bc <__aeabi_ddiv>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	46de      	mov	lr, fp
 80013c0:	4645      	mov	r5, r8
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	b5e0      	push	{r5, r6, r7, lr}
 80013c8:	b087      	sub	sp, #28
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	030b      	lsls	r3, r1, #12
 80013d0:	0b1b      	lsrs	r3, r3, #12
 80013d2:	469b      	mov	fp, r3
 80013d4:	0fca      	lsrs	r2, r1, #31
 80013d6:	004b      	lsls	r3, r1, #1
 80013d8:	0004      	movs	r4, r0
 80013da:	4680      	mov	r8, r0
 80013dc:	0d5b      	lsrs	r3, r3, #21
 80013de:	9202      	str	r2, [sp, #8]
 80013e0:	d100      	bne.n	80013e4 <__aeabi_ddiv+0x28>
 80013e2:	e16a      	b.n	80016ba <__aeabi_ddiv+0x2fe>
 80013e4:	4ad4      	ldr	r2, [pc, #848]	@ (8001738 <__aeabi_ddiv+0x37c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d100      	bne.n	80013ec <__aeabi_ddiv+0x30>
 80013ea:	e18c      	b.n	8001706 <__aeabi_ddiv+0x34a>
 80013ec:	4659      	mov	r1, fp
 80013ee:	0f42      	lsrs	r2, r0, #29
 80013f0:	00c9      	lsls	r1, r1, #3
 80013f2:	430a      	orrs	r2, r1
 80013f4:	2180      	movs	r1, #128	@ 0x80
 80013f6:	0409      	lsls	r1, r1, #16
 80013f8:	4311      	orrs	r1, r2
 80013fa:	00c2      	lsls	r2, r0, #3
 80013fc:	4690      	mov	r8, r2
 80013fe:	4acf      	ldr	r2, [pc, #828]	@ (800173c <__aeabi_ddiv+0x380>)
 8001400:	4689      	mov	r9, r1
 8001402:	4692      	mov	sl, r2
 8001404:	449a      	add	sl, r3
 8001406:	2300      	movs	r3, #0
 8001408:	2400      	movs	r4, #0
 800140a:	9303      	str	r3, [sp, #12]
 800140c:	9e00      	ldr	r6, [sp, #0]
 800140e:	9f01      	ldr	r7, [sp, #4]
 8001410:	033b      	lsls	r3, r7, #12
 8001412:	0b1b      	lsrs	r3, r3, #12
 8001414:	469b      	mov	fp, r3
 8001416:	007b      	lsls	r3, r7, #1
 8001418:	0030      	movs	r0, r6
 800141a:	0d5b      	lsrs	r3, r3, #21
 800141c:	0ffd      	lsrs	r5, r7, #31
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_ddiv+0x68>
 8001422:	e128      	b.n	8001676 <__aeabi_ddiv+0x2ba>
 8001424:	4ac4      	ldr	r2, [pc, #784]	@ (8001738 <__aeabi_ddiv+0x37c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x70>
 800142a:	e177      	b.n	800171c <__aeabi_ddiv+0x360>
 800142c:	4659      	mov	r1, fp
 800142e:	0f72      	lsrs	r2, r6, #29
 8001430:	00c9      	lsls	r1, r1, #3
 8001432:	430a      	orrs	r2, r1
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	0409      	lsls	r1, r1, #16
 8001438:	4311      	orrs	r1, r2
 800143a:	468b      	mov	fp, r1
 800143c:	49bf      	ldr	r1, [pc, #764]	@ (800173c <__aeabi_ddiv+0x380>)
 800143e:	00f2      	lsls	r2, r6, #3
 8001440:	468c      	mov	ip, r1
 8001442:	4651      	mov	r1, sl
 8001444:	4463      	add	r3, ip
 8001446:	1acb      	subs	r3, r1, r3
 8001448:	469a      	mov	sl, r3
 800144a:	2300      	movs	r3, #0
 800144c:	9e02      	ldr	r6, [sp, #8]
 800144e:	406e      	eors	r6, r5
 8001450:	2c0f      	cmp	r4, #15
 8001452:	d827      	bhi.n	80014a4 <__aeabi_ddiv+0xe8>
 8001454:	49ba      	ldr	r1, [pc, #744]	@ (8001740 <__aeabi_ddiv+0x384>)
 8001456:	00a4      	lsls	r4, r4, #2
 8001458:	5909      	ldr	r1, [r1, r4]
 800145a:	468f      	mov	pc, r1
 800145c:	46cb      	mov	fp, r9
 800145e:	4642      	mov	r2, r8
 8001460:	9e02      	ldr	r6, [sp, #8]
 8001462:	9b03      	ldr	r3, [sp, #12]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d016      	beq.n	8001496 <__aeabi_ddiv+0xda>
 8001468:	2b03      	cmp	r3, #3
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0xb2>
 800146c:	e2a6      	b.n	80019bc <__aeabi_ddiv+0x600>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d000      	beq.n	8001474 <__aeabi_ddiv+0xb8>
 8001472:	e0df      	b.n	8001634 <__aeabi_ddiv+0x278>
 8001474:	2200      	movs	r2, #0
 8001476:	2300      	movs	r3, #0
 8001478:	2400      	movs	r4, #0
 800147a:	4690      	mov	r8, r2
 800147c:	051b      	lsls	r3, r3, #20
 800147e:	4323      	orrs	r3, r4
 8001480:	07f6      	lsls	r6, r6, #31
 8001482:	4333      	orrs	r3, r6
 8001484:	4640      	mov	r0, r8
 8001486:	0019      	movs	r1, r3
 8001488:	b007      	add	sp, #28
 800148a:	bcf0      	pop	{r4, r5, r6, r7}
 800148c:	46bb      	mov	fp, r7
 800148e:	46b2      	mov	sl, r6
 8001490:	46a9      	mov	r9, r5
 8001492:	46a0      	mov	r8, r4
 8001494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001496:	2200      	movs	r2, #0
 8001498:	2400      	movs	r4, #0
 800149a:	4690      	mov	r8, r2
 800149c:	4ba6      	ldr	r3, [pc, #664]	@ (8001738 <__aeabi_ddiv+0x37c>)
 800149e:	e7ed      	b.n	800147c <__aeabi_ddiv+0xc0>
 80014a0:	002e      	movs	r6, r5
 80014a2:	e7df      	b.n	8001464 <__aeabi_ddiv+0xa8>
 80014a4:	45cb      	cmp	fp, r9
 80014a6:	d200      	bcs.n	80014aa <__aeabi_ddiv+0xee>
 80014a8:	e1d4      	b.n	8001854 <__aeabi_ddiv+0x498>
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0xf2>
 80014ac:	e1cf      	b.n	800184e <__aeabi_ddiv+0x492>
 80014ae:	2301      	movs	r3, #1
 80014b0:	425b      	negs	r3, r3
 80014b2:	469c      	mov	ip, r3
 80014b4:	4644      	mov	r4, r8
 80014b6:	4648      	mov	r0, r9
 80014b8:	2700      	movs	r7, #0
 80014ba:	44e2      	add	sl, ip
 80014bc:	465b      	mov	r3, fp
 80014be:	0e15      	lsrs	r5, r2, #24
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	431d      	orrs	r5, r3
 80014c4:	0c19      	lsrs	r1, r3, #16
 80014c6:	042b      	lsls	r3, r5, #16
 80014c8:	0212      	lsls	r2, r2, #8
 80014ca:	9500      	str	r5, [sp, #0]
 80014cc:	0c1d      	lsrs	r5, r3, #16
 80014ce:	4691      	mov	r9, r2
 80014d0:	9102      	str	r1, [sp, #8]
 80014d2:	9503      	str	r5, [sp, #12]
 80014d4:	f7fe feb0 	bl	8000238 <__aeabi_uidivmod>
 80014d8:	0002      	movs	r2, r0
 80014da:	436a      	muls	r2, r5
 80014dc:	040b      	lsls	r3, r1, #16
 80014de:	0c21      	lsrs	r1, r4, #16
 80014e0:	4680      	mov	r8, r0
 80014e2:	4319      	orrs	r1, r3
 80014e4:	428a      	cmp	r2, r1
 80014e6:	d909      	bls.n	80014fc <__aeabi_ddiv+0x140>
 80014e8:	9d00      	ldr	r5, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	46ac      	mov	ip, r5
 80014ee:	425b      	negs	r3, r3
 80014f0:	4461      	add	r1, ip
 80014f2:	469c      	mov	ip, r3
 80014f4:	44e0      	add	r8, ip
 80014f6:	428d      	cmp	r5, r1
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x140>
 80014fa:	e1fb      	b.n	80018f4 <__aeabi_ddiv+0x538>
 80014fc:	1a88      	subs	r0, r1, r2
 80014fe:	9902      	ldr	r1, [sp, #8]
 8001500:	f7fe fe9a 	bl	8000238 <__aeabi_uidivmod>
 8001504:	9a03      	ldr	r2, [sp, #12]
 8001506:	0424      	lsls	r4, r4, #16
 8001508:	4342      	muls	r2, r0
 800150a:	0409      	lsls	r1, r1, #16
 800150c:	0c24      	lsrs	r4, r4, #16
 800150e:	0003      	movs	r3, r0
 8001510:	430c      	orrs	r4, r1
 8001512:	42a2      	cmp	r2, r4
 8001514:	d906      	bls.n	8001524 <__aeabi_ddiv+0x168>
 8001516:	9900      	ldr	r1, [sp, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	468c      	mov	ip, r1
 800151c:	4464      	add	r4, ip
 800151e:	42a1      	cmp	r1, r4
 8001520:	d800      	bhi.n	8001524 <__aeabi_ddiv+0x168>
 8001522:	e1e1      	b.n	80018e8 <__aeabi_ddiv+0x52c>
 8001524:	1aa0      	subs	r0, r4, r2
 8001526:	4642      	mov	r2, r8
 8001528:	0412      	lsls	r2, r2, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	4693      	mov	fp, r2
 800152e:	464b      	mov	r3, r9
 8001530:	4659      	mov	r1, fp
 8001532:	0c1b      	lsrs	r3, r3, #16
 8001534:	001d      	movs	r5, r3
 8001536:	9304      	str	r3, [sp, #16]
 8001538:	040b      	lsls	r3, r1, #16
 800153a:	4649      	mov	r1, r9
 800153c:	0409      	lsls	r1, r1, #16
 800153e:	0c09      	lsrs	r1, r1, #16
 8001540:	000c      	movs	r4, r1
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	435c      	muls	r4, r3
 8001546:	0c12      	lsrs	r2, r2, #16
 8001548:	436b      	muls	r3, r5
 800154a:	4688      	mov	r8, r1
 800154c:	4351      	muls	r1, r2
 800154e:	436a      	muls	r2, r5
 8001550:	0c25      	lsrs	r5, r4, #16
 8001552:	46ac      	mov	ip, r5
 8001554:	185b      	adds	r3, r3, r1
 8001556:	4463      	add	r3, ip
 8001558:	4299      	cmp	r1, r3
 800155a:	d903      	bls.n	8001564 <__aeabi_ddiv+0x1a8>
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	0249      	lsls	r1, r1, #9
 8001560:	468c      	mov	ip, r1
 8001562:	4462      	add	r2, ip
 8001564:	0c19      	lsrs	r1, r3, #16
 8001566:	0424      	lsls	r4, r4, #16
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	0c24      	lsrs	r4, r4, #16
 800156c:	188a      	adds	r2, r1, r2
 800156e:	191c      	adds	r4, r3, r4
 8001570:	4290      	cmp	r0, r2
 8001572:	d302      	bcc.n	800157a <__aeabi_ddiv+0x1be>
 8001574:	d116      	bne.n	80015a4 <__aeabi_ddiv+0x1e8>
 8001576:	42a7      	cmp	r7, r4
 8001578:	d214      	bcs.n	80015a4 <__aeabi_ddiv+0x1e8>
 800157a:	465b      	mov	r3, fp
 800157c:	9d00      	ldr	r5, [sp, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	444f      	add	r7, r9
 8001582:	9305      	str	r3, [sp, #20]
 8001584:	454f      	cmp	r7, r9
 8001586:	419b      	sbcs	r3, r3
 8001588:	46ac      	mov	ip, r5
 800158a:	425b      	negs	r3, r3
 800158c:	4463      	add	r3, ip
 800158e:	18c0      	adds	r0, r0, r3
 8001590:	4285      	cmp	r5, r0
 8001592:	d300      	bcc.n	8001596 <__aeabi_ddiv+0x1da>
 8001594:	e1a1      	b.n	80018da <__aeabi_ddiv+0x51e>
 8001596:	4282      	cmp	r2, r0
 8001598:	d900      	bls.n	800159c <__aeabi_ddiv+0x1e0>
 800159a:	e1f6      	b.n	800198a <__aeabi_ddiv+0x5ce>
 800159c:	d100      	bne.n	80015a0 <__aeabi_ddiv+0x1e4>
 800159e:	e1f1      	b.n	8001984 <__aeabi_ddiv+0x5c8>
 80015a0:	9b05      	ldr	r3, [sp, #20]
 80015a2:	469b      	mov	fp, r3
 80015a4:	1b3c      	subs	r4, r7, r4
 80015a6:	42a7      	cmp	r7, r4
 80015a8:	41bf      	sbcs	r7, r7
 80015aa:	9d00      	ldr	r5, [sp, #0]
 80015ac:	1a80      	subs	r0, r0, r2
 80015ae:	427f      	negs	r7, r7
 80015b0:	1bc0      	subs	r0, r0, r7
 80015b2:	4285      	cmp	r5, r0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x1fc>
 80015b6:	e1d0      	b.n	800195a <__aeabi_ddiv+0x59e>
 80015b8:	9902      	ldr	r1, [sp, #8]
 80015ba:	f7fe fe3d 	bl	8000238 <__aeabi_uidivmod>
 80015be:	9a03      	ldr	r2, [sp, #12]
 80015c0:	040b      	lsls	r3, r1, #16
 80015c2:	4342      	muls	r2, r0
 80015c4:	0c21      	lsrs	r1, r4, #16
 80015c6:	0007      	movs	r7, r0
 80015c8:	4319      	orrs	r1, r3
 80015ca:	428a      	cmp	r2, r1
 80015cc:	d900      	bls.n	80015d0 <__aeabi_ddiv+0x214>
 80015ce:	e178      	b.n	80018c2 <__aeabi_ddiv+0x506>
 80015d0:	1a88      	subs	r0, r1, r2
 80015d2:	9902      	ldr	r1, [sp, #8]
 80015d4:	f7fe fe30 	bl	8000238 <__aeabi_uidivmod>
 80015d8:	9a03      	ldr	r2, [sp, #12]
 80015da:	0424      	lsls	r4, r4, #16
 80015dc:	4342      	muls	r2, r0
 80015de:	0409      	lsls	r1, r1, #16
 80015e0:	0c24      	lsrs	r4, r4, #16
 80015e2:	0003      	movs	r3, r0
 80015e4:	430c      	orrs	r4, r1
 80015e6:	42a2      	cmp	r2, r4
 80015e8:	d900      	bls.n	80015ec <__aeabi_ddiv+0x230>
 80015ea:	e15d      	b.n	80018a8 <__aeabi_ddiv+0x4ec>
 80015ec:	4641      	mov	r1, r8
 80015ee:	1aa4      	subs	r4, r4, r2
 80015f0:	043a      	lsls	r2, r7, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	9d04      	ldr	r5, [sp, #16]
 80015f6:	0413      	lsls	r3, r2, #16
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	4359      	muls	r1, r3
 80015fc:	4647      	mov	r7, r8
 80015fe:	436b      	muls	r3, r5
 8001600:	469c      	mov	ip, r3
 8001602:	0c10      	lsrs	r0, r2, #16
 8001604:	4347      	muls	r7, r0
 8001606:	0c0b      	lsrs	r3, r1, #16
 8001608:	44bc      	add	ip, r7
 800160a:	4463      	add	r3, ip
 800160c:	4368      	muls	r0, r5
 800160e:	429f      	cmp	r7, r3
 8001610:	d903      	bls.n	800161a <__aeabi_ddiv+0x25e>
 8001612:	2580      	movs	r5, #128	@ 0x80
 8001614:	026d      	lsls	r5, r5, #9
 8001616:	46ac      	mov	ip, r5
 8001618:	4460      	add	r0, ip
 800161a:	0c1f      	lsrs	r7, r3, #16
 800161c:	0409      	lsls	r1, r1, #16
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	0c09      	lsrs	r1, r1, #16
 8001622:	183f      	adds	r7, r7, r0
 8001624:	185b      	adds	r3, r3, r1
 8001626:	42bc      	cmp	r4, r7
 8001628:	d200      	bcs.n	800162c <__aeabi_ddiv+0x270>
 800162a:	e102      	b.n	8001832 <__aeabi_ddiv+0x476>
 800162c:	d100      	bne.n	8001630 <__aeabi_ddiv+0x274>
 800162e:	e0fd      	b.n	800182c <__aeabi_ddiv+0x470>
 8001630:	2301      	movs	r3, #1
 8001632:	431a      	orrs	r2, r3
 8001634:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <__aeabi_ddiv+0x388>)
 8001636:	4453      	add	r3, sl
 8001638:	2b00      	cmp	r3, #0
 800163a:	dc00      	bgt.n	800163e <__aeabi_ddiv+0x282>
 800163c:	e0ae      	b.n	800179c <__aeabi_ddiv+0x3e0>
 800163e:	0751      	lsls	r1, r2, #29
 8001640:	d000      	beq.n	8001644 <__aeabi_ddiv+0x288>
 8001642:	e198      	b.n	8001976 <__aeabi_ddiv+0x5ba>
 8001644:	4659      	mov	r1, fp
 8001646:	01c9      	lsls	r1, r1, #7
 8001648:	d506      	bpl.n	8001658 <__aeabi_ddiv+0x29c>
 800164a:	4659      	mov	r1, fp
 800164c:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <__aeabi_ddiv+0x38c>)
 800164e:	4019      	ands	r1, r3
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	468b      	mov	fp, r1
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4453      	add	r3, sl
 8001658:	493c      	ldr	r1, [pc, #240]	@ (800174c <__aeabi_ddiv+0x390>)
 800165a:	428b      	cmp	r3, r1
 800165c:	dd00      	ble.n	8001660 <__aeabi_ddiv+0x2a4>
 800165e:	e71a      	b.n	8001496 <__aeabi_ddiv+0xda>
 8001660:	4659      	mov	r1, fp
 8001662:	08d2      	lsrs	r2, r2, #3
 8001664:	0749      	lsls	r1, r1, #29
 8001666:	4311      	orrs	r1, r2
 8001668:	465a      	mov	r2, fp
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	0254      	lsls	r4, r2, #9
 800166e:	4688      	mov	r8, r1
 8001670:	0b24      	lsrs	r4, r4, #12
 8001672:	0d5b      	lsrs	r3, r3, #21
 8001674:	e702      	b.n	800147c <__aeabi_ddiv+0xc0>
 8001676:	465a      	mov	r2, fp
 8001678:	9b00      	ldr	r3, [sp, #0]
 800167a:	431a      	orrs	r2, r3
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x2c4>
 800167e:	e07e      	b.n	800177e <__aeabi_ddiv+0x3c2>
 8001680:	465b      	mov	r3, fp
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x2cc>
 8001686:	e100      	b.n	800188a <__aeabi_ddiv+0x4ce>
 8001688:	4658      	mov	r0, fp
 800168a:	f000 fdaf 	bl	80021ec <__clzsi2>
 800168e:	0002      	movs	r2, r0
 8001690:	0003      	movs	r3, r0
 8001692:	3a0b      	subs	r2, #11
 8001694:	271d      	movs	r7, #29
 8001696:	9e00      	ldr	r6, [sp, #0]
 8001698:	1aba      	subs	r2, r7, r2
 800169a:	0019      	movs	r1, r3
 800169c:	4658      	mov	r0, fp
 800169e:	40d6      	lsrs	r6, r2
 80016a0:	3908      	subs	r1, #8
 80016a2:	4088      	lsls	r0, r1
 80016a4:	0032      	movs	r2, r6
 80016a6:	4302      	orrs	r2, r0
 80016a8:	4693      	mov	fp, r2
 80016aa:	9a00      	ldr	r2, [sp, #0]
 80016ac:	408a      	lsls	r2, r1
 80016ae:	4928      	ldr	r1, [pc, #160]	@ (8001750 <__aeabi_ddiv+0x394>)
 80016b0:	4453      	add	r3, sl
 80016b2:	468a      	mov	sl, r1
 80016b4:	449a      	add	sl, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	e6c8      	b.n	800144c <__aeabi_ddiv+0x90>
 80016ba:	465b      	mov	r3, fp
 80016bc:	4303      	orrs	r3, r0
 80016be:	4699      	mov	r9, r3
 80016c0:	d056      	beq.n	8001770 <__aeabi_ddiv+0x3b4>
 80016c2:	465b      	mov	r3, fp
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x30e>
 80016c8:	e0cd      	b.n	8001866 <__aeabi_ddiv+0x4aa>
 80016ca:	4658      	mov	r0, fp
 80016cc:	f000 fd8e 	bl	80021ec <__clzsi2>
 80016d0:	230b      	movs	r3, #11
 80016d2:	425b      	negs	r3, r3
 80016d4:	469c      	mov	ip, r3
 80016d6:	0002      	movs	r2, r0
 80016d8:	4484      	add	ip, r0
 80016da:	4666      	mov	r6, ip
 80016dc:	231d      	movs	r3, #29
 80016de:	1b9b      	subs	r3, r3, r6
 80016e0:	0026      	movs	r6, r4
 80016e2:	0011      	movs	r1, r2
 80016e4:	4658      	mov	r0, fp
 80016e6:	40de      	lsrs	r6, r3
 80016e8:	3908      	subs	r1, #8
 80016ea:	4088      	lsls	r0, r1
 80016ec:	0033      	movs	r3, r6
 80016ee:	4303      	orrs	r3, r0
 80016f0:	4699      	mov	r9, r3
 80016f2:	0023      	movs	r3, r4
 80016f4:	408b      	lsls	r3, r1
 80016f6:	4698      	mov	r8, r3
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <__aeabi_ddiv+0x398>)
 80016fa:	2400      	movs	r4, #0
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	469a      	mov	sl, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	e682      	b.n	800140c <__aeabi_ddiv+0x50>
 8001706:	465a      	mov	r2, fp
 8001708:	4302      	orrs	r2, r0
 800170a:	4691      	mov	r9, r2
 800170c:	d12a      	bne.n	8001764 <__aeabi_ddiv+0x3a8>
 800170e:	2200      	movs	r2, #0
 8001710:	469a      	mov	sl, r3
 8001712:	2302      	movs	r3, #2
 8001714:	4690      	mov	r8, r2
 8001716:	2408      	movs	r4, #8
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	e677      	b.n	800140c <__aeabi_ddiv+0x50>
 800171c:	465a      	mov	r2, fp
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <__aeabi_ddiv+0x39c>)
 8001724:	469c      	mov	ip, r3
 8001726:	44e2      	add	sl, ip
 8001728:	2a00      	cmp	r2, #0
 800172a:	d117      	bne.n	800175c <__aeabi_ddiv+0x3a0>
 800172c:	2302      	movs	r3, #2
 800172e:	431c      	orrs	r4, r3
 8001730:	2300      	movs	r3, #0
 8001732:	469b      	mov	fp, r3
 8001734:	3302      	adds	r3, #2
 8001736:	e689      	b.n	800144c <__aeabi_ddiv+0x90>
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	08006c20 	.word	0x08006c20
 8001744:	000003ff 	.word	0x000003ff
 8001748:	feffffff 	.word	0xfeffffff
 800174c:	000007fe 	.word	0x000007fe
 8001750:	000003f3 	.word	0x000003f3
 8001754:	fffffc0d 	.word	0xfffffc0d
 8001758:	fffff801 	.word	0xfffff801
 800175c:	2303      	movs	r3, #3
 800175e:	0032      	movs	r2, r6
 8001760:	431c      	orrs	r4, r3
 8001762:	e673      	b.n	800144c <__aeabi_ddiv+0x90>
 8001764:	469a      	mov	sl, r3
 8001766:	2303      	movs	r3, #3
 8001768:	46d9      	mov	r9, fp
 800176a:	240c      	movs	r4, #12
 800176c:	9303      	str	r3, [sp, #12]
 800176e:	e64d      	b.n	800140c <__aeabi_ddiv+0x50>
 8001770:	2300      	movs	r3, #0
 8001772:	4698      	mov	r8, r3
 8001774:	469a      	mov	sl, r3
 8001776:	3301      	adds	r3, #1
 8001778:	2404      	movs	r4, #4
 800177a:	9303      	str	r3, [sp, #12]
 800177c:	e646      	b.n	800140c <__aeabi_ddiv+0x50>
 800177e:	2301      	movs	r3, #1
 8001780:	431c      	orrs	r4, r3
 8001782:	2300      	movs	r3, #0
 8001784:	469b      	mov	fp, r3
 8001786:	3301      	adds	r3, #1
 8001788:	e660      	b.n	800144c <__aeabi_ddiv+0x90>
 800178a:	2300      	movs	r3, #0
 800178c:	2480      	movs	r4, #128	@ 0x80
 800178e:	4698      	mov	r8, r3
 8001790:	2600      	movs	r6, #0
 8001792:	4b92      	ldr	r3, [pc, #584]	@ (80019dc <__aeabi_ddiv+0x620>)
 8001794:	0324      	lsls	r4, r4, #12
 8001796:	e671      	b.n	800147c <__aeabi_ddiv+0xc0>
 8001798:	2201      	movs	r2, #1
 800179a:	4252      	negs	r2, r2
 800179c:	2101      	movs	r1, #1
 800179e:	1ac9      	subs	r1, r1, r3
 80017a0:	2938      	cmp	r1, #56	@ 0x38
 80017a2:	dd00      	ble.n	80017a6 <__aeabi_ddiv+0x3ea>
 80017a4:	e666      	b.n	8001474 <__aeabi_ddiv+0xb8>
 80017a6:	291f      	cmp	r1, #31
 80017a8:	dc00      	bgt.n	80017ac <__aeabi_ddiv+0x3f0>
 80017aa:	e0ab      	b.n	8001904 <__aeabi_ddiv+0x548>
 80017ac:	201f      	movs	r0, #31
 80017ae:	4240      	negs	r0, r0
 80017b0:	1ac3      	subs	r3, r0, r3
 80017b2:	4658      	mov	r0, fp
 80017b4:	40d8      	lsrs	r0, r3
 80017b6:	0003      	movs	r3, r0
 80017b8:	2920      	cmp	r1, #32
 80017ba:	d004      	beq.n	80017c6 <__aeabi_ddiv+0x40a>
 80017bc:	4658      	mov	r0, fp
 80017be:	4988      	ldr	r1, [pc, #544]	@ (80019e0 <__aeabi_ddiv+0x624>)
 80017c0:	4451      	add	r1, sl
 80017c2:	4088      	lsls	r0, r1
 80017c4:	4302      	orrs	r2, r0
 80017c6:	1e51      	subs	r1, r2, #1
 80017c8:	418a      	sbcs	r2, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	2307      	movs	r3, #7
 80017ce:	0019      	movs	r1, r3
 80017d0:	2400      	movs	r4, #0
 80017d2:	4011      	ands	r1, r2
 80017d4:	4213      	tst	r3, r2
 80017d6:	d00c      	beq.n	80017f2 <__aeabi_ddiv+0x436>
 80017d8:	230f      	movs	r3, #15
 80017da:	4013      	ands	r3, r2
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d100      	bne.n	80017e2 <__aeabi_ddiv+0x426>
 80017e0:	e0f9      	b.n	80019d6 <__aeabi_ddiv+0x61a>
 80017e2:	1d11      	adds	r1, r2, #4
 80017e4:	4291      	cmp	r1, r2
 80017e6:	419b      	sbcs	r3, r3
 80017e8:	000a      	movs	r2, r1
 80017ea:	425b      	negs	r3, r3
 80017ec:	0759      	lsls	r1, r3, #29
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	0b1c      	lsrs	r4, r3, #12
 80017f2:	08d2      	lsrs	r2, r2, #3
 80017f4:	430a      	orrs	r2, r1
 80017f6:	4690      	mov	r8, r2
 80017f8:	2300      	movs	r3, #0
 80017fa:	e63f      	b.n	800147c <__aeabi_ddiv+0xc0>
 80017fc:	2480      	movs	r4, #128	@ 0x80
 80017fe:	464b      	mov	r3, r9
 8001800:	0324      	lsls	r4, r4, #12
 8001802:	4223      	tst	r3, r4
 8001804:	d009      	beq.n	800181a <__aeabi_ddiv+0x45e>
 8001806:	465b      	mov	r3, fp
 8001808:	4223      	tst	r3, r4
 800180a:	d106      	bne.n	800181a <__aeabi_ddiv+0x45e>
 800180c:	431c      	orrs	r4, r3
 800180e:	0324      	lsls	r4, r4, #12
 8001810:	002e      	movs	r6, r5
 8001812:	4690      	mov	r8, r2
 8001814:	4b71      	ldr	r3, [pc, #452]	@ (80019dc <__aeabi_ddiv+0x620>)
 8001816:	0b24      	lsrs	r4, r4, #12
 8001818:	e630      	b.n	800147c <__aeabi_ddiv+0xc0>
 800181a:	2480      	movs	r4, #128	@ 0x80
 800181c:	464b      	mov	r3, r9
 800181e:	0324      	lsls	r4, r4, #12
 8001820:	431c      	orrs	r4, r3
 8001822:	0324      	lsls	r4, r4, #12
 8001824:	9e02      	ldr	r6, [sp, #8]
 8001826:	4b6d      	ldr	r3, [pc, #436]	@ (80019dc <__aeabi_ddiv+0x620>)
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	e627      	b.n	800147c <__aeabi_ddiv+0xc0>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d100      	bne.n	8001832 <__aeabi_ddiv+0x476>
 8001830:	e700      	b.n	8001634 <__aeabi_ddiv+0x278>
 8001832:	9800      	ldr	r0, [sp, #0]
 8001834:	1e51      	subs	r1, r2, #1
 8001836:	4684      	mov	ip, r0
 8001838:	4464      	add	r4, ip
 800183a:	4284      	cmp	r4, r0
 800183c:	d200      	bcs.n	8001840 <__aeabi_ddiv+0x484>
 800183e:	e084      	b.n	800194a <__aeabi_ddiv+0x58e>
 8001840:	42bc      	cmp	r4, r7
 8001842:	d200      	bcs.n	8001846 <__aeabi_ddiv+0x48a>
 8001844:	e0ae      	b.n	80019a4 <__aeabi_ddiv+0x5e8>
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0x48e>
 8001848:	e0c1      	b.n	80019ce <__aeabi_ddiv+0x612>
 800184a:	000a      	movs	r2, r1
 800184c:	e6f0      	b.n	8001630 <__aeabi_ddiv+0x274>
 800184e:	4542      	cmp	r2, r8
 8001850:	d900      	bls.n	8001854 <__aeabi_ddiv+0x498>
 8001852:	e62c      	b.n	80014ae <__aeabi_ddiv+0xf2>
 8001854:	464b      	mov	r3, r9
 8001856:	07dc      	lsls	r4, r3, #31
 8001858:	0858      	lsrs	r0, r3, #1
 800185a:	4643      	mov	r3, r8
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	431c      	orrs	r4, r3
 8001860:	4643      	mov	r3, r8
 8001862:	07df      	lsls	r7, r3, #31
 8001864:	e62a      	b.n	80014bc <__aeabi_ddiv+0x100>
 8001866:	f000 fcc1 	bl	80021ec <__clzsi2>
 800186a:	2315      	movs	r3, #21
 800186c:	469c      	mov	ip, r3
 800186e:	4484      	add	ip, r0
 8001870:	0002      	movs	r2, r0
 8001872:	4663      	mov	r3, ip
 8001874:	3220      	adds	r2, #32
 8001876:	2b1c      	cmp	r3, #28
 8001878:	dc00      	bgt.n	800187c <__aeabi_ddiv+0x4c0>
 800187a:	e72e      	b.n	80016da <__aeabi_ddiv+0x31e>
 800187c:	0023      	movs	r3, r4
 800187e:	3808      	subs	r0, #8
 8001880:	4083      	lsls	r3, r0
 8001882:	4699      	mov	r9, r3
 8001884:	2300      	movs	r3, #0
 8001886:	4698      	mov	r8, r3
 8001888:	e736      	b.n	80016f8 <__aeabi_ddiv+0x33c>
 800188a:	f000 fcaf 	bl	80021ec <__clzsi2>
 800188e:	0002      	movs	r2, r0
 8001890:	0003      	movs	r3, r0
 8001892:	3215      	adds	r2, #21
 8001894:	3320      	adds	r3, #32
 8001896:	2a1c      	cmp	r2, #28
 8001898:	dc00      	bgt.n	800189c <__aeabi_ddiv+0x4e0>
 800189a:	e6fb      	b.n	8001694 <__aeabi_ddiv+0x2d8>
 800189c:	9900      	ldr	r1, [sp, #0]
 800189e:	3808      	subs	r0, #8
 80018a0:	4081      	lsls	r1, r0
 80018a2:	2200      	movs	r2, #0
 80018a4:	468b      	mov	fp, r1
 80018a6:	e702      	b.n	80016ae <__aeabi_ddiv+0x2f2>
 80018a8:	9900      	ldr	r1, [sp, #0]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	468c      	mov	ip, r1
 80018ae:	4464      	add	r4, ip
 80018b0:	42a1      	cmp	r1, r4
 80018b2:	d900      	bls.n	80018b6 <__aeabi_ddiv+0x4fa>
 80018b4:	e69a      	b.n	80015ec <__aeabi_ddiv+0x230>
 80018b6:	42a2      	cmp	r2, r4
 80018b8:	d800      	bhi.n	80018bc <__aeabi_ddiv+0x500>
 80018ba:	e697      	b.n	80015ec <__aeabi_ddiv+0x230>
 80018bc:	1e83      	subs	r3, r0, #2
 80018be:	4464      	add	r4, ip
 80018c0:	e694      	b.n	80015ec <__aeabi_ddiv+0x230>
 80018c2:	46ac      	mov	ip, r5
 80018c4:	4461      	add	r1, ip
 80018c6:	3f01      	subs	r7, #1
 80018c8:	428d      	cmp	r5, r1
 80018ca:	d900      	bls.n	80018ce <__aeabi_ddiv+0x512>
 80018cc:	e680      	b.n	80015d0 <__aeabi_ddiv+0x214>
 80018ce:	428a      	cmp	r2, r1
 80018d0:	d800      	bhi.n	80018d4 <__aeabi_ddiv+0x518>
 80018d2:	e67d      	b.n	80015d0 <__aeabi_ddiv+0x214>
 80018d4:	1e87      	subs	r7, r0, #2
 80018d6:	4461      	add	r1, ip
 80018d8:	e67a      	b.n	80015d0 <__aeabi_ddiv+0x214>
 80018da:	4285      	cmp	r5, r0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_ddiv+0x524>
 80018de:	e65f      	b.n	80015a0 <__aeabi_ddiv+0x1e4>
 80018e0:	45b9      	cmp	r9, r7
 80018e2:	d900      	bls.n	80018e6 <__aeabi_ddiv+0x52a>
 80018e4:	e65c      	b.n	80015a0 <__aeabi_ddiv+0x1e4>
 80018e6:	e656      	b.n	8001596 <__aeabi_ddiv+0x1da>
 80018e8:	42a2      	cmp	r2, r4
 80018ea:	d800      	bhi.n	80018ee <__aeabi_ddiv+0x532>
 80018ec:	e61a      	b.n	8001524 <__aeabi_ddiv+0x168>
 80018ee:	1e83      	subs	r3, r0, #2
 80018f0:	4464      	add	r4, ip
 80018f2:	e617      	b.n	8001524 <__aeabi_ddiv+0x168>
 80018f4:	428a      	cmp	r2, r1
 80018f6:	d800      	bhi.n	80018fa <__aeabi_ddiv+0x53e>
 80018f8:	e600      	b.n	80014fc <__aeabi_ddiv+0x140>
 80018fa:	46ac      	mov	ip, r5
 80018fc:	1e83      	subs	r3, r0, #2
 80018fe:	4698      	mov	r8, r3
 8001900:	4461      	add	r1, ip
 8001902:	e5fb      	b.n	80014fc <__aeabi_ddiv+0x140>
 8001904:	4837      	ldr	r0, [pc, #220]	@ (80019e4 <__aeabi_ddiv+0x628>)
 8001906:	0014      	movs	r4, r2
 8001908:	4450      	add	r0, sl
 800190a:	4082      	lsls	r2, r0
 800190c:	465b      	mov	r3, fp
 800190e:	0017      	movs	r7, r2
 8001910:	4083      	lsls	r3, r0
 8001912:	40cc      	lsrs	r4, r1
 8001914:	1e7a      	subs	r2, r7, #1
 8001916:	4197      	sbcs	r7, r2
 8001918:	4323      	orrs	r3, r4
 800191a:	433b      	orrs	r3, r7
 800191c:	001a      	movs	r2, r3
 800191e:	465b      	mov	r3, fp
 8001920:	40cb      	lsrs	r3, r1
 8001922:	0751      	lsls	r1, r2, #29
 8001924:	d009      	beq.n	800193a <__aeabi_ddiv+0x57e>
 8001926:	210f      	movs	r1, #15
 8001928:	4011      	ands	r1, r2
 800192a:	2904      	cmp	r1, #4
 800192c:	d005      	beq.n	800193a <__aeabi_ddiv+0x57e>
 800192e:	1d11      	adds	r1, r2, #4
 8001930:	4291      	cmp	r1, r2
 8001932:	4192      	sbcs	r2, r2
 8001934:	4252      	negs	r2, r2
 8001936:	189b      	adds	r3, r3, r2
 8001938:	000a      	movs	r2, r1
 800193a:	0219      	lsls	r1, r3, #8
 800193c:	d400      	bmi.n	8001940 <__aeabi_ddiv+0x584>
 800193e:	e755      	b.n	80017ec <__aeabi_ddiv+0x430>
 8001940:	2200      	movs	r2, #0
 8001942:	2301      	movs	r3, #1
 8001944:	2400      	movs	r4, #0
 8001946:	4690      	mov	r8, r2
 8001948:	e598      	b.n	800147c <__aeabi_ddiv+0xc0>
 800194a:	000a      	movs	r2, r1
 800194c:	42bc      	cmp	r4, r7
 800194e:	d000      	beq.n	8001952 <__aeabi_ddiv+0x596>
 8001950:	e66e      	b.n	8001630 <__aeabi_ddiv+0x274>
 8001952:	454b      	cmp	r3, r9
 8001954:	d000      	beq.n	8001958 <__aeabi_ddiv+0x59c>
 8001956:	e66b      	b.n	8001630 <__aeabi_ddiv+0x274>
 8001958:	e66c      	b.n	8001634 <__aeabi_ddiv+0x278>
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <__aeabi_ddiv+0x62c>)
 800195c:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <__aeabi_ddiv+0x630>)
 800195e:	4453      	add	r3, sl
 8001960:	4592      	cmp	sl, r2
 8001962:	da00      	bge.n	8001966 <__aeabi_ddiv+0x5aa>
 8001964:	e718      	b.n	8001798 <__aeabi_ddiv+0x3dc>
 8001966:	2101      	movs	r1, #1
 8001968:	4249      	negs	r1, r1
 800196a:	1d0a      	adds	r2, r1, #4
 800196c:	428a      	cmp	r2, r1
 800196e:	4189      	sbcs	r1, r1
 8001970:	4249      	negs	r1, r1
 8001972:	448b      	add	fp, r1
 8001974:	e666      	b.n	8001644 <__aeabi_ddiv+0x288>
 8001976:	210f      	movs	r1, #15
 8001978:	4011      	ands	r1, r2
 800197a:	2904      	cmp	r1, #4
 800197c:	d100      	bne.n	8001980 <__aeabi_ddiv+0x5c4>
 800197e:	e661      	b.n	8001644 <__aeabi_ddiv+0x288>
 8001980:	0011      	movs	r1, r2
 8001982:	e7f2      	b.n	800196a <__aeabi_ddiv+0x5ae>
 8001984:	42bc      	cmp	r4, r7
 8001986:	d800      	bhi.n	800198a <__aeabi_ddiv+0x5ce>
 8001988:	e60a      	b.n	80015a0 <__aeabi_ddiv+0x1e4>
 800198a:	2302      	movs	r3, #2
 800198c:	425b      	negs	r3, r3
 800198e:	469c      	mov	ip, r3
 8001990:	9900      	ldr	r1, [sp, #0]
 8001992:	444f      	add	r7, r9
 8001994:	454f      	cmp	r7, r9
 8001996:	419b      	sbcs	r3, r3
 8001998:	44e3      	add	fp, ip
 800199a:	468c      	mov	ip, r1
 800199c:	425b      	negs	r3, r3
 800199e:	4463      	add	r3, ip
 80019a0:	18c0      	adds	r0, r0, r3
 80019a2:	e5ff      	b.n	80015a4 <__aeabi_ddiv+0x1e8>
 80019a4:	4649      	mov	r1, r9
 80019a6:	9d00      	ldr	r5, [sp, #0]
 80019a8:	0048      	lsls	r0, r1, #1
 80019aa:	4548      	cmp	r0, r9
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	46ac      	mov	ip, r5
 80019b0:	4249      	negs	r1, r1
 80019b2:	4461      	add	r1, ip
 80019b4:	4681      	mov	r9, r0
 80019b6:	3a02      	subs	r2, #2
 80019b8:	1864      	adds	r4, r4, r1
 80019ba:	e7c7      	b.n	800194c <__aeabi_ddiv+0x590>
 80019bc:	2480      	movs	r4, #128	@ 0x80
 80019be:	465b      	mov	r3, fp
 80019c0:	0324      	lsls	r4, r4, #12
 80019c2:	431c      	orrs	r4, r3
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	4690      	mov	r8, r2
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__aeabi_ddiv+0x620>)
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	e556      	b.n	800147c <__aeabi_ddiv+0xc0>
 80019ce:	4599      	cmp	r9, r3
 80019d0:	d3e8      	bcc.n	80019a4 <__aeabi_ddiv+0x5e8>
 80019d2:	000a      	movs	r2, r1
 80019d4:	e7bd      	b.n	8001952 <__aeabi_ddiv+0x596>
 80019d6:	2300      	movs	r3, #0
 80019d8:	e708      	b.n	80017ec <__aeabi_ddiv+0x430>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff
 80019e0:	0000043e 	.word	0x0000043e
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	000003ff 	.word	0x000003ff
 80019ec:	fffffc02 	.word	0xfffffc02

080019f0 <__aeabi_dmul>:
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	4657      	mov	r7, sl
 80019f4:	46de      	mov	lr, fp
 80019f6:	464e      	mov	r6, r9
 80019f8:	4645      	mov	r5, r8
 80019fa:	b5e0      	push	{r5, r6, r7, lr}
 80019fc:	001f      	movs	r7, r3
 80019fe:	030b      	lsls	r3, r1, #12
 8001a00:	0b1b      	lsrs	r3, r3, #12
 8001a02:	0016      	movs	r6, r2
 8001a04:	469a      	mov	sl, r3
 8001a06:	0fca      	lsrs	r2, r1, #31
 8001a08:	004b      	lsls	r3, r1, #1
 8001a0a:	0004      	movs	r4, r0
 8001a0c:	4693      	mov	fp, r2
 8001a0e:	b087      	sub	sp, #28
 8001a10:	0d5b      	lsrs	r3, r3, #21
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0x26>
 8001a14:	e0d5      	b.n	8001bc2 <__aeabi_dmul+0x1d2>
 8001a16:	4abb      	ldr	r2, [pc, #748]	@ (8001d04 <__aeabi_dmul+0x314>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dmul+0x2e>
 8001a1c:	e0f8      	b.n	8001c10 <__aeabi_dmul+0x220>
 8001a1e:	4651      	mov	r1, sl
 8001a20:	0f42      	lsrs	r2, r0, #29
 8001a22:	00c9      	lsls	r1, r1, #3
 8001a24:	430a      	orrs	r2, r1
 8001a26:	2180      	movs	r1, #128	@ 0x80
 8001a28:	0409      	lsls	r1, r1, #16
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	00c2      	lsls	r2, r0, #3
 8001a2e:	4691      	mov	r9, r2
 8001a30:	4ab5      	ldr	r2, [pc, #724]	@ (8001d08 <__aeabi_dmul+0x318>)
 8001a32:	468a      	mov	sl, r1
 8001a34:	189d      	adds	r5, r3, r2
 8001a36:	2300      	movs	r3, #0
 8001a38:	4698      	mov	r8, r3
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	033c      	lsls	r4, r7, #12
 8001a3e:	007b      	lsls	r3, r7, #1
 8001a40:	0ffa      	lsrs	r2, r7, #31
 8001a42:	0030      	movs	r0, r6
 8001a44:	0b24      	lsrs	r4, r4, #12
 8001a46:	0d5b      	lsrs	r3, r3, #21
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x5e>
 8001a4c:	e096      	b.n	8001b7c <__aeabi_dmul+0x18c>
 8001a4e:	4aad      	ldr	r2, [pc, #692]	@ (8001d04 <__aeabi_dmul+0x314>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d031      	beq.n	8001ab8 <__aeabi_dmul+0xc8>
 8001a54:	0f72      	lsrs	r2, r6, #29
 8001a56:	00e4      	lsls	r4, r4, #3
 8001a58:	4322      	orrs	r2, r4
 8001a5a:	2480      	movs	r4, #128	@ 0x80
 8001a5c:	0424      	lsls	r4, r4, #16
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	4aa9      	ldr	r2, [pc, #676]	@ (8001d08 <__aeabi_dmul+0x318>)
 8001a62:	00f0      	lsls	r0, r6, #3
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	195b      	adds	r3, r3, r5
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	4642      	mov	r2, r8
 8001a70:	2600      	movs	r6, #0
 8001a72:	2a0a      	cmp	r2, #10
 8001a74:	dc42      	bgt.n	8001afc <__aeabi_dmul+0x10c>
 8001a76:	465a      	mov	r2, fp
 8001a78:	9900      	ldr	r1, [sp, #0]
 8001a7a:	404a      	eors	r2, r1
 8001a7c:	4693      	mov	fp, r2
 8001a7e:	4642      	mov	r2, r8
 8001a80:	2a02      	cmp	r2, #2
 8001a82:	dc32      	bgt.n	8001aea <__aeabi_dmul+0xfa>
 8001a84:	3a01      	subs	r2, #1
 8001a86:	2a01      	cmp	r2, #1
 8001a88:	d900      	bls.n	8001a8c <__aeabi_dmul+0x9c>
 8001a8a:	e149      	b.n	8001d20 <__aeabi_dmul+0x330>
 8001a8c:	2e02      	cmp	r6, #2
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0xa2>
 8001a90:	e0ca      	b.n	8001c28 <__aeabi_dmul+0x238>
 8001a92:	2e01      	cmp	r6, #1
 8001a94:	d13d      	bne.n	8001b12 <__aeabi_dmul+0x122>
 8001a96:	2300      	movs	r3, #0
 8001a98:	2400      	movs	r4, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	465a      	mov	r2, fp
 8001aa0:	051b      	lsls	r3, r3, #20
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	07d2      	lsls	r2, r2, #31
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	b007      	add	sp, #28
 8001aac:	bcf0      	pop	{r4, r5, r6, r7}
 8001aae:	46bb      	mov	fp, r7
 8001ab0:	46b2      	mov	sl, r6
 8001ab2:	46a9      	mov	r9, r5
 8001ab4:	46a0      	mov	r8, r4
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab8:	4b92      	ldr	r3, [pc, #584]	@ (8001d04 <__aeabi_dmul+0x314>)
 8001aba:	4326      	orrs	r6, r4
 8001abc:	18eb      	adds	r3, r5, r3
 8001abe:	2e00      	cmp	r6, #0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dmul+0xd4>
 8001ac2:	e0bb      	b.n	8001c3c <__aeabi_dmul+0x24c>
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	465a      	mov	r2, fp
 8001acc:	4688      	mov	r8, r1
 8001ace:	9900      	ldr	r1, [sp, #0]
 8001ad0:	404a      	eors	r2, r1
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0109      	lsls	r1, r1, #4
 8001ad6:	468c      	mov	ip, r1
 8001ad8:	0029      	movs	r1, r5
 8001ada:	4461      	add	r1, ip
 8001adc:	9101      	str	r1, [sp, #4]
 8001ade:	4641      	mov	r1, r8
 8001ae0:	290a      	cmp	r1, #10
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dmul+0xf6>
 8001ae4:	e233      	b.n	8001f4e <__aeabi_dmul+0x55e>
 8001ae6:	4693      	mov	fp, r2
 8001ae8:	2603      	movs	r6, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	2701      	movs	r7, #1
 8001aee:	4097      	lsls	r7, r2
 8001af0:	21a6      	movs	r1, #166	@ 0xa6
 8001af2:	003a      	movs	r2, r7
 8001af4:	00c9      	lsls	r1, r1, #3
 8001af6:	400a      	ands	r2, r1
 8001af8:	420f      	tst	r7, r1
 8001afa:	d031      	beq.n	8001b60 <__aeabi_dmul+0x170>
 8001afc:	9e02      	ldr	r6, [sp, #8]
 8001afe:	2e02      	cmp	r6, #2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dmul+0x114>
 8001b02:	e235      	b.n	8001f70 <__aeabi_dmul+0x580>
 8001b04:	2e03      	cmp	r6, #3
 8001b06:	d100      	bne.n	8001b0a <__aeabi_dmul+0x11a>
 8001b08:	e1d2      	b.n	8001eb0 <__aeabi_dmul+0x4c0>
 8001b0a:	4654      	mov	r4, sl
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	2e01      	cmp	r6, #1
 8001b10:	d0c1      	beq.n	8001a96 <__aeabi_dmul+0xa6>
 8001b12:	9a01      	ldr	r2, [sp, #4]
 8001b14:	4b7d      	ldr	r3, [pc, #500]	@ (8001d0c <__aeabi_dmul+0x31c>)
 8001b16:	4694      	mov	ip, r2
 8001b18:	4463      	add	r3, ip
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dc00      	bgt.n	8001b20 <__aeabi_dmul+0x130>
 8001b1e:	e0c0      	b.n	8001ca2 <__aeabi_dmul+0x2b2>
 8001b20:	0742      	lsls	r2, r0, #29
 8001b22:	d009      	beq.n	8001b38 <__aeabi_dmul+0x148>
 8001b24:	220f      	movs	r2, #15
 8001b26:	4002      	ands	r2, r0
 8001b28:	2a04      	cmp	r2, #4
 8001b2a:	d005      	beq.n	8001b38 <__aeabi_dmul+0x148>
 8001b2c:	1d02      	adds	r2, r0, #4
 8001b2e:	4282      	cmp	r2, r0
 8001b30:	4180      	sbcs	r0, r0
 8001b32:	4240      	negs	r0, r0
 8001b34:	1824      	adds	r4, r4, r0
 8001b36:	0010      	movs	r0, r2
 8001b38:	01e2      	lsls	r2, r4, #7
 8001b3a:	d506      	bpl.n	8001b4a <__aeabi_dmul+0x15a>
 8001b3c:	4b74      	ldr	r3, [pc, #464]	@ (8001d10 <__aeabi_dmul+0x320>)
 8001b3e:	9a01      	ldr	r2, [sp, #4]
 8001b40:	401c      	ands	r4, r3
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	4694      	mov	ip, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4463      	add	r3, ip
 8001b4a:	4a72      	ldr	r2, [pc, #456]	@ (8001d14 <__aeabi_dmul+0x324>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	dc6b      	bgt.n	8001c28 <__aeabi_dmul+0x238>
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08c0      	lsrs	r0, r0, #3
 8001b54:	0264      	lsls	r4, r4, #9
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	0d5b      	lsrs	r3, r3, #21
 8001b5e:	e79d      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001b60:	2190      	movs	r1, #144	@ 0x90
 8001b62:	0089      	lsls	r1, r1, #2
 8001b64:	420f      	tst	r7, r1
 8001b66:	d163      	bne.n	8001c30 <__aeabi_dmul+0x240>
 8001b68:	2288      	movs	r2, #136	@ 0x88
 8001b6a:	423a      	tst	r2, r7
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dmul+0x180>
 8001b6e:	e0d7      	b.n	8001d20 <__aeabi_dmul+0x330>
 8001b70:	9b00      	ldr	r3, [sp, #0]
 8001b72:	46a2      	mov	sl, r4
 8001b74:	469b      	mov	fp, r3
 8001b76:	4681      	mov	r9, r0
 8001b78:	9602      	str	r6, [sp, #8]
 8001b7a:	e7bf      	b.n	8001afc <__aeabi_dmul+0x10c>
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	4333      	orrs	r3, r6
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dmul+0x194>
 8001b82:	e07f      	b.n	8001c84 <__aeabi_dmul+0x294>
 8001b84:	2c00      	cmp	r4, #0
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dmul+0x19a>
 8001b88:	e1ad      	b.n	8001ee6 <__aeabi_dmul+0x4f6>
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	f000 fb2e 	bl	80021ec <__clzsi2>
 8001b90:	0002      	movs	r2, r0
 8001b92:	0003      	movs	r3, r0
 8001b94:	3a0b      	subs	r2, #11
 8001b96:	201d      	movs	r0, #29
 8001b98:	0019      	movs	r1, r3
 8001b9a:	1a82      	subs	r2, r0, r2
 8001b9c:	0030      	movs	r0, r6
 8001b9e:	3908      	subs	r1, #8
 8001ba0:	40d0      	lsrs	r0, r2
 8001ba2:	408c      	lsls	r4, r1
 8001ba4:	4304      	orrs	r4, r0
 8001ba6:	0030      	movs	r0, r6
 8001ba8:	4088      	lsls	r0, r1
 8001baa:	4a5b      	ldr	r2, [pc, #364]	@ (8001d18 <__aeabi_dmul+0x328>)
 8001bac:	1aeb      	subs	r3, r5, r3
 8001bae:	4694      	mov	ip, r2
 8001bb0:	4463      	add	r3, ip
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	9201      	str	r2, [sp, #4]
 8001bb6:	4642      	mov	r2, r8
 8001bb8:	2600      	movs	r6, #0
 8001bba:	2a0a      	cmp	r2, #10
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_dmul+0x1d0>
 8001bbe:	e75a      	b.n	8001a76 <__aeabi_dmul+0x86>
 8001bc0:	e79c      	b.n	8001afc <__aeabi_dmul+0x10c>
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	d054      	beq.n	8001c74 <__aeabi_dmul+0x284>
 8001bca:	4653      	mov	r3, sl
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dmul+0x1e2>
 8001bd0:	e177      	b.n	8001ec2 <__aeabi_dmul+0x4d2>
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	f000 fb0a 	bl	80021ec <__clzsi2>
 8001bd8:	230b      	movs	r3, #11
 8001bda:	425b      	negs	r3, r3
 8001bdc:	469c      	mov	ip, r3
 8001bde:	0002      	movs	r2, r0
 8001be0:	4484      	add	ip, r0
 8001be2:	0011      	movs	r1, r2
 8001be4:	4650      	mov	r0, sl
 8001be6:	3908      	subs	r1, #8
 8001be8:	4088      	lsls	r0, r1
 8001bea:	231d      	movs	r3, #29
 8001bec:	4680      	mov	r8, r0
 8001bee:	4660      	mov	r0, ip
 8001bf0:	1a1b      	subs	r3, r3, r0
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	40d8      	lsrs	r0, r3
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	4303      	orrs	r3, r0
 8001bfc:	469a      	mov	sl, r3
 8001bfe:	0023      	movs	r3, r4
 8001c00:	408b      	lsls	r3, r1
 8001c02:	4699      	mov	r9, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	4d44      	ldr	r5, [pc, #272]	@ (8001d18 <__aeabi_dmul+0x328>)
 8001c08:	4698      	mov	r8, r3
 8001c0a:	1aad      	subs	r5, r5, r2
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	e715      	b.n	8001a3c <__aeabi_dmul+0x4c>
 8001c10:	4652      	mov	r2, sl
 8001c12:	4302      	orrs	r2, r0
 8001c14:	4691      	mov	r9, r2
 8001c16:	d126      	bne.n	8001c66 <__aeabi_dmul+0x276>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	001d      	movs	r5, r3
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	4692      	mov	sl, r2
 8001c20:	3208      	adds	r2, #8
 8001c22:	4690      	mov	r8, r2
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	e709      	b.n	8001a3c <__aeabi_dmul+0x4c>
 8001c28:	2400      	movs	r4, #0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <__aeabi_dmul+0x314>)
 8001c2e:	e735      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2480      	movs	r4, #128	@ 0x80
 8001c34:	469b      	mov	fp, r3
 8001c36:	0324      	lsls	r4, r4, #12
 8001c38:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <__aeabi_dmul+0x314>)
 8001c3a:	e72f      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4641      	mov	r1, r8
 8001c40:	4311      	orrs	r1, r2
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	4694      	mov	ip, r2
 8001c48:	002a      	movs	r2, r5
 8001c4a:	4462      	add	r2, ip
 8001c4c:	4688      	mov	r8, r1
 8001c4e:	9201      	str	r2, [sp, #4]
 8001c50:	290a      	cmp	r1, #10
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_dmul+0x266>
 8001c54:	e752      	b.n	8001afc <__aeabi_dmul+0x10c>
 8001c56:	465a      	mov	r2, fp
 8001c58:	2000      	movs	r0, #0
 8001c5a:	9900      	ldr	r1, [sp, #0]
 8001c5c:	0004      	movs	r4, r0
 8001c5e:	404a      	eors	r2, r1
 8001c60:	4693      	mov	fp, r2
 8001c62:	2602      	movs	r6, #2
 8001c64:	e70b      	b.n	8001a7e <__aeabi_dmul+0x8e>
 8001c66:	220c      	movs	r2, #12
 8001c68:	001d      	movs	r5, r3
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	4681      	mov	r9, r0
 8001c6e:	4690      	mov	r8, r2
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	e6e3      	b.n	8001a3c <__aeabi_dmul+0x4c>
 8001c74:	2300      	movs	r3, #0
 8001c76:	469a      	mov	sl, r3
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4698      	mov	r8, r3
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	2500      	movs	r5, #0
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	e6db      	b.n	8001a3c <__aeabi_dmul+0x4c>
 8001c84:	4642      	mov	r2, r8
 8001c86:	3301      	adds	r3, #1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	002b      	movs	r3, r5
 8001c8c:	4690      	mov	r8, r2
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	9201      	str	r2, [sp, #4]
 8001c92:	4642      	mov	r2, r8
 8001c94:	2400      	movs	r4, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	2601      	movs	r6, #1
 8001c9a:	2a0a      	cmp	r2, #10
 8001c9c:	dc00      	bgt.n	8001ca0 <__aeabi_dmul+0x2b0>
 8001c9e:	e6ea      	b.n	8001a76 <__aeabi_dmul+0x86>
 8001ca0:	e72c      	b.n	8001afc <__aeabi_dmul+0x10c>
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	1ad2      	subs	r2, r2, r3
 8001ca6:	2a38      	cmp	r2, #56	@ 0x38
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dmul+0x2bc>
 8001caa:	e6f4      	b.n	8001a96 <__aeabi_dmul+0xa6>
 8001cac:	2a1f      	cmp	r2, #31
 8001cae:	dc00      	bgt.n	8001cb2 <__aeabi_dmul+0x2c2>
 8001cb0:	e12a      	b.n	8001f08 <__aeabi_dmul+0x518>
 8001cb2:	211f      	movs	r1, #31
 8001cb4:	4249      	negs	r1, r1
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	0021      	movs	r1, r4
 8001cba:	40d9      	lsrs	r1, r3
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	2a20      	cmp	r2, #32
 8001cc0:	d005      	beq.n	8001cce <__aeabi_dmul+0x2de>
 8001cc2:	4a16      	ldr	r2, [pc, #88]	@ (8001d1c <__aeabi_dmul+0x32c>)
 8001cc4:	9d01      	ldr	r5, [sp, #4]
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	4465      	add	r5, ip
 8001cca:	40ac      	lsls	r4, r5
 8001ccc:	4320      	orrs	r0, r4
 8001cce:	1e42      	subs	r2, r0, #1
 8001cd0:	4190      	sbcs	r0, r2
 8001cd2:	4318      	orrs	r0, r3
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	2400      	movs	r4, #0
 8001cda:	4001      	ands	r1, r0
 8001cdc:	4203      	tst	r3, r0
 8001cde:	d00c      	beq.n	8001cfa <__aeabi_dmul+0x30a>
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dmul+0x2fa>
 8001ce8:	e140      	b.n	8001f6c <__aeabi_dmul+0x57c>
 8001cea:	1d03      	adds	r3, r0, #4
 8001cec:	4283      	cmp	r3, r0
 8001cee:	41a4      	sbcs	r4, r4
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	4264      	negs	r4, r4
 8001cf4:	0761      	lsls	r1, r4, #29
 8001cf6:	0264      	lsls	r4, r4, #9
 8001cf8:	0b24      	lsrs	r4, r4, #12
 8001cfa:	08c2      	lsrs	r2, r0, #3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	e6cc      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	000007ff 	.word	0x000007ff
 8001d08:	fffffc01 	.word	0xfffffc01
 8001d0c:	000003ff 	.word	0x000003ff
 8001d10:	feffffff 	.word	0xfeffffff
 8001d14:	000007fe 	.word	0x000007fe
 8001d18:	fffffc0d 	.word	0xfffffc0d
 8001d1c:	0000043e 	.word	0x0000043e
 8001d20:	4649      	mov	r1, r9
 8001d22:	464a      	mov	r2, r9
 8001d24:	0409      	lsls	r1, r1, #16
 8001d26:	0c09      	lsrs	r1, r1, #16
 8001d28:	000d      	movs	r5, r1
 8001d2a:	0c16      	lsrs	r6, r2, #16
 8001d2c:	0c02      	lsrs	r2, r0, #16
 8001d2e:	0400      	lsls	r0, r0, #16
 8001d30:	0c00      	lsrs	r0, r0, #16
 8001d32:	4345      	muls	r5, r0
 8001d34:	46ac      	mov	ip, r5
 8001d36:	0005      	movs	r5, r0
 8001d38:	4375      	muls	r5, r6
 8001d3a:	46a8      	mov	r8, r5
 8001d3c:	0015      	movs	r5, r2
 8001d3e:	000f      	movs	r7, r1
 8001d40:	4375      	muls	r5, r6
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	9502      	str	r5, [sp, #8]
 8001d46:	002a      	movs	r2, r5
 8001d48:	9d00      	ldr	r5, [sp, #0]
 8001d4a:	436f      	muls	r7, r5
 8001d4c:	4665      	mov	r5, ip
 8001d4e:	0c2d      	lsrs	r5, r5, #16
 8001d50:	46a9      	mov	r9, r5
 8001d52:	4447      	add	r7, r8
 8001d54:	444f      	add	r7, r9
 8001d56:	45b8      	cmp	r8, r7
 8001d58:	d905      	bls.n	8001d66 <__aeabi_dmul+0x376>
 8001d5a:	0015      	movs	r5, r2
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	0252      	lsls	r2, r2, #9
 8001d60:	4690      	mov	r8, r2
 8001d62:	4445      	add	r5, r8
 8001d64:	9502      	str	r5, [sp, #8]
 8001d66:	0c3d      	lsrs	r5, r7, #16
 8001d68:	9503      	str	r5, [sp, #12]
 8001d6a:	4665      	mov	r5, ip
 8001d6c:	042d      	lsls	r5, r5, #16
 8001d6e:	043f      	lsls	r7, r7, #16
 8001d70:	0c2d      	lsrs	r5, r5, #16
 8001d72:	46ac      	mov	ip, r5
 8001d74:	003d      	movs	r5, r7
 8001d76:	4465      	add	r5, ip
 8001d78:	9504      	str	r5, [sp, #16]
 8001d7a:	0c25      	lsrs	r5, r4, #16
 8001d7c:	0424      	lsls	r4, r4, #16
 8001d7e:	0c24      	lsrs	r4, r4, #16
 8001d80:	46ac      	mov	ip, r5
 8001d82:	0025      	movs	r5, r4
 8001d84:	4375      	muls	r5, r6
 8001d86:	46a8      	mov	r8, r5
 8001d88:	4665      	mov	r5, ip
 8001d8a:	000f      	movs	r7, r1
 8001d8c:	4369      	muls	r1, r5
 8001d8e:	4441      	add	r1, r8
 8001d90:	4689      	mov	r9, r1
 8001d92:	4367      	muls	r7, r4
 8001d94:	0c39      	lsrs	r1, r7, #16
 8001d96:	4449      	add	r1, r9
 8001d98:	436e      	muls	r6, r5
 8001d9a:	4588      	cmp	r8, r1
 8001d9c:	d903      	bls.n	8001da6 <__aeabi_dmul+0x3b6>
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	0252      	lsls	r2, r2, #9
 8001da2:	4690      	mov	r8, r2
 8001da4:	4446      	add	r6, r8
 8001da6:	0c0d      	lsrs	r5, r1, #16
 8001da8:	46a8      	mov	r8, r5
 8001daa:	0035      	movs	r5, r6
 8001dac:	4445      	add	r5, r8
 8001dae:	9505      	str	r5, [sp, #20]
 8001db0:	9d03      	ldr	r5, [sp, #12]
 8001db2:	043f      	lsls	r7, r7, #16
 8001db4:	46a8      	mov	r8, r5
 8001db6:	0c3f      	lsrs	r7, r7, #16
 8001db8:	0409      	lsls	r1, r1, #16
 8001dba:	19c9      	adds	r1, r1, r7
 8001dbc:	4488      	add	r8, r1
 8001dbe:	4645      	mov	r5, r8
 8001dc0:	9503      	str	r5, [sp, #12]
 8001dc2:	4655      	mov	r5, sl
 8001dc4:	042e      	lsls	r6, r5, #16
 8001dc6:	0c36      	lsrs	r6, r6, #16
 8001dc8:	0c2f      	lsrs	r7, r5, #16
 8001dca:	0035      	movs	r5, r6
 8001dcc:	4345      	muls	r5, r0
 8001dce:	4378      	muls	r0, r7
 8001dd0:	4681      	mov	r9, r0
 8001dd2:	0038      	movs	r0, r7
 8001dd4:	46a8      	mov	r8, r5
 8001dd6:	0c2d      	lsrs	r5, r5, #16
 8001dd8:	46aa      	mov	sl, r5
 8001dda:	9a00      	ldr	r2, [sp, #0]
 8001ddc:	4350      	muls	r0, r2
 8001dde:	4372      	muls	r2, r6
 8001de0:	444a      	add	r2, r9
 8001de2:	4452      	add	r2, sl
 8001de4:	4591      	cmp	r9, r2
 8001de6:	d903      	bls.n	8001df0 <__aeabi_dmul+0x400>
 8001de8:	2580      	movs	r5, #128	@ 0x80
 8001dea:	026d      	lsls	r5, r5, #9
 8001dec:	46a9      	mov	r9, r5
 8001dee:	4448      	add	r0, r9
 8001df0:	0c15      	lsrs	r5, r2, #16
 8001df2:	46a9      	mov	r9, r5
 8001df4:	4645      	mov	r5, r8
 8001df6:	042d      	lsls	r5, r5, #16
 8001df8:	0c2d      	lsrs	r5, r5, #16
 8001dfa:	46a8      	mov	r8, r5
 8001dfc:	4665      	mov	r5, ip
 8001dfe:	437d      	muls	r5, r7
 8001e00:	0412      	lsls	r2, r2, #16
 8001e02:	4448      	add	r0, r9
 8001e04:	4490      	add	r8, r2
 8001e06:	46a9      	mov	r9, r5
 8001e08:	0032      	movs	r2, r6
 8001e0a:	4665      	mov	r5, ip
 8001e0c:	4362      	muls	r2, r4
 8001e0e:	436e      	muls	r6, r5
 8001e10:	437c      	muls	r4, r7
 8001e12:	0c17      	lsrs	r7, r2, #16
 8001e14:	1936      	adds	r6, r6, r4
 8001e16:	19bf      	adds	r7, r7, r6
 8001e18:	42bc      	cmp	r4, r7
 8001e1a:	d903      	bls.n	8001e24 <__aeabi_dmul+0x434>
 8001e1c:	2480      	movs	r4, #128	@ 0x80
 8001e1e:	0264      	lsls	r4, r4, #9
 8001e20:	46a4      	mov	ip, r4
 8001e22:	44e1      	add	r9, ip
 8001e24:	9c02      	ldr	r4, [sp, #8]
 8001e26:	9e03      	ldr	r6, [sp, #12]
 8001e28:	46a4      	mov	ip, r4
 8001e2a:	9d05      	ldr	r5, [sp, #20]
 8001e2c:	4466      	add	r6, ip
 8001e2e:	428e      	cmp	r6, r1
 8001e30:	4189      	sbcs	r1, r1
 8001e32:	46ac      	mov	ip, r5
 8001e34:	0412      	lsls	r2, r2, #16
 8001e36:	043c      	lsls	r4, r7, #16
 8001e38:	0c12      	lsrs	r2, r2, #16
 8001e3a:	18a2      	adds	r2, r4, r2
 8001e3c:	4462      	add	r2, ip
 8001e3e:	4249      	negs	r1, r1
 8001e40:	1854      	adds	r4, r2, r1
 8001e42:	4446      	add	r6, r8
 8001e44:	46a4      	mov	ip, r4
 8001e46:	4546      	cmp	r6, r8
 8001e48:	41a4      	sbcs	r4, r4
 8001e4a:	4682      	mov	sl, r0
 8001e4c:	4264      	negs	r4, r4
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	42aa      	cmp	r2, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	458c      	cmp	ip, r1
 8001e56:	4189      	sbcs	r1, r1
 8001e58:	44e2      	add	sl, ip
 8001e5a:	44d0      	add	r8, sl
 8001e5c:	4249      	negs	r1, r1
 8001e5e:	4252      	negs	r2, r2
 8001e60:	430a      	orrs	r2, r1
 8001e62:	45a0      	cmp	r8, r4
 8001e64:	41a4      	sbcs	r4, r4
 8001e66:	4582      	cmp	sl, r0
 8001e68:	4189      	sbcs	r1, r1
 8001e6a:	4264      	negs	r4, r4
 8001e6c:	4249      	negs	r1, r1
 8001e6e:	430c      	orrs	r4, r1
 8001e70:	4641      	mov	r1, r8
 8001e72:	0c3f      	lsrs	r7, r7, #16
 8001e74:	19d2      	adds	r2, r2, r7
 8001e76:	1912      	adds	r2, r2, r4
 8001e78:	0dcc      	lsrs	r4, r1, #23
 8001e7a:	9904      	ldr	r1, [sp, #16]
 8001e7c:	0270      	lsls	r0, r6, #9
 8001e7e:	4308      	orrs	r0, r1
 8001e80:	1e41      	subs	r1, r0, #1
 8001e82:	4188      	sbcs	r0, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	444a      	add	r2, r9
 8001e88:	0df6      	lsrs	r6, r6, #23
 8001e8a:	0252      	lsls	r2, r2, #9
 8001e8c:	4330      	orrs	r0, r6
 8001e8e:	0249      	lsls	r1, r1, #9
 8001e90:	4314      	orrs	r4, r2
 8001e92:	4308      	orrs	r0, r1
 8001e94:	01d2      	lsls	r2, r2, #7
 8001e96:	d535      	bpl.n	8001f04 <__aeabi_dmul+0x514>
 8001e98:	2201      	movs	r2, #1
 8001e9a:	0843      	lsrs	r3, r0, #1
 8001e9c:	4002      	ands	r2, r0
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	07e0      	lsls	r0, r4, #31
 8001ea2:	4318      	orrs	r0, r3
 8001ea4:	0864      	lsrs	r4, r4, #1
 8001ea6:	e634      	b.n	8001b12 <__aeabi_dmul+0x122>
 8001ea8:	9b00      	ldr	r3, [sp, #0]
 8001eaa:	46a2      	mov	sl, r4
 8001eac:	469b      	mov	fp, r3
 8001eae:	4681      	mov	r9, r0
 8001eb0:	2480      	movs	r4, #128	@ 0x80
 8001eb2:	4653      	mov	r3, sl
 8001eb4:	0324      	lsls	r4, r4, #12
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	0324      	lsls	r4, r4, #12
 8001eba:	464a      	mov	r2, r9
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <__aeabi_dmul+0x588>)
 8001ebe:	0b24      	lsrs	r4, r4, #12
 8001ec0:	e5ec      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001ec2:	f000 f993 	bl	80021ec <__clzsi2>
 8001ec6:	2315      	movs	r3, #21
 8001ec8:	469c      	mov	ip, r3
 8001eca:	4484      	add	ip, r0
 8001ecc:	0002      	movs	r2, r0
 8001ece:	4663      	mov	r3, ip
 8001ed0:	3220      	adds	r2, #32
 8001ed2:	2b1c      	cmp	r3, #28
 8001ed4:	dc00      	bgt.n	8001ed8 <__aeabi_dmul+0x4e8>
 8001ed6:	e684      	b.n	8001be2 <__aeabi_dmul+0x1f2>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4699      	mov	r9, r3
 8001edc:	0023      	movs	r3, r4
 8001ede:	3808      	subs	r0, #8
 8001ee0:	4083      	lsls	r3, r0
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	e68e      	b.n	8001c04 <__aeabi_dmul+0x214>
 8001ee6:	f000 f981 	bl	80021ec <__clzsi2>
 8001eea:	0002      	movs	r2, r0
 8001eec:	0003      	movs	r3, r0
 8001eee:	3215      	adds	r2, #21
 8001ef0:	3320      	adds	r3, #32
 8001ef2:	2a1c      	cmp	r2, #28
 8001ef4:	dc00      	bgt.n	8001ef8 <__aeabi_dmul+0x508>
 8001ef6:	e64e      	b.n	8001b96 <__aeabi_dmul+0x1a6>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	0034      	movs	r4, r6
 8001efc:	3a08      	subs	r2, #8
 8001efe:	2000      	movs	r0, #0
 8001f00:	4094      	lsls	r4, r2
 8001f02:	e652      	b.n	8001baa <__aeabi_dmul+0x1ba>
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	e604      	b.n	8001b12 <__aeabi_dmul+0x122>
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <__aeabi_dmul+0x58c>)
 8001f0a:	0021      	movs	r1, r4
 8001f0c:	469c      	mov	ip, r3
 8001f0e:	0003      	movs	r3, r0
 8001f10:	9d01      	ldr	r5, [sp, #4]
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	4465      	add	r5, ip
 8001f16:	40a9      	lsls	r1, r5
 8001f18:	4319      	orrs	r1, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	40ab      	lsls	r3, r5
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	4183      	sbcs	r3, r0
 8001f22:	4319      	orrs	r1, r3
 8001f24:	0008      	movs	r0, r1
 8001f26:	40d4      	lsrs	r4, r2
 8001f28:	074b      	lsls	r3, r1, #29
 8001f2a:	d009      	beq.n	8001f40 <__aeabi_dmul+0x550>
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	400b      	ands	r3, r1
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d005      	beq.n	8001f40 <__aeabi_dmul+0x550>
 8001f34:	1d0b      	adds	r3, r1, #4
 8001f36:	428b      	cmp	r3, r1
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	4240      	negs	r0, r0
 8001f3c:	1824      	adds	r4, r4, r0
 8001f3e:	0018      	movs	r0, r3
 8001f40:	0223      	lsls	r3, r4, #8
 8001f42:	d400      	bmi.n	8001f46 <__aeabi_dmul+0x556>
 8001f44:	e6d6      	b.n	8001cf4 <__aeabi_dmul+0x304>
 8001f46:	2301      	movs	r3, #1
 8001f48:	2400      	movs	r4, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	e5a6      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001f4e:	290f      	cmp	r1, #15
 8001f50:	d1aa      	bne.n	8001ea8 <__aeabi_dmul+0x4b8>
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	4652      	mov	r2, sl
 8001f56:	031b      	lsls	r3, r3, #12
 8001f58:	421a      	tst	r2, r3
 8001f5a:	d0a9      	beq.n	8001eb0 <__aeabi_dmul+0x4c0>
 8001f5c:	421c      	tst	r4, r3
 8001f5e:	d1a7      	bne.n	8001eb0 <__aeabi_dmul+0x4c0>
 8001f60:	431c      	orrs	r4, r3
 8001f62:	9b00      	ldr	r3, [sp, #0]
 8001f64:	0002      	movs	r2, r0
 8001f66:	469b      	mov	fp, r3
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <__aeabi_dmul+0x588>)
 8001f6a:	e597      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	e6c1      	b.n	8001cf4 <__aeabi_dmul+0x304>
 8001f70:	2400      	movs	r4, #0
 8001f72:	4b01      	ldr	r3, [pc, #4]	@ (8001f78 <__aeabi_dmul+0x588>)
 8001f74:	0022      	movs	r2, r4
 8001f76:	e591      	b.n	8001a9c <__aeabi_dmul+0xac>
 8001f78:	000007ff 	.word	0x000007ff
 8001f7c:	0000041e 	.word	0x0000041e

08001f80 <__aeabi_d2iz>:
 8001f80:	000b      	movs	r3, r1
 8001f82:	0002      	movs	r2, r0
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4d16      	ldr	r5, [pc, #88]	@ (8001fe0 <__aeabi_d2iz+0x60>)
 8001f88:	030c      	lsls	r4, r1, #12
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	0049      	lsls	r1, r1, #1
 8001f8e:	2000      	movs	r0, #0
 8001f90:	9200      	str	r2, [sp, #0]
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0d49      	lsrs	r1, r1, #21
 8001f98:	0fde      	lsrs	r6, r3, #31
 8001f9a:	42a9      	cmp	r1, r5
 8001f9c:	dd04      	ble.n	8001fa8 <__aeabi_d2iz+0x28>
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <__aeabi_d2iz+0x64>)
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	dd03      	ble.n	8001fac <__aeabi_d2iz+0x2c>
 8001fa4:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <__aeabi_d2iz+0x68>)
 8001fa6:	18f0      	adds	r0, r6, r3
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	2080      	movs	r0, #128	@ 0x80
 8001fae:	0340      	lsls	r0, r0, #13
 8001fb0:	4320      	orrs	r0, r4
 8001fb2:	4c0e      	ldr	r4, [pc, #56]	@ (8001fec <__aeabi_d2iz+0x6c>)
 8001fb4:	1a64      	subs	r4, r4, r1
 8001fb6:	2c1f      	cmp	r4, #31
 8001fb8:	dd08      	ble.n	8001fcc <__aeabi_d2iz+0x4c>
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <__aeabi_d2iz+0x70>)
 8001fbc:	1a5b      	subs	r3, r3, r1
 8001fbe:	40d8      	lsrs	r0, r3
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	4258      	negs	r0, r3
 8001fc4:	2e00      	cmp	r6, #0
 8001fc6:	d1ef      	bne.n	8001fa8 <__aeabi_d2iz+0x28>
 8001fc8:	0018      	movs	r0, r3
 8001fca:	e7ed      	b.n	8001fa8 <__aeabi_d2iz+0x28>
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <__aeabi_d2iz+0x74>)
 8001fce:	9a00      	ldr	r2, [sp, #0]
 8001fd0:	469c      	mov	ip, r3
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	4461      	add	r1, ip
 8001fd6:	408b      	lsls	r3, r1
 8001fd8:	40e2      	lsrs	r2, r4
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	e7f1      	b.n	8001fc2 <__aeabi_d2iz+0x42>
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	000003fe 	.word	0x000003fe
 8001fe4:	0000041d 	.word	0x0000041d
 8001fe8:	7fffffff 	.word	0x7fffffff
 8001fec:	00000433 	.word	0x00000433
 8001ff0:	00000413 	.word	0x00000413
 8001ff4:	fffffbed 	.word	0xfffffbed

08001ff8 <__aeabi_i2d>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d016      	beq.n	800202c <__aeabi_i2d+0x34>
 8001ffe:	17c3      	asrs	r3, r0, #31
 8002000:	18c5      	adds	r5, r0, r3
 8002002:	405d      	eors	r5, r3
 8002004:	0fc4      	lsrs	r4, r0, #31
 8002006:	0028      	movs	r0, r5
 8002008:	f000 f8f0 	bl	80021ec <__clzsi2>
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <__aeabi_i2d+0x58>)
 800200e:	1a1b      	subs	r3, r3, r0
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	0d5b      	lsrs	r3, r3, #21
 8002014:	280a      	cmp	r0, #10
 8002016:	dc14      	bgt.n	8002042 <__aeabi_i2d+0x4a>
 8002018:	0002      	movs	r2, r0
 800201a:	002e      	movs	r6, r5
 800201c:	3215      	adds	r2, #21
 800201e:	4096      	lsls	r6, r2
 8002020:	220b      	movs	r2, #11
 8002022:	1a12      	subs	r2, r2, r0
 8002024:	40d5      	lsrs	r5, r2
 8002026:	032d      	lsls	r5, r5, #12
 8002028:	0b2d      	lsrs	r5, r5, #12
 800202a:	e003      	b.n	8002034 <__aeabi_i2d+0x3c>
 800202c:	2400      	movs	r4, #0
 800202e:	2300      	movs	r3, #0
 8002030:	2500      	movs	r5, #0
 8002032:	2600      	movs	r6, #0
 8002034:	051b      	lsls	r3, r3, #20
 8002036:	432b      	orrs	r3, r5
 8002038:	07e4      	lsls	r4, r4, #31
 800203a:	4323      	orrs	r3, r4
 800203c:	0030      	movs	r0, r6
 800203e:	0019      	movs	r1, r3
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	380b      	subs	r0, #11
 8002044:	4085      	lsls	r5, r0
 8002046:	032d      	lsls	r5, r5, #12
 8002048:	2600      	movs	r6, #0
 800204a:	0b2d      	lsrs	r5, r5, #12
 800204c:	e7f2      	b.n	8002034 <__aeabi_i2d+0x3c>
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	0000041e 	.word	0x0000041e

08002054 <__aeabi_f2d>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	0242      	lsls	r2, r0, #9
 8002058:	0043      	lsls	r3, r0, #1
 800205a:	0fc4      	lsrs	r4, r0, #31
 800205c:	20fe      	movs	r0, #254	@ 0xfe
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	1c59      	adds	r1, r3, #1
 8002062:	0a55      	lsrs	r5, r2, #9
 8002064:	4208      	tst	r0, r1
 8002066:	d00c      	beq.n	8002082 <__aeabi_f2d+0x2e>
 8002068:	21e0      	movs	r1, #224	@ 0xe0
 800206a:	0089      	lsls	r1, r1, #2
 800206c:	468c      	mov	ip, r1
 800206e:	076d      	lsls	r5, r5, #29
 8002070:	0b12      	lsrs	r2, r2, #12
 8002072:	4463      	add	r3, ip
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	4313      	orrs	r3, r2
 8002078:	07e4      	lsls	r4, r4, #31
 800207a:	4323      	orrs	r3, r4
 800207c:	0028      	movs	r0, r5
 800207e:	0019      	movs	r1, r3
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	2b00      	cmp	r3, #0
 8002084:	d114      	bne.n	80020b0 <__aeabi_f2d+0x5c>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d01b      	beq.n	80020c2 <__aeabi_f2d+0x6e>
 800208a:	0028      	movs	r0, r5
 800208c:	f000 f8ae 	bl	80021ec <__clzsi2>
 8002090:	280a      	cmp	r0, #10
 8002092:	dc1c      	bgt.n	80020ce <__aeabi_f2d+0x7a>
 8002094:	230b      	movs	r3, #11
 8002096:	002a      	movs	r2, r5
 8002098:	1a1b      	subs	r3, r3, r0
 800209a:	40da      	lsrs	r2, r3
 800209c:	0003      	movs	r3, r0
 800209e:	3315      	adds	r3, #21
 80020a0:	409d      	lsls	r5, r3
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <__aeabi_f2d+0x88>)
 80020a4:	0312      	lsls	r2, r2, #12
 80020a6:	1a1b      	subs	r3, r3, r0
 80020a8:	055b      	lsls	r3, r3, #21
 80020aa:	0b12      	lsrs	r2, r2, #12
 80020ac:	0d5b      	lsrs	r3, r3, #21
 80020ae:	e7e1      	b.n	8002074 <__aeabi_f2d+0x20>
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	d009      	beq.n	80020c8 <__aeabi_f2d+0x74>
 80020b4:	0b13      	lsrs	r3, r2, #12
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0312      	lsls	r2, r2, #12
 80020ba:	431a      	orrs	r2, r3
 80020bc:	076d      	lsls	r5, r5, #29
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <__aeabi_f2d+0x8c>)
 80020c0:	e7d8      	b.n	8002074 <__aeabi_f2d+0x20>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	e7d5      	b.n	8002074 <__aeabi_f2d+0x20>
 80020c8:	2200      	movs	r2, #0
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <__aeabi_f2d+0x8c>)
 80020cc:	e7d2      	b.n	8002074 <__aeabi_f2d+0x20>
 80020ce:	0003      	movs	r3, r0
 80020d0:	002a      	movs	r2, r5
 80020d2:	3b0b      	subs	r3, #11
 80020d4:	409a      	lsls	r2, r3
 80020d6:	2500      	movs	r5, #0
 80020d8:	e7e3      	b.n	80020a2 <__aeabi_f2d+0x4e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	00000389 	.word	0x00000389
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__aeabi_d2f>:
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	004b      	lsls	r3, r1, #1
 80020e8:	030f      	lsls	r7, r1, #12
 80020ea:	0d5b      	lsrs	r3, r3, #21
 80020ec:	4c3b      	ldr	r4, [pc, #236]	@ (80021dc <__aeabi_d2f+0xf8>)
 80020ee:	0f45      	lsrs	r5, r0, #29
 80020f0:	b083      	sub	sp, #12
 80020f2:	0a7f      	lsrs	r7, r7, #9
 80020f4:	1c5e      	adds	r6, r3, #1
 80020f6:	432f      	orrs	r7, r5
 80020f8:	9000      	str	r0, [sp, #0]
 80020fa:	9101      	str	r1, [sp, #4]
 80020fc:	0fca      	lsrs	r2, r1, #31
 80020fe:	00c5      	lsls	r5, r0, #3
 8002100:	4226      	tst	r6, r4
 8002102:	d00b      	beq.n	800211c <__aeabi_d2f+0x38>
 8002104:	4936      	ldr	r1, [pc, #216]	@ (80021e0 <__aeabi_d2f+0xfc>)
 8002106:	185c      	adds	r4, r3, r1
 8002108:	2cfe      	cmp	r4, #254	@ 0xfe
 800210a:	dd13      	ble.n	8002134 <__aeabi_d2f+0x50>
 800210c:	20ff      	movs	r0, #255	@ 0xff
 800210e:	2300      	movs	r3, #0
 8002110:	05c0      	lsls	r0, r0, #23
 8002112:	4318      	orrs	r0, r3
 8002114:	07d2      	lsls	r2, r2, #31
 8002116:	4310      	orrs	r0, r2
 8002118:	b003      	add	sp, #12
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <__aeabi_d2f+0x42>
 8002120:	2000      	movs	r0, #0
 8002122:	2300      	movs	r3, #0
 8002124:	e7f4      	b.n	8002110 <__aeabi_d2f+0x2c>
 8002126:	433d      	orrs	r5, r7
 8002128:	d0f0      	beq.n	800210c <__aeabi_d2f+0x28>
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	03db      	lsls	r3, r3, #15
 800212e:	20ff      	movs	r0, #255	@ 0xff
 8002130:	433b      	orrs	r3, r7
 8002132:	e7ed      	b.n	8002110 <__aeabi_d2f+0x2c>
 8002134:	2c00      	cmp	r4, #0
 8002136:	dd14      	ble.n	8002162 <__aeabi_d2f+0x7e>
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	00ff      	lsls	r7, r7, #3
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	4183      	sbcs	r3, r0
 8002142:	0f69      	lsrs	r1, r5, #29
 8002144:	433b      	orrs	r3, r7
 8002146:	430b      	orrs	r3, r1
 8002148:	0759      	lsls	r1, r3, #29
 800214a:	d041      	beq.n	80021d0 <__aeabi_d2f+0xec>
 800214c:	210f      	movs	r1, #15
 800214e:	4019      	ands	r1, r3
 8002150:	2904      	cmp	r1, #4
 8002152:	d028      	beq.n	80021a6 <__aeabi_d2f+0xc2>
 8002154:	3304      	adds	r3, #4
 8002156:	0159      	lsls	r1, r3, #5
 8002158:	d525      	bpl.n	80021a6 <__aeabi_d2f+0xc2>
 800215a:	3401      	adds	r4, #1
 800215c:	2300      	movs	r3, #0
 800215e:	b2e0      	uxtb	r0, r4
 8002160:	e7d6      	b.n	8002110 <__aeabi_d2f+0x2c>
 8002162:	0021      	movs	r1, r4
 8002164:	3117      	adds	r1, #23
 8002166:	dbdb      	blt.n	8002120 <__aeabi_d2f+0x3c>
 8002168:	2180      	movs	r1, #128	@ 0x80
 800216a:	201e      	movs	r0, #30
 800216c:	0409      	lsls	r1, r1, #16
 800216e:	4339      	orrs	r1, r7
 8002170:	1b00      	subs	r0, r0, r4
 8002172:	281f      	cmp	r0, #31
 8002174:	dd1b      	ble.n	80021ae <__aeabi_d2f+0xca>
 8002176:	2602      	movs	r6, #2
 8002178:	4276      	negs	r6, r6
 800217a:	1b34      	subs	r4, r6, r4
 800217c:	000e      	movs	r6, r1
 800217e:	40e6      	lsrs	r6, r4
 8002180:	0034      	movs	r4, r6
 8002182:	2820      	cmp	r0, #32
 8002184:	d004      	beq.n	8002190 <__aeabi_d2f+0xac>
 8002186:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <__aeabi_d2f+0x100>)
 8002188:	4684      	mov	ip, r0
 800218a:	4463      	add	r3, ip
 800218c:	4099      	lsls	r1, r3
 800218e:	430d      	orrs	r5, r1
 8002190:	002b      	movs	r3, r5
 8002192:	1e59      	subs	r1, r3, #1
 8002194:	418b      	sbcs	r3, r1
 8002196:	4323      	orrs	r3, r4
 8002198:	0759      	lsls	r1, r3, #29
 800219a:	d015      	beq.n	80021c8 <__aeabi_d2f+0xe4>
 800219c:	210f      	movs	r1, #15
 800219e:	2400      	movs	r4, #0
 80021a0:	4019      	ands	r1, r3
 80021a2:	2904      	cmp	r1, #4
 80021a4:	d117      	bne.n	80021d6 <__aeabi_d2f+0xf2>
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	0a5b      	lsrs	r3, r3, #9
 80021aa:	b2e0      	uxtb	r0, r4
 80021ac:	e7b0      	b.n	8002110 <__aeabi_d2f+0x2c>
 80021ae:	4c0e      	ldr	r4, [pc, #56]	@ (80021e8 <__aeabi_d2f+0x104>)
 80021b0:	191c      	adds	r4, r3, r4
 80021b2:	002b      	movs	r3, r5
 80021b4:	40a5      	lsls	r5, r4
 80021b6:	40c3      	lsrs	r3, r0
 80021b8:	40a1      	lsls	r1, r4
 80021ba:	1e68      	subs	r0, r5, #1
 80021bc:	4185      	sbcs	r5, r0
 80021be:	4329      	orrs	r1, r5
 80021c0:	430b      	orrs	r3, r1
 80021c2:	2400      	movs	r4, #0
 80021c4:	0759      	lsls	r1, r3, #29
 80021c6:	d1c1      	bne.n	800214c <__aeabi_d2f+0x68>
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	2000      	movs	r0, #0
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	e79f      	b.n	8002110 <__aeabi_d2f+0x2c>
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b2e0      	uxtb	r0, r4
 80021d4:	e79c      	b.n	8002110 <__aeabi_d2f+0x2c>
 80021d6:	3304      	adds	r3, #4
 80021d8:	e7e5      	b.n	80021a6 <__aeabi_d2f+0xc2>
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	000007fe 	.word	0x000007fe
 80021e0:	fffffc80 	.word	0xfffffc80
 80021e4:	fffffca2 	.word	0xfffffca2
 80021e8:	fffffc82 	.word	0xfffffc82

080021ec <__clzsi2>:
 80021ec:	211c      	movs	r1, #28
 80021ee:	2301      	movs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d301      	bcc.n	80021fa <__clzsi2+0xe>
 80021f6:	0c00      	lsrs	r0, r0, #16
 80021f8:	3910      	subs	r1, #16
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	4298      	cmp	r0, r3
 80021fe:	d301      	bcc.n	8002204 <__clzsi2+0x18>
 8002200:	0a00      	lsrs	r0, r0, #8
 8002202:	3908      	subs	r1, #8
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	4298      	cmp	r0, r3
 8002208:	d301      	bcc.n	800220e <__clzsi2+0x22>
 800220a:	0900      	lsrs	r0, r0, #4
 800220c:	3904      	subs	r1, #4
 800220e:	a202      	add	r2, pc, #8	@ (adr r2, 8002218 <__clzsi2+0x2c>)
 8002210:	5c10      	ldrb	r0, [r2, r0]
 8002212:	1840      	adds	r0, r0, r1
 8002214:	4770      	bx	lr
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	02020304 	.word	0x02020304
 800221c:	01010101 	.word	0x01010101
	...

08002228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222e:	f000 fc48 	bl	8002ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002232:	f000 f8e3 	bl	80023fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002236:	f000 fa71 	bl	800271c <MX_GPIO_Init>
  MX_DMA_Init();
 800223a:	f000 fa51 	bl	80026e0 <MX_DMA_Init>
  MX_ADC1_Init();
 800223e:	f000 f921 	bl	8002484 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002242:	f000 f9a1 	bl	8002588 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002246:	f000 f9fd 	bl	8002644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); // Start Timer1 (Trigger Source For ADC1)
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <main+0x170>)
 800224c:	0018      	movs	r0, r3
 800224e:	f002 ffad 	bl	80051ac <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002252:	4b52      	ldr	r3, [pc, #328]	@ (800239c <main+0x174>)
 8002254:	0018      	movs	r0, r3
 8002256:	f001 fd5b 	bl	8003d10 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES, 2);   // Start ADC Conversion
 800225a:	4951      	ldr	r1, [pc, #324]	@ (80023a0 <main+0x178>)
 800225c:	4b4f      	ldr	r3, [pc, #316]	@ (800239c <main+0x174>)
 800225e:	2202      	movs	r2, #2
 8002260:	0018      	movs	r0, r3
 8002262:	f000 ffc5 	bl	80031f0 <HAL_ADC_Start_DMA>
	  if(UpdateEvent){
 8002266:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <main+0x17c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f5      	beq.n	800225a <main+0x32>
		// Calculate The Temperature
		V_Ref = (float)((V_REF_INT * 4095.0) / AD_RES[0]);
 800226e:	4b4c      	ldr	r3, [pc, #304]	@ (80023a0 <main+0x178>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff fec0 	bl	8001ff8 <__aeabi_i2d>
 8002278:	0002      	movs	r2, r0
 800227a:	000b      	movs	r3, r1
 800227c:	484a      	ldr	r0, [pc, #296]	@ (80023a8 <main+0x180>)
 800227e:	494b      	ldr	r1, [pc, #300]	@ (80023ac <main+0x184>)
 8002280:	f7ff f89c 	bl	80013bc <__aeabi_ddiv>
 8002284:	0002      	movs	r2, r0
 8002286:	000b      	movs	r3, r1
 8002288:	0010      	movs	r0, r2
 800228a:	0019      	movs	r1, r3
 800228c:	f7ff ff2a 	bl	80020e4 <__aeabi_d2f>
 8002290:	1c02      	adds	r2, r0, #0
 8002292:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <main+0x188>)
 8002294:	601a      	str	r2, [r3, #0]
		V_Sense = (float)(AD_RES[1] * V_Ref) / 4095.0;
 8002296:	4b42      	ldr	r3, [pc, #264]	@ (80023a0 <main+0x178>)
 8002298:	885b      	ldrh	r3, [r3, #2]
 800229a:	0018      	movs	r0, r3
 800229c:	f7fe fcde 	bl	8000c5c <__aeabi_i2f>
 80022a0:	1c02      	adds	r2, r0, #0
 80022a2:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <main+0x188>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1c19      	adds	r1, r3, #0
 80022a8:	1c10      	adds	r0, r2, #0
 80022aa:	f7fe f9d5 	bl	8000658 <__aeabi_fmul>
 80022ae:	1c03      	adds	r3, r0, #0
 80022b0:	4940      	ldr	r1, [pc, #256]	@ (80023b4 <main+0x18c>)
 80022b2:	1c18      	adds	r0, r3, #0
 80022b4:	f7fe f8b0 	bl	8000418 <__aeabi_fdiv>
 80022b8:	1c03      	adds	r3, r0, #0
 80022ba:	1c1a      	adds	r2, r3, #0
 80022bc:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <main+0x190>)
 80022be:	601a      	str	r2, [r3, #0]
		Temperature = (((V_AT_30C  - V_Sense) * 1000.0) / AVG_SLOPE) + 30.0;
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <main+0x190>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c19      	adds	r1, r3, #0
 80022c6:	483d      	ldr	r0, [pc, #244]	@ (80023bc <main+0x194>)
 80022c8:	f7fe fb04 	bl	80008d4 <__aeabi_fsub>
 80022cc:	1c03      	adds	r3, r0, #0
 80022ce:	1c18      	adds	r0, r3, #0
 80022d0:	f7ff fec0 	bl	8002054 <__aeabi_f2d>
 80022d4:	2200      	movs	r2, #0
 80022d6:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <main+0x198>)
 80022d8:	f7ff fb8a 	bl	80019f0 <__aeabi_dmul>
 80022dc:	0002      	movs	r2, r0
 80022de:	000b      	movs	r3, r1
 80022e0:	0010      	movs	r0, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	22c0      	movs	r2, #192	@ 0xc0
 80022e6:	05d2      	lsls	r2, r2, #23
 80022e8:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <main+0x19c>)
 80022ea:	f7ff f867 	bl	80013bc <__aeabi_ddiv>
 80022ee:	0002      	movs	r2, r0
 80022f0:	000b      	movs	r3, r1
 80022f2:	0010      	movs	r0, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	2200      	movs	r2, #0
 80022f8:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <main+0x1a0>)
 80022fa:	f7fe fcfb 	bl	8000cf4 <__aeabi_dadd>
 80022fe:	0002      	movs	r2, r0
 8002300:	000b      	movs	r3, r1
 8002302:	0010      	movs	r0, r2
 8002304:	0019      	movs	r1, r3
 8002306:	f7ff feed 	bl	80020e4 <__aeabi_d2f>
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <main+0x1a4>)
 800230e:	601a      	str	r2, [r3, #0]
		int parte_inteira = (int)Temperature/1000.0;
 8002310:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <main+0x1a4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c18      	adds	r0, r3, #0
 8002316:	f7fe fc81 	bl	8000c1c <__aeabi_f2iz>
 800231a:	0003      	movs	r3, r0
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff fe6b 	bl	8001ff8 <__aeabi_i2d>
 8002322:	2200      	movs	r2, #0
 8002324:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <main+0x198>)
 8002326:	f7ff f849 	bl	80013bc <__aeabi_ddiv>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0010      	movs	r0, r2
 8002330:	0019      	movs	r1, r3
 8002332:	f7ff fe25 	bl	8001f80 <__aeabi_d2iz>
 8002336:	0003      	movs	r3, r0
 8002338:	607b      	str	r3, [r7, #4]
		int parte_decimal = (int)((Temperature - parte_inteira) * 100.0); // Uma casa decimal
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <main+0x1a4>)
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fc8c 	bl	8000c5c <__aeabi_i2f>
 8002344:	1c03      	adds	r3, r0, #0
 8002346:	1c19      	adds	r1, r3, #0
 8002348:	1c20      	adds	r0, r4, #0
 800234a:	f7fe fac3 	bl	80008d4 <__aeabi_fsub>
 800234e:	1c03      	adds	r3, r0, #0
 8002350:	1c18      	adds	r0, r3, #0
 8002352:	f7ff fe7f 	bl	8002054 <__aeabi_f2d>
 8002356:	2200      	movs	r2, #0
 8002358:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <main+0x1a8>)
 800235a:	f7ff fb49 	bl	80019f0 <__aeabi_dmul>
 800235e:	0002      	movs	r2, r0
 8002360:	000b      	movs	r3, r1
 8002362:	0010      	movs	r0, r2
 8002364:	0019      	movs	r1, r3
 8002366:	f7ff fe0b 	bl	8001f80 <__aeabi_d2iz>
 800236a:	0003      	movs	r3, r0
 800236c:	603b      	str	r3, [r7, #0]

	   // Send The Result To PC Over Serial Port
	   sprintf(TxBuffer, "Temperatura: %d.%02d\r\n", parte_inteira, parte_decimal);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4918      	ldr	r1, [pc, #96]	@ (80023d4 <main+0x1ac>)
 8002374:	4818      	ldr	r0, [pc, #96]	@ (80023d8 <main+0x1b0>)
 8002376:	f003 ff5f 	bl	8006238 <siprintf>
	   HAL_UART_Transmit(&huart1, (uint8_t*)TxBuffer, strlen(TxBuffer), 100);
 800237a:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <main+0x1b0>)
 800237c:	0018      	movs	r0, r3
 800237e:	f7fd fec3 	bl	8000108 <strlen>
 8002382:	0003      	movs	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	4914      	ldr	r1, [pc, #80]	@ (80023d8 <main+0x1b0>)
 8002388:	4814      	ldr	r0, [pc, #80]	@ (80023dc <main+0x1b4>)
 800238a:	2364      	movs	r3, #100	@ 0x64
 800238c:	f003 f9ea 	bl	8005764 <HAL_UART_Transmit>
	   UpdateEvent = 0;
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <main+0x17c>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES, 2);   // Start ADC Conversion
 8002396:	e760      	b.n	800225a <main+0x32>
 8002398:	20000138 	.word	0x20000138
 800239c:	20000078 	.word	0x20000078
 80023a0:	2000021c 	.word	0x2000021c
 80023a4:	20000218 	.word	0x20000218
 80023a8:	67ae0000 	.word	0x67ae0000
 80023ac:	40b1ea66 	.word	0x40b1ea66
 80023b0:	20000228 	.word	0x20000228
 80023b4:	457ff000 	.word	0x457ff000
 80023b8:	20000224 	.word	0x20000224
 80023bc:	3f428f5c 	.word	0x3f428f5c
 80023c0:	408f4000 	.word	0x408f4000
 80023c4:	3f64b9cb 	.word	0x3f64b9cb
 80023c8:	403e0000 	.word	0x403e0000
 80023cc:	20000220 	.word	0x20000220
 80023d0:	40590000 	.word	0x40590000
 80023d4:	08006b8c 	.word	0x08006b8c
 80023d8:	2000022c 	.word	0x2000022c
 80023dc:	20000184 	.word	0x20000184

080023e0 <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    UpdateEvent = 1;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_ADC_ConvCpltCallback+0x18>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	20000218 	.word	0x20000218

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b08d      	sub	sp, #52	@ 0x34
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	2414      	movs	r4, #20
 8002404:	193b      	adds	r3, r7, r4
 8002406:	0018      	movs	r0, r3
 8002408:	231c      	movs	r3, #28
 800240a:	001a      	movs	r2, r3
 800240c:	2100      	movs	r1, #0
 800240e:	f003 ff33 	bl	8006278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002412:	003b      	movs	r3, r7
 8002414:	0018      	movs	r0, r3
 8002416:	2314      	movs	r3, #20
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f003 ff2c 	bl	8006278 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002420:	193b      	adds	r3, r7, r4
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002426:	193b      	adds	r3, r7, r4
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	0052      	lsls	r2, r2, #1
 800242c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002434:	193b      	adds	r3, r7, r4
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243a:	193b      	adds	r3, r7, r4
 800243c:	0018      	movs	r0, r3
 800243e:	f002 fa1d 	bl	800487c <HAL_RCC_OscConfig>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002446:	f000 f97f 	bl	8002748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244a:	003b      	movs	r3, r7
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002450:	003b      	movs	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002456:	003b      	movs	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800245c:	003b      	movs	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002462:	003b      	movs	r3, r7
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002468:	003b      	movs	r3, r7
 800246a:	2101      	movs	r1, #1
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fbe9 	bl	8004c44 <HAL_RCC_ClockConfig>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002476:	f000 f967 	bl	8002748 <Error_Handler>
  }
}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b00d      	add	sp, #52	@ 0x34
 8002480:	bd90      	pop	{r4, r7, pc}
	...

08002484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	0018      	movs	r0, r3
 800248e:	230c      	movs	r3, #12
 8002490:	001a      	movs	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	f003 fef0 	bl	8006278 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <MX_ADC1_Init+0xf4>)
 800249a:	4a38      	ldr	r2, [pc, #224]	@ (800257c <MX_ADC1_Init+0xf8>)
 800249c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800249e:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	05d2      	lsls	r2, r2, #23
 80024a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024a6:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ac:	4b32      	ldr	r3, [pc, #200]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	0392      	lsls	r2, r2, #14
 80024b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024bc:	2204      	movs	r2, #4
 80024be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80024c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80024d2:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024da:	2220      	movs	r2, #32
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	00d2      	lsls	r2, r2, #3
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	00d2      	lsls	r2, r2, #3
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024f0:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024f2:	222c      	movs	r2, #44	@ 0x2c
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <MX_ADC1_Init+0xf4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <MX_ADC1_Init+0xf4>)
 8002500:	2207      	movs	r2, #7
 8002502:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002504:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <MX_ADC1_Init+0xf4>)
 8002506:	2207      	movs	r2, #7
 8002508:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800250a:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <MX_ADC1_Init+0xf4>)
 800250c:	223c      	movs	r2, #60	@ 0x3c
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002512:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <MX_ADC1_Init+0xf4>)
 8002514:	2200      	movs	r2, #0
 8002516:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_ADC1_Init+0xf4>)
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fcc2 	bl	8002ea4 <HAL_ADC_Init>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8002524:	f000 f910 	bl	8002748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <MX_ADC1_Init+0xfc>)
 800252c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253a:	1d3a      	adds	r2, r7, #4
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_ADC1_Init+0xf4>)
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f001 f813 	bl	800356c <HAL_ADC_ConfigChannel>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800254a:	f000 f8fd 	bl	8002748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4a0c      	ldr	r2, [pc, #48]	@ (8002584 <MX_ADC1_Init+0x100>)
 8002552:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2204      	movs	r2, #4
 8002558:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255a:	1d3a      	adds	r2, r7, #4
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_ADC1_Init+0xf4>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f001 f803 	bl	800356c <HAL_ADC_ConfigChannel>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d001      	beq.n	800256e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800256a:	f000 f8ed 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	20000078 	.word	0x20000078
 800257c:	40012400 	.word	0x40012400
 8002580:	a8000400 	.word	0xa8000400
 8002584:	a4000200 	.word	0xa4000200

08002588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	2310      	movs	r3, #16
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	0018      	movs	r0, r3
 8002594:	2310      	movs	r3, #16
 8002596:	001a      	movs	r2, r3
 8002598:	2100      	movs	r1, #0
 800259a:	f003 fe6d 	bl	8006278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	0018      	movs	r0, r3
 80025a2:	230c      	movs	r3, #12
 80025a4:	001a      	movs	r2, r3
 80025a6:	2100      	movs	r1, #0
 80025a8:	f003 fe66 	bl	8006278 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025ae:	4a22      	ldr	r2, [pc, #136]	@ (8002638 <MX_TIM1_Init+0xb0>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025b4:	4a21      	ldr	r2, [pc, #132]	@ (800263c <MX_TIM1_Init+0xb4>)
 80025b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 960-1;
 80025be:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002640 <MX_TIM1_Init+0xb8>)
 80025c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d0:	4b18      	ldr	r3, [pc, #96]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025d8:	0018      	movs	r0, r3
 80025da:	f002 fd8f 	bl	80050fc <HAL_TIM_Base_Init>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80025e2:	f000 f8b1 	bl	8002748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e6:	2110      	movs	r1, #16
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	0152      	lsls	r2, r2, #5
 80025ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025f0:	187a      	adds	r2, r7, r1
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <MX_TIM1_Init+0xac>)
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 fe1e 	bl	8005238 <HAL_TIM_ConfigClockSource>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002600:	f000 f8a2 	bl	8002748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2220      	movs	r2, #32
 8002608:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	0392      	lsls	r2, r2, #14
 8002610:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002618:	1d3a      	adds	r2, r7, #4
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_TIM1_Init+0xac>)
 800261c:	0011      	movs	r1, r2
 800261e:	0018      	movs	r0, r3
 8002620:	f002 ffe8 	bl	80055f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002628:	f000 f88e 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b008      	add	sp, #32
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000138 	.word	0x20000138
 8002638:	40012c00 	.word	0x40012c00
 800263c:	000003e7 	.word	0x000003e7
 8002640:	000003bf 	.word	0x000003bf

08002644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800264a:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <MX_USART1_UART_Init+0x98>)
 800264c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002650:	22e1      	movs	r2, #225	@ 0xe1
 8002652:	0252      	lsls	r2, r2, #9
 8002654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002662:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800268e:	0018      	movs	r0, r3
 8002690:	f003 f812 	bl	80056b8 <HAL_UART_Init>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002698:	f000 f856 	bl	8002748 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 800269e:	2100      	movs	r1, #0
 80026a0:	0018      	movs	r0, r3
 80026a2:	f003 fce9 	bl	8006078 <HAL_UARTEx_SetTxFifoThreshold>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026aa:	f000 f84d 	bl	8002748 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 80026b0:	2100      	movs	r1, #0
 80026b2:	0018      	movs	r0, r3
 80026b4:	f003 fd20 	bl	80060f8 <HAL_UARTEx_SetRxFifoThreshold>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026bc:	f000 f844 	bl	8002748 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <MX_USART1_UART_Init+0x94>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f003 fc9e 	bl	8006004 <HAL_UARTEx_DisableFifoMode>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026cc:	f000 f83c 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d0:	46c0      	nop			@ (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	20000184 	.word	0x20000184
 80026dc:	40013800 	.word	0x40013800

080026e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <MX_DMA_Init+0x38>)
 80026e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <MX_DMA_Init+0x38>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <MX_DMA_Init+0x38>)
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2009      	movs	r0, #9
 8002704:	f001 fcca 	bl	800409c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002708:	2009      	movs	r0, #9
 800270a:	f001 fcdc 	bl	80040c6 <HAL_NVIC_EnableIRQ>

}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	40021000 	.word	0x40021000

0800271c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <MX_GPIO_Init+0x28>)
 8002724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <MX_GPIO_Init+0x28>)
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	@ 0x34
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <MX_GPIO_Init+0x28>)
 8002730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	40021000 	.word	0x40021000

08002748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800274c:	b672      	cpsid	i
}
 800274e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	e7fd      	b.n	8002750 <Error_Handler+0x8>

08002754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_MspInit+0x50>)
 800275c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_MspInit+0x50>)
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <HAL_MspInit+0x50>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2201      	movs	r2, #1
 800276c:	4013      	ands	r3, r2
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <HAL_MspInit+0x50>)
 8002774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_MspInit+0x50>)
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	0549      	lsls	r1, r1, #21
 800277c:	430a      	orrs	r2, r1
 800277e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_MspInit+0x50>)
 8002782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	4013      	ands	r3, r2
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800278e:	2008      	movs	r0, #8
 8002790:	f000 fa14 	bl	8002bbc <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002794:	2010      	movs	r0, #16
 8002796:	f000 fa11 	bl	8002bbc <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b002      	add	sp, #8
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08b      	sub	sp, #44	@ 0x2c
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b0:	240c      	movs	r4, #12
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	0018      	movs	r0, r3
 80027b6:	231c      	movs	r3, #28
 80027b8:	001a      	movs	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	f003 fd5c 	bl	8006278 <memset>
  if(hadc->Instance==ADC1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002874 <HAL_ADC_MspInit+0xcc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d14f      	bne.n	800286a <HAL_ADC_MspInit+0xc2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2280      	movs	r2, #128	@ 0x80
 80027ce:	01d2      	lsls	r2, r2, #7
 80027d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	0018      	movs	r0, r3
 80027dc:	f002 fba0 	bl	8004f20 <HAL_RCCEx_PeriphCLKConfig>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80027e4:	f7ff ffb0 	bl	8002748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_ADC_MspInit+0xd0>)
 80027ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_ADC_MspInit+0xd0>)
 80027ee:	2180      	movs	r1, #128	@ 0x80
 80027f0:	0349      	lsls	r1, r1, #13
 80027f2:	430a      	orrs	r2, r1
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_ADC_MspInit+0xd0>)
 80027f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	035b      	lsls	r3, r3, #13
 80027fe:	4013      	ands	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002806:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <HAL_ADC_MspInit+0xd8>)
 8002808:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 800280c:	2205      	movs	r2, #5
 800280e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	0052      	lsls	r2, r2, #1
 8002828:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 800282c:	2280      	movs	r2, #128	@ 0x80
 800282e:	00d2      	lsls	r2, r2, #3
 8002830:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002832:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002834:	2220      	movs	r2, #32
 8002836:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800283e:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fc5d 	bl	8004100 <HAL_DMA_Init>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d001      	beq.n	800284e <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 800284a:	f7ff ff7d 	bl	8002748 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002852:	651a      	str	r2, [r3, #80]	@ 0x50
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_ADC_MspInit+0xd4>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	200c      	movs	r0, #12
 8002860:	f001 fc1c 	bl	800409c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002864:	200c      	movs	r0, #12
 8002866:	f001 fc2e 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b00b      	add	sp, #44	@ 0x2c
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	40012400 	.word	0x40012400
 8002878:	40021000 	.word	0x40021000
 800287c:	200000dc 	.word	0x200000dc
 8002880:	40020008 	.word	0x40020008

08002884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_TIM_Base_MspInit+0x38>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10d      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800289a:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_TIM_Base_MspInit+0x3c>)
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	0109      	lsls	r1, r1, #4
 80028a0:	430a      	orrs	r2, r1
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_TIM_Base_MspInit+0x3c>)
 80028a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b091      	sub	sp, #68	@ 0x44
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	232c      	movs	r3, #44	@ 0x2c
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	0018      	movs	r0, r3
 80028d2:	2314      	movs	r3, #20
 80028d4:	001a      	movs	r2, r3
 80028d6:	2100      	movs	r1, #0
 80028d8:	f003 fcce 	bl	8006278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028dc:	2410      	movs	r4, #16
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	0018      	movs	r0, r3
 80028e2:	231c      	movs	r3, #28
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f003 fcc6 	bl	8006278 <memset>
  if(huart->Instance==USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <HAL_UART_MspInit+0xbc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d13f      	bne.n	8002976 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002902:	193b      	adds	r3, r7, r4
 8002904:	0018      	movs	r0, r3
 8002906:	f002 fb0b 	bl	8004f20 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800290e:	f7ff ff1b 	bl	8002748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 8002914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 8002918:	2180      	movs	r1, #128	@ 0x80
 800291a:	01c9      	lsls	r1, r1, #7
 800291c:	430a      	orrs	r2, r1
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 8002922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 8002930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	635a      	str	r2, [r3, #52]	@ 0x34
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_UART_MspInit+0xc0>)
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	2201      	movs	r2, #1
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002946:	212c      	movs	r1, #44	@ 0x2c
 8002948:	187b      	adds	r3, r7, r1
 800294a:	22c0      	movs	r2, #192	@ 0xc0
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2202      	movs	r2, #2
 8002954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2201      	movs	r2, #1
 8002966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	187a      	adds	r2, r7, r1
 800296a:	23a0      	movs	r3, #160	@ 0xa0
 800296c:	05db      	lsls	r3, r3, #23
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f001 fe19 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b011      	add	sp, #68	@ 0x44
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40013800 	.word	0x40013800
 8002984:	40021000 	.word	0x40021000

08002988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	e7fd      	b.n	800298c <NMI_Handler+0x4>

08002990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	e7fd      	b.n	8002994 <HardFault_Handler+0x4>

08002998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 f8e8 	bl	8002b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <DMA1_Channel1_IRQHandler+0x14>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 fcae 	bl	8004324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	200000dc 	.word	0x200000dc

080029d4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <ADC1_IRQHandler+0x14>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 fc96 	bl	800330c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	20000078 	.word	0x20000078

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f003 fc34 	bl	8006288 <__errno>
 8002a20:	0003      	movs	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	425b      	negs	r3, r3
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	18d2      	adds	r2, r2, r3
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <_sbrk+0x64>)
 8002a3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b006      	add	sp, #24
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20001800 	.word	0x20001800
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	2000024c 	.word	0x2000024c
 8002a54:	200003a0 	.word	0x200003a0

08002a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <SystemInit+0x14>)
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	0512      	lsls	r2, r2, #20
 8002a62:	609a      	str	r2, [r3, #8]
#endif
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a70:	480d      	ldr	r0, [pc, #52]	@ (8002aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a74:	f7ff fff0 	bl	8002a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a7a:	e003      	b.n	8002a84 <LoopCopyDataInit>

08002a7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002a7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a82:	3104      	adds	r1, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a84:	480a      	ldr	r0, [pc, #40]	@ (8002ab0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002a88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a8c:	d3f6      	bcc.n	8002a7c <CopyDataInit>
  ldr r2, =_sbss
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <LoopForever+0x12>)
  b LoopFillZerobss
 8002a90:	e002      	b.n	8002a98 <LoopFillZerobss>

08002a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a96:	3204      	adds	r2, #4

08002a98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <LoopForever+0x16>)
  cmp r2, r3
 8002a9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a9c:	d3f9      	bcc.n	8002a92 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a9e:	f003 fbf9 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aa2:	f7ff fbc1 	bl	8002228 <main>

08002aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8002aa6:	e7fe      	b.n	8002aa6 <LoopForever>
  ldr   r0, =_estack
 8002aa8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002aac:	08006d24 	.word	0x08006d24
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ab4:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8002ab8:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8002abc:	2000039c 	.word	0x2000039c

08002ac0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <DMA1_Channel2_3_IRQHandler>

08002ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f000 f80e 	bl	8002af0 <HAL_InitTick>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e001      	b.n	8002ae4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae0:	f7ff fe38 	bl	8002754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002af8:	230f      	movs	r3, #15
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_InitTick+0x88>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02b      	beq.n	8002b60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002b08:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <HAL_InitTick+0x8c>)
 8002b0a:	681c      	ldr	r4, [r3, #0]
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_InitTick+0x88>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	0019      	movs	r1, r3
 8002b12:	23fa      	movs	r3, #250	@ 0xfa
 8002b14:	0098      	lsls	r0, r3, #2
 8002b16:	f7fd fb09 	bl	800012c <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f7fd fb04 	bl	800012c <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	0018      	movs	r0, r3
 8002b28:	f001 fadd 	bl	80040e6 <HAL_SYSTICK_Config>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d112      	bne.n	8002b56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d80a      	bhi.n	8002b4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 faac 	bl	800409c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <HAL_InitTick+0x90>)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e00d      	b.n	8002b68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e008      	b.n	8002b68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b56:	230f      	movs	r3, #15
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e003      	b.n	8002b68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b68:	230f      	movs	r3, #15
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b005      	add	sp, #20
 8002b74:	bd90      	pop	{r4, r7, pc}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_IncTick+0x1c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_IncTick+0x20>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	18d2      	adds	r2, r2, r3
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_IncTick+0x20>)
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	20000250 	.word	0x20000250

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b02      	ldr	r3, [pc, #8]	@ (8002bb8 <HAL_GetTick+0x10>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	20000250 	.word	0x20000250

08002bbc <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_SYSCFG_EnableRemap+0x1c>)
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010000 	.word	0x40010000

08002bdc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002bec:	401a      	ands	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	ff3fffff 	.word	0xff3fffff

08002c04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	23c0      	movs	r3, #192	@ 0xc0
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	4013      	ands	r3, r2
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	2104      	movs	r1, #4
 8002c32:	400a      	ands	r2, r1
 8002c34:	2107      	movs	r1, #7
 8002c36:	4091      	lsls	r1, r2
 8002c38:	000a      	movs	r2, r1
 8002c3a:	43d2      	mvns	r2, r2
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2104      	movs	r1, #4
 8002c42:	400b      	ands	r3, r1
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4099      	lsls	r1, r3
 8002c48:	000b      	movs	r3, r1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	2104      	movs	r1, #4
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	2107      	movs	r1, #7
 8002c6e:	4091      	lsls	r1, r2
 8002c70:	000a      	movs	r2, r1
 8002c72:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2104      	movs	r1, #4
 8002c78:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c7a:	40da      	lsrs	r2, r3
 8002c7c:	0013      	movs	r3, r2
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	211f      	movs	r1, #31
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	4091      	lsls	r1, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	43d2      	mvns	r2, r2
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	210f      	movs	r1, #15
 8002cce:	4019      	ands	r1, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	201f      	movs	r0, #31
 8002cd4:	4003      	ands	r3, r0
 8002cd6:	4099      	lsls	r1, r3
 8002cd8:	000b      	movs	r3, r1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	0a5b      	lsrs	r3, r3, #9
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	0252      	lsls	r2, r2, #9
 8002d1c:	0a52      	lsrs	r2, r2, #9
 8002d1e:	43d2      	mvns	r2, r2
 8002d20:	401a      	ands	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	4013      	ands	r3, r2
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	0212      	lsls	r2, r2, #8
 8002d5c:	43d2      	mvns	r2, r2
 8002d5e:	401a      	ands	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	400b      	ands	r3, r1
 8002d68:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	7fffff00 	.word	0x7fffff00

08002d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a05      	ldr	r2, [pc, #20]	@ (8002da4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	0552      	lsls	r2, r2, #21
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	6fffffe8 	.word	0x6fffffe8

08002da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	401a      	ands	r2, r3
 8002dba:	2380      	movs	r3, #128	@ 0x80
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <LL_ADC_Enable+0x20>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	2201      	movs	r2, #1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	7fffffe8 	.word	0x7fffffe8

08002df4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <LL_ADC_Disable+0x20>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	2202      	movs	r2, #2
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	7fffffe8 	.word	0x7fffffe8

08002e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_IsEnabled+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_IsEnabled+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d101      	bne.n	8002e52 <LL_ADC_IsDisableOngoing+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_ADC_IsDisableOngoing+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <LL_ADC_REG_StartConversion+0x20>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	7fffffe8 	.word	0x7fffffe8

08002e80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	231f      	movs	r3, #31
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e17e      	b.n	80031c8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fc67 	bl	80027a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2254      	movs	r2, #84	@ 0x54
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ff5b 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d114      	bne.n	8002f20 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff ff40 	bl	8002d80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f00:	4bb3      	ldr	r3, [pc, #716]	@ (80031d0 <HAL_ADC_Init+0x32c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	49b3      	ldr	r1, [pc, #716]	@ (80031d4 <HAL_ADC_Init+0x330>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd f910 	bl	800012c <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f12:	e002      	b.n	8002f1a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f9      	bne.n	8002f14 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ff3f 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	2210      	movs	r2, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f46:	231f      	movs	r3, #31
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ff94 	bl	8002e80 <LL_ADC_REG_IsConversionOngoing>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d000      	beq.n	8002f68 <HAL_ADC_Init+0xc4>
 8002f66:	e122      	b.n	80031ae <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d000      	beq.n	8002f70 <HAL_ADC_Init+0xcc>
 8002f6e:	e11e      	b.n	80031ae <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	4a98      	ldr	r2, [pc, #608]	@ (80031d8 <HAL_ADC_Init+0x334>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	2202      	movs	r2, #2
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff ff47 	bl	8002e18 <LL_ADC_IsEnabled>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d000      	beq.n	8002f90 <HAL_ADC_Init+0xec>
 8002f8e:	e0ad      	b.n	80030ec <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
 8002f98:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7e5b      	ldrb	r3, [r3, #25]
 8002fa0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002fa2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e9b      	ldrb	r3, [r3, #26]
 8002fa8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002faa:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_ADC_Init+0x116>
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_Init+0x118>
 8002fba:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fbc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fc2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da04      	bge.n	8002fd6 <HAL_ADC_Init+0x132>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	e001      	b.n	8002fda <HAL_ADC_Init+0x136>
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002fda:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	212c      	movs	r1, #44	@ 0x2c
 8002fe0:	5c5b      	ldrb	r3, [r3, r1]
 8002fe2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fe4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d115      	bne.n	8003022 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7e9b      	ldrb	r3, [r3, #26]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	0252      	lsls	r2, r2, #9
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	e00b      	b.n	8003022 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	2220      	movs	r2, #32
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	2201      	movs	r2, #1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302e:	23e0      	movs	r3, #224	@ 0xe0
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003038:	4313      	orrs	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a65      	ldr	r2, [pc, #404]	@ (80031dc <HAL_ADC_Init+0x338>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0f9b      	lsrs	r3, r3, #30
 800305c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003062:	4313      	orrs	r3, r2
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223c      	movs	r2, #60	@ 0x3c
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d111      	bne.n	8003098 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0f9b      	lsrs	r3, r3, #30
 800307a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003080:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003086:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800308c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	2201      	movs	r2, #1
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	4a50      	ldr	r2, [pc, #320]	@ (80031e0 <HAL_ADC_Init+0x33c>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	23c0      	movs	r3, #192	@ 0xc0
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d018      	beq.n	80030ec <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	05db      	lsls	r3, r3, #23
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d012      	beq.n	80030ec <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d00c      	beq.n	80030ec <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80030d2:	4b44      	ldr	r3, [pc, #272]	@ (80031e4 <HAL_ADC_Init+0x340>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a44      	ldr	r2, [pc, #272]	@ (80031e8 <HAL_ADC_Init+0x344>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	23f0      	movs	r3, #240	@ 0xf0
 80030e2:	039b      	lsls	r3, r3, #14
 80030e4:	401a      	ands	r2, r3
 80030e6:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <HAL_ADC_Init+0x340>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f4:	001a      	movs	r2, r3
 80030f6:	2100      	movs	r1, #0
 80030f8:	f7ff fd91 	bl	8002c1e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	4939      	ldr	r1, [pc, #228]	@ (80031ec <HAL_ADC_Init+0x348>)
 8003106:	001a      	movs	r2, r3
 8003108:	f7ff fd89 	bl	8002c1e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2110      	movs	r1, #16
 8003120:	4249      	negs	r1, r1
 8003122:	430a      	orrs	r2, r1
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
 8003126:	e018      	b.n	800315a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	039b      	lsls	r3, r3, #14
 8003130:	429a      	cmp	r2, r3
 8003132:	d112      	bne.n	800315a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	3b01      	subs	r3, #1
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	221c      	movs	r2, #28
 8003144:	4013      	ands	r3, r2
 8003146:	2210      	movs	r2, #16
 8003148:	4252      	negs	r2, r2
 800314a:	409a      	lsls	r2, r3
 800314c:	0011      	movs	r1, r2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2100      	movs	r1, #0
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fd79 	bl	8002c58 <LL_ADC_GetSamplingTimeCommonChannels>
 8003166:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800316c:	429a      	cmp	r2, r3
 800316e:	d10b      	bne.n	8003188 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	2203      	movs	r2, #3
 800317c:	4393      	bics	r3, r2
 800317e:	2201      	movs	r2, #1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003186:	e01c      	b.n	80031c2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	2212      	movs	r2, #18
 800318e:	4393      	bics	r3, r2
 8003190:	2210      	movs	r2, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	2201      	movs	r2, #1
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80031a4:	231f      	movs	r3, #31
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031ac:	e009      	b.n	80031c2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	2210      	movs	r2, #16
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031ba:	231f      	movs	r3, #31
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	781b      	ldrb	r3, [r3, #0]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b008      	add	sp, #32
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000000 	.word	0x20000000
 80031d4:	00030d40 	.word	0x00030d40
 80031d8:	fffffefd 	.word	0xfffffefd
 80031dc:	ffde0201 	.word	0xffde0201
 80031e0:	1ffffc02 	.word	0x1ffffc02
 80031e4:	40012708 	.word	0x40012708
 80031e8:	ffc3ffff 	.word	0xffc3ffff
 80031ec:	7fffff04 	.word	0x7fffff04

080031f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031f0:	b5b0      	push	{r4, r5, r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff fe3d 	bl	8002e80 <LL_ADC_REG_IsConversionOngoing>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d16c      	bne.n	80032e4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2254      	movs	r2, #84	@ 0x54
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADC_Start_DMA+0x28>
 8003214:	2302      	movs	r3, #2
 8003216:	e06c      	b.n	80032f2 <HAL_ADC_Start_DMA+0x102>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2254      	movs	r2, #84	@ 0x54
 800321c:	2101      	movs	r1, #1
 800321e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d113      	bne.n	8003254 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fdf1 	bl	8002e18 <LL_ADC_IsEnabled>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d004      	beq.n	8003244 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff fdd8 	bl	8002df4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003254:	2517      	movs	r5, #23
 8003256:	197c      	adds	r4, r7, r5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fb5c 	bl	8003918 <ADC_Enable>
 8003260:	0003      	movs	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003264:	002c      	movs	r4, r5
 8003266:	193b      	adds	r3, r7, r4
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d13e      	bne.n	80032ec <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_ADC_Start_DMA+0x10c>)
 8003274:	4013      	ands	r3, r2
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	0052      	lsls	r2, r2, #1
 800327a:	431a      	orrs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <HAL_ADC_Start_DMA+0x110>)
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_ADC_Start_DMA+0x114>)
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <HAL_ADC_Start_DMA+0x118>)
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	221c      	movs	r2, #28
 80032a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2254      	movs	r2, #84	@ 0x54
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2110      	movs	r1, #16
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3340      	adds	r3, #64	@ 0x40
 80032c8:	0019      	movs	r1, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	193c      	adds	r4, r7, r4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f000 ffa0 	bl	8004214 <HAL_DMA_Start_IT>
 80032d4:	0003      	movs	r3, r0
 80032d6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff fdbd 	bl	8002e5c <LL_ADC_REG_StartConversion>
 80032e2:	e003      	b.n	80032ec <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032e4:	2317      	movs	r3, #23
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ec:	2317      	movs	r3, #23
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	781b      	ldrb	r3, [r3, #0]
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bdb0      	pop	{r4, r5, r7, pc}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	fffff0fe 	.word	0xfffff0fe
 8003300:	08003ac5 	.word	0x08003ac5
 8003304:	08003b8d 	.word	0x08003b8d
 8003308:	08003bab 	.word	0x08003bab

0800330c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d017      	beq.n	8003360 <HAL_ADC_IRQHandler+0x54>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2202      	movs	r2, #2
 8003334:	4013      	ands	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	2210      	movs	r2, #16
 800333e:	4013      	ands	r3, r2
 8003340:	d106      	bne.n	8003350 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	2280      	movs	r2, #128	@ 0x80
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	0018      	movs	r0, r3
 8003354:	f000 fde6 	bl	8003f24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2202      	movs	r2, #2
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d003      	beq.n	8003370 <HAL_ADC_IRQHandler+0x64>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2204      	movs	r2, #4
 800336c:	4013      	ands	r3, r2
 800336e:	d107      	bne.n	8003380 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003376:	d04d      	beq.n	8003414 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2208      	movs	r2, #8
 800337c:	4013      	ands	r3, r2
 800337e:	d049      	beq.n	8003414 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	2210      	movs	r2, #16
 8003386:	4013      	ands	r3, r2
 8003388:	d106      	bne.n	8003398 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fc72 	bl	8002c86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d02e      	beq.n	8003404 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7e9b      	ldrb	r3, [r3, #26]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d12a      	bne.n	8003404 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2208      	movs	r2, #8
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d123      	bne.n	8003404 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7ff fd5d 	bl	8002e80 <LL_ADC_REG_IsConversionOngoing>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d110      	bne.n	80033ec <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	210c      	movs	r1, #12
 80033d6:	438a      	bics	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033de:	4a56      	ldr	r2, [pc, #344]	@ (8003538 <HAL_ADC_IRQHandler+0x22c>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	2201      	movs	r2, #1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ea:	e00b      	b.n	8003404 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	2220      	movs	r2, #32
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2201      	movs	r2, #1
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f7fe ffea 	bl	80023e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	220c      	movs	r2, #12
 8003412:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	4013      	ands	r3, r2
 800341a:	d012      	beq.n	8003442 <HAL_ADC_IRQHandler+0x136>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	4013      	ands	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	0252      	lsls	r2, r2, #9
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f889 	bl	800354c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2280      	movs	r2, #128	@ 0x80
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d014      	beq.n	8003476 <HAL_ADC_IRQHandler+0x16a>
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4013      	ands	r3, r2
 8003454:	d00f      	beq.n	8003476 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	0292      	lsls	r2, r2, #10
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fd4c 	bl	8003f04 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	0052      	lsls	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4013      	ands	r3, r2
 800347e:	d014      	beq.n	80034aa <HAL_ADC_IRQHandler+0x19e>
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4013      	ands	r3, r2
 8003488:	d00f      	beq.n	80034aa <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	02d2      	lsls	r2, r2, #11
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fd3a 	bl	8003f14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2280      	movs	r2, #128	@ 0x80
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2210      	movs	r2, #16
 80034ae:	4013      	ands	r3, r2
 80034b0:	d02b      	beq.n	800350a <HAL_ADC_IRQHandler+0x1fe>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2210      	movs	r2, #16
 80034b6:	4013      	ands	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e008      	b.n	80034da <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fc2e 	bl	8002d2e <LL_ADC_REG_GetDMATransfer>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d110      	bne.n	8003502 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	00d2      	lsls	r2, r2, #3
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	2202      	movs	r2, #2
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f82d 	bl	800355c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	4013      	ands	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_ADC_IRQHandler+0x224>
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	4013      	ands	r3, r2
 800351c:	d008      	beq.n	8003530 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fd07 	bl	8003f34 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2280      	movs	r2, #128	@ 0x80
 800352c:	0192      	lsls	r2, r2, #6
 800352e:	601a      	str	r2, [r3, #0]
  }
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fffffefe 	.word	0xfffffefe

0800353c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2317      	movs	r3, #23
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2254      	movs	r2, #84	@ 0x54
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x24>
 800358c:	2302      	movs	r3, #2
 800358e:	e1be      	b.n	800390e <HAL_ADC_ConfigChannel+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2254      	movs	r2, #84	@ 0x54
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff fc6f 	bl	8002e80 <LL_ADC_REG_IsConversionOngoing>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d000      	beq.n	80035a8 <HAL_ADC_ConfigChannel+0x3c>
 80035a6:	e1a1      	b.n	80038ec <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d100      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x46>
 80035b0:	e152      	b.n	8003858 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035c2:	4ac2      	ldr	r2, [pc, #776]	@ (80038cc <HAL_ADC_ConfigChannel+0x360>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0019      	movs	r1, r3
 80035d2:	0010      	movs	r0, r2
 80035d4:	f7ff fb88 	bl	8002ce8 <LL_ADC_REG_SetSequencerChAdd>
 80035d8:	e0ed      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	211f      	movs	r1, #31
 80035e4:	400b      	ands	r3, r1
 80035e6:	210f      	movs	r1, #15
 80035e8:	4099      	lsls	r1, r3
 80035ea:	000b      	movs	r3, r1
 80035ec:	43db      	mvns	r3, r3
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	0a5b      	lsrs	r3, r3, #9
 80035fa:	d105      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x9c>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	221f      	movs	r2, #31
 8003604:	4013      	ands	r3, r2
 8003606:	e0bc      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d000      	beq.n	8003614 <HAL_ADC_ConfigChannel+0xa8>
 8003612:	e0b5      	b.n	8003780 <HAL_ADC_ConfigChannel+0x214>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2202      	movs	r2, #2
 800361a:	4013      	ands	r3, r2
 800361c:	d000      	beq.n	8003620 <HAL_ADC_ConfigChannel+0xb4>
 800361e:	e0ad      	b.n	800377c <HAL_ADC_ConfigChannel+0x210>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2204      	movs	r2, #4
 8003626:	4013      	ands	r3, r2
 8003628:	d000      	beq.n	800362c <HAL_ADC_ConfigChannel+0xc0>
 800362a:	e0a5      	b.n	8003778 <HAL_ADC_ConfigChannel+0x20c>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2208      	movs	r2, #8
 8003632:	4013      	ands	r3, r2
 8003634:	d000      	beq.n	8003638 <HAL_ADC_ConfigChannel+0xcc>
 8003636:	e09d      	b.n	8003774 <HAL_ADC_ConfigChannel+0x208>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2210      	movs	r2, #16
 800363e:	4013      	ands	r3, r2
 8003640:	d000      	beq.n	8003644 <HAL_ADC_ConfigChannel+0xd8>
 8003642:	e095      	b.n	8003770 <HAL_ADC_ConfigChannel+0x204>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2220      	movs	r2, #32
 800364a:	4013      	ands	r3, r2
 800364c:	d000      	beq.n	8003650 <HAL_ADC_ConfigChannel+0xe4>
 800364e:	e08d      	b.n	800376c <HAL_ADC_ConfigChannel+0x200>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	4013      	ands	r3, r2
 8003658:	d000      	beq.n	800365c <HAL_ADC_ConfigChannel+0xf0>
 800365a:	e085      	b.n	8003768 <HAL_ADC_ConfigChannel+0x1fc>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2280      	movs	r2, #128	@ 0x80
 8003662:	4013      	ands	r3, r2
 8003664:	d000      	beq.n	8003668 <HAL_ADC_ConfigChannel+0xfc>
 8003666:	e07d      	b.n	8003764 <HAL_ADC_ConfigChannel+0x1f8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	@ 0x80
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d000      	beq.n	8003676 <HAL_ADC_ConfigChannel+0x10a>
 8003674:	e074      	b.n	8003760 <HAL_ADC_ConfigChannel+0x1f4>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d000      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x118>
 8003682:	e06b      	b.n	800375c <HAL_ADC_ConfigChannel+0x1f0>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4013      	ands	r3, r2
 800368e:	d000      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x126>
 8003690:	e062      	b.n	8003758 <HAL_ADC_ConfigChannel+0x1ec>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4013      	ands	r3, r2
 800369c:	d000      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x134>
 800369e:	e059      	b.n	8003754 <HAL_ADC_ConfigChannel+0x1e8>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	4013      	ands	r3, r2
 80036aa:	d151      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x1e4>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	4013      	ands	r3, r2
 80036b6:	d149      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1e0>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	@ 0x80
 80036be:	01db      	lsls	r3, r3, #7
 80036c0:	4013      	ands	r3, r2
 80036c2:	d141      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x1dc>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	4013      	ands	r3, r2
 80036ce:	d139      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x1d8>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	4013      	ands	r3, r2
 80036da:	d131      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	4013      	ands	r3, r2
 80036e6:	d129      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1d0>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	02db      	lsls	r3, r3, #11
 80036f0:	4013      	ands	r3, r2
 80036f2:	d121      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1cc>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	031b      	lsls	r3, r3, #12
 80036fc:	4013      	ands	r3, r2
 80036fe:	d119      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x1c8>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	035b      	lsls	r3, r3, #13
 8003708:	4013      	ands	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x1c4>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	039b      	lsls	r3, r3, #14
 8003714:	4013      	ands	r3, r2
 8003716:	d109      	bne.n	800372c <HAL_ADC_ConfigChannel+0x1c0>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	03db      	lsls	r3, r3, #15
 8003720:	4013      	ands	r3, r2
 8003722:	d001      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x1bc>
 8003724:	2316      	movs	r3, #22
 8003726:	e02c      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003728:	2300      	movs	r3, #0
 800372a:	e02a      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800372c:	2315      	movs	r3, #21
 800372e:	e028      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003730:	2314      	movs	r3, #20
 8003732:	e026      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003734:	2313      	movs	r3, #19
 8003736:	e024      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003738:	2312      	movs	r3, #18
 800373a:	e022      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800373c:	2311      	movs	r3, #17
 800373e:	e020      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003740:	2310      	movs	r3, #16
 8003742:	e01e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003744:	230f      	movs	r3, #15
 8003746:	e01c      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003748:	230e      	movs	r3, #14
 800374a:	e01a      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800374c:	230d      	movs	r3, #13
 800374e:	e018      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003750:	230c      	movs	r3, #12
 8003752:	e016      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003754:	230b      	movs	r3, #11
 8003756:	e014      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003758:	230a      	movs	r3, #10
 800375a:	e012      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800375c:	2309      	movs	r3, #9
 800375e:	e010      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003760:	2308      	movs	r3, #8
 8003762:	e00e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003764:	2307      	movs	r3, #7
 8003766:	e00c      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003768:	2306      	movs	r3, #6
 800376a:	e00a      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800376c:	2305      	movs	r3, #5
 800376e:	e008      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003770:	2304      	movs	r3, #4
 8003772:	e006      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003774:	2303      	movs	r3, #3
 8003776:	e004      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003778:	2302      	movs	r3, #2
 800377a:	e002      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_ADC_ConfigChannel+0x216>
 8003780:	2300      	movs	r3, #0
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	201f      	movs	r0, #31
 8003788:	4002      	ands	r2, r0
 800378a:	4093      	lsls	r3, r2
 800378c:	000a      	movs	r2, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d808      	bhi.n	80037b6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	001a      	movs	r2, r3
 80037b2:	f7ff fa79 	bl	8002ca8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	001a      	movs	r2, r3
 80037c4:	f7ff fac0 	bl	8002d48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db00      	blt.n	80037d2 <HAL_ADC_ConfigChannel+0x266>
 80037d0:	e096      	b.n	8003900 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d2:	4b3f      	ldr	r3, [pc, #252]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff fa15 	bl	8002c04 <LL_ADC_GetCommonPathInternalCh>
 80037da:	0003      	movs	r3, r0
 80037dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3c      	ldr	r2, [pc, #240]	@ (80038d4 <HAL_ADC_ConfigChannel+0x368>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d123      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037f0:	d11e      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2280      	movs	r2, #128	@ 0x80
 80037f6:	0412      	lsls	r2, r2, #16
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a35      	ldr	r2, [pc, #212]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 80037fc:	0019      	movs	r1, r3
 80037fe:	0010      	movs	r0, r2
 8003800:	f7ff f9ec 	bl	8002bdc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003804:	4b34      	ldr	r3, [pc, #208]	@ (80038d8 <HAL_ADC_ConfigChannel+0x36c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4934      	ldr	r1, [pc, #208]	@ (80038dc <HAL_ADC_ConfigChannel+0x370>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fc fc8e 	bl	800012c <__udivsi3>
 8003810:	0003      	movs	r3, r0
 8003812:	001a      	movs	r2, r3
 8003814:	0013      	movs	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	189b      	adds	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003820:	e002      	b.n	8003828 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b01      	subs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f9      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800382e:	e067      	b.n	8003900 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2a      	ldr	r2, [pc, #168]	@ (80038e0 <HAL_ADC_ConfigChannel+0x374>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d162      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	03db      	lsls	r3, r3, #15
 8003840:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003842:	d15d      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	03d2      	lsls	r2, r2, #15
 800384a:	4313      	orrs	r3, r2
 800384c:	4a20      	ldr	r2, [pc, #128]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 800384e:	0019      	movs	r1, r3
 8003850:	0010      	movs	r0, r2
 8003852:	f7ff f9c3 	bl	8002bdc <LL_ADC_SetCommonPathInternalCh>
 8003856:	e053      	b.n	8003900 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	429a      	cmp	r2, r3
 8003862:	d004      	beq.n	800386e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003868:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <HAL_ADC_ConfigChannel+0x360>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d107      	bne.n	800387e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7ff fa46 	bl	8002d0a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da3c      	bge.n	8003900 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003886:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff f9bb 	bl	8002c04 <LL_ADC_GetCommonPathInternalCh>
 800388e:	0003      	movs	r3, r0
 8003890:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a0f      	ldr	r2, [pc, #60]	@ (80038d4 <HAL_ADC_ConfigChannel+0x368>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_ADC_ConfigChannel+0x378>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	4a0b      	ldr	r2, [pc, #44]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 80038a4:	0019      	movs	r1, r3
 80038a6:	0010      	movs	r0, r2
 80038a8:	f7ff f998 	bl	8002bdc <LL_ADC_SetCommonPathInternalCh>
 80038ac:	e028      	b.n	8003900 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0b      	ldr	r2, [pc, #44]	@ (80038e0 <HAL_ADC_ConfigChannel+0x374>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d123      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4a0b      	ldr	r2, [pc, #44]	@ (80038e8 <HAL_ADC_ConfigChannel+0x37c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <HAL_ADC_ConfigChannel+0x364>)
 80038c0:	0019      	movs	r1, r3
 80038c2:	0010      	movs	r0, r2
 80038c4:	f7ff f98a 	bl	8002bdc <LL_ADC_SetCommonPathInternalCh>
 80038c8:	e01a      	b.n	8003900 <HAL_ADC_ConfigChannel+0x394>
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	80000004 	.word	0x80000004
 80038d0:	40012708 	.word	0x40012708
 80038d4:	a4000200 	.word	0xa4000200
 80038d8:	20000000 	.word	0x20000000
 80038dc:	00030d40 	.word	0x00030d40
 80038e0:	a8000400 	.word	0xa8000400
 80038e4:	ff7fffff 	.word	0xff7fffff
 80038e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	2220      	movs	r2, #32
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038f8:	2317      	movs	r3, #23
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2254      	movs	r2, #84	@ 0x54
 8003904:	2100      	movs	r1, #0
 8003906:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003908:	2317      	movs	r3, #23
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)

08003918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff fa75 	bl	8002e18 <LL_ADC_IsEnabled>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d162      	bne.n	80039f8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <ADC_Enable+0xec>)
 800393a:	4013      	ands	r3, r2
 800393c:	d00d      	beq.n	800395a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	2210      	movs	r2, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	2201      	movs	r2, #1
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e04f      	b.n	80039fa <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff fa36 	bl	8002dd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003964:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <ADC_Enable+0xf0>)
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff f94c 	bl	8002c04 <LL_ADC_GetCommonPathInternalCh>
 800396c:	0002      	movs	r2, r0
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	4013      	ands	r3, r2
 8003974:	d00f      	beq.n	8003996 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003976:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <ADC_Enable+0xf4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4925      	ldr	r1, [pc, #148]	@ (8003a10 <ADC_Enable+0xf8>)
 800397c:	0018      	movs	r0, r3
 800397e:	f7fc fbd5 	bl	800012c <__udivsi3>
 8003982:	0003      	movs	r3, r0
 8003984:	3301      	adds	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003988:	e002      	b.n	8003990 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3b01      	subs	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f9      	bne.n	800398a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7e5b      	ldrb	r3, [r3, #25]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d02c      	beq.n	80039f8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800399e:	f7ff f903 	bl	8002ba8 <HAL_GetTick>
 80039a2:	0003      	movs	r3, r0
 80039a4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a6:	e020      	b.n	80039ea <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff fa33 	bl	8002e18 <LL_ADC_IsEnabled>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d104      	bne.n	80039c0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fa08 	bl	8002dd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039c0:	f7ff f8f2 	bl	8002ba8 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d90d      	bls.n	80039ea <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	2210      	movs	r2, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	2201      	movs	r2, #1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e007      	b.n	80039fa <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d1d7      	bne.n	80039a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	80000017 	.word	0x80000017
 8003a08:	40012708 	.word	0x40012708
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	00030d40 	.word	0x00030d40

08003a14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7ff fa0a 	bl	8002e3a <LL_ADC_IsDisableOngoing>
 8003a26:	0003      	movs	r3, r0
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f7ff f9f2 	bl	8002e18 <LL_ADC_IsEnabled>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d040      	beq.n	8003aba <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13d      	bne.n	8003aba <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2205      	movs	r2, #5
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10d      	bne.n	8003a68 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff f9cf 	bl	8002df4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a5e:	f7ff f8a3 	bl	8002ba8 <HAL_GetTick>
 8003a62:	0003      	movs	r3, r0
 8003a64:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a66:	e022      	b.n	8003aae <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01b      	b.n	8003abc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a84:	f7ff f890 	bl	8002ba8 <HAL_GetTick>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d90d      	bls.n	8003aae <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	2210      	movs	r2, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e006      	b.n	8003abc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d1e4      	bne.n	8003a84 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	2250      	movs	r2, #80	@ 0x50
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d141      	bne.n	8003b60 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae0:	2280      	movs	r2, #128	@ 0x80
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7ff f8c9 	bl	8002c86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d02e      	beq.n	8003b56 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	7e9b      	ldrb	r3, [r3, #26]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d12a      	bne.n	8003b56 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d123      	bne.n	8003b56 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff f9b4 	bl	8002e80 <LL_ADC_REG_IsConversionOngoing>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d110      	bne.n	8003b3e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	210c      	movs	r1, #12
 8003b28:	438a      	bics	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <ADC_DMAConvCplt+0xc4>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	2201      	movs	r2, #1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b3c:	e00b      	b.n	8003b56 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	2220      	movs	r2, #32
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fe fc41 	bl	80023e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b5e:	e00f      	b.n	8003b80 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	2210      	movs	r2, #16
 8003b66:	4013      	ands	r3, r2
 8003b68:	d004      	beq.n	8003b74 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7ff fcf5 	bl	800355c <HAL_ADC_ErrorCallback>
}
 8003b72:	e005      	b.n	8003b80 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	4798      	blx	r3
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b004      	add	sp, #16
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	fffffefe 	.word	0xfffffefe

08003b8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff fccd 	bl	800353c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b004      	add	sp, #16
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	2204      	movs	r2, #4
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7ff fcc2 	bl	800355c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <LL_ADC_GetCommonClock>:
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	23f0      	movs	r3, #240	@ 0xf0
 8003bee:	039b      	lsls	r3, r3, #14
 8003bf0:	4013      	ands	r3, r2
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <LL_ADC_GetClock>:
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	0f9b      	lsrs	r3, r3, #30
 8003c08:	079b      	lsls	r3, r3, #30
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <LL_ADC_SetCalibrationFactor>:
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	22b4      	movs	r2, #180	@ 0xb4
 8003c20:	589b      	ldr	r3, [r3, r2]
 8003c22:	227f      	movs	r2, #127	@ 0x7f
 8003c24:	4393      	bics	r3, r2
 8003c26:	001a      	movs	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	21b4      	movs	r1, #180	@ 0xb4
 8003c30:	505a      	str	r2, [r3, r1]
}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <LL_ADC_GetCalibrationFactor>:
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	22b4      	movs	r2, #180	@ 0xb4
 8003c46:	589b      	ldr	r3, [r3, r2]
 8003c48:	227f      	movs	r2, #127	@ 0x7f
 8003c4a:	4013      	ands	r3, r2
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LL_ADC_Enable>:
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a04      	ldr	r2, [pc, #16]	@ (8003c74 <LL_ADC_Enable+0x20>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	2201      	movs	r2, #1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	7fffffe8 	.word	0x7fffffe8

08003c78 <LL_ADC_Disable>:
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <LL_ADC_Disable+0x20>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	2202      	movs	r2, #2
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	7fffffe8 	.word	0x7fffffe8

08003c9c <LL_ADC_IsEnabled>:
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_IsEnabled+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_IsEnabled+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <LL_ADC_StartCalibration>:
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <LL_ADC_StartCalibration+0x24>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	0612      	lsls	r2, r2, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	7fffffe8 	.word	0x7fffffe8

08003ce8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	0fdb      	lsrs	r3, r3, #31
 8003cf6:	07da      	lsls	r2, r3, #31
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d101      	bne.n	8003d04 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b08b      	sub	sp, #44	@ 0x2c
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2254      	movs	r2, #84	@ 0x54
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_ADCEx_Calibration_Start+0x1e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0de      	b.n	8003eec <HAL_ADCEx_Calibration_Start+0x1dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2254      	movs	r2, #84	@ 0x54
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d36:	231f      	movs	r3, #31
 8003d38:	18fc      	adds	r4, r7, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff fe69 	bl	8003a14 <ADC_Disable>
 8003d42:	0003      	movs	r3, r0
 8003d44:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff ffa6 	bl	8003c9c <LL_ADC_IsEnabled>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d000      	beq.n	8003d56 <HAL_ADCEx_Calibration_Start+0x46>
 8003d54:	e0bd      	b.n	8003ed2 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	4a66      	ldr	r2, [pc, #408]	@ (8003ef4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2202      	movs	r2, #2
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a62      	ldr	r2, [pc, #392]	@ (8003ef8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	495f      	ldr	r1, [pc, #380]	@ (8003efc <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d86:	e02e      	b.n	8003de6 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ff97 	bl	8003cc0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d92:	e015      	b.n	8003dc0 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	23ae      	movs	r3, #174	@ 0xae
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d30d      	bcc.n	8003dc0 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	2212      	movs	r2, #18
 8003daa:	4393      	bics	r3, r2
 8003dac:	2210      	movs	r2, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2254      	movs	r2, #84	@ 0x54
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e095      	b.n	8003eec <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff ff8f 	bl	8003ce8 <LL_ADC_IsCalibrationOnGoing>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d1e2      	bne.n	8003d94 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff ff31 	bl	8003c3a <LL_ADC_GetCalibrationFactor>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	3301      	adds	r3, #1
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	d9cd      	bls.n	8003d88 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003dec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dee:	6a38      	ldr	r0, [r7, #32]
 8003df0:	f7fc f99c 	bl	800012c <__udivsi3>
 8003df4:	0003      	movs	r3, r0
 8003df6:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7ff ff29 	bl	8003c54 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff fef7 	bl	8003bfa <LL_ADC_GetClock>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d11b      	bne.n	8003e48 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fee4 	bl	8003be0 <LL_ADC_GetCommonClock>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	23e0      	movs	r3, #224	@ 0xe0
 8003e20:	035b      	lsls	r3, r3, #13
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d310      	bcc.n	8003e48 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	3b03      	subs	r3, #3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	0013      	movs	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 8003e3a:	e002      	b.n	8003e42 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f9      	bne.n	8003e3c <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fede 	bl	8003c12 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7ff ff0c 	bl	8003c78 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e60:	f7fe fea2 	bl	8002ba8 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e68:	e01b      	b.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6a:	f7fe fe9d 	bl	8002ba8 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d914      	bls.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff0d 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	2201      	movs	r2, #1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e024      	b.n	8003eec <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff fef8 	bl	8003c9c <LL_ADC_IsEnabled>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d1dc      	bne.n	8003e6a <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68d9      	ldr	r1, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	2201      	movs	r2, #1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed0:	e005      	b.n	8003ede <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2254      	movs	r2, #84	@ 0x54
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003ee6:	231f      	movs	r3, #31
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b00b      	add	sp, #44	@ 0x2c
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	fffffefd 	.word	0xfffffefd
 8003ef8:	00008003 	.word	0x00008003
 8003efc:	ffff7ffc 	.word	0xffff7ffc
 8003f00:	40012708 	.word	0x40012708

08003f04 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	1dfb      	adds	r3, r7, #7
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f56:	d809      	bhi.n	8003f6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	231f      	movs	r3, #31
 8003f60:	401a      	ands	r2, r3
 8003f62:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <__NVIC_EnableIRQ+0x30>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	4091      	lsls	r1, r2
 8003f68:	000a      	movs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	0002      	movs	r2, r0
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f8c:	d828      	bhi.n	8003fe0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800404c <__NVIC_SetPriority+0xd4>)
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	33c0      	adds	r3, #192	@ 0xc0
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	589b      	ldr	r3, [r3, r2]
 8003f9e:	1dfa      	adds	r2, r7, #7
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	00d2      	lsls	r2, r2, #3
 8003faa:	21ff      	movs	r1, #255	@ 0xff
 8003fac:	4091      	lsls	r1, r2
 8003fae:	000a      	movs	r2, r1
 8003fb0:	43d2      	mvns	r2, r2
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	22ff      	movs	r2, #255	@ 0xff
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	1dfb      	adds	r3, r7, #7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	4003      	ands	r3, r0
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fcc:	481f      	ldr	r0, [pc, #124]	@ (800404c <__NVIC_SetPriority+0xd4>)
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	33c0      	adds	r3, #192	@ 0xc0
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fde:	e031      	b.n	8004044 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <__NVIC_SetPriority+0xd8>)
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	230f      	movs	r3, #15
 8003fea:	400b      	ands	r3, r1
 8003fec:	3b08      	subs	r3, #8
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1dfa      	adds	r2, r7, #7
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	0011      	movs	r1, r2
 8004000:	2203      	movs	r2, #3
 8004002:	400a      	ands	r2, r1
 8004004:	00d2      	lsls	r2, r2, #3
 8004006:	21ff      	movs	r1, #255	@ 0xff
 8004008:	4091      	lsls	r1, r2
 800400a:	000a      	movs	r2, r1
 800400c:	43d2      	mvns	r2, r2
 800400e:	401a      	ands	r2, r3
 8004010:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	22ff      	movs	r2, #255	@ 0xff
 8004018:	401a      	ands	r2, r3
 800401a:	1dfb      	adds	r3, r7, #7
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	0018      	movs	r0, r3
 8004020:	2303      	movs	r3, #3
 8004022:	4003      	ands	r3, r0
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004028:	4809      	ldr	r0, [pc, #36]	@ (8004050 <__NVIC_SetPriority+0xd8>)
 800402a:	1dfb      	adds	r3, r7, #7
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	001c      	movs	r4, r3
 8004030:	230f      	movs	r3, #15
 8004032:	4023      	ands	r3, r4
 8004034:	3b08      	subs	r3, #8
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	430a      	orrs	r2, r1
 800403a:	3306      	adds	r3, #6
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	18c3      	adds	r3, r0, r3
 8004040:	3304      	adds	r3, #4
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b003      	add	sp, #12
 800404a:	bd90      	pop	{r4, r7, pc}
 800404c:	e000e100 	.word	0xe000e100
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	045b      	lsls	r3, r3, #17
 8004064:	429a      	cmp	r2, r3
 8004066:	d301      	bcc.n	800406c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004068:	2301      	movs	r3, #1
 800406a:	e010      	b.n	800408e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <SysTick_Config+0x44>)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	3a01      	subs	r2, #1
 8004072:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004074:	2301      	movs	r3, #1
 8004076:	425b      	negs	r3, r3
 8004078:	2103      	movs	r1, #3
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff ff7c 	bl	8003f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <SysTick_Config+0x44>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004086:	4b04      	ldr	r3, [pc, #16]	@ (8004098 <SysTick_Config+0x44>)
 8004088:	2207      	movs	r2, #7
 800408a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800408c:	2300      	movs	r3, #0
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b002      	add	sp, #8
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	e000e010 	.word	0xe000e010

0800409c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	210f      	movs	r1, #15
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	1c02      	adds	r2, r0, #0
 80040ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b25b      	sxtb	r3, r3
 80040b6:	0011      	movs	r1, r2
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7ff ff5d 	bl	8003f78 <__NVIC_SetPriority>
}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b004      	add	sp, #16
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	0002      	movs	r2, r0
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b25b      	sxtb	r3, r3
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff ff33 	bl	8003f44 <__NVIC_EnableIRQ>
}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b002      	add	sp, #8
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff ffaf 	bl	8004054 <SysTick_Config>
 80040f6:	0003      	movs	r3, r0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e077      	b.n	8004202 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3d      	ldr	r2, [pc, #244]	@ (800420c <HAL_DMA_Init+0x10c>)
 8004118:	4694      	mov	ip, r2
 800411a:	4463      	add	r3, ip
 800411c:	2114      	movs	r1, #20
 800411e:	0018      	movs	r0, r3
 8004120:	f7fc f804 	bl	800012c <__udivsi3>
 8004124:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004126:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2225      	movs	r2, #37	@ 0x25
 8004130:	2102      	movs	r1, #2
 8004132:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4934      	ldr	r1, [pc, #208]	@ (8004210 <HAL_DMA_Init+0x110>)
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f9c3 	bl	8004508 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	2380      	movs	r3, #128	@ 0x80
 8004188:	01db      	lsls	r3, r3, #7
 800418a:	429a      	cmp	r2, r3
 800418c:	d102      	bne.n	8004194 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	21ff      	movs	r1, #255	@ 0xff
 800419e:	400a      	ands	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80041aa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_DMA_Init+0xd8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d80d      	bhi.n	80041d8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f9ce 	bl	8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e008      	b.n	80041ea <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2225      	movs	r2, #37	@ 0x25
 80041f4:	2101      	movs	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2224      	movs	r2, #36	@ 0x24
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b002      	add	sp, #8
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	bffdfff8 	.word	0xbffdfff8
 8004210:	ffff800f 	.word	0xffff800f

08004214 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2317      	movs	r3, #23
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2224      	movs	r2, #36	@ 0x24
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_DMA_Start_IT+0x24>
 8004234:	2302      	movs	r3, #2
 8004236:	e070      	b.n	800431a <HAL_DMA_Start_IT+0x106>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2224      	movs	r2, #36	@ 0x24
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2225      	movs	r2, #37	@ 0x25
 8004244:	5c9b      	ldrb	r3, [r3, r2]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d157      	bne.n	80042fc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2225      	movs	r2, #37	@ 0x25
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	438a      	bics	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f909 	bl	8004488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	210e      	movs	r1, #14
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e00f      	b.n	80042b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2104      	movs	r1, #4
 800429c:	438a      	bics	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	210a      	movs	r1, #10
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	4013      	ands	r3, r2
 80042bc:	d008      	beq.n	80042d0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	2180      	movs	r1, #128	@ 0x80
 80042ca:	0049      	lsls	r1, r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	0049      	lsls	r1, r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e007      	b.n	800430c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2224      	movs	r2, #36	@ 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004304:	2317      	movs	r3, #23
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	2100      	movs	r1, #0
 8004312:	5499      	strb	r1, [r3, r2]

  return status;
 8004314:	2317      	movs	r3, #23
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	781b      	ldrb	r3, [r3, #0]
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b006      	add	sp, #24
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800432c:	4b55      	ldr	r3, [pc, #340]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	221c      	movs	r2, #28
 8004340:	4013      	ands	r3, r2
 8004342:	2204      	movs	r2, #4
 8004344:	409a      	lsls	r2, r3
 8004346:	0013      	movs	r3, r2
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4013      	ands	r3, r2
 800434c:	d027      	beq.n	800439e <HAL_DMA_IRQHandler+0x7a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2204      	movs	r2, #4
 8004352:	4013      	ands	r3, r2
 8004354:	d023      	beq.n	800439e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2220      	movs	r2, #32
 800435e:	4013      	ands	r3, r2
 8004360:	d107      	bne.n	8004372 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2104      	movs	r1, #4
 800436e:	438a      	bics	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	221c      	movs	r2, #28
 800437c:	4013      	ands	r3, r2
 800437e:	2204      	movs	r2, #4
 8004380:	409a      	lsls	r2, r3
 8004382:	4b40      	ldr	r3, [pc, #256]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	2b00      	cmp	r3, #0
 800438e:	d100      	bne.n	8004392 <HAL_DMA_IRQHandler+0x6e>
 8004390:	e073      	b.n	800447a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	0010      	movs	r0, r2
 800439a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800439c:	e06d      	b.n	800447a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	221c      	movs	r2, #28
 80043a4:	4013      	ands	r3, r2
 80043a6:	2202      	movs	r2, #2
 80043a8:	409a      	lsls	r2, r3
 80043aa:	0013      	movs	r3, r2
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	d02e      	beq.n	8004410 <HAL_DMA_IRQHandler+0xec>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	d02a      	beq.n	8004410 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2220      	movs	r2, #32
 80043c2:	4013      	ands	r3, r2
 80043c4:	d10b      	bne.n	80043de <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	210a      	movs	r1, #10
 80043d2:	438a      	bics	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2225      	movs	r2, #37	@ 0x25
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	221c      	movs	r2, #28
 80043e8:	4013      	ands	r3, r2
 80043ea:	2202      	movs	r2, #2
 80043ec:	409a      	lsls	r2, r3
 80043ee:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	@ 0x24
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03a      	beq.n	800447a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	0010      	movs	r0, r2
 800440c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800440e:	e034      	b.n	800447a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	221c      	movs	r2, #28
 8004416:	4013      	ands	r3, r2
 8004418:	2208      	movs	r2, #8
 800441a:	409a      	lsls	r2, r3
 800441c:	0013      	movs	r3, r2
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	d02b      	beq.n	800447c <HAL_DMA_IRQHandler+0x158>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2208      	movs	r2, #8
 8004428:	4013      	ands	r3, r2
 800442a:	d027      	beq.n	800447c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	210e      	movs	r1, #14
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	221c      	movs	r2, #28
 8004446:	4013      	ands	r3, r2
 8004448:	2201      	movs	r2, #1
 800444a:	409a      	lsls	r2, r3
 800444c:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <HAL_DMA_IRQHandler+0x160>)
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2225      	movs	r2, #37	@ 0x25
 800445c:	2101      	movs	r1, #1
 800445e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	0010      	movs	r0, r2
 8004478:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	46c0      	nop			@ (mov r8, r8)
}
 800447e:	46bd      	mov	sp, r7
 8004480:	b004      	add	sp, #16
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40020000 	.word	0x40020000

08004488 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800449e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80044b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80044b2:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <DMA_SetConfig+0x7c>)
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	221c      	movs	r2, #28
 80044bc:	4013      	ands	r3, r2
 80044be:	2201      	movs	r2, #1
 80044c0:	409a      	lsls	r2, r3
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <DMA_SetConfig+0x7c>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d108      	bne.n	80044ea <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044e8:	e007      	b.n	80044fa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	40020000 	.word	0x40020000

08004508 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	001a      	movs	r2, r3
 8004516:	23ff      	movs	r3, #255	@ 0xff
 8004518:	4013      	ands	r3, r2
 800451a:	3b08      	subs	r3, #8
 800451c:	2114      	movs	r1, #20
 800451e:	0018      	movs	r0, r3
 8004520:	f7fb fe04 	bl	800012c <__udivsi3>
 8004524:	0003      	movs	r3, r0
 8004526:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800452e:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004530:	4694      	mov	ip, r2
 8004532:	4463      	add	r3, ip
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	001a      	movs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a07      	ldr	r2, [pc, #28]	@ (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004540:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	221c      	movs	r2, #28
 8004546:	4013      	ands	r3, r2
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	10008200 	.word	0x10008200
 800455c:	40020880 	.word	0x40020880

08004560 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	22ff      	movs	r2, #255	@ 0xff
 800456e:	4013      	ands	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004576:	4694      	mov	ip, r2
 8004578:	4463      	add	r3, ip
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	001a      	movs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a07      	ldr	r2, [pc, #28]	@ (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	4013      	ands	r3, r2
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b004      	add	sp, #16
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	1000823f 	.word	0x1000823f
 80045a4:	40020940 	.word	0x40020940

080045a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045b6:	e14d      	b.n	8004854 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4091      	lsls	r1, r2
 80045c2:	000a      	movs	r2, r1
 80045c4:	4013      	ands	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d100      	bne.n	80045d0 <HAL_GPIO_Init+0x28>
 80045ce:	e13e      	b.n	800484e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x38>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d125      	bne.n	800462c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	08da      	lsrs	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3208      	adds	r2, #8
 80045e8:	0092      	lsls	r2, r2, #2
 80045ea:	58d3      	ldr	r3, [r2, r3]
 80045ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2207      	movs	r2, #7
 80045f2:	4013      	ands	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	220f      	movs	r2, #15
 80045f8:	409a      	lsls	r2, r3
 80045fa:	0013      	movs	r3, r2
 80045fc:	43da      	mvns	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4013      	ands	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	220f      	movs	r2, #15
 800460a:	401a      	ands	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2107      	movs	r1, #7
 8004610:	400b      	ands	r3, r1
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	409a      	lsls	r2, r3
 8004616:	0013      	movs	r3, r2
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	08da      	lsrs	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3208      	adds	r2, #8
 8004626:	0092      	lsls	r2, r2, #2
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	409a      	lsls	r2, r3
 800463a:	0013      	movs	r3, r2
 800463c:	43da      	mvns	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4013      	ands	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	401a      	ands	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	0013      	movs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d00b      	beq.n	8004680 <HAL_GPIO_Init+0xd8>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d007      	beq.n	8004680 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004674:	2b11      	cmp	r3, #17
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b12      	cmp	r3, #18
 800467e:	d130      	bne.n	80046e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	2203      	movs	r2, #3
 800468c:	409a      	lsls	r2, r3
 800468e:	0013      	movs	r3, r2
 8004690:	43da      	mvns	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	409a      	lsls	r2, r3
 80046a2:	0013      	movs	r3, r2
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046b6:	2201      	movs	r2, #1
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	409a      	lsls	r2, r3
 80046bc:	0013      	movs	r3, r2
 80046be:	43da      	mvns	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4013      	ands	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	2201      	movs	r2, #1
 80046ce:	401a      	ands	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	409a      	lsls	r2, r3
 80046d4:	0013      	movs	r3, r2
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d017      	beq.n	800471a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	409a      	lsls	r2, r3
 80046f8:	0013      	movs	r3, r2
 80046fa:	43da      	mvns	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4013      	ands	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	0013      	movs	r3, r2
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	055b      	lsls	r3, r3, #21
 8004722:	4013      	ands	r3, r2
 8004724:	d100      	bne.n	8004728 <HAL_GPIO_Init+0x180>
 8004726:	e092      	b.n	800484e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004728:	4a50      	ldr	r2, [pc, #320]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3318      	adds	r3, #24
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	589b      	ldr	r3, [r3, r2]
 8004734:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2203      	movs	r2, #3
 800473a:	4013      	ands	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	220f      	movs	r2, #15
 8004740:	409a      	lsls	r2, r3
 8004742:	0013      	movs	r3, r2
 8004744:	43da      	mvns	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4013      	ands	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	23a0      	movs	r3, #160	@ 0xa0
 8004750:	05db      	lsls	r3, r3, #23
 8004752:	429a      	cmp	r2, r3
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x1d6>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a45      	ldr	r2, [pc, #276]	@ (8004870 <HAL_GPIO_Init+0x2c8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x1d2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a44      	ldr	r2, [pc, #272]	@ (8004874 <HAL_GPIO_Init+0x2cc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x1ce>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a43      	ldr	r2, [pc, #268]	@ (8004878 <HAL_GPIO_Init+0x2d0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x1ca>
 800476e:	2305      	movs	r3, #5
 8004770:	e006      	b.n	8004780 <HAL_GPIO_Init+0x1d8>
 8004772:	2306      	movs	r3, #6
 8004774:	e004      	b.n	8004780 <HAL_GPIO_Init+0x1d8>
 8004776:	2302      	movs	r3, #2
 8004778:	e002      	b.n	8004780 <HAL_GPIO_Init+0x1d8>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <HAL_GPIO_Init+0x1d8>
 800477e:	2300      	movs	r3, #0
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	2103      	movs	r1, #3
 8004784:	400a      	ands	r2, r1
 8004786:	00d2      	lsls	r2, r2, #3
 8004788:	4093      	lsls	r3, r2
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004790:	4936      	ldr	r1, [pc, #216]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	3318      	adds	r3, #24
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800479e:	4a33      	ldr	r2, [pc, #204]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	58d3      	ldr	r3, [r2, r3]
 80047a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	025b      	lsls	r3, r3, #9
 80047b8:	4013      	ands	r3, r2
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80047c4:	4929      	ldr	r1, [pc, #164]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80047cc:	4a27      	ldr	r2, [pc, #156]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 80047ce:	2384      	movs	r3, #132	@ 0x84
 80047d0:	58d3      	ldr	r3, [r2, r3]
 80047d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43da      	mvns	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4013      	ands	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	029b      	lsls	r3, r3, #10
 80047e6:	4013      	ands	r3, r2
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80047f2:	491e      	ldr	r1, [pc, #120]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 80047f4:	2284      	movs	r2, #132	@ 0x84
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80047fa:	4b1c      	ldr	r3, [pc, #112]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43da      	mvns	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4013      	ands	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	035b      	lsls	r3, r3, #13
 8004812:	4013      	ands	r3, r2
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800481e:	4b13      	ldr	r3, [pc, #76]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004824:	4b11      	ldr	r3, [pc, #68]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43da      	mvns	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4013      	ands	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	039b      	lsls	r3, r3, #14
 800483c:	4013      	ands	r3, r2
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004848:	4b08      	ldr	r3, [pc, #32]	@ (800486c <HAL_GPIO_Init+0x2c4>)
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	40da      	lsrs	r2, r3
 800485c:	1e13      	subs	r3, r2, #0
 800485e:	d000      	beq.n	8004862 <HAL_GPIO_Init+0x2ba>
 8004860:	e6aa      	b.n	80045b8 <HAL_GPIO_Init+0x10>
  }
}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021800 	.word	0x40021800
 8004870:	50000400 	.word	0x50000400
 8004874:	50000800 	.word	0x50000800
 8004878:	50001400 	.word	0x50001400

0800487c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e1d0      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d100      	bne.n	800489a <HAL_RCC_OscConfig+0x1e>
 8004898:	e069      	b.n	800496e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4bc8      	ldr	r3, [pc, #800]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2238      	movs	r2, #56	@ 0x38
 80048a0:	4013      	ands	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d105      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d15d      	bne.n	800496e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e1bc      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	025b      	lsls	r3, r3, #9
 80048be:	429a      	cmp	r2, r3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_OscConfig+0x56>
 80048c2:	4bbe      	ldr	r3, [pc, #760]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4bbd      	ldr	r3, [pc, #756]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048c8:	2180      	movs	r1, #128	@ 0x80
 80048ca:	0249      	lsls	r1, r1, #9
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e020      	b.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	23a0      	movs	r3, #160	@ 0xa0
 80048d8:	02db      	lsls	r3, r3, #11
 80048da:	429a      	cmp	r2, r3
 80048dc:	d10e      	bne.n	80048fc <HAL_RCC_OscConfig+0x80>
 80048de:	4bb7      	ldr	r3, [pc, #732]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4bb6      	ldr	r3, [pc, #728]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048e4:	2180      	movs	r1, #128	@ 0x80
 80048e6:	02c9      	lsls	r1, r1, #11
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4bb3      	ldr	r3, [pc, #716]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4bb2      	ldr	r3, [pc, #712]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048f2:	2180      	movs	r1, #128	@ 0x80
 80048f4:	0249      	lsls	r1, r1, #9
 80048f6:	430a      	orrs	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fc:	4baf      	ldr	r3, [pc, #700]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4bae      	ldr	r3, [pc, #696]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004902:	49af      	ldr	r1, [pc, #700]	@ (8004bc0 <HAL_RCC_OscConfig+0x344>)
 8004904:	400a      	ands	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	4bac      	ldr	r3, [pc, #688]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4bab      	ldr	r3, [pc, #684]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 800490e:	49ad      	ldr	r1, [pc, #692]	@ (8004bc4 <HAL_RCC_OscConfig+0x348>)
 8004910:	400a      	ands	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d014      	beq.n	8004946 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fe f944 	bl	8002ba8 <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004926:	f7fe f93f 	bl	8002ba8 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b64      	cmp	r3, #100	@ 0x64
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e17b      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004938:	4ba0      	ldr	r3, [pc, #640]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	4013      	ands	r3, r2
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0xaa>
 8004944:	e013      	b.n	800496e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fe f92f 	bl	8002ba8 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004950:	f7fe f92a 	bl	8002ba8 <HAL_GetTick>
 8004954:	0002      	movs	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	@ 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e166      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004962:	4b96      	ldr	r3, [pc, #600]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	4013      	ands	r3, r2
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2202      	movs	r2, #2
 8004974:	4013      	ands	r3, r2
 8004976:	d100      	bne.n	800497a <HAL_RCC_OscConfig+0xfe>
 8004978:	e086      	b.n	8004a88 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b90      	ldr	r3, [pc, #576]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2238      	movs	r2, #56	@ 0x38
 8004980:	4013      	ands	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d12f      	bne.n	80049ea <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e14c      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004996:	4b89      	ldr	r3, [pc, #548]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a8b      	ldr	r2, [pc, #556]	@ (8004bc8 <HAL_RCC_OscConfig+0x34c>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	4b85      	ldr	r3, [pc, #532]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d112      	bne.n	80049d8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049b2:	4b82      	ldr	r3, [pc, #520]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a85      	ldr	r2, [pc, #532]	@ (8004bcc <HAL_RCC_OscConfig+0x350>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	0019      	movs	r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	4b7e      	ldr	r3, [pc, #504]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80049c6:	4b7d      	ldr	r3, [pc, #500]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0adb      	lsrs	r3, r3, #11
 80049cc:	2207      	movs	r2, #7
 80049ce:	4013      	ands	r3, r2
 80049d0:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd0 <HAL_RCC_OscConfig+0x354>)
 80049d2:	40da      	lsrs	r2, r3
 80049d4:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd4 <HAL_RCC_OscConfig+0x358>)
 80049d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049d8:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd8 <HAL_RCC_OscConfig+0x35c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fe f887 	bl	8002af0 <HAL_InitTick>
 80049e2:	1e03      	subs	r3, r0, #0
 80049e4:	d050      	beq.n	8004a88 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e122      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d030      	beq.n	8004a54 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049f2:	4b72      	ldr	r3, [pc, #456]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <HAL_RCC_OscConfig+0x350>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	0019      	movs	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	4b6e      	ldr	r3, [pc, #440]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004a06:	4b6d      	ldr	r3, [pc, #436]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a0c:	2180      	movs	r1, #128	@ 0x80
 8004a0e:	0049      	lsls	r1, r1, #1
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fe f8c8 	bl	8002ba8 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a1e:	f7fe f8c3 	bl	8002ba8 <HAL_GetTick>
 8004a22:	0002      	movs	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0ff      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a30:	4b62      	ldr	r3, [pc, #392]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a61      	ldr	r2, [pc, #388]	@ (8004bc8 <HAL_RCC_OscConfig+0x34c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	e019      	b.n	8004a88 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004a54:	4b59      	ldr	r3, [pc, #356]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b58      	ldr	r3, [pc, #352]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a5a:	4960      	ldr	r1, [pc, #384]	@ (8004bdc <HAL_RCC_OscConfig+0x360>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe f8a2 	bl	8002ba8 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe f89d 	bl	8002ba8 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0d9      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4013      	ands	r3, r2
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d042      	beq.n	8004b18 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004a92:	4b4a      	ldr	r3, [pc, #296]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2238      	movs	r2, #56	@ 0x38
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b18      	cmp	r3, #24
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d138      	bne.n	8004b18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0c2      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b42      	ldr	r3, [pc, #264]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004ab4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ab6:	4b41      	ldr	r3, [pc, #260]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fe f873 	bl	8002ba8 <HAL_GetTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004ac8:	f7fe f86e 	bl	8002ba8 <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0aa      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004ada:	4b38      	ldr	r3, [pc, #224]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	2202      	movs	r2, #2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d0f1      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
 8004ae4:	e018      	b.n	8004b18 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ae6:	4b35      	ldr	r3, [pc, #212]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004ae8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004aea:	4b34      	ldr	r3, [pc, #208]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	438a      	bics	r2, r1
 8004af0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fe f859 	bl	8002ba8 <HAL_GetTick>
 8004af6:	0003      	movs	r3, r0
 8004af8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004afc:	f7fe f854 	bl	8002ba8 <HAL_GetTick>
 8004b00:	0002      	movs	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e090      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b12:	2202      	movs	r2, #2
 8004b14:	4013      	ands	r3, r2
 8004b16:	d1f1      	bne.n	8004afc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d100      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2a8>
 8004b22:	e084      	b.n	8004c2e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b24:	230f      	movs	r3, #15
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004b2c:	4b23      	ldr	r3, [pc, #140]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2238      	movs	r2, #56	@ 0x38
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d000      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2c6>
 8004b40:	e075      	b.n	8004c2e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e074      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x2e0>
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b52:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b54:	2101      	movs	r1, #1
 8004b56:	430a      	orrs	r2, r1
 8004b58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b5a:	e01c      	b.n	8004b96 <HAL_RCC_OscConfig+0x31a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d10c      	bne.n	8004b7e <HAL_RCC_OscConfig+0x302>
 8004b64:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b74:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b76:	2101      	movs	r1, #1
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b7c:	e00b      	b.n	8004b96 <HAL_RCC_OscConfig+0x31a>
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b84:	2101      	movs	r1, #1
 8004b86:	438a      	bics	r2, r1
 8004b88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HAL_RCC_OscConfig+0x340>)
 8004b90:	2104      	movs	r1, #4
 8004b92:	438a      	bics	r2, r1
 8004b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fe f803 	bl	8002ba8 <HAL_GetTick>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004ba6:	e01d      	b.n	8004be4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fffe 	bl	8002ba8 <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004be0 <HAL_RCC_OscConfig+0x364>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d915      	bls.n	8004be4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e039      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	fffeffff 	.word	0xfffeffff
 8004bc4:	fffbffff 	.word	0xfffbffff
 8004bc8:	ffff80ff 	.word	0xffff80ff
 8004bcc:	ffffc7ff 	.word	0xffffc7ff
 8004bd0:	02dc6c00 	.word	0x02dc6c00
 8004bd4:	20000000 	.word	0x20000000
 8004bd8:	20000004 	.word	0x20000004
 8004bdc:	fffffeff 	.word	0xfffffeff
 8004be0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004be4:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <HAL_RCC_OscConfig+0x3bc>)
 8004be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be8:	2202      	movs	r2, #2
 8004bea:	4013      	ands	r3, r2
 8004bec:	d0dc      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x32c>
 8004bee:	e013      	b.n	8004c18 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd ffda 	bl	8002ba8 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004bf8:	e009      	b.n	8004c0e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd ffd5 	bl	8002ba8 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_RCC_OscConfig+0x3c0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e010      	b.n	8004c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_RCC_OscConfig+0x3bc>)
 8004c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c12:	2202      	movs	r2, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_OscConfig+0x3bc>)
 8004c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c26:	4b04      	ldr	r3, [pc, #16]	@ (8004c38 <HAL_RCC_OscConfig+0x3bc>)
 8004c28:	4905      	ldr	r1, [pc, #20]	@ (8004c40 <HAL_RCC_OscConfig+0x3c4>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b006      	add	sp, #24
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	00001388 	.word	0x00001388
 8004c40:	efffffff 	.word	0xefffffff

08004c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0e9      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c58:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	4013      	ands	r3, r2
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d91e      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b73      	ldr	r3, [pc, #460]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	4b70      	ldr	r3, [pc, #448]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c78:	f7fd ff96 	bl	8002ba8 <HAL_GetTick>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c80:	e009      	b.n	8004c96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c82:	f7fd ff91 	bl	8002ba8 <HAL_GetTick>
 8004c86:	0002      	movs	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004e38 <HAL_RCC_ClockConfig+0x1f4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0ca      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c96:	4b67      	ldr	r3, [pc, #412]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2207      	movs	r2, #7
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1ee      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	d017      	beq.n	8004cde <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cb8:	4b60      	ldr	r3, [pc, #384]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a60      	ldr	r2, [pc, #384]	@ (8004e40 <HAL_RCC_ClockConfig+0x1fc>)
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004cc2:	21b0      	movs	r1, #176	@ 0xb0
 8004cc4:	0109      	lsls	r1, r1, #4
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cca:	4b5c      	ldr	r3, [pc, #368]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4a5d      	ldr	r2, [pc, #372]	@ (8004e44 <HAL_RCC_ClockConfig+0x200>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	4b58      	ldr	r3, [pc, #352]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d055      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004ce8:	4b54      	ldr	r3, [pc, #336]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	221c      	movs	r2, #28
 8004cee:	4393      	bics	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	4b51      	ldr	r3, [pc, #324]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d04:	4b4d      	ldr	r3, [pc, #308]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	029b      	lsls	r3, r3, #10
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d11f      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e08b      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d1c:	4b47      	ldr	r3, [pc, #284]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4013      	ands	r3, r2
 8004d26:	d113      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e07f      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d106      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004d34:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	2202      	movs	r2, #2
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e074      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004d42:	4b3e      	ldr	r3, [pc, #248]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e06d      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d50:	4b3a      	ldr	r3, [pc, #232]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2207      	movs	r2, #7
 8004d56:	4393      	bics	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4b37      	ldr	r3, [pc, #220]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fd ff20 	bl	8002ba8 <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6c:	e009      	b.n	8004d82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6e:	f7fd ff1b 	bl	8002ba8 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a2f      	ldr	r2, [pc, #188]	@ (8004e38 <HAL_RCC_ClockConfig+0x1f4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e054      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b2e      	ldr	r3, [pc, #184]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2238      	movs	r2, #56	@ 0x38
 8004d88:	401a      	ands	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1ec      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d94:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2207      	movs	r2, #7
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d21e      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2207      	movs	r2, #7
 8004da8:	4393      	bics	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	4b21      	ldr	r3, [pc, #132]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004db4:	f7fd fef8 	bl	8002ba8 <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dbc:	e009      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbe:	f7fd fef3 	bl	8002ba8 <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e38 <HAL_RCC_ClockConfig+0x1f4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e02c      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2207      	movs	r2, #7
 8004dd8:	4013      	ands	r3, r2
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1ee      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	4013      	ands	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dea:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <HAL_RCC_ClockConfig+0x204>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004dfe:	f000 f82b 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e02:	0001      	movs	r1, r0
 8004e04:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	220f      	movs	r2, #15
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <HAL_RCC_ClockConfig+0x208>)
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	58d3      	ldr	r3, [r2, r3]
 8004e14:	221f      	movs	r2, #31
 8004e16:	4013      	ands	r3, r2
 8004e18:	000a      	movs	r2, r1
 8004e1a:	40da      	lsrs	r2, r3
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <HAL_RCC_ClockConfig+0x20c>)
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <HAL_RCC_ClockConfig+0x210>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7fd fe63 	bl	8002af0 <HAL_InitTick>
 8004e2a:	0003      	movs	r3, r0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b004      	add	sp, #16
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40022000 	.word	0x40022000
 8004e38:	00001388 	.word	0x00001388
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	ffff84ff 	.word	0xffff84ff
 8004e44:	fffff0ff 	.word	0xfffff0ff
 8004e48:	ffff8fff 	.word	0xffff8fff
 8004e4c:	08006c60 	.word	0x08006c60
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2238      	movs	r2, #56	@ 0x38
 8004e64:	4013      	ands	r3, r2
 8004e66:	d10f      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e68:	4b19      	ldr	r3, [pc, #100]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0adb      	lsrs	r3, r3, #11
 8004e6e:	2207      	movs	r2, #7
 8004e70:	4013      	ands	r3, r2
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	0013      	movs	r3, r2
 8004e78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	4815      	ldr	r0, [pc, #84]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004e7e:	f7fb f955 	bl	800012c <__udivsi3>
 8004e82:	0003      	movs	r3, r0
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e01e      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2238      	movs	r2, #56	@ 0x38
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d102      	bne.n	8004e9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e015      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2238      	movs	r2, #56	@ 0x38
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d103      	bne.n	8004eae <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e00b      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004eae:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2238      	movs	r2, #56	@ 0x38
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	d103      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004eba:	23fa      	movs	r3, #250	@ 0xfa
 8004ebc:	01db      	lsls	r3, r3, #7
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004ec6:	687b      	ldr	r3, [r7, #4]
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	02dc6c00 	.word	0x02dc6c00
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b02      	ldr	r3, [pc, #8]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x10>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004ef4:	f7ff fff2 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004ef8:	0001      	movs	r1, r0
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0b1b      	lsrs	r3, r3, #12
 8004f00:	2207      	movs	r2, #7
 8004f02:	401a      	ands	r2, r3
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	58d3      	ldr	r3, [r2, r3]
 8004f0a:	221f      	movs	r2, #31
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	40d9      	lsrs	r1, r3
 8004f10:	000b      	movs	r3, r1
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	08006ca0 	.word	0x08006ca0

08004f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f28:	2313      	movs	r3, #19
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f30:	2312      	movs	r3, #18
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	4013      	ands	r3, r2
 8004f42:	d100      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004f44:	e079      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2011      	movs	r0, #17
 8004f48:	183b      	adds	r3, r7, r0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b64      	ldr	r3, [pc, #400]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	055b      	lsls	r3, r3, #21
 8004f56:	4013      	ands	r3, r2
 8004f58:	d110      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5e:	4b60      	ldr	r3, [pc, #384]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f60:	2180      	movs	r1, #128	@ 0x80
 8004f62:	0549      	lsls	r1, r1, #21
 8004f64:	430a      	orrs	r2, r1
 8004f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f68:	4b5d      	ldr	r3, [pc, #372]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	055b      	lsls	r3, r3, #21
 8004f70:	4013      	ands	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004f7c:	4b58      	ldr	r3, [pc, #352]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f80:	23c0      	movs	r3, #192	@ 0xc0
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4013      	ands	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d019      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d014      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004f98:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9c:	4a51      	ldr	r2, [pc, #324]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fa8:	2180      	movs	r1, #128	@ 0x80
 8004faa:	0249      	lsls	r1, r1, #9
 8004fac:	430a      	orrs	r2, r1
 8004fae:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fb6:	494c      	ldr	r1, [pc, #304]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004fbc:	4b48      	ldr	r3, [pc, #288]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fca:	f7fd fded 	bl	8002ba8 <HAL_GetTick>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004fd2:	e00c      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fd fde8 	bl	8002ba8 <HAL_GetTick>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	4a43      	ldr	r2, [pc, #268]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d904      	bls.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8004fe4:	2313      	movs	r3, #19
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	2203      	movs	r2, #3
 8004fea:	701a      	strb	r2, [r3, #0]
          break;
 8004fec:	e004      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004fee:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d0ed      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8004ff8:	2313      	movs	r3, #19
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005006:	4a37      	ldr	r2, [pc, #220]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	4b33      	ldr	r3, [pc, #204]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005012:	430a      	orrs	r2, r1
 8005014:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	2312      	movs	r3, #18
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	2213      	movs	r2, #19
 800501e:	18ba      	adds	r2, r7, r2
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005024:	2311      	movs	r3, #17
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005032:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005034:	492e      	ldr	r1, [pc, #184]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	400a      	ands	r2, r1
 8005038:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005044:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	2203      	movs	r2, #3
 800504a:	4393      	bics	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005054:	430a      	orrs	r2, r1
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	4013      	ands	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	4a23      	ldr	r2, [pc, #140]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005072:	430a      	orrs	r2, r1
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	2380      	movs	r3, #128	@ 0x80
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	4013      	ands	r3, r2
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	0899      	lsrs	r1, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005090:	430a      	orrs	r2, r1
 8005092:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	4013      	ands	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80050a0:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a4:	4a14      	ldr	r2, [pc, #80]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050b0:	430a      	orrs	r2, r1
 80050b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da09      	bge.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80050bc:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	22e0      	movs	r2, #224	@ 0xe0
 80050c2:	4393      	bics	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
  }
  return status;
 80050d0:	2312      	movs	r3, #18
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	781b      	ldrb	r3, [r3, #0]
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b006      	add	sp, #24
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000
 80050e4:	fffffcff 	.word	0xfffffcff
 80050e8:	fffeffff 	.word	0xfffeffff
 80050ec:	00001388 	.word	0x00001388
 80050f0:	efffffff 	.word	0xefffffff
 80050f4:	ffffcfff 	.word	0xffffcfff
 80050f8:	ffff3fff 	.word	0xffff3fff

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e04a      	b.n	80051a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	223d      	movs	r2, #61	@ 0x3d
 8005112:	5c9b      	ldrb	r3, [r3, r2]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223c      	movs	r2, #60	@ 0x3c
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f7fd fbad 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	223d      	movs	r2, #61	@ 0x3d
 800512e:	2102      	movs	r1, #2
 8005130:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	0019      	movs	r1, r3
 800513c:	0010      	movs	r0, r2
 800513e:	f000 f951 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2248      	movs	r2, #72	@ 0x48
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	223e      	movs	r2, #62	@ 0x3e
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	223f      	movs	r2, #63	@ 0x3f
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2240      	movs	r2, #64	@ 0x40
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2241      	movs	r2, #65	@ 0x41
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2242      	movs	r2, #66	@ 0x42
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2243      	movs	r2, #67	@ 0x43
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2244      	movs	r2, #68	@ 0x44
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2245      	movs	r2, #69	@ 0x45
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2246      	movs	r2, #70	@ 0x46
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2247      	movs	r2, #71	@ 0x47
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	223d      	movs	r2, #61	@ 0x3d
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	223d      	movs	r2, #61	@ 0x3d
 80051b8:	5c9b      	ldrb	r3, [r3, r2]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e02f      	b.n	8005224 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	223d      	movs	r2, #61	@ 0x3d
 80051c8:	2102      	movs	r1, #2
 80051ca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a16      	ldr	r2, [pc, #88]	@ (800522c <HAL_TIM_Base_Start+0x80>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start+0x34>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_TIM_Base_Start+0x84>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d116      	bne.n	800520e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <HAL_TIM_Base_Start+0x88>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d016      	beq.n	8005220 <HAL_TIM_Base_Start+0x74>
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	2380      	movs	r3, #128	@ 0x80
 80051f6:	025b      	lsls	r3, r3, #9
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d011      	beq.n	8005220 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2101      	movs	r1, #1
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	e008      	b.n	8005220 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e000      	b.n	8005222 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40000400 	.word	0x40000400
 8005234:	00010007 	.word	0x00010007

08005238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	230f      	movs	r3, #15
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	223c      	movs	r2, #60	@ 0x3c
 800524e:	5c9b      	ldrb	r3, [r3, r2]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x20>
 8005254:	2302      	movs	r3, #2
 8005256:	e0bc      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x19a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	223c      	movs	r2, #60	@ 0x3c
 800525c:	2101      	movs	r1, #1
 800525e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	223d      	movs	r2, #61	@ 0x3d
 8005264:	2102      	movs	r1, #2
 8005266:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a5a      	ldr	r2, [pc, #360]	@ (80053dc <HAL_TIM_ConfigClockSource+0x1a4>)
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a59      	ldr	r2, [pc, #356]	@ (80053e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800527c:	4013      	ands	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2280      	movs	r2, #128	@ 0x80
 800528e:	0192      	lsls	r2, r2, #6
 8005290:	4293      	cmp	r3, r2
 8005292:	d040      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xde>
 8005294:	2280      	movs	r2, #128	@ 0x80
 8005296:	0192      	lsls	r2, r2, #6
 8005298:	4293      	cmp	r3, r2
 800529a:	d900      	bls.n	800529e <HAL_TIM_ConfigClockSource+0x66>
 800529c:	e088      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 800529e:	2280      	movs	r2, #128	@ 0x80
 80052a0:	0152      	lsls	r2, r2, #5
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d100      	bne.n	80052a8 <HAL_TIM_ConfigClockSource+0x70>
 80052a6:	e088      	b.n	80053ba <HAL_TIM_ConfigClockSource+0x182>
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	0152      	lsls	r2, r2, #5
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d900      	bls.n	80052b2 <HAL_TIM_ConfigClockSource+0x7a>
 80052b0:	e07e      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052b2:	2b70      	cmp	r3, #112	@ 0x70
 80052b4:	d018      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0xb0>
 80052b6:	d900      	bls.n	80052ba <HAL_TIM_ConfigClockSource+0x82>
 80052b8:	e07a      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052ba:	2b60      	cmp	r3, #96	@ 0x60
 80052bc:	d04f      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x126>
 80052be:	d900      	bls.n	80052c2 <HAL_TIM_ConfigClockSource+0x8a>
 80052c0:	e076      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052c2:	2b50      	cmp	r3, #80	@ 0x50
 80052c4:	d03b      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x106>
 80052c6:	d900      	bls.n	80052ca <HAL_TIM_ConfigClockSource+0x92>
 80052c8:	e072      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d057      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x146>
 80052ce:	d900      	bls.n	80052d2 <HAL_TIM_ConfigClockSource+0x9a>
 80052d0:	e06e      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052d2:	2b30      	cmp	r3, #48	@ 0x30
 80052d4:	d063      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x166>
 80052d6:	d86b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d060      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x166>
 80052dc:	d868      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d05d      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x166>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d05b      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x166>
 80052e6:	e063      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052f8:	f000 f95c 	bl	80055b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2277      	movs	r2, #119	@ 0x77
 8005308:	4313      	orrs	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e052      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005326:	f000 f945 	bl	80055b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2180      	movs	r1, #128	@ 0x80
 8005336:	01c9      	lsls	r1, r1, #7
 8005338:	430a      	orrs	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
      break;
 800533c:	e03e      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	001a      	movs	r2, r3
 800534c:	f000 f8b6 	bl	80054bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2150      	movs	r1, #80	@ 0x50
 8005356:	0018      	movs	r0, r3
 8005358:	f000 f910 	bl	800557c <TIM_ITRx_SetConfig>
      break;
 800535c:	e02e      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536a:	001a      	movs	r2, r3
 800536c:	f000 f8d4 	bl	8005518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2160      	movs	r1, #96	@ 0x60
 8005376:	0018      	movs	r0, r3
 8005378:	f000 f900 	bl	800557c <TIM_ITRx_SetConfig>
      break;
 800537c:	e01e      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	001a      	movs	r2, r3
 800538c:	f000 f896 	bl	80054bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	@ 0x40
 8005396:	0018      	movs	r0, r3
 8005398:	f000 f8f0 	bl	800557c <TIM_ITRx_SetConfig>
      break;
 800539c:	e00e      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	0019      	movs	r1, r3
 80053a8:	0010      	movs	r0, r2
 80053aa:	f000 f8e7 	bl	800557c <TIM_ITRx_SetConfig>
      break;
 80053ae:	e005      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80053b0:	230f      	movs	r3, #15
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80053ba:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	223d      	movs	r2, #61	@ 0x3d
 80053c0:	2101      	movs	r1, #1
 80053c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	223c      	movs	r2, #60	@ 0x3c
 80053c8:	2100      	movs	r1, #0
 80053ca:	5499      	strb	r1, [r3, r2]

  return status;
 80053cc:	230f      	movs	r3, #15
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	781b      	ldrb	r3, [r3, #0]
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	ffceff88 	.word	0xffceff88
 80053e0:	ffff00ff 	.word	0xffff00ff

080053e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a2b      	ldr	r2, [pc, #172]	@ (80054a4 <TIM_Base_SetConfig+0xc0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x20>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <TIM_Base_SetConfig+0xc4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2270      	movs	r2, #112	@ 0x70
 8005408:	4393      	bics	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <TIM_Base_SetConfig+0xc0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a21      	ldr	r2, [pc, #132]	@ (80054a8 <TIM_Base_SetConfig+0xc4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a20      	ldr	r2, [pc, #128]	@ (80054ac <TIM_Base_SetConfig+0xc8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <TIM_Base_SetConfig+0xcc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0x5a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1e      	ldr	r2, [pc, #120]	@ (80054b4 <TIM_Base_SetConfig+0xd0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a1d      	ldr	r2, [pc, #116]	@ (80054b8 <TIM_Base_SetConfig+0xd4>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2280      	movs	r2, #128	@ 0x80
 8005454:	4393      	bics	r3, r2
 8005456:	001a      	movs	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <TIM_Base_SetConfig+0xc0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xaa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a0b      	ldr	r2, [pc, #44]	@ (80054b0 <TIM_Base_SetConfig+0xcc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <TIM_Base_SetConfig+0xd0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d103      	bne.n	8005496 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	615a      	str	r2, [r3, #20]
}
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b004      	add	sp, #16
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40002000 	.word	0x40002000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800
 80054b8:	fffffcff 	.word	0xfffffcff

080054bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	2201      	movs	r2, #1
 80054d4:	4393      	bics	r3, r2
 80054d6:	001a      	movs	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	22f0      	movs	r2, #240	@ 0xf0
 80054e6:	4393      	bics	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	220a      	movs	r2, #10
 80054f8:	4393      	bics	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	46c0      	nop			@ (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b006      	add	sp, #24
 8005516:	bd80      	pop	{r7, pc}

08005518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2210      	movs	r2, #16
 8005530:	4393      	bics	r3, r2
 8005532:	001a      	movs	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <TIM_TI2_ConfigInputStage+0x60>)
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	22a0      	movs	r2, #160	@ 0xa0
 8005554:	4393      	bics	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b006      	add	sp, #24
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	ffff0fff 	.word	0xffff0fff

0800557c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <TIM_ITRx_SetConfig+0x34>)
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	2207      	movs	r2, #7
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b004      	add	sp, #16
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	ffcfff8f 	.word	0xffcfff8f

080055b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <TIM_ETR_SetConfig+0x3c>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b006      	add	sp, #24
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	ffff00ff 	.word	0xffff00ff

080055f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	223c      	movs	r2, #60	@ 0x3c
 8005602:	5c9b      	ldrb	r3, [r3, r2]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005608:	2302      	movs	r3, #2
 800560a:	e04a      	b.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	223c      	movs	r2, #60	@ 0x3c
 8005610:	2101      	movs	r1, #1
 8005612:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	223d      	movs	r2, #61	@ 0x3d
 8005618:	2102      	movs	r1, #2
 800561a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800563a:	4013      	ands	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2270      	movs	r2, #112	@ 0x70
 800564c:	4393      	bics	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a10      	ldr	r2, [pc, #64]	@ (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10c      	bne.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2280      	movs	r2, #128	@ 0x80
 800567a:	4393      	bics	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	223d      	movs	r2, #61	@ 0x3d
 8005694:	2101      	movs	r1, #1
 8005696:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	223c      	movs	r2, #60	@ 0x3c
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b004      	add	sp, #16
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	ff0fffff 	.word	0xff0fffff
 80056b4:	40000400 	.word	0x40000400

080056b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e046      	b.n	8005758 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2288      	movs	r2, #136	@ 0x88
 80056ce:	589b      	ldr	r3, [r3, r2]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2284      	movs	r2, #132	@ 0x84
 80056d8:	2100      	movs	r1, #0
 80056da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f7fd f8f0 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2288      	movs	r2, #136	@ 0x88
 80056e8:	2124      	movs	r1, #36	@ 0x24
 80056ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2101      	movs	r1, #1
 80056f8:	438a      	bics	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0018      	movs	r0, r3
 8005708:	f000 fa4e 	bl	8005ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0018      	movs	r0, r3
 8005710:	f000 f8cc 	bl	80058ac <UART_SetConfig>
 8005714:	0003      	movs	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e01c      	b.n	8005758 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	490d      	ldr	r1, [pc, #52]	@ (8005760 <HAL_UART_Init+0xa8>)
 800572a:	400a      	ands	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	212a      	movs	r1, #42	@ 0x2a
 800573a:	438a      	bics	r2, r1
 800573c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2101      	movs	r1, #1
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f000 fadd 	bl	8005d10 <UART_CheckIdleState>
 8005756:	0003      	movs	r3, r0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b002      	add	sp, #8
 800575e:	bd80      	pop	{r7, pc}
 8005760:	ffffb7ff 	.word	0xffffb7ff

08005764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	1dbb      	adds	r3, r7, #6
 8005772:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2288      	movs	r2, #136	@ 0x88
 8005778:	589b      	ldr	r3, [r3, r2]
 800577a:	2b20      	cmp	r3, #32
 800577c:	d000      	beq.n	8005780 <HAL_UART_Transmit+0x1c>
 800577e:	e090      	b.n	80058a2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_UART_Transmit+0x2a>
 8005786:	1dbb      	adds	r3, r7, #6
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e088      	b.n	80058a4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	2380      	movs	r3, #128	@ 0x80
 8005798:	015b      	lsls	r3, r3, #5
 800579a:	429a      	cmp	r2, r3
 800579c:	d109      	bne.n	80057b2 <HAL_UART_Transmit+0x4e>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d105      	bne.n	80057b2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2201      	movs	r2, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e078      	b.n	80058a4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2290      	movs	r2, #144	@ 0x90
 80057b6:	2100      	movs	r1, #0
 80057b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2288      	movs	r2, #136	@ 0x88
 80057be:	2121      	movs	r1, #33	@ 0x21
 80057c0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c2:	f7fd f9f1 	bl	8002ba8 <HAL_GetTick>
 80057c6:	0003      	movs	r3, r0
 80057c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1dba      	adds	r2, r7, #6
 80057ce:	2154      	movs	r1, #84	@ 0x54
 80057d0:	8812      	ldrh	r2, [r2, #0]
 80057d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1dba      	adds	r2, r7, #6
 80057d8:	2156      	movs	r1, #86	@ 0x56
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	2380      	movs	r3, #128	@ 0x80
 80057e4:	015b      	lsls	r3, r3, #5
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d108      	bne.n	80057fc <HAL_UART_Transmit+0x98>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e003      	b.n	8005804 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005804:	e030      	b.n	8005868 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	0013      	movs	r3, r2
 8005810:	2200      	movs	r2, #0
 8005812:	2180      	movs	r1, #128	@ 0x80
 8005814:	f000 fb26 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005818:	1e03      	subs	r3, r0, #0
 800581a:	d005      	beq.n	8005828 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2288      	movs	r2, #136	@ 0x88
 8005820:	2120      	movs	r1, #32
 8005822:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e03d      	b.n	80058a4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	001a      	movs	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	05d2      	lsls	r2, r2, #23
 800583a:	0dd2      	lsrs	r2, r2, #23
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3302      	adds	r3, #2
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e007      	b.n	8005856 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2256      	movs	r2, #86	@ 0x56
 800585a:	5a9b      	ldrh	r3, [r3, r2]
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b299      	uxth	r1, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2256      	movs	r2, #86	@ 0x56
 8005866:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2256      	movs	r2, #86	@ 0x56
 800586c:	5a9b      	ldrh	r3, [r3, r2]
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1c8      	bne.n	8005806 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	0013      	movs	r3, r2
 800587e:	2200      	movs	r2, #0
 8005880:	2140      	movs	r1, #64	@ 0x40
 8005882:	f000 faef 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005886:	1e03      	subs	r3, r0, #0
 8005888:	d005      	beq.n	8005896 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2288      	movs	r2, #136	@ 0x88
 800588e:	2120      	movs	r1, #32
 8005890:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2288      	movs	r2, #136	@ 0x88
 800589a:	2120      	movs	r1, #32
 800589c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b008      	add	sp, #32
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058b4:	231e      	movs	r3, #30
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4aab      	ldr	r2, [pc, #684]	@ (8005b88 <UART_SetConfig+0x2dc>)
 80058dc:	4013      	ands	r3, r2
 80058de:	0019      	movs	r1, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4aa6      	ldr	r2, [pc, #664]	@ (8005b8c <UART_SetConfig+0x2e0>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	0019      	movs	r1, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a9d      	ldr	r2, [pc, #628]	@ (8005b90 <UART_SetConfig+0x2e4>)
 800591a:	4013      	ands	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	430a      	orrs	r2, r1
 8005926:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	220f      	movs	r2, #15
 8005930:	4393      	bics	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a93      	ldr	r2, [pc, #588]	@ (8005b94 <UART_SetConfig+0x2e8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d127      	bne.n	800599a <UART_SetConfig+0xee>
 800594a:	4b93      	ldr	r3, [pc, #588]	@ (8005b98 <UART_SetConfig+0x2ec>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594e:	2203      	movs	r2, #3
 8005950:	4013      	ands	r3, r2
 8005952:	2b03      	cmp	r3, #3
 8005954:	d017      	beq.n	8005986 <UART_SetConfig+0xda>
 8005956:	d81b      	bhi.n	8005990 <UART_SetConfig+0xe4>
 8005958:	2b02      	cmp	r3, #2
 800595a:	d00a      	beq.n	8005972 <UART_SetConfig+0xc6>
 800595c:	d818      	bhi.n	8005990 <UART_SetConfig+0xe4>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <UART_SetConfig+0xbc>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d00a      	beq.n	800597c <UART_SetConfig+0xd0>
 8005966:	e013      	b.n	8005990 <UART_SetConfig+0xe4>
 8005968:	231f      	movs	r3, #31
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e021      	b.n	80059b6 <UART_SetConfig+0x10a>
 8005972:	231f      	movs	r3, #31
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2202      	movs	r2, #2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	e01c      	b.n	80059b6 <UART_SetConfig+0x10a>
 800597c:	231f      	movs	r3, #31
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	2204      	movs	r2, #4
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e017      	b.n	80059b6 <UART_SetConfig+0x10a>
 8005986:	231f      	movs	r3, #31
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2208      	movs	r2, #8
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e012      	b.n	80059b6 <UART_SetConfig+0x10a>
 8005990:	231f      	movs	r3, #31
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2210      	movs	r2, #16
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e00d      	b.n	80059b6 <UART_SetConfig+0x10a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7f      	ldr	r2, [pc, #508]	@ (8005b9c <UART_SetConfig+0x2f0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d104      	bne.n	80059ae <UART_SetConfig+0x102>
 80059a4:	231f      	movs	r3, #31
 80059a6:	18fb      	adds	r3, r7, r3
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e003      	b.n	80059b6 <UART_SetConfig+0x10a>
 80059ae:	231f      	movs	r3, #31
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	2210      	movs	r2, #16
 80059b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	2380      	movs	r3, #128	@ 0x80
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	429a      	cmp	r2, r3
 80059c0:	d000      	beq.n	80059c4 <UART_SetConfig+0x118>
 80059c2:	e06f      	b.n	8005aa4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80059c4:	231f      	movs	r3, #31
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d01f      	beq.n	8005a0e <UART_SetConfig+0x162>
 80059ce:	dc22      	bgt.n	8005a16 <UART_SetConfig+0x16a>
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d017      	beq.n	8005a04 <UART_SetConfig+0x158>
 80059d4:	dc1f      	bgt.n	8005a16 <UART_SetConfig+0x16a>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <UART_SetConfig+0x134>
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d005      	beq.n	80059ea <UART_SetConfig+0x13e>
 80059de:	e01a      	b.n	8005a16 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7ff fa86 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 80059e4:	0003      	movs	r3, r0
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e01c      	b.n	8005a24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80059ea:	4b6b      	ldr	r3, [pc, #428]	@ (8005b98 <UART_SetConfig+0x2ec>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2207      	movs	r2, #7
 80059f2:	4013      	ands	r3, r2
 80059f4:	3301      	adds	r3, #1
 80059f6:	0019      	movs	r1, r3
 80059f8:	4869      	ldr	r0, [pc, #420]	@ (8005ba0 <UART_SetConfig+0x2f4>)
 80059fa:	f7fa fb97 	bl	800012c <__udivsi3>
 80059fe:	0003      	movs	r3, r0
 8005a00:	61bb      	str	r3, [r7, #24]
        break;
 8005a02:	e00f      	b.n	8005a24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a04:	f7ff fa28 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	61bb      	str	r3, [r7, #24]
        break;
 8005a0c:	e00a      	b.n	8005a24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	2380      	movs	r3, #128	@ 0x80
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	61bb      	str	r3, [r7, #24]
        break;
 8005a14:	e006      	b.n	8005a24 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a1a:	231e      	movs	r3, #30
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
        break;
 8005a22:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d100      	bne.n	8005a2c <UART_SetConfig+0x180>
 8005a2a:	e097      	b.n	8005b5c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a30:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba4 <UART_SetConfig+0x2f8>)
 8005a32:	0052      	lsls	r2, r2, #1
 8005a34:	5ad3      	ldrh	r3, [r2, r3]
 8005a36:	0019      	movs	r1, r3
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f7fa fb77 	bl	800012c <__udivsi3>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	18d2      	adds	r2, r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	0019      	movs	r1, r3
 8005a50:	0010      	movs	r0, r2
 8005a52:	f7fa fb6b 	bl	800012c <__udivsi3>
 8005a56:	0003      	movs	r3, r0
 8005a58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b0f      	cmp	r3, #15
 8005a5e:	d91c      	bls.n	8005a9a <UART_SetConfig+0x1ee>
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d217      	bcs.n	8005a9a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	200e      	movs	r0, #14
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	210f      	movs	r1, #15
 8005a74:	438a      	bics	r2, r1
 8005a76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2207      	movs	r2, #7
 8005a80:	4013      	ands	r3, r2
 8005a82:	b299      	uxth	r1, r3
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	183a      	adds	r2, r7, r0
 8005a88:	8812      	ldrh	r2, [r2, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	183a      	adds	r2, r7, r0
 8005a94:	8812      	ldrh	r2, [r2, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e060      	b.n	8005b5c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	231e      	movs	r3, #30
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e05b      	b.n	8005b5c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa4:	231f      	movs	r3, #31
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d01f      	beq.n	8005aee <UART_SetConfig+0x242>
 8005aae:	dc22      	bgt.n	8005af6 <UART_SetConfig+0x24a>
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d017      	beq.n	8005ae4 <UART_SetConfig+0x238>
 8005ab4:	dc1f      	bgt.n	8005af6 <UART_SetConfig+0x24a>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <UART_SetConfig+0x214>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d005      	beq.n	8005aca <UART_SetConfig+0x21e>
 8005abe:	e01a      	b.n	8005af6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7ff fa16 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	61bb      	str	r3, [r7, #24]
        break;
 8005ac8:	e01c      	b.n	8005b04 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005aca:	4b33      	ldr	r3, [pc, #204]	@ (8005b98 <UART_SetConfig+0x2ec>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	4831      	ldr	r0, [pc, #196]	@ (8005ba0 <UART_SetConfig+0x2f4>)
 8005ada:	f7fa fb27 	bl	800012c <__udivsi3>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	61bb      	str	r3, [r7, #24]
        break;
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae4:	f7ff f9b8 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e00a      	b.n	8005b04 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	61bb      	str	r3, [r7, #24]
        break;
 8005af4:	e006      	b.n	8005b04 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005afa:	231e      	movs	r3, #30
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
        break;
 8005b02:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d028      	beq.n	8005b5c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ba4 <UART_SetConfig+0x2f8>)
 8005b10:	0052      	lsls	r2, r2, #1
 8005b12:	5ad3      	ldrh	r3, [r2, r3]
 8005b14:	0019      	movs	r1, r3
 8005b16:	69b8      	ldr	r0, [r7, #24]
 8005b18:	f7fa fb08 	bl	800012c <__udivsi3>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	001a      	movs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	18d2      	adds	r2, r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	0010      	movs	r0, r2
 8005b30:	f7fa fafc 	bl	800012c <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d90a      	bls.n	8005b54 <UART_SetConfig+0x2a8>
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	025b      	lsls	r3, r3, #9
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d205      	bcs.n	8005b54 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	e003      	b.n	8005b5c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b54:	231e      	movs	r3, #30
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	226a      	movs	r2, #106	@ 0x6a
 8005b60:	2101      	movs	r1, #1
 8005b62:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2268      	movs	r2, #104	@ 0x68
 8005b68:	2101      	movs	r1, #1
 8005b6a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b78:	231e      	movs	r3, #30
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b008      	add	sp, #32
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	cfff69f3 	.word	0xcfff69f3
 8005b8c:	ffffcfff 	.word	0xffffcfff
 8005b90:	11fff4ff 	.word	0x11fff4ff
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	40004400 	.word	0x40004400
 8005ba0:	02dc6c00 	.word	0x02dc6c00
 8005ba4:	08006cc0 	.word	0x08006cc0

08005ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <UART_AdvFeatureConfig+0x144>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4a43      	ldr	r2, [pc, #268]	@ (8005cf0 <UART_AdvFeatureConfig+0x148>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a3b      	ldr	r2, [pc, #236]	@ (8005cf4 <UART_AdvFeatureConfig+0x14c>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a34      	ldr	r2, [pc, #208]	@ (8005cf8 <UART_AdvFeatureConfig+0x150>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	@ (8005cfc <UART_AdvFeatureConfig+0x154>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	2220      	movs	r2, #32
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a25      	ldr	r2, [pc, #148]	@ (8005d00 <UART_AdvFeatureConfig+0x158>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	2240      	movs	r2, #64	@ 0x40
 8005c82:	4013      	ands	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d04 <UART_AdvFeatureConfig+0x15c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	035b      	lsls	r3, r3, #13
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10b      	bne.n	8005cc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <UART_AdvFeatureConfig+0x160>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8005d0c <UART_AdvFeatureConfig+0x164>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }
}
 8005ce4:	46c0      	nop			@ (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	ffff7fff 	.word	0xffff7fff
 8005cf0:	fffdffff 	.word	0xfffdffff
 8005cf4:	fffeffff 	.word	0xfffeffff
 8005cf8:	fffbffff 	.word	0xfffbffff
 8005cfc:	ffffefff 	.word	0xffffefff
 8005d00:	ffffdfff 	.word	0xffffdfff
 8005d04:	ffefffff 	.word	0xffefffff
 8005d08:	ff9fffff 	.word	0xff9fffff
 8005d0c:	fff7ffff 	.word	0xfff7ffff

08005d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b092      	sub	sp, #72	@ 0x48
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2290      	movs	r2, #144	@ 0x90
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d20:	f7fc ff42 	bl	8002ba8 <HAL_GetTick>
 8005d24:	0003      	movs	r3, r0
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2208      	movs	r2, #8
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d12d      	bne.n	8005d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d38:	2280      	movs	r2, #128	@ 0x80
 8005d3a:	0391      	lsls	r1, r2, #14
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4a47      	ldr	r2, [pc, #284]	@ (8005e5c <UART_CheckIdleState+0x14c>)
 8005d40:	9200      	str	r2, [sp, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f000 f88e 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005d48:	1e03      	subs	r3, r0, #0
 8005d4a:	d022      	beq.n	8005d92 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d56:	2301      	movs	r3, #1
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	f383 8810 	msr	PRIMASK, r3
}
 8005d60:	46c0      	nop			@ (mov r8, r8)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2180      	movs	r1, #128	@ 0x80
 8005d6e:	438a      	bics	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	f383 8810 	msr	PRIMASK, r3
}
 8005d7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2288      	movs	r2, #136	@ 0x88
 8005d82:	2120      	movs	r1, #32
 8005d84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2284      	movs	r2, #132	@ 0x84
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e060      	b.n	8005e54 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d146      	bne.n	8005e2e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	03d1      	lsls	r1, r2, #15
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <UART_CheckIdleState+0x14c>)
 8005daa:	9200      	str	r2, [sp, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f000 f859 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005db2:	1e03      	subs	r3, r0, #0
 8005db4:	d03b      	beq.n	8005e2e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005db6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dba:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4922      	ldr	r1, [pc, #136]	@ (8005e60 <UART_CheckIdleState+0x150>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005de8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dec:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df2:	2301      	movs	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			@ (mov r8, r8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	438a      	bics	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	f383 8810 	msr	PRIMASK, r3
}
 8005e18:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	228c      	movs	r2, #140	@ 0x8c
 8005e1e:	2120      	movs	r1, #32
 8005e20:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2284      	movs	r2, #132	@ 0x84
 8005e26:	2100      	movs	r1, #0
 8005e28:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e012      	b.n	8005e54 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2288      	movs	r2, #136	@ 0x88
 8005e32:	2120      	movs	r1, #32
 8005e34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	228c      	movs	r2, #140	@ 0x8c
 8005e3a:	2120      	movs	r1, #32
 8005e3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2284      	movs	r2, #132	@ 0x84
 8005e4e:	2100      	movs	r1, #0
 8005e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b010      	add	sp, #64	@ 0x40
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	01ffffff 	.word	0x01ffffff
 8005e60:	fffffedf 	.word	0xfffffedf

08005e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	1dfb      	adds	r3, r7, #7
 8005e72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e74:	e04b      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	d048      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7c:	f7fc fe94 	bl	8002ba8 <HAL_GetTick>
 8005e80:	0002      	movs	r2, r0
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e04b      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d035      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d111      	bne.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f83c 	bl	8005f38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2290      	movs	r2, #144	@ 0x90
 8005ec4:	2108      	movs	r1, #8
 8005ec6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2284      	movs	r2, #132	@ 0x84
 8005ecc:	2100      	movs	r1, #0
 8005ece:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e02c      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	2380      	movs	r3, #128	@ 0x80
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	401a      	ands	r2, r3
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d112      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2280      	movs	r2, #128	@ 0x80
 8005eee:	0112      	lsls	r2, r2, #4
 8005ef0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 f81f 	bl	8005f38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2290      	movs	r2, #144	@ 0x90
 8005efe:	2120      	movs	r1, #32
 8005f00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2284      	movs	r2, #132	@ 0x84
 8005f06:	2100      	movs	r1, #0
 8005f08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e00f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	425a      	negs	r2, r3
 8005f1e:	4153      	adcs	r3, r2
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	001a      	movs	r2, r3
 8005f24:	1dfb      	adds	r3, r7, #7
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d0a4      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b004      	add	sp, #16
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08e      	sub	sp, #56	@ 0x38
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f40:	f3ef 8310 	mrs	r3, PRIMASK
 8005f44:	617b      	str	r3, [r7, #20]
  return(result);
 8005f46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f383 8810 	msr	PRIMASK, r3
}
 8005f54:	46c0      	nop			@ (mov r8, r8)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4926      	ldr	r1, [pc, #152]	@ (8005ffc <UART_EndRxTransfer+0xc4>)
 8005f62:	400a      	ands	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f383 8810 	msr	PRIMASK, r3
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f72:	f3ef 8310 	mrs	r3, PRIMASK
 8005f76:	623b      	str	r3, [r7, #32]
  return(result);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	f383 8810 	msr	PRIMASK, r3
}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	491b      	ldr	r1, [pc, #108]	@ (8006000 <UART_EndRxTransfer+0xc8>)
 8005f94:	400a      	ands	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d118      	bne.n	8005fde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fac:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f383 8810 	msr	PRIMASK, r3
}
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2110      	movs	r1, #16
 8005fce:	438a      	bics	r2, r1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	228c      	movs	r2, #140	@ 0x8c
 8005fe2:	2120      	movs	r1, #32
 8005fe4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b00e      	add	sp, #56	@ 0x38
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	fffffedf 	.word	0xfffffedf
 8006000:	effffffe 	.word	0xeffffffe

08006004 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2284      	movs	r2, #132	@ 0x84
 8006010:	5c9b      	ldrb	r3, [r3, r2]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_UARTEx_DisableFifoMode+0x16>
 8006016:	2302      	movs	r3, #2
 8006018:	e027      	b.n	800606a <HAL_UARTEx_DisableFifoMode+0x66>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2284      	movs	r2, #132	@ 0x84
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2288      	movs	r2, #136	@ 0x88
 8006026:	2124      	movs	r1, #36	@ 0x24
 8006028:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2101      	movs	r1, #1
 800603e:	438a      	bics	r2, r1
 8006040:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a0b      	ldr	r2, [pc, #44]	@ (8006074 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006046:	4013      	ands	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2288      	movs	r2, #136	@ 0x88
 800605c:	2120      	movs	r1, #32
 800605e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2284      	movs	r2, #132	@ 0x84
 8006064:	2100      	movs	r1, #0
 8006066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	dfffffff 	.word	0xdfffffff

08006078 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2284      	movs	r2, #132	@ 0x84
 8006086:	5c9b      	ldrb	r3, [r3, r2]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e02e      	b.n	80060ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2284      	movs	r2, #132	@ 0x84
 8006094:	2101      	movs	r1, #1
 8006096:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2288      	movs	r2, #136	@ 0x88
 800609c:	2124      	movs	r1, #36	@ 0x24
 800609e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2101      	movs	r1, #1
 80060b4:	438a      	bics	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	08d9      	lsrs	r1, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f854 	bl	800617c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2288      	movs	r2, #136	@ 0x88
 80060e0:	2120      	movs	r1, #32
 80060e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2284      	movs	r2, #132	@ 0x84
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b004      	add	sp, #16
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2284      	movs	r2, #132	@ 0x84
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e02f      	b.n	8006170 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2284      	movs	r2, #132	@ 0x84
 8006114:	2101      	movs	r1, #1
 8006116:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2288      	movs	r2, #136	@ 0x88
 800611c:	2124      	movs	r1, #36	@ 0x24
 800611e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2101      	movs	r1, #1
 8006134:	438a      	bics	r2, r1
 8006136:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	4a0e      	ldr	r2, [pc, #56]	@ (8006178 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006140:	4013      	ands	r3, r2
 8006142:	0019      	movs	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	0018      	movs	r0, r3
 8006152:	f000 f813 	bl	800617c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2288      	movs	r2, #136	@ 0x88
 8006162:	2120      	movs	r1, #32
 8006164:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2284      	movs	r2, #132	@ 0x84
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bd80      	pop	{r7, pc}
 8006178:	f1ffffff 	.word	0xf1ffffff

0800617c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	226a      	movs	r2, #106	@ 0x6a
 8006190:	2101      	movs	r1, #1
 8006192:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2268      	movs	r2, #104	@ 0x68
 8006198:	2101      	movs	r1, #1
 800619a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800619c:	e043      	b.n	8006226 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800619e:	260f      	movs	r6, #15
 80061a0:	19bb      	adds	r3, r7, r6
 80061a2:	2208      	movs	r2, #8
 80061a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061a6:	200e      	movs	r0, #14
 80061a8:	183b      	adds	r3, r7, r0
 80061aa:	2208      	movs	r2, #8
 80061ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	0e5b      	lsrs	r3, r3, #25
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	240d      	movs	r4, #13
 80061ba:	193b      	adds	r3, r7, r4
 80061bc:	2107      	movs	r1, #7
 80061be:	400a      	ands	r2, r1
 80061c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	0f5b      	lsrs	r3, r3, #29
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	250c      	movs	r5, #12
 80061ce:	197b      	adds	r3, r7, r5
 80061d0:	2107      	movs	r1, #7
 80061d2:	400a      	ands	r2, r1
 80061d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d6:	183b      	adds	r3, r7, r0
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	197a      	adds	r2, r7, r5
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	4914      	ldr	r1, [pc, #80]	@ (8006230 <UARTEx_SetNbDataToProcess+0xb4>)
 80061e0:	5c8a      	ldrb	r2, [r1, r2]
 80061e2:	435a      	muls	r2, r3
 80061e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4a12      	ldr	r2, [pc, #72]	@ (8006234 <UARTEx_SetNbDataToProcess+0xb8>)
 80061ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ee:	0019      	movs	r1, r3
 80061f0:	f7fa f826 	bl	8000240 <__divsi3>
 80061f4:	0003      	movs	r3, r0
 80061f6:	b299      	uxth	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	226a      	movs	r2, #106	@ 0x6a
 80061fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061fe:	19bb      	adds	r3, r7, r6
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	193a      	adds	r2, r7, r4
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	490a      	ldr	r1, [pc, #40]	@ (8006230 <UARTEx_SetNbDataToProcess+0xb4>)
 8006208:	5c8a      	ldrb	r2, [r1, r2]
 800620a:	435a      	muls	r2, r3
 800620c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800620e:	193b      	adds	r3, r7, r4
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	4a08      	ldr	r2, [pc, #32]	@ (8006234 <UARTEx_SetNbDataToProcess+0xb8>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006216:	0019      	movs	r1, r3
 8006218:	f7fa f812 	bl	8000240 <__divsi3>
 800621c:	0003      	movs	r3, r0
 800621e:	b299      	uxth	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2268      	movs	r2, #104	@ 0x68
 8006224:	5299      	strh	r1, [r3, r2]
}
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	46bd      	mov	sp, r7
 800622a:	b005      	add	sp, #20
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	08006cd8 	.word	0x08006cd8
 8006234:	08006ce0 	.word	0x08006ce0

08006238 <siprintf>:
 8006238:	b40e      	push	{r1, r2, r3}
 800623a:	b500      	push	{lr}
 800623c:	490b      	ldr	r1, [pc, #44]	@ (800626c <siprintf+0x34>)
 800623e:	b09c      	sub	sp, #112	@ 0x70
 8006240:	ab1d      	add	r3, sp, #116	@ 0x74
 8006242:	9002      	str	r0, [sp, #8]
 8006244:	9006      	str	r0, [sp, #24]
 8006246:	9107      	str	r1, [sp, #28]
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	4809      	ldr	r0, [pc, #36]	@ (8006270 <siprintf+0x38>)
 800624c:	4909      	ldr	r1, [pc, #36]	@ (8006274 <siprintf+0x3c>)
 800624e:	cb04      	ldmia	r3!, {r2}
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	a902      	add	r1, sp, #8
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	f000 f99e 	bl	8006598 <_svfiprintf_r>
 800625c:	2200      	movs	r2, #0
 800625e:	9b02      	ldr	r3, [sp, #8]
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	b01c      	add	sp, #112	@ 0x70
 8006264:	bc08      	pop	{r3}
 8006266:	b003      	add	sp, #12
 8006268:	4718      	bx	r3
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	7fffffff 	.word	0x7fffffff
 8006270:	2000000c 	.word	0x2000000c
 8006274:	ffff0208 	.word	0xffff0208

08006278 <memset>:
 8006278:	0003      	movs	r3, r0
 800627a:	1882      	adds	r2, r0, r2
 800627c:	4293      	cmp	r3, r2
 800627e:	d100      	bne.n	8006282 <memset+0xa>
 8006280:	4770      	bx	lr
 8006282:	7019      	strb	r1, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	e7f9      	b.n	800627c <memset+0x4>

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	@ (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	2000000c 	.word	0x2000000c

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	2600      	movs	r6, #0
 8006298:	4c0c      	ldr	r4, [pc, #48]	@ (80062cc <__libc_init_array+0x38>)
 800629a:	4d0d      	ldr	r5, [pc, #52]	@ (80062d0 <__libc_init_array+0x3c>)
 800629c:	1b64      	subs	r4, r4, r5
 800629e:	10a4      	asrs	r4, r4, #2
 80062a0:	42a6      	cmp	r6, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	2600      	movs	r6, #0
 80062a6:	f000 fc65 	bl	8006b74 <_init>
 80062aa:	4c0a      	ldr	r4, [pc, #40]	@ (80062d4 <__libc_init_array+0x40>)
 80062ac:	4d0a      	ldr	r5, [pc, #40]	@ (80062d8 <__libc_init_array+0x44>)
 80062ae:	1b64      	subs	r4, r4, r5
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	42a6      	cmp	r6, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	00b3      	lsls	r3, r6, #2
 80062ba:	58eb      	ldr	r3, [r5, r3]
 80062bc:	4798      	blx	r3
 80062be:	3601      	adds	r6, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	00b3      	lsls	r3, r6, #2
 80062c4:	58eb      	ldr	r3, [r5, r3]
 80062c6:	4798      	blx	r3
 80062c8:	3601      	adds	r6, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	08006d1c 	.word	0x08006d1c
 80062d0:	08006d1c 	.word	0x08006d1c
 80062d4:	08006d20 	.word	0x08006d20
 80062d8:	08006d1c 	.word	0x08006d1c

080062dc <__retarget_lock_acquire_recursive>:
 80062dc:	4770      	bx	lr

080062de <__retarget_lock_release_recursive>:
 80062de:	4770      	bx	lr

080062e0 <_free_r>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	0005      	movs	r5, r0
 80062e4:	1e0c      	subs	r4, r1, #0
 80062e6:	d010      	beq.n	800630a <_free_r+0x2a>
 80062e8:	3c04      	subs	r4, #4
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da00      	bge.n	80062f2 <_free_r+0x12>
 80062f0:	18e4      	adds	r4, r4, r3
 80062f2:	0028      	movs	r0, r5
 80062f4:	f000 f8e0 	bl	80064b8 <__malloc_lock>
 80062f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <_free_r+0x90>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <_free_r+0x2c>
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6014      	str	r4, [r2, #0]
 8006304:	0028      	movs	r0, r5
 8006306:	f000 f8df 	bl	80064c8 <__malloc_unlock>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	42a3      	cmp	r3, r4
 800630e:	d908      	bls.n	8006322 <_free_r+0x42>
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	1821      	adds	r1, r4, r0
 8006314:	428b      	cmp	r3, r1
 8006316:	d1f3      	bne.n	8006300 <_free_r+0x20>
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	1809      	adds	r1, r1, r0
 800631e:	6021      	str	r1, [r4, #0]
 8006320:	e7ee      	b.n	8006300 <_free_r+0x20>
 8006322:	001a      	movs	r2, r3
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <_free_r+0x4e>
 800632a:	42a3      	cmp	r3, r4
 800632c:	d9f9      	bls.n	8006322 <_free_r+0x42>
 800632e:	6811      	ldr	r1, [r2, #0]
 8006330:	1850      	adds	r0, r2, r1
 8006332:	42a0      	cmp	r0, r4
 8006334:	d10b      	bne.n	800634e <_free_r+0x6e>
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	1809      	adds	r1, r1, r0
 800633a:	1850      	adds	r0, r2, r1
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	4283      	cmp	r3, r0
 8006340:	d1e0      	bne.n	8006304 <_free_r+0x24>
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	1841      	adds	r1, r0, r1
 8006348:	6011      	str	r1, [r2, #0]
 800634a:	6053      	str	r3, [r2, #4]
 800634c:	e7da      	b.n	8006304 <_free_r+0x24>
 800634e:	42a0      	cmp	r0, r4
 8006350:	d902      	bls.n	8006358 <_free_r+0x78>
 8006352:	230c      	movs	r3, #12
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	e7d5      	b.n	8006304 <_free_r+0x24>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	1821      	adds	r1, r4, r0
 800635c:	428b      	cmp	r3, r1
 800635e:	d103      	bne.n	8006368 <_free_r+0x88>
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	1809      	adds	r1, r1, r0
 8006366:	6021      	str	r1, [r4, #0]
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	6054      	str	r4, [r2, #4]
 800636c:	e7ca      	b.n	8006304 <_free_r+0x24>
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	20000398 	.word	0x20000398

08006374 <sbrk_aligned>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4e0f      	ldr	r6, [pc, #60]	@ (80063b4 <sbrk_aligned+0x40>)
 8006378:	000d      	movs	r5, r1
 800637a:	6831      	ldr	r1, [r6, #0]
 800637c:	0004      	movs	r4, r0
 800637e:	2900      	cmp	r1, #0
 8006380:	d102      	bne.n	8006388 <sbrk_aligned+0x14>
 8006382:	f000 fb99 	bl	8006ab8 <_sbrk_r>
 8006386:	6030      	str	r0, [r6, #0]
 8006388:	0029      	movs	r1, r5
 800638a:	0020      	movs	r0, r4
 800638c:	f000 fb94 	bl	8006ab8 <_sbrk_r>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d103      	bne.n	800639c <sbrk_aligned+0x28>
 8006394:	2501      	movs	r5, #1
 8006396:	426d      	negs	r5, r5
 8006398:	0028      	movs	r0, r5
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	2303      	movs	r3, #3
 800639e:	1cc5      	adds	r5, r0, #3
 80063a0:	439d      	bics	r5, r3
 80063a2:	42a8      	cmp	r0, r5
 80063a4:	d0f8      	beq.n	8006398 <sbrk_aligned+0x24>
 80063a6:	1a29      	subs	r1, r5, r0
 80063a8:	0020      	movs	r0, r4
 80063aa:	f000 fb85 	bl	8006ab8 <_sbrk_r>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d1f2      	bne.n	8006398 <sbrk_aligned+0x24>
 80063b2:	e7ef      	b.n	8006394 <sbrk_aligned+0x20>
 80063b4:	20000394 	.word	0x20000394

080063b8 <_malloc_r>:
 80063b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ba:	2203      	movs	r2, #3
 80063bc:	1ccb      	adds	r3, r1, #3
 80063be:	4393      	bics	r3, r2
 80063c0:	3308      	adds	r3, #8
 80063c2:	0005      	movs	r5, r0
 80063c4:	001f      	movs	r7, r3
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d234      	bcs.n	8006434 <_malloc_r+0x7c>
 80063ca:	270c      	movs	r7, #12
 80063cc:	42b9      	cmp	r1, r7
 80063ce:	d833      	bhi.n	8006438 <_malloc_r+0x80>
 80063d0:	0028      	movs	r0, r5
 80063d2:	f000 f871 	bl	80064b8 <__malloc_lock>
 80063d6:	4e37      	ldr	r6, [pc, #220]	@ (80064b4 <_malloc_r+0xfc>)
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	001c      	movs	r4, r3
 80063dc:	2c00      	cmp	r4, #0
 80063de:	d12f      	bne.n	8006440 <_malloc_r+0x88>
 80063e0:	0039      	movs	r1, r7
 80063e2:	0028      	movs	r0, r5
 80063e4:	f7ff ffc6 	bl	8006374 <sbrk_aligned>
 80063e8:	0004      	movs	r4, r0
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d15f      	bne.n	80064ae <_malloc_r+0xf6>
 80063ee:	6834      	ldr	r4, [r6, #0]
 80063f0:	9400      	str	r4, [sp, #0]
 80063f2:	9b00      	ldr	r3, [sp, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d14a      	bne.n	800648e <_malloc_r+0xd6>
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	d052      	beq.n	80064a2 <_malloc_r+0xea>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	0028      	movs	r0, r5
 8006400:	18e3      	adds	r3, r4, r3
 8006402:	9900      	ldr	r1, [sp, #0]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f000 fb57 	bl	8006ab8 <_sbrk_r>
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	4283      	cmp	r3, r0
 800640e:	d148      	bne.n	80064a2 <_malloc_r+0xea>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	0028      	movs	r0, r5
 8006414:	1aff      	subs	r7, r7, r3
 8006416:	0039      	movs	r1, r7
 8006418:	f7ff ffac 	bl	8006374 <sbrk_aligned>
 800641c:	3001      	adds	r0, #1
 800641e:	d040      	beq.n	80064a2 <_malloc_r+0xea>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	19db      	adds	r3, r3, r7
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	6833      	ldr	r3, [r6, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	2a00      	cmp	r2, #0
 800642c:	d133      	bne.n	8006496 <_malloc_r+0xde>
 800642e:	9b00      	ldr	r3, [sp, #0]
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	e019      	b.n	8006468 <_malloc_r+0xb0>
 8006434:	2b00      	cmp	r3, #0
 8006436:	dac9      	bge.n	80063cc <_malloc_r+0x14>
 8006438:	230c      	movs	r3, #12
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	2000      	movs	r0, #0
 800643e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	1bc9      	subs	r1, r1, r7
 8006444:	d420      	bmi.n	8006488 <_malloc_r+0xd0>
 8006446:	290b      	cmp	r1, #11
 8006448:	d90a      	bls.n	8006460 <_malloc_r+0xa8>
 800644a:	19e2      	adds	r2, r4, r7
 800644c:	6027      	str	r7, [r4, #0]
 800644e:	42a3      	cmp	r3, r4
 8006450:	d104      	bne.n	800645c <_malloc_r+0xa4>
 8006452:	6032      	str	r2, [r6, #0]
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	6011      	str	r1, [r2, #0]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	e005      	b.n	8006468 <_malloc_r+0xb0>
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	e7f9      	b.n	8006454 <_malloc_r+0x9c>
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	42a3      	cmp	r3, r4
 8006464:	d10e      	bne.n	8006484 <_malloc_r+0xcc>
 8006466:	6032      	str	r2, [r6, #0]
 8006468:	0028      	movs	r0, r5
 800646a:	f000 f82d 	bl	80064c8 <__malloc_unlock>
 800646e:	0020      	movs	r0, r4
 8006470:	2207      	movs	r2, #7
 8006472:	300b      	adds	r0, #11
 8006474:	1d23      	adds	r3, r4, #4
 8006476:	4390      	bics	r0, r2
 8006478:	1ac2      	subs	r2, r0, r3
 800647a:	4298      	cmp	r0, r3
 800647c:	d0df      	beq.n	800643e <_malloc_r+0x86>
 800647e:	1a1b      	subs	r3, r3, r0
 8006480:	50a3      	str	r3, [r4, r2]
 8006482:	e7dc      	b.n	800643e <_malloc_r+0x86>
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e7ef      	b.n	8006468 <_malloc_r+0xb0>
 8006488:	0023      	movs	r3, r4
 800648a:	6864      	ldr	r4, [r4, #4]
 800648c:	e7a6      	b.n	80063dc <_malloc_r+0x24>
 800648e:	9c00      	ldr	r4, [sp, #0]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	e7ad      	b.n	80063f2 <_malloc_r+0x3a>
 8006496:	001a      	movs	r2, r3
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	42a3      	cmp	r3, r4
 800649c:	d1fb      	bne.n	8006496 <_malloc_r+0xde>
 800649e:	2300      	movs	r3, #0
 80064a0:	e7da      	b.n	8006458 <_malloc_r+0xa0>
 80064a2:	230c      	movs	r3, #12
 80064a4:	0028      	movs	r0, r5
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f000 f80e 	bl	80064c8 <__malloc_unlock>
 80064ac:	e7c6      	b.n	800643c <_malloc_r+0x84>
 80064ae:	6007      	str	r7, [r0, #0]
 80064b0:	e7da      	b.n	8006468 <_malloc_r+0xb0>
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	20000398 	.word	0x20000398

080064b8 <__malloc_lock>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4802      	ldr	r0, [pc, #8]	@ (80064c4 <__malloc_lock+0xc>)
 80064bc:	f7ff ff0e 	bl	80062dc <__retarget_lock_acquire_recursive>
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	46c0      	nop			@ (mov r8, r8)
 80064c4:	20000390 	.word	0x20000390

080064c8 <__malloc_unlock>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	4802      	ldr	r0, [pc, #8]	@ (80064d4 <__malloc_unlock+0xc>)
 80064cc:	f7ff ff07 	bl	80062de <__retarget_lock_release_recursive>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	20000390 	.word	0x20000390

080064d8 <__ssputs_r>:
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	688e      	ldr	r6, [r1, #8]
 80064dc:	b085      	sub	sp, #20
 80064de:	001f      	movs	r7, r3
 80064e0:	000c      	movs	r4, r1
 80064e2:	680b      	ldr	r3, [r1, #0]
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9203      	str	r2, [sp, #12]
 80064e8:	42be      	cmp	r6, r7
 80064ea:	d830      	bhi.n	800654e <__ssputs_r+0x76>
 80064ec:	210c      	movs	r1, #12
 80064ee:	5e62      	ldrsh	r2, [r4, r1]
 80064f0:	2190      	movs	r1, #144	@ 0x90
 80064f2:	00c9      	lsls	r1, r1, #3
 80064f4:	420a      	tst	r2, r1
 80064f6:	d028      	beq.n	800654a <__ssputs_r+0x72>
 80064f8:	2003      	movs	r0, #3
 80064fa:	6921      	ldr	r1, [r4, #16]
 80064fc:	1a5b      	subs	r3, r3, r1
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	6963      	ldr	r3, [r4, #20]
 8006502:	4343      	muls	r3, r0
 8006504:	9801      	ldr	r0, [sp, #4]
 8006506:	0fdd      	lsrs	r5, r3, #31
 8006508:	18ed      	adds	r5, r5, r3
 800650a:	1c7b      	adds	r3, r7, #1
 800650c:	181b      	adds	r3, r3, r0
 800650e:	106d      	asrs	r5, r5, #1
 8006510:	42ab      	cmp	r3, r5
 8006512:	d900      	bls.n	8006516 <__ssputs_r+0x3e>
 8006514:	001d      	movs	r5, r3
 8006516:	0552      	lsls	r2, r2, #21
 8006518:	d528      	bpl.n	800656c <__ssputs_r+0x94>
 800651a:	0029      	movs	r1, r5
 800651c:	9802      	ldr	r0, [sp, #8]
 800651e:	f7ff ff4b 	bl	80063b8 <_malloc_r>
 8006522:	1e06      	subs	r6, r0, #0
 8006524:	d02c      	beq.n	8006580 <__ssputs_r+0xa8>
 8006526:	9a01      	ldr	r2, [sp, #4]
 8006528:	6921      	ldr	r1, [r4, #16]
 800652a:	f000 fae2 	bl	8006af2 <memcpy>
 800652e:	89a2      	ldrh	r2, [r4, #12]
 8006530:	4b18      	ldr	r3, [pc, #96]	@ (8006594 <__ssputs_r+0xbc>)
 8006532:	401a      	ands	r2, r3
 8006534:	2380      	movs	r3, #128	@ 0x80
 8006536:	4313      	orrs	r3, r2
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	6126      	str	r6, [r4, #16]
 800653e:	18f6      	adds	r6, r6, r3
 8006540:	6026      	str	r6, [r4, #0]
 8006542:	003e      	movs	r6, r7
 8006544:	6165      	str	r5, [r4, #20]
 8006546:	1aed      	subs	r5, r5, r3
 8006548:	60a5      	str	r5, [r4, #8]
 800654a:	42be      	cmp	r6, r7
 800654c:	d900      	bls.n	8006550 <__ssputs_r+0x78>
 800654e:	003e      	movs	r6, r7
 8006550:	0032      	movs	r2, r6
 8006552:	9903      	ldr	r1, [sp, #12]
 8006554:	6820      	ldr	r0, [r4, #0]
 8006556:	f000 fa9b 	bl	8006a90 <memmove>
 800655a:	2000      	movs	r0, #0
 800655c:	68a3      	ldr	r3, [r4, #8]
 800655e:	1b9b      	subs	r3, r3, r6
 8006560:	60a3      	str	r3, [r4, #8]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	199b      	adds	r3, r3, r6
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	b005      	add	sp, #20
 800656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656c:	002a      	movs	r2, r5
 800656e:	9802      	ldr	r0, [sp, #8]
 8006570:	f000 fac8 	bl	8006b04 <_realloc_r>
 8006574:	1e06      	subs	r6, r0, #0
 8006576:	d1e0      	bne.n	800653a <__ssputs_r+0x62>
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	9802      	ldr	r0, [sp, #8]
 800657c:	f7ff feb0 	bl	80062e0 <_free_r>
 8006580:	230c      	movs	r3, #12
 8006582:	2001      	movs	r0, #1
 8006584:	9a02      	ldr	r2, [sp, #8]
 8006586:	4240      	negs	r0, r0
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	89a2      	ldrh	r2, [r4, #12]
 800658c:	3334      	adds	r3, #52	@ 0x34
 800658e:	4313      	orrs	r3, r2
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	e7e9      	b.n	8006568 <__ssputs_r+0x90>
 8006594:	fffffb7f 	.word	0xfffffb7f

08006598 <_svfiprintf_r>:
 8006598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659a:	b0a1      	sub	sp, #132	@ 0x84
 800659c:	9003      	str	r0, [sp, #12]
 800659e:	001d      	movs	r5, r3
 80065a0:	898b      	ldrh	r3, [r1, #12]
 80065a2:	000f      	movs	r7, r1
 80065a4:	0016      	movs	r6, r2
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	d511      	bpl.n	80065ce <_svfiprintf_r+0x36>
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10e      	bne.n	80065ce <_svfiprintf_r+0x36>
 80065b0:	2140      	movs	r1, #64	@ 0x40
 80065b2:	f7ff ff01 	bl	80063b8 <_malloc_r>
 80065b6:	6038      	str	r0, [r7, #0]
 80065b8:	6138      	str	r0, [r7, #16]
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d105      	bne.n	80065ca <_svfiprintf_r+0x32>
 80065be:	230c      	movs	r3, #12
 80065c0:	9a03      	ldr	r2, [sp, #12]
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	2001      	movs	r0, #1
 80065c6:	4240      	negs	r0, r0
 80065c8:	e0cf      	b.n	800676a <_svfiprintf_r+0x1d2>
 80065ca:	2340      	movs	r3, #64	@ 0x40
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	2300      	movs	r3, #0
 80065d0:	ac08      	add	r4, sp, #32
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	3320      	adds	r3, #32
 80065d6:	7663      	strb	r3, [r4, #25]
 80065d8:	3310      	adds	r3, #16
 80065da:	76a3      	strb	r3, [r4, #26]
 80065dc:	9507      	str	r5, [sp, #28]
 80065de:	0035      	movs	r5, r6
 80065e0:	782b      	ldrb	r3, [r5, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <_svfiprintf_r+0x52>
 80065e6:	2b25      	cmp	r3, #37	@ 0x25
 80065e8:	d148      	bne.n	800667c <_svfiprintf_r+0xe4>
 80065ea:	1bab      	subs	r3, r5, r6
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	42b5      	cmp	r5, r6
 80065f0:	d00b      	beq.n	800660a <_svfiprintf_r+0x72>
 80065f2:	0032      	movs	r2, r6
 80065f4:	0039      	movs	r1, r7
 80065f6:	9803      	ldr	r0, [sp, #12]
 80065f8:	f7ff ff6e 	bl	80064d8 <__ssputs_r>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d100      	bne.n	8006602 <_svfiprintf_r+0x6a>
 8006600:	e0ae      	b.n	8006760 <_svfiprintf_r+0x1c8>
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	9a05      	ldr	r2, [sp, #20]
 8006606:	189b      	adds	r3, r3, r2
 8006608:	6163      	str	r3, [r4, #20]
 800660a:	782b      	ldrb	r3, [r5, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d100      	bne.n	8006612 <_svfiprintf_r+0x7a>
 8006610:	e0a6      	b.n	8006760 <_svfiprintf_r+0x1c8>
 8006612:	2201      	movs	r2, #1
 8006614:	2300      	movs	r3, #0
 8006616:	4252      	negs	r2, r2
 8006618:	6062      	str	r2, [r4, #4]
 800661a:	a904      	add	r1, sp, #16
 800661c:	3254      	adds	r2, #84	@ 0x54
 800661e:	1852      	adds	r2, r2, r1
 8006620:	1c6e      	adds	r6, r5, #1
 8006622:	6023      	str	r3, [r4, #0]
 8006624:	60e3      	str	r3, [r4, #12]
 8006626:	60a3      	str	r3, [r4, #8]
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800662c:	4b54      	ldr	r3, [pc, #336]	@ (8006780 <_svfiprintf_r+0x1e8>)
 800662e:	2205      	movs	r2, #5
 8006630:	0018      	movs	r0, r3
 8006632:	7831      	ldrb	r1, [r6, #0]
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	f000 fa51 	bl	8006adc <memchr>
 800663a:	1c75      	adds	r5, r6, #1
 800663c:	2800      	cmp	r0, #0
 800663e:	d11f      	bne.n	8006680 <_svfiprintf_r+0xe8>
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	06d3      	lsls	r3, r2, #27
 8006644:	d504      	bpl.n	8006650 <_svfiprintf_r+0xb8>
 8006646:	2353      	movs	r3, #83	@ 0x53
 8006648:	a904      	add	r1, sp, #16
 800664a:	185b      	adds	r3, r3, r1
 800664c:	2120      	movs	r1, #32
 800664e:	7019      	strb	r1, [r3, #0]
 8006650:	0713      	lsls	r3, r2, #28
 8006652:	d504      	bpl.n	800665e <_svfiprintf_r+0xc6>
 8006654:	2353      	movs	r3, #83	@ 0x53
 8006656:	a904      	add	r1, sp, #16
 8006658:	185b      	adds	r3, r3, r1
 800665a:	212b      	movs	r1, #43	@ 0x2b
 800665c:	7019      	strb	r1, [r3, #0]
 800665e:	7833      	ldrb	r3, [r6, #0]
 8006660:	2b2a      	cmp	r3, #42	@ 0x2a
 8006662:	d016      	beq.n	8006692 <_svfiprintf_r+0xfa>
 8006664:	0035      	movs	r5, r6
 8006666:	2100      	movs	r1, #0
 8006668:	200a      	movs	r0, #10
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	782a      	ldrb	r2, [r5, #0]
 800666e:	1c6e      	adds	r6, r5, #1
 8006670:	3a30      	subs	r2, #48	@ 0x30
 8006672:	2a09      	cmp	r2, #9
 8006674:	d950      	bls.n	8006718 <_svfiprintf_r+0x180>
 8006676:	2900      	cmp	r1, #0
 8006678:	d111      	bne.n	800669e <_svfiprintf_r+0x106>
 800667a:	e017      	b.n	80066ac <_svfiprintf_r+0x114>
 800667c:	3501      	adds	r5, #1
 800667e:	e7af      	b.n	80065e0 <_svfiprintf_r+0x48>
 8006680:	9b05      	ldr	r3, [sp, #20]
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	1ac0      	subs	r0, r0, r3
 8006686:	2301      	movs	r3, #1
 8006688:	4083      	lsls	r3, r0
 800668a:	4313      	orrs	r3, r2
 800668c:	002e      	movs	r6, r5
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	e7cc      	b.n	800662c <_svfiprintf_r+0x94>
 8006692:	9b07      	ldr	r3, [sp, #28]
 8006694:	1d19      	adds	r1, r3, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	9107      	str	r1, [sp, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	db01      	blt.n	80066a2 <_svfiprintf_r+0x10a>
 800669e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066a0:	e004      	b.n	80066ac <_svfiprintf_r+0x114>
 80066a2:	425b      	negs	r3, r3
 80066a4:	60e3      	str	r3, [r4, #12]
 80066a6:	2302      	movs	r3, #2
 80066a8:	4313      	orrs	r3, r2
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	782b      	ldrb	r3, [r5, #0]
 80066ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80066b0:	d10c      	bne.n	80066cc <_svfiprintf_r+0x134>
 80066b2:	786b      	ldrb	r3, [r5, #1]
 80066b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b6:	d134      	bne.n	8006722 <_svfiprintf_r+0x18a>
 80066b8:	9b07      	ldr	r3, [sp, #28]
 80066ba:	3502      	adds	r5, #2
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	9207      	str	r2, [sp, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	da01      	bge.n	80066ca <_svfiprintf_r+0x132>
 80066c6:	2301      	movs	r3, #1
 80066c8:	425b      	negs	r3, r3
 80066ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80066cc:	4e2d      	ldr	r6, [pc, #180]	@ (8006784 <_svfiprintf_r+0x1ec>)
 80066ce:	2203      	movs	r2, #3
 80066d0:	0030      	movs	r0, r6
 80066d2:	7829      	ldrb	r1, [r5, #0]
 80066d4:	f000 fa02 	bl	8006adc <memchr>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d006      	beq.n	80066ea <_svfiprintf_r+0x152>
 80066dc:	2340      	movs	r3, #64	@ 0x40
 80066de:	1b80      	subs	r0, r0, r6
 80066e0:	4083      	lsls	r3, r0
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	3501      	adds	r5, #1
 80066e6:	4313      	orrs	r3, r2
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	7829      	ldrb	r1, [r5, #0]
 80066ec:	2206      	movs	r2, #6
 80066ee:	4826      	ldr	r0, [pc, #152]	@ (8006788 <_svfiprintf_r+0x1f0>)
 80066f0:	1c6e      	adds	r6, r5, #1
 80066f2:	7621      	strb	r1, [r4, #24]
 80066f4:	f000 f9f2 	bl	8006adc <memchr>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d038      	beq.n	800676e <_svfiprintf_r+0x1d6>
 80066fc:	4b23      	ldr	r3, [pc, #140]	@ (800678c <_svfiprintf_r+0x1f4>)
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d122      	bne.n	8006748 <_svfiprintf_r+0x1b0>
 8006702:	2207      	movs	r2, #7
 8006704:	9b07      	ldr	r3, [sp, #28]
 8006706:	3307      	adds	r3, #7
 8006708:	4393      	bics	r3, r2
 800670a:	3308      	adds	r3, #8
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	9a04      	ldr	r2, [sp, #16]
 8006712:	189b      	adds	r3, r3, r2
 8006714:	6163      	str	r3, [r4, #20]
 8006716:	e762      	b.n	80065de <_svfiprintf_r+0x46>
 8006718:	4343      	muls	r3, r0
 800671a:	0035      	movs	r5, r6
 800671c:	2101      	movs	r1, #1
 800671e:	189b      	adds	r3, r3, r2
 8006720:	e7a4      	b.n	800666c <_svfiprintf_r+0xd4>
 8006722:	2300      	movs	r3, #0
 8006724:	200a      	movs	r0, #10
 8006726:	0019      	movs	r1, r3
 8006728:	3501      	adds	r5, #1
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	782a      	ldrb	r2, [r5, #0]
 800672e:	1c6e      	adds	r6, r5, #1
 8006730:	3a30      	subs	r2, #48	@ 0x30
 8006732:	2a09      	cmp	r2, #9
 8006734:	d903      	bls.n	800673e <_svfiprintf_r+0x1a6>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0c8      	beq.n	80066cc <_svfiprintf_r+0x134>
 800673a:	9109      	str	r1, [sp, #36]	@ 0x24
 800673c:	e7c6      	b.n	80066cc <_svfiprintf_r+0x134>
 800673e:	4341      	muls	r1, r0
 8006740:	0035      	movs	r5, r6
 8006742:	2301      	movs	r3, #1
 8006744:	1889      	adds	r1, r1, r2
 8006746:	e7f1      	b.n	800672c <_svfiprintf_r+0x194>
 8006748:	aa07      	add	r2, sp, #28
 800674a:	9200      	str	r2, [sp, #0]
 800674c:	0021      	movs	r1, r4
 800674e:	003a      	movs	r2, r7
 8006750:	4b0f      	ldr	r3, [pc, #60]	@ (8006790 <_svfiprintf_r+0x1f8>)
 8006752:	9803      	ldr	r0, [sp, #12]
 8006754:	e000      	b.n	8006758 <_svfiprintf_r+0x1c0>
 8006756:	bf00      	nop
 8006758:	9004      	str	r0, [sp, #16]
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	3301      	adds	r3, #1
 800675e:	d1d6      	bne.n	800670e <_svfiprintf_r+0x176>
 8006760:	89bb      	ldrh	r3, [r7, #12]
 8006762:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006764:	065b      	lsls	r3, r3, #25
 8006766:	d500      	bpl.n	800676a <_svfiprintf_r+0x1d2>
 8006768:	e72c      	b.n	80065c4 <_svfiprintf_r+0x2c>
 800676a:	b021      	add	sp, #132	@ 0x84
 800676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676e:	aa07      	add	r2, sp, #28
 8006770:	9200      	str	r2, [sp, #0]
 8006772:	0021      	movs	r1, r4
 8006774:	003a      	movs	r2, r7
 8006776:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <_svfiprintf_r+0x1f8>)
 8006778:	9803      	ldr	r0, [sp, #12]
 800677a:	f000 f87b 	bl	8006874 <_printf_i>
 800677e:	e7eb      	b.n	8006758 <_svfiprintf_r+0x1c0>
 8006780:	08006ce8 	.word	0x08006ce8
 8006784:	08006cee 	.word	0x08006cee
 8006788:	08006cf2 	.word	0x08006cf2
 800678c:	00000000 	.word	0x00000000
 8006790:	080064d9 	.word	0x080064d9

08006794 <_printf_common>:
 8006794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006796:	0016      	movs	r6, r2
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	688a      	ldr	r2, [r1, #8]
 800679c:	690b      	ldr	r3, [r1, #16]
 800679e:	000c      	movs	r4, r1
 80067a0:	9000      	str	r0, [sp, #0]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	da00      	bge.n	80067a8 <_printf_common+0x14>
 80067a6:	0013      	movs	r3, r2
 80067a8:	0022      	movs	r2, r4
 80067aa:	6033      	str	r3, [r6, #0]
 80067ac:	3243      	adds	r2, #67	@ 0x43
 80067ae:	7812      	ldrb	r2, [r2, #0]
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	d001      	beq.n	80067b8 <_printf_common+0x24>
 80067b4:	3301      	adds	r3, #1
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	069b      	lsls	r3, r3, #26
 80067bc:	d502      	bpl.n	80067c4 <_printf_common+0x30>
 80067be:	6833      	ldr	r3, [r6, #0]
 80067c0:	3302      	adds	r3, #2
 80067c2:	6033      	str	r3, [r6, #0]
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	2306      	movs	r3, #6
 80067c8:	0015      	movs	r5, r2
 80067ca:	401d      	ands	r5, r3
 80067cc:	421a      	tst	r2, r3
 80067ce:	d027      	beq.n	8006820 <_printf_common+0x8c>
 80067d0:	0023      	movs	r3, r4
 80067d2:	3343      	adds	r3, #67	@ 0x43
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	1e5a      	subs	r2, r3, #1
 80067d8:	4193      	sbcs	r3, r2
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	0692      	lsls	r2, r2, #26
 80067de:	d430      	bmi.n	8006842 <_printf_common+0xae>
 80067e0:	0022      	movs	r2, r4
 80067e2:	9901      	ldr	r1, [sp, #4]
 80067e4:	9800      	ldr	r0, [sp, #0]
 80067e6:	9d08      	ldr	r5, [sp, #32]
 80067e8:	3243      	adds	r2, #67	@ 0x43
 80067ea:	47a8      	blx	r5
 80067ec:	3001      	adds	r0, #1
 80067ee:	d025      	beq.n	800683c <_printf_common+0xa8>
 80067f0:	2206      	movs	r2, #6
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	2500      	movs	r5, #0
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d105      	bne.n	8006808 <_printf_common+0x74>
 80067fc:	6833      	ldr	r3, [r6, #0]
 80067fe:	68e5      	ldr	r5, [r4, #12]
 8006800:	1aed      	subs	r5, r5, r3
 8006802:	43eb      	mvns	r3, r5
 8006804:	17db      	asrs	r3, r3, #31
 8006806:	401d      	ands	r5, r3
 8006808:	68a3      	ldr	r3, [r4, #8]
 800680a:	6922      	ldr	r2, [r4, #16]
 800680c:	4293      	cmp	r3, r2
 800680e:	dd01      	ble.n	8006814 <_printf_common+0x80>
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	18ed      	adds	r5, r5, r3
 8006814:	2600      	movs	r6, #0
 8006816:	42b5      	cmp	r5, r6
 8006818:	d120      	bne.n	800685c <_printf_common+0xc8>
 800681a:	2000      	movs	r0, #0
 800681c:	e010      	b.n	8006840 <_printf_common+0xac>
 800681e:	3501      	adds	r5, #1
 8006820:	68e3      	ldr	r3, [r4, #12]
 8006822:	6832      	ldr	r2, [r6, #0]
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	42ab      	cmp	r3, r5
 8006828:	ddd2      	ble.n	80067d0 <_printf_common+0x3c>
 800682a:	0022      	movs	r2, r4
 800682c:	2301      	movs	r3, #1
 800682e:	9901      	ldr	r1, [sp, #4]
 8006830:	9800      	ldr	r0, [sp, #0]
 8006832:	9f08      	ldr	r7, [sp, #32]
 8006834:	3219      	adds	r2, #25
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	d1f0      	bne.n	800681e <_printf_common+0x8a>
 800683c:	2001      	movs	r0, #1
 800683e:	4240      	negs	r0, r0
 8006840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006842:	2030      	movs	r0, #48	@ 0x30
 8006844:	18e1      	adds	r1, r4, r3
 8006846:	3143      	adds	r1, #67	@ 0x43
 8006848:	7008      	strb	r0, [r1, #0]
 800684a:	0021      	movs	r1, r4
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	3145      	adds	r1, #69	@ 0x45
 8006850:	7809      	ldrb	r1, [r1, #0]
 8006852:	18a2      	adds	r2, r4, r2
 8006854:	3243      	adds	r2, #67	@ 0x43
 8006856:	3302      	adds	r3, #2
 8006858:	7011      	strb	r1, [r2, #0]
 800685a:	e7c1      	b.n	80067e0 <_printf_common+0x4c>
 800685c:	0022      	movs	r2, r4
 800685e:	2301      	movs	r3, #1
 8006860:	9901      	ldr	r1, [sp, #4]
 8006862:	9800      	ldr	r0, [sp, #0]
 8006864:	9f08      	ldr	r7, [sp, #32]
 8006866:	321a      	adds	r2, #26
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	d0e6      	beq.n	800683c <_printf_common+0xa8>
 800686e:	3601      	adds	r6, #1
 8006870:	e7d1      	b.n	8006816 <_printf_common+0x82>
	...

08006874 <_printf_i>:
 8006874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006876:	b08b      	sub	sp, #44	@ 0x2c
 8006878:	9206      	str	r2, [sp, #24]
 800687a:	000a      	movs	r2, r1
 800687c:	3243      	adds	r2, #67	@ 0x43
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	9005      	str	r0, [sp, #20]
 8006882:	9203      	str	r2, [sp, #12]
 8006884:	7e0a      	ldrb	r2, [r1, #24]
 8006886:	000c      	movs	r4, r1
 8006888:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800688a:	2a78      	cmp	r2, #120	@ 0x78
 800688c:	d809      	bhi.n	80068a2 <_printf_i+0x2e>
 800688e:	2a62      	cmp	r2, #98	@ 0x62
 8006890:	d80b      	bhi.n	80068aa <_printf_i+0x36>
 8006892:	2a00      	cmp	r2, #0
 8006894:	d100      	bne.n	8006898 <_printf_i+0x24>
 8006896:	e0bc      	b.n	8006a12 <_printf_i+0x19e>
 8006898:	497b      	ldr	r1, [pc, #492]	@ (8006a88 <_printf_i+0x214>)
 800689a:	9104      	str	r1, [sp, #16]
 800689c:	2a58      	cmp	r2, #88	@ 0x58
 800689e:	d100      	bne.n	80068a2 <_printf_i+0x2e>
 80068a0:	e090      	b.n	80069c4 <_printf_i+0x150>
 80068a2:	0025      	movs	r5, r4
 80068a4:	3542      	adds	r5, #66	@ 0x42
 80068a6:	702a      	strb	r2, [r5, #0]
 80068a8:	e022      	b.n	80068f0 <_printf_i+0x7c>
 80068aa:	0010      	movs	r0, r2
 80068ac:	3863      	subs	r0, #99	@ 0x63
 80068ae:	2815      	cmp	r0, #21
 80068b0:	d8f7      	bhi.n	80068a2 <_printf_i+0x2e>
 80068b2:	f7f9 fc31 	bl	8000118 <__gnu_thumb1_case_shi>
 80068b6:	0016      	.short	0x0016
 80068b8:	fff6001f 	.word	0xfff6001f
 80068bc:	fff6fff6 	.word	0xfff6fff6
 80068c0:	001ffff6 	.word	0x001ffff6
 80068c4:	fff6fff6 	.word	0xfff6fff6
 80068c8:	fff6fff6 	.word	0xfff6fff6
 80068cc:	003600a1 	.word	0x003600a1
 80068d0:	fff60080 	.word	0xfff60080
 80068d4:	00b2fff6 	.word	0x00b2fff6
 80068d8:	0036fff6 	.word	0x0036fff6
 80068dc:	fff6fff6 	.word	0xfff6fff6
 80068e0:	0084      	.short	0x0084
 80068e2:	0025      	movs	r5, r4
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	3542      	adds	r5, #66	@ 0x42
 80068e8:	1d11      	adds	r1, r2, #4
 80068ea:	6019      	str	r1, [r3, #0]
 80068ec:	6813      	ldr	r3, [r2, #0]
 80068ee:	702b      	strb	r3, [r5, #0]
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0a0      	b.n	8006a36 <_printf_i+0x1c2>
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	6809      	ldr	r1, [r1, #0]
 80068f8:	1d02      	adds	r2, r0, #4
 80068fa:	060d      	lsls	r5, r1, #24
 80068fc:	d50b      	bpl.n	8006916 <_printf_i+0xa2>
 80068fe:	6806      	ldr	r6, [r0, #0]
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	2e00      	cmp	r6, #0
 8006904:	da03      	bge.n	800690e <_printf_i+0x9a>
 8006906:	232d      	movs	r3, #45	@ 0x2d
 8006908:	9a03      	ldr	r2, [sp, #12]
 800690a:	4276      	negs	r6, r6
 800690c:	7013      	strb	r3, [r2, #0]
 800690e:	4b5e      	ldr	r3, [pc, #376]	@ (8006a88 <_printf_i+0x214>)
 8006910:	270a      	movs	r7, #10
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	e018      	b.n	8006948 <_printf_i+0xd4>
 8006916:	6806      	ldr	r6, [r0, #0]
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	0649      	lsls	r1, r1, #25
 800691c:	d5f1      	bpl.n	8006902 <_printf_i+0x8e>
 800691e:	b236      	sxth	r6, r6
 8006920:	e7ef      	b.n	8006902 <_printf_i+0x8e>
 8006922:	6808      	ldr	r0, [r1, #0]
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	c940      	ldmia	r1!, {r6}
 8006928:	0605      	lsls	r5, r0, #24
 800692a:	d402      	bmi.n	8006932 <_printf_i+0xbe>
 800692c:	0640      	lsls	r0, r0, #25
 800692e:	d500      	bpl.n	8006932 <_printf_i+0xbe>
 8006930:	b2b6      	uxth	r6, r6
 8006932:	6019      	str	r1, [r3, #0]
 8006934:	4b54      	ldr	r3, [pc, #336]	@ (8006a88 <_printf_i+0x214>)
 8006936:	270a      	movs	r7, #10
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	2a6f      	cmp	r2, #111	@ 0x6f
 800693c:	d100      	bne.n	8006940 <_printf_i+0xcc>
 800693e:	3f02      	subs	r7, #2
 8006940:	0023      	movs	r3, r4
 8006942:	2200      	movs	r2, #0
 8006944:	3343      	adds	r3, #67	@ 0x43
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	db03      	blt.n	8006958 <_printf_i+0xe4>
 8006950:	2104      	movs	r1, #4
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	438a      	bics	r2, r1
 8006956:	6022      	str	r2, [r4, #0]
 8006958:	2e00      	cmp	r6, #0
 800695a:	d102      	bne.n	8006962 <_printf_i+0xee>
 800695c:	9d03      	ldr	r5, [sp, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <_printf_i+0x108>
 8006962:	9d03      	ldr	r5, [sp, #12]
 8006964:	0030      	movs	r0, r6
 8006966:	0039      	movs	r1, r7
 8006968:	f7f9 fc66 	bl	8000238 <__aeabi_uidivmod>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	3d01      	subs	r5, #1
 8006970:	5c5b      	ldrb	r3, [r3, r1]
 8006972:	702b      	strb	r3, [r5, #0]
 8006974:	0033      	movs	r3, r6
 8006976:	0006      	movs	r6, r0
 8006978:	429f      	cmp	r7, r3
 800697a:	d9f3      	bls.n	8006964 <_printf_i+0xf0>
 800697c:	2f08      	cmp	r7, #8
 800697e:	d109      	bne.n	8006994 <_printf_i+0x120>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07db      	lsls	r3, r3, #31
 8006984:	d506      	bpl.n	8006994 <_printf_i+0x120>
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	dc02      	bgt.n	8006994 <_printf_i+0x120>
 800698e:	2330      	movs	r3, #48	@ 0x30
 8006990:	3d01      	subs	r5, #1
 8006992:	702b      	strb	r3, [r5, #0]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	1b5b      	subs	r3, r3, r5
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	9b07      	ldr	r3, [sp, #28]
 800699c:	0021      	movs	r1, r4
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	9805      	ldr	r0, [sp, #20]
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	aa09      	add	r2, sp, #36	@ 0x24
 80069a6:	f7ff fef5 	bl	8006794 <_printf_common>
 80069aa:	3001      	adds	r0, #1
 80069ac:	d148      	bne.n	8006a40 <_printf_i+0x1cc>
 80069ae:	2001      	movs	r0, #1
 80069b0:	4240      	negs	r0, r0
 80069b2:	b00b      	add	sp, #44	@ 0x2c
 80069b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b6:	2220      	movs	r2, #32
 80069b8:	6809      	ldr	r1, [r1, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	6022      	str	r2, [r4, #0]
 80069be:	2278      	movs	r2, #120	@ 0x78
 80069c0:	4932      	ldr	r1, [pc, #200]	@ (8006a8c <_printf_i+0x218>)
 80069c2:	9104      	str	r1, [sp, #16]
 80069c4:	0021      	movs	r1, r4
 80069c6:	3145      	adds	r1, #69	@ 0x45
 80069c8:	700a      	strb	r2, [r1, #0]
 80069ca:	6819      	ldr	r1, [r3, #0]
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	c940      	ldmia	r1!, {r6}
 80069d0:	0610      	lsls	r0, r2, #24
 80069d2:	d402      	bmi.n	80069da <_printf_i+0x166>
 80069d4:	0650      	lsls	r0, r2, #25
 80069d6:	d500      	bpl.n	80069da <_printf_i+0x166>
 80069d8:	b2b6      	uxth	r6, r6
 80069da:	6019      	str	r1, [r3, #0]
 80069dc:	07d3      	lsls	r3, r2, #31
 80069de:	d502      	bpl.n	80069e6 <_printf_i+0x172>
 80069e0:	2320      	movs	r3, #32
 80069e2:	4313      	orrs	r3, r2
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d001      	beq.n	80069ee <_printf_i+0x17a>
 80069ea:	2710      	movs	r7, #16
 80069ec:	e7a8      	b.n	8006940 <_printf_i+0xcc>
 80069ee:	2220      	movs	r2, #32
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	4393      	bics	r3, r2
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	e7f8      	b.n	80069ea <_printf_i+0x176>
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	680d      	ldr	r5, [r1, #0]
 80069fc:	1d10      	adds	r0, r2, #4
 80069fe:	6949      	ldr	r1, [r1, #20]
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	062e      	lsls	r6, r5, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0x198>
 8006a08:	6019      	str	r1, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <_printf_i+0x19e>
 8006a0c:	066d      	lsls	r5, r5, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0x194>
 8006a10:	8019      	strh	r1, [r3, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9d03      	ldr	r5, [sp, #12]
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	e7bf      	b.n	800699a <_printf_i+0x126>
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	1d11      	adds	r1, r2, #4
 8006a1e:	6019      	str	r1, [r3, #0]
 8006a20:	6815      	ldr	r5, [r2, #0]
 8006a22:	2100      	movs	r1, #0
 8006a24:	0028      	movs	r0, r5
 8006a26:	6862      	ldr	r2, [r4, #4]
 8006a28:	f000 f858 	bl	8006adc <memchr>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d001      	beq.n	8006a34 <_printf_i+0x1c0>
 8006a30:	1b40      	subs	r0, r0, r5
 8006a32:	6060      	str	r0, [r4, #4]
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9a03      	ldr	r2, [sp, #12]
 8006a3c:	7013      	strb	r3, [r2, #0]
 8006a3e:	e7ac      	b.n	800699a <_printf_i+0x126>
 8006a40:	002a      	movs	r2, r5
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	9906      	ldr	r1, [sp, #24]
 8006a46:	9805      	ldr	r0, [sp, #20]
 8006a48:	9d07      	ldr	r5, [sp, #28]
 8006a4a:	47a8      	blx	r5
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d0ae      	beq.n	80069ae <_printf_i+0x13a>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	079b      	lsls	r3, r3, #30
 8006a54:	d415      	bmi.n	8006a82 <_printf_i+0x20e>
 8006a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a58:	68e0      	ldr	r0, [r4, #12]
 8006a5a:	4298      	cmp	r0, r3
 8006a5c:	daa9      	bge.n	80069b2 <_printf_i+0x13e>
 8006a5e:	0018      	movs	r0, r3
 8006a60:	e7a7      	b.n	80069b2 <_printf_i+0x13e>
 8006a62:	0022      	movs	r2, r4
 8006a64:	2301      	movs	r3, #1
 8006a66:	9906      	ldr	r1, [sp, #24]
 8006a68:	9805      	ldr	r0, [sp, #20]
 8006a6a:	9e07      	ldr	r6, [sp, #28]
 8006a6c:	3219      	adds	r2, #25
 8006a6e:	47b0      	blx	r6
 8006a70:	3001      	adds	r0, #1
 8006a72:	d09c      	beq.n	80069ae <_printf_i+0x13a>
 8006a74:	3501      	adds	r5, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	dcf0      	bgt.n	8006a62 <_printf_i+0x1ee>
 8006a80:	e7e9      	b.n	8006a56 <_printf_i+0x1e2>
 8006a82:	2500      	movs	r5, #0
 8006a84:	e7f7      	b.n	8006a76 <_printf_i+0x202>
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	08006cf9 	.word	0x08006cf9
 8006a8c:	08006d0a 	.word	0x08006d0a

08006a90 <memmove>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4288      	cmp	r0, r1
 8006a94:	d806      	bhi.n	8006aa4 <memmove+0x14>
 8006a96:	2300      	movs	r3, #0
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d008      	beq.n	8006aae <memmove+0x1e>
 8006a9c:	5ccc      	ldrb	r4, [r1, r3]
 8006a9e:	54c4      	strb	r4, [r0, r3]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	e7f9      	b.n	8006a98 <memmove+0x8>
 8006aa4:	188b      	adds	r3, r1, r2
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	d2f5      	bcs.n	8006a96 <memmove+0x6>
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	d200      	bcs.n	8006ab0 <memmove+0x20>
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	5c8b      	ldrb	r3, [r1, r2]
 8006ab2:	5483      	strb	r3, [r0, r2]
 8006ab4:	e7f9      	b.n	8006aaa <memmove+0x1a>
	...

08006ab8 <_sbrk_r>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	4d06      	ldr	r5, [pc, #24]	@ (8006ad8 <_sbrk_r+0x20>)
 8006abe:	0004      	movs	r4, r0
 8006ac0:	0008      	movs	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fb ff92 	bl	80029ec <_sbrk>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d103      	bne.n	8006ad4 <_sbrk_r+0x1c>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d000      	beq.n	8006ad4 <_sbrk_r+0x1c>
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	2000038c 	.word	0x2000038c

08006adc <memchr>:
 8006adc:	b2c9      	uxtb	r1, r1
 8006ade:	1882      	adds	r2, r0, r2
 8006ae0:	4290      	cmp	r0, r2
 8006ae2:	d101      	bne.n	8006ae8 <memchr+0xc>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	4770      	bx	lr
 8006ae8:	7803      	ldrb	r3, [r0, #0]
 8006aea:	428b      	cmp	r3, r1
 8006aec:	d0fb      	beq.n	8006ae6 <memchr+0xa>
 8006aee:	3001      	adds	r0, #1
 8006af0:	e7f6      	b.n	8006ae0 <memchr+0x4>

08006af2 <memcpy>:
 8006af2:	2300      	movs	r3, #0
 8006af4:	b510      	push	{r4, lr}
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d100      	bne.n	8006afc <memcpy+0xa>
 8006afa:	bd10      	pop	{r4, pc}
 8006afc:	5ccc      	ldrb	r4, [r1, r3]
 8006afe:	54c4      	strb	r4, [r0, r3]
 8006b00:	3301      	adds	r3, #1
 8006b02:	e7f8      	b.n	8006af6 <memcpy+0x4>

08006b04 <_realloc_r>:
 8006b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b06:	0006      	movs	r6, r0
 8006b08:	000c      	movs	r4, r1
 8006b0a:	0015      	movs	r5, r2
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d105      	bne.n	8006b1c <_realloc_r+0x18>
 8006b10:	0011      	movs	r1, r2
 8006b12:	f7ff fc51 	bl	80063b8 <_malloc_r>
 8006b16:	0004      	movs	r4, r0
 8006b18:	0020      	movs	r0, r4
 8006b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	d103      	bne.n	8006b28 <_realloc_r+0x24>
 8006b20:	f7ff fbde 	bl	80062e0 <_free_r>
 8006b24:	2400      	movs	r4, #0
 8006b26:	e7f7      	b.n	8006b18 <_realloc_r+0x14>
 8006b28:	f000 f81b 	bl	8006b62 <_malloc_usable_size_r>
 8006b2c:	0007      	movs	r7, r0
 8006b2e:	4285      	cmp	r5, r0
 8006b30:	d802      	bhi.n	8006b38 <_realloc_r+0x34>
 8006b32:	0843      	lsrs	r3, r0, #1
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	d3ef      	bcc.n	8006b18 <_realloc_r+0x14>
 8006b38:	0029      	movs	r1, r5
 8006b3a:	0030      	movs	r0, r6
 8006b3c:	f7ff fc3c 	bl	80063b8 <_malloc_r>
 8006b40:	9001      	str	r0, [sp, #4]
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0ee      	beq.n	8006b24 <_realloc_r+0x20>
 8006b46:	002a      	movs	r2, r5
 8006b48:	42bd      	cmp	r5, r7
 8006b4a:	d900      	bls.n	8006b4e <_realloc_r+0x4a>
 8006b4c:	003a      	movs	r2, r7
 8006b4e:	0021      	movs	r1, r4
 8006b50:	9801      	ldr	r0, [sp, #4]
 8006b52:	f7ff ffce 	bl	8006af2 <memcpy>
 8006b56:	0021      	movs	r1, r4
 8006b58:	0030      	movs	r0, r6
 8006b5a:	f7ff fbc1 	bl	80062e0 <_free_r>
 8006b5e:	9c01      	ldr	r4, [sp, #4]
 8006b60:	e7da      	b.n	8006b18 <_realloc_r+0x14>

08006b62 <_malloc_usable_size_r>:
 8006b62:	1f0b      	subs	r3, r1, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	1f18      	subs	r0, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da01      	bge.n	8006b70 <_malloc_usable_size_r+0xe>
 8006b6c:	580b      	ldr	r3, [r1, r0]
 8006b6e:	18c0      	adds	r0, r0, r3
 8006b70:	4770      	bx	lr
	...

08006b74 <_init>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr

08006b80 <_fini>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	46c0      	nop			@ (mov r8, r8)
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr
