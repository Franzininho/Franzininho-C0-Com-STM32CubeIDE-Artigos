
BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003eb8  08003eb8  00004eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa4  08003fa4  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa4  08003fa4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08004008  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004008  000052cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d73c  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002013  00000000  00000000  000127c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000147d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084f  00000000  00000000  00015280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138bb  00000000  00000000  00015acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f397  00000000  00000000  0002938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000772e1  00000000  00000000  00038721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afa02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  000afa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b24b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ea0 	.word	0x08003ea0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003ea0 	.word	0x08003ea0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <BMP180_Init+0x18>)
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	20000078 	.word	0x20000078

08000434 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	0002      	movs	r2, r0
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	701a      	strb	r2, [r3, #0]
	_bmp180_oss = oss;
 8000440:	4b03      	ldr	r3, [pc, #12]	@ (8000450 <BMP180_SetOversampling+0x1c>)
 8000442:	1dfa      	adds	r2, r7, #7
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000092 	.word	0x20000092

08000454 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000458:	23aa      	movs	r3, #170	@ 0xaa
 800045a:	0018      	movs	r0, r3
 800045c:	f000 f8e2 	bl	8000624 <BMP180_ReadReg>
 8000460:	0003      	movs	r3, r0
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	b21c      	sxth	r4, r3
 8000466:	23ab      	movs	r3, #171	@ 0xab
 8000468:	0018      	movs	r0, r3
 800046a:	f000 f8db 	bl	8000624 <BMP180_ReadReg>
 800046e:	0003      	movs	r3, r0
 8000470:	b21b      	sxth	r3, r3
 8000472:	4323      	orrs	r3, r4
 8000474:	b21a      	sxth	r2, r3
 8000476:	4b59      	ldr	r3, [pc, #356]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 8000478:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 800047a:	23ac      	movs	r3, #172	@ 0xac
 800047c:	0018      	movs	r0, r3
 800047e:	f000 f8d1 	bl	8000624 <BMP180_ReadReg>
 8000482:	0003      	movs	r3, r0
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	b21c      	sxth	r4, r3
 8000488:	23ad      	movs	r3, #173	@ 0xad
 800048a:	0018      	movs	r0, r3
 800048c:	f000 f8ca 	bl	8000624 <BMP180_ReadReg>
 8000490:	0003      	movs	r3, r0
 8000492:	b21b      	sxth	r3, r3
 8000494:	4323      	orrs	r3, r4
 8000496:	b21a      	sxth	r2, r3
 8000498:	4b50      	ldr	r3, [pc, #320]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 800049a:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 800049c:	23ae      	movs	r3, #174	@ 0xae
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 f8c0 	bl	8000624 <BMP180_ReadReg>
 80004a4:	0003      	movs	r3, r0
 80004a6:	021b      	lsls	r3, r3, #8
 80004a8:	b21c      	sxth	r4, r3
 80004aa:	23af      	movs	r3, #175	@ 0xaf
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 f8b9 	bl	8000624 <BMP180_ReadReg>
 80004b2:	0003      	movs	r3, r0
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	4323      	orrs	r3, r4
 80004b8:	b21a      	sxth	r2, r3
 80004ba:	4b48      	ldr	r3, [pc, #288]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 80004bc:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 80004be:	23b0      	movs	r3, #176	@ 0xb0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f8af 	bl	8000624 <BMP180_ReadReg>
 80004c6:	0003      	movs	r3, r0
 80004c8:	021b      	lsls	r3, r3, #8
 80004ca:	b21c      	sxth	r4, r3
 80004cc:	23b1      	movs	r3, #177	@ 0xb1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 f8a8 	bl	8000624 <BMP180_ReadReg>
 80004d4:	0003      	movs	r3, r0
 80004d6:	b21b      	sxth	r3, r3
 80004d8:	4323      	orrs	r3, r4
 80004da:	b21b      	sxth	r3, r3
 80004dc:	b29a      	uxth	r2, r3
 80004de:	4b3f      	ldr	r3, [pc, #252]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 80004e0:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 80004e2:	23b2      	movs	r3, #178	@ 0xb2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 f89d 	bl	8000624 <BMP180_ReadReg>
 80004ea:	0003      	movs	r3, r0
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	b21c      	sxth	r4, r3
 80004f0:	23b3      	movs	r3, #179	@ 0xb3
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 f896 	bl	8000624 <BMP180_ReadReg>
 80004f8:	0003      	movs	r3, r0
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	4323      	orrs	r3, r4
 80004fe:	b21b      	sxth	r3, r3
 8000500:	b29a      	uxth	r2, r3
 8000502:	4b36      	ldr	r3, [pc, #216]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 8000504:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000506:	23b4      	movs	r3, #180	@ 0xb4
 8000508:	0018      	movs	r0, r3
 800050a:	f000 f88b 	bl	8000624 <BMP180_ReadReg>
 800050e:	0003      	movs	r3, r0
 8000510:	021b      	lsls	r3, r3, #8
 8000512:	b21c      	sxth	r4, r3
 8000514:	23b5      	movs	r3, #181	@ 0xb5
 8000516:	0018      	movs	r0, r3
 8000518:	f000 f884 	bl	8000624 <BMP180_ReadReg>
 800051c:	0003      	movs	r3, r0
 800051e:	b21b      	sxth	r3, r3
 8000520:	4323      	orrs	r3, r4
 8000522:	b21b      	sxth	r3, r3
 8000524:	b29a      	uxth	r2, r3
 8000526:	4b2d      	ldr	r3, [pc, #180]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 8000528:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 800052a:	23b6      	movs	r3, #182	@ 0xb6
 800052c:	0018      	movs	r0, r3
 800052e:	f000 f879 	bl	8000624 <BMP180_ReadReg>
 8000532:	0003      	movs	r3, r0
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	b21c      	sxth	r4, r3
 8000538:	23b7      	movs	r3, #183	@ 0xb7
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f872 	bl	8000624 <BMP180_ReadReg>
 8000540:	0003      	movs	r3, r0
 8000542:	b21b      	sxth	r3, r3
 8000544:	4323      	orrs	r3, r4
 8000546:	b21a      	sxth	r2, r3
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 800054a:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 800054c:	23b8      	movs	r3, #184	@ 0xb8
 800054e:	0018      	movs	r0, r3
 8000550:	f000 f868 	bl	8000624 <BMP180_ReadReg>
 8000554:	0003      	movs	r3, r0
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	b21c      	sxth	r4, r3
 800055a:	23b9      	movs	r3, #185	@ 0xb9
 800055c:	0018      	movs	r0, r3
 800055e:	f000 f861 	bl	8000624 <BMP180_ReadReg>
 8000562:	0003      	movs	r3, r0
 8000564:	b21b      	sxth	r3, r3
 8000566:	4323      	orrs	r3, r4
 8000568:	b21a      	sxth	r2, r3
 800056a:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 800056c:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 800056e:	23ba      	movs	r3, #186	@ 0xba
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f857 	bl	8000624 <BMP180_ReadReg>
 8000576:	0003      	movs	r3, r0
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21c      	sxth	r4, r3
 800057c:	23bb      	movs	r3, #187	@ 0xbb
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f850 	bl	8000624 <BMP180_ReadReg>
 8000584:	0003      	movs	r3, r0
 8000586:	b21b      	sxth	r3, r3
 8000588:	4323      	orrs	r3, r4
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 800058e:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000590:	23bc      	movs	r3, #188	@ 0xbc
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f846 	bl	8000624 <BMP180_ReadReg>
 8000598:	0003      	movs	r3, r0
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b21c      	sxth	r4, r3
 800059e:	23bd      	movs	r3, #189	@ 0xbd
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 f83f 	bl	8000624 <BMP180_ReadReg>
 80005a6:	0003      	movs	r3, r0
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4323      	orrs	r3, r4
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 80005b0:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 80005b2:	23be      	movs	r3, #190	@ 0xbe
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 f835 	bl	8000624 <BMP180_ReadReg>
 80005ba:	0003      	movs	r3, r0
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b21c      	sxth	r4, r3
 80005c0:	23bf      	movs	r3, #191	@ 0xbf
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f82e 	bl	8000624 <BMP180_ReadReg>
 80005c8:	0003      	movs	r3, r0
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	4323      	orrs	r3, r4
 80005ce:	b21a      	sxth	r2, r3
 80005d0:	4b02      	ldr	r3, [pc, #8]	@ (80005dc <BMP180_UpdateCalibrationData+0x188>)
 80005d2:	829a      	strh	r2, [r3, #20]
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bdb0      	pop	{r4, r5, r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	0002      	movs	r2, r0
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	1dbb      	adds	r3, r7, #6
 80005ee:	1c0a      	adds	r2, r1, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2] = { reg, cmd };
 80005f2:	210c      	movs	r1, #12
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	1dfa      	adds	r2, r7, #7
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	1dba      	adds	r2, r7, #6
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <BMP180_WriteReg+0x40>)
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	187a      	adds	r2, r7, r1
 800060a:	23fa      	movs	r3, #250	@ 0xfa
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	21ee      	movs	r1, #238	@ 0xee
 8000614:	f001 f82e 	bl	8001674 <HAL_I2C_Master_Transmit>
}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b004      	add	sp, #16
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000078 	.word	0x20000078

08000624 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b087      	sub	sp, #28
 8000628:	af02      	add	r7, sp, #8
 800062a:	0002      	movs	r2, r0
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <BMP180_ReadReg+0x44>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	1dfa      	adds	r2, r7, #7
 8000636:	23fa      	movs	r3, #250	@ 0xfa
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	21ee      	movs	r1, #238	@ 0xee
 8000640:	f001 f818 	bl	8001674 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <BMP180_ReadReg+0x44>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	240f      	movs	r4, #15
 800064a:	193a      	adds	r2, r7, r4
 800064c:	23fa      	movs	r3, #250	@ 0xfa
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	21ee      	movs	r1, #238	@ 0xee
 8000656:	f001 f937 	bl	80018c8 <HAL_I2C_Master_Receive>
	return result;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	781b      	ldrb	r3, [r3, #0]
}
 800065e:	0018      	movs	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	b005      	add	sp, #20
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000078 	.word	0x20000078

0800066c <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000672:	232e      	movs	r3, #46	@ 0x2e
 8000674:	0019      	movs	r1, r3
 8000676:	20f4      	movs	r0, #244	@ 0xf4
 8000678:	f7ff ffb2 	bl	80005e0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 800067c:	2305      	movs	r3, #5
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fd00 	bl	8001084 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000684:	20f6      	movs	r0, #246	@ 0xf6
 8000686:	f7ff ffcd 	bl	8000624 <BMP180_ReadReg>
 800068a:	0003      	movs	r3, r0
 800068c:	021c      	lsls	r4, r3, #8
 800068e:	20f7      	movs	r0, #247	@ 0xf7
 8000690:	f7ff ffc8 	bl	8000624 <BMP180_ReadReg>
 8000694:	0003      	movs	r3, r0
 8000696:	4323      	orrs	r3, r4
 8000698:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <BMP180_GetRawTemperature+0x88>)
 800069c:	895b      	ldrh	r3, [r3, #10]
 800069e:	001a      	movs	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <BMP180_GetRawTemperature+0x88>)
 80006a6:	8912      	ldrh	r2, [r2, #8]
 80006a8:	4353      	muls	r3, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	da02      	bge.n	80006b4 <BMP180_GetRawTemperature+0x48>
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <BMP180_GetRawTemperature+0x8c>)
 80006b0:	4694      	mov	ip, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	13db      	asrs	r3, r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <BMP180_GetRawTemperature+0x88>)
 80006ba:	2212      	movs	r2, #18
 80006bc:	5e9b      	ldrsh	r3, [r3, r2]
 80006be:	02da      	lsls	r2, r3, #11
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <BMP180_GetRawTemperature+0x88>)
 80006c2:	2114      	movs	r1, #20
 80006c4:	5e5b      	ldrsh	r3, [r3, r1]
 80006c6:	0019      	movs	r1, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	18cb      	adds	r3, r1, r3
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f7ff fdb6 	bl	8000240 <__divsi3>
 80006d4:	0003      	movs	r3, r0
 80006d6:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3308      	adds	r3, #8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da00      	bge.n	80006ea <BMP180_GetRawTemperature+0x7e>
 80006e8:	330f      	adds	r3, #15
 80006ea:	111b      	asrs	r3, r3, #4
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b005      	add	sp, #20
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	00007fff 	.word	0x00007fff

080006fc <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000702:	232e      	movs	r3, #46	@ 0x2e
 8000704:	0019      	movs	r1, r3
 8000706:	20f4      	movs	r0, #244	@ 0xf4
 8000708:	f7ff ff6a 	bl	80005e0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 800070c:	2305      	movs	r3, #5
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fcb8 	bl	8001084 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8000714:	f000 f91c 	bl	8000950 <BMP180_GetUT>
 8000718:	0003      	movs	r3, r0
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 800071c:	4b7f      	ldr	r3, [pc, #508]	@ (800091c <BMP180_GetPressure+0x220>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	001a      	movs	r2, r3
 8000722:	4b7f      	ldr	r3, [pc, #508]	@ (8000920 <BMP180_GetPressure+0x224>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	0019      	movs	r1, r3
 8000728:	20f4      	movs	r0, #244	@ 0xf4
 800072a:	f7ff ff59 	bl	80005e0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 800072e:	4b7b      	ldr	r3, [pc, #492]	@ (800091c <BMP180_GetPressure+0x220>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001a      	movs	r2, r3
 8000734:	4b7b      	ldr	r3, [pc, #492]	@ (8000924 <BMP180_GetPressure+0x228>)
 8000736:	5c9b      	ldrb	r3, [r3, r2]
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fca3 	bl	8001084 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 800073e:	f000 f917 	bl	8000970 <BMP180_GetUP>
 8000742:	0003      	movs	r3, r0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000746:	4b78      	ldr	r3, [pc, #480]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000748:	895b      	ldrh	r3, [r3, #10]
 800074a:	001a      	movs	r2, r3
 800074c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	4a75      	ldr	r2, [pc, #468]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000752:	8912      	ldrh	r2, [r2, #8]
 8000754:	4353      	muls	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	da02      	bge.n	8000760 <BMP180_GetPressure+0x64>
 800075a:	4a74      	ldr	r2, [pc, #464]	@ (800092c <BMP180_GetPressure+0x230>)
 800075c:	4694      	mov	ip, r2
 800075e:	4463      	add	r3, ip
 8000760:	13db      	asrs	r3, r3, #15
 8000762:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000764:	4b70      	ldr	r3, [pc, #448]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000766:	2212      	movs	r2, #18
 8000768:	5e9b      	ldrsh	r3, [r3, r2]
 800076a:	02da      	lsls	r2, r3, #11
 800076c:	4b6e      	ldr	r3, [pc, #440]	@ (8000928 <BMP180_GetPressure+0x22c>)
 800076e:	2114      	movs	r1, #20
 8000770:	5e5b      	ldrsh	r3, [r3, r1]
 8000772:	0019      	movs	r1, r3
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	18cb      	adds	r3, r1, r3
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f7ff fd60 	bl	8000240 <__divsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8000784:	6a3a      	ldr	r2, [r7, #32]
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	4a68      	ldr	r2, [pc, #416]	@ (8000930 <BMP180_GetPressure+0x234>)
 8000790:	4694      	mov	ip, r2
 8000792:	4463      	add	r3, ip
 8000794:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8000796:	4b64      	ldr	r3, [pc, #400]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000798:	220e      	movs	r2, #14
 800079a:	5e9b      	ldrsh	r3, [r3, r2]
 800079c:	001a      	movs	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	435b      	muls	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da02      	bge.n	80007ac <BMP180_GetPressure+0xb0>
 80007a6:	4963      	ldr	r1, [pc, #396]	@ (8000934 <BMP180_GetPressure+0x238>)
 80007a8:	468c      	mov	ip, r1
 80007aa:	4463      	add	r3, ip
 80007ac:	131b      	asrs	r3, r3, #12
 80007ae:	4353      	muls	r3, r2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	da02      	bge.n	80007ba <BMP180_GetPressure+0xbe>
 80007b4:	4a60      	ldr	r2, [pc, #384]	@ (8000938 <BMP180_GetPressure+0x23c>)
 80007b6:	4694      	mov	ip, r2
 80007b8:	4463      	add	r3, ip
 80007ba:	12db      	asrs	r3, r3, #11
 80007bc:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80007be:	4b5a      	ldr	r3, [pc, #360]	@ (8000928 <BMP180_GetPressure+0x22c>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	5e9b      	ldrsh	r3, [r3, r2]
 80007c4:	001a      	movs	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	4353      	muls	r3, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da02      	bge.n	80007d4 <BMP180_GetPressure+0xd8>
 80007ce:	4a5a      	ldr	r2, [pc, #360]	@ (8000938 <BMP180_GetPressure+0x23c>)
 80007d0:	4694      	mov	ip, r2
 80007d2:	4463      	add	r3, ip
 80007d4:	12db      	asrs	r3, r3, #11
 80007d6:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80007d8:	6a3a      	ldr	r2, [r7, #32]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	18d3      	adds	r3, r2, r3
 80007de:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80007e0:	4b51      	ldr	r3, [pc, #324]	@ (8000928 <BMP180_GetPressure+0x22c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	5e9b      	ldrsh	r3, [r3, r2]
 80007e6:	009a      	lsls	r2, r3, #2
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	4a4b      	ldr	r2, [pc, #300]	@ (800091c <BMP180_GetPressure+0x220>)
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	4093      	lsls	r3, r2
 80007f2:	3302      	adds	r3, #2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	da00      	bge.n	80007fa <BMP180_GetPressure+0xfe>
 80007f8:	3303      	adds	r3, #3
 80007fa:	109b      	asrs	r3, r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80007fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000800:	2204      	movs	r2, #4
 8000802:	5e9b      	ldrsh	r3, [r3, r2]
 8000804:	001a      	movs	r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4353      	muls	r3, r2
 800080a:	2b00      	cmp	r3, #0
 800080c:	da02      	bge.n	8000814 <BMP180_GetPressure+0x118>
 800080e:	4a4b      	ldr	r2, [pc, #300]	@ (800093c <BMP180_GetPressure+0x240>)
 8000810:	4694      	mov	ip, r2
 8000812:	4463      	add	r3, ip
 8000814:	135b      	asrs	r3, r3, #13
 8000816:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8000818:	4b43      	ldr	r3, [pc, #268]	@ (8000928 <BMP180_GetPressure+0x22c>)
 800081a:	220c      	movs	r2, #12
 800081c:	5e9b      	ldrsh	r3, [r3, r2]
 800081e:	001a      	movs	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	435b      	muls	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	da02      	bge.n	800082e <BMP180_GetPressure+0x132>
 8000828:	4942      	ldr	r1, [pc, #264]	@ (8000934 <BMP180_GetPressure+0x238>)
 800082a:	468c      	mov	ip, r1
 800082c:	4463      	add	r3, ip
 800082e:	131b      	asrs	r3, r3, #12
 8000830:	4353      	muls	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	da02      	bge.n	800083c <BMP180_GetPressure+0x140>
 8000836:	4a42      	ldr	r2, [pc, #264]	@ (8000940 <BMP180_GetPressure+0x244>)
 8000838:	4694      	mov	ip, r2
 800083a:	4463      	add	r3, ip
 800083c:	141b      	asrs	r3, r3, #16
 800083e:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8000840:	6a3a      	ldr	r2, [r7, #32]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	3302      	adds	r3, #2
 8000848:	2b00      	cmp	r3, #0
 800084a:	da00      	bge.n	800084e <BMP180_GetPressure+0x152>
 800084c:	3303      	adds	r3, #3
 800084e:	109b      	asrs	r3, r3, #2
 8000850:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8000852:	4b35      	ldr	r3, [pc, #212]	@ (8000928 <BMP180_GetPressure+0x22c>)
 8000854:	88db      	ldrh	r3, [r3, #6]
 8000856:	001a      	movs	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0209      	lsls	r1, r1, #8
 800085e:	468c      	mov	ip, r1
 8000860:	4463      	add	r3, ip
 8000862:	4353      	muls	r3, r2
 8000864:	0bdb      	lsrs	r3, r3, #15
 8000866:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8000868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <BMP180_GetPressure+0x220>)
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	4a33      	ldr	r2, [pc, #204]	@ (8000944 <BMP180_GetPressure+0x248>)
 8000876:	410a      	asrs	r2, r1
 8000878:	4353      	muls	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db08      	blt.n	8000894 <BMP180_GetPressure+0x198>
		p = (b7 * 2) / b4;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	68b9      	ldr	r1, [r7, #8]
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fc4f 	bl	800012c <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000892:	e006      	b.n	80008a2 <BMP180_GetPressure+0x1a6>
	else
		p = (b7 / b4) * 2;
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fc48 	bl	800012c <__udivsi3>
 800089c:	0003      	movs	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80008a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	da00      	bge.n	80008aa <BMP180_GetPressure+0x1ae>
 80008a8:	33ff      	adds	r3, #255	@ 0xff
 80008aa:	121b      	asrs	r3, r3, #8
 80008ac:	001a      	movs	r2, r3
 80008ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da00      	bge.n	80008b6 <BMP180_GetPressure+0x1ba>
 80008b4:	33ff      	adds	r3, #255	@ 0xff
 80008b6:	121b      	asrs	r3, r3, #8
 80008b8:	4353      	muls	r3, r2
 80008ba:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	4a22      	ldr	r2, [pc, #136]	@ (8000948 <BMP180_GetPressure+0x24c>)
 80008c0:	4353      	muls	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da02      	bge.n	80008cc <BMP180_GetPressure+0x1d0>
 80008c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <BMP180_GetPressure+0x244>)
 80008c8:	4694      	mov	ip, r2
 80008ca:	4463      	add	r3, ip
 80008cc:	141b      	asrs	r3, r3, #16
 80008ce:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80008d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008d2:	0013      	movs	r3, r2
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	00da      	lsls	r2, r3, #3
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	425b      	negs	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da02      	bge.n	80008f0 <BMP180_GetPressure+0x1f4>
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <BMP180_GetPressure+0x244>)
 80008ec:	4694      	mov	ip, r2
 80008ee:	4463      	add	r3, ip
 80008f0:	141b      	asrs	r3, r3, #16
 80008f2:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80008f4:	6a3a      	ldr	r2, [r7, #32]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	4a14      	ldr	r2, [pc, #80]	@ (800094c <BMP180_GetPressure+0x250>)
 80008fc:	4694      	mov	ip, r2
 80008fe:	4463      	add	r3, ip
 8000900:	2b00      	cmp	r3, #0
 8000902:	da00      	bge.n	8000906 <BMP180_GetPressure+0x20a>
 8000904:	330f      	adds	r3, #15
 8000906:	111b      	asrs	r3, r3, #4
 8000908:	001a      	movs	r2, r3
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	189b      	adds	r3, r3, r2
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b00c      	add	sp, #48	@ 0x30
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000092 	.word	0x20000092
 8000920:	08003ee0 	.word	0x08003ee0
 8000924:	08003ee4 	.word	0x08003ee4
 8000928:	2000007c 	.word	0x2000007c
 800092c:	00007fff 	.word	0x00007fff
 8000930:	fffff060 	.word	0xfffff060
 8000934:	00000fff 	.word	0x00000fff
 8000938:	000007ff 	.word	0x000007ff
 800093c:	00001fff 	.word	0x00001fff
 8000940:	0000ffff 	.word	0x0000ffff
 8000944:	0000c350 	.word	0x0000c350
 8000948:	00000bde 	.word	0x00000bde
 800094c:	00000ecf 	.word	0x00000ecf

08000950 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000954:	20f6      	movs	r0, #246	@ 0xf6
 8000956:	f7ff fe65 	bl	8000624 <BMP180_ReadReg>
 800095a:	0003      	movs	r3, r0
 800095c:	021c      	lsls	r4, r3, #8
 800095e:	20f7      	movs	r0, #247	@ 0xf7
 8000960:	f7ff fe60 	bl	8000624 <BMP180_ReadReg>
 8000964:	0003      	movs	r3, r0
 8000966:	4323      	orrs	r3, r4
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000970 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8000974:	20f6      	movs	r0, #246	@ 0xf6
 8000976:	f7ff fe55 	bl	8000624 <BMP180_ReadReg>
 800097a:	0003      	movs	r3, r0
 800097c:	041c      	lsls	r4, r3, #16
 800097e:	20f7      	movs	r0, #247	@ 0xf7
 8000980:	f7ff fe50 	bl	8000624 <BMP180_ReadReg>
 8000984:	0003      	movs	r3, r0
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	431c      	orrs	r4, r3
 800098a:	20f8      	movs	r0, #248	@ 0xf8
 800098c:	f7ff fe4a 	bl	8000624 <BMP180_ReadReg>
 8000990:	0003      	movs	r3, r0
 8000992:	0022      	movs	r2, r4
 8000994:	431a      	orrs	r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <BMP180_GetUP+0x3c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0019      	movs	r1, r3
 800099c:	2308      	movs	r3, #8
 800099e:	1a5b      	subs	r3, r3, r1
 80009a0:	411a      	asrs	r2, r3
 80009a2:	0013      	movs	r3, r2
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bdb0      	pop	{r4, r5, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000092 	.word	0x20000092

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b09f      	sub	sp, #124	@ 0x7c
 80009b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fae8 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f847 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f917 	bl	8000bf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c2:	f000 f887 	bl	8000ad4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009c6:	f000 f8c5 	bl	8000b54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init(&hi2c1);
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <main+0x90>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fd23 	bl	8000418 <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff fd2e 	bl	8000434 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 80009d8:	f7ff fd3c 	bl	8000454 <BMP180_UpdateCalibrationData>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	int32_t temperatura = BMP180_GetRawTemperature();
 80009dc:	f7ff fe46 	bl	800066c <BMP180_GetRawTemperature>
 80009e0:	0003      	movs	r3, r0
 80009e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int32_t pressao = BMP180_GetPressure();
 80009e4:	f7ff fe8a 	bl	80006fc <BMP180_GetPressure>
 80009e8:	0003      	movs	r3, r0
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
	char buffer[100];
	sprintf(buffer, "Temperatura: %d.%dC\r\nPressao: %d Pa\r\n", (int) temperatura/10, (int)temperatura%10, (int)pressao);
 80009ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009ee:	210a      	movs	r1, #10
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fc25 	bl	8000240 <__divsi3>
 80009f6:	0003      	movs	r3, r0
 80009f8:	001c      	movs	r4, r3
 80009fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fc:	210a      	movs	r1, #10
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fd04 	bl	800040c <__aeabi_idivmod>
 8000a04:	000b      	movs	r3, r1
 8000a06:	001a      	movs	r2, r3
 8000a08:	490e      	ldr	r1, [pc, #56]	@ (8000a44 <main+0x94>)
 8000a0a:	1d38      	adds	r0, r7, #4
 8000a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	0013      	movs	r3, r2
 8000a12:	0022      	movs	r2, r4
 8000a14:	f002 fda6 	bl	8003564 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fb74 	bl	8000108 <strlen>
 8000a20:	0003      	movs	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	23fa      	movs	r3, #250	@ 0xfa
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <main+0x98>)
 8000a2c:	f002 f830 	bl	8002a90 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000a30:	23fa      	movs	r3, #250	@ 0xfa
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fb25 	bl	8001084 <HAL_Delay>
  {
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	e7ce      	b.n	80009dc <main+0x2c>
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000094 	.word	0x20000094
 8000a44:	08003eb8 	.word	0x08003eb8
 8000a48:	200000e8 	.word	0x200000e8

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b08d      	sub	sp, #52	@ 0x34
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	2414      	movs	r4, #20
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	0018      	movs	r0, r3
 8000a58:	231c      	movs	r3, #28
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f002 fda1 	bl	80035a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fd9a 	bl	80035a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2240      	movs	r2, #64	@ 0x40
 8000a88:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 fb69 	bl	8002164 <HAL_RCC_OscConfig>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000a96:	f000 f8d9 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 fd35 	bl	800252c <HAL_RCC_ClockConfig>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ac6:	f000 f8c1 	bl	8000c4c <Error_Handler>
  }
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b00d      	add	sp, #52	@ 0x34
 8000ad0:	bd90      	pop	{r4, r7, pc}
	...

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C1_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fd09 	bl	8001528 <HAL_I2C_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 f897 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fa86 	bl	8002034 <HAL_I2CEx_ConfigAnalogFilter>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 f88e 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <MX_I2C1_Init+0x74>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fac9 	bl	80020cc <HAL_I2CEx_ConfigDigitalFilter>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f885 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000094 	.word	0x20000094
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	20303e5d 	.word	0x20303e5d

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b5a:	4a24      	ldr	r2, [pc, #144]	@ (8000bec <MX_USART1_UART_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b60:	22e1      	movs	r2, #225	@ 0xe1
 8000b62:	0252      	lsls	r2, r2, #9
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 ff20 	bl	80029e4 <HAL_UART_Init>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f850 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 fbf7 	bl	80033a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f847 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f002 fc2e 	bl	8003424 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f83e 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fbac 	bl	8003330 <HAL_UARTEx_DisableFifoMode>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f836 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	200000e8 	.word	0x200000e8
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c06:	2204      	movs	r2, #4
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <MX_GPIO_Init+0x58>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c36:	2202      	movs	r2, #2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0549      	lsls	r1, r1, #21
 8000c80:	430a      	orrs	r2, r1
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x50>)
 8000c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	055b      	lsls	r3, r3, #21
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f000 fa1a 	bl	80010cc <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	f000 fa17 	bl	80010cc <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b093      	sub	sp, #76	@ 0x4c
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	2334      	movs	r3, #52	@ 0x34
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2314      	movs	r3, #20
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f002 fc70 	bl	80035a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	2418      	movs	r4, #24
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	231c      	movs	r3, #28
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f002 fc68 	bl	80035a4 <memset>
  if(hi2c->Instance==I2C1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <HAL_I2C_MspInit+0x100>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d161      	bne.n	8000da2 <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2240      	movs	r2, #64	@ 0x40
 8000ce2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fd8b 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cf6:	f7ff ffa9 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d00:	2104      	movs	r1, #4
 8000d02:	430a      	orrs	r2, r1
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d06:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d16:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d18:	2102      	movs	r1, #2
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d22:	2202      	movs	r2, #2
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d2a:	2134      	movs	r1, #52	@ 0x34
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2280      	movs	r2, #128	@ 0x80
 8000d30:	01d2      	lsls	r2, r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	000c      	movs	r4, r1
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2212      	movs	r2, #18
 8000d3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	220e      	movs	r2, #14
 8000d4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <HAL_I2C_MspInit+0x108>)
 8000d52:	0019      	movs	r1, r3
 8000d54:	0010      	movs	r0, r2
 8000d56:	f000 fa7d 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d5a:	0021      	movs	r1, r4
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2240      	movs	r2, #64	@ 0x40
 8000d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2212      	movs	r2, #18
 8000d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2206      	movs	r2, #6
 8000d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_I2C_MspInit+0x10c>)
 8000d7e:	0019      	movs	r1, r3
 8000d80:	0010      	movs	r0, r2
 8000d82:	f000 fa67 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	0389      	lsls	r1, r1, #14
 8000d90:	430a      	orrs	r2, r1
 8000d92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_I2C_MspInit+0x104>)
 8000d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b013      	add	sp, #76	@ 0x4c
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40021000 	.word	0x40021000
 8000db4:	50000800 	.word	0x50000800
 8000db8:	50000400 	.word	0x50000400

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b091      	sub	sp, #68	@ 0x44
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	232c      	movs	r3, #44	@ 0x2c
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2314      	movs	r3, #20
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f002 fbe8 	bl	80035a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	2410      	movs	r4, #16
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	231c      	movs	r3, #28
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f002 fbe0 	bl	80035a4 <memset>
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <HAL_UART_MspInit+0xbc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d13f      	bne.n	8000e6e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 fd03 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e06:	f7ff ff21 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	01c9      	lsls	r1, r1, #7
 8000e14:	430a      	orrs	r2, r1
 8000e16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_UART_MspInit+0xc0>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e3e:	212c      	movs	r1, #44	@ 0x2c
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	22c0      	movs	r2, #192	@ 0xc0
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	23a0      	movs	r3, #160	@ 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 f9f3 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b011      	add	sp, #68	@ 0x44
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f8d0 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	18d3      	adds	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f002 fb66 	bl	80035b4 <__errno>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	18d2      	adds	r2, r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <_sbrk+0x64>)
 8000f04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b006      	add	sp, #24
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20001800 	.word	0x20001800
 8000f14:	00000400 	.word	0x00000400
 8000f18:	2000017c 	.word	0x2000017c
 8000f1c:	200002d0 	.word	0x200002d0

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <SystemInit+0x14>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	0512      	lsls	r2, r2, #20
 8000f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff fff0 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f42:	e003      	b.n	8000f4c <LoopCopyDataInit>

08000f44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f4a:	3104      	adds	r1, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f4c:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <LoopForever+0xa>)
  ldr r3, =_edata
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <LoopForever+0xe>)
  adds r2, r0, r1
 8000f50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f54:	d3f6      	bcc.n	8000f44 <CopyDataInit>
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopForever+0x12>)
  b LoopFillZerobss
 8000f58:	e002      	b.n	8000f60 <LoopFillZerobss>

08000f5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5e:	3204      	adds	r2, #4

08000f60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <LoopForever+0x16>)
  cmp r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f64:	d3f9      	bcc.n	8000f5a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f66:	f002 fb2b 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6a:	f7ff fd21 	bl	80009b0 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000f74:	08003fac 	.word	0x08003fac
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000f80:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000f84:	200002cc 	.word	0x200002cc

08000f88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f80e 	bl	8000fb8 <HAL_InitTick>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e001      	b.n	8000fac <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa8:	f7ff fe56 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_InitTick+0x88>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d02b      	beq.n	8001028 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_InitTick+0x8c>)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_InitTick+0x88>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	0019      	movs	r1, r3
 8000fda:	23fa      	movs	r3, #250	@ 0xfa
 8000fdc:	0098      	lsls	r0, r3, #2
 8000fde:	f7ff f8a5 	bl	800012c <__udivsi3>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff f8a0 	bl	800012c <__udivsi3>
 8000fec:	0003      	movs	r3, r0
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 f923 	bl	800123a <HAL_SYSTICK_Config>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d112      	bne.n	800101e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d80a      	bhi.n	8001014 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	2301      	movs	r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f902 	bl	8001210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_InitTick+0x90>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e00d      	b.n	8001030 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	230f      	movs	r3, #15
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e008      	b.n	8001030 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e003      	b.n	8001030 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b005      	add	sp, #20
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	20000000 	.word	0x20000000
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	18d2      	adds	r2, r2, r3
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_IncTick+0x20>)
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	20000008 	.word	0x20000008
 800106c:	20000180 	.word	0x20000180

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	@ (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	20000180 	.word	0x20000180

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fff0 	bl	8001070 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	001a      	movs	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	189b      	adds	r3, r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	f7ff ffe0 	bl	8001070 <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_SYSCFG_EnableRemap+0x1c>)
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_SYSCFG_EnableRemap+0x1c>)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010000 	.word	0x40010000

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0002      	movs	r2, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001100:	d828      	bhi.n	8001154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <__NVIC_SetPriority+0xd4>)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	33c0      	adds	r3, #192	@ 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	589b      	ldr	r3, [r3, r2]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	@ 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	@ 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	481f      	ldr	r0, [pc, #124]	@ (80011c0 <__NVIC_SetPriority+0xd4>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	430a      	orrs	r2, r1
 800114c:	33c0      	adds	r3, #192	@ 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001152:	e031      	b.n	80011b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <__NVIC_SetPriority+0xd8>)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0019      	movs	r1, r3
 800115c:	230f      	movs	r3, #15
 800115e:	400b      	ands	r3, r1
 8001160:	3b08      	subs	r3, #8
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3306      	adds	r3, #6
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	@ 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	@ 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <__NVIC_SetPriority+0xd8>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001c      	movs	r4, r3
 80011a4:	230f      	movs	r3, #15
 80011a6:	4023      	ands	r3, r4
 80011a8:	3b08      	subs	r3, #8
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	3306      	adds	r3, #6
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	18c3      	adds	r3, r0, r3
 80011b4:	3304      	adds	r3, #4
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b003      	add	sp, #12
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	045b      	lsls	r3, r3, #17
 80011d8:	429a      	cmp	r2, r3
 80011da:	d301      	bcc.n	80011e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011dc:	2301      	movs	r3, #1
 80011de:	e010      	b.n	8001202 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <SysTick_Config+0x44>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	3a01      	subs	r2, #1
 80011e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e8:	2301      	movs	r3, #1
 80011ea:	425b      	negs	r3, r3
 80011ec:	2103      	movs	r1, #3
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff ff7c 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SysTick_Config+0x44>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <SysTick_Config+0x44>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	210f      	movs	r1, #15
 800121c:	187b      	adds	r3, r7, r1
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	187b      	adds	r3, r7, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	0011      	movs	r1, r2
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ffbf 	bl	80011c8 <SysTick_Config>
 800124a:	0003      	movs	r3, r0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001262:	e14d      	b.n	8001500 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <HAL_GPIO_Init+0x28>
 800127a:	e13e      	b.n	80014fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x38>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b12      	cmp	r3, #18
 800128a:	d125      	bne.n	80012d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	58d3      	ldr	r3, [r2, r3]
 8001298:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2207      	movs	r2, #7
 800129e:	4013      	ands	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	43da      	mvns	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	220f      	movs	r2, #15
 80012b6:	401a      	ands	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2107      	movs	r1, #7
 80012bc:	400b      	ands	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	409a      	lsls	r2, r3
 80012c2:	0013      	movs	r3, r2
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	6979      	ldr	r1, [r7, #20]
 80012d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	43da      	mvns	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	401a      	ands	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4313      	orrs	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d00b      	beq.n	800132c <HAL_GPIO_Init+0xd8>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001320:	2b11      	cmp	r3, #17
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	43da      	mvns	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4313      	orrs	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	4013      	ands	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	2201      	movs	r2, #1
 800137a:	401a      	ands	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4013      	ands	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	055b      	lsls	r3, r3, #21
 80013ce:	4013      	ands	r3, r2
 80013d0:	d100      	bne.n	80013d4 <HAL_GPIO_Init+0x180>
 80013d2:	e092      	b.n	80014fa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013d4:	4a50      	ldr	r2, [pc, #320]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3318      	adds	r3, #24
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	589b      	ldr	r3, [r3, r2]
 80013e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	220f      	movs	r2, #15
 80013ec:	409a      	lsls	r2, r3
 80013ee:	0013      	movs	r3, r2
 80013f0:	43da      	mvns	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	23a0      	movs	r3, #160	@ 0xa0
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	429a      	cmp	r2, r3
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x1d6>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a45      	ldr	r2, [pc, #276]	@ (800151c <HAL_GPIO_Init+0x2c8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x1d2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a44      	ldr	r2, [pc, #272]	@ (8001520 <HAL_GPIO_Init+0x2cc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x1ce>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a43      	ldr	r2, [pc, #268]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x1ca>
 800141a:	2305      	movs	r3, #5
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x1d8>
 800141e:	2306      	movs	r3, #6
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x1d8>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x1d8>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x1d8>
 800142a:	2300      	movs	r3, #0
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	2103      	movs	r1, #3
 8001430:	400a      	ands	r2, r1
 8001432:	00d2      	lsls	r2, r2, #3
 8001434:	4093      	lsls	r3, r2
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800143c:	4936      	ldr	r1, [pc, #216]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3318      	adds	r3, #24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800144a:	4a33      	ldr	r2, [pc, #204]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	58d3      	ldr	r3, [r2, r3]
 8001450:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43da      	mvns	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4013      	ands	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	025b      	lsls	r3, r3, #9
 8001464:	4013      	ands	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001470:	4929      	ldr	r1, [pc, #164]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 800147a:	2384      	movs	r3, #132	@ 0x84
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43da      	mvns	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4013      	ands	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800149e:	491e      	ldr	r1, [pc, #120]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80014a0:	2284      	movs	r2, #132	@ 0x84
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4013      	ands	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	035b      	lsls	r3, r3, #13
 80014be:	4013      	ands	r3, r2
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43da      	mvns	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	4013      	ands	r3, r2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	3301      	adds	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	40da      	lsrs	r2, r3
 8001508:	1e13      	subs	r3, r2, #0
 800150a:	d000      	beq.n	800150e <HAL_GPIO_Init+0x2ba>
 800150c:	e6aa      	b.n	8001264 <HAL_GPIO_Init+0x10>
  }
}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	46c0      	nop			@ (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b006      	add	sp, #24
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021800 	.word	0x40021800
 800151c:	50000400 	.word	0x50000400
 8001520:	50000800 	.word	0x50000800
 8001524:	50001400 	.word	0x50001400

08001528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e08f      	b.n	800165a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2241      	movs	r2, #65	@ 0x41
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2240      	movs	r2, #64	@ 0x40
 800154a:	2100      	movs	r1, #0
 800154c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fbab 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2241      	movs	r2, #65	@ 0x41
 800155a:	2124      	movs	r1, #36	@ 0x24
 800155c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	493b      	ldr	r1, [pc, #236]	@ (8001664 <HAL_I2C_Init+0x13c>)
 8001578:	400a      	ands	r2, r1
 800157a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4938      	ldr	r1, [pc, #224]	@ (8001668 <HAL_I2C_Init+0x140>)
 8001588:	400a      	ands	r2, r1
 800158a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0209      	lsls	r1, r1, #8
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e007      	b.n	80015b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2184      	movs	r1, #132	@ 0x84
 80015b0:	0209      	lsls	r1, r1, #8
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d109      	bne.n	80015d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	0109      	lsls	r1, r1, #4
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	e007      	b.n	80015e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4923      	ldr	r1, [pc, #140]	@ (800166c <HAL_I2C_Init+0x144>)
 80015de:	400a      	ands	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4920      	ldr	r1, [pc, #128]	@ (8001670 <HAL_I2C_Init+0x148>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	491a      	ldr	r1, [pc, #104]	@ (8001668 <HAL_I2C_Init+0x140>)
 80015fe:	400a      	ands	r2, r1
 8001600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	431a      	orrs	r2, r3
 800160c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69d9      	ldr	r1, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2241      	movs	r2, #65	@ 0x41
 8001646:	2120      	movs	r1, #32
 8001648:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2242      	movs	r2, #66	@ 0x42
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	f0ffffff 	.word	0xf0ffffff
 8001668:	ffff7fff 	.word	0xffff7fff
 800166c:	fffff7ff 	.word	0xfffff7ff
 8001670:	02008000 	.word	0x02008000

08001674 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	0008      	movs	r0, r1
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	0019      	movs	r1, r3
 8001682:	230a      	movs	r3, #10
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	1c02      	adds	r2, r0, #0
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	2308      	movs	r3, #8
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	1c0a      	adds	r2, r1, #0
 8001690:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2241      	movs	r2, #65	@ 0x41
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b20      	cmp	r3, #32
 800169c:	d000      	beq.n	80016a0 <HAL_I2C_Master_Transmit+0x2c>
 800169e:	e10a      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2240      	movs	r2, #64	@ 0x40
 80016a4:	5c9b      	ldrb	r3, [r3, r2]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Master_Transmit+0x3a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e104      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2240      	movs	r2, #64	@ 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b6:	f7ff fcdb 	bl	8001070 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	0219      	lsls	r1, r3, #8
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2319      	movs	r3, #25
 80016ca:	2201      	movs	r2, #1
 80016cc:	f000 fa26 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0ef      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2241      	movs	r2, #65	@ 0x41
 80016dc:	2121      	movs	r1, #33	@ 0x21
 80016de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2242      	movs	r2, #66	@ 0x42
 80016e4:	2110      	movs	r1, #16
 80016e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2208      	movs	r2, #8
 80016f8:	18ba      	adds	r2, r7, r2
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	2bff      	cmp	r3, #255	@ 0xff
 800170c:	d906      	bls.n	800171c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	22ff      	movs	r2, #255	@ 0xff
 8001712:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	045b      	lsls	r3, r3, #17
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e007      	b.n	800172c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	049b      	lsls	r3, r3, #18
 800172a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d027      	beq.n	8001784 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	697c      	ldr	r4, [r7, #20]
 8001770:	230a      	movs	r3, #10
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	8819      	ldrh	r1, [r3, #0]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <HAL_I2C_Master_Transmit+0x24c>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	0023      	movs	r3, r4
 800177e:	f000 fc1f 	bl	8001fc0 <I2C_TransferConfig>
 8001782:	e06f      	b.n	8001864 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	697c      	ldr	r4, [r7, #20]
 800178c:	230a      	movs	r3, #10
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	8819      	ldrh	r1, [r3, #0]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <HAL_I2C_Master_Transmit+0x24c>)
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	0023      	movs	r3, r4
 800179a:	f000 fc11 	bl	8001fc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800179e:	e061      	b.n	8001864 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fa06 	bl	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e081      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03a      	beq.n	8001864 <HAL_I2C_Master_Transmit+0x1f0>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d136      	bne.n	8001864 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	0013      	movs	r3, r2
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	f000 f98a 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e053      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2bff      	cmp	r3, #255	@ 0xff
 8001818:	d911      	bls.n	800183e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	22ff      	movs	r2, #255	@ 0xff
 800181e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001824:	b2da      	uxtb	r2, r3
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	045c      	lsls	r4, r3, #17
 800182a:	230a      	movs	r3, #10
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	8819      	ldrh	r1, [r3, #0]
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	0023      	movs	r3, r4
 8001838:	f000 fbc2 	bl	8001fc0 <I2C_TransferConfig>
 800183c:	e012      	b.n	8001864 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	b2da      	uxtb	r2, r3
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	049c      	lsls	r4, r3, #18
 8001852:	230a      	movs	r3, #10
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	8819      	ldrh	r1, [r3, #0]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	0023      	movs	r3, r4
 8001860:	f000 fbae 	bl	8001fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d198      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 f9e5 	bl	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e01a      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2220      	movs	r2, #32
 8001888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	490b      	ldr	r1, [pc, #44]	@ (80018c4 <HAL_I2C_Master_Transmit+0x250>)
 8001896:	400a      	ands	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2241      	movs	r2, #65	@ 0x41
 800189e:	2120      	movs	r1, #32
 80018a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2242      	movs	r2, #66	@ 0x42
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2240      	movs	r2, #64	@ 0x40
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
  }
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b007      	add	sp, #28
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	80002000 	.word	0x80002000
 80018c4:	fe00e800 	.word	0xfe00e800

080018c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	0008      	movs	r0, r1
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	0019      	movs	r1, r3
 80018d6:	230a      	movs	r3, #10
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	2308      	movs	r3, #8
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	1c0a      	adds	r2, r1, #0
 80018e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2241      	movs	r2, #65	@ 0x41
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	d000      	beq.n	80018f4 <HAL_I2C_Master_Receive+0x2c>
 80018f2:	e0e8      	b.n	8001ac6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2240      	movs	r2, #64	@ 0x40
 80018f8:	5c9b      	ldrb	r3, [r3, r2]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Master_Receive+0x3a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e0e2      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2240      	movs	r2, #64	@ 0x40
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800190a:	f7ff fbb1 	bl	8001070 <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	0219      	lsls	r1, r3, #8
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2319      	movs	r3, #25
 800191e:	2201      	movs	r2, #1
 8001920:	f000 f8fc 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001924:	1e03      	subs	r3, r0, #0
 8001926:	d001      	beq.n	800192c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cd      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2241      	movs	r2, #65	@ 0x41
 8001930:	2122      	movs	r1, #34	@ 0x22
 8001932:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2242      	movs	r2, #66	@ 0x42
 8001938:	2110      	movs	r1, #16
 800193a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2208      	movs	r2, #8
 800194c:	18ba      	adds	r2, r7, r2
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	2bff      	cmp	r3, #255	@ 0xff
 8001960:	d911      	bls.n	8001986 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	22ff      	movs	r2, #255	@ 0xff
 8001966:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	045c      	lsls	r4, r3, #17
 8001972:	230a      	movs	r3, #10
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	8819      	ldrh	r1, [r3, #0]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	4b55      	ldr	r3, [pc, #340]	@ (8001ad0 <HAL_I2C_Master_Receive+0x208>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0023      	movs	r3, r4
 8001980:	f000 fb1e 	bl	8001fc0 <I2C_TransferConfig>
 8001984:	e076      	b.n	8001a74 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001994:	b2da      	uxtb	r2, r3
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	049c      	lsls	r4, r3, #18
 800199a:	230a      	movs	r3, #10
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <HAL_I2C_Master_Receive+0x208>)
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	0023      	movs	r3, r4
 80019a8:	f000 fb0a 	bl	8001fc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019ac:	e062      	b.n	8001a74 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f989 	bl	8001ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e082      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_I2C_Master_Receive+0x1ac>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d136      	bne.n	8001a74 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	0013      	movs	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	2180      	movs	r1, #128	@ 0x80
 8001a14:	f000 f882 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001a18:	1e03      	subs	r3, r0, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e053      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2bff      	cmp	r3, #255	@ 0xff
 8001a28:	d911      	bls.n	8001a4e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	22ff      	movs	r2, #255	@ 0xff
 8001a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	045c      	lsls	r4, r3, #17
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	8819      	ldrh	r1, [r3, #0]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	0023      	movs	r3, r4
 8001a48:	f000 faba 	bl	8001fc0 <I2C_TransferConfig>
 8001a4c:	e012      	b.n	8001a74 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	049c      	lsls	r4, r3, #18
 8001a62:	230a      	movs	r3, #10
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	8819      	ldrh	r1, [r3, #0]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	0023      	movs	r3, r4
 8001a70:	f000 faa6 	bl	8001fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d197      	bne.n	80019ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f000 f8dd 	bl	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e01a      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2220      	movs	r2, #32
 8001a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	490b      	ldr	r1, [pc, #44]	@ (8001ad4 <HAL_I2C_Master_Receive+0x20c>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2241      	movs	r2, #65	@ 0x41
 8001aae:	2120      	movs	r1, #32
 8001ab0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2242      	movs	r2, #66	@ 0x42
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2240      	movs	r2, #64	@ 0x40
 8001abe:	2100      	movs	r1, #0
 8001ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
  }
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b007      	add	sp, #28
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	80002400 	.word	0x80002400
 8001ad4:	fe00e800 	.word	0xfe00e800

08001ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d103      	bne.n	8001af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d007      	beq.n	8001b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	430a      	orrs	r2, r1
 8001b12:	619a      	str	r2, [r3, #24]
  }
}
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b2c:	e030      	b.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	d02d      	beq.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b34:	f7ff fa9c 	bl	8001070 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d302      	bcc.n	8001b4a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d122      	bne.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	425a      	negs	r2, r3
 8001b5a:	4153      	adcs	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	001a      	movs	r2, r3
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d113      	bne.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2241      	movs	r2, #65	@ 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2242      	movs	r2, #66	@ 0x42
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2240      	movs	r2, #64	@ 0x40
 8001b88:	2100      	movs	r1, #0
 8001b8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e00f      	b.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	425a      	negs	r2, r3
 8001ba0:	4153      	adcs	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d0bf      	beq.n	8001b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b004      	add	sp, #16
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bc4:	e032      	b.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f8ff 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e030      	b.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	d025      	beq.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be0:	f7ff fa46 	bl	8001070 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d302      	bcc.n	8001bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11a      	bne.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d013      	beq.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c08:	2220      	movs	r2, #32
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2241      	movs	r2, #65	@ 0x41
 8001c14:	2120      	movs	r1, #32
 8001c16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2242      	movs	r2, #66	@ 0x42
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	@ 0x40
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e007      	b.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d1c5      	bne.n	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b004      	add	sp, #16
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c50:	e02f      	b.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f8b9 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e02d      	b.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff fa03 	bl	8001070 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11a      	bne.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2220      	movs	r2, #32
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d013      	beq.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	2220      	movs	r2, #32
 8001c90:	431a      	orrs	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2241      	movs	r2, #65	@ 0x41
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2242      	movs	r2, #66	@ 0x42
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e007      	b.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d1c8      	bne.n	8001c52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cd8:	e06b      	b.n	8001db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f875 	bl	8001dd0 <I2C_IsErrorOccurred>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e069      	b.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d138      	bne.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d105      	bne.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e055      	b.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d107      	bne.n	8001d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d32:	e002      	b.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	491f      	ldr	r1, [pc, #124]	@ (8001dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2241      	movs	r2, #65	@ 0x41
 8001d56:	2120      	movs	r1, #32
 8001d58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2242      	movs	r2, #66	@ 0x42
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2240      	movs	r2, #64	@ 0x40
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e029      	b.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7ff f97f 	bl	8001070 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d00f      	beq.n	8001db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	2220      	movs	r2, #32
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2241      	movs	r2, #65	@ 0x41
 8001da2:	2120      	movs	r1, #32
 8001da4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d18c      	bne.n	8001cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	fe00e800 	.word	0xfe00e800

08001dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2327      	movs	r3, #39	@ 0x27
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2210      	movs	r2, #16
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <I2C_IsErrorOccurred+0x2e>
 8001dfc:	e079      	b.n	8001ef2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e06:	e057      	b.n	8001eb8 <I2C_IsErrorOccurred+0xe8>
 8001e08:	2227      	movs	r2, #39	@ 0x27
 8001e0a:	18bb      	adds	r3, r7, r2
 8001e0c:	18ba      	adds	r2, r7, r2
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	d04f      	beq.n	8001eb8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e18:	f7ff f92a 	bl	8001070 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d302      	bcc.n	8001e2e <I2C_IsErrorOccurred+0x5e>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d144      	bne.n	8001eb8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	4013      	ands	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e3c:	2013      	movs	r0, #19
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	2142      	movs	r1, #66	@ 0x42
 8001e44:	5c52      	ldrb	r2, [r2, r1]
 8001e46:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	2380      	movs	r3, #128	@ 0x80
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	401a      	ands	r2, r3
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d126      	bne.n	8001eaa <I2C_IsErrorOccurred+0xda>
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	01db      	lsls	r3, r3, #7
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d021      	beq.n	8001eaa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d01d      	beq.n	8001eaa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	01c9      	lsls	r1, r1, #7
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e80:	f7ff f8f6 	bl	8001070 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e88:	e00f      	b.n	8001eaa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e8a:	f7ff f8f1 	bl	8001070 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b19      	cmp	r3, #25
 8001e96:	d908      	bls.n	8001eaa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ea0:	2327      	movs	r3, #39	@ 0x27
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]

              break;
 8001ea8:	e006      	b.n	8001eb8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d1e8      	bne.n	8001e8a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d004      	beq.n	8001ed0 <I2C_IsErrorOccurred+0x100>
 8001ec6:	2327      	movs	r3, #39	@ 0x27
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d09b      	beq.n	8001e08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ed0:	2327      	movs	r3, #39	@ 0x27
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001eea:	2327      	movs	r3, #39	@ 0x27
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d00c      	beq.n	8001f1e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	0052      	lsls	r2, r2, #1
 8001f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f16:	2327      	movs	r3, #39	@ 0x27
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	d00c      	beq.n	8001f42 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2280      	movs	r2, #128	@ 0x80
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f3a:	2327      	movs	r3, #39	@ 0x27
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d00c      	beq.n	8001f66 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4313      	orrs	r3, r2
 8001f52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f5e:	2327      	movs	r3, #39	@ 0x27
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f66:	2327      	movs	r3, #39	@ 0x27
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01d      	beq.n	8001fac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7ff fdb0 	bl	8001ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	490e      	ldr	r1, [pc, #56]	@ (8001fbc <I2C_IsErrorOccurred+0x1ec>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2241      	movs	r2, #65	@ 0x41
 8001f98:	2120      	movs	r1, #32
 8001f9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2242      	movs	r2, #66	@ 0x42
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001fac:	2327      	movs	r3, #39	@ 0x27
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b00a      	add	sp, #40	@ 0x28
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	fe00e800 	.word	0xfe00e800

08001fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	0008      	movs	r0, r1
 8001fca:	0011      	movs	r1, r2
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	240a      	movs	r4, #10
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	1c02      	adds	r2, r0, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	2009      	movs	r0, #9
 8001fd8:	183b      	adds	r3, r7, r0
 8001fda:	1c0a      	adds	r2, r1, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	059b      	lsls	r3, r3, #22
 8001fe4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	0419      	lsls	r1, r3, #16
 8001fec:	23ff      	movs	r3, #255	@ 0xff
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ff2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800200a:	0d51      	lsrs	r1, r2, #21
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	400a      	ands	r2, r1
 8002012:	4907      	ldr	r1, [pc, #28]	@ (8002030 <I2C_TransferConfig+0x70>)
 8002014:	430a      	orrs	r2, r1
 8002016:	43d2      	mvns	r2, r2
 8002018:	401a      	ands	r2, r3
 800201a:	0011      	movs	r1, r2
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b007      	add	sp, #28
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	03ff63ff 	.word	0x03ff63ff

08002034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2241      	movs	r2, #65	@ 0x41
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	d138      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2240      	movs	r2, #64	@ 0x40
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002054:	2302      	movs	r3, #2
 8002056:	e032      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	2101      	movs	r1, #1
 800205e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2241      	movs	r2, #65	@ 0x41
 8002064:	2124      	movs	r1, #36	@ 0x24
 8002066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	438a      	bics	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4911      	ldr	r1, [pc, #68]	@ (80020c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2241      	movs	r2, #65	@ 0x41
 80020ac:	2120      	movs	r1, #32
 80020ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	ffffefff 	.word	0xffffefff

080020cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	@ 0x41
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d139      	bne.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e033      	b.n	8002158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2241      	movs	r2, #65	@ 0x41
 80020fc:	2124      	movs	r1, #36	@ 0x24
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	438a      	bics	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	@ 0x41
 8002146:	2120      	movs	r1, #32
 8002148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	@ 0x40
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}
 8002160:	fffff0ff 	.word	0xfffff0ff

08002164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1d0      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x1e>
 8002180:	e069      	b.n	8002256 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4bc8      	ldr	r3, [pc, #800]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2238      	movs	r2, #56	@ 0x38
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15d      	bne.n	8002256 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1bc      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_OscConfig+0x56>
 80021aa:	4bbe      	ldr	r3, [pc, #760]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4bbd      	ldr	r3, [pc, #756]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021b0:	2180      	movs	r1, #128	@ 0x80
 80021b2:	0249      	lsls	r1, r1, #9
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e020      	b.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	23a0      	movs	r3, #160	@ 0xa0
 80021c0:	02db      	lsls	r3, r3, #11
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d10e      	bne.n	80021e4 <HAL_RCC_OscConfig+0x80>
 80021c6:	4bb7      	ldr	r3, [pc, #732]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4bb6      	ldr	r3, [pc, #728]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	02c9      	lsls	r1, r1, #11
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4bb3      	ldr	r3, [pc, #716]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4bb2      	ldr	r3, [pc, #712]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	0249      	lsls	r1, r1, #9
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e4:	4baf      	ldr	r3, [pc, #700]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4bae      	ldr	r3, [pc, #696]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021ea:	49af      	ldr	r1, [pc, #700]	@ (80024a8 <HAL_RCC_OscConfig+0x344>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	4bac      	ldr	r3, [pc, #688]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4bab      	ldr	r3, [pc, #684]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80021f6:	49ad      	ldr	r1, [pc, #692]	@ (80024ac <HAL_RCC_OscConfig+0x348>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d014      	beq.n	800222e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe ff34 	bl	8001070 <HAL_GetTick>
 8002208:	0003      	movs	r3, r0
 800220a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800220e:	f7fe ff2f 	bl	8001070 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	@ 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e17b      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002220:	4ba0      	ldr	r3, [pc, #640]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	4013      	ands	r3, r2
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0xaa>
 800222c:	e013      	b.n	8002256 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe ff1f 	bl	8001070 <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002238:	f7fe ff1a 	bl	8001070 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e166      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	4b96      	ldr	r3, [pc, #600]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	4013      	ands	r3, r2
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d100      	bne.n	8002262 <HAL_RCC_OscConfig+0xfe>
 8002260:	e086      	b.n	8002370 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4b90      	ldr	r3, [pc, #576]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2238      	movs	r2, #56	@ 0x38
 8002268:	4013      	ands	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e14c      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b89      	ldr	r3, [pc, #548]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a8b      	ldr	r2, [pc, #556]	@ (80024b0 <HAL_RCC_OscConfig+0x34c>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	4b85      	ldr	r3, [pc, #532]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800229a:	4b82      	ldr	r3, [pc, #520]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a85      	ldr	r2, [pc, #532]	@ (80024b4 <HAL_RCC_OscConfig+0x350>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b7e      	ldr	r3, [pc, #504]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022ae:	4b7d      	ldr	r3, [pc, #500]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	2207      	movs	r2, #7
 80022b6:	4013      	ands	r3, r2
 80022b8:	4a7f      	ldr	r2, [pc, #508]	@ (80024b8 <HAL_RCC_OscConfig+0x354>)
 80022ba:	40da      	lsrs	r2, r3
 80022bc:	4b7f      	ldr	r3, [pc, #508]	@ (80024bc <HAL_RCC_OscConfig+0x358>)
 80022be:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022c0:	4b7f      	ldr	r3, [pc, #508]	@ (80024c0 <HAL_RCC_OscConfig+0x35c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7fe fe77 	bl	8000fb8 <HAL_InitTick>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d050      	beq.n	8002370 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e122      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022da:	4b72      	ldr	r3, [pc, #456]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x350>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b6e      	ldr	r3, [pc, #440]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80022ee:	4b6d      	ldr	r3, [pc, #436]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b6c      	ldr	r3, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	0049      	lsls	r1, r1, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe feb8 	bl	8001070 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002306:	f7fe feb3 	bl	8001070 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0ff      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002318:	4b62      	ldr	r3, [pc, #392]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4013      	ands	r3, r2
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b5f      	ldr	r3, [pc, #380]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a61      	ldr	r2, [pc, #388]	@ (80024b0 <HAL_RCC_OscConfig+0x34c>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	021a      	lsls	r2, r3, #8
 8002334:	4b5b      	ldr	r3, [pc, #364]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e019      	b.n	8002370 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800233c:	4b59      	ldr	r3, [pc, #356]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b58      	ldr	r3, [pc, #352]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002342:	4960      	ldr	r1, [pc, #384]	@ (80024c4 <HAL_RCC_OscConfig+0x360>)
 8002344:	400a      	ands	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fe92 	bl	8001070 <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002352:	f7fe fe8d 	bl	8001070 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0d9      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002364:	4b4f      	ldr	r3, [pc, #316]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4013      	ands	r3, r2
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2208      	movs	r2, #8
 8002376:	4013      	ands	r3, r2
 8002378:	d042      	beq.n	8002400 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800237a:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2238      	movs	r2, #56	@ 0x38
 8002380:	4013      	ands	r3, r2
 8002382:	2b18      	cmp	r3, #24
 8002384:	d105      	bne.n	8002392 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d138      	bne.n	8002400 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0c2      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800239a:	4b42      	ldr	r3, [pc, #264]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800239c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	430a      	orrs	r2, r1
 80023a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fe63 	bl	8001070 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023b0:	f7fe fe5e 	bl	8001070 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0aa      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023c2:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f1      	beq.n	80023b0 <HAL_RCC_OscConfig+0x24c>
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023ce:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80023d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80023d4:	2101      	movs	r1, #1
 80023d6:	438a      	bics	r2, r1
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe49 	bl	8001070 <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fe44 	bl	8001070 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e090      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80023f6:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d1f1      	bne.n	80023e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2204      	movs	r2, #4
 8002406:	4013      	ands	r3, r2
 8002408:	d100      	bne.n	800240c <HAL_RCC_OscConfig+0x2a8>
 800240a:	e084      	b.n	8002516 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240c:	230f      	movs	r3, #15
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2238      	movs	r2, #56	@ 0x38
 800241a:	4013      	ands	r3, r2
 800241c:	2b20      	cmp	r3, #32
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d000      	beq.n	800242a <HAL_RCC_OscConfig+0x2c6>
 8002428:	e075      	b.n	8002516 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e074      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x2e0>
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800243c:	2101      	movs	r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002442:	e01c      	b.n	800247e <HAL_RCC_OscConfig+0x31a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b05      	cmp	r3, #5
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0x302>
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800244e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002452:	2104      	movs	r1, #4
 8002454:	430a      	orrs	r2, r1
 8002456:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800245a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002464:	e00b      	b.n	800247e <HAL_RCC_OscConfig+0x31a>
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 800246c:	2101      	movs	r1, #1
 800246e:	438a      	bics	r2, r1
 8002470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002474:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002478:	2104      	movs	r1, #4
 800247a:	438a      	bics	r2, r1
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fdf3 	bl	8001070 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fdee 	bl	8001070 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a0b      	ldr	r2, [pc, #44]	@ (80024c8 <HAL_RCC_OscConfig+0x364>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d915      	bls.n	80024cc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e039      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	fffeffff 	.word	0xfffeffff
 80024ac:	fffbffff 	.word	0xfffbffff
 80024b0:	ffff80ff 	.word	0xffff80ff
 80024b4:	ffffc7ff 	.word	0xffffc7ff
 80024b8:	02dc6c00 	.word	0x02dc6c00
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	fffffeff 	.word	0xfffffeff
 80024c8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <HAL_RCC_OscConfig+0x3bc>)
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d0dc      	beq.n	8002490 <HAL_RCC_OscConfig+0x32c>
 80024d6:	e013      	b.n	8002500 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fdca 	bl	8001070 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80024e0:	e009      	b.n	80024f6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fdc5 	bl	8001070 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <HAL_RCC_OscConfig+0x3c0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e010      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_RCC_OscConfig+0x3bc>)
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2202      	movs	r2, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002500:	230f      	movs	r3, #15
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_RCC_OscConfig+0x3bc>)
 800250c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <HAL_RCC_OscConfig+0x3bc>)
 8002510:	4905      	ldr	r1, [pc, #20]	@ (8002528 <HAL_RCC_OscConfig+0x3c4>)
 8002512:	400a      	ands	r2, r1
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	00001388 	.word	0x00001388
 8002528:	efffffff 	.word	0xefffffff

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0e9      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2207      	movs	r2, #7
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d91e      	bls.n	800258c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b73      	ldr	r3, [pc, #460]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2207      	movs	r2, #7
 8002554:	4393      	bics	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	4b70      	ldr	r3, [pc, #448]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002560:	f7fe fd86 	bl	8001070 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002568:	e009      	b.n	800257e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f7fe fd81 	bl	8001070 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a6a      	ldr	r2, [pc, #424]	@ (8002720 <HAL_RCC_ClockConfig+0x1f4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0ca      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800257e:	4b67      	ldr	r3, [pc, #412]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2207      	movs	r2, #7
 8002584:	4013      	ands	r3, r2
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d017      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025a0:	4b60      	ldr	r3, [pc, #384]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a60      	ldr	r2, [pc, #384]	@ (8002728 <HAL_RCC_ClockConfig+0x1fc>)
 80025a6:	401a      	ands	r2, r3
 80025a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025aa:	21b0      	movs	r1, #176	@ 0xb0
 80025ac:	0109      	lsls	r1, r1, #4
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4a5d      	ldr	r2, [pc, #372]	@ (800272c <HAL_RCC_ClockConfig+0x200>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4b58      	ldr	r3, [pc, #352]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d055      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80025d0:	4b54      	ldr	r3, [pc, #336]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	221c      	movs	r2, #28
 80025d6:	4393      	bics	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d11f      	bne.n	8002638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e08b      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002604:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4013      	ands	r3, r2
 800260e:	d113      	bne.n	8002638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e07f      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d106      	bne.n	800262a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800261c:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d108      	bne.n	8002638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e074      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800262a:	4b3e      	ldr	r3, [pc, #248]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e06d      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002638:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2207      	movs	r2, #7
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b37      	ldr	r3, [pc, #220]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fd10 	bl	8001070 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002654:	e009      	b.n	800266a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002656:	f7fe fd0b 	bl	8001070 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <HAL_RCC_ClockConfig+0x1f4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e054      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2238      	movs	r2, #56	@ 0x38
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ec      	bne.n	8002656 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d21e      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2207      	movs	r2, #7
 8002690:	4393      	bics	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	4b21      	ldr	r3, [pc, #132]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800269c:	f7fe fce8 	bl	8001070 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f7fe fce3 	bl	8001070 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <HAL_RCC_ClockConfig+0x1f4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e02c      	b.n	8002714 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2207      	movs	r2, #7
 80026c0:	4013      	ands	r3, r2
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2204      	movs	r2, #4
 80026ce:	4013      	ands	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <HAL_RCC_ClockConfig+0x204>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026e6:	f000 f82b 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026ea:	0001      	movs	r1, r0
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	220f      	movs	r2, #15
 80026f4:	401a      	ands	r2, r3
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_RCC_ClockConfig+0x208>)
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	58d3      	ldr	r3, [r2, r3]
 80026fc:	221f      	movs	r2, #31
 80026fe:	4013      	ands	r3, r2
 8002700:	000a      	movs	r2, r1
 8002702:	40da      	lsrs	r2, r3
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_RCC_ClockConfig+0x20c>)
 8002706:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <HAL_RCC_ClockConfig+0x210>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe fc53 	bl	8000fb8 <HAL_InitTick>
 8002712:	0003      	movs	r3, r0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40022000 	.word	0x40022000
 8002720:	00001388 	.word	0x00001388
 8002724:	40021000 	.word	0x40021000
 8002728:	ffff84ff 	.word	0xffff84ff
 800272c:	fffff0ff 	.word	0xfffff0ff
 8002730:	ffff8fff 	.word	0xffff8fff
 8002734:	08003ee8 	.word	0x08003ee8
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002746:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2238      	movs	r2, #56	@ 0x38
 800274c:	4013      	ands	r3, r2
 800274e:	d10f      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0adb      	lsrs	r3, r3, #11
 8002756:	2207      	movs	r2, #7
 8002758:	4013      	ands	r3, r2
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	0013      	movs	r3, r2
 8002760:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	4815      	ldr	r0, [pc, #84]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8002766:	f7fd fce1 	bl	800012c <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	e01e      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2238      	movs	r2, #56	@ 0x38
 8002776:	4013      	ands	r3, r2
 8002778:	2b08      	cmp	r3, #8
 800277a:	d102      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800277c:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	e015      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2238      	movs	r2, #56	@ 0x38
 8002788:	4013      	ands	r3, r2
 800278a:	2b20      	cmp	r3, #32
 800278c:	d103      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2238      	movs	r2, #56	@ 0x38
 800279c:	4013      	ands	r3, r2
 800279e:	2b18      	cmp	r3, #24
 80027a0:	d103      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80027a2:	23fa      	movs	r3, #250	@ 0xfa
 80027a4:	01db      	lsls	r3, r3, #7
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	e001      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80027ae:	687b      	ldr	r3, [r7, #4]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	02dc6c00 	.word	0x02dc6c00
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b02      	ldr	r3, [pc, #8]	@ (80027d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80027dc:	f7ff fff2 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e0:	0001      	movs	r1, r0
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0b1b      	lsrs	r3, r3, #12
 80027e8:	2207      	movs	r2, #7
 80027ea:	401a      	ands	r2, r3
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	58d3      	ldr	r3, [r2, r3]
 80027f2:	221f      	movs	r2, #31
 80027f4:	4013      	ands	r3, r2
 80027f6:	40d9      	lsrs	r1, r3
 80027f8:	000b      	movs	r3, r1
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	08003f28 	.word	0x08003f28

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002810:	2313      	movs	r3, #19
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002818:	2312      	movs	r3, #18
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800282c:	e079      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2011      	movs	r0, #17
 8002830:	183b      	adds	r3, r7, r0
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b64      	ldr	r3, [pc, #400]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	055b      	lsls	r3, r3, #21
 800283e:	4013      	ands	r3, r2
 8002840:	d110      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b61      	ldr	r3, [pc, #388]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002846:	4b60      	ldr	r3, [pc, #384]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	0549      	lsls	r1, r1, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002850:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	055b      	lsls	r3, r3, #21
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	183b      	adds	r3, r7, r0
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002864:	4b58      	ldr	r3, [pc, #352]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002866:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002868:	23c0      	movs	r3, #192	@ 0xc0
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4013      	ands	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d014      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002880:	4b51      	ldr	r3, [pc, #324]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	4a51      	ldr	r2, [pc, #324]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002886:	4013      	ands	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288a:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800288c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0249      	lsls	r1, r1, #9
 8002894:	430a      	orrs	r2, r1
 8002896:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800289a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800289c:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800289e:	494c      	ldr	r1, [pc, #304]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80028a4:	4b48      	ldr	r3, [pc, #288]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d016      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe fbdd 	bl	8001070 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80028ba:	e00c      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fbd8 	bl	8001070 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	4a43      	ldr	r2, [pc, #268]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d904      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80028cc:	2313      	movs	r3, #19
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2203      	movs	r2, #3
 80028d2:	701a      	strb	r2, [r3, #0]
          break;
 80028d4:	e004      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80028d6:	4b3c      	ldr	r3, [pc, #240]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d0ed      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80028e0:	2313      	movs	r3, #19
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ea:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	4a37      	ldr	r2, [pc, #220]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	2312      	movs	r3, #18
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2213      	movs	r2, #19
 8002906:	18ba      	adds	r2, r7, r2
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290c:	2311      	movs	r3, #17
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800291c:	492e      	ldr	r1, [pc, #184]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	400a      	ands	r2, r1
 8002920:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	2203      	movs	r2, #3
 8002932:	4393      	bics	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800293c:	430a      	orrs	r2, r1
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	4a23      	ldr	r2, [pc, #140]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800295a:	430a      	orrs	r2, r1
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	01db      	lsls	r3, r3, #7
 8002966:	4013      	ands	r3, r2
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	0899      	lsrs	r1, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002978:	430a      	orrs	r2, r1
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4013      	ands	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002998:	430a      	orrs	r2, r1
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da09      	bge.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	22e0      	movs	r2, #224	@ 0xe0
 80029aa:	4393      	bics	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80029b8:	2312      	movs	r3, #18
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffffcff 	.word	0xfffffcff
 80029d0:	fffeffff 	.word	0xfffeffff
 80029d4:	00001388 	.word	0x00001388
 80029d8:	efffffff 	.word	0xefffffff
 80029dc:	ffffcfff 	.word	0xffffcfff
 80029e0:	ffff3fff 	.word	0xffff3fff

080029e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e046      	b.n	8002a84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2288      	movs	r2, #136	@ 0x88
 80029fa:	589b      	ldr	r3, [r3, r2]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2284      	movs	r2, #132	@ 0x84
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fe f9d6 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2288      	movs	r2, #136	@ 0x88
 8002a14:	2124      	movs	r1, #36	@ 0x24
 8002a16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fa4e 	bl	8002ed4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f8cc 	bl	8002bd8 <UART_SetConfig>
 8002a40:	0003      	movs	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01c      	b.n	8002a84 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	490d      	ldr	r1, [pc, #52]	@ (8002a8c <HAL_UART_Init+0xa8>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	212a      	movs	r1, #42	@ 0x2a
 8002a66:	438a      	bics	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fadd 	bl	800303c <UART_CheckIdleState>
 8002a82:	0003      	movs	r3, r0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	ffffb7ff 	.word	0xffffb7ff

08002a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	1dbb      	adds	r3, r7, #6
 8002a9e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2288      	movs	r2, #136	@ 0x88
 8002aa4:	589b      	ldr	r3, [r3, r2]
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d000      	beq.n	8002aac <HAL_UART_Transmit+0x1c>
 8002aaa:	e090      	b.n	8002bce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_Transmit+0x2a>
 8002ab2:	1dbb      	adds	r3, r7, #6
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e088      	b.n	8002bd0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	015b      	lsls	r3, r3, #5
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d109      	bne.n	8002ade <HAL_UART_Transmit+0x4e>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e078      	b.n	8002bd0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2290      	movs	r2, #144	@ 0x90
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2288      	movs	r2, #136	@ 0x88
 8002aea:	2121      	movs	r1, #33	@ 0x21
 8002aec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fabf 	bl	8001070 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1dba      	adds	r2, r7, #6
 8002afa:	2154      	movs	r1, #84	@ 0x54
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1dba      	adds	r2, r7, #6
 8002b04:	2156      	movs	r1, #86	@ 0x56
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	015b      	lsls	r3, r3, #5
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d108      	bne.n	8002b28 <HAL_UART_Transmit+0x98>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e003      	b.n	8002b30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b30:	e030      	b.n	8002b94 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	f000 fb26 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2288      	movs	r2, #136	@ 0x88
 8002b4c:	2120      	movs	r1, #32
 8002b4e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e03d      	b.n	8002bd0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	001a      	movs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	05d2      	lsls	r2, r2, #23
 8002b66:	0dd2      	lsrs	r2, r2, #23
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e007      	b.n	8002b82 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2256      	movs	r2, #86	@ 0x56
 8002b86:	5a9b      	ldrh	r3, [r3, r2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b299      	uxth	r1, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2256      	movs	r2, #86	@ 0x56
 8002b92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2256      	movs	r2, #86	@ 0x56
 8002b98:	5a9b      	ldrh	r3, [r3, r2]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1c8      	bne.n	8002b32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	0013      	movs	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	2140      	movs	r1, #64	@ 0x40
 8002bae:	f000 faef 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2288      	movs	r2, #136	@ 0x88
 8002bba:	2120      	movs	r1, #32
 8002bbc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e006      	b.n	8002bd0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2288      	movs	r2, #136	@ 0x88
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b008      	add	sp, #32
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002be0:	231e      	movs	r3, #30
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4aab      	ldr	r2, [pc, #684]	@ (8002eb4 <UART_SetConfig+0x2dc>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4aa6      	ldr	r2, [pc, #664]	@ (8002eb8 <UART_SetConfig+0x2e0>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a9d      	ldr	r2, [pc, #628]	@ (8002ebc <UART_SetConfig+0x2e4>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a93      	ldr	r2, [pc, #588]	@ (8002ec0 <UART_SetConfig+0x2e8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d127      	bne.n	8002cc6 <UART_SetConfig+0xee>
 8002c76:	4b93      	ldr	r3, [pc, #588]	@ (8002ec4 <UART_SetConfig+0x2ec>)
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d017      	beq.n	8002cb2 <UART_SetConfig+0xda>
 8002c82:	d81b      	bhi.n	8002cbc <UART_SetConfig+0xe4>
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d00a      	beq.n	8002c9e <UART_SetConfig+0xc6>
 8002c88:	d818      	bhi.n	8002cbc <UART_SetConfig+0xe4>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <UART_SetConfig+0xbc>
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d00a      	beq.n	8002ca8 <UART_SetConfig+0xd0>
 8002c92:	e013      	b.n	8002cbc <UART_SetConfig+0xe4>
 8002c94:	231f      	movs	r3, #31
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e021      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e01c      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002ca8:	231f      	movs	r3, #31
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e017      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002cb2:	231f      	movs	r3, #31
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e012      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002cbc:	231f      	movs	r3, #31
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e00d      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7f      	ldr	r2, [pc, #508]	@ (8002ec8 <UART_SetConfig+0x2f0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d104      	bne.n	8002cda <UART_SetConfig+0x102>
 8002cd0:	231f      	movs	r3, #31
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e003      	b.n	8002ce2 <UART_SetConfig+0x10a>
 8002cda:	231f      	movs	r3, #31
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2210      	movs	r2, #16
 8002ce0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d000      	beq.n	8002cf0 <UART_SetConfig+0x118>
 8002cee:	e06f      	b.n	8002dd0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002cf0:	231f      	movs	r3, #31
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d01f      	beq.n	8002d3a <UART_SetConfig+0x162>
 8002cfa:	dc22      	bgt.n	8002d42 <UART_SetConfig+0x16a>
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d017      	beq.n	8002d30 <UART_SetConfig+0x158>
 8002d00:	dc1f      	bgt.n	8002d42 <UART_SetConfig+0x16a>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <UART_SetConfig+0x134>
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d005      	beq.n	8002d16 <UART_SetConfig+0x13e>
 8002d0a:	e01a      	b.n	8002d42 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f7ff fd64 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 8002d10:	0003      	movs	r3, r0
 8002d12:	61bb      	str	r3, [r7, #24]
        break;
 8002d14:	e01c      	b.n	8002d50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d16:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec4 <UART_SetConfig+0x2ec>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4013      	ands	r3, r2
 8002d20:	3301      	adds	r3, #1
 8002d22:	0019      	movs	r1, r3
 8002d24:	4869      	ldr	r0, [pc, #420]	@ (8002ecc <UART_SetConfig+0x2f4>)
 8002d26:	f7fd fa01 	bl	800012c <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
        break;
 8002d2e:	e00f      	b.n	8002d50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d30:	f7ff fd06 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8002d34:	0003      	movs	r3, r0
 8002d36:	61bb      	str	r3, [r7, #24]
        break;
 8002d38:	e00a      	b.n	8002d50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e006      	b.n	8002d50 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d46:	231e      	movs	r3, #30
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
        break;
 8002d4e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d100      	bne.n	8002d58 <UART_SetConfig+0x180>
 8002d56:	e097      	b.n	8002e88 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed0 <UART_SetConfig+0x2f8>)
 8002d5e:	0052      	lsls	r2, r2, #1
 8002d60:	5ad3      	ldrh	r3, [r2, r3]
 8002d62:	0019      	movs	r1, r3
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f7fd f9e1 	bl	800012c <__udivsi3>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	005a      	lsls	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	18d2      	adds	r2, r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7fd f9d5 	bl	800012c <__udivsi3>
 8002d82:	0003      	movs	r3, r0
 8002d84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d91c      	bls.n	8002dc6 <UART_SetConfig+0x1ee>
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	025b      	lsls	r3, r3, #9
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d217      	bcs.n	8002dc6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	200e      	movs	r0, #14
 8002d9c:	183b      	adds	r3, r7, r0
 8002d9e:	210f      	movs	r1, #15
 8002da0:	438a      	bics	r2, r1
 8002da2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2207      	movs	r2, #7
 8002dac:	4013      	ands	r3, r2
 8002dae:	b299      	uxth	r1, r3
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	183a      	adds	r2, r7, r0
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	183a      	adds	r2, r7, r0
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e060      	b.n	8002e88 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc6:	231e      	movs	r3, #30
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e05b      	b.n	8002e88 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d01f      	beq.n	8002e1a <UART_SetConfig+0x242>
 8002dda:	dc22      	bgt.n	8002e22 <UART_SetConfig+0x24a>
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d017      	beq.n	8002e10 <UART_SetConfig+0x238>
 8002de0:	dc1f      	bgt.n	8002e22 <UART_SetConfig+0x24a>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <UART_SetConfig+0x214>
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d005      	beq.n	8002df6 <UART_SetConfig+0x21e>
 8002dea:	e01a      	b.n	8002e22 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff fcf4 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61bb      	str	r3, [r7, #24]
        break;
 8002df4:	e01c      	b.n	8002e30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <UART_SetConfig+0x2ec>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	4013      	ands	r3, r2
 8002e00:	3301      	adds	r3, #1
 8002e02:	0019      	movs	r1, r3
 8002e04:	4831      	ldr	r0, [pc, #196]	@ (8002ecc <UART_SetConfig+0x2f4>)
 8002e06:	f7fd f991 	bl	800012c <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
        break;
 8002e0e:	e00f      	b.n	8002e30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e10:	f7ff fc96 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
        break;
 8002e18:	e00a      	b.n	8002e30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e006      	b.n	8002e30 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e26:	231e      	movs	r3, #30
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
        break;
 8002e2e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d028      	beq.n	8002e88 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <UART_SetConfig+0x2f8>)
 8002e3c:	0052      	lsls	r2, r2, #1
 8002e3e:	5ad3      	ldrh	r3, [r2, r3]
 8002e40:	0019      	movs	r1, r3
 8002e42:	69b8      	ldr	r0, [r7, #24]
 8002e44:	f7fd f972 	bl	800012c <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	18d2      	adds	r2, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0019      	movs	r1, r3
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	f7fd f966 	bl	800012c <__udivsi3>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d90a      	bls.n	8002e80 <UART_SetConfig+0x2a8>
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	025b      	lsls	r3, r3, #9
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d205      	bcs.n	8002e80 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e003      	b.n	8002e88 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e80:	231e      	movs	r3, #30
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	226a      	movs	r2, #106	@ 0x6a
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2268      	movs	r2, #104	@ 0x68
 8002e94:	2101      	movs	r1, #1
 8002e96:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ea4:	231e      	movs	r3, #30
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	781b      	ldrb	r3, [r3, #0]
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b008      	add	sp, #32
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	cfff69f3 	.word	0xcfff69f3
 8002eb8:	ffffcfff 	.word	0xffffcfff
 8002ebc:	11fff4ff 	.word	0x11fff4ff
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	02dc6c00 	.word	0x02dc6c00
 8002ed0:	08003f48 	.word	0x08003f48

08002ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a4a      	ldr	r2, [pc, #296]	@ (8003018 <UART_AdvFeatureConfig+0x144>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a43      	ldr	r2, [pc, #268]	@ (800301c <UART_AdvFeatureConfig+0x148>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a3b      	ldr	r2, [pc, #236]	@ (8003020 <UART_AdvFeatureConfig+0x14c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	2204      	movs	r2, #4
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a34      	ldr	r2, [pc, #208]	@ (8003024 <UART_AdvFeatureConfig+0x150>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	2210      	movs	r2, #16
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <UART_AdvFeatureConfig+0x154>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4a25      	ldr	r2, [pc, #148]	@ (800302c <UART_AdvFeatureConfig+0x158>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <UART_AdvFeatureConfig+0x15c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	035b      	lsls	r3, r3, #13
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10b      	bne.n	8002fee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <UART_AdvFeatureConfig+0x160>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	2280      	movs	r2, #128	@ 0x80
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00b      	beq.n	8003010 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8003038 <UART_AdvFeatureConfig+0x164>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}
 8003018:	ffff7fff 	.word	0xffff7fff
 800301c:	fffdffff 	.word	0xfffdffff
 8003020:	fffeffff 	.word	0xfffeffff
 8003024:	fffbffff 	.word	0xfffbffff
 8003028:	ffffefff 	.word	0xffffefff
 800302c:	ffffdfff 	.word	0xffffdfff
 8003030:	ffefffff 	.word	0xffefffff
 8003034:	ff9fffff 	.word	0xff9fffff
 8003038:	fff7ffff 	.word	0xfff7ffff

0800303c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b092      	sub	sp, #72	@ 0x48
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2290      	movs	r2, #144	@ 0x90
 8003048:	2100      	movs	r1, #0
 800304a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800304c:	f7fe f810 	bl	8001070 <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2208      	movs	r2, #8
 800305c:	4013      	ands	r3, r2
 800305e:	2b08      	cmp	r3, #8
 8003060:	d12d      	bne.n	80030be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	0391      	lsls	r1, r2, #14
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4a47      	ldr	r2, [pc, #284]	@ (8003188 <UART_CheckIdleState+0x14c>)
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	f000 f88e 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d022      	beq.n	80030be <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003078:	f3ef 8310 	mrs	r3, PRIMASK
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003080:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003082:	2301      	movs	r3, #1
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2288      	movs	r2, #136	@ 0x88
 80030ae:	2120      	movs	r1, #32
 80030b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2284      	movs	r2, #132	@ 0x84
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e060      	b.n	8003180 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d146      	bne.n	800315a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	03d1      	lsls	r1, r2, #15
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <UART_CheckIdleState+0x14c>)
 80030d6:	9200      	str	r2, [sp, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	f000 f859 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d03b      	beq.n	800315a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030e2:	f3ef 8310 	mrs	r3, PRIMASK
 80030e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80030e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4922      	ldr	r1, [pc, #136]	@ (800318c <UART_CheckIdleState+0x150>)
 8003104:	400a      	ands	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003114:	f3ef 8310 	mrs	r3, PRIMASK
 8003118:	61bb      	str	r3, [r7, #24]
  return(result);
 800311a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	438a      	bics	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	228c      	movs	r2, #140	@ 0x8c
 800314a:	2120      	movs	r1, #32
 800314c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2284      	movs	r2, #132	@ 0x84
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e012      	b.n	8003180 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2288      	movs	r2, #136	@ 0x88
 800315e:	2120      	movs	r1, #32
 8003160:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	228c      	movs	r2, #140	@ 0x8c
 8003166:	2120      	movs	r1, #32
 8003168:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2284      	movs	r2, #132	@ 0x84
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b010      	add	sp, #64	@ 0x40
 8003186:	bd80      	pop	{r7, pc}
 8003188:	01ffffff 	.word	0x01ffffff
 800318c:	fffffedf 	.word	0xfffffedf

08003190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a0:	e04b      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3301      	adds	r3, #1
 80031a6:	d048      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7fd ff62 	bl	8001070 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <UART_WaitOnFlagUntilTimeout+0x2e>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04b      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d035      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2208      	movs	r2, #8
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d111      	bne.n	8003200 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2208      	movs	r2, #8
 80031e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 f83c 	bl	8003264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2290      	movs	r2, #144	@ 0x90
 80031f0:	2108      	movs	r1, #8
 80031f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2284      	movs	r2, #132	@ 0x84
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e02c      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	401a      	ands	r2, r3
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	429a      	cmp	r2, r3
 8003212:	d112      	bne.n	800323a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 f81f 	bl	8003264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2290      	movs	r2, #144	@ 0x90
 800322a:	2120      	movs	r1, #32
 800322c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2284      	movs	r2, #132	@ 0x84
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e00f      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	425a      	negs	r2, r3
 800324a:	4153      	adcs	r3, r2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	001a      	movs	r2, r3
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d0a4      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	@ 0x38
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800326c:	f3ef 8310 	mrs	r3, PRIMASK
 8003270:	617b      	str	r3, [r7, #20]
  return(result);
 8003272:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003274:	637b      	str	r3, [r7, #52]	@ 0x34
 8003276:	2301      	movs	r3, #1
 8003278:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4926      	ldr	r1, [pc, #152]	@ (8003328 <UART_EndRxTransfer+0xc4>)
 800328e:	400a      	ands	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f383 8810 	msr	PRIMASK, r3
}
 800329c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	623b      	str	r3, [r7, #32]
  return(result);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	491b      	ldr	r1, [pc, #108]	@ (800332c <UART_EndRxTransfer+0xc8>)
 80032c0:	400a      	ands	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d118      	bne.n	800330a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032d8:	f3ef 8310 	mrs	r3, PRIMASK
 80032dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80032de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e2:	2301      	movs	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2110      	movs	r1, #16
 80032fa:	438a      	bics	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	228c      	movs	r2, #140	@ 0x8c
 800330e:	2120      	movs	r1, #32
 8003310:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b00e      	add	sp, #56	@ 0x38
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	fffffedf 	.word	0xfffffedf
 800332c:	effffffe 	.word	0xeffffffe

08003330 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2284      	movs	r2, #132	@ 0x84
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_UARTEx_DisableFifoMode+0x16>
 8003342:	2302      	movs	r3, #2
 8003344:	e027      	b.n	8003396 <HAL_UARTEx_DisableFifoMode+0x66>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2284      	movs	r2, #132	@ 0x84
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2288      	movs	r2, #136	@ 0x88
 8003352:	2124      	movs	r1, #36	@ 0x24
 8003354:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	438a      	bics	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2288      	movs	r2, #136	@ 0x88
 8003388:	2120      	movs	r1, #32
 800338a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2284      	movs	r2, #132	@ 0x84
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b004      	add	sp, #16
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	dfffffff 	.word	0xdfffffff

080033a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2284      	movs	r2, #132	@ 0x84
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e02e      	b.n	800341a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2284      	movs	r2, #132	@ 0x84
 80033c0:	2101      	movs	r1, #1
 80033c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2288      	movs	r2, #136	@ 0x88
 80033c8:	2124      	movs	r1, #36	@ 0x24
 80033ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	08d9      	lsrs	r1, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f854 	bl	80034a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2288      	movs	r2, #136	@ 0x88
 800340c:	2120      	movs	r1, #32
 800340e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2284      	movs	r2, #132	@ 0x84
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2284      	movs	r2, #132	@ 0x84
 8003432:	5c9b      	ldrb	r3, [r3, r2]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003438:	2302      	movs	r3, #2
 800343a:	e02f      	b.n	800349c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2284      	movs	r2, #132	@ 0x84
 8003440:	2101      	movs	r1, #1
 8003442:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2288      	movs	r2, #136	@ 0x88
 8003448:	2124      	movs	r1, #36	@ 0x24
 800344a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2101      	movs	r1, #1
 8003460:	438a      	bics	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f813 	bl	80034a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2288      	movs	r2, #136	@ 0x88
 800348e:	2120      	movs	r1, #32
 8003490:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2284      	movs	r2, #132	@ 0x84
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	f1ffffff 	.word	0xf1ffffff

080034a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	226a      	movs	r2, #106	@ 0x6a
 80034bc:	2101      	movs	r1, #1
 80034be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2268      	movs	r2, #104	@ 0x68
 80034c4:	2101      	movs	r1, #1
 80034c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034c8:	e043      	b.n	8003552 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034ca:	260f      	movs	r6, #15
 80034cc:	19bb      	adds	r3, r7, r6
 80034ce:	2208      	movs	r2, #8
 80034d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034d2:	200e      	movs	r0, #14
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	2208      	movs	r2, #8
 80034d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	0e5b      	lsrs	r3, r3, #25
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	240d      	movs	r4, #13
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2107      	movs	r1, #7
 80034ea:	400a      	ands	r2, r1
 80034ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	0f5b      	lsrs	r3, r3, #29
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	250c      	movs	r5, #12
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	2107      	movs	r1, #7
 80034fe:	400a      	ands	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003502:	183b      	adds	r3, r7, r0
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	197a      	adds	r2, r7, r5
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	4914      	ldr	r1, [pc, #80]	@ (800355c <UARTEx_SetNbDataToProcess+0xb4>)
 800350c:	5c8a      	ldrb	r2, [r1, r2]
 800350e:	435a      	muls	r2, r3
 8003510:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003512:	197b      	adds	r3, r7, r5
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <UARTEx_SetNbDataToProcess+0xb8>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800351a:	0019      	movs	r1, r3
 800351c:	f7fc fe90 	bl	8000240 <__divsi3>
 8003520:	0003      	movs	r3, r0
 8003522:	b299      	uxth	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	226a      	movs	r2, #106	@ 0x6a
 8003528:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800352a:	19bb      	adds	r3, r7, r6
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	193a      	adds	r2, r7, r4
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	490a      	ldr	r1, [pc, #40]	@ (800355c <UARTEx_SetNbDataToProcess+0xb4>)
 8003534:	5c8a      	ldrb	r2, [r1, r2]
 8003536:	435a      	muls	r2, r3
 8003538:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800353a:	193b      	adds	r3, r7, r4
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <UARTEx_SetNbDataToProcess+0xb8>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003542:	0019      	movs	r1, r3
 8003544:	f7fc fe7c 	bl	8000240 <__divsi3>
 8003548:	0003      	movs	r3, r0
 800354a:	b299      	uxth	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2268      	movs	r2, #104	@ 0x68
 8003550:	5299      	strh	r1, [r3, r2]
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b005      	add	sp, #20
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	08003f60 	.word	0x08003f60
 8003560:	08003f68 	.word	0x08003f68

08003564 <siprintf>:
 8003564:	b40e      	push	{r1, r2, r3}
 8003566:	b500      	push	{lr}
 8003568:	490b      	ldr	r1, [pc, #44]	@ (8003598 <siprintf+0x34>)
 800356a:	b09c      	sub	sp, #112	@ 0x70
 800356c:	ab1d      	add	r3, sp, #116	@ 0x74
 800356e:	9002      	str	r0, [sp, #8]
 8003570:	9006      	str	r0, [sp, #24]
 8003572:	9107      	str	r1, [sp, #28]
 8003574:	9104      	str	r1, [sp, #16]
 8003576:	4809      	ldr	r0, [pc, #36]	@ (800359c <siprintf+0x38>)
 8003578:	4909      	ldr	r1, [pc, #36]	@ (80035a0 <siprintf+0x3c>)
 800357a:	cb04      	ldmia	r3!, {r2}
 800357c:	9105      	str	r1, [sp, #20]
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	a902      	add	r1, sp, #8
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f000 f99e 	bl	80038c4 <_svfiprintf_r>
 8003588:	2200      	movs	r2, #0
 800358a:	9b02      	ldr	r3, [sp, #8]
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	b01c      	add	sp, #112	@ 0x70
 8003590:	bc08      	pop	{r3}
 8003592:	b003      	add	sp, #12
 8003594:	4718      	bx	r3
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	7fffffff 	.word	0x7fffffff
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	ffff0208 	.word	0xffff0208

080035a4 <memset>:
 80035a4:	0003      	movs	r3, r0
 80035a6:	1882      	adds	r2, r0, r2
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d100      	bne.n	80035ae <memset+0xa>
 80035ac:	4770      	bx	lr
 80035ae:	7019      	strb	r1, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	e7f9      	b.n	80035a8 <memset+0x4>

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	@ (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	2600      	movs	r6, #0
 80035c4:	4c0c      	ldr	r4, [pc, #48]	@ (80035f8 <__libc_init_array+0x38>)
 80035c6:	4d0d      	ldr	r5, [pc, #52]	@ (80035fc <__libc_init_array+0x3c>)
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	2600      	movs	r6, #0
 80035d2:	f000 fc65 	bl	8003ea0 <_init>
 80035d6:	4c0a      	ldr	r4, [pc, #40]	@ (8003600 <__libc_init_array+0x40>)
 80035d8:	4d0a      	ldr	r5, [pc, #40]	@ (8003604 <__libc_init_array+0x44>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	00b3      	lsls	r3, r6, #2
 80035e6:	58eb      	ldr	r3, [r5, r3]
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	00b3      	lsls	r3, r6, #2
 80035f0:	58eb      	ldr	r3, [r5, r3]
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	08003fa4 	.word	0x08003fa4
 80035fc:	08003fa4 	.word	0x08003fa4
 8003600:	08003fa8 	.word	0x08003fa8
 8003604:	08003fa4 	.word	0x08003fa4

08003608 <__retarget_lock_acquire_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_release_recursive>:
 800360a:	4770      	bx	lr

0800360c <_free_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	0005      	movs	r5, r0
 8003610:	1e0c      	subs	r4, r1, #0
 8003612:	d010      	beq.n	8003636 <_free_r+0x2a>
 8003614:	3c04      	subs	r4, #4
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	da00      	bge.n	800361e <_free_r+0x12>
 800361c:	18e4      	adds	r4, r4, r3
 800361e:	0028      	movs	r0, r5
 8003620:	f000 f8e0 	bl	80037e4 <__malloc_lock>
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <_free_r+0x90>)
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <_free_r+0x2c>
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	6014      	str	r4, [r2, #0]
 8003630:	0028      	movs	r0, r5
 8003632:	f000 f8df 	bl	80037f4 <__malloc_unlock>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	42a3      	cmp	r3, r4
 800363a:	d908      	bls.n	800364e <_free_r+0x42>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	1821      	adds	r1, r4, r0
 8003640:	428b      	cmp	r3, r1
 8003642:	d1f3      	bne.n	800362c <_free_r+0x20>
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	1809      	adds	r1, r1, r0
 800364a:	6021      	str	r1, [r4, #0]
 800364c:	e7ee      	b.n	800362c <_free_r+0x20>
 800364e:	001a      	movs	r2, r3
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <_free_r+0x4e>
 8003656:	42a3      	cmp	r3, r4
 8003658:	d9f9      	bls.n	800364e <_free_r+0x42>
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	1850      	adds	r0, r2, r1
 800365e:	42a0      	cmp	r0, r4
 8003660:	d10b      	bne.n	800367a <_free_r+0x6e>
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	1809      	adds	r1, r1, r0
 8003666:	1850      	adds	r0, r2, r1
 8003668:	6011      	str	r1, [r2, #0]
 800366a:	4283      	cmp	r3, r0
 800366c:	d1e0      	bne.n	8003630 <_free_r+0x24>
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	1841      	adds	r1, r0, r1
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	6053      	str	r3, [r2, #4]
 8003678:	e7da      	b.n	8003630 <_free_r+0x24>
 800367a:	42a0      	cmp	r0, r4
 800367c:	d902      	bls.n	8003684 <_free_r+0x78>
 800367e:	230c      	movs	r3, #12
 8003680:	602b      	str	r3, [r5, #0]
 8003682:	e7d5      	b.n	8003630 <_free_r+0x24>
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	1821      	adds	r1, r4, r0
 8003688:	428b      	cmp	r3, r1
 800368a:	d103      	bne.n	8003694 <_free_r+0x88>
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	1809      	adds	r1, r1, r0
 8003692:	6021      	str	r1, [r4, #0]
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6054      	str	r4, [r2, #4]
 8003698:	e7ca      	b.n	8003630 <_free_r+0x24>
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	200002c8 	.word	0x200002c8

080036a0 <sbrk_aligned>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	4e0f      	ldr	r6, [pc, #60]	@ (80036e0 <sbrk_aligned+0x40>)
 80036a4:	000d      	movs	r5, r1
 80036a6:	6831      	ldr	r1, [r6, #0]
 80036a8:	0004      	movs	r4, r0
 80036aa:	2900      	cmp	r1, #0
 80036ac:	d102      	bne.n	80036b4 <sbrk_aligned+0x14>
 80036ae:	f000 fb99 	bl	8003de4 <_sbrk_r>
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	0029      	movs	r1, r5
 80036b6:	0020      	movs	r0, r4
 80036b8:	f000 fb94 	bl	8003de4 <_sbrk_r>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d103      	bne.n	80036c8 <sbrk_aligned+0x28>
 80036c0:	2501      	movs	r5, #1
 80036c2:	426d      	negs	r5, r5
 80036c4:	0028      	movs	r0, r5
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	2303      	movs	r3, #3
 80036ca:	1cc5      	adds	r5, r0, #3
 80036cc:	439d      	bics	r5, r3
 80036ce:	42a8      	cmp	r0, r5
 80036d0:	d0f8      	beq.n	80036c4 <sbrk_aligned+0x24>
 80036d2:	1a29      	subs	r1, r5, r0
 80036d4:	0020      	movs	r0, r4
 80036d6:	f000 fb85 	bl	8003de4 <_sbrk_r>
 80036da:	3001      	adds	r0, #1
 80036dc:	d1f2      	bne.n	80036c4 <sbrk_aligned+0x24>
 80036de:	e7ef      	b.n	80036c0 <sbrk_aligned+0x20>
 80036e0:	200002c4 	.word	0x200002c4

080036e4 <_malloc_r>:
 80036e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e6:	2203      	movs	r2, #3
 80036e8:	1ccb      	adds	r3, r1, #3
 80036ea:	4393      	bics	r3, r2
 80036ec:	3308      	adds	r3, #8
 80036ee:	0005      	movs	r5, r0
 80036f0:	001f      	movs	r7, r3
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d234      	bcs.n	8003760 <_malloc_r+0x7c>
 80036f6:	270c      	movs	r7, #12
 80036f8:	42b9      	cmp	r1, r7
 80036fa:	d833      	bhi.n	8003764 <_malloc_r+0x80>
 80036fc:	0028      	movs	r0, r5
 80036fe:	f000 f871 	bl	80037e4 <__malloc_lock>
 8003702:	4e37      	ldr	r6, [pc, #220]	@ (80037e0 <_malloc_r+0xfc>)
 8003704:	6833      	ldr	r3, [r6, #0]
 8003706:	001c      	movs	r4, r3
 8003708:	2c00      	cmp	r4, #0
 800370a:	d12f      	bne.n	800376c <_malloc_r+0x88>
 800370c:	0039      	movs	r1, r7
 800370e:	0028      	movs	r0, r5
 8003710:	f7ff ffc6 	bl	80036a0 <sbrk_aligned>
 8003714:	0004      	movs	r4, r0
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d15f      	bne.n	80037da <_malloc_r+0xf6>
 800371a:	6834      	ldr	r4, [r6, #0]
 800371c:	9400      	str	r4, [sp, #0]
 800371e:	9b00      	ldr	r3, [sp, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d14a      	bne.n	80037ba <_malloc_r+0xd6>
 8003724:	2c00      	cmp	r4, #0
 8003726:	d052      	beq.n	80037ce <_malloc_r+0xea>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	0028      	movs	r0, r5
 800372c:	18e3      	adds	r3, r4, r3
 800372e:	9900      	ldr	r1, [sp, #0]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	f000 fb57 	bl	8003de4 <_sbrk_r>
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	4283      	cmp	r3, r0
 800373a:	d148      	bne.n	80037ce <_malloc_r+0xea>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	0028      	movs	r0, r5
 8003740:	1aff      	subs	r7, r7, r3
 8003742:	0039      	movs	r1, r7
 8003744:	f7ff ffac 	bl	80036a0 <sbrk_aligned>
 8003748:	3001      	adds	r0, #1
 800374a:	d040      	beq.n	80037ce <_malloc_r+0xea>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	19db      	adds	r3, r3, r7
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	6833      	ldr	r3, [r6, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	2a00      	cmp	r2, #0
 8003758:	d133      	bne.n	80037c2 <_malloc_r+0xde>
 800375a:	9b00      	ldr	r3, [sp, #0]
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	e019      	b.n	8003794 <_malloc_r+0xb0>
 8003760:	2b00      	cmp	r3, #0
 8003762:	dac9      	bge.n	80036f8 <_malloc_r+0x14>
 8003764:	230c      	movs	r3, #12
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	2000      	movs	r0, #0
 800376a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	1bc9      	subs	r1, r1, r7
 8003770:	d420      	bmi.n	80037b4 <_malloc_r+0xd0>
 8003772:	290b      	cmp	r1, #11
 8003774:	d90a      	bls.n	800378c <_malloc_r+0xa8>
 8003776:	19e2      	adds	r2, r4, r7
 8003778:	6027      	str	r7, [r4, #0]
 800377a:	42a3      	cmp	r3, r4
 800377c:	d104      	bne.n	8003788 <_malloc_r+0xa4>
 800377e:	6032      	str	r2, [r6, #0]
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	e005      	b.n	8003794 <_malloc_r+0xb0>
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e7f9      	b.n	8003780 <_malloc_r+0x9c>
 800378c:	6862      	ldr	r2, [r4, #4]
 800378e:	42a3      	cmp	r3, r4
 8003790:	d10e      	bne.n	80037b0 <_malloc_r+0xcc>
 8003792:	6032      	str	r2, [r6, #0]
 8003794:	0028      	movs	r0, r5
 8003796:	f000 f82d 	bl	80037f4 <__malloc_unlock>
 800379a:	0020      	movs	r0, r4
 800379c:	2207      	movs	r2, #7
 800379e:	300b      	adds	r0, #11
 80037a0:	1d23      	adds	r3, r4, #4
 80037a2:	4390      	bics	r0, r2
 80037a4:	1ac2      	subs	r2, r0, r3
 80037a6:	4298      	cmp	r0, r3
 80037a8:	d0df      	beq.n	800376a <_malloc_r+0x86>
 80037aa:	1a1b      	subs	r3, r3, r0
 80037ac:	50a3      	str	r3, [r4, r2]
 80037ae:	e7dc      	b.n	800376a <_malloc_r+0x86>
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e7ef      	b.n	8003794 <_malloc_r+0xb0>
 80037b4:	0023      	movs	r3, r4
 80037b6:	6864      	ldr	r4, [r4, #4]
 80037b8:	e7a6      	b.n	8003708 <_malloc_r+0x24>
 80037ba:	9c00      	ldr	r4, [sp, #0]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	e7ad      	b.n	800371e <_malloc_r+0x3a>
 80037c2:	001a      	movs	r2, r3
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	d1fb      	bne.n	80037c2 <_malloc_r+0xde>
 80037ca:	2300      	movs	r3, #0
 80037cc:	e7da      	b.n	8003784 <_malloc_r+0xa0>
 80037ce:	230c      	movs	r3, #12
 80037d0:	0028      	movs	r0, r5
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	f000 f80e 	bl	80037f4 <__malloc_unlock>
 80037d8:	e7c6      	b.n	8003768 <_malloc_r+0x84>
 80037da:	6007      	str	r7, [r0, #0]
 80037dc:	e7da      	b.n	8003794 <_malloc_r+0xb0>
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	200002c8 	.word	0x200002c8

080037e4 <__malloc_lock>:
 80037e4:	b510      	push	{r4, lr}
 80037e6:	4802      	ldr	r0, [pc, #8]	@ (80037f0 <__malloc_lock+0xc>)
 80037e8:	f7ff ff0e 	bl	8003608 <__retarget_lock_acquire_recursive>
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	200002c0 	.word	0x200002c0

080037f4 <__malloc_unlock>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4802      	ldr	r0, [pc, #8]	@ (8003800 <__malloc_unlock+0xc>)
 80037f8:	f7ff ff07 	bl	800360a <__retarget_lock_release_recursive>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	200002c0 	.word	0x200002c0

08003804 <__ssputs_r>:
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	688e      	ldr	r6, [r1, #8]
 8003808:	b085      	sub	sp, #20
 800380a:	001f      	movs	r7, r3
 800380c:	000c      	movs	r4, r1
 800380e:	680b      	ldr	r3, [r1, #0]
 8003810:	9002      	str	r0, [sp, #8]
 8003812:	9203      	str	r2, [sp, #12]
 8003814:	42be      	cmp	r6, r7
 8003816:	d830      	bhi.n	800387a <__ssputs_r+0x76>
 8003818:	210c      	movs	r1, #12
 800381a:	5e62      	ldrsh	r2, [r4, r1]
 800381c:	2190      	movs	r1, #144	@ 0x90
 800381e:	00c9      	lsls	r1, r1, #3
 8003820:	420a      	tst	r2, r1
 8003822:	d028      	beq.n	8003876 <__ssputs_r+0x72>
 8003824:	2003      	movs	r0, #3
 8003826:	6921      	ldr	r1, [r4, #16]
 8003828:	1a5b      	subs	r3, r3, r1
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	4343      	muls	r3, r0
 8003830:	9801      	ldr	r0, [sp, #4]
 8003832:	0fdd      	lsrs	r5, r3, #31
 8003834:	18ed      	adds	r5, r5, r3
 8003836:	1c7b      	adds	r3, r7, #1
 8003838:	181b      	adds	r3, r3, r0
 800383a:	106d      	asrs	r5, r5, #1
 800383c:	42ab      	cmp	r3, r5
 800383e:	d900      	bls.n	8003842 <__ssputs_r+0x3e>
 8003840:	001d      	movs	r5, r3
 8003842:	0552      	lsls	r2, r2, #21
 8003844:	d528      	bpl.n	8003898 <__ssputs_r+0x94>
 8003846:	0029      	movs	r1, r5
 8003848:	9802      	ldr	r0, [sp, #8]
 800384a:	f7ff ff4b 	bl	80036e4 <_malloc_r>
 800384e:	1e06      	subs	r6, r0, #0
 8003850:	d02c      	beq.n	80038ac <__ssputs_r+0xa8>
 8003852:	9a01      	ldr	r2, [sp, #4]
 8003854:	6921      	ldr	r1, [r4, #16]
 8003856:	f000 fae2 	bl	8003e1e <memcpy>
 800385a:	89a2      	ldrh	r2, [r4, #12]
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <__ssputs_r+0xbc>)
 800385e:	401a      	ands	r2, r3
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	4313      	orrs	r3, r2
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	6126      	str	r6, [r4, #16]
 800386a:	18f6      	adds	r6, r6, r3
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	003e      	movs	r6, r7
 8003870:	6165      	str	r5, [r4, #20]
 8003872:	1aed      	subs	r5, r5, r3
 8003874:	60a5      	str	r5, [r4, #8]
 8003876:	42be      	cmp	r6, r7
 8003878:	d900      	bls.n	800387c <__ssputs_r+0x78>
 800387a:	003e      	movs	r6, r7
 800387c:	0032      	movs	r2, r6
 800387e:	9903      	ldr	r1, [sp, #12]
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	f000 fa9b 	bl	8003dbc <memmove>
 8003886:	2000      	movs	r0, #0
 8003888:	68a3      	ldr	r3, [r4, #8]
 800388a:	1b9b      	subs	r3, r3, r6
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	199b      	adds	r3, r3, r6
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	b005      	add	sp, #20
 8003896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003898:	002a      	movs	r2, r5
 800389a:	9802      	ldr	r0, [sp, #8]
 800389c:	f000 fac8 	bl	8003e30 <_realloc_r>
 80038a0:	1e06      	subs	r6, r0, #0
 80038a2:	d1e0      	bne.n	8003866 <__ssputs_r+0x62>
 80038a4:	6921      	ldr	r1, [r4, #16]
 80038a6:	9802      	ldr	r0, [sp, #8]
 80038a8:	f7ff feb0 	bl	800360c <_free_r>
 80038ac:	230c      	movs	r3, #12
 80038ae:	2001      	movs	r0, #1
 80038b0:	9a02      	ldr	r2, [sp, #8]
 80038b2:	4240      	negs	r0, r0
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	89a2      	ldrh	r2, [r4, #12]
 80038b8:	3334      	adds	r3, #52	@ 0x34
 80038ba:	4313      	orrs	r3, r2
 80038bc:	81a3      	strh	r3, [r4, #12]
 80038be:	e7e9      	b.n	8003894 <__ssputs_r+0x90>
 80038c0:	fffffb7f 	.word	0xfffffb7f

080038c4 <_svfiprintf_r>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b0a1      	sub	sp, #132	@ 0x84
 80038c8:	9003      	str	r0, [sp, #12]
 80038ca:	001d      	movs	r5, r3
 80038cc:	898b      	ldrh	r3, [r1, #12]
 80038ce:	000f      	movs	r7, r1
 80038d0:	0016      	movs	r6, r2
 80038d2:	061b      	lsls	r3, r3, #24
 80038d4:	d511      	bpl.n	80038fa <_svfiprintf_r+0x36>
 80038d6:	690b      	ldr	r3, [r1, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10e      	bne.n	80038fa <_svfiprintf_r+0x36>
 80038dc:	2140      	movs	r1, #64	@ 0x40
 80038de:	f7ff ff01 	bl	80036e4 <_malloc_r>
 80038e2:	6038      	str	r0, [r7, #0]
 80038e4:	6138      	str	r0, [r7, #16]
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d105      	bne.n	80038f6 <_svfiprintf_r+0x32>
 80038ea:	230c      	movs	r3, #12
 80038ec:	9a03      	ldr	r2, [sp, #12]
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	2001      	movs	r0, #1
 80038f2:	4240      	negs	r0, r0
 80038f4:	e0cf      	b.n	8003a96 <_svfiprintf_r+0x1d2>
 80038f6:	2340      	movs	r3, #64	@ 0x40
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	ac08      	add	r4, sp, #32
 80038fe:	6163      	str	r3, [r4, #20]
 8003900:	3320      	adds	r3, #32
 8003902:	7663      	strb	r3, [r4, #25]
 8003904:	3310      	adds	r3, #16
 8003906:	76a3      	strb	r3, [r4, #26]
 8003908:	9507      	str	r5, [sp, #28]
 800390a:	0035      	movs	r5, r6
 800390c:	782b      	ldrb	r3, [r5, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <_svfiprintf_r+0x52>
 8003912:	2b25      	cmp	r3, #37	@ 0x25
 8003914:	d148      	bne.n	80039a8 <_svfiprintf_r+0xe4>
 8003916:	1bab      	subs	r3, r5, r6
 8003918:	9305      	str	r3, [sp, #20]
 800391a:	42b5      	cmp	r5, r6
 800391c:	d00b      	beq.n	8003936 <_svfiprintf_r+0x72>
 800391e:	0032      	movs	r2, r6
 8003920:	0039      	movs	r1, r7
 8003922:	9803      	ldr	r0, [sp, #12]
 8003924:	f7ff ff6e 	bl	8003804 <__ssputs_r>
 8003928:	3001      	adds	r0, #1
 800392a:	d100      	bne.n	800392e <_svfiprintf_r+0x6a>
 800392c:	e0ae      	b.n	8003a8c <_svfiprintf_r+0x1c8>
 800392e:	6963      	ldr	r3, [r4, #20]
 8003930:	9a05      	ldr	r2, [sp, #20]
 8003932:	189b      	adds	r3, r3, r2
 8003934:	6163      	str	r3, [r4, #20]
 8003936:	782b      	ldrb	r3, [r5, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d100      	bne.n	800393e <_svfiprintf_r+0x7a>
 800393c:	e0a6      	b.n	8003a8c <_svfiprintf_r+0x1c8>
 800393e:	2201      	movs	r2, #1
 8003940:	2300      	movs	r3, #0
 8003942:	4252      	negs	r2, r2
 8003944:	6062      	str	r2, [r4, #4]
 8003946:	a904      	add	r1, sp, #16
 8003948:	3254      	adds	r2, #84	@ 0x54
 800394a:	1852      	adds	r2, r2, r1
 800394c:	1c6e      	adds	r6, r5, #1
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	60e3      	str	r3, [r4, #12]
 8003952:	60a3      	str	r3, [r4, #8]
 8003954:	7013      	strb	r3, [r2, #0]
 8003956:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003958:	4b54      	ldr	r3, [pc, #336]	@ (8003aac <_svfiprintf_r+0x1e8>)
 800395a:	2205      	movs	r2, #5
 800395c:	0018      	movs	r0, r3
 800395e:	7831      	ldrb	r1, [r6, #0]
 8003960:	9305      	str	r3, [sp, #20]
 8003962:	f000 fa51 	bl	8003e08 <memchr>
 8003966:	1c75      	adds	r5, r6, #1
 8003968:	2800      	cmp	r0, #0
 800396a:	d11f      	bne.n	80039ac <_svfiprintf_r+0xe8>
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	06d3      	lsls	r3, r2, #27
 8003970:	d504      	bpl.n	800397c <_svfiprintf_r+0xb8>
 8003972:	2353      	movs	r3, #83	@ 0x53
 8003974:	a904      	add	r1, sp, #16
 8003976:	185b      	adds	r3, r3, r1
 8003978:	2120      	movs	r1, #32
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	0713      	lsls	r3, r2, #28
 800397e:	d504      	bpl.n	800398a <_svfiprintf_r+0xc6>
 8003980:	2353      	movs	r3, #83	@ 0x53
 8003982:	a904      	add	r1, sp, #16
 8003984:	185b      	adds	r3, r3, r1
 8003986:	212b      	movs	r1, #43	@ 0x2b
 8003988:	7019      	strb	r1, [r3, #0]
 800398a:	7833      	ldrb	r3, [r6, #0]
 800398c:	2b2a      	cmp	r3, #42	@ 0x2a
 800398e:	d016      	beq.n	80039be <_svfiprintf_r+0xfa>
 8003990:	0035      	movs	r5, r6
 8003992:	2100      	movs	r1, #0
 8003994:	200a      	movs	r0, #10
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	782a      	ldrb	r2, [r5, #0]
 800399a:	1c6e      	adds	r6, r5, #1
 800399c:	3a30      	subs	r2, #48	@ 0x30
 800399e:	2a09      	cmp	r2, #9
 80039a0:	d950      	bls.n	8003a44 <_svfiprintf_r+0x180>
 80039a2:	2900      	cmp	r1, #0
 80039a4:	d111      	bne.n	80039ca <_svfiprintf_r+0x106>
 80039a6:	e017      	b.n	80039d8 <_svfiprintf_r+0x114>
 80039a8:	3501      	adds	r5, #1
 80039aa:	e7af      	b.n	800390c <_svfiprintf_r+0x48>
 80039ac:	9b05      	ldr	r3, [sp, #20]
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	1ac0      	subs	r0, r0, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	4083      	lsls	r3, r0
 80039b6:	4313      	orrs	r3, r2
 80039b8:	002e      	movs	r6, r5
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	e7cc      	b.n	8003958 <_svfiprintf_r+0x94>
 80039be:	9b07      	ldr	r3, [sp, #28]
 80039c0:	1d19      	adds	r1, r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	9107      	str	r1, [sp, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db01      	blt.n	80039ce <_svfiprintf_r+0x10a>
 80039ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039cc:	e004      	b.n	80039d8 <_svfiprintf_r+0x114>
 80039ce:	425b      	negs	r3, r3
 80039d0:	60e3      	str	r3, [r4, #12]
 80039d2:	2302      	movs	r3, #2
 80039d4:	4313      	orrs	r3, r2
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	782b      	ldrb	r3, [r5, #0]
 80039da:	2b2e      	cmp	r3, #46	@ 0x2e
 80039dc:	d10c      	bne.n	80039f8 <_svfiprintf_r+0x134>
 80039de:	786b      	ldrb	r3, [r5, #1]
 80039e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80039e2:	d134      	bne.n	8003a4e <_svfiprintf_r+0x18a>
 80039e4:	9b07      	ldr	r3, [sp, #28]
 80039e6:	3502      	adds	r5, #2
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	9207      	str	r2, [sp, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da01      	bge.n	80039f6 <_svfiprintf_r+0x132>
 80039f2:	2301      	movs	r3, #1
 80039f4:	425b      	negs	r3, r3
 80039f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80039f8:	4e2d      	ldr	r6, [pc, #180]	@ (8003ab0 <_svfiprintf_r+0x1ec>)
 80039fa:	2203      	movs	r2, #3
 80039fc:	0030      	movs	r0, r6
 80039fe:	7829      	ldrb	r1, [r5, #0]
 8003a00:	f000 fa02 	bl	8003e08 <memchr>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d006      	beq.n	8003a16 <_svfiprintf_r+0x152>
 8003a08:	2340      	movs	r3, #64	@ 0x40
 8003a0a:	1b80      	subs	r0, r0, r6
 8003a0c:	4083      	lsls	r3, r0
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	3501      	adds	r5, #1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	7829      	ldrb	r1, [r5, #0]
 8003a18:	2206      	movs	r2, #6
 8003a1a:	4826      	ldr	r0, [pc, #152]	@ (8003ab4 <_svfiprintf_r+0x1f0>)
 8003a1c:	1c6e      	adds	r6, r5, #1
 8003a1e:	7621      	strb	r1, [r4, #24]
 8003a20:	f000 f9f2 	bl	8003e08 <memchr>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d038      	beq.n	8003a9a <_svfiprintf_r+0x1d6>
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <_svfiprintf_r+0x1f4>)
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d122      	bne.n	8003a74 <_svfiprintf_r+0x1b0>
 8003a2e:	2207      	movs	r2, #7
 8003a30:	9b07      	ldr	r3, [sp, #28]
 8003a32:	3307      	adds	r3, #7
 8003a34:	4393      	bics	r3, r2
 8003a36:	3308      	adds	r3, #8
 8003a38:	9307      	str	r3, [sp, #28]
 8003a3a:	6963      	ldr	r3, [r4, #20]
 8003a3c:	9a04      	ldr	r2, [sp, #16]
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	6163      	str	r3, [r4, #20]
 8003a42:	e762      	b.n	800390a <_svfiprintf_r+0x46>
 8003a44:	4343      	muls	r3, r0
 8003a46:	0035      	movs	r5, r6
 8003a48:	2101      	movs	r1, #1
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	e7a4      	b.n	8003998 <_svfiprintf_r+0xd4>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	200a      	movs	r0, #10
 8003a52:	0019      	movs	r1, r3
 8003a54:	3501      	adds	r5, #1
 8003a56:	6063      	str	r3, [r4, #4]
 8003a58:	782a      	ldrb	r2, [r5, #0]
 8003a5a:	1c6e      	adds	r6, r5, #1
 8003a5c:	3a30      	subs	r2, #48	@ 0x30
 8003a5e:	2a09      	cmp	r2, #9
 8003a60:	d903      	bls.n	8003a6a <_svfiprintf_r+0x1a6>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c8      	beq.n	80039f8 <_svfiprintf_r+0x134>
 8003a66:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a68:	e7c6      	b.n	80039f8 <_svfiprintf_r+0x134>
 8003a6a:	4341      	muls	r1, r0
 8003a6c:	0035      	movs	r5, r6
 8003a6e:	2301      	movs	r3, #1
 8003a70:	1889      	adds	r1, r1, r2
 8003a72:	e7f1      	b.n	8003a58 <_svfiprintf_r+0x194>
 8003a74:	aa07      	add	r2, sp, #28
 8003a76:	9200      	str	r2, [sp, #0]
 8003a78:	0021      	movs	r1, r4
 8003a7a:	003a      	movs	r2, r7
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <_svfiprintf_r+0x1f8>)
 8003a7e:	9803      	ldr	r0, [sp, #12]
 8003a80:	e000      	b.n	8003a84 <_svfiprintf_r+0x1c0>
 8003a82:	bf00      	nop
 8003a84:	9004      	str	r0, [sp, #16]
 8003a86:	9b04      	ldr	r3, [sp, #16]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d1d6      	bne.n	8003a3a <_svfiprintf_r+0x176>
 8003a8c:	89bb      	ldrh	r3, [r7, #12]
 8003a8e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a90:	065b      	lsls	r3, r3, #25
 8003a92:	d500      	bpl.n	8003a96 <_svfiprintf_r+0x1d2>
 8003a94:	e72c      	b.n	80038f0 <_svfiprintf_r+0x2c>
 8003a96:	b021      	add	sp, #132	@ 0x84
 8003a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9a:	aa07      	add	r2, sp, #28
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	0021      	movs	r1, r4
 8003aa0:	003a      	movs	r2, r7
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <_svfiprintf_r+0x1f8>)
 8003aa4:	9803      	ldr	r0, [sp, #12]
 8003aa6:	f000 f87b 	bl	8003ba0 <_printf_i>
 8003aaa:	e7eb      	b.n	8003a84 <_svfiprintf_r+0x1c0>
 8003aac:	08003f70 	.word	0x08003f70
 8003ab0:	08003f76 	.word	0x08003f76
 8003ab4:	08003f7a 	.word	0x08003f7a
 8003ab8:	00000000 	.word	0x00000000
 8003abc:	08003805 	.word	0x08003805

08003ac0 <_printf_common>:
 8003ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ac2:	0016      	movs	r6, r2
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	688a      	ldr	r2, [r1, #8]
 8003ac8:	690b      	ldr	r3, [r1, #16]
 8003aca:	000c      	movs	r4, r1
 8003acc:	9000      	str	r0, [sp, #0]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	da00      	bge.n	8003ad4 <_printf_common+0x14>
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	0022      	movs	r2, r4
 8003ad6:	6033      	str	r3, [r6, #0]
 8003ad8:	3243      	adds	r2, #67	@ 0x43
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	d001      	beq.n	8003ae4 <_printf_common+0x24>
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	069b      	lsls	r3, r3, #26
 8003ae8:	d502      	bpl.n	8003af0 <_printf_common+0x30>
 8003aea:	6833      	ldr	r3, [r6, #0]
 8003aec:	3302      	adds	r3, #2
 8003aee:	6033      	str	r3, [r6, #0]
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	2306      	movs	r3, #6
 8003af4:	0015      	movs	r5, r2
 8003af6:	401d      	ands	r5, r3
 8003af8:	421a      	tst	r2, r3
 8003afa:	d027      	beq.n	8003b4c <_printf_common+0x8c>
 8003afc:	0023      	movs	r3, r4
 8003afe:	3343      	adds	r3, #67	@ 0x43
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	1e5a      	subs	r2, r3, #1
 8003b04:	4193      	sbcs	r3, r2
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	0692      	lsls	r2, r2, #26
 8003b0a:	d430      	bmi.n	8003b6e <_printf_common+0xae>
 8003b0c:	0022      	movs	r2, r4
 8003b0e:	9901      	ldr	r1, [sp, #4]
 8003b10:	9800      	ldr	r0, [sp, #0]
 8003b12:	9d08      	ldr	r5, [sp, #32]
 8003b14:	3243      	adds	r2, #67	@ 0x43
 8003b16:	47a8      	blx	r5
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d025      	beq.n	8003b68 <_printf_common+0xa8>
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	2500      	movs	r5, #0
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d105      	bne.n	8003b34 <_printf_common+0x74>
 8003b28:	6833      	ldr	r3, [r6, #0]
 8003b2a:	68e5      	ldr	r5, [r4, #12]
 8003b2c:	1aed      	subs	r5, r5, r3
 8003b2e:	43eb      	mvns	r3, r5
 8003b30:	17db      	asrs	r3, r3, #31
 8003b32:	401d      	ands	r5, r3
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	dd01      	ble.n	8003b40 <_printf_common+0x80>
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	18ed      	adds	r5, r5, r3
 8003b40:	2600      	movs	r6, #0
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d120      	bne.n	8003b88 <_printf_common+0xc8>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e010      	b.n	8003b6c <_printf_common+0xac>
 8003b4a:	3501      	adds	r5, #1
 8003b4c:	68e3      	ldr	r3, [r4, #12]
 8003b4e:	6832      	ldr	r2, [r6, #0]
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	42ab      	cmp	r3, r5
 8003b54:	ddd2      	ble.n	8003afc <_printf_common+0x3c>
 8003b56:	0022      	movs	r2, r4
 8003b58:	2301      	movs	r3, #1
 8003b5a:	9901      	ldr	r1, [sp, #4]
 8003b5c:	9800      	ldr	r0, [sp, #0]
 8003b5e:	9f08      	ldr	r7, [sp, #32]
 8003b60:	3219      	adds	r2, #25
 8003b62:	47b8      	blx	r7
 8003b64:	3001      	adds	r0, #1
 8003b66:	d1f0      	bne.n	8003b4a <_printf_common+0x8a>
 8003b68:	2001      	movs	r0, #1
 8003b6a:	4240      	negs	r0, r0
 8003b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b6e:	2030      	movs	r0, #48	@ 0x30
 8003b70:	18e1      	adds	r1, r4, r3
 8003b72:	3143      	adds	r1, #67	@ 0x43
 8003b74:	7008      	strb	r0, [r1, #0]
 8003b76:	0021      	movs	r1, r4
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	3145      	adds	r1, #69	@ 0x45
 8003b7c:	7809      	ldrb	r1, [r1, #0]
 8003b7e:	18a2      	adds	r2, r4, r2
 8003b80:	3243      	adds	r2, #67	@ 0x43
 8003b82:	3302      	adds	r3, #2
 8003b84:	7011      	strb	r1, [r2, #0]
 8003b86:	e7c1      	b.n	8003b0c <_printf_common+0x4c>
 8003b88:	0022      	movs	r2, r4
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	9901      	ldr	r1, [sp, #4]
 8003b8e:	9800      	ldr	r0, [sp, #0]
 8003b90:	9f08      	ldr	r7, [sp, #32]
 8003b92:	321a      	adds	r2, #26
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	d0e6      	beq.n	8003b68 <_printf_common+0xa8>
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7d1      	b.n	8003b42 <_printf_common+0x82>
	...

08003ba0 <_printf_i>:
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	b08b      	sub	sp, #44	@ 0x2c
 8003ba4:	9206      	str	r2, [sp, #24]
 8003ba6:	000a      	movs	r2, r1
 8003ba8:	3243      	adds	r2, #67	@ 0x43
 8003baa:	9307      	str	r3, [sp, #28]
 8003bac:	9005      	str	r0, [sp, #20]
 8003bae:	9203      	str	r2, [sp, #12]
 8003bb0:	7e0a      	ldrb	r2, [r1, #24]
 8003bb2:	000c      	movs	r4, r1
 8003bb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003bb6:	2a78      	cmp	r2, #120	@ 0x78
 8003bb8:	d809      	bhi.n	8003bce <_printf_i+0x2e>
 8003bba:	2a62      	cmp	r2, #98	@ 0x62
 8003bbc:	d80b      	bhi.n	8003bd6 <_printf_i+0x36>
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d100      	bne.n	8003bc4 <_printf_i+0x24>
 8003bc2:	e0bc      	b.n	8003d3e <_printf_i+0x19e>
 8003bc4:	497b      	ldr	r1, [pc, #492]	@ (8003db4 <_printf_i+0x214>)
 8003bc6:	9104      	str	r1, [sp, #16]
 8003bc8:	2a58      	cmp	r2, #88	@ 0x58
 8003bca:	d100      	bne.n	8003bce <_printf_i+0x2e>
 8003bcc:	e090      	b.n	8003cf0 <_printf_i+0x150>
 8003bce:	0025      	movs	r5, r4
 8003bd0:	3542      	adds	r5, #66	@ 0x42
 8003bd2:	702a      	strb	r2, [r5, #0]
 8003bd4:	e022      	b.n	8003c1c <_printf_i+0x7c>
 8003bd6:	0010      	movs	r0, r2
 8003bd8:	3863      	subs	r0, #99	@ 0x63
 8003bda:	2815      	cmp	r0, #21
 8003bdc:	d8f7      	bhi.n	8003bce <_printf_i+0x2e>
 8003bde:	f7fc fa9b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003be2:	0016      	.short	0x0016
 8003be4:	fff6001f 	.word	0xfff6001f
 8003be8:	fff6fff6 	.word	0xfff6fff6
 8003bec:	001ffff6 	.word	0x001ffff6
 8003bf0:	fff6fff6 	.word	0xfff6fff6
 8003bf4:	fff6fff6 	.word	0xfff6fff6
 8003bf8:	003600a1 	.word	0x003600a1
 8003bfc:	fff60080 	.word	0xfff60080
 8003c00:	00b2fff6 	.word	0x00b2fff6
 8003c04:	0036fff6 	.word	0x0036fff6
 8003c08:	fff6fff6 	.word	0xfff6fff6
 8003c0c:	0084      	.short	0x0084
 8003c0e:	0025      	movs	r5, r4
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	3542      	adds	r5, #66	@ 0x42
 8003c14:	1d11      	adds	r1, r2, #4
 8003c16:	6019      	str	r1, [r3, #0]
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	702b      	strb	r3, [r5, #0]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0a0      	b.n	8003d62 <_printf_i+0x1c2>
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	6809      	ldr	r1, [r1, #0]
 8003c24:	1d02      	adds	r2, r0, #4
 8003c26:	060d      	lsls	r5, r1, #24
 8003c28:	d50b      	bpl.n	8003c42 <_printf_i+0xa2>
 8003c2a:	6806      	ldr	r6, [r0, #0]
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	da03      	bge.n	8003c3a <_printf_i+0x9a>
 8003c32:	232d      	movs	r3, #45	@ 0x2d
 8003c34:	9a03      	ldr	r2, [sp, #12]
 8003c36:	4276      	negs	r6, r6
 8003c38:	7013      	strb	r3, [r2, #0]
 8003c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8003db4 <_printf_i+0x214>)
 8003c3c:	270a      	movs	r7, #10
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	e018      	b.n	8003c74 <_printf_i+0xd4>
 8003c42:	6806      	ldr	r6, [r0, #0]
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	0649      	lsls	r1, r1, #25
 8003c48:	d5f1      	bpl.n	8003c2e <_printf_i+0x8e>
 8003c4a:	b236      	sxth	r6, r6
 8003c4c:	e7ef      	b.n	8003c2e <_printf_i+0x8e>
 8003c4e:	6808      	ldr	r0, [r1, #0]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	c940      	ldmia	r1!, {r6}
 8003c54:	0605      	lsls	r5, r0, #24
 8003c56:	d402      	bmi.n	8003c5e <_printf_i+0xbe>
 8003c58:	0640      	lsls	r0, r0, #25
 8003c5a:	d500      	bpl.n	8003c5e <_printf_i+0xbe>
 8003c5c:	b2b6      	uxth	r6, r6
 8003c5e:	6019      	str	r1, [r3, #0]
 8003c60:	4b54      	ldr	r3, [pc, #336]	@ (8003db4 <_printf_i+0x214>)
 8003c62:	270a      	movs	r7, #10
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	2a6f      	cmp	r2, #111	@ 0x6f
 8003c68:	d100      	bne.n	8003c6c <_printf_i+0xcc>
 8003c6a:	3f02      	subs	r7, #2
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	2200      	movs	r2, #0
 8003c70:	3343      	adds	r3, #67	@ 0x43
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	60a3      	str	r3, [r4, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db03      	blt.n	8003c84 <_printf_i+0xe4>
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	438a      	bics	r2, r1
 8003c82:	6022      	str	r2, [r4, #0]
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	d102      	bne.n	8003c8e <_printf_i+0xee>
 8003c88:	9d03      	ldr	r5, [sp, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <_printf_i+0x108>
 8003c8e:	9d03      	ldr	r5, [sp, #12]
 8003c90:	0030      	movs	r0, r6
 8003c92:	0039      	movs	r1, r7
 8003c94:	f7fc fad0 	bl	8000238 <__aeabi_uidivmod>
 8003c98:	9b04      	ldr	r3, [sp, #16]
 8003c9a:	3d01      	subs	r5, #1
 8003c9c:	5c5b      	ldrb	r3, [r3, r1]
 8003c9e:	702b      	strb	r3, [r5, #0]
 8003ca0:	0033      	movs	r3, r6
 8003ca2:	0006      	movs	r6, r0
 8003ca4:	429f      	cmp	r7, r3
 8003ca6:	d9f3      	bls.n	8003c90 <_printf_i+0xf0>
 8003ca8:	2f08      	cmp	r7, #8
 8003caa:	d109      	bne.n	8003cc0 <_printf_i+0x120>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d506      	bpl.n	8003cc0 <_printf_i+0x120>
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	dc02      	bgt.n	8003cc0 <_printf_i+0x120>
 8003cba:	2330      	movs	r3, #48	@ 0x30
 8003cbc:	3d01      	subs	r5, #1
 8003cbe:	702b      	strb	r3, [r5, #0]
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	1b5b      	subs	r3, r3, r5
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	0021      	movs	r1, r4
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	9805      	ldr	r0, [sp, #20]
 8003cce:	9b06      	ldr	r3, [sp, #24]
 8003cd0:	aa09      	add	r2, sp, #36	@ 0x24
 8003cd2:	f7ff fef5 	bl	8003ac0 <_printf_common>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d148      	bne.n	8003d6c <_printf_i+0x1cc>
 8003cda:	2001      	movs	r0, #1
 8003cdc:	4240      	negs	r0, r0
 8003cde:	b00b      	add	sp, #44	@ 0x2c
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	6809      	ldr	r1, [r1, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	2278      	movs	r2, #120	@ 0x78
 8003cec:	4932      	ldr	r1, [pc, #200]	@ (8003db8 <_printf_i+0x218>)
 8003cee:	9104      	str	r1, [sp, #16]
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	3145      	adds	r1, #69	@ 0x45
 8003cf4:	700a      	strb	r2, [r1, #0]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	c940      	ldmia	r1!, {r6}
 8003cfc:	0610      	lsls	r0, r2, #24
 8003cfe:	d402      	bmi.n	8003d06 <_printf_i+0x166>
 8003d00:	0650      	lsls	r0, r2, #25
 8003d02:	d500      	bpl.n	8003d06 <_printf_i+0x166>
 8003d04:	b2b6      	uxth	r6, r6
 8003d06:	6019      	str	r1, [r3, #0]
 8003d08:	07d3      	lsls	r3, r2, #31
 8003d0a:	d502      	bpl.n	8003d12 <_printf_i+0x172>
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d001      	beq.n	8003d1a <_printf_i+0x17a>
 8003d16:	2710      	movs	r7, #16
 8003d18:	e7a8      	b.n	8003c6c <_printf_i+0xcc>
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	4393      	bics	r3, r2
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e7f8      	b.n	8003d16 <_printf_i+0x176>
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	680d      	ldr	r5, [r1, #0]
 8003d28:	1d10      	adds	r0, r2, #4
 8003d2a:	6949      	ldr	r1, [r1, #20]
 8003d2c:	6018      	str	r0, [r3, #0]
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	062e      	lsls	r6, r5, #24
 8003d32:	d501      	bpl.n	8003d38 <_printf_i+0x198>
 8003d34:	6019      	str	r1, [r3, #0]
 8003d36:	e002      	b.n	8003d3e <_printf_i+0x19e>
 8003d38:	066d      	lsls	r5, r5, #25
 8003d3a:	d5fb      	bpl.n	8003d34 <_printf_i+0x194>
 8003d3c:	8019      	strh	r1, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9d03      	ldr	r5, [sp, #12]
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	e7bf      	b.n	8003cc6 <_printf_i+0x126>
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	1d11      	adds	r1, r2, #4
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	6815      	ldr	r5, [r2, #0]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	0028      	movs	r0, r5
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	f000 f858 	bl	8003e08 <memchr>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d001      	beq.n	8003d60 <_printf_i+0x1c0>
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9a03      	ldr	r2, [sp, #12]
 8003d68:	7013      	strb	r3, [r2, #0]
 8003d6a:	e7ac      	b.n	8003cc6 <_printf_i+0x126>
 8003d6c:	002a      	movs	r2, r5
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	9906      	ldr	r1, [sp, #24]
 8003d72:	9805      	ldr	r0, [sp, #20]
 8003d74:	9d07      	ldr	r5, [sp, #28]
 8003d76:	47a8      	blx	r5
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0ae      	beq.n	8003cda <_printf_i+0x13a>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	079b      	lsls	r3, r3, #30
 8003d80:	d415      	bmi.n	8003dae <_printf_i+0x20e>
 8003d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d84:	68e0      	ldr	r0, [r4, #12]
 8003d86:	4298      	cmp	r0, r3
 8003d88:	daa9      	bge.n	8003cde <_printf_i+0x13e>
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	e7a7      	b.n	8003cde <_printf_i+0x13e>
 8003d8e:	0022      	movs	r2, r4
 8003d90:	2301      	movs	r3, #1
 8003d92:	9906      	ldr	r1, [sp, #24]
 8003d94:	9805      	ldr	r0, [sp, #20]
 8003d96:	9e07      	ldr	r6, [sp, #28]
 8003d98:	3219      	adds	r2, #25
 8003d9a:	47b0      	blx	r6
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d09c      	beq.n	8003cda <_printf_i+0x13a>
 8003da0:	3501      	adds	r5, #1
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	dcf0      	bgt.n	8003d8e <_printf_i+0x1ee>
 8003dac:	e7e9      	b.n	8003d82 <_printf_i+0x1e2>
 8003dae:	2500      	movs	r5, #0
 8003db0:	e7f7      	b.n	8003da2 <_printf_i+0x202>
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	08003f81 	.word	0x08003f81
 8003db8:	08003f92 	.word	0x08003f92

08003dbc <memmove>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4288      	cmp	r0, r1
 8003dc0:	d806      	bhi.n	8003dd0 <memmove+0x14>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d008      	beq.n	8003dda <memmove+0x1e>
 8003dc8:	5ccc      	ldrb	r4, [r1, r3]
 8003dca:	54c4      	strb	r4, [r0, r3]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	e7f9      	b.n	8003dc4 <memmove+0x8>
 8003dd0:	188b      	adds	r3, r1, r2
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	d2f5      	bcs.n	8003dc2 <memmove+0x6>
 8003dd6:	3a01      	subs	r2, #1
 8003dd8:	d200      	bcs.n	8003ddc <memmove+0x20>
 8003dda:	bd10      	pop	{r4, pc}
 8003ddc:	5c8b      	ldrb	r3, [r1, r2]
 8003dde:	5483      	strb	r3, [r0, r2]
 8003de0:	e7f9      	b.n	8003dd6 <memmove+0x1a>
	...

08003de4 <_sbrk_r>:
 8003de4:	2300      	movs	r3, #0
 8003de6:	b570      	push	{r4, r5, r6, lr}
 8003de8:	4d06      	ldr	r5, [pc, #24]	@ (8003e04 <_sbrk_r+0x20>)
 8003dea:	0004      	movs	r4, r0
 8003dec:	0008      	movs	r0, r1
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	f7fd f860 	bl	8000eb4 <_sbrk>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d103      	bne.n	8003e00 <_sbrk_r+0x1c>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d000      	beq.n	8003e00 <_sbrk_r+0x1c>
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	bd70      	pop	{r4, r5, r6, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	200002bc 	.word	0x200002bc

08003e08 <memchr>:
 8003e08:	b2c9      	uxtb	r1, r1
 8003e0a:	1882      	adds	r2, r0, r2
 8003e0c:	4290      	cmp	r0, r2
 8003e0e:	d101      	bne.n	8003e14 <memchr+0xc>
 8003e10:	2000      	movs	r0, #0
 8003e12:	4770      	bx	lr
 8003e14:	7803      	ldrb	r3, [r0, #0]
 8003e16:	428b      	cmp	r3, r1
 8003e18:	d0fb      	beq.n	8003e12 <memchr+0xa>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	e7f6      	b.n	8003e0c <memchr+0x4>

08003e1e <memcpy>:
 8003e1e:	2300      	movs	r3, #0
 8003e20:	b510      	push	{r4, lr}
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d100      	bne.n	8003e28 <memcpy+0xa>
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	5ccc      	ldrb	r4, [r1, r3]
 8003e2a:	54c4      	strb	r4, [r0, r3]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	e7f8      	b.n	8003e22 <memcpy+0x4>

08003e30 <_realloc_r>:
 8003e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e32:	0006      	movs	r6, r0
 8003e34:	000c      	movs	r4, r1
 8003e36:	0015      	movs	r5, r2
 8003e38:	2900      	cmp	r1, #0
 8003e3a:	d105      	bne.n	8003e48 <_realloc_r+0x18>
 8003e3c:	0011      	movs	r1, r2
 8003e3e:	f7ff fc51 	bl	80036e4 <_malloc_r>
 8003e42:	0004      	movs	r4, r0
 8003e44:	0020      	movs	r0, r4
 8003e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d103      	bne.n	8003e54 <_realloc_r+0x24>
 8003e4c:	f7ff fbde 	bl	800360c <_free_r>
 8003e50:	2400      	movs	r4, #0
 8003e52:	e7f7      	b.n	8003e44 <_realloc_r+0x14>
 8003e54:	f000 f81b 	bl	8003e8e <_malloc_usable_size_r>
 8003e58:	0007      	movs	r7, r0
 8003e5a:	4285      	cmp	r5, r0
 8003e5c:	d802      	bhi.n	8003e64 <_realloc_r+0x34>
 8003e5e:	0843      	lsrs	r3, r0, #1
 8003e60:	42ab      	cmp	r3, r5
 8003e62:	d3ef      	bcc.n	8003e44 <_realloc_r+0x14>
 8003e64:	0029      	movs	r1, r5
 8003e66:	0030      	movs	r0, r6
 8003e68:	f7ff fc3c 	bl	80036e4 <_malloc_r>
 8003e6c:	9001      	str	r0, [sp, #4]
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d0ee      	beq.n	8003e50 <_realloc_r+0x20>
 8003e72:	002a      	movs	r2, r5
 8003e74:	42bd      	cmp	r5, r7
 8003e76:	d900      	bls.n	8003e7a <_realloc_r+0x4a>
 8003e78:	003a      	movs	r2, r7
 8003e7a:	0021      	movs	r1, r4
 8003e7c:	9801      	ldr	r0, [sp, #4]
 8003e7e:	f7ff ffce 	bl	8003e1e <memcpy>
 8003e82:	0021      	movs	r1, r4
 8003e84:	0030      	movs	r0, r6
 8003e86:	f7ff fbc1 	bl	800360c <_free_r>
 8003e8a:	9c01      	ldr	r4, [sp, #4]
 8003e8c:	e7da      	b.n	8003e44 <_realloc_r+0x14>

08003e8e <_malloc_usable_size_r>:
 8003e8e:	1f0b      	subs	r3, r1, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1f18      	subs	r0, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da01      	bge.n	8003e9c <_malloc_usable_size_r+0xe>
 8003e98:	580b      	ldr	r3, [r1, r0]
 8003e9a:	18c0      	adds	r0, r0, r3
 8003e9c:	4770      	bx	lr
	...

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
