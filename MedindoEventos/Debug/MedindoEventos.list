
MedindoEventos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080035e8  080035e8  000045e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  080036c0  080036c0  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c0  080036c0  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000046c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036c4  080036c4  000046c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080036c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000007c  08003744  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08003744  00005304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efec  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd6  00000000  00000000  00014090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00016068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a34  00000000  00000000  00016d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d62  00000000  00000000  0001778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd5a  00000000  00000000  0002b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e737  00000000  00000000  0003b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b997f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b8  00000000  00000000  000b99c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000bcd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035d0 	.word	0x080035d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	080035d0 	.word	0x080035d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 fae3 	bl	80009e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f86e 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f954 	bl	80006d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000428:	f000 f904 	bl	8000634 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800042c:	f000 f8ac 	bl	8000588 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	e7fd      	b.n	8000430 <main+0x18>

08000434 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}


/* Função de callback de interrupção do temporizador */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000440:	429a      	cmp	r2, r3
 8000442:	d104      	bne.n	800044e <HAL_TIM_PeriodElapsedCallback+0x1a>
        time++;
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800044c:	601a      	str	r2, [r3, #0]
    }
}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	20000098 	.word	0x20000098
 800045c:	20000178 	.word	0x20000178

08000460 <HAL_GPIO_EXTI_Falling_Callback>:

/* Função de configuração da interrupção externa */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	0002      	movs	r2, r0
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_8) { // Botão pressionado
 800046c:	1dbb      	adds	r3, r7, #6
 800046e:	881a      	ldrh	r2, [r3, #0]
 8000470:	2380      	movs	r3, #128	@ 0x80
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	429a      	cmp	r2, r3
 8000476:	d130      	bne.n	80004da <HAL_GPIO_EXTI_Falling_Callback+0x7a>
    	if (!button_state) { // Primeiro pressionamento
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d10e      	bne.n	80004a0 <HAL_GPIO_EXTI_Falling_Callback+0x40>
    		HAL_TIM_Base_Start_IT(&htim3);     // Inicia temporizador
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fa4f 	bl	8001928 <HAL_TIM_Base_Start_IT>
    	    HAL_UART_Transmit(&huart1, msg_start, (sizeof(msg_start)-1), 1000);	// Transmite mensagem serial pela UART
 800048a:	23fa      	movs	r3, #250	@ 0xfa
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4917      	ldr	r1, [pc, #92]	@ (80004ec <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8000490:	4817      	ldr	r0, [pc, #92]	@ (80004f0 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8000492:	221d      	movs	r2, #29
 8000494:	f001 fe94 	bl	80021c0 <HAL_UART_Transmit>
    	    button_state = 1;
 8000498:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
    	    //zera variaveis de controle
    	    time = 0;
    	    button_state = 0;
       }
    }
}
 800049e:	e01c      	b.n	80004da <HAL_GPIO_EXTI_Falling_Callback+0x7a>
    		HAL_TIM_Base_Stop_IT(&htim3); // Para temporizador
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fa8e 	bl	80019c4 <HAL_TIM_Base_Stop_IT>
    	    sprintf(uart_tx_buffer, "Tempo decorrido: %lu ms\r\n", time); // Formata mensagem
 80004a8:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4912      	ldr	r1, [pc, #72]	@ (80004f8 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f002 fbef 	bl	8002c94 <siprintf>
    	    HAL_UART_Transmit(&huart1, (uint8_t *)uart_tx_buffer, strlen(uart_tx_buffer), 1000); // Transmite mensagem serial pela UART
 80004b6:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff fe25 	bl	8000108 <strlen>
 80004be:	0003      	movs	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	23fa      	movs	r3, #250	@ 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	490d      	ldr	r1, [pc, #52]	@ (80004fc <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80004c8:	4809      	ldr	r0, [pc, #36]	@ (80004f0 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80004ca:	f001 fe79 	bl	80021c0 <HAL_UART_Transmit>
    	    time = 0;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
    	    button_state = 0;
 80004d4:	4b03      	ldr	r3, [pc, #12]	@ (80004e4 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	2000017c 	.word	0x2000017c
 80004e8:	20000098 	.word	0x20000098
 80004ec:	20000000 	.word	0x20000000
 80004f0:	200000e4 	.word	0x200000e4
 80004f4:	20000178 	.word	0x20000178
 80004f8:	080035e8 	.word	0x080035e8
 80004fc:	20000180 	.word	0x20000180

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08d      	sub	sp, #52	@ 0x34
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	2414      	movs	r4, #20
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	231c      	movs	r3, #28
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 fbdf 	bl	8002cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2314      	movs	r3, #20
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f002 fbd8 	bl	8002cd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2202      	movs	r2, #2
 8000528:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	0052      	lsls	r2, r2, #1
 8000530:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2240      	movs	r2, #64	@ 0x40
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	193b      	adds	r3, r7, r4
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fd59 	bl	8000ff8 <HAL_RCC_OscConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800054a:	f000 f8f9 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	003b      	movs	r3, r7
 8000550:	2207      	movs	r2, #7
 8000552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000566:	003b      	movs	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056c:	003b      	movs	r3, r7
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 ff25 	bl	80013c0 <HAL_RCC_ClockConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800057a:	f000 f8e1 	bl	8000740 <Error_Handler>
  }
}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b00d      	add	sp, #52	@ 0x34
 8000584:	bd90      	pop	{r4, r7, pc}
	...

08000588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	2310      	movs	r3, #16
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2310      	movs	r3, #16
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f002 fb9b 	bl	8002cd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	230c      	movs	r3, #12
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 fb94 	bl	8002cd4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005ae:	4a1f      	ldr	r2, [pc, #124]	@ (800062c <MX_TIM3_Init+0xa4>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800-1;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <MX_TIM3_Init+0xa8>)
 80005b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005c0:	2209      	movs	r2, #9
 80005c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f950 	bl	8001878 <HAL_TIM_Base_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005dc:	f000 f8b0 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e0:	2110      	movs	r1, #16
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	0152      	lsls	r2, r2, #5
 80005e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ea:	187a      	adds	r2, r7, r1
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_TIM3_Init+0xa0>)
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fb17 	bl	8001c24 <HAL_TIM_ConfigClockSource>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80005fa:	f000 f8a1 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_TIM3_Init+0xa0>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fd05 	bl	8002020 <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800061a:	f000 f891 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b008      	add	sp, #32
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	20000098 	.word	0x20000098
 800062c:	40000400 	.word	0x40000400
 8000630:	000012bf 	.word	0x000012bf

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800063a:	4a24      	ldr	r2, [pc, #144]	@ (80006cc <MX_USART1_UART_Init+0x98>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000640:	22e1      	movs	r2, #225	@ 0xe1
 8000642:	0252      	lsls	r2, r2, #9
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fd48 	bl	8002114 <HAL_UART_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000688:	f000 f85a 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fa1f 	bl	8002ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800069a:	f000 f851 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 fa56 	bl	8002b54 <HAL_UARTEx_SetRxFifoThreshold>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006ac:	f000 f848 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <MX_USART1_UART_Init+0x94>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 f9d4 	bl	8002a60 <HAL_UARTEx_DisableFifoMode>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f840 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	200000e4 	.word	0x200000e4
 80006cc:	40013800 	.word	0x40013800

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f002 faf8 	bl	8002cd4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_GPIO_Init+0x68>)
 80006e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_GPIO_Init+0x68>)
 80006ea:	2101      	movs	r1, #1
 80006ec:	430a      	orrs	r2, r1
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_GPIO_Init+0x68>)
 80006f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f4:	2201      	movs	r2, #1
 80006f6:	4013      	ands	r3, r2
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <MX_GPIO_Init+0x6c>)
 8000708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2201      	movs	r2, #1
 800070e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	1d3a      	adds	r2, r7, #4
 8000712:	23a0      	movs	r3, #160	@ 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 facf 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2007      	movs	r0, #7
 8000724:	f000 fa98 	bl	8000c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000728:	2007      	movs	r0, #7
 800072a:	f000 faaa 	bl	8000c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b006      	add	sp, #24
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	10210000 	.word	0x10210000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_MspInit+0x50>)
 8000754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <HAL_MspInit+0x50>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_MspInit+0x50>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_MspInit+0x50>)
 800076c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <HAL_MspInit+0x50>)
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	0549      	lsls	r1, r1, #21
 8000774:	430a      	orrs	r2, r1
 8000776:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_MspInit+0x50>)
 800077a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	055b      	lsls	r3, r3, #21
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000786:	2008      	movs	r0, #8
 8000788:	f000 f9aa 	bl	8000ae0 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 800078c:	2010      	movs	r0, #16
 800078e:	f000 f9a7 	bl	8000ae0 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <HAL_TIM_Base_MspInit+0x44>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d113      	bne.n	80007da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_TIM_Base_MspInit+0x48>)
 80007b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_TIM_Base_MspInit+0x48>)
 80007b8:	2102      	movs	r1, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_TIM_Base_MspInit+0x48>)
 80007c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007c2:	2202      	movs	r2, #2
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2010      	movs	r0, #16
 80007d0:	f000 fa42 	bl	8000c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007d4:	2010      	movs	r0, #16
 80007d6:	f000 fa54 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b004      	add	sp, #16
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40000400 	.word	0x40000400
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b091      	sub	sp, #68	@ 0x44
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	232c      	movs	r3, #44	@ 0x2c
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	0018      	movs	r0, r3
 80007fa:	2314      	movs	r3, #20
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 fa68 	bl	8002cd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	2410      	movs	r4, #16
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	231c      	movs	r3, #28
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f002 fa60 	bl	8002cd4 <memset>
  if(huart->Instance==USART1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a23      	ldr	r2, [pc, #140]	@ (80008a8 <HAL_UART_MspInit+0xbc>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d13f      	bne.n	800089e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	f000 ff35 	bl	800169c <HAL_RCCEx_PeriphCLKConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000836:	f7ff ff83 	bl	8000740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 800083c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	01c9      	lsls	r1, r1, #7
 8000844:	430a      	orrs	r2, r1
 8000846:	641a      	str	r2, [r3, #64]	@ 0x40
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 800084a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_UART_MspInit+0xc0>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086e:	212c      	movs	r1, #44	@ 0x2c
 8000870:	187b      	adds	r3, r7, r1
 8000872:	22c0      	movs	r2, #192	@ 0xc0
 8000874:	00d2      	lsls	r2, r2, #3
 8000876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2202      	movs	r2, #2
 800087c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2201      	movs	r2, #1
 800088e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	23a0      	movs	r3, #160	@ 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fa0f 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b011      	add	sp, #68	@ 0x44
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f8e6 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fb50 	bl	8000f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <TIM3_IRQHandler+0x14>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f88e 	bl	8001a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	20000098 	.word	0x20000098

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	@ (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f002 f9d0 	bl	8002ce4 <__errno>
 8000944:	0003      	movs	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	2301      	movs	r3, #1
 800094c:	425b      	negs	r3, r3
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	18d2      	adds	r2, r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <_sbrk+0x64>)
 8000960:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b006      	add	sp, #24
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20001800 	.word	0x20001800
 8000970:	00000400 	.word	0x00000400
 8000974:	200001b4 	.word	0x200001b4
 8000978:	20000308 	.word	0x20000308

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <SystemInit+0x14>)
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	0512      	lsls	r2, r2, #20
 8000986:	609a      	str	r2, [r3, #8]
#endif
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f7ff fff0 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800099c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800099e:	e003      	b.n	80009a8 <LoopCopyDataInit>

080009a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009a0:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009a6:	3104      	adds	r1, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <LoopForever+0xa>)
  ldr r3, =_edata
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <LoopForever+0xe>)
  adds r2, r0, r1
 80009ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009b0:	d3f6      	bcc.n	80009a0 <CopyDataInit>
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopForever+0x12>)
  b LoopFillZerobss
 80009b4:	e002      	b.n	80009bc <LoopFillZerobss>

080009b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80009b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ba:	3204      	adds	r2, #4

080009bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <LoopForever+0x16>)
  cmp r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009c0:	d3f9      	bcc.n	80009b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009c2:	f002 f995 	bl	8002cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fd27 	bl	8000418 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80009d0:	080036c8 	.word	0x080036c8
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d8:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80009dc:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80009e0:	20000304 	.word	0x20000304

080009e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_IRQHandler>

080009e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 f80e 	bl	8000a14 <HAL_InitTick>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a04:	f7ff fea2 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <HAL_InitTick+0x88>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d02b      	beq.n	8000a84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0x8c>)
 8000a2e:	681c      	ldr	r4, [r3, #0]
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <HAL_InitTick+0x88>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0019      	movs	r1, r3
 8000a36:	23fa      	movs	r3, #250	@ 0xfa
 8000a38:	0098      	lsls	r0, r3, #2
 8000a3a:	f7ff fb77 	bl	800012c <__udivsi3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0019      	movs	r1, r3
 8000a42:	0020      	movs	r0, r4
 8000a44:	f7ff fb72 	bl	800012c <__udivsi3>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f929 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d112      	bne.n	8000a7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d80a      	bhi.n	8000a70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8f8 	bl	8000c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_InitTick+0x90>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e00d      	b.n	8000a8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e008      	b.n	8000a8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e003      	b.n	8000a8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b005      	add	sp, #20
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	20000028 	.word	0x20000028
 8000aa0:	20000020 	.word	0x20000020
 8000aa4:	20000024 	.word	0x20000024

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	200001b8 	.word	0x200001b8

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	@ (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	200001b8 	.word	0x200001b8

08000ae0 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <HAL_SYSCFG_EnableRemap+0x1c>)
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_SYSCFG_EnableRemap+0x1c>)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010000 	.word	0x40010000

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b12:	d809      	bhi.n	8000b28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	231f      	movs	r3, #31
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_EnableIRQ+0x30>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b48:	d828      	bhi.n	8000b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	33c0      	adds	r3, #192	@ 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	589b      	ldr	r3, [r3, r2]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	@ 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	430a      	orrs	r2, r1
 8000b94:	33c0      	adds	r3, #192	@ 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9a:	e031      	b.n	8000c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <__NVIC_SetPriority+0xd8>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3306      	adds	r3, #6
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	@ 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	@ 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <__NVIC_SetPriority+0xd8>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001c      	movs	r4, r3
 8000bec:	230f      	movs	r3, #15
 8000bee:	4023      	ands	r3, r4
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	18c3      	adds	r3, r0, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	045b      	lsls	r3, r3, #17
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d301      	bcc.n	8000c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c24:	2301      	movs	r3, #1
 8000c26:	e010      	b.n	8000c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <SysTick_Config+0x44>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2103      	movs	r1, #3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ff7c 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <SysTick_Config+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <SysTick_Config+0x44>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	210f      	movs	r1, #15
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	0002      	movs	r2, r0
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff33 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ffaf 	bl	8000c10 <SysTick_Config>
 8000cb2:	0003      	movs	r3, r0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cca:	e14d      	b.n	8000f68 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x28>
 8000ce2:	e13e      	b.n	8000f62 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x38>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b12      	cmp	r3, #18
 8000cf2:	d125      	bne.n	8000d40 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	58d3      	ldr	r3, [r2, r3]
 8000d00:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	2207      	movs	r2, #7
 8000d06:	4013      	ands	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	401a      	ands	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2107      	movs	r1, #7
 8000d24:	400b      	ands	r3, r1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	6979      	ldr	r1, [r7, #20]
 8000d3e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d00b      	beq.n	8000d94 <HAL_GPIO_Init+0xd8>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d88:	2b11      	cmp	r3, #17
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	43da      	mvns	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	2201      	movs	r2, #1
 8000de2:	401a      	ands	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d017      	beq.n	8000e2e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	4013      	ands	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	055b      	lsls	r3, r3, #21
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_GPIO_Init+0x180>
 8000e3a:	e092      	b.n	8000f62 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e3c:	4a50      	ldr	r2, [pc, #320]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3318      	adds	r3, #24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	589b      	ldr	r3, [r3, r2]
 8000e48:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	220f      	movs	r2, #15
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	23a0      	movs	r3, #160	@ 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d013      	beq.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a45      	ldr	r2, [pc, #276]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d00d      	beq.n	8000e8e <HAL_GPIO_Init+0x1d2>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a44      	ldr	r2, [pc, #272]	@ (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x1ce>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a43      	ldr	r2, [pc, #268]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_GPIO_Init+0x1ca>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e92:	2300      	movs	r3, #0
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	2103      	movs	r1, #3
 8000e98:	400a      	ands	r2, r1
 8000e9a:	00d2      	lsls	r2, r2, #3
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ea4:	4936      	ldr	r1, [pc, #216]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3318      	adds	r3, #24
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000eb2:	4a33      	ldr	r2, [pc, #204]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	58d3      	ldr	r3, [r2, r3]
 8000eb8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	@ 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ed8:	4929      	ldr	r1, [pc, #164]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000ee0:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000ee2:	2384      	movs	r3, #132	@ 0x84
 8000ee4:	58d3      	ldr	r3, [r2, r3]
 8000ee6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43da      	mvns	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	029b      	lsls	r3, r3, #10
 8000efa:	4013      	ands	r3, r2
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f06:	491e      	ldr	r1, [pc, #120]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000f08:	2284      	movs	r2, #132	@ 0x84
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43da      	mvns	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	035b      	lsls	r3, r3, #13
 8000f26:	4013      	ands	r3, r2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43da      	mvns	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	039b      	lsls	r3, r3, #14
 8000f50:	4013      	ands	r3, r2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	40da      	lsrs	r2, r3
 8000f70:	1e13      	subs	r3, r2, #0
 8000f72:	d000      	beq.n	8000f76 <HAL_GPIO_Init+0x2ba>
 8000f74:	e6aa      	b.n	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b006      	add	sp, #24
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021800 	.word	0x40021800
 8000f84:	50000400 	.word	0x50000400
 8000f88:	50000800 	.word	0x50000800
 8000f8c:	50001400 	.word	0x50001400

08000f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	0002      	movs	r2, r0
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	1dba      	adds	r2, r7, #6
 8000fa2:	8812      	ldrh	r2, [r2, #0]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d008      	beq.n	8000fba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000faa:	1dba      	adds	r2, r7, #6
 8000fac:	8812      	ldrh	r2, [r2, #0]
 8000fae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f815 	bl	8000fe4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	1dba      	adds	r2, r7, #6
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d008      	beq.n	8000fd8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fc8:	1dba      	adds	r2, r7, #6
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fce:	1dbb      	adds	r3, r7, #6
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fa44 	bl	8000460 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021800 	.word	0x40021800

08000fe4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e1d0      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	4013      	ands	r3, r2
 8001012:	d100      	bne.n	8001016 <HAL_RCC_OscConfig+0x1e>
 8001014:	e069      	b.n	80010ea <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001016:	4bc8      	ldr	r3, [pc, #800]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2238      	movs	r2, #56	@ 0x38
 800101c:	4013      	ands	r3, r2
 800101e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b08      	cmp	r3, #8
 8001024:	d105      	bne.n	8001032 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d15d      	bne.n	80010ea <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1bc      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	025b      	lsls	r3, r3, #9
 800103a:	429a      	cmp	r2, r3
 800103c:	d107      	bne.n	800104e <HAL_RCC_OscConfig+0x56>
 800103e:	4bbe      	ldr	r3, [pc, #760]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4bbd      	ldr	r3, [pc, #756]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	0249      	lsls	r1, r1, #9
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e020      	b.n	8001090 <HAL_RCC_OscConfig+0x98>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	23a0      	movs	r3, #160	@ 0xa0
 8001054:	02db      	lsls	r3, r3, #11
 8001056:	429a      	cmp	r2, r3
 8001058:	d10e      	bne.n	8001078 <HAL_RCC_OscConfig+0x80>
 800105a:	4bb7      	ldr	r3, [pc, #732]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4bb6      	ldr	r3, [pc, #728]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	02c9      	lsls	r1, r1, #11
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	4bb3      	ldr	r3, [pc, #716]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4bb2      	ldr	r3, [pc, #712]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800106e:	2180      	movs	r1, #128	@ 0x80
 8001070:	0249      	lsls	r1, r1, #9
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001078:	4baf      	ldr	r3, [pc, #700]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4bae      	ldr	r3, [pc, #696]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800107e:	49af      	ldr	r1, [pc, #700]	@ (800133c <HAL_RCC_OscConfig+0x344>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	4bac      	ldr	r3, [pc, #688]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4bab      	ldr	r3, [pc, #684]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800108a:	49ad      	ldr	r1, [pc, #692]	@ (8001340 <HAL_RCC_OscConfig+0x348>)
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d014      	beq.n	80010c2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fd18 	bl	8000acc <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010a2:	f7ff fd13 	bl	8000acc <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b64      	cmp	r3, #100	@ 0x64
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e17b      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0xaa>
 80010c0:	e013      	b.n	80010ea <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff fd03 	bl	8000acc <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fcfe 	bl	8000acc <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e166      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010de:	4b96      	ldr	r3, [pc, #600]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	029b      	lsls	r3, r3, #10
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0xfe>
 80010f4:	e086      	b.n	8001204 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f6:	4b90      	ldr	r3, [pc, #576]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2238      	movs	r2, #56	@ 0x38
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d12f      	bne.n	8001166 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e14c      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b89      	ldr	r3, [pc, #548]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a8b      	ldr	r2, [pc, #556]	@ (8001344 <HAL_RCC_OscConfig+0x34c>)
 8001118:	4013      	ands	r3, r2
 800111a:	0019      	movs	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	021a      	lsls	r2, r3, #8
 8001122:	4b85      	ldr	r3, [pc, #532]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001124:	430a      	orrs	r2, r1
 8001126:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d112      	bne.n	8001154 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800112e:	4b82      	ldr	r3, [pc, #520]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a85      	ldr	r2, [pc, #532]	@ (8001348 <HAL_RCC_OscConfig+0x350>)
 8001134:	4013      	ands	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	4b7e      	ldr	r3, [pc, #504]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001142:	4b7d      	ldr	r3, [pc, #500]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0adb      	lsrs	r3, r3, #11
 8001148:	2207      	movs	r2, #7
 800114a:	4013      	ands	r3, r2
 800114c:	4a7f      	ldr	r2, [pc, #508]	@ (800134c <HAL_RCC_OscConfig+0x354>)
 800114e:	40da      	lsrs	r2, r3
 8001150:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <HAL_RCC_OscConfig+0x358>)
 8001152:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001154:	4b7f      	ldr	r3, [pc, #508]	@ (8001354 <HAL_RCC_OscConfig+0x35c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fc5b 	bl	8000a14 <HAL_InitTick>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d050      	beq.n	8001204 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e122      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d030      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800116e:	4b72      	ldr	r3, [pc, #456]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a75      	ldr	r2, [pc, #468]	@ (8001348 <HAL_RCC_OscConfig+0x350>)
 8001174:	4013      	ands	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	4b6e      	ldr	r3, [pc, #440]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	4b6d      	ldr	r3, [pc, #436]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b6c      	ldr	r3, [pc, #432]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	0049      	lsls	r1, r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc9c 	bl	8000acc <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800119a:	f7ff fc97 	bl	8000acc <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0ff      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ac:	4b62      	ldr	r3, [pc, #392]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a61      	ldr	r2, [pc, #388]	@ (8001344 <HAL_RCC_OscConfig+0x34c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	021a      	lsls	r2, r3, #8
 80011c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	e019      	b.n	8001204 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80011d0:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b58      	ldr	r3, [pc, #352]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011d6:	4960      	ldr	r1, [pc, #384]	@ (8001358 <HAL_RCC_OscConfig+0x360>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc76 	bl	8000acc <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc71 	bl	8000acc <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0d9      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4013      	ands	r3, r2
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2208      	movs	r2, #8
 800120a:	4013      	ands	r3, r2
 800120c:	d042      	beq.n	8001294 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800120e:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2238      	movs	r2, #56	@ 0x38
 8001214:	4013      	ands	r3, r2
 8001216:	2b18      	cmp	r3, #24
 8001218:	d105      	bne.n	8001226 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d138      	bne.n	8001294 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0c2      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d019      	beq.n	8001262 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001230:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fc47 	bl	8000acc <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc42 	bl	8000acc <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0aa      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001256:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0f1      	beq.n	8001244 <HAL_RCC_OscConfig+0x24c>
 8001260:	e018      	b.n	8001294 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001262:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001264:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001268:	2101      	movs	r1, #1
 800126a:	438a      	bics	r2, r1
 800126c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff fc2d 	bl	8000acc <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001278:	f7ff fc28 	bl	8000acc <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e090      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d1f1      	bne.n	8001278 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2204      	movs	r2, #4
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2a8>
 800129e:	e084      	b.n	80013aa <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2238      	movs	r2, #56	@ 0x38
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d000      	beq.n	80012be <HAL_RCC_OscConfig+0x2c6>
 80012bc:	e075      	b.n	80013aa <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e074      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2e0>
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012d6:	e01c      	b.n	8001312 <HAL_RCC_OscConfig+0x31a>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x302>
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	430a      	orrs	r2, r1
 80012ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x31a>
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 80012fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001300:	2101      	movs	r1, #1
 8001302:	438a      	bics	r2, r1
 8001304:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 8001308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_RCC_OscConfig+0x340>)
 800130c:	2104      	movs	r1, #4
 800130e:	438a      	bics	r2, r1
 8001310:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d028      	beq.n	800136c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fbd7 	bl	8000acc <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fbd2 	bl	8000acc <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_RCC_OscConfig+0x364>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d915      	bls.n	8001360 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e039      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
 8001338:	40021000 	.word	0x40021000
 800133c:	fffeffff 	.word	0xfffeffff
 8001340:	fffbffff 	.word	0xfffbffff
 8001344:	ffff80ff 	.word	0xffff80ff
 8001348:	ffffc7ff 	.word	0xffffc7ff
 800134c:	02dc6c00 	.word	0x02dc6c00
 8001350:	20000020 	.word	0x20000020
 8001354:	20000024 	.word	0x20000024
 8001358:	fffffeff 	.word	0xfffffeff
 800135c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <HAL_RCC_OscConfig+0x3bc>)
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d0dc      	beq.n	8001324 <HAL_RCC_OscConfig+0x32c>
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fbae 	bl	8000acc <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001374:	e009      	b.n	800138a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fba9 	bl	8000acc <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_RCC_OscConfig+0x3c0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e010      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_RCC_OscConfig+0x3bc>)
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001394:	230f      	movs	r3, #15
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_RCC_OscConfig+0x3bc>)
 80013a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <HAL_RCC_OscConfig+0x3bc>)
 80013a4:	4905      	ldr	r1, [pc, #20]	@ (80013bc <HAL_RCC_OscConfig+0x3c4>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b006      	add	sp, #24
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	00001388 	.word	0x00001388
 80013bc:	efffffff 	.word	0xefffffff

080013c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0e9      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d4:	4b76      	ldr	r3, [pc, #472]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2207      	movs	r2, #7
 80013da:	4013      	ands	r3, r2
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d91e      	bls.n	8001420 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2207      	movs	r2, #7
 80013e8:	4393      	bics	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	4b70      	ldr	r3, [pc, #448]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013f4:	f7ff fb6a 	bl	8000acc <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013fc:	e009      	b.n	8001412 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013fe:	f7ff fb65 	bl	8000acc <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	4a6a      	ldr	r2, [pc, #424]	@ (80015b4 <HAL_RCC_ClockConfig+0x1f4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0ca      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001412:	4b67      	ldr	r3, [pc, #412]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2207      	movs	r2, #7
 8001418:	4013      	ands	r3, r2
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d1ee      	bne.n	80013fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d017      	beq.n	800145a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2204      	movs	r2, #4
 8001430:	4013      	ands	r3, r2
 8001432:	d008      	beq.n	8001446 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001434:	4b60      	ldr	r3, [pc, #384]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a60      	ldr	r2, [pc, #384]	@ (80015bc <HAL_RCC_ClockConfig+0x1fc>)
 800143a:	401a      	ands	r2, r3
 800143c:	4b5e      	ldr	r3, [pc, #376]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 800143e:	21b0      	movs	r1, #176	@ 0xb0
 8001440:	0109      	lsls	r1, r1, #4
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001446:	4b5c      	ldr	r3, [pc, #368]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4a5d      	ldr	r2, [pc, #372]	@ (80015c0 <HAL_RCC_ClockConfig+0x200>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4b58      	ldr	r3, [pc, #352]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	4013      	ands	r3, r2
 8001462:	d055      	beq.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001464:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	221c      	movs	r2, #28
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d107      	bne.n	8001490 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001480:	4b4d      	ldr	r3, [pc, #308]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d11f      	bne.n	80014cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e08b      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001498:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4013      	ands	r3, r2
 80014a2:	d113      	bne.n	80014cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e07f      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d106      	bne.n	80014be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014b0:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e074      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014be:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 80014c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e06d      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014cc:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2207      	movs	r2, #7
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e0:	f7ff faf4 	bl	8000acc <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e8:	e009      	b.n	80014fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014ea:	f7ff faef 	bl	8000acc <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a2f      	ldr	r2, [pc, #188]	@ (80015b4 <HAL_RCC_ClockConfig+0x1f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e054      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	@ 0x38
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	429a      	cmp	r2, r3
 800150e:	d1ec      	bne.n	80014ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001510:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2207      	movs	r2, #7
 8001516:	4013      	ands	r3, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d21e      	bcs.n	800155c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2207      	movs	r2, #7
 8001524:	4393      	bics	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001530:	f7ff facc 	bl	8000acc <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001538:	e009      	b.n	800154e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800153a:	f7ff fac7 	bl	8000acc <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e02c      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2207      	movs	r2, #7
 8001554:	4013      	ands	r3, r2
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2204      	movs	r2, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4a16      	ldr	r2, [pc, #88]	@ (80015c4 <HAL_RCC_ClockConfig+0x204>)
 800156c:	4013      	ands	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800157a:	f000 f82b 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 800157e:	0001      	movs	r1, r0
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	220f      	movs	r2, #15
 8001588:	401a      	ands	r2, r3
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_RCC_ClockConfig+0x208>)
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	58d3      	ldr	r3, [r2, r3]
 8001590:	221f      	movs	r2, #31
 8001592:	4013      	ands	r3, r2
 8001594:	000a      	movs	r2, r1
 8001596:	40da      	lsrs	r2, r3
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_RCC_ClockConfig+0x20c>)
 800159a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_RCC_ClockConfig+0x210>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fa37 	bl	8000a14 <HAL_InitTick>
 80015a6:	0003      	movs	r3, r0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40022000 	.word	0x40022000
 80015b4:	00001388 	.word	0x00001388
 80015b8:	40021000 	.word	0x40021000
 80015bc:	ffff84ff 	.word	0xffff84ff
 80015c0:	fffff0ff 	.word	0xfffff0ff
 80015c4:	ffff8fff 	.word	0xffff8fff
 80015c8:	08003604 	.word	0x08003604
 80015cc:	20000020 	.word	0x20000020
 80015d0:	20000024 	.word	0x20000024

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <HAL_RCC_GetSysClockFreq+0x78>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	@ 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	d10f      	bne.n	8001604 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_RCC_GetSysClockFreq+0x78>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0adb      	lsrs	r3, r3, #11
 80015ea:	2207      	movs	r2, #7
 80015ec:	4013      	ands	r3, r2
 80015ee:	2201      	movs	r2, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4815      	ldr	r0, [pc, #84]	@ (8001650 <HAL_RCC_GetSysClockFreq+0x7c>)
 80015fa:	f7fe fd97 	bl	800012c <__udivsi3>
 80015fe:	0003      	movs	r3, r0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e01e      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_RCC_GetSysClockFreq+0x78>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2238      	movs	r2, #56	@ 0x38
 800160a:	4013      	ands	r3, r2
 800160c:	2b08      	cmp	r3, #8
 800160e:	d102      	bne.n	8001616 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_RCC_GetSysClockFreq+0x80>)
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	e015      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_GetSysClockFreq+0x78>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2238      	movs	r2, #56	@ 0x38
 800161c:	4013      	ands	r3, r2
 800161e:	2b20      	cmp	r3, #32
 8001620:	d103      	bne.n	800162a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	e00b      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_RCC_GetSysClockFreq+0x78>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2238      	movs	r2, #56	@ 0x38
 8001630:	4013      	ands	r3, r2
 8001632:	2b18      	cmp	r3, #24
 8001634:	d103      	bne.n	800163e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001636:	23fa      	movs	r3, #250	@ 0xfa
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	02dc6c00 	.word	0x02dc6c00
 8001654:	007a1200 	.word	0x007a1200

08001658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b02      	ldr	r3, [pc, #8]	@ (8001668 <HAL_RCC_GetHCLKFreq+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	20000020 	.word	0x20000020

0800166c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001670:	f7ff fff2 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001674:	0001      	movs	r1, r0
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	0b1b      	lsrs	r3, r3, #12
 800167c:	2207      	movs	r2, #7
 800167e:	401a      	ands	r2, r3
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	58d3      	ldr	r3, [r2, r3]
 8001686:	221f      	movs	r2, #31
 8001688:	4013      	ands	r3, r2
 800168a:	40d9      	lsrs	r1, r3
 800168c:	000b      	movs	r3, r1
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	08003644 	.word	0x08003644

0800169c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80016a4:	2313      	movs	r3, #19
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016ac:	2312      	movs	r3, #18
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80016c0:	e079      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2011      	movs	r0, #17
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b64      	ldr	r3, [pc, #400]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	055b      	lsls	r3, r3, #21
 80016d2:	4013      	ands	r3, r2
 80016d4:	d110      	bne.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b61      	ldr	r3, [pc, #388]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016da:	4b60      	ldr	r3, [pc, #384]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016e4:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	183b      	adds	r3, r7, r0
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80016f8:	4b58      	ldr	r3, [pc, #352]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016fc:	23c0      	movs	r3, #192	@ 0xc0
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d019      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	429a      	cmp	r2, r3
 8001712:	d014      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001714:	4b51      	ldr	r3, [pc, #324]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	4a51      	ldr	r2, [pc, #324]	@ (8001860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800171a:	4013      	ands	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800171e:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001722:	4b4e      	ldr	r3, [pc, #312]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	430a      	orrs	r2, r1
 800172a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800172c:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800172e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001730:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001732:	494c      	ldr	r1, [pc, #304]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001734:	400a      	ands	r2, r1
 8001736:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001738:	4b48      	ldr	r3, [pc, #288]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d016      	beq.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff f9c1 	bl	8000acc <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800174e:	e00c      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff f9bc 	bl	8000acc <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4a43      	ldr	r2, [pc, #268]	@ (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d904      	bls.n	800176a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001760:	2313      	movs	r3, #19
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2203      	movs	r2, #3
 8001766:	701a      	strb	r2, [r3, #0]
          break;
 8001768:	e004      	b.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800176a:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800176c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0ed      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001774:	2313      	movs	r3, #19
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	4a37      	ldr	r2, [pc, #220]	@ (8001860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800178e:	430a      	orrs	r2, r1
 8001790:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001792:	e005      	b.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001794:	2312      	movs	r3, #18
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	2213      	movs	r2, #19
 800179a:	18ba      	adds	r2, r7, r2
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a0:	2311      	movs	r3, #17
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017b0:	492e      	ldr	r1, [pc, #184]	@ (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c4:	2203      	movs	r2, #3
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2240      	movs	r2, #64	@ 0x40
 80017da:	4013      	ands	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	4a23      	ldr	r2, [pc, #140]	@ (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	01db      	lsls	r3, r3, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	d008      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	0899      	lsrs	r1, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800180c:	430a      	orrs	r2, r1
 800180e:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800182c:	430a      	orrs	r2, r1
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da09      	bge.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	22e0      	movs	r2, #224	@ 0xe0
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800184c:	2312      	movs	r3, #18
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	781b      	ldrb	r3, [r3, #0]
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b006      	add	sp, #24
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	fffffcff 	.word	0xfffffcff
 8001864:	fffeffff 	.word	0xfffeffff
 8001868:	00001388 	.word	0x00001388
 800186c:	efffffff 	.word	0xefffffff
 8001870:	ffffcfff 	.word	0xffffcfff
 8001874:	ffff3fff 	.word	0xffff3fff

08001878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e04a      	b.n	8001920 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	223d      	movs	r2, #61	@ 0x3d
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223c      	movs	r2, #60	@ 0x3c
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7fe ff7d 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	223d      	movs	r2, #61	@ 0x3d
 80018aa:	2102      	movs	r1, #2
 80018ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f000 faa9 	bl	8001e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2248      	movs	r2, #72	@ 0x48
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	223e      	movs	r2, #62	@ 0x3e
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	223f      	movs	r2, #63	@ 0x3f
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2241      	movs	r2, #65	@ 0x41
 80018e2:	2101      	movs	r1, #1
 80018e4:	5499      	strb	r1, [r3, r2]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2242      	movs	r2, #66	@ 0x42
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2243      	movs	r2, #67	@ 0x43
 80018f2:	2101      	movs	r1, #1
 80018f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2244      	movs	r2, #68	@ 0x44
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2245      	movs	r2, #69	@ 0x45
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2246      	movs	r2, #70	@ 0x46
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2247      	movs	r2, #71	@ 0x47
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223d      	movs	r2, #61	@ 0x3d
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	223d      	movs	r2, #61	@ 0x3d
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d001      	beq.n	8001940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e037      	b.n	80019b0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	223d      	movs	r2, #61	@ 0x3d
 8001944:	2102      	movs	r1, #2
 8001946:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2101      	movs	r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <HAL_TIM_Base_Start_IT+0x90>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x44>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <HAL_TIM_Base_Start_IT+0x94>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d116      	bne.n	800199a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <HAL_TIM_Base_Start_IT+0x98>)
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d016      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x84>
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d011      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2101      	movs	r1, #1
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001998:	e008      	b.n	80019ac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e000      	b.n	80019ae <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	00010007 	.word	0x00010007

080019c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_TIM_Base_Stop_IT+0x54>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	d10d      	bne.n	8001a04 <HAL_TIM_Base_Stop_IT+0x40>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_TIM_Base_Stop_IT+0x58>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	d107      	bne.n	8001a04 <HAL_TIM_Base_Stop_IT+0x40>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	223d      	movs	r2, #61	@ 0x3d
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	00001111 	.word	0x00001111
 8001a1c:	00000444 	.word	0x00000444

08001a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d021      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d01d      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4252      	negs	r2, r2
 8001a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	d004      	beq.n	8001a6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f9ba 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001a6c:	e007      	b.n	8001a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 f9ad 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f9b9 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4013      	ands	r3, r2
 8001a92:	d01e      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	4252      	negs	r2, r2
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	23c0      	movs	r3, #192	@ 0xc0
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d004      	beq.n	8001abc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f993 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001aba:	e007      	b.n	8001acc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 f986 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 f992 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d021      	beq.n	8001b1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d01d      	beq.n	8001b1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2209      	movs	r2, #9
 8001ae8:	4252      	negs	r2, r2
 8001aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2203      	movs	r2, #3
 8001afa:	4013      	ands	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f96d 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001b06:	e007      	b.n	8001b18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f960 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f96c 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2210      	movs	r2, #16
 8001b22:	4013      	ands	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d01e      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2211      	movs	r2, #17
 8001b34:	4252      	negs	r2, r2
 8001b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	23c0      	movs	r3, #192	@ 0xc0
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f946 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e007      	b.n	8001b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f939 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f945 	bl	8001df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	d00c      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d008      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2202      	movs	r2, #2
 8001b82:	4252      	negs	r2, r2
 8001b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7fe fc53 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	4013      	ands	r3, r2
 8001b94:	d00c      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d008      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2281      	movs	r2, #129	@ 0x81
 8001ba4:	4252      	negs	r2, r2
 8001ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 faa2 	bl	80020f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <HAL_TIM_IRQHandler+0x200>)
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 fa99 	bl	8002104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2240      	movs	r2, #64	@ 0x40
 8001bde:	4013      	ands	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2241      	movs	r2, #65	@ 0x41
 8001be8:	4252      	negs	r2, r2
 8001bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f906 	bl	8001e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d00c      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	4013      	ands	r3, r2
 8001c02:	d008      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2221      	movs	r2, #33	@ 0x21
 8001c0a:	4252      	negs	r2, r2
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fa67 	bl	80020e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	fffffeff 	.word	0xfffffeff

08001c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	230f      	movs	r3, #15
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	223c      	movs	r2, #60	@ 0x3c
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_TIM_ConfigClockSource+0x20>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0bc      	b.n	8001dbe <HAL_TIM_ConfigClockSource+0x19a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	223c      	movs	r2, #60	@ 0x3c
 8001c48:	2101      	movs	r1, #1
 8001c4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	223d      	movs	r2, #61	@ 0x3d
 8001c50:	2102      	movs	r1, #2
 8001c52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4a59      	ldr	r2, [pc, #356]	@ (8001dcc <HAL_TIM_ConfigClockSource+0x1a8>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	0192      	lsls	r2, r2, #6
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0xde>
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	0192      	lsls	r2, r2, #6
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d900      	bls.n	8001c8a <HAL_TIM_ConfigClockSource+0x66>
 8001c88:	e088      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	0152      	lsls	r2, r2, #5
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d100      	bne.n	8001c94 <HAL_TIM_ConfigClockSource+0x70>
 8001c92:	e088      	b.n	8001da6 <HAL_TIM_ConfigClockSource+0x182>
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	0152      	lsls	r2, r2, #5
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d900      	bls.n	8001c9e <HAL_TIM_ConfigClockSource+0x7a>
 8001c9c:	e07e      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001c9e:	2b70      	cmp	r3, #112	@ 0x70
 8001ca0:	d018      	beq.n	8001cd4 <HAL_TIM_ConfigClockSource+0xb0>
 8001ca2:	d900      	bls.n	8001ca6 <HAL_TIM_ConfigClockSource+0x82>
 8001ca4:	e07a      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001ca6:	2b60      	cmp	r3, #96	@ 0x60
 8001ca8:	d04f      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x126>
 8001caa:	d900      	bls.n	8001cae <HAL_TIM_ConfigClockSource+0x8a>
 8001cac:	e076      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001cae:	2b50      	cmp	r3, #80	@ 0x50
 8001cb0:	d03b      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0x106>
 8001cb2:	d900      	bls.n	8001cb6 <HAL_TIM_ConfigClockSource+0x92>
 8001cb4:	e072      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001cb6:	2b40      	cmp	r3, #64	@ 0x40
 8001cb8:	d057      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x146>
 8001cba:	d900      	bls.n	8001cbe <HAL_TIM_ConfigClockSource+0x9a>
 8001cbc:	e06e      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001cbe:	2b30      	cmp	r3, #48	@ 0x30
 8001cc0:	d063      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0x166>
 8001cc2:	d86b      	bhi.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d060      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0x166>
 8001cc8:	d868      	bhi.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d05d      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0x166>
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d05b      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0x166>
 8001cd2:	e063      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ce4:	f000 f97c 	bl	8001fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2277      	movs	r2, #119	@ 0x77
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]
      break;
 8001d00:	e052      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d12:	f000 f965 	bl	8001fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2180      	movs	r1, #128	@ 0x80
 8001d22:	01c9      	lsls	r1, r1, #7
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
      break;
 8001d28:	e03e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d36:	001a      	movs	r2, r3
 8001d38:	f000 f8d6 	bl	8001ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2150      	movs	r1, #80	@ 0x50
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f930 	bl	8001fa8 <TIM_ITRx_SetConfig>
      break;
 8001d48:	e02e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d56:	001a      	movs	r2, r3
 8001d58:	f000 f8f4 	bl	8001f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2160      	movs	r1, #96	@ 0x60
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f920 	bl	8001fa8 <TIM_ITRx_SetConfig>
      break;
 8001d68:	e01e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d76:	001a      	movs	r2, r3
 8001d78:	f000 f8b6 	bl	8001ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2140      	movs	r1, #64	@ 0x40
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 f910 	bl	8001fa8 <TIM_ITRx_SetConfig>
      break;
 8001d88:	e00e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0019      	movs	r1, r3
 8001d94:	0010      	movs	r0, r2
 8001d96:	f000 f907 	bl	8001fa8 <TIM_ITRx_SetConfig>
      break;
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
      break;
 8001da4:	e000      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001da6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	223d      	movs	r2, #61	@ 0x3d
 8001dac:	2101      	movs	r1, #1
 8001dae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	223c      	movs	r2, #60	@ 0x3c
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

  return status;
 8001db8:	230f      	movs	r3, #15
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	ffceff88 	.word	0xffceff88
 8001dcc:	ffff00ff 	.word	0xffff00ff

08001dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df8:	46c0      	nop			@ (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x20>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed4 <TIM_Base_SetConfig+0xc4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2270      	movs	r2, #112	@ 0x70
 8001e34:	4393      	bics	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0x5a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <TIM_Base_SetConfig+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x5a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a20      	ldr	r2, [pc, #128]	@ (8001ed8 <TIM_Base_SetConfig+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x5a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001edc <TIM_Base_SetConfig+0xcc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x5a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <TIM_Base_SetConfig+0xd0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <TIM_Base_SetConfig+0xd4>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	4393      	bics	r3, r2
 8001e82:	001a      	movs	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0xaa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <TIM_Base_SetConfig+0xcc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0xaa>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <TIM_Base_SetConfig+0xd0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	615a      	str	r2, [r3, #20]
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40002000 	.word	0x40002000
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40014800 	.word	0x40014800
 8001ee4:	fffffcff 	.word	0xfffffcff

08001ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4393      	bics	r3, r2
 8001f02:	001a      	movs	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	22f0      	movs	r2, #240	@ 0xf0
 8001f12:	4393      	bics	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	220a      	movs	r2, #10
 8001f24:	4393      	bics	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	621a      	str	r2, [r3, #32]
}
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b006      	add	sp, #24
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	001a      	movs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <TIM_TI2_ConfigInputStage+0x60>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	031b      	lsls	r3, r3, #12
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	22a0      	movs	r2, #160	@ 0xa0
 8001f80:	4393      	bics	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	621a      	str	r2, [r3, #32]
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b006      	add	sp, #24
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	ffff0fff 	.word	0xffff0fff

08001fa8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <TIM_ITRx_SetConfig+0x34>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b004      	add	sp, #16
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	ffcfff8f 	.word	0xffcfff8f

08001fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <TIM_ETR_SetConfig+0x3c>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	021a      	lsls	r2, r3, #8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	431a      	orrs	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b006      	add	sp, #24
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffff00ff 	.word	0xffff00ff

08002020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	223c      	movs	r2, #60	@ 0x3c
 800202e:	5c9b      	ldrb	r3, [r3, r2]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002034:	2302      	movs	r3, #2
 8002036:	e04a      	b.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	223c      	movs	r2, #60	@ 0x3c
 800203c:	2101      	movs	r1, #1
 800203e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	223d      	movs	r2, #61	@ 0x3d
 8002044:	2102      	movs	r1, #2
 8002046:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002066:	4013      	ands	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2270      	movs	r2, #112	@ 0x70
 8002078:	4393      	bics	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	4393      	bics	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	223d      	movs	r2, #61	@ 0x3d
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	223c      	movs	r2, #60	@ 0x3c
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	ff0fffff 	.word	0xff0fffff
 80020e0:	40000400 	.word	0x40000400

080020e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e046      	b.n	80021b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2288      	movs	r2, #136	@ 0x88
 800212a:	589b      	ldr	r3, [r3, r2]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2284      	movs	r2, #132	@ 0x84
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f7fe fb56 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2288      	movs	r2, #136	@ 0x88
 8002144:	2124      	movs	r1, #36	@ 0x24
 8002146:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2101      	movs	r1, #1
 8002154:	438a      	bics	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fa4e 	bl	8002604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f8cc 	bl	8002308 <UART_SetConfig>
 8002170:	0003      	movs	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e01c      	b.n	80021b4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	490d      	ldr	r1, [pc, #52]	@ (80021bc <HAL_UART_Init+0xa8>)
 8002186:	400a      	ands	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	212a      	movs	r1, #42	@ 0x2a
 8002196:	438a      	bics	r2, r1
 8002198:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fadd 	bl	800276c <UART_CheckIdleState>
 80021b2:	0003      	movs	r3, r0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffffb7ff 	.word	0xffffb7ff

080021c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	@ 0x28
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2288      	movs	r2, #136	@ 0x88
 80021d4:	589b      	ldr	r3, [r3, r2]
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d000      	beq.n	80021dc <HAL_UART_Transmit+0x1c>
 80021da:	e090      	b.n	80022fe <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_UART_Transmit+0x2a>
 80021e2:	1dbb      	adds	r3, r7, #6
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e088      	b.n	8002300 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	015b      	lsls	r3, r3, #5
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d109      	bne.n	800220e <HAL_UART_Transmit+0x4e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d001      	beq.n	800220e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e078      	b.n	8002300 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2290      	movs	r2, #144	@ 0x90
 8002212:	2100      	movs	r1, #0
 8002214:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2288      	movs	r2, #136	@ 0x88
 800221a:	2121      	movs	r1, #33	@ 0x21
 800221c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800221e:	f7fe fc55 	bl	8000acc <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1dba      	adds	r2, r7, #6
 800222a:	2154      	movs	r1, #84	@ 0x54
 800222c:	8812      	ldrh	r2, [r2, #0]
 800222e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1dba      	adds	r2, r7, #6
 8002234:	2156      	movs	r1, #86	@ 0x56
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	429a      	cmp	r2, r3
 8002244:	d108      	bne.n	8002258 <HAL_UART_Transmit+0x98>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e003      	b.n	8002260 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002260:	e030      	b.n	80022c4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0013      	movs	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	f000 fb26 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d005      	beq.n	8002284 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2288      	movs	r2, #136	@ 0x88
 800227c:	2120      	movs	r1, #32
 800227e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03d      	b.n	8002300 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	001a      	movs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	05d2      	lsls	r2, r2, #23
 8002296:	0dd2      	lsrs	r2, r2, #23
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e007      	b.n	80022b2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2256      	movs	r2, #86	@ 0x56
 80022b6:	5a9b      	ldrh	r3, [r3, r2]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b299      	uxth	r1, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2256      	movs	r2, #86	@ 0x56
 80022c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2256      	movs	r2, #86	@ 0x56
 80022c8:	5a9b      	ldrh	r3, [r3, r2]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1c8      	bne.n	8002262 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	0013      	movs	r3, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	2140      	movs	r1, #64	@ 0x40
 80022de:	f000 faef 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2288      	movs	r2, #136	@ 0x88
 80022ea:	2120      	movs	r1, #32
 80022ec:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e006      	b.n	8002300 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2288      	movs	r2, #136	@ 0x88
 80022f6:	2120      	movs	r1, #32
 80022f8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b008      	add	sp, #32
 8002306:	bd80      	pop	{r7, pc}

08002308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002310:	231e      	movs	r3, #30
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4aab      	ldr	r2, [pc, #684]	@ (80025e4 <UART_SetConfig+0x2dc>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4aa6      	ldr	r2, [pc, #664]	@ (80025e8 <UART_SetConfig+0x2e0>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a9d      	ldr	r2, [pc, #628]	@ (80025ec <UART_SetConfig+0x2e4>)
 8002376:	4013      	ands	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	220f      	movs	r2, #15
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a93      	ldr	r2, [pc, #588]	@ (80025f0 <UART_SetConfig+0x2e8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d127      	bne.n	80023f6 <UART_SetConfig+0xee>
 80023a6:	4b93      	ldr	r3, [pc, #588]	@ (80025f4 <UART_SetConfig+0x2ec>)
 80023a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023aa:	2203      	movs	r2, #3
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d017      	beq.n	80023e2 <UART_SetConfig+0xda>
 80023b2:	d81b      	bhi.n	80023ec <UART_SetConfig+0xe4>
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d00a      	beq.n	80023ce <UART_SetConfig+0xc6>
 80023b8:	d818      	bhi.n	80023ec <UART_SetConfig+0xe4>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <UART_SetConfig+0xbc>
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d00a      	beq.n	80023d8 <UART_SetConfig+0xd0>
 80023c2:	e013      	b.n	80023ec <UART_SetConfig+0xe4>
 80023c4:	231f      	movs	r3, #31
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e021      	b.n	8002412 <UART_SetConfig+0x10a>
 80023ce:	231f      	movs	r3, #31
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2202      	movs	r2, #2
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e01c      	b.n	8002412 <UART_SetConfig+0x10a>
 80023d8:	231f      	movs	r3, #31
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2204      	movs	r2, #4
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e017      	b.n	8002412 <UART_SetConfig+0x10a>
 80023e2:	231f      	movs	r3, #31
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2208      	movs	r2, #8
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e012      	b.n	8002412 <UART_SetConfig+0x10a>
 80023ec:	231f      	movs	r3, #31
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2210      	movs	r2, #16
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e00d      	b.n	8002412 <UART_SetConfig+0x10a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7f      	ldr	r2, [pc, #508]	@ (80025f8 <UART_SetConfig+0x2f0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d104      	bne.n	800240a <UART_SetConfig+0x102>
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e003      	b.n	8002412 <UART_SetConfig+0x10a>
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2210      	movs	r2, #16
 8002410:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	429a      	cmp	r2, r3
 800241c:	d000      	beq.n	8002420 <UART_SetConfig+0x118>
 800241e:	e06f      	b.n	8002500 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002420:	231f      	movs	r3, #31
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b08      	cmp	r3, #8
 8002428:	d01f      	beq.n	800246a <UART_SetConfig+0x162>
 800242a:	dc22      	bgt.n	8002472 <UART_SetConfig+0x16a>
 800242c:	2b04      	cmp	r3, #4
 800242e:	d017      	beq.n	8002460 <UART_SetConfig+0x158>
 8002430:	dc1f      	bgt.n	8002472 <UART_SetConfig+0x16a>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <UART_SetConfig+0x134>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d005      	beq.n	8002446 <UART_SetConfig+0x13e>
 800243a:	e01a      	b.n	8002472 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800243c:	f7ff f916 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8002440:	0003      	movs	r3, r0
 8002442:	61bb      	str	r3, [r7, #24]
        break;
 8002444:	e01c      	b.n	8002480 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002446:	4b6b      	ldr	r3, [pc, #428]	@ (80025f4 <UART_SetConfig+0x2ec>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	3301      	adds	r3, #1
 8002452:	0019      	movs	r1, r3
 8002454:	4869      	ldr	r0, [pc, #420]	@ (80025fc <UART_SetConfig+0x2f4>)
 8002456:	f7fd fe69 	bl	800012c <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]
        break;
 800245e:	e00f      	b.n	8002480 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002460:	f7ff f8b8 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8002464:	0003      	movs	r3, r0
 8002466:	61bb      	str	r3, [r7, #24]
        break;
 8002468:	e00a      	b.n	8002480 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	61bb      	str	r3, [r7, #24]
        break;
 8002470:	e006      	b.n	8002480 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002476:	231e      	movs	r3, #30
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
        break;
 800247e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d100      	bne.n	8002488 <UART_SetConfig+0x180>
 8002486:	e097      	b.n	80025b8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248c:	4b5c      	ldr	r3, [pc, #368]	@ (8002600 <UART_SetConfig+0x2f8>)
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	5ad3      	ldrh	r3, [r2, r3]
 8002492:	0019      	movs	r1, r3
 8002494:	69b8      	ldr	r0, [r7, #24]
 8002496:	f7fd fe49 	bl	800012c <__udivsi3>
 800249a:	0003      	movs	r3, r0
 800249c:	005a      	lsls	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	18d2      	adds	r2, r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0019      	movs	r1, r3
 80024ac:	0010      	movs	r0, r2
 80024ae:	f7fd fe3d 	bl	800012c <__udivsi3>
 80024b2:	0003      	movs	r3, r0
 80024b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d91c      	bls.n	80024f6 <UART_SetConfig+0x1ee>
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d217      	bcs.n	80024f6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	200e      	movs	r0, #14
 80024cc:	183b      	adds	r3, r7, r0
 80024ce:	210f      	movs	r1, #15
 80024d0:	438a      	bics	r2, r1
 80024d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2207      	movs	r2, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	b299      	uxth	r1, r3
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	183a      	adds	r2, r7, r0
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	183a      	adds	r2, r7, r0
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	e060      	b.n	80025b8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80024f6:	231e      	movs	r3, #30
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e05b      	b.n	80025b8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d01f      	beq.n	800254a <UART_SetConfig+0x242>
 800250a:	dc22      	bgt.n	8002552 <UART_SetConfig+0x24a>
 800250c:	2b04      	cmp	r3, #4
 800250e:	d017      	beq.n	8002540 <UART_SetConfig+0x238>
 8002510:	dc1f      	bgt.n	8002552 <UART_SetConfig+0x24a>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <UART_SetConfig+0x214>
 8002516:	2b02      	cmp	r3, #2
 8002518:	d005      	beq.n	8002526 <UART_SetConfig+0x21e>
 800251a:	e01a      	b.n	8002552 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251c:	f7ff f8a6 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
        break;
 8002524:	e01c      	b.n	8002560 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002526:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <UART_SetConfig+0x2ec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	3301      	adds	r3, #1
 8002532:	0019      	movs	r1, r3
 8002534:	4831      	ldr	r0, [pc, #196]	@ (80025fc <UART_SetConfig+0x2f4>)
 8002536:	f7fd fdf9 	bl	800012c <__udivsi3>
 800253a:	0003      	movs	r3, r0
 800253c:	61bb      	str	r3, [r7, #24]
        break;
 800253e:	e00f      	b.n	8002560 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002540:	f7ff f848 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8002544:	0003      	movs	r3, r0
 8002546:	61bb      	str	r3, [r7, #24]
        break;
 8002548:	e00a      	b.n	8002560 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	61bb      	str	r3, [r7, #24]
        break;
 8002550:	e006      	b.n	8002560 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002556:	231e      	movs	r3, #30
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
        break;
 800255e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800256a:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <UART_SetConfig+0x2f8>)
 800256c:	0052      	lsls	r2, r2, #1
 800256e:	5ad3      	ldrh	r3, [r2, r3]
 8002570:	0019      	movs	r1, r3
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f7fd fdda 	bl	800012c <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	001a      	movs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	18d2      	adds	r2, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0019      	movs	r1, r3
 800258a:	0010      	movs	r0, r2
 800258c:	f7fd fdce 	bl	800012c <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	d90a      	bls.n	80025b0 <UART_SetConfig+0x2a8>
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d205      	bcs.n	80025b0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	e003      	b.n	80025b8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80025b0:	231e      	movs	r3, #30
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	226a      	movs	r2, #106	@ 0x6a
 80025bc:	2101      	movs	r1, #1
 80025be:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2268      	movs	r2, #104	@ 0x68
 80025c4:	2101      	movs	r1, #1
 80025c6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80025d4:	231e      	movs	r3, #30
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b008      	add	sp, #32
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	cfff69f3 	.word	0xcfff69f3
 80025e8:	ffffcfff 	.word	0xffffcfff
 80025ec:	11fff4ff 	.word	0x11fff4ff
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40004400 	.word	0x40004400
 80025fc:	02dc6c00 	.word	0x02dc6c00
 8002600:	08003664 	.word	0x08003664

08002604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	2208      	movs	r2, #8
 8002612:	4013      	ands	r3, r2
 8002614:	d00b      	beq.n	800262e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a4a      	ldr	r2, [pc, #296]	@ (8002748 <UART_AdvFeatureConfig+0x144>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a43      	ldr	r2, [pc, #268]	@ (800274c <UART_AdvFeatureConfig+0x148>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	2202      	movs	r2, #2
 8002656:	4013      	ands	r3, r2
 8002658:	d00b      	beq.n	8002672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a3b      	ldr	r2, [pc, #236]	@ (8002750 <UART_AdvFeatureConfig+0x14c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	2204      	movs	r2, #4
 8002678:	4013      	ands	r3, r2
 800267a:	d00b      	beq.n	8002694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a34      	ldr	r2, [pc, #208]	@ (8002754 <UART_AdvFeatureConfig+0x150>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	2210      	movs	r2, #16
 800269a:	4013      	ands	r3, r2
 800269c:	d00b      	beq.n	80026b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002758 <UART_AdvFeatureConfig+0x154>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d00b      	beq.n	80026d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a25      	ldr	r2, [pc, #148]	@ (800275c <UART_AdvFeatureConfig+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	4013      	ands	r3, r2
 80026e0:	d01d      	beq.n	800271e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <UART_AdvFeatureConfig+0x15c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	035b      	lsls	r3, r3, #13
 8002702:	429a      	cmp	r2, r3
 8002704:	d10b      	bne.n	800271e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <UART_AdvFeatureConfig+0x160>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	4013      	ands	r3, r2
 8002726:	d00b      	beq.n	8002740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a0e      	ldr	r2, [pc, #56]	@ (8002768 <UART_AdvFeatureConfig+0x164>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	ffff7fff 	.word	0xffff7fff
 800274c:	fffdffff 	.word	0xfffdffff
 8002750:	fffeffff 	.word	0xfffeffff
 8002754:	fffbffff 	.word	0xfffbffff
 8002758:	ffffefff 	.word	0xffffefff
 800275c:	ffffdfff 	.word	0xffffdfff
 8002760:	ffefffff 	.word	0xffefffff
 8002764:	ff9fffff 	.word	0xff9fffff
 8002768:	fff7ffff 	.word	0xfff7ffff

0800276c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b092      	sub	sp, #72	@ 0x48
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2290      	movs	r2, #144	@ 0x90
 8002778:	2100      	movs	r1, #0
 800277a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800277c:	f7fe f9a6 	bl	8000acc <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	4013      	ands	r3, r2
 800278e:	2b08      	cmp	r3, #8
 8002790:	d12d      	bne.n	80027ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002794:	2280      	movs	r2, #128	@ 0x80
 8002796:	0391      	lsls	r1, r2, #14
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4a47      	ldr	r2, [pc, #284]	@ (80028b8 <UART_CheckIdleState+0x14c>)
 800279c:	9200      	str	r2, [sp, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	f000 f88e 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d022      	beq.n	80027ee <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027a8:	f3ef 8310 	mrs	r3, PRIMASK
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b2:	2301      	movs	r3, #1
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	438a      	bics	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2288      	movs	r2, #136	@ 0x88
 80027de:	2120      	movs	r1, #32
 80027e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2284      	movs	r2, #132	@ 0x84
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e060      	b.n	80028b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d146      	bne.n	800288a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	03d1      	lsls	r1, r2, #15
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4a2c      	ldr	r2, [pc, #176]	@ (80028b8 <UART_CheckIdleState+0x14c>)
 8002806:	9200      	str	r2, [sp, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	f000 f859 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d03b      	beq.n	800288a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	60fb      	str	r3, [r7, #12]
  return(result);
 8002818:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4922      	ldr	r1, [pc, #136]	@ (80028bc <UART_CheckIdleState+0x150>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002844:	f3ef 8310 	mrs	r3, PRIMASK
 8002848:	61bb      	str	r3, [r7, #24]
  return(result);
 800284a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
 800284e:	2301      	movs	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	228c      	movs	r2, #140	@ 0x8c
 800287a:	2120      	movs	r1, #32
 800287c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2284      	movs	r2, #132	@ 0x84
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e012      	b.n	80028b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2288      	movs	r2, #136	@ 0x88
 800288e:	2120      	movs	r1, #32
 8002890:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	228c      	movs	r2, #140	@ 0x8c
 8002896:	2120      	movs	r1, #32
 8002898:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2284      	movs	r2, #132	@ 0x84
 80028aa:	2100      	movs	r1, #0
 80028ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b010      	add	sp, #64	@ 0x40
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	01ffffff 	.word	0x01ffffff
 80028bc:	fffffedf 	.word	0xfffffedf

080028c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d0:	e04b      	b.n	800296a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3301      	adds	r3, #1
 80028d6:	d048      	beq.n	800296a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7fe f8f8 	bl	8000acc <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04b      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d035      	beq.n	800296a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2208      	movs	r2, #8
 8002906:	4013      	ands	r3, r2
 8002908:	2b08      	cmp	r3, #8
 800290a:	d111      	bne.n	8002930 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2208      	movs	r2, #8
 8002912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f83c 	bl	8002994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2290      	movs	r2, #144	@ 0x90
 8002920:	2108      	movs	r1, #8
 8002922:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2284      	movs	r2, #132	@ 0x84
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e02c      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	401a      	ands	r2, r3
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	429a      	cmp	r2, r3
 8002942:	d112      	bne.n	800296a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 f81f 	bl	8002994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2290      	movs	r2, #144	@ 0x90
 800295a:	2120      	movs	r1, #32
 800295c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2284      	movs	r2, #132	@ 0x84
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	425a      	negs	r2, r3
 800297a:	4153      	adcs	r3, r2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	001a      	movs	r2, r3
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0a4      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	@ 0x38
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800299c:	f3ef 8310 	mrs	r3, PRIMASK
 80029a0:	617b      	str	r3, [r7, #20]
  return(result);
 80029a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a6:	2301      	movs	r3, #1
 80029a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f383 8810 	msr	PRIMASK, r3
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4926      	ldr	r1, [pc, #152]	@ (8002a58 <UART_EndRxTransfer+0xc4>)
 80029be:	400a      	ands	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029ce:	f3ef 8310 	mrs	r3, PRIMASK
 80029d2:	623b      	str	r3, [r7, #32]
  return(result);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	f383 8810 	msr	PRIMASK, r3
}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	491b      	ldr	r1, [pc, #108]	@ (8002a5c <UART_EndRxTransfer+0xc8>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	f383 8810 	msr	PRIMASK, r3
}
 80029fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d118      	bne.n	8002a3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a08:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a12:	2301      	movs	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2110      	movs	r1, #16
 8002a2a:	438a      	bics	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	228c      	movs	r2, #140	@ 0x8c
 8002a3e:	2120      	movs	r1, #32
 8002a40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b00e      	add	sp, #56	@ 0x38
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	fffffedf 	.word	0xfffffedf
 8002a5c:	effffffe 	.word	0xeffffffe

08002a60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2284      	movs	r2, #132	@ 0x84
 8002a6c:	5c9b      	ldrb	r3, [r3, r2]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_UARTEx_DisableFifoMode+0x16>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e027      	b.n	8002ac6 <HAL_UARTEx_DisableFifoMode+0x66>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2284      	movs	r2, #132	@ 0x84
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2288      	movs	r2, #136	@ 0x88
 8002a82:	2124      	movs	r1, #36	@ 0x24
 8002a84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	438a      	bics	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2288      	movs	r2, #136	@ 0x88
 8002ab8:	2120      	movs	r1, #32
 8002aba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2284      	movs	r2, #132	@ 0x84
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	dfffffff 	.word	0xdfffffff

08002ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2284      	movs	r2, #132	@ 0x84
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e02e      	b.n	8002b4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2284      	movs	r2, #132	@ 0x84
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2288      	movs	r2, #136	@ 0x88
 8002af8:	2124      	movs	r1, #36	@ 0x24
 8002afa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	438a      	bics	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	08d9      	lsrs	r1, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f854 	bl	8002bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2288      	movs	r2, #136	@ 0x88
 8002b3c:	2120      	movs	r1, #32
 8002b3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2284      	movs	r2, #132	@ 0x84
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2284      	movs	r2, #132	@ 0x84
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e02f      	b.n	8002bcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2284      	movs	r2, #132	@ 0x84
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2288      	movs	r2, #136	@ 0x88
 8002b78:	2124      	movs	r1, #36	@ 0x24
 8002b7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 f813 	bl	8002bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2288      	movs	r2, #136	@ 0x88
 8002bbe:	2120      	movs	r1, #32
 8002bc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2284      	movs	r2, #132	@ 0x84
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	f1ffffff 	.word	0xf1ffffff

08002bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	226a      	movs	r2, #106	@ 0x6a
 8002bec:	2101      	movs	r1, #1
 8002bee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2268      	movs	r2, #104	@ 0x68
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002bf8:	e043      	b.n	8002c82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002bfa:	260f      	movs	r6, #15
 8002bfc:	19bb      	adds	r3, r7, r6
 8002bfe:	2208      	movs	r2, #8
 8002c00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c02:	200e      	movs	r0, #14
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	0e5b      	lsrs	r3, r3, #25
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	240d      	movs	r4, #13
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	2107      	movs	r1, #7
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	0f5b      	lsrs	r3, r3, #29
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	250c      	movs	r5, #12
 8002c2a:	197b      	adds	r3, r7, r5
 8002c2c:	2107      	movs	r1, #7
 8002c2e:	400a      	ands	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	197a      	adds	r2, r7, r5
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	4914      	ldr	r1, [pc, #80]	@ (8002c8c <UARTEx_SetNbDataToProcess+0xb4>)
 8002c3c:	5c8a      	ldrb	r2, [r1, r2]
 8002c3e:	435a      	muls	r2, r3
 8002c40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c42:	197b      	adds	r3, r7, r5
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	f7fd faf8 	bl	8000240 <__divsi3>
 8002c50:	0003      	movs	r3, r0
 8002c52:	b299      	uxth	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	226a      	movs	r2, #106	@ 0x6a
 8002c58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c5a:	19bb      	adds	r3, r7, r6
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	193a      	adds	r2, r7, r4
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	490a      	ldr	r1, [pc, #40]	@ (8002c8c <UARTEx_SetNbDataToProcess+0xb4>)
 8002c64:	5c8a      	ldrb	r2, [r1, r2]
 8002c66:	435a      	muls	r2, r3
 8002c68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c72:	0019      	movs	r1, r3
 8002c74:	f7fd fae4 	bl	8000240 <__divsi3>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	b299      	uxth	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2268      	movs	r2, #104	@ 0x68
 8002c80:	5299      	strh	r1, [r3, r2]
}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b005      	add	sp, #20
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	0800367c 	.word	0x0800367c
 8002c90:	08003684 	.word	0x08003684

08002c94 <siprintf>:
 8002c94:	b40e      	push	{r1, r2, r3}
 8002c96:	b500      	push	{lr}
 8002c98:	490b      	ldr	r1, [pc, #44]	@ (8002cc8 <siprintf+0x34>)
 8002c9a:	b09c      	sub	sp, #112	@ 0x70
 8002c9c:	ab1d      	add	r3, sp, #116	@ 0x74
 8002c9e:	9002      	str	r0, [sp, #8]
 8002ca0:	9006      	str	r0, [sp, #24]
 8002ca2:	9107      	str	r1, [sp, #28]
 8002ca4:	9104      	str	r1, [sp, #16]
 8002ca6:	4809      	ldr	r0, [pc, #36]	@ (8002ccc <siprintf+0x38>)
 8002ca8:	4909      	ldr	r1, [pc, #36]	@ (8002cd0 <siprintf+0x3c>)
 8002caa:	cb04      	ldmia	r3!, {r2}
 8002cac:	9105      	str	r1, [sp, #20]
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	a902      	add	r1, sp, #8
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	f000 f99e 	bl	8002ff4 <_svfiprintf_r>
 8002cb8:	2200      	movs	r2, #0
 8002cba:	9b02      	ldr	r3, [sp, #8]
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	b01c      	add	sp, #112	@ 0x70
 8002cc0:	bc08      	pop	{r3}
 8002cc2:	b003      	add	sp, #12
 8002cc4:	4718      	bx	r3
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	7fffffff 	.word	0x7fffffff
 8002ccc:	2000002c 	.word	0x2000002c
 8002cd0:	ffff0208 	.word	0xffff0208

08002cd4 <memset>:
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	1882      	adds	r2, r0, r2
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	7019      	strb	r1, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <__errno>:
 8002ce4:	4b01      	ldr	r3, [pc, #4]	@ (8002cec <__errno+0x8>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	4770      	bx	lr
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	2000002c 	.word	0x2000002c

08002cf0 <__libc_init_array>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	2600      	movs	r6, #0
 8002cf4:	4c0c      	ldr	r4, [pc, #48]	@ (8002d28 <__libc_init_array+0x38>)
 8002cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8002d2c <__libc_init_array+0x3c>)
 8002cf8:	1b64      	subs	r4, r4, r5
 8002cfa:	10a4      	asrs	r4, r4, #2
 8002cfc:	42a6      	cmp	r6, r4
 8002cfe:	d109      	bne.n	8002d14 <__libc_init_array+0x24>
 8002d00:	2600      	movs	r6, #0
 8002d02:	f000 fc65 	bl	80035d0 <_init>
 8002d06:	4c0a      	ldr	r4, [pc, #40]	@ (8002d30 <__libc_init_array+0x40>)
 8002d08:	4d0a      	ldr	r5, [pc, #40]	@ (8002d34 <__libc_init_array+0x44>)
 8002d0a:	1b64      	subs	r4, r4, r5
 8002d0c:	10a4      	asrs	r4, r4, #2
 8002d0e:	42a6      	cmp	r6, r4
 8002d10:	d105      	bne.n	8002d1e <__libc_init_array+0x2e>
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	00b3      	lsls	r3, r6, #2
 8002d16:	58eb      	ldr	r3, [r5, r3]
 8002d18:	4798      	blx	r3
 8002d1a:	3601      	adds	r6, #1
 8002d1c:	e7ee      	b.n	8002cfc <__libc_init_array+0xc>
 8002d1e:	00b3      	lsls	r3, r6, #2
 8002d20:	58eb      	ldr	r3, [r5, r3]
 8002d22:	4798      	blx	r3
 8002d24:	3601      	adds	r6, #1
 8002d26:	e7f2      	b.n	8002d0e <__libc_init_array+0x1e>
 8002d28:	080036c0 	.word	0x080036c0
 8002d2c:	080036c0 	.word	0x080036c0
 8002d30:	080036c4 	.word	0x080036c4
 8002d34:	080036c0 	.word	0x080036c0

08002d38 <__retarget_lock_acquire_recursive>:
 8002d38:	4770      	bx	lr

08002d3a <__retarget_lock_release_recursive>:
 8002d3a:	4770      	bx	lr

08002d3c <_free_r>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	0005      	movs	r5, r0
 8002d40:	1e0c      	subs	r4, r1, #0
 8002d42:	d010      	beq.n	8002d66 <_free_r+0x2a>
 8002d44:	3c04      	subs	r4, #4
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da00      	bge.n	8002d4e <_free_r+0x12>
 8002d4c:	18e4      	adds	r4, r4, r3
 8002d4e:	0028      	movs	r0, r5
 8002d50:	f000 f8e0 	bl	8002f14 <__malloc_lock>
 8002d54:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <_free_r+0x90>)
 8002d56:	6813      	ldr	r3, [r2, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <_free_r+0x2c>
 8002d5c:	6063      	str	r3, [r4, #4]
 8002d5e:	6014      	str	r4, [r2, #0]
 8002d60:	0028      	movs	r0, r5
 8002d62:	f000 f8df 	bl	8002f24 <__malloc_unlock>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	42a3      	cmp	r3, r4
 8002d6a:	d908      	bls.n	8002d7e <_free_r+0x42>
 8002d6c:	6820      	ldr	r0, [r4, #0]
 8002d6e:	1821      	adds	r1, r4, r0
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d1f3      	bne.n	8002d5c <_free_r+0x20>
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	1809      	adds	r1, r1, r0
 8002d7a:	6021      	str	r1, [r4, #0]
 8002d7c:	e7ee      	b.n	8002d5c <_free_r+0x20>
 8002d7e:	001a      	movs	r2, r3
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <_free_r+0x4e>
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	d9f9      	bls.n	8002d7e <_free_r+0x42>
 8002d8a:	6811      	ldr	r1, [r2, #0]
 8002d8c:	1850      	adds	r0, r2, r1
 8002d8e:	42a0      	cmp	r0, r4
 8002d90:	d10b      	bne.n	8002daa <_free_r+0x6e>
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	1809      	adds	r1, r1, r0
 8002d96:	1850      	adds	r0, r2, r1
 8002d98:	6011      	str	r1, [r2, #0]
 8002d9a:	4283      	cmp	r3, r0
 8002d9c:	d1e0      	bne.n	8002d60 <_free_r+0x24>
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	1841      	adds	r1, r0, r1
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	6053      	str	r3, [r2, #4]
 8002da8:	e7da      	b.n	8002d60 <_free_r+0x24>
 8002daa:	42a0      	cmp	r0, r4
 8002dac:	d902      	bls.n	8002db4 <_free_r+0x78>
 8002dae:	230c      	movs	r3, #12
 8002db0:	602b      	str	r3, [r5, #0]
 8002db2:	e7d5      	b.n	8002d60 <_free_r+0x24>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	1821      	adds	r1, r4, r0
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d103      	bne.n	8002dc4 <_free_r+0x88>
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	1809      	adds	r1, r1, r0
 8002dc2:	6021      	str	r1, [r4, #0]
 8002dc4:	6063      	str	r3, [r4, #4]
 8002dc6:	6054      	str	r4, [r2, #4]
 8002dc8:	e7ca      	b.n	8002d60 <_free_r+0x24>
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	20000300 	.word	0x20000300

08002dd0 <sbrk_aligned>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8002e10 <sbrk_aligned+0x40>)
 8002dd4:	000d      	movs	r5, r1
 8002dd6:	6831      	ldr	r1, [r6, #0]
 8002dd8:	0004      	movs	r4, r0
 8002dda:	2900      	cmp	r1, #0
 8002ddc:	d102      	bne.n	8002de4 <sbrk_aligned+0x14>
 8002dde:	f000 fb99 	bl	8003514 <_sbrk_r>
 8002de2:	6030      	str	r0, [r6, #0]
 8002de4:	0029      	movs	r1, r5
 8002de6:	0020      	movs	r0, r4
 8002de8:	f000 fb94 	bl	8003514 <_sbrk_r>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d103      	bne.n	8002df8 <sbrk_aligned+0x28>
 8002df0:	2501      	movs	r5, #1
 8002df2:	426d      	negs	r5, r5
 8002df4:	0028      	movs	r0, r5
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	2303      	movs	r3, #3
 8002dfa:	1cc5      	adds	r5, r0, #3
 8002dfc:	439d      	bics	r5, r3
 8002dfe:	42a8      	cmp	r0, r5
 8002e00:	d0f8      	beq.n	8002df4 <sbrk_aligned+0x24>
 8002e02:	1a29      	subs	r1, r5, r0
 8002e04:	0020      	movs	r0, r4
 8002e06:	f000 fb85 	bl	8003514 <_sbrk_r>
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d1f2      	bne.n	8002df4 <sbrk_aligned+0x24>
 8002e0e:	e7ef      	b.n	8002df0 <sbrk_aligned+0x20>
 8002e10:	200002fc 	.word	0x200002fc

08002e14 <_malloc_r>:
 8002e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e16:	2203      	movs	r2, #3
 8002e18:	1ccb      	adds	r3, r1, #3
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	0005      	movs	r5, r0
 8002e20:	001f      	movs	r7, r3
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d234      	bcs.n	8002e90 <_malloc_r+0x7c>
 8002e26:	270c      	movs	r7, #12
 8002e28:	42b9      	cmp	r1, r7
 8002e2a:	d833      	bhi.n	8002e94 <_malloc_r+0x80>
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 f871 	bl	8002f14 <__malloc_lock>
 8002e32:	4e37      	ldr	r6, [pc, #220]	@ (8002f10 <_malloc_r+0xfc>)
 8002e34:	6833      	ldr	r3, [r6, #0]
 8002e36:	001c      	movs	r4, r3
 8002e38:	2c00      	cmp	r4, #0
 8002e3a:	d12f      	bne.n	8002e9c <_malloc_r+0x88>
 8002e3c:	0039      	movs	r1, r7
 8002e3e:	0028      	movs	r0, r5
 8002e40:	f7ff ffc6 	bl	8002dd0 <sbrk_aligned>
 8002e44:	0004      	movs	r4, r0
 8002e46:	1c43      	adds	r3, r0, #1
 8002e48:	d15f      	bne.n	8002f0a <_malloc_r+0xf6>
 8002e4a:	6834      	ldr	r4, [r6, #0]
 8002e4c:	9400      	str	r4, [sp, #0]
 8002e4e:	9b00      	ldr	r3, [sp, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d14a      	bne.n	8002eea <_malloc_r+0xd6>
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	d052      	beq.n	8002efe <_malloc_r+0xea>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	18e3      	adds	r3, r4, r3
 8002e5e:	9900      	ldr	r1, [sp, #0]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f000 fb57 	bl	8003514 <_sbrk_r>
 8002e66:	9b01      	ldr	r3, [sp, #4]
 8002e68:	4283      	cmp	r3, r0
 8002e6a:	d148      	bne.n	8002efe <_malloc_r+0xea>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	0028      	movs	r0, r5
 8002e70:	1aff      	subs	r7, r7, r3
 8002e72:	0039      	movs	r1, r7
 8002e74:	f7ff ffac 	bl	8002dd0 <sbrk_aligned>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d040      	beq.n	8002efe <_malloc_r+0xea>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	6833      	ldr	r3, [r6, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d133      	bne.n	8002ef2 <_malloc_r+0xde>
 8002e8a:	9b00      	ldr	r3, [sp, #0]
 8002e8c:	6033      	str	r3, [r6, #0]
 8002e8e:	e019      	b.n	8002ec4 <_malloc_r+0xb0>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dac9      	bge.n	8002e28 <_malloc_r+0x14>
 8002e94:	230c      	movs	r3, #12
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	2000      	movs	r0, #0
 8002e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e9c:	6821      	ldr	r1, [r4, #0]
 8002e9e:	1bc9      	subs	r1, r1, r7
 8002ea0:	d420      	bmi.n	8002ee4 <_malloc_r+0xd0>
 8002ea2:	290b      	cmp	r1, #11
 8002ea4:	d90a      	bls.n	8002ebc <_malloc_r+0xa8>
 8002ea6:	19e2      	adds	r2, r4, r7
 8002ea8:	6027      	str	r7, [r4, #0]
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	d104      	bne.n	8002eb8 <_malloc_r+0xa4>
 8002eae:	6032      	str	r2, [r6, #0]
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	6053      	str	r3, [r2, #4]
 8002eb6:	e005      	b.n	8002ec4 <_malloc_r+0xb0>
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e7f9      	b.n	8002eb0 <_malloc_r+0x9c>
 8002ebc:	6862      	ldr	r2, [r4, #4]
 8002ebe:	42a3      	cmp	r3, r4
 8002ec0:	d10e      	bne.n	8002ee0 <_malloc_r+0xcc>
 8002ec2:	6032      	str	r2, [r6, #0]
 8002ec4:	0028      	movs	r0, r5
 8002ec6:	f000 f82d 	bl	8002f24 <__malloc_unlock>
 8002eca:	0020      	movs	r0, r4
 8002ecc:	2207      	movs	r2, #7
 8002ece:	300b      	adds	r0, #11
 8002ed0:	1d23      	adds	r3, r4, #4
 8002ed2:	4390      	bics	r0, r2
 8002ed4:	1ac2      	subs	r2, r0, r3
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d0df      	beq.n	8002e9a <_malloc_r+0x86>
 8002eda:	1a1b      	subs	r3, r3, r0
 8002edc:	50a3      	str	r3, [r4, r2]
 8002ede:	e7dc      	b.n	8002e9a <_malloc_r+0x86>
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e7ef      	b.n	8002ec4 <_malloc_r+0xb0>
 8002ee4:	0023      	movs	r3, r4
 8002ee6:	6864      	ldr	r4, [r4, #4]
 8002ee8:	e7a6      	b.n	8002e38 <_malloc_r+0x24>
 8002eea:	9c00      	ldr	r4, [sp, #0]
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	e7ad      	b.n	8002e4e <_malloc_r+0x3a>
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	d1fb      	bne.n	8002ef2 <_malloc_r+0xde>
 8002efa:	2300      	movs	r3, #0
 8002efc:	e7da      	b.n	8002eb4 <_malloc_r+0xa0>
 8002efe:	230c      	movs	r3, #12
 8002f00:	0028      	movs	r0, r5
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	f000 f80e 	bl	8002f24 <__malloc_unlock>
 8002f08:	e7c6      	b.n	8002e98 <_malloc_r+0x84>
 8002f0a:	6007      	str	r7, [r0, #0]
 8002f0c:	e7da      	b.n	8002ec4 <_malloc_r+0xb0>
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	20000300 	.word	0x20000300

08002f14 <__malloc_lock>:
 8002f14:	b510      	push	{r4, lr}
 8002f16:	4802      	ldr	r0, [pc, #8]	@ (8002f20 <__malloc_lock+0xc>)
 8002f18:	f7ff ff0e 	bl	8002d38 <__retarget_lock_acquire_recursive>
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	200002f8 	.word	0x200002f8

08002f24 <__malloc_unlock>:
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <__malloc_unlock+0xc>)
 8002f28:	f7ff ff07 	bl	8002d3a <__retarget_lock_release_recursive>
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	200002f8 	.word	0x200002f8

08002f34 <__ssputs_r>:
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	688e      	ldr	r6, [r1, #8]
 8002f38:	b085      	sub	sp, #20
 8002f3a:	001f      	movs	r7, r3
 8002f3c:	000c      	movs	r4, r1
 8002f3e:	680b      	ldr	r3, [r1, #0]
 8002f40:	9002      	str	r0, [sp, #8]
 8002f42:	9203      	str	r2, [sp, #12]
 8002f44:	42be      	cmp	r6, r7
 8002f46:	d830      	bhi.n	8002faa <__ssputs_r+0x76>
 8002f48:	210c      	movs	r1, #12
 8002f4a:	5e62      	ldrsh	r2, [r4, r1]
 8002f4c:	2190      	movs	r1, #144	@ 0x90
 8002f4e:	00c9      	lsls	r1, r1, #3
 8002f50:	420a      	tst	r2, r1
 8002f52:	d028      	beq.n	8002fa6 <__ssputs_r+0x72>
 8002f54:	2003      	movs	r0, #3
 8002f56:	6921      	ldr	r1, [r4, #16]
 8002f58:	1a5b      	subs	r3, r3, r1
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6963      	ldr	r3, [r4, #20]
 8002f5e:	4343      	muls	r3, r0
 8002f60:	9801      	ldr	r0, [sp, #4]
 8002f62:	0fdd      	lsrs	r5, r3, #31
 8002f64:	18ed      	adds	r5, r5, r3
 8002f66:	1c7b      	adds	r3, r7, #1
 8002f68:	181b      	adds	r3, r3, r0
 8002f6a:	106d      	asrs	r5, r5, #1
 8002f6c:	42ab      	cmp	r3, r5
 8002f6e:	d900      	bls.n	8002f72 <__ssputs_r+0x3e>
 8002f70:	001d      	movs	r5, r3
 8002f72:	0552      	lsls	r2, r2, #21
 8002f74:	d528      	bpl.n	8002fc8 <__ssputs_r+0x94>
 8002f76:	0029      	movs	r1, r5
 8002f78:	9802      	ldr	r0, [sp, #8]
 8002f7a:	f7ff ff4b 	bl	8002e14 <_malloc_r>
 8002f7e:	1e06      	subs	r6, r0, #0
 8002f80:	d02c      	beq.n	8002fdc <__ssputs_r+0xa8>
 8002f82:	9a01      	ldr	r2, [sp, #4]
 8002f84:	6921      	ldr	r1, [r4, #16]
 8002f86:	f000 fae2 	bl	800354e <memcpy>
 8002f8a:	89a2      	ldrh	r2, [r4, #12]
 8002f8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <__ssputs_r+0xbc>)
 8002f8e:	401a      	ands	r2, r3
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	4313      	orrs	r3, r2
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	6126      	str	r6, [r4, #16]
 8002f9a:	18f6      	adds	r6, r6, r3
 8002f9c:	6026      	str	r6, [r4, #0]
 8002f9e:	003e      	movs	r6, r7
 8002fa0:	6165      	str	r5, [r4, #20]
 8002fa2:	1aed      	subs	r5, r5, r3
 8002fa4:	60a5      	str	r5, [r4, #8]
 8002fa6:	42be      	cmp	r6, r7
 8002fa8:	d900      	bls.n	8002fac <__ssputs_r+0x78>
 8002faa:	003e      	movs	r6, r7
 8002fac:	0032      	movs	r2, r6
 8002fae:	9903      	ldr	r1, [sp, #12]
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	f000 fa9b 	bl	80034ec <memmove>
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	68a3      	ldr	r3, [r4, #8]
 8002fba:	1b9b      	subs	r3, r3, r6
 8002fbc:	60a3      	str	r3, [r4, #8]
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	199b      	adds	r3, r3, r6
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	b005      	add	sp, #20
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc8:	002a      	movs	r2, r5
 8002fca:	9802      	ldr	r0, [sp, #8]
 8002fcc:	f000 fac8 	bl	8003560 <_realloc_r>
 8002fd0:	1e06      	subs	r6, r0, #0
 8002fd2:	d1e0      	bne.n	8002f96 <__ssputs_r+0x62>
 8002fd4:	6921      	ldr	r1, [r4, #16]
 8002fd6:	9802      	ldr	r0, [sp, #8]
 8002fd8:	f7ff feb0 	bl	8002d3c <_free_r>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	2001      	movs	r0, #1
 8002fe0:	9a02      	ldr	r2, [sp, #8]
 8002fe2:	4240      	negs	r0, r0
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	89a2      	ldrh	r2, [r4, #12]
 8002fe8:	3334      	adds	r3, #52	@ 0x34
 8002fea:	4313      	orrs	r3, r2
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	e7e9      	b.n	8002fc4 <__ssputs_r+0x90>
 8002ff0:	fffffb7f 	.word	0xfffffb7f

08002ff4 <_svfiprintf_r>:
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	b0a1      	sub	sp, #132	@ 0x84
 8002ff8:	9003      	str	r0, [sp, #12]
 8002ffa:	001d      	movs	r5, r3
 8002ffc:	898b      	ldrh	r3, [r1, #12]
 8002ffe:	000f      	movs	r7, r1
 8003000:	0016      	movs	r6, r2
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	d511      	bpl.n	800302a <_svfiprintf_r+0x36>
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <_svfiprintf_r+0x36>
 800300c:	2140      	movs	r1, #64	@ 0x40
 800300e:	f7ff ff01 	bl	8002e14 <_malloc_r>
 8003012:	6038      	str	r0, [r7, #0]
 8003014:	6138      	str	r0, [r7, #16]
 8003016:	2800      	cmp	r0, #0
 8003018:	d105      	bne.n	8003026 <_svfiprintf_r+0x32>
 800301a:	230c      	movs	r3, #12
 800301c:	9a03      	ldr	r2, [sp, #12]
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	2001      	movs	r0, #1
 8003022:	4240      	negs	r0, r0
 8003024:	e0cf      	b.n	80031c6 <_svfiprintf_r+0x1d2>
 8003026:	2340      	movs	r3, #64	@ 0x40
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	2300      	movs	r3, #0
 800302c:	ac08      	add	r4, sp, #32
 800302e:	6163      	str	r3, [r4, #20]
 8003030:	3320      	adds	r3, #32
 8003032:	7663      	strb	r3, [r4, #25]
 8003034:	3310      	adds	r3, #16
 8003036:	76a3      	strb	r3, [r4, #26]
 8003038:	9507      	str	r5, [sp, #28]
 800303a:	0035      	movs	r5, r6
 800303c:	782b      	ldrb	r3, [r5, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <_svfiprintf_r+0x52>
 8003042:	2b25      	cmp	r3, #37	@ 0x25
 8003044:	d148      	bne.n	80030d8 <_svfiprintf_r+0xe4>
 8003046:	1bab      	subs	r3, r5, r6
 8003048:	9305      	str	r3, [sp, #20]
 800304a:	42b5      	cmp	r5, r6
 800304c:	d00b      	beq.n	8003066 <_svfiprintf_r+0x72>
 800304e:	0032      	movs	r2, r6
 8003050:	0039      	movs	r1, r7
 8003052:	9803      	ldr	r0, [sp, #12]
 8003054:	f7ff ff6e 	bl	8002f34 <__ssputs_r>
 8003058:	3001      	adds	r0, #1
 800305a:	d100      	bne.n	800305e <_svfiprintf_r+0x6a>
 800305c:	e0ae      	b.n	80031bc <_svfiprintf_r+0x1c8>
 800305e:	6963      	ldr	r3, [r4, #20]
 8003060:	9a05      	ldr	r2, [sp, #20]
 8003062:	189b      	adds	r3, r3, r2
 8003064:	6163      	str	r3, [r4, #20]
 8003066:	782b      	ldrb	r3, [r5, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d100      	bne.n	800306e <_svfiprintf_r+0x7a>
 800306c:	e0a6      	b.n	80031bc <_svfiprintf_r+0x1c8>
 800306e:	2201      	movs	r2, #1
 8003070:	2300      	movs	r3, #0
 8003072:	4252      	negs	r2, r2
 8003074:	6062      	str	r2, [r4, #4]
 8003076:	a904      	add	r1, sp, #16
 8003078:	3254      	adds	r2, #84	@ 0x54
 800307a:	1852      	adds	r2, r2, r1
 800307c:	1c6e      	adds	r6, r5, #1
 800307e:	6023      	str	r3, [r4, #0]
 8003080:	60e3      	str	r3, [r4, #12]
 8003082:	60a3      	str	r3, [r4, #8]
 8003084:	7013      	strb	r3, [r2, #0]
 8003086:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003088:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <_svfiprintf_r+0x1e8>)
 800308a:	2205      	movs	r2, #5
 800308c:	0018      	movs	r0, r3
 800308e:	7831      	ldrb	r1, [r6, #0]
 8003090:	9305      	str	r3, [sp, #20]
 8003092:	f000 fa51 	bl	8003538 <memchr>
 8003096:	1c75      	adds	r5, r6, #1
 8003098:	2800      	cmp	r0, #0
 800309a:	d11f      	bne.n	80030dc <_svfiprintf_r+0xe8>
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	06d3      	lsls	r3, r2, #27
 80030a0:	d504      	bpl.n	80030ac <_svfiprintf_r+0xb8>
 80030a2:	2353      	movs	r3, #83	@ 0x53
 80030a4:	a904      	add	r1, sp, #16
 80030a6:	185b      	adds	r3, r3, r1
 80030a8:	2120      	movs	r1, #32
 80030aa:	7019      	strb	r1, [r3, #0]
 80030ac:	0713      	lsls	r3, r2, #28
 80030ae:	d504      	bpl.n	80030ba <_svfiprintf_r+0xc6>
 80030b0:	2353      	movs	r3, #83	@ 0x53
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	185b      	adds	r3, r3, r1
 80030b6:	212b      	movs	r1, #43	@ 0x2b
 80030b8:	7019      	strb	r1, [r3, #0]
 80030ba:	7833      	ldrb	r3, [r6, #0]
 80030bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030be:	d016      	beq.n	80030ee <_svfiprintf_r+0xfa>
 80030c0:	0035      	movs	r5, r6
 80030c2:	2100      	movs	r1, #0
 80030c4:	200a      	movs	r0, #10
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	782a      	ldrb	r2, [r5, #0]
 80030ca:	1c6e      	adds	r6, r5, #1
 80030cc:	3a30      	subs	r2, #48	@ 0x30
 80030ce:	2a09      	cmp	r2, #9
 80030d0:	d950      	bls.n	8003174 <_svfiprintf_r+0x180>
 80030d2:	2900      	cmp	r1, #0
 80030d4:	d111      	bne.n	80030fa <_svfiprintf_r+0x106>
 80030d6:	e017      	b.n	8003108 <_svfiprintf_r+0x114>
 80030d8:	3501      	adds	r5, #1
 80030da:	e7af      	b.n	800303c <_svfiprintf_r+0x48>
 80030dc:	9b05      	ldr	r3, [sp, #20]
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	1ac0      	subs	r0, r0, r3
 80030e2:	2301      	movs	r3, #1
 80030e4:	4083      	lsls	r3, r0
 80030e6:	4313      	orrs	r3, r2
 80030e8:	002e      	movs	r6, r5
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	e7cc      	b.n	8003088 <_svfiprintf_r+0x94>
 80030ee:	9b07      	ldr	r3, [sp, #28]
 80030f0:	1d19      	adds	r1, r3, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	9107      	str	r1, [sp, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db01      	blt.n	80030fe <_svfiprintf_r+0x10a>
 80030fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030fc:	e004      	b.n	8003108 <_svfiprintf_r+0x114>
 80030fe:	425b      	negs	r3, r3
 8003100:	60e3      	str	r3, [r4, #12]
 8003102:	2302      	movs	r3, #2
 8003104:	4313      	orrs	r3, r2
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	782b      	ldrb	r3, [r5, #0]
 800310a:	2b2e      	cmp	r3, #46	@ 0x2e
 800310c:	d10c      	bne.n	8003128 <_svfiprintf_r+0x134>
 800310e:	786b      	ldrb	r3, [r5, #1]
 8003110:	2b2a      	cmp	r3, #42	@ 0x2a
 8003112:	d134      	bne.n	800317e <_svfiprintf_r+0x18a>
 8003114:	9b07      	ldr	r3, [sp, #28]
 8003116:	3502      	adds	r5, #2
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	9207      	str	r2, [sp, #28]
 800311e:	2b00      	cmp	r3, #0
 8003120:	da01      	bge.n	8003126 <_svfiprintf_r+0x132>
 8003122:	2301      	movs	r3, #1
 8003124:	425b      	negs	r3, r3
 8003126:	9309      	str	r3, [sp, #36]	@ 0x24
 8003128:	4e2d      	ldr	r6, [pc, #180]	@ (80031e0 <_svfiprintf_r+0x1ec>)
 800312a:	2203      	movs	r2, #3
 800312c:	0030      	movs	r0, r6
 800312e:	7829      	ldrb	r1, [r5, #0]
 8003130:	f000 fa02 	bl	8003538 <memchr>
 8003134:	2800      	cmp	r0, #0
 8003136:	d006      	beq.n	8003146 <_svfiprintf_r+0x152>
 8003138:	2340      	movs	r3, #64	@ 0x40
 800313a:	1b80      	subs	r0, r0, r6
 800313c:	4083      	lsls	r3, r0
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	3501      	adds	r5, #1
 8003142:	4313      	orrs	r3, r2
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	7829      	ldrb	r1, [r5, #0]
 8003148:	2206      	movs	r2, #6
 800314a:	4826      	ldr	r0, [pc, #152]	@ (80031e4 <_svfiprintf_r+0x1f0>)
 800314c:	1c6e      	adds	r6, r5, #1
 800314e:	7621      	strb	r1, [r4, #24]
 8003150:	f000 f9f2 	bl	8003538 <memchr>
 8003154:	2800      	cmp	r0, #0
 8003156:	d038      	beq.n	80031ca <_svfiprintf_r+0x1d6>
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <_svfiprintf_r+0x1f4>)
 800315a:	2b00      	cmp	r3, #0
 800315c:	d122      	bne.n	80031a4 <_svfiprintf_r+0x1b0>
 800315e:	2207      	movs	r2, #7
 8003160:	9b07      	ldr	r3, [sp, #28]
 8003162:	3307      	adds	r3, #7
 8003164:	4393      	bics	r3, r2
 8003166:	3308      	adds	r3, #8
 8003168:	9307      	str	r3, [sp, #28]
 800316a:	6963      	ldr	r3, [r4, #20]
 800316c:	9a04      	ldr	r2, [sp, #16]
 800316e:	189b      	adds	r3, r3, r2
 8003170:	6163      	str	r3, [r4, #20]
 8003172:	e762      	b.n	800303a <_svfiprintf_r+0x46>
 8003174:	4343      	muls	r3, r0
 8003176:	0035      	movs	r5, r6
 8003178:	2101      	movs	r1, #1
 800317a:	189b      	adds	r3, r3, r2
 800317c:	e7a4      	b.n	80030c8 <_svfiprintf_r+0xd4>
 800317e:	2300      	movs	r3, #0
 8003180:	200a      	movs	r0, #10
 8003182:	0019      	movs	r1, r3
 8003184:	3501      	adds	r5, #1
 8003186:	6063      	str	r3, [r4, #4]
 8003188:	782a      	ldrb	r2, [r5, #0]
 800318a:	1c6e      	adds	r6, r5, #1
 800318c:	3a30      	subs	r2, #48	@ 0x30
 800318e:	2a09      	cmp	r2, #9
 8003190:	d903      	bls.n	800319a <_svfiprintf_r+0x1a6>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0c8      	beq.n	8003128 <_svfiprintf_r+0x134>
 8003196:	9109      	str	r1, [sp, #36]	@ 0x24
 8003198:	e7c6      	b.n	8003128 <_svfiprintf_r+0x134>
 800319a:	4341      	muls	r1, r0
 800319c:	0035      	movs	r5, r6
 800319e:	2301      	movs	r3, #1
 80031a0:	1889      	adds	r1, r1, r2
 80031a2:	e7f1      	b.n	8003188 <_svfiprintf_r+0x194>
 80031a4:	aa07      	add	r2, sp, #28
 80031a6:	9200      	str	r2, [sp, #0]
 80031a8:	0021      	movs	r1, r4
 80031aa:	003a      	movs	r2, r7
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <_svfiprintf_r+0x1f8>)
 80031ae:	9803      	ldr	r0, [sp, #12]
 80031b0:	e000      	b.n	80031b4 <_svfiprintf_r+0x1c0>
 80031b2:	bf00      	nop
 80031b4:	9004      	str	r0, [sp, #16]
 80031b6:	9b04      	ldr	r3, [sp, #16]
 80031b8:	3301      	adds	r3, #1
 80031ba:	d1d6      	bne.n	800316a <_svfiprintf_r+0x176>
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80031c0:	065b      	lsls	r3, r3, #25
 80031c2:	d500      	bpl.n	80031c6 <_svfiprintf_r+0x1d2>
 80031c4:	e72c      	b.n	8003020 <_svfiprintf_r+0x2c>
 80031c6:	b021      	add	sp, #132	@ 0x84
 80031c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ca:	aa07      	add	r2, sp, #28
 80031cc:	9200      	str	r2, [sp, #0]
 80031ce:	0021      	movs	r1, r4
 80031d0:	003a      	movs	r2, r7
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <_svfiprintf_r+0x1f8>)
 80031d4:	9803      	ldr	r0, [sp, #12]
 80031d6:	f000 f87b 	bl	80032d0 <_printf_i>
 80031da:	e7eb      	b.n	80031b4 <_svfiprintf_r+0x1c0>
 80031dc:	0800368c 	.word	0x0800368c
 80031e0:	08003692 	.word	0x08003692
 80031e4:	08003696 	.word	0x08003696
 80031e8:	00000000 	.word	0x00000000
 80031ec:	08002f35 	.word	0x08002f35

080031f0 <_printf_common>:
 80031f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031f2:	0016      	movs	r6, r2
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	688a      	ldr	r2, [r1, #8]
 80031f8:	690b      	ldr	r3, [r1, #16]
 80031fa:	000c      	movs	r4, r1
 80031fc:	9000      	str	r0, [sp, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	da00      	bge.n	8003204 <_printf_common+0x14>
 8003202:	0013      	movs	r3, r2
 8003204:	0022      	movs	r2, r4
 8003206:	6033      	str	r3, [r6, #0]
 8003208:	3243      	adds	r2, #67	@ 0x43
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	2a00      	cmp	r2, #0
 800320e:	d001      	beq.n	8003214 <_printf_common+0x24>
 8003210:	3301      	adds	r3, #1
 8003212:	6033      	str	r3, [r6, #0]
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	d502      	bpl.n	8003220 <_printf_common+0x30>
 800321a:	6833      	ldr	r3, [r6, #0]
 800321c:	3302      	adds	r3, #2
 800321e:	6033      	str	r3, [r6, #0]
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	2306      	movs	r3, #6
 8003224:	0015      	movs	r5, r2
 8003226:	401d      	ands	r5, r3
 8003228:	421a      	tst	r2, r3
 800322a:	d027      	beq.n	800327c <_printf_common+0x8c>
 800322c:	0023      	movs	r3, r4
 800322e:	3343      	adds	r3, #67	@ 0x43
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	4193      	sbcs	r3, r2
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	0692      	lsls	r2, r2, #26
 800323a:	d430      	bmi.n	800329e <_printf_common+0xae>
 800323c:	0022      	movs	r2, r4
 800323e:	9901      	ldr	r1, [sp, #4]
 8003240:	9800      	ldr	r0, [sp, #0]
 8003242:	9d08      	ldr	r5, [sp, #32]
 8003244:	3243      	adds	r2, #67	@ 0x43
 8003246:	47a8      	blx	r5
 8003248:	3001      	adds	r0, #1
 800324a:	d025      	beq.n	8003298 <_printf_common+0xa8>
 800324c:	2206      	movs	r2, #6
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	2500      	movs	r5, #0
 8003252:	4013      	ands	r3, r2
 8003254:	2b04      	cmp	r3, #4
 8003256:	d105      	bne.n	8003264 <_printf_common+0x74>
 8003258:	6833      	ldr	r3, [r6, #0]
 800325a:	68e5      	ldr	r5, [r4, #12]
 800325c:	1aed      	subs	r5, r5, r3
 800325e:	43eb      	mvns	r3, r5
 8003260:	17db      	asrs	r3, r3, #31
 8003262:	401d      	ands	r5, r3
 8003264:	68a3      	ldr	r3, [r4, #8]
 8003266:	6922      	ldr	r2, [r4, #16]
 8003268:	4293      	cmp	r3, r2
 800326a:	dd01      	ble.n	8003270 <_printf_common+0x80>
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	18ed      	adds	r5, r5, r3
 8003270:	2600      	movs	r6, #0
 8003272:	42b5      	cmp	r5, r6
 8003274:	d120      	bne.n	80032b8 <_printf_common+0xc8>
 8003276:	2000      	movs	r0, #0
 8003278:	e010      	b.n	800329c <_printf_common+0xac>
 800327a:	3501      	adds	r5, #1
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	6832      	ldr	r2, [r6, #0]
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	42ab      	cmp	r3, r5
 8003284:	ddd2      	ble.n	800322c <_printf_common+0x3c>
 8003286:	0022      	movs	r2, r4
 8003288:	2301      	movs	r3, #1
 800328a:	9901      	ldr	r1, [sp, #4]
 800328c:	9800      	ldr	r0, [sp, #0]
 800328e:	9f08      	ldr	r7, [sp, #32]
 8003290:	3219      	adds	r2, #25
 8003292:	47b8      	blx	r7
 8003294:	3001      	adds	r0, #1
 8003296:	d1f0      	bne.n	800327a <_printf_common+0x8a>
 8003298:	2001      	movs	r0, #1
 800329a:	4240      	negs	r0, r0
 800329c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800329e:	2030      	movs	r0, #48	@ 0x30
 80032a0:	18e1      	adds	r1, r4, r3
 80032a2:	3143      	adds	r1, #67	@ 0x43
 80032a4:	7008      	strb	r0, [r1, #0]
 80032a6:	0021      	movs	r1, r4
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	3145      	adds	r1, #69	@ 0x45
 80032ac:	7809      	ldrb	r1, [r1, #0]
 80032ae:	18a2      	adds	r2, r4, r2
 80032b0:	3243      	adds	r2, #67	@ 0x43
 80032b2:	3302      	adds	r3, #2
 80032b4:	7011      	strb	r1, [r2, #0]
 80032b6:	e7c1      	b.n	800323c <_printf_common+0x4c>
 80032b8:	0022      	movs	r2, r4
 80032ba:	2301      	movs	r3, #1
 80032bc:	9901      	ldr	r1, [sp, #4]
 80032be:	9800      	ldr	r0, [sp, #0]
 80032c0:	9f08      	ldr	r7, [sp, #32]
 80032c2:	321a      	adds	r2, #26
 80032c4:	47b8      	blx	r7
 80032c6:	3001      	adds	r0, #1
 80032c8:	d0e6      	beq.n	8003298 <_printf_common+0xa8>
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7d1      	b.n	8003272 <_printf_common+0x82>
	...

080032d0 <_printf_i>:
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b08b      	sub	sp, #44	@ 0x2c
 80032d4:	9206      	str	r2, [sp, #24]
 80032d6:	000a      	movs	r2, r1
 80032d8:	3243      	adds	r2, #67	@ 0x43
 80032da:	9307      	str	r3, [sp, #28]
 80032dc:	9005      	str	r0, [sp, #20]
 80032de:	9203      	str	r2, [sp, #12]
 80032e0:	7e0a      	ldrb	r2, [r1, #24]
 80032e2:	000c      	movs	r4, r1
 80032e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80032e6:	2a78      	cmp	r2, #120	@ 0x78
 80032e8:	d809      	bhi.n	80032fe <_printf_i+0x2e>
 80032ea:	2a62      	cmp	r2, #98	@ 0x62
 80032ec:	d80b      	bhi.n	8003306 <_printf_i+0x36>
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d100      	bne.n	80032f4 <_printf_i+0x24>
 80032f2:	e0bc      	b.n	800346e <_printf_i+0x19e>
 80032f4:	497b      	ldr	r1, [pc, #492]	@ (80034e4 <_printf_i+0x214>)
 80032f6:	9104      	str	r1, [sp, #16]
 80032f8:	2a58      	cmp	r2, #88	@ 0x58
 80032fa:	d100      	bne.n	80032fe <_printf_i+0x2e>
 80032fc:	e090      	b.n	8003420 <_printf_i+0x150>
 80032fe:	0025      	movs	r5, r4
 8003300:	3542      	adds	r5, #66	@ 0x42
 8003302:	702a      	strb	r2, [r5, #0]
 8003304:	e022      	b.n	800334c <_printf_i+0x7c>
 8003306:	0010      	movs	r0, r2
 8003308:	3863      	subs	r0, #99	@ 0x63
 800330a:	2815      	cmp	r0, #21
 800330c:	d8f7      	bhi.n	80032fe <_printf_i+0x2e>
 800330e:	f7fc ff03 	bl	8000118 <__gnu_thumb1_case_shi>
 8003312:	0016      	.short	0x0016
 8003314:	fff6001f 	.word	0xfff6001f
 8003318:	fff6fff6 	.word	0xfff6fff6
 800331c:	001ffff6 	.word	0x001ffff6
 8003320:	fff6fff6 	.word	0xfff6fff6
 8003324:	fff6fff6 	.word	0xfff6fff6
 8003328:	003600a1 	.word	0x003600a1
 800332c:	fff60080 	.word	0xfff60080
 8003330:	00b2fff6 	.word	0x00b2fff6
 8003334:	0036fff6 	.word	0x0036fff6
 8003338:	fff6fff6 	.word	0xfff6fff6
 800333c:	0084      	.short	0x0084
 800333e:	0025      	movs	r5, r4
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	3542      	adds	r5, #66	@ 0x42
 8003344:	1d11      	adds	r1, r2, #4
 8003346:	6019      	str	r1, [r3, #0]
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	702b      	strb	r3, [r5, #0]
 800334c:	2301      	movs	r3, #1
 800334e:	e0a0      	b.n	8003492 <_printf_i+0x1c2>
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	6809      	ldr	r1, [r1, #0]
 8003354:	1d02      	adds	r2, r0, #4
 8003356:	060d      	lsls	r5, r1, #24
 8003358:	d50b      	bpl.n	8003372 <_printf_i+0xa2>
 800335a:	6806      	ldr	r6, [r0, #0]
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	2e00      	cmp	r6, #0
 8003360:	da03      	bge.n	800336a <_printf_i+0x9a>
 8003362:	232d      	movs	r3, #45	@ 0x2d
 8003364:	9a03      	ldr	r2, [sp, #12]
 8003366:	4276      	negs	r6, r6
 8003368:	7013      	strb	r3, [r2, #0]
 800336a:	4b5e      	ldr	r3, [pc, #376]	@ (80034e4 <_printf_i+0x214>)
 800336c:	270a      	movs	r7, #10
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	e018      	b.n	80033a4 <_printf_i+0xd4>
 8003372:	6806      	ldr	r6, [r0, #0]
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	0649      	lsls	r1, r1, #25
 8003378:	d5f1      	bpl.n	800335e <_printf_i+0x8e>
 800337a:	b236      	sxth	r6, r6
 800337c:	e7ef      	b.n	800335e <_printf_i+0x8e>
 800337e:	6808      	ldr	r0, [r1, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	c940      	ldmia	r1!, {r6}
 8003384:	0605      	lsls	r5, r0, #24
 8003386:	d402      	bmi.n	800338e <_printf_i+0xbe>
 8003388:	0640      	lsls	r0, r0, #25
 800338a:	d500      	bpl.n	800338e <_printf_i+0xbe>
 800338c:	b2b6      	uxth	r6, r6
 800338e:	6019      	str	r1, [r3, #0]
 8003390:	4b54      	ldr	r3, [pc, #336]	@ (80034e4 <_printf_i+0x214>)
 8003392:	270a      	movs	r7, #10
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	2a6f      	cmp	r2, #111	@ 0x6f
 8003398:	d100      	bne.n	800339c <_printf_i+0xcc>
 800339a:	3f02      	subs	r7, #2
 800339c:	0023      	movs	r3, r4
 800339e:	2200      	movs	r2, #0
 80033a0:	3343      	adds	r3, #67	@ 0x43
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	6863      	ldr	r3, [r4, #4]
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db03      	blt.n	80033b4 <_printf_i+0xe4>
 80033ac:	2104      	movs	r1, #4
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	438a      	bics	r2, r1
 80033b2:	6022      	str	r2, [r4, #0]
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	d102      	bne.n	80033be <_printf_i+0xee>
 80033b8:	9d03      	ldr	r5, [sp, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <_printf_i+0x108>
 80033be:	9d03      	ldr	r5, [sp, #12]
 80033c0:	0030      	movs	r0, r6
 80033c2:	0039      	movs	r1, r7
 80033c4:	f7fc ff38 	bl	8000238 <__aeabi_uidivmod>
 80033c8:	9b04      	ldr	r3, [sp, #16]
 80033ca:	3d01      	subs	r5, #1
 80033cc:	5c5b      	ldrb	r3, [r3, r1]
 80033ce:	702b      	strb	r3, [r5, #0]
 80033d0:	0033      	movs	r3, r6
 80033d2:	0006      	movs	r6, r0
 80033d4:	429f      	cmp	r7, r3
 80033d6:	d9f3      	bls.n	80033c0 <_printf_i+0xf0>
 80033d8:	2f08      	cmp	r7, #8
 80033da:	d109      	bne.n	80033f0 <_printf_i+0x120>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	07db      	lsls	r3, r3, #31
 80033e0:	d506      	bpl.n	80033f0 <_printf_i+0x120>
 80033e2:	6862      	ldr	r2, [r4, #4]
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	dc02      	bgt.n	80033f0 <_printf_i+0x120>
 80033ea:	2330      	movs	r3, #48	@ 0x30
 80033ec:	3d01      	subs	r5, #1
 80033ee:	702b      	strb	r3, [r5, #0]
 80033f0:	9b03      	ldr	r3, [sp, #12]
 80033f2:	1b5b      	subs	r3, r3, r5
 80033f4:	6123      	str	r3, [r4, #16]
 80033f6:	9b07      	ldr	r3, [sp, #28]
 80033f8:	0021      	movs	r1, r4
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	9805      	ldr	r0, [sp, #20]
 80033fe:	9b06      	ldr	r3, [sp, #24]
 8003400:	aa09      	add	r2, sp, #36	@ 0x24
 8003402:	f7ff fef5 	bl	80031f0 <_printf_common>
 8003406:	3001      	adds	r0, #1
 8003408:	d148      	bne.n	800349c <_printf_i+0x1cc>
 800340a:	2001      	movs	r0, #1
 800340c:	4240      	negs	r0, r0
 800340e:	b00b      	add	sp, #44	@ 0x2c
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	2220      	movs	r2, #32
 8003414:	6809      	ldr	r1, [r1, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	6022      	str	r2, [r4, #0]
 800341a:	2278      	movs	r2, #120	@ 0x78
 800341c:	4932      	ldr	r1, [pc, #200]	@ (80034e8 <_printf_i+0x218>)
 800341e:	9104      	str	r1, [sp, #16]
 8003420:	0021      	movs	r1, r4
 8003422:	3145      	adds	r1, #69	@ 0x45
 8003424:	700a      	strb	r2, [r1, #0]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	c940      	ldmia	r1!, {r6}
 800342c:	0610      	lsls	r0, r2, #24
 800342e:	d402      	bmi.n	8003436 <_printf_i+0x166>
 8003430:	0650      	lsls	r0, r2, #25
 8003432:	d500      	bpl.n	8003436 <_printf_i+0x166>
 8003434:	b2b6      	uxth	r6, r6
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	07d3      	lsls	r3, r2, #31
 800343a:	d502      	bpl.n	8003442 <_printf_i+0x172>
 800343c:	2320      	movs	r3, #32
 800343e:	4313      	orrs	r3, r2
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	2e00      	cmp	r6, #0
 8003444:	d001      	beq.n	800344a <_printf_i+0x17a>
 8003446:	2710      	movs	r7, #16
 8003448:	e7a8      	b.n	800339c <_printf_i+0xcc>
 800344a:	2220      	movs	r2, #32
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	4393      	bics	r3, r2
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	e7f8      	b.n	8003446 <_printf_i+0x176>
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	680d      	ldr	r5, [r1, #0]
 8003458:	1d10      	adds	r0, r2, #4
 800345a:	6949      	ldr	r1, [r1, #20]
 800345c:	6018      	str	r0, [r3, #0]
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	062e      	lsls	r6, r5, #24
 8003462:	d501      	bpl.n	8003468 <_printf_i+0x198>
 8003464:	6019      	str	r1, [r3, #0]
 8003466:	e002      	b.n	800346e <_printf_i+0x19e>
 8003468:	066d      	lsls	r5, r5, #25
 800346a:	d5fb      	bpl.n	8003464 <_printf_i+0x194>
 800346c:	8019      	strh	r1, [r3, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	9d03      	ldr	r5, [sp, #12]
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	e7bf      	b.n	80033f6 <_printf_i+0x126>
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	1d11      	adds	r1, r2, #4
 800347a:	6019      	str	r1, [r3, #0]
 800347c:	6815      	ldr	r5, [r2, #0]
 800347e:	2100      	movs	r1, #0
 8003480:	0028      	movs	r0, r5
 8003482:	6862      	ldr	r2, [r4, #4]
 8003484:	f000 f858 	bl	8003538 <memchr>
 8003488:	2800      	cmp	r0, #0
 800348a:	d001      	beq.n	8003490 <_printf_i+0x1c0>
 800348c:	1b40      	subs	r0, r0, r5
 800348e:	6060      	str	r0, [r4, #4]
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	2300      	movs	r3, #0
 8003496:	9a03      	ldr	r2, [sp, #12]
 8003498:	7013      	strb	r3, [r2, #0]
 800349a:	e7ac      	b.n	80033f6 <_printf_i+0x126>
 800349c:	002a      	movs	r2, r5
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	9906      	ldr	r1, [sp, #24]
 80034a2:	9805      	ldr	r0, [sp, #20]
 80034a4:	9d07      	ldr	r5, [sp, #28]
 80034a6:	47a8      	blx	r5
 80034a8:	3001      	adds	r0, #1
 80034aa:	d0ae      	beq.n	800340a <_printf_i+0x13a>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	079b      	lsls	r3, r3, #30
 80034b0:	d415      	bmi.n	80034de <_printf_i+0x20e>
 80034b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034b4:	68e0      	ldr	r0, [r4, #12]
 80034b6:	4298      	cmp	r0, r3
 80034b8:	daa9      	bge.n	800340e <_printf_i+0x13e>
 80034ba:	0018      	movs	r0, r3
 80034bc:	e7a7      	b.n	800340e <_printf_i+0x13e>
 80034be:	0022      	movs	r2, r4
 80034c0:	2301      	movs	r3, #1
 80034c2:	9906      	ldr	r1, [sp, #24]
 80034c4:	9805      	ldr	r0, [sp, #20]
 80034c6:	9e07      	ldr	r6, [sp, #28]
 80034c8:	3219      	adds	r2, #25
 80034ca:	47b0      	blx	r6
 80034cc:	3001      	adds	r0, #1
 80034ce:	d09c      	beq.n	800340a <_printf_i+0x13a>
 80034d0:	3501      	adds	r5, #1
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dcf0      	bgt.n	80034be <_printf_i+0x1ee>
 80034dc:	e7e9      	b.n	80034b2 <_printf_i+0x1e2>
 80034de:	2500      	movs	r5, #0
 80034e0:	e7f7      	b.n	80034d2 <_printf_i+0x202>
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	0800369d 	.word	0x0800369d
 80034e8:	080036ae 	.word	0x080036ae

080034ec <memmove>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4288      	cmp	r0, r1
 80034f0:	d806      	bhi.n	8003500 <memmove+0x14>
 80034f2:	2300      	movs	r3, #0
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d008      	beq.n	800350a <memmove+0x1e>
 80034f8:	5ccc      	ldrb	r4, [r1, r3]
 80034fa:	54c4      	strb	r4, [r0, r3]
 80034fc:	3301      	adds	r3, #1
 80034fe:	e7f9      	b.n	80034f4 <memmove+0x8>
 8003500:	188b      	adds	r3, r1, r2
 8003502:	4298      	cmp	r0, r3
 8003504:	d2f5      	bcs.n	80034f2 <memmove+0x6>
 8003506:	3a01      	subs	r2, #1
 8003508:	d200      	bcs.n	800350c <memmove+0x20>
 800350a:	bd10      	pop	{r4, pc}
 800350c:	5c8b      	ldrb	r3, [r1, r2]
 800350e:	5483      	strb	r3, [r0, r2]
 8003510:	e7f9      	b.n	8003506 <memmove+0x1a>
	...

08003514 <_sbrk_r>:
 8003514:	2300      	movs	r3, #0
 8003516:	b570      	push	{r4, r5, r6, lr}
 8003518:	4d06      	ldr	r5, [pc, #24]	@ (8003534 <_sbrk_r+0x20>)
 800351a:	0004      	movs	r4, r0
 800351c:	0008      	movs	r0, r1
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	f7fd f9f6 	bl	8000910 <_sbrk>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d103      	bne.n	8003530 <_sbrk_r+0x1c>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d000      	beq.n	8003530 <_sbrk_r+0x1c>
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	200002f4 	.word	0x200002f4

08003538 <memchr>:
 8003538:	b2c9      	uxtb	r1, r1
 800353a:	1882      	adds	r2, r0, r2
 800353c:	4290      	cmp	r0, r2
 800353e:	d101      	bne.n	8003544 <memchr+0xc>
 8003540:	2000      	movs	r0, #0
 8003542:	4770      	bx	lr
 8003544:	7803      	ldrb	r3, [r0, #0]
 8003546:	428b      	cmp	r3, r1
 8003548:	d0fb      	beq.n	8003542 <memchr+0xa>
 800354a:	3001      	adds	r0, #1
 800354c:	e7f6      	b.n	800353c <memchr+0x4>

0800354e <memcpy>:
 800354e:	2300      	movs	r3, #0
 8003550:	b510      	push	{r4, lr}
 8003552:	429a      	cmp	r2, r3
 8003554:	d100      	bne.n	8003558 <memcpy+0xa>
 8003556:	bd10      	pop	{r4, pc}
 8003558:	5ccc      	ldrb	r4, [r1, r3]
 800355a:	54c4      	strb	r4, [r0, r3]
 800355c:	3301      	adds	r3, #1
 800355e:	e7f8      	b.n	8003552 <memcpy+0x4>

08003560 <_realloc_r>:
 8003560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003562:	0006      	movs	r6, r0
 8003564:	000c      	movs	r4, r1
 8003566:	0015      	movs	r5, r2
 8003568:	2900      	cmp	r1, #0
 800356a:	d105      	bne.n	8003578 <_realloc_r+0x18>
 800356c:	0011      	movs	r1, r2
 800356e:	f7ff fc51 	bl	8002e14 <_malloc_r>
 8003572:	0004      	movs	r4, r0
 8003574:	0020      	movs	r0, r4
 8003576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003578:	2a00      	cmp	r2, #0
 800357a:	d103      	bne.n	8003584 <_realloc_r+0x24>
 800357c:	f7ff fbde 	bl	8002d3c <_free_r>
 8003580:	2400      	movs	r4, #0
 8003582:	e7f7      	b.n	8003574 <_realloc_r+0x14>
 8003584:	f000 f81b 	bl	80035be <_malloc_usable_size_r>
 8003588:	0007      	movs	r7, r0
 800358a:	4285      	cmp	r5, r0
 800358c:	d802      	bhi.n	8003594 <_realloc_r+0x34>
 800358e:	0843      	lsrs	r3, r0, #1
 8003590:	42ab      	cmp	r3, r5
 8003592:	d3ef      	bcc.n	8003574 <_realloc_r+0x14>
 8003594:	0029      	movs	r1, r5
 8003596:	0030      	movs	r0, r6
 8003598:	f7ff fc3c 	bl	8002e14 <_malloc_r>
 800359c:	9001      	str	r0, [sp, #4]
 800359e:	2800      	cmp	r0, #0
 80035a0:	d0ee      	beq.n	8003580 <_realloc_r+0x20>
 80035a2:	002a      	movs	r2, r5
 80035a4:	42bd      	cmp	r5, r7
 80035a6:	d900      	bls.n	80035aa <_realloc_r+0x4a>
 80035a8:	003a      	movs	r2, r7
 80035aa:	0021      	movs	r1, r4
 80035ac:	9801      	ldr	r0, [sp, #4]
 80035ae:	f7ff ffce 	bl	800354e <memcpy>
 80035b2:	0021      	movs	r1, r4
 80035b4:	0030      	movs	r0, r6
 80035b6:	f7ff fbc1 	bl	8002d3c <_free_r>
 80035ba:	9c01      	ldr	r4, [sp, #4]
 80035bc:	e7da      	b.n	8003574 <_realloc_r+0x14>

080035be <_malloc_usable_size_r>:
 80035be:	1f0b      	subs	r3, r1, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1f18      	subs	r0, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da01      	bge.n	80035cc <_malloc_usable_size_r+0xe>
 80035c8:	580b      	ldr	r3, [r1, r0]
 80035ca:	18c0      	adds	r0, r0, r3
 80035cc:	4770      	bx	lr
	...

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
