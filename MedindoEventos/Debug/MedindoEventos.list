
MedindoEventos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003354  08003354  00004354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  0800342c  0800342c  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800342c  0800342c  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0000442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003434  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000007c  080034b0  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080034b0  00005310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a7  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb5  00000000  00000000  0001394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00015800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2e  00000000  00000000  000164e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d62  00000000  00000000  00016f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd53  00000000  00000000  0002ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e761  00000000  00000000  0003a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b912c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000339c  00000000  00000000  000b9170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000bc50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800333c 	.word	0x0800333c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	0800333c 	.word	0x0800333c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 faeb 	bl	80009f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f888 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f970 	bl	8000708 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000428:	f000 f920 	bl	800066c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800042c:	f000 f8c6 	bl	80005bc <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	e7fd      	b.n	8000430 <main+0x18>

08000434 <debounce_button>:
  }
  /* USER CODE END 3 */
}

/* Função lidar com debouce botao */
void debounce_button(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim3);
 800043a:	4b2b      	ldr	r3, [pc, #172]	@ (80004e8 <debounce_button+0xb4>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fa99 	bl	8001974 <HAL_TIM_Base_Start>
    uint32_t current_time = HAL_GetTick();
 8000442:	f000 fb4b 	bl	8000adc <HAL_GetTick>
 8000446:	0003      	movs	r3, r0
 8000448:	607b      	str	r3, [r7, #4]
    if (current_time - debounce_time >= 50) { // Tempo de debounce
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <debounce_button+0xb8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	2b31      	cmp	r3, #49	@ 0x31
 8000454:	d943      	bls.n	80004de <debounce_button+0xaa>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	005a      	lsls	r2, r3, #1
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fd9d 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d136      	bne.n	80004d8 <debounce_button+0xa4>
            if (!button_state) { // Primeiro pressionamento
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <debounce_button+0xbc>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10f      	bne.n	8000494 <debounce_button+0x60>
                start_time = HAL_GetTick(); // Inicia a contagem de tempo
 8000474:	f000 fb32 	bl	8000adc <HAL_GetTick>
 8000478:	0002      	movs	r2, r0
 800047a:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <debounce_button+0xc0>)
 800047c:	601a      	str	r2, [r3, #0]
        		HAL_UART_Transmit(&huart1, msg_start, (sizeof(msg_start)-1), 1000);	// Transmite mensagem serial pela UART
 800047e:	23fa      	movs	r3, #250	@ 0xfa
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	491d      	ldr	r1, [pc, #116]	@ (80004f8 <debounce_button+0xc4>)
 8000484:	481d      	ldr	r0, [pc, #116]	@ (80004fc <debounce_button+0xc8>)
 8000486:	221d      	movs	r2, #29
 8000488:	f001 fd50 	bl	8001f2c <HAL_UART_Transmit>
                button_state = 1;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <debounce_button+0xbc>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	e021      	b.n	80004d8 <debounce_button+0xa4>
            } else { // Segundo pressionamento
                end_time = HAL_GetTick(); // Finaliza a contagem de tempo
 8000494:	f000 fb22 	bl	8000adc <HAL_GetTick>
 8000498:	0002      	movs	r2, r0
 800049a:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <debounce_button+0xcc>)
 800049c:	601a      	str	r2, [r3, #0]
                time = end_time - start_time; // Calcula a diferença de tempo
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <debounce_button+0xcc>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <debounce_button+0xc0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1ad2      	subs	r2, r2, r3
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <debounce_button+0xd0>)
 80004aa:	601a      	str	r2, [r3, #0]
                sprintf(uart_tx_buffer, "Tempo decorrido: %lu ms\r\n", time); // Formata mensagem
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <debounce_button+0xd0>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4915      	ldr	r1, [pc, #84]	@ (8000508 <debounce_button+0xd4>)
 80004b2:	4b16      	ldr	r3, [pc, #88]	@ (800050c <debounce_button+0xd8>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 faa3 	bl	8002a00 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t *)uart_tx_buffer, strlen(uart_tx_buffer), 1000); // Transmite mensagem serial pela UART
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <debounce_button+0xd8>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff fe23 	bl	8000108 <strlen>
 80004c2:	0003      	movs	r3, r0
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	23fa      	movs	r3, #250	@ 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4910      	ldr	r1, [pc, #64]	@ (800050c <debounce_button+0xd8>)
 80004cc:	480b      	ldr	r0, [pc, #44]	@ (80004fc <debounce_button+0xc8>)
 80004ce:	f001 fd2d 	bl	8001f2c <HAL_UART_Transmit>
                button_state = 0;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <debounce_button+0xbc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
            }
        }
        debounce_time = current_time;
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <debounce_button+0xb8>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
    }
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	20000098 	.word	0x20000098
 80004ec:	200001bc 	.word	0x200001bc
 80004f0:	20000184 	.word	0x20000184
 80004f4:	20000178 	.word	0x20000178
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200000e4 	.word	0x200000e4
 8000500:	2000017c 	.word	0x2000017c
 8000504:	20000180 	.word	0x20000180
 8000508:	08003354 	.word	0x08003354
 800050c:	20000188 	.word	0x20000188

08000510 <HAL_GPIO_EXTI_Falling_Callback>:

/* Funções de configuração da interrupção externa */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	1dbb      	adds	r3, r7, #6
 800051a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_8) { // Botão pressionado
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	881a      	ldrh	r2, [r3, #0]
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	429a      	cmp	r2, r3
 8000526:	d101      	bne.n	800052c <HAL_GPIO_EXTI_Falling_Callback+0x1c>
        debounce_button();
 8000528:	f7ff ff84 	bl	8000434 <debounce_button>
    }
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b08d      	sub	sp, #52	@ 0x34
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	2414      	movs	r4, #20
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	231c      	movs	r3, #28
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fa7b 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fa74 	bl	8002a40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2202      	movs	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2240      	movs	r2, #64	@ 0x40
 8000570:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fd65 	bl	8001044 <HAL_RCC_OscConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800057e:	f000 f8fb 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	003b      	movs	r3, r7
 8000584:	2207      	movs	r2, #7
 8000586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	003b      	movs	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000594:	003b      	movs	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800059a:	003b      	movs	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a0:	003b      	movs	r3, r7
 80005a2:	2101      	movs	r1, #1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 ff31 	bl	800140c <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ae:	f000 f8e3 	bl	8000778 <Error_Handler>
  }
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b00d      	add	sp, #52	@ 0x34
 80005b8:	bd90      	pop	{r4, r7, pc}
	...

080005bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	2310      	movs	r3, #16
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2310      	movs	r3, #16
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 fa37 	bl	8002a40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	0018      	movs	r0, r3
 80005d6:	230c      	movs	r3, #12
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 fa30 	bl	8002a40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_TIM3_Init+0xa0>)
 80005e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000660 <MX_TIM3_Init+0xa4>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <MX_TIM3_Init+0xa0>)
 80005e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <MX_TIM3_Init+0xa8>)
 80005ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_TIM3_Init+0xa0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_TIM3_Init+0xa0>)
 80005f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <MX_TIM3_Init+0xac>)
 80005f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_TIM3_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_TIM3_Init+0xa0>)
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_TIM3_Init+0xa0>)
 8000606:	0018      	movs	r0, r3
 8000608:	f001 f95c 	bl	80018c4 <HAL_TIM_Base_Init>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000610:	f000 f8b2 	bl	8000778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	2110      	movs	r1, #16
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	0152      	lsls	r2, r2, #5
 800061c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800061e:	187a      	adds	r2, r7, r1
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_TIM3_Init+0xa0>)
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f001 f9eb 	bl	8001a00 <HAL_TIM_ConfigClockSource>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800062e:	f000 f8a3 	bl	8000778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063e:	1d3a      	adds	r2, r7, #4
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_TIM3_Init+0xa0>)
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fbb9 	bl	8001dbc <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800064e:	f000 f893 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b008      	add	sp, #32
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	20000098 	.word	0x20000098
 8000660:	40000400 	.word	0x40000400
 8000664:	0000bb7f 	.word	0x0000bb7f
 8000668:	000003e7 	.word	0x000003e7

0800066c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <MX_USART1_UART_Init+0x98>)
 8000674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000678:	22e1      	movs	r2, #225	@ 0xe1
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fbe2 	bl	8001e80 <HAL_UART_Init>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006c0:	f000 f85a 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 f8b9 	bl	8002840 <HAL_UARTEx_SetTxFifoThreshold>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006d2:	f000 f851 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 f8f0 	bl	80028c0 <HAL_UARTEx_SetRxFifoThreshold>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f848 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <MX_USART1_UART_Init+0x94>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 f86e 	bl	80027cc <HAL_UARTEx_DisableFifoMode>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f840 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	200000e4 	.word	0x200000e4
 8000704:	40013800 	.word	0x40013800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	2314      	movs	r3, #20
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f002 f992 	bl	8002a40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_GPIO_Init+0x68>)
 800071e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_GPIO_Init+0x68>)
 8000722:	2101      	movs	r1, #1
 8000724:	430a      	orrs	r2, r1
 8000726:	635a      	str	r2, [r3, #52]	@ 0x34
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_GPIO_Init+0x68>)
 800072a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072c:	2201      	movs	r2, #1
 800072e:	4013      	ands	r3, r2
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <MX_GPIO_Init+0x6c>)
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2201      	movs	r2, #1
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	1d3a      	adds	r2, r7, #4
 800074a:	23a0      	movs	r3, #160	@ 0xa0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fabb 	bl	8000ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2007      	movs	r0, #7
 800075c:	f000 fa84 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000760:	2007      	movs	r0, #7
 8000762:	f000 fa96 	bl	8000c92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	10210000 	.word	0x10210000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <HAL_MspInit+0x50>)
 800078c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <HAL_MspInit+0x50>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x50>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	2201      	movs	r2, #1
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x50>)
 80007a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <HAL_MspInit+0x50>)
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0549      	lsls	r1, r1, #21
 80007ac:	430a      	orrs	r2, r1
 80007ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_MspInit+0x50>)
 80007b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	4013      	ands	r3, r2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80007be:	2008      	movs	r0, #8
 80007c0:	f000 f996 	bl	8000af0 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80007c4:	2010      	movs	r0, #16
 80007c6:	f000 f993 	bl	8000af0 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a09      	ldr	r2, [pc, #36]	@ (800080c <HAL_TIM_Base_MspInit+0x34>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d10b      	bne.n	8000802 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_TIM_Base_MspInit+0x38>)
 80007ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_TIM_Base_MspInit+0x38>)
 80007f0:	2102      	movs	r1, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_TIM_Base_MspInit+0x38>)
 80007f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007fa:	2202      	movs	r2, #2
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40000400 	.word	0x40000400
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b091      	sub	sp, #68	@ 0x44
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	232c      	movs	r3, #44	@ 0x2c
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f002 f90a 	bl	8002a40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	2410      	movs	r4, #16
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	231c      	movs	r3, #28
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f002 f902 	bl	8002a40 <memset>
  if(huart->Instance==USART1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <HAL_UART_MspInit+0xbc>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d13f      	bne.n	80008c6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	f000 ff47 	bl	80016e8 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800085e:	f7ff ff8b 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 8000864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	01c9      	lsls	r1, r1, #7
 800086c:	430a      	orrs	r2, r1
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 8000872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	01db      	lsls	r3, r3, #7
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_UART_MspInit+0xc0>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000896:	212c      	movs	r1, #44	@ 0x2c
 8000898:	187b      	adds	r3, r7, r1
 800089a:	22c0      	movs	r2, #192	@ 0xc0
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2202      	movs	r2, #2
 80008a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	23a0      	movs	r3, #160	@ 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fa03 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b011      	add	sp, #68	@ 0x44
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f8da 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fb62 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	@ (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f002 f87e 	bl	8002a50 <__errno>
 8000954:	0003      	movs	r3, r0
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095a:	2301      	movs	r3, #1
 800095c:	425b      	negs	r3, r3
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	18d2      	adds	r2, r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <_sbrk+0x64>)
 8000970:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b006      	add	sp, #24
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20001800 	.word	0x20001800
 8000980:	00000400 	.word	0x00000400
 8000984:	200001c0 	.word	0x200001c0
 8000988:	20000310 	.word	0x20000310

0800098c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <SystemInit+0x14>)
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	0512      	lsls	r2, r2, #20
 8000996:	609a      	str	r2, [r3, #8]
#endif
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff0 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009ae:	e003      	b.n	80009b8 <LoopCopyDataInit>

080009b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009b6:	3104      	adds	r1, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009b8:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80009bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009c0:	d3f6      	bcc.n	80009b0 <CopyDataInit>
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopForever+0x12>)
  b LoopFillZerobss
 80009c4:	e002      	b.n	80009cc <LoopFillZerobss>

080009c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80009c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ca:	3204      	adds	r2, #4

080009cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <LoopForever+0x16>)
  cmp r2, r3
 80009ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009d0:	d3f9      	bcc.n	80009c6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009d2:	f002 f843 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fd1f 	bl	8000418 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80009e0:	08003434 	.word	0x08003434
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80009ec:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80009f0:	20000310 	.word	0x20000310

080009f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>

080009f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 f80e 	bl	8000a24 <HAL_InitTick>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a14:	f7ff feb6 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <HAL_InitTick+0x88>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d02b      	beq.n	8000a94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <HAL_InitTick+0x8c>)
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <HAL_InitTick+0x88>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0019      	movs	r1, r3
 8000a46:	23fa      	movs	r3, #250	@ 0xfa
 8000a48:	0098      	lsls	r0, r3, #2
 8000a4a:	f7ff fb6f 	bl	800012c <__udivsi3>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	0019      	movs	r1, r3
 8000a52:	0020      	movs	r0, r4
 8000a54:	f7ff fb6a 	bl	800012c <__udivsi3>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f929 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d112      	bne.n	8000a8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80a      	bhi.n	8000a80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f8f8 	bl	8000c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_InitTick+0x90>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e00d      	b.n	8000a9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a80:	230f      	movs	r3, #15
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e008      	b.n	8000a9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e003      	b.n	8000a9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
}
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b005      	add	sp, #20
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	20000020 	.word	0x20000020
 8000ab4:	20000024 	.word	0x20000024

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	18d2      	adds	r2, r2, r3
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	200001c4 	.word	0x200001c4

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	200001c4 	.word	0x200001c4

08000af0 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_SYSCFG_EnableRemap+0x1c>)
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_SYSCFG_EnableRemap+0x1c>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40010000 	.word	0x40010000

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b22:	d809      	bhi.n	8000b38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	231f      	movs	r3, #31
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_EnableIRQ+0x30>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	4091      	lsls	r1, r2
 8000b34:	000a      	movs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b58:	d828      	bhi.n	8000bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	33c0      	adds	r3, #192	@ 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	589b      	ldr	r3, [r3, r2]
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	2203      	movs	r2, #3
 8000b72:	400a      	ands	r2, r1
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	21ff      	movs	r1, #255	@ 0xff
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	22ff      	movs	r2, #255	@ 0xff
 8000b88:	401a      	ands	r2, r3
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2303      	movs	r3, #3
 8000b92:	4003      	ands	r3, r0
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	33c0      	adds	r3, #192	@ 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000baa:	e031      	b.n	8000c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	3b08      	subs	r3, #8
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3306      	adds	r3, #6
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1dfa      	adds	r2, r7, #7
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	2203      	movs	r2, #3
 8000bce:	400a      	ands	r2, r1
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	21ff      	movs	r1, #255	@ 0xff
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	22ff      	movs	r2, #255	@ 0xff
 8000be4:	401a      	ands	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	4003      	ands	r3, r0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	4023      	ands	r3, r4
 8000c00:	3b08      	subs	r3, #8
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	3306      	adds	r3, #6
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	18c3      	adds	r3, r0, r3
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	045b      	lsls	r3, r3, #17
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d301      	bcc.n	8000c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c34:	2301      	movs	r3, #1
 8000c36:	e010      	b.n	8000c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <SysTick_Config+0x44>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff ff7c 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x44>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x44>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	210f      	movs	r1, #15
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	1c02      	adds	r2, r0, #0
 8000c78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	0002      	movs	r2, r0
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff33 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ffaf 	bl	8000c20 <SysTick_Config>
 8000cc2:	0003      	movs	r3, r0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cda:	e14d      	b.n	8000f78 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0x28>
 8000cf2:	e13e      	b.n	8000f72 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x38>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d125      	bne.n	8000d50 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	58d3      	ldr	r3, [r2, r3]
 8000d10:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	2207      	movs	r2, #7
 8000d16:	4013      	ands	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4013      	ands	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	401a      	ands	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2107      	movs	r1, #7
 8000d34:	400b      	ands	r3, r1
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	6979      	ldr	r1, [r7, #20]
 8000d4e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	43da      	mvns	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00b      	beq.n	8000da4 <HAL_GPIO_Init+0xd8>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d98:	2b11      	cmp	r3, #17
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b12      	cmp	r3, #18
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	409a      	lsls	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	43da      	mvns	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4013      	ands	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	401a      	ands	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d017      	beq.n	8000e3e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	4013      	ands	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	055b      	lsls	r3, r3, #21
 8000e46:	4013      	ands	r3, r2
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x180>
 8000e4a:	e092      	b.n	8000f72 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e4c:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3318      	adds	r3, #24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	23a0      	movs	r3, #160	@ 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1d6>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1d2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a44      	ldr	r2, [pc, #272]	@ (8000f98 <HAL_GPIO_Init+0x2cc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1ce>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a43      	ldr	r2, [pc, #268]	@ (8000f9c <HAL_GPIO_Init+0x2d0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1ca>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1d8>
 8000e96:	2306      	movs	r3, #6
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1d8>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1d8>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1d8>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	00d2      	lsls	r2, r2, #3
 8000eac:	4093      	lsls	r3, r2
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000eb4:	4936      	ldr	r1, [pc, #216]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3318      	adds	r3, #24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000ec2:	4a33      	ldr	r2, [pc, #204]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ee8:	4929      	ldr	r1, [pc, #164]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000ef0:	4a27      	ldr	r2, [pc, #156]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000ef2:	2384      	movs	r3, #132	@ 0x84
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4013      	ands	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	@ 0x80
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f16:	491e      	ldr	r1, [pc, #120]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000f18:	2284      	movs	r2, #132	@ 0x84
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43da      	mvns	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	035b      	lsls	r3, r3, #13
 8000f36:	4013      	ands	r3, r2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	039b      	lsls	r3, r3, #14
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	1e13      	subs	r3, r2, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_GPIO_Init+0x2ba>
 8000f84:	e6aa      	b.n	8000cdc <HAL_GPIO_Init+0x10>
  }
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021800 	.word	0x40021800
 8000f94:	50000400 	.word	0x50000400
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	50001400 	.word	0x50001400

08000fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	000a      	movs	r2, r1
 8000faa:	1cbb      	adds	r3, r7, #2
 8000fac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	1cba      	adds	r2, r7, #2
 8000fb4:	8812      	ldrh	r2, [r2, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d004      	beq.n	8000fc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e003      	b.n	8000fcc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	1dba      	adds	r2, r7, #6
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d008      	beq.n	8001006 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ff6:	1dba      	adds	r2, r7, #6
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f000 f815 	bl	8001030 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	1dba      	adds	r2, r7, #6
 800100c:	8812      	ldrh	r2, [r2, #0]
 800100e:	4013      	ands	r3, r2
 8001010:	d008      	beq.n	8001024 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	8812      	ldrh	r2, [r2, #0]
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800101a:	1dbb      	adds	r3, r7, #6
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fa76 	bl	8000510 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021800 	.word	0x40021800

08001030 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	0002      	movs	r2, r0
 8001038:	1dbb      	adds	r3, r7, #6
 800103a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e1d0      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	d100      	bne.n	8001062 <HAL_RCC_OscConfig+0x1e>
 8001060:	e069      	b.n	8001136 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001062:	4bc8      	ldr	r3, [pc, #800]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2238      	movs	r2, #56	@ 0x38
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d105      	bne.n	800107e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d15d      	bne.n	8001136 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1bc      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	429a      	cmp	r2, r3
 8001088:	d107      	bne.n	800109a <HAL_RCC_OscConfig+0x56>
 800108a:	4bbe      	ldr	r3, [pc, #760]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4bbd      	ldr	r3, [pc, #756]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	0249      	lsls	r1, r1, #9
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e020      	b.n	80010dc <HAL_RCC_OscConfig+0x98>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23a0      	movs	r3, #160	@ 0xa0
 80010a0:	02db      	lsls	r3, r3, #11
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d10e      	bne.n	80010c4 <HAL_RCC_OscConfig+0x80>
 80010a6:	4bb7      	ldr	r3, [pc, #732]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4bb6      	ldr	r3, [pc, #728]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010ac:	2180      	movs	r1, #128	@ 0x80
 80010ae:	02c9      	lsls	r1, r1, #11
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	4bb3      	ldr	r3, [pc, #716]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4bb2      	ldr	r3, [pc, #712]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	0249      	lsls	r1, r1, #9
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c4:	4baf      	ldr	r3, [pc, #700]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4bae      	ldr	r3, [pc, #696]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010ca:	49af      	ldr	r1, [pc, #700]	@ (8001388 <HAL_RCC_OscConfig+0x344>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4bac      	ldr	r3, [pc, #688]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4bab      	ldr	r3, [pc, #684]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80010d6:	49ad      	ldr	r1, [pc, #692]	@ (800138c <HAL_RCC_OscConfig+0x348>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d014      	beq.n	800110e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcfa 	bl	8000adc <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fcf5 	bl	8000adc <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	@ 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e17b      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001100:	4ba0      	ldr	r3, [pc, #640]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0xaa>
 800110c:	e013      	b.n	8001136 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fce5 	bl	8000adc <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001118:	f7ff fce0 	bl	8000adc <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	@ 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e166      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112a:	4b96      	ldr	r3, [pc, #600]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	029b      	lsls	r3, r3, #10
 8001132:	4013      	ands	r3, r2
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0xfe>
 8001140:	e086      	b.n	8001250 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001142:	4b90      	ldr	r3, [pc, #576]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2238      	movs	r2, #56	@ 0x38
 8001148:	4013      	ands	r3, r2
 800114a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d12f      	bne.n	80011b2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e14c      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a8b      	ldr	r2, [pc, #556]	@ (8001390 <HAL_RCC_OscConfig+0x34c>)
 8001164:	4013      	ands	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	021a      	lsls	r2, r3, #8
 800116e:	4b85      	ldr	r3, [pc, #532]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d112      	bne.n	80011a0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800117a:	4b82      	ldr	r3, [pc, #520]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a85      	ldr	r2, [pc, #532]	@ (8001394 <HAL_RCC_OscConfig+0x350>)
 8001180:	4013      	ands	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	4b7e      	ldr	r3, [pc, #504]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800118e:	4b7d      	ldr	r3, [pc, #500]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	0adb      	lsrs	r3, r3, #11
 8001194:	2207      	movs	r2, #7
 8001196:	4013      	ands	r3, r2
 8001198:	4a7f      	ldr	r2, [pc, #508]	@ (8001398 <HAL_RCC_OscConfig+0x354>)
 800119a:	40da      	lsrs	r2, r3
 800119c:	4b7f      	ldr	r3, [pc, #508]	@ (800139c <HAL_RCC_OscConfig+0x358>)
 800119e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011a0:	4b7f      	ldr	r3, [pc, #508]	@ (80013a0 <HAL_RCC_OscConfig+0x35c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fc3d 	bl	8000a24 <HAL_InitTick>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d050      	beq.n	8001250 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e122      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d030      	beq.n	800121c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ba:	4b72      	ldr	r3, [pc, #456]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a75      	ldr	r2, [pc, #468]	@ (8001394 <HAL_RCC_OscConfig+0x350>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	0019      	movs	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80011ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	0049      	lsls	r1, r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc7e 	bl	8000adc <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc79 	bl	8000adc <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0ff      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f8:	4b62      	ldr	r3, [pc, #392]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4013      	ands	r3, r2
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b5f      	ldr	r3, [pc, #380]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a61      	ldr	r2, [pc, #388]	@ (8001390 <HAL_RCC_OscConfig+0x34c>)
 800120a:	4013      	ands	r3, r2
 800120c:	0019      	movs	r1, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	021a      	lsls	r2, r3, #8
 8001214:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001216:	430a      	orrs	r2, r1
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	e019      	b.n	8001250 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800121c:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001222:	4960      	ldr	r1, [pc, #384]	@ (80013a4 <HAL_RCC_OscConfig+0x360>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc58 	bl	8000adc <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc53 	bl	8000adc <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0d9      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001244:	4b4f      	ldr	r3, [pc, #316]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4013      	ands	r3, r2
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2208      	movs	r2, #8
 8001256:	4013      	ands	r3, r2
 8001258:	d042      	beq.n	80012e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800125a:	4b4a      	ldr	r3, [pc, #296]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2238      	movs	r2, #56	@ 0x38
 8001260:	4013      	ands	r3, r2
 8001262:	2b18      	cmp	r3, #24
 8001264:	d105      	bne.n	8001272 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d138      	bne.n	80012e0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0c2      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800127c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800127e:	4b41      	ldr	r3, [pc, #260]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fc29 	bl	8000adc <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc24 	bl	8000adc <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0aa      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80012a2:	4b38      	ldr	r3, [pc, #224]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f1      	beq.n	8001290 <HAL_RCC_OscConfig+0x24c>
 80012ac:	e018      	b.n	80012e0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012ae:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80012b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	438a      	bics	r2, r1
 80012b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fc0f 	bl	8000adc <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc0a 	bl	8000adc <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e090      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d1f1      	bne.n	80012c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d100      	bne.n	80012ec <HAL_RCC_OscConfig+0x2a8>
 80012ea:	e084      	b.n	80013f6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2238      	movs	r2, #56	@ 0x38
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d000      	beq.n	800130a <HAL_RCC_OscConfig+0x2c6>
 8001308:	e075      	b.n	80013f6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e074      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x2e0>
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x31a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x302>
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800132e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001332:	2104      	movs	r1, #4
 8001334:	430a      	orrs	r2, r1
 8001336:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800133a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x31a>
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001354:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_RCC_OscConfig+0x340>)
 8001358:	2104      	movs	r1, #4
 800135a:	438a      	bics	r2, r1
 800135c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d028      	beq.n	80013b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fbb9 	bl	8000adc <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001370:	f7ff fbb4 	bl	8000adc <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_RCC_OscConfig+0x364>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d915      	bls.n	80013ac <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e039      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
 8001384:	40021000 	.word	0x40021000
 8001388:	fffeffff 	.word	0xfffeffff
 800138c:	fffbffff 	.word	0xfffbffff
 8001390:	ffff80ff 	.word	0xffff80ff
 8001394:	ffffc7ff 	.word	0xffffc7ff
 8001398:	02dc6c00 	.word	0x02dc6c00
 800139c:	20000020 	.word	0x20000020
 80013a0:	20000024 	.word	0x20000024
 80013a4:	fffffeff 	.word	0xfffffeff
 80013a8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_RCC_OscConfig+0x3bc>)
 80013ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0dc      	beq.n	8001370 <HAL_RCC_OscConfig+0x32c>
 80013b6:	e013      	b.n	80013e0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb90 	bl	8000adc <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013c0:	e009      	b.n	80013d6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fb8b 	bl	8000adc <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_RCC_OscConfig+0x3c0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e010      	b.n	80013f8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_RCC_OscConfig+0x3bc>)
 80013d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_RCC_OscConfig+0x3bc>)
 80013ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_RCC_OscConfig+0x3bc>)
 80013f0:	4905      	ldr	r1, [pc, #20]	@ (8001408 <HAL_RCC_OscConfig+0x3c4>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b006      	add	sp, #24
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	00001388 	.word	0x00001388
 8001408:	efffffff 	.word	0xefffffff

0800140c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0e9      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b76      	ldr	r3, [pc, #472]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2207      	movs	r2, #7
 8001426:	4013      	ands	r3, r2
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d91e      	bls.n	800146c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b73      	ldr	r3, [pc, #460]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2207      	movs	r2, #7
 8001434:	4393      	bics	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	4b70      	ldr	r3, [pc, #448]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001440:	f7ff fb4c 	bl	8000adc <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001448:	e009      	b.n	800145e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800144a:	f7ff fb47 	bl	8000adc <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a6a      	ldr	r2, [pc, #424]	@ (8001600 <HAL_RCC_ClockConfig+0x1f4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0ca      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800145e:	4b67      	ldr	r3, [pc, #412]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d017      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
 800147e:	d008      	beq.n	8001492 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001480:	4b60      	ldr	r3, [pc, #384]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a60      	ldr	r2, [pc, #384]	@ (8001608 <HAL_RCC_ClockConfig+0x1fc>)
 8001486:	401a      	ands	r2, r3
 8001488:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 800148a:	21b0      	movs	r1, #176	@ 0xb0
 800148c:	0109      	lsls	r1, r1, #4
 800148e:	430a      	orrs	r2, r1
 8001490:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4a5d      	ldr	r2, [pc, #372]	@ (800160c <HAL_RCC_ClockConfig+0x200>)
 8001498:	4013      	ands	r3, r2
 800149a:	0019      	movs	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	d055      	beq.n	800155c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80014b0:	4b54      	ldr	r3, [pc, #336]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	221c      	movs	r2, #28
 80014b6:	4393      	bics	r3, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d11f      	bne.n	8001518 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e08b      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	d113      	bne.n	8001518 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e07f      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d106      	bne.n	800150a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014fc:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d108      	bne.n	8001518 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e074      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e06d      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001518:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2207      	movs	r2, #7
 800151e:	4393      	bics	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800152c:	f7ff fad6 	bl	8000adc <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001534:	e009      	b.n	800154a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001536:	f7ff fad1 	bl	8000adc <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4a2f      	ldr	r2, [pc, #188]	@ (8001600 <HAL_RCC_ClockConfig+0x1f4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e054      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2238      	movs	r2, #56	@ 0x38
 8001550:	401a      	ands	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	429a      	cmp	r2, r3
 800155a:	d1ec      	bne.n	8001536 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800155c:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2207      	movs	r2, #7
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d21e      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2207      	movs	r2, #7
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800157c:	f7ff faae 	bl	8000adc <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001584:	e009      	b.n	800159a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f7ff faa9 	bl	8000adc <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_RCC_ClockConfig+0x1f4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e02c      	b.n	80015f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2207      	movs	r2, #7
 80015a0:	4013      	ands	r3, r2
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1ee      	bne.n	8001586 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_RCC_ClockConfig+0x204>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015c6:	f000 f82b 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015ca:	0001      	movs	r1, r0
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_RCC_ClockConfig+0x1f8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	220f      	movs	r2, #15
 80015d4:	401a      	ands	r2, r3
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_RCC_ClockConfig+0x208>)
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	58d3      	ldr	r3, [r2, r3]
 80015dc:	221f      	movs	r2, #31
 80015de:	4013      	ands	r3, r2
 80015e0:	000a      	movs	r2, r1
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_RCC_ClockConfig+0x210>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fa19 	bl	8000a24 <HAL_InitTick>
 80015f2:	0003      	movs	r3, r0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40022000 	.word	0x40022000
 8001600:	00001388 	.word	0x00001388
 8001604:	40021000 	.word	0x40021000
 8001608:	ffff84ff 	.word	0xffff84ff
 800160c:	fffff0ff 	.word	0xfffff0ff
 8001610:	ffff8fff 	.word	0xffff8fff
 8001614:	08003370 	.word	0x08003370
 8001618:	20000020 	.word	0x20000020
 800161c:	20000024 	.word	0x20000024

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x78>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2238      	movs	r2, #56	@ 0x38
 800162c:	4013      	ands	r3, r2
 800162e:	d10f      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x78>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0adb      	lsrs	r3, r3, #11
 8001636:	2207      	movs	r2, #7
 8001638:	4013      	ands	r3, r2
 800163a:	2201      	movs	r2, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	4815      	ldr	r0, [pc, #84]	@ (800169c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001646:	f7fe fd71 	bl	800012c <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e01e      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x78>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2238      	movs	r2, #56	@ 0x38
 8001656:	4013      	ands	r3, r2
 8001658:	2b08      	cmp	r3, #8
 800165a:	d102      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x80>)
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	e015      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x78>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2238      	movs	r2, #56	@ 0x38
 8001668:	4013      	ands	r3, r2
 800166a:	2b20      	cmp	r3, #32
 800166c:	d103      	bne.n	8001676 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	e00b      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x78>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	@ 0x38
 800167c:	4013      	ands	r3, r2
 800167e:	2b18      	cmp	r3, #24
 8001680:	d103      	bne.n	800168a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001682:	23fa      	movs	r3, #250	@ 0xfa
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	02dc6c00 	.word	0x02dc6c00
 80016a0:	007a1200 	.word	0x007a1200

080016a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000020 	.word	0x20000020

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80016bc:	f7ff fff2 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016c0:	0001      	movs	r1, r0
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0b1b      	lsrs	r3, r3, #12
 80016c8:	2207      	movs	r2, #7
 80016ca:	401a      	ands	r2, r3
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	221f      	movs	r2, #31
 80016d4:	4013      	ands	r3, r2
 80016d6:	40d9      	lsrs	r1, r3
 80016d8:	000b      	movs	r3, r1
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080033b0 	.word	0x080033b0

080016e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80016f0:	2313      	movs	r3, #19
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016f8:	2312      	movs	r3, #18
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d100      	bne.n	800170e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800170c:	e079      	b.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2011      	movs	r0, #17
 8001710:	183b      	adds	r3, r7, r0
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b64      	ldr	r3, [pc, #400]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	055b      	lsls	r3, r3, #21
 800171e:	4013      	ands	r3, r2
 8001720:	d110      	bne.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b61      	ldr	r3, [pc, #388]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001726:	4b60      	ldr	r3, [pc, #384]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	0549      	lsls	r1, r1, #21
 800172c:	430a      	orrs	r2, r1
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001730:	4b5d      	ldr	r3, [pc, #372]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	055b      	lsls	r3, r3, #21
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	183b      	adds	r3, r7, r0
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001744:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001748:	23c0      	movs	r3, #192	@ 0xc0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	d014      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001760:	4b51      	ldr	r3, [pc, #324]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	4a51      	ldr	r2, [pc, #324]	@ (80018ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001766:	4013      	ands	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800176a:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800176c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800176e:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	430a      	orrs	r2, r1
 8001776:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001778:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800177a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800177c:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800177e:	494c      	ldr	r1, [pc, #304]	@ (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001780:	400a      	ands	r2, r1
 8001782:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001784:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d016      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff f9a3 	bl	8000adc <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800179a:	e00c      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff f99e 	bl	8000adc <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a43      	ldr	r2, [pc, #268]	@ (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d904      	bls.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80017ac:	2313      	movs	r3, #19
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	2203      	movs	r2, #3
 80017b2:	701a      	strb	r2, [r3, #0]
          break;
 80017b4:	e004      	b.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d0ed      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80017c0:	2313      	movs	r3, #19
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10a      	bne.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ce:	4a37      	ldr	r2, [pc, #220]	@ (80018ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	4b33      	ldr	r3, [pc, #204]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017de:	e005      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017e0:	2312      	movs	r3, #18
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2213      	movs	r2, #19
 80017e6:	18ba      	adds	r2, r7, r2
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ec:	2311      	movs	r3, #17
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017fc:	492e      	ldr	r1, [pc, #184]	@ (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017fe:	400a      	ands	r2, r1
 8001800:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800180c:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	2203      	movs	r2, #3
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800181c:	430a      	orrs	r2, r1
 800181e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2240      	movs	r2, #64	@ 0x40
 8001826:	4013      	ands	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800183a:	430a      	orrs	r2, r1
 800183c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	01db      	lsls	r3, r3, #7
 8001846:	4013      	ands	r3, r2
 8001848:	d008      	beq.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800184c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	0899      	lsrs	r1, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001858:	430a      	orrs	r2, r1
 800185a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001878:	430a      	orrs	r2, r1
 800187a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da09      	bge.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	22e0      	movs	r2, #224	@ 0xe0
 800188a:	4393      	bics	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001898:	2312      	movs	r3, #18
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	781b      	ldrb	r3, [r3, #0]
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b006      	add	sp, #24
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	fffffcff 	.word	0xfffffcff
 80018b0:	fffeffff 	.word	0xfffeffff
 80018b4:	00001388 	.word	0x00001388
 80018b8:	efffffff 	.word	0xefffffff
 80018bc:	ffffcfff 	.word	0xffffcfff
 80018c0:	ffff3fff 	.word	0xffff3fff

080018c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e04a      	b.n	800196c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	223d      	movs	r2, #61	@ 0x3d
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	223c      	movs	r2, #60	@ 0x3c
 80018e6:	2100      	movs	r1, #0
 80018e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe ff73 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	223d      	movs	r2, #61	@ 0x3d
 80018f6:	2102      	movs	r1, #2
 80018f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f000 f951 	bl	8001bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2248      	movs	r2, #72	@ 0x48
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	223e      	movs	r2, #62	@ 0x3e
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	223f      	movs	r2, #63	@ 0x3f
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2240      	movs	r2, #64	@ 0x40
 8001926:	2101      	movs	r1, #1
 8001928:	5499      	strb	r1, [r3, r2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2241      	movs	r2, #65	@ 0x41
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2242      	movs	r2, #66	@ 0x42
 8001936:	2101      	movs	r1, #1
 8001938:	5499      	strb	r1, [r3, r2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2243      	movs	r2, #67	@ 0x43
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2244      	movs	r2, #68	@ 0x44
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2245      	movs	r2, #69	@ 0x45
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2246      	movs	r2, #70	@ 0x46
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2247      	movs	r2, #71	@ 0x47
 800195e:	2101      	movs	r1, #1
 8001960:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	223d      	movs	r2, #61	@ 0x3d
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	223d      	movs	r2, #61	@ 0x3d
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d001      	beq.n	800198c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e02f      	b.n	80019ec <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	223d      	movs	r2, #61	@ 0x3d
 8001990:	2102      	movs	r1, #2
 8001992:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <HAL_TIM_Base_Start+0x80>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d004      	beq.n	80019a8 <HAL_TIM_Base_Start+0x34>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a15      	ldr	r2, [pc, #84]	@ (80019f8 <HAL_TIM_Base_Start+0x84>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d116      	bne.n	80019d6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <HAL_TIM_Base_Start+0x88>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d016      	beq.n	80019e8 <HAL_TIM_Base_Start+0x74>
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	025b      	lsls	r3, r3, #9
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d011      	beq.n	80019e8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2101      	movs	r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d4:	e008      	b.n	80019e8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e000      	b.n	80019ea <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40000400 	.word	0x40000400
 80019fc:	00010007 	.word	0x00010007

08001a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223c      	movs	r2, #60	@ 0x3c
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_TIM_ConfigClockSource+0x20>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0bc      	b.n	8001b9a <HAL_TIM_ConfigClockSource+0x19a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	223c      	movs	r2, #60	@ 0x3c
 8001a24:	2101      	movs	r1, #1
 8001a26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	223d      	movs	r2, #61	@ 0x3d
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4a59      	ldr	r2, [pc, #356]	@ (8001ba8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	0192      	lsls	r2, r2, #6
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d040      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0xde>
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	0192      	lsls	r2, r2, #6
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d900      	bls.n	8001a66 <HAL_TIM_ConfigClockSource+0x66>
 8001a64:	e088      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	0152      	lsls	r2, r2, #5
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_TIM_ConfigClockSource+0x70>
 8001a6e:	e088      	b.n	8001b82 <HAL_TIM_ConfigClockSource+0x182>
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	0152      	lsls	r2, r2, #5
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d900      	bls.n	8001a7a <HAL_TIM_ConfigClockSource+0x7a>
 8001a78:	e07e      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a7a:	2b70      	cmp	r3, #112	@ 0x70
 8001a7c:	d018      	beq.n	8001ab0 <HAL_TIM_ConfigClockSource+0xb0>
 8001a7e:	d900      	bls.n	8001a82 <HAL_TIM_ConfigClockSource+0x82>
 8001a80:	e07a      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a82:	2b60      	cmp	r3, #96	@ 0x60
 8001a84:	d04f      	beq.n	8001b26 <HAL_TIM_ConfigClockSource+0x126>
 8001a86:	d900      	bls.n	8001a8a <HAL_TIM_ConfigClockSource+0x8a>
 8001a88:	e076      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a8a:	2b50      	cmp	r3, #80	@ 0x50
 8001a8c:	d03b      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0x106>
 8001a8e:	d900      	bls.n	8001a92 <HAL_TIM_ConfigClockSource+0x92>
 8001a90:	e072      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a92:	2b40      	cmp	r3, #64	@ 0x40
 8001a94:	d057      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x146>
 8001a96:	d900      	bls.n	8001a9a <HAL_TIM_ConfigClockSource+0x9a>
 8001a98:	e06e      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001a9a:	2b30      	cmp	r3, #48	@ 0x30
 8001a9c:	d063      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x166>
 8001a9e:	d86b      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d060      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x166>
 8001aa4:	d868      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d05d      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x166>
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d05b      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x166>
 8001aae:	e063      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ac0:	f000 f95c 	bl	8001d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2277      	movs	r2, #119	@ 0x77
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	609a      	str	r2, [r3, #8]
      break;
 8001adc:	e052      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001aee:	f000 f945 	bl	8001d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	01c9      	lsls	r1, r1, #7
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
      break;
 8001b04:	e03e      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	001a      	movs	r2, r3
 8001b14:	f000 f8b6 	bl	8001c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2150      	movs	r1, #80	@ 0x50
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 f910 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001b24:	e02e      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b32:	001a      	movs	r2, r3
 8001b34:	f000 f8d4 	bl	8001ce0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2160      	movs	r1, #96	@ 0x60
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f900 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001b44:	e01e      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b52:	001a      	movs	r2, r3
 8001b54:	f000 f896 	bl	8001c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2140      	movs	r1, #64	@ 0x40
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f8f0 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001b64:	e00e      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0019      	movs	r1, r3
 8001b70:	0010      	movs	r0, r2
 8001b72:	f000 f8e7 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001b76:	e005      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b78:	230f      	movs	r3, #15
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
      break;
 8001b80:	e000      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b82:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	223d      	movs	r2, #61	@ 0x3d
 8001b88:	2101      	movs	r1, #1
 8001b8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	223c      	movs	r2, #60	@ 0x3c
 8001b90:	2100      	movs	r1, #0
 8001b92:	5499      	strb	r1, [r3, r2]

  return status;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781b      	ldrb	r3, [r3, #0]
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	ffceff88 	.word	0xffceff88
 8001ba8:	ffff00ff 	.word	0xffff00ff

08001bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <TIM_Base_SetConfig+0x20>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c70 <TIM_Base_SetConfig+0xc4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d108      	bne.n	8001bde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2270      	movs	r2, #112	@ 0x70
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00f      	beq.n	8001c06 <TIM_Base_SetConfig+0x5a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <TIM_Base_SetConfig+0xc4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00b      	beq.n	8001c06 <TIM_Base_SetConfig+0x5a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a20      	ldr	r2, [pc, #128]	@ (8001c74 <TIM_Base_SetConfig+0xc8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <TIM_Base_SetConfig+0x5a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <TIM_Base_SetConfig+0xcc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x5a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <TIM_Base_SetConfig+0xd0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <TIM_Base_SetConfig+0xd4>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2280      	movs	r2, #128	@ 0x80
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	001a      	movs	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <TIM_Base_SetConfig+0xaa>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <TIM_Base_SetConfig+0xcc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d003      	beq.n	8001c56 <TIM_Base_SetConfig+0xaa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <TIM_Base_SetConfig+0xd0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d103      	bne.n	8001c5e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	615a      	str	r2, [r3, #20]
}
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40002000 	.word	0x40002000
 8001c78:	40014400 	.word	0x40014400
 8001c7c:	40014800 	.word	0x40014800
 8001c80:	fffffcff 	.word	0xfffffcff

08001c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	22f0      	movs	r2, #240	@ 0xf0
 8001cae:	4393      	bics	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	621a      	str	r2, [r3, #32]
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b006      	add	sp, #24
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <TIM_TI2_ConfigInputStage+0x60>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	031b      	lsls	r3, r3, #12
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	22a0      	movs	r2, #160	@ 0xa0
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	621a      	str	r2, [r3, #32]
}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b006      	add	sp, #24
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	ffff0fff 	.word	0xffff0fff

08001d44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <TIM_ITRx_SetConfig+0x34>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	2207      	movs	r2, #7
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	ffcfff8f 	.word	0xffcfff8f

08001d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <TIM_ETR_SetConfig+0x3c>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b006      	add	sp, #24
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	ffff00ff 	.word	0xffff00ff

08001dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	223c      	movs	r2, #60	@ 0x3c
 8001dca:	5c9b      	ldrb	r3, [r3, r2]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e04a      	b.n	8001e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223c      	movs	r2, #60	@ 0x3c
 8001dd8:	2101      	movs	r1, #1
 8001dda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	223d      	movs	r2, #61	@ 0x3d
 8001de0:	2102      	movs	r1, #2
 8001de2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2270      	movs	r2, #112	@ 0x70
 8001e14:	4393      	bics	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a10      	ldr	r2, [pc, #64]	@ (8001e7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10c      	bne.n	8001e58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	4393      	bics	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223d      	movs	r2, #61	@ 0x3d
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	223c      	movs	r2, #60	@ 0x3c
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	ff0fffff 	.word	0xff0fffff
 8001e7c:	40000400 	.word	0x40000400

08001e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e046      	b.n	8001f20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2288      	movs	r2, #136	@ 0x88
 8001e96:	589b      	ldr	r3, [r3, r2]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2284      	movs	r2, #132	@ 0x84
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe fcb4 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2288      	movs	r2, #136	@ 0x88
 8001eb0:	2124      	movs	r1, #36	@ 0x24
 8001eb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 fa4e 	bl	8002370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f8cc 	bl	8002074 <UART_SetConfig>
 8001edc:	0003      	movs	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e01c      	b.n	8001f20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <HAL_UART_Init+0xa8>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	212a      	movs	r1, #42	@ 0x2a
 8001f02:	438a      	bics	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2101      	movs	r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fadd 	bl	80024d8 <UART_CheckIdleState>
 8001f1e:	0003      	movs	r3, r0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	ffffb7ff 	.word	0xffffb7ff

08001f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2288      	movs	r2, #136	@ 0x88
 8001f40:	589b      	ldr	r3, [r3, r2]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d000      	beq.n	8001f48 <HAL_UART_Transmit+0x1c>
 8001f46:	e090      	b.n	800206a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_UART_Transmit+0x2a>
 8001f4e:	1dbb      	adds	r3, r7, #6
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e088      	b.n	800206c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d109      	bne.n	8001f7a <HAL_UART_Transmit+0x4e>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e078      	b.n	800206c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2290      	movs	r2, #144	@ 0x90
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2288      	movs	r2, #136	@ 0x88
 8001f86:	2121      	movs	r1, #33	@ 0x21
 8001f88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fda7 	bl	8000adc <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1dba      	adds	r2, r7, #6
 8001f96:	2154      	movs	r1, #84	@ 0x54
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1dba      	adds	r2, r7, #6
 8001fa0:	2156      	movs	r1, #86	@ 0x56
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	015b      	lsls	r3, r3, #5
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d108      	bne.n	8001fc4 <HAL_UART_Transmit+0x98>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e003      	b.n	8001fcc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fcc:	e030      	b.n	8002030 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	f000 fb26 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2288      	movs	r2, #136	@ 0x88
 8001fe8:	2120      	movs	r1, #32
 8001fea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03d      	b.n	800206c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	05d2      	lsls	r2, r2, #23
 8002002:	0dd2      	lsrs	r2, r2, #23
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2256      	movs	r2, #86	@ 0x56
 8002022:	5a9b      	ldrh	r3, [r3, r2]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b299      	uxth	r1, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2256      	movs	r2, #86	@ 0x56
 800202e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2256      	movs	r2, #86	@ 0x56
 8002034:	5a9b      	ldrh	r3, [r3, r2]
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1c8      	bne.n	8001fce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	0013      	movs	r3, r2
 8002046:	2200      	movs	r2, #0
 8002048:	2140      	movs	r1, #64	@ 0x40
 800204a:	f000 faef 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d005      	beq.n	800205e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2288      	movs	r2, #136	@ 0x88
 8002056:	2120      	movs	r1, #32
 8002058:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e006      	b.n	800206c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2288      	movs	r2, #136	@ 0x88
 8002062:	2120      	movs	r1, #32
 8002064:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
  }
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b008      	add	sp, #32
 8002072:	bd80      	pop	{r7, pc}

08002074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800207c:	231e      	movs	r3, #30
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4aab      	ldr	r2, [pc, #684]	@ (8002350 <UART_SetConfig+0x2dc>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4aa6      	ldr	r2, [pc, #664]	@ (8002354 <UART_SetConfig+0x2e0>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a9d      	ldr	r2, [pc, #628]	@ (8002358 <UART_SetConfig+0x2e4>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	220f      	movs	r2, #15
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a93      	ldr	r2, [pc, #588]	@ (800235c <UART_SetConfig+0x2e8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d127      	bne.n	8002162 <UART_SetConfig+0xee>
 8002112:	4b93      	ldr	r3, [pc, #588]	@ (8002360 <UART_SetConfig+0x2ec>)
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	2203      	movs	r2, #3
 8002118:	4013      	ands	r3, r2
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <UART_SetConfig+0xda>
 800211e:	d81b      	bhi.n	8002158 <UART_SetConfig+0xe4>
 8002120:	2b02      	cmp	r3, #2
 8002122:	d00a      	beq.n	800213a <UART_SetConfig+0xc6>
 8002124:	d818      	bhi.n	8002158 <UART_SetConfig+0xe4>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <UART_SetConfig+0xbc>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00a      	beq.n	8002144 <UART_SetConfig+0xd0>
 800212e:	e013      	b.n	8002158 <UART_SetConfig+0xe4>
 8002130:	231f      	movs	r3, #31
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e021      	b.n	800217e <UART_SetConfig+0x10a>
 800213a:	231f      	movs	r3, #31
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	2202      	movs	r2, #2
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e01c      	b.n	800217e <UART_SetConfig+0x10a>
 8002144:	231f      	movs	r3, #31
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2204      	movs	r2, #4
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e017      	b.n	800217e <UART_SetConfig+0x10a>
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2208      	movs	r2, #8
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e012      	b.n	800217e <UART_SetConfig+0x10a>
 8002158:	231f      	movs	r3, #31
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2210      	movs	r2, #16
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e00d      	b.n	800217e <UART_SetConfig+0x10a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7f      	ldr	r2, [pc, #508]	@ (8002364 <UART_SetConfig+0x2f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d104      	bne.n	8002176 <UART_SetConfig+0x102>
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e003      	b.n	800217e <UART_SetConfig+0x10a>
 8002176:	231f      	movs	r3, #31
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2210      	movs	r2, #16
 800217c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	429a      	cmp	r2, r3
 8002188:	d000      	beq.n	800218c <UART_SetConfig+0x118>
 800218a:	e06f      	b.n	800226c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800218c:	231f      	movs	r3, #31
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b08      	cmp	r3, #8
 8002194:	d01f      	beq.n	80021d6 <UART_SetConfig+0x162>
 8002196:	dc22      	bgt.n	80021de <UART_SetConfig+0x16a>
 8002198:	2b04      	cmp	r3, #4
 800219a:	d017      	beq.n	80021cc <UART_SetConfig+0x158>
 800219c:	dc1f      	bgt.n	80021de <UART_SetConfig+0x16a>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <UART_SetConfig+0x134>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d005      	beq.n	80021b2 <UART_SetConfig+0x13e>
 80021a6:	e01a      	b.n	80021de <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021a8:	f7ff fa86 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 80021ac:	0003      	movs	r3, r0
 80021ae:	61bb      	str	r3, [r7, #24]
        break;
 80021b0:	e01c      	b.n	80021ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80021b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002360 <UART_SetConfig+0x2ec>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2207      	movs	r2, #7
 80021ba:	4013      	ands	r3, r2
 80021bc:	3301      	adds	r3, #1
 80021be:	0019      	movs	r1, r3
 80021c0:	4869      	ldr	r0, [pc, #420]	@ (8002368 <UART_SetConfig+0x2f4>)
 80021c2:	f7fd ffb3 	bl	800012c <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]
        break;
 80021ca:	e00f      	b.n	80021ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021cc:	f7ff fa28 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80021d0:	0003      	movs	r3, r0
 80021d2:	61bb      	str	r3, [r7, #24]
        break;
 80021d4:	e00a      	b.n	80021ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	61bb      	str	r3, [r7, #24]
        break;
 80021dc:	e006      	b.n	80021ec <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021e2:	231e      	movs	r3, #30
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <UART_SetConfig+0x180>
 80021f2:	e097      	b.n	8002324 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f8:	4b5c      	ldr	r3, [pc, #368]	@ (800236c <UART_SetConfig+0x2f8>)
 80021fa:	0052      	lsls	r2, r2, #1
 80021fc:	5ad3      	ldrh	r3, [r2, r3]
 80021fe:	0019      	movs	r1, r3
 8002200:	69b8      	ldr	r0, [r7, #24]
 8002202:	f7fd ff93 	bl	800012c <__udivsi3>
 8002206:	0003      	movs	r3, r0
 8002208:	005a      	lsls	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	18d2      	adds	r2, r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0019      	movs	r1, r3
 8002218:	0010      	movs	r0, r2
 800221a:	f7fd ff87 	bl	800012c <__udivsi3>
 800221e:	0003      	movs	r3, r0
 8002220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d91c      	bls.n	8002262 <UART_SetConfig+0x1ee>
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	025b      	lsls	r3, r3, #9
 800222e:	429a      	cmp	r2, r3
 8002230:	d217      	bcs.n	8002262 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	b29a      	uxth	r2, r3
 8002236:	200e      	movs	r0, #14
 8002238:	183b      	adds	r3, r7, r0
 800223a:	210f      	movs	r1, #15
 800223c:	438a      	bics	r2, r1
 800223e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	2207      	movs	r2, #7
 8002248:	4013      	ands	r3, r2
 800224a:	b299      	uxth	r1, r3
 800224c:	183b      	adds	r3, r7, r0
 800224e:	183a      	adds	r2, r7, r0
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	183a      	adds	r2, r7, r0
 800225c:	8812      	ldrh	r2, [r2, #0]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	e060      	b.n	8002324 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002262:	231e      	movs	r3, #30
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e05b      	b.n	8002324 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800226c:	231f      	movs	r3, #31
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b08      	cmp	r3, #8
 8002274:	d01f      	beq.n	80022b6 <UART_SetConfig+0x242>
 8002276:	dc22      	bgt.n	80022be <UART_SetConfig+0x24a>
 8002278:	2b04      	cmp	r3, #4
 800227a:	d017      	beq.n	80022ac <UART_SetConfig+0x238>
 800227c:	dc1f      	bgt.n	80022be <UART_SetConfig+0x24a>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <UART_SetConfig+0x214>
 8002282:	2b02      	cmp	r3, #2
 8002284:	d005      	beq.n	8002292 <UART_SetConfig+0x21e>
 8002286:	e01a      	b.n	80022be <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002288:	f7ff fa16 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 800228c:	0003      	movs	r3, r0
 800228e:	61bb      	str	r3, [r7, #24]
        break;
 8002290:	e01c      	b.n	80022cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <UART_SetConfig+0x2ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2207      	movs	r2, #7
 800229a:	4013      	ands	r3, r2
 800229c:	3301      	adds	r3, #1
 800229e:	0019      	movs	r1, r3
 80022a0:	4831      	ldr	r0, [pc, #196]	@ (8002368 <UART_SetConfig+0x2f4>)
 80022a2:	f7fd ff43 	bl	800012c <__udivsi3>
 80022a6:	0003      	movs	r3, r0
 80022a8:	61bb      	str	r3, [r7, #24]
        break;
 80022aa:	e00f      	b.n	80022cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ac:	f7ff f9b8 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80022b0:	0003      	movs	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]
        break;
 80022b4:	e00a      	b.n	80022cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	61bb      	str	r3, [r7, #24]
        break;
 80022bc:	e006      	b.n	80022cc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022c2:	231e      	movs	r3, #30
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
        break;
 80022ca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	4b25      	ldr	r3, [pc, #148]	@ (800236c <UART_SetConfig+0x2f8>)
 80022d8:	0052      	lsls	r2, r2, #1
 80022da:	5ad3      	ldrh	r3, [r2, r3]
 80022dc:	0019      	movs	r1, r3
 80022de:	69b8      	ldr	r0, [r7, #24]
 80022e0:	f7fd ff24 	bl	800012c <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	001a      	movs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	18d2      	adds	r2, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0019      	movs	r1, r3
 80022f6:	0010      	movs	r0, r2
 80022f8:	f7fd ff18 	bl	800012c <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	d90a      	bls.n	800231c <UART_SetConfig+0x2a8>
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	429a      	cmp	r2, r3
 800230e:	d205      	bcs.n	800231c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e003      	b.n	8002324 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800231c:	231e      	movs	r3, #30
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	226a      	movs	r2, #106	@ 0x6a
 8002328:	2101      	movs	r1, #1
 800232a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2268      	movs	r2, #104	@ 0x68
 8002330:	2101      	movs	r1, #1
 8002332:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002340:	231e      	movs	r3, #30
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b008      	add	sp, #32
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	cfff69f3 	.word	0xcfff69f3
 8002354:	ffffcfff 	.word	0xffffcfff
 8002358:	11fff4ff 	.word	0x11fff4ff
 800235c:	40013800 	.word	0x40013800
 8002360:	40021000 	.word	0x40021000
 8002364:	40004400 	.word	0x40004400
 8002368:	02dc6c00 	.word	0x02dc6c00
 800236c:	080033d0 	.word	0x080033d0

08002370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	2208      	movs	r2, #8
 800237e:	4013      	ands	r3, r2
 8002380:	d00b      	beq.n	800239a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <UART_AdvFeatureConfig+0x144>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	2201      	movs	r2, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00b      	beq.n	80023bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <UART_AdvFeatureConfig+0x148>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	2202      	movs	r2, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d00b      	beq.n	80023de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a3b      	ldr	r2, [pc, #236]	@ (80024bc <UART_AdvFeatureConfig+0x14c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d00b      	beq.n	8002400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a34      	ldr	r2, [pc, #208]	@ (80024c0 <UART_AdvFeatureConfig+0x150>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	2210      	movs	r2, #16
 8002406:	4013      	ands	r3, r2
 8002408:	d00b      	beq.n	8002422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <UART_AdvFeatureConfig+0x154>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	2220      	movs	r2, #32
 8002428:	4013      	ands	r3, r2
 800242a:	d00b      	beq.n	8002444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <UART_AdvFeatureConfig+0x158>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	2240      	movs	r2, #64	@ 0x40
 800244a:	4013      	ands	r3, r2
 800244c:	d01d      	beq.n	800248a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <UART_AdvFeatureConfig+0x15c>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	035b      	lsls	r3, r3, #13
 800246e:	429a      	cmp	r2, r3
 8002470:	d10b      	bne.n	800248a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <UART_AdvFeatureConfig+0x160>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	2280      	movs	r2, #128	@ 0x80
 8002490:	4013      	ands	r3, r2
 8002492:	d00b      	beq.n	80024ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <UART_AdvFeatureConfig+0x164>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
  }
}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	ffff7fff 	.word	0xffff7fff
 80024b8:	fffdffff 	.word	0xfffdffff
 80024bc:	fffeffff 	.word	0xfffeffff
 80024c0:	fffbffff 	.word	0xfffbffff
 80024c4:	ffffefff 	.word	0xffffefff
 80024c8:	ffffdfff 	.word	0xffffdfff
 80024cc:	ffefffff 	.word	0xffefffff
 80024d0:	ff9fffff 	.word	0xff9fffff
 80024d4:	fff7ffff 	.word	0xfff7ffff

080024d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b092      	sub	sp, #72	@ 0x48
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2290      	movs	r2, #144	@ 0x90
 80024e4:	2100      	movs	r1, #0
 80024e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024e8:	f7fe faf8 	bl	8000adc <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2208      	movs	r2, #8
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d12d      	bne.n	800255a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	0391      	lsls	r1, r2, #14
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4a47      	ldr	r2, [pc, #284]	@ (8002624 <UART_CheckIdleState+0x14c>)
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	f000 f88e 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d022      	beq.n	800255a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002514:	f3ef 8310 	mrs	r3, PRIMASK
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800251e:	2301      	movs	r3, #1
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002524:	f383 8810 	msr	PRIMASK, r3
}
 8002528:	46c0      	nop			@ (mov r8, r8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002540:	f383 8810 	msr	PRIMASK, r3
}
 8002544:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2288      	movs	r2, #136	@ 0x88
 800254a:	2120      	movs	r1, #32
 800254c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2284      	movs	r2, #132	@ 0x84
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e060      	b.n	800261c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2204      	movs	r2, #4
 8002562:	4013      	ands	r3, r2
 8002564:	2b04      	cmp	r3, #4
 8002566:	d146      	bne.n	80025f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	03d1      	lsls	r1, r2, #15
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <UART_CheckIdleState+0x14c>)
 8002572:	9200      	str	r2, [sp, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	f000 f859 	bl	800262c <UART_WaitOnFlagUntilTimeout>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d03b      	beq.n	80025f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800257e:	f3ef 8310 	mrs	r3, PRIMASK
 8002582:	60fb      	str	r3, [r7, #12]
  return(result);
 8002584:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f383 8810 	msr	PRIMASK, r3
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4922      	ldr	r1, [pc, #136]	@ (8002628 <UART_CheckIdleState+0x150>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f383 8810 	msr	PRIMASK, r3
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80025b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	438a      	bics	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	228c      	movs	r2, #140	@ 0x8c
 80025e6:	2120      	movs	r1, #32
 80025e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2284      	movs	r2, #132	@ 0x84
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e012      	b.n	800261c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2288      	movs	r2, #136	@ 0x88
 80025fa:	2120      	movs	r1, #32
 80025fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	228c      	movs	r2, #140	@ 0x8c
 8002602:	2120      	movs	r1, #32
 8002604:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2284      	movs	r2, #132	@ 0x84
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b010      	add	sp, #64	@ 0x40
 8002622:	bd80      	pop	{r7, pc}
 8002624:	01ffffff 	.word	0x01ffffff
 8002628:	fffffedf 	.word	0xfffffedf

0800262c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263c:	e04b      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	3301      	adds	r3, #1
 8002642:	d048      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fe fa4a 	bl	8000adc <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04b      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2204      	movs	r2, #4
 8002666:	4013      	ands	r3, r2
 8002668:	d035      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d111      	bne.n	800269c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f83c 	bl	8002700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2290      	movs	r2, #144	@ 0x90
 800268c:	2108      	movs	r1, #8
 800268e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2284      	movs	r2, #132	@ 0x84
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02c      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	401a      	ands	r2, r3
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d112      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f81f 	bl	8002700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2290      	movs	r2, #144	@ 0x90
 80026c6:	2120      	movs	r1, #32
 80026c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2284      	movs	r2, #132	@ 0x84
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e00f      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	425a      	negs	r2, r3
 80026e6:	4153      	adcs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	001a      	movs	r2, r3
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d0a4      	beq.n	800263e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b004      	add	sp, #16
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	@ 0x38
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	617b      	str	r3, [r7, #20]
  return(result);
 800270e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4926      	ldr	r1, [pc, #152]	@ (80027c4 <UART_EndRxTransfer+0xc4>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	623b      	str	r3, [r7, #32]
  return(result);
 8002740:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002742:	633b      	str	r3, [r7, #48]	@ 0x30
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	491b      	ldr	r1, [pc, #108]	@ (80027c8 <UART_EndRxTransfer+0xc8>)
 800275c:	400a      	ands	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d118      	bne.n	80027a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002774:	f3ef 8310 	mrs	r3, PRIMASK
 8002778:	60bb      	str	r3, [r7, #8]
  return(result);
 800277a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277e:	2301      	movs	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2110      	movs	r1, #16
 8002796:	438a      	bics	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	228c      	movs	r2, #140	@ 0x8c
 80027aa:	2120      	movs	r1, #32
 80027ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b00e      	add	sp, #56	@ 0x38
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	fffffedf 	.word	0xfffffedf
 80027c8:	effffffe 	.word	0xeffffffe

080027cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2284      	movs	r2, #132	@ 0x84
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80027de:	2302      	movs	r3, #2
 80027e0:	e027      	b.n	8002832 <HAL_UARTEx_DisableFifoMode+0x66>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2284      	movs	r2, #132	@ 0x84
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2288      	movs	r2, #136	@ 0x88
 80027ee:	2124      	movs	r1, #36	@ 0x24
 80027f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_UARTEx_DisableFifoMode+0x70>)
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2288      	movs	r2, #136	@ 0x88
 8002824:	2120      	movs	r1, #32
 8002826:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2284      	movs	r2, #132	@ 0x84
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	dfffffff 	.word	0xdfffffff

08002840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2284      	movs	r2, #132	@ 0x84
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e02e      	b.n	80028b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2284      	movs	r2, #132	@ 0x84
 800285c:	2101      	movs	r1, #1
 800285e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2288      	movs	r2, #136	@ 0x88
 8002864:	2124      	movs	r1, #36	@ 0x24
 8002866:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	08d9      	lsrs	r1, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f854 	bl	8002944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2288      	movs	r2, #136	@ 0x88
 80028a8:	2120      	movs	r1, #32
 80028aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2284      	movs	r2, #132	@ 0x84
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2284      	movs	r2, #132	@ 0x84
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e02f      	b.n	8002938 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2284      	movs	r2, #132	@ 0x84
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2288      	movs	r2, #136	@ 0x88
 80028e4:	2124      	movs	r1, #36	@ 0x24
 80028e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 f813 	bl	8002944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2288      	movs	r2, #136	@ 0x88
 800292a:	2120      	movs	r1, #32
 800292c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2284      	movs	r2, #132	@ 0x84
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	f1ffffff 	.word	0xf1ffffff

08002944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	226a      	movs	r2, #106	@ 0x6a
 8002958:	2101      	movs	r1, #1
 800295a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2268      	movs	r2, #104	@ 0x68
 8002960:	2101      	movs	r1, #1
 8002962:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002964:	e043      	b.n	80029ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002966:	260f      	movs	r6, #15
 8002968:	19bb      	adds	r3, r7, r6
 800296a:	2208      	movs	r2, #8
 800296c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800296e:	200e      	movs	r0, #14
 8002970:	183b      	adds	r3, r7, r0
 8002972:	2208      	movs	r2, #8
 8002974:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	0e5b      	lsrs	r3, r3, #25
 800297e:	b2da      	uxtb	r2, r3
 8002980:	240d      	movs	r4, #13
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2107      	movs	r1, #7
 8002986:	400a      	ands	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	0f5b      	lsrs	r3, r3, #29
 8002992:	b2da      	uxtb	r2, r3
 8002994:	250c      	movs	r5, #12
 8002996:	197b      	adds	r3, r7, r5
 8002998:	2107      	movs	r1, #7
 800299a:	400a      	ands	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	197a      	adds	r2, r7, r5
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4914      	ldr	r1, [pc, #80]	@ (80029f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80029a8:	5c8a      	ldrb	r2, [r1, r2]
 80029aa:	435a      	muls	r2, r3
 80029ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80029ae:	197b      	adds	r3, r7, r5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <UARTEx_SetNbDataToProcess+0xb8>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029b6:	0019      	movs	r1, r3
 80029b8:	f7fd fc42 	bl	8000240 <__divsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	b299      	uxth	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	226a      	movs	r2, #106	@ 0x6a
 80029c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029c6:	19bb      	adds	r3, r7, r6
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	193a      	adds	r2, r7, r4
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	490a      	ldr	r1, [pc, #40]	@ (80029f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80029d0:	5c8a      	ldrb	r2, [r1, r2]
 80029d2:	435a      	muls	r2, r3
 80029d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <UARTEx_SetNbDataToProcess+0xb8>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029de:	0019      	movs	r1, r3
 80029e0:	f7fd fc2e 	bl	8000240 <__divsi3>
 80029e4:	0003      	movs	r3, r0
 80029e6:	b299      	uxth	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2268      	movs	r2, #104	@ 0x68
 80029ec:	5299      	strh	r1, [r3, r2]
}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b005      	add	sp, #20
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	080033e8 	.word	0x080033e8
 80029fc:	080033f0 	.word	0x080033f0

08002a00 <siprintf>:
 8002a00:	b40e      	push	{r1, r2, r3}
 8002a02:	b500      	push	{lr}
 8002a04:	490b      	ldr	r1, [pc, #44]	@ (8002a34 <siprintf+0x34>)
 8002a06:	b09c      	sub	sp, #112	@ 0x70
 8002a08:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a0a:	9002      	str	r0, [sp, #8]
 8002a0c:	9006      	str	r0, [sp, #24]
 8002a0e:	9107      	str	r1, [sp, #28]
 8002a10:	9104      	str	r1, [sp, #16]
 8002a12:	4809      	ldr	r0, [pc, #36]	@ (8002a38 <siprintf+0x38>)
 8002a14:	4909      	ldr	r1, [pc, #36]	@ (8002a3c <siprintf+0x3c>)
 8002a16:	cb04      	ldmia	r3!, {r2}
 8002a18:	9105      	str	r1, [sp, #20]
 8002a1a:	6800      	ldr	r0, [r0, #0]
 8002a1c:	a902      	add	r1, sp, #8
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	f000 f99e 	bl	8002d60 <_svfiprintf_r>
 8002a24:	2200      	movs	r2, #0
 8002a26:	9b02      	ldr	r3, [sp, #8]
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	b01c      	add	sp, #112	@ 0x70
 8002a2c:	bc08      	pop	{r3}
 8002a2e:	b003      	add	sp, #12
 8002a30:	4718      	bx	r3
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	7fffffff 	.word	0x7fffffff
 8002a38:	2000002c 	.word	0x2000002c
 8002a3c:	ffff0208 	.word	0xffff0208

08002a40 <memset>:
 8002a40:	0003      	movs	r3, r0
 8002a42:	1882      	adds	r2, r0, r2
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	7019      	strb	r1, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <__errno>:
 8002a50:	4b01      	ldr	r3, [pc, #4]	@ (8002a58 <__errno+0x8>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	4770      	bx	lr
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	2000002c 	.word	0x2000002c

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4c0c      	ldr	r4, [pc, #48]	@ (8002a94 <__libc_init_array+0x38>)
 8002a62:	4d0d      	ldr	r5, [pc, #52]	@ (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	f000 fc65 	bl	800333c <_init>
 8002a72:	4c0a      	ldr	r4, [pc, #40]	@ (8002a9c <__libc_init_array+0x40>)
 8002a74:	4d0a      	ldr	r5, [pc, #40]	@ (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	00b3      	lsls	r3, r6, #2
 8002a82:	58eb      	ldr	r3, [r5, r3]
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	00b3      	lsls	r3, r6, #2
 8002a8c:	58eb      	ldr	r3, [r5, r3]
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	0800342c 	.word	0x0800342c
 8002a98:	0800342c 	.word	0x0800342c
 8002a9c:	08003430 	.word	0x08003430
 8002aa0:	0800342c 	.word	0x0800342c

08002aa4 <__retarget_lock_acquire_recursive>:
 8002aa4:	4770      	bx	lr

08002aa6 <__retarget_lock_release_recursive>:
 8002aa6:	4770      	bx	lr

08002aa8 <_free_r>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	0005      	movs	r5, r0
 8002aac:	1e0c      	subs	r4, r1, #0
 8002aae:	d010      	beq.n	8002ad2 <_free_r+0x2a>
 8002ab0:	3c04      	subs	r4, #4
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da00      	bge.n	8002aba <_free_r+0x12>
 8002ab8:	18e4      	adds	r4, r4, r3
 8002aba:	0028      	movs	r0, r5
 8002abc:	f000 f8e0 	bl	8002c80 <__malloc_lock>
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <_free_r+0x90>)
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <_free_r+0x2c>
 8002ac8:	6063      	str	r3, [r4, #4]
 8002aca:	6014      	str	r4, [r2, #0]
 8002acc:	0028      	movs	r0, r5
 8002ace:	f000 f8df 	bl	8002c90 <__malloc_unlock>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	42a3      	cmp	r3, r4
 8002ad6:	d908      	bls.n	8002aea <_free_r+0x42>
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	1821      	adds	r1, r4, r0
 8002adc:	428b      	cmp	r3, r1
 8002ade:	d1f3      	bne.n	8002ac8 <_free_r+0x20>
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	1809      	adds	r1, r1, r0
 8002ae6:	6021      	str	r1, [r4, #0]
 8002ae8:	e7ee      	b.n	8002ac8 <_free_r+0x20>
 8002aea:	001a      	movs	r2, r3
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <_free_r+0x4e>
 8002af2:	42a3      	cmp	r3, r4
 8002af4:	d9f9      	bls.n	8002aea <_free_r+0x42>
 8002af6:	6811      	ldr	r1, [r2, #0]
 8002af8:	1850      	adds	r0, r2, r1
 8002afa:	42a0      	cmp	r0, r4
 8002afc:	d10b      	bne.n	8002b16 <_free_r+0x6e>
 8002afe:	6820      	ldr	r0, [r4, #0]
 8002b00:	1809      	adds	r1, r1, r0
 8002b02:	1850      	adds	r0, r2, r1
 8002b04:	6011      	str	r1, [r2, #0]
 8002b06:	4283      	cmp	r3, r0
 8002b08:	d1e0      	bne.n	8002acc <_free_r+0x24>
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	1841      	adds	r1, r0, r1
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	6053      	str	r3, [r2, #4]
 8002b14:	e7da      	b.n	8002acc <_free_r+0x24>
 8002b16:	42a0      	cmp	r0, r4
 8002b18:	d902      	bls.n	8002b20 <_free_r+0x78>
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	602b      	str	r3, [r5, #0]
 8002b1e:	e7d5      	b.n	8002acc <_free_r+0x24>
 8002b20:	6820      	ldr	r0, [r4, #0]
 8002b22:	1821      	adds	r1, r4, r0
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d103      	bne.n	8002b30 <_free_r+0x88>
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	1809      	adds	r1, r1, r0
 8002b2e:	6021      	str	r1, [r4, #0]
 8002b30:	6063      	str	r3, [r4, #4]
 8002b32:	6054      	str	r4, [r2, #4]
 8002b34:	e7ca      	b.n	8002acc <_free_r+0x24>
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	2000030c 	.word	0x2000030c

08002b3c <sbrk_aligned>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8002b7c <sbrk_aligned+0x40>)
 8002b40:	000d      	movs	r5, r1
 8002b42:	6831      	ldr	r1, [r6, #0]
 8002b44:	0004      	movs	r4, r0
 8002b46:	2900      	cmp	r1, #0
 8002b48:	d102      	bne.n	8002b50 <sbrk_aligned+0x14>
 8002b4a:	f000 fb99 	bl	8003280 <_sbrk_r>
 8002b4e:	6030      	str	r0, [r6, #0]
 8002b50:	0029      	movs	r1, r5
 8002b52:	0020      	movs	r0, r4
 8002b54:	f000 fb94 	bl	8003280 <_sbrk_r>
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	d103      	bne.n	8002b64 <sbrk_aligned+0x28>
 8002b5c:	2501      	movs	r5, #1
 8002b5e:	426d      	negs	r5, r5
 8002b60:	0028      	movs	r0, r5
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	2303      	movs	r3, #3
 8002b66:	1cc5      	adds	r5, r0, #3
 8002b68:	439d      	bics	r5, r3
 8002b6a:	42a8      	cmp	r0, r5
 8002b6c:	d0f8      	beq.n	8002b60 <sbrk_aligned+0x24>
 8002b6e:	1a29      	subs	r1, r5, r0
 8002b70:	0020      	movs	r0, r4
 8002b72:	f000 fb85 	bl	8003280 <_sbrk_r>
 8002b76:	3001      	adds	r0, #1
 8002b78:	d1f2      	bne.n	8002b60 <sbrk_aligned+0x24>
 8002b7a:	e7ef      	b.n	8002b5c <sbrk_aligned+0x20>
 8002b7c:	20000308 	.word	0x20000308

08002b80 <_malloc_r>:
 8002b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b82:	2203      	movs	r2, #3
 8002b84:	1ccb      	adds	r3, r1, #3
 8002b86:	4393      	bics	r3, r2
 8002b88:	3308      	adds	r3, #8
 8002b8a:	0005      	movs	r5, r0
 8002b8c:	001f      	movs	r7, r3
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d234      	bcs.n	8002bfc <_malloc_r+0x7c>
 8002b92:	270c      	movs	r7, #12
 8002b94:	42b9      	cmp	r1, r7
 8002b96:	d833      	bhi.n	8002c00 <_malloc_r+0x80>
 8002b98:	0028      	movs	r0, r5
 8002b9a:	f000 f871 	bl	8002c80 <__malloc_lock>
 8002b9e:	4e37      	ldr	r6, [pc, #220]	@ (8002c7c <_malloc_r+0xfc>)
 8002ba0:	6833      	ldr	r3, [r6, #0]
 8002ba2:	001c      	movs	r4, r3
 8002ba4:	2c00      	cmp	r4, #0
 8002ba6:	d12f      	bne.n	8002c08 <_malloc_r+0x88>
 8002ba8:	0039      	movs	r1, r7
 8002baa:	0028      	movs	r0, r5
 8002bac:	f7ff ffc6 	bl	8002b3c <sbrk_aligned>
 8002bb0:	0004      	movs	r4, r0
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	d15f      	bne.n	8002c76 <_malloc_r+0xf6>
 8002bb6:	6834      	ldr	r4, [r6, #0]
 8002bb8:	9400      	str	r4, [sp, #0]
 8002bba:	9b00      	ldr	r3, [sp, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d14a      	bne.n	8002c56 <_malloc_r+0xd6>
 8002bc0:	2c00      	cmp	r4, #0
 8002bc2:	d052      	beq.n	8002c6a <_malloc_r+0xea>
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	0028      	movs	r0, r5
 8002bc8:	18e3      	adds	r3, r4, r3
 8002bca:	9900      	ldr	r1, [sp, #0]
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f000 fb57 	bl	8003280 <_sbrk_r>
 8002bd2:	9b01      	ldr	r3, [sp, #4]
 8002bd4:	4283      	cmp	r3, r0
 8002bd6:	d148      	bne.n	8002c6a <_malloc_r+0xea>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	0028      	movs	r0, r5
 8002bdc:	1aff      	subs	r7, r7, r3
 8002bde:	0039      	movs	r1, r7
 8002be0:	f7ff ffac 	bl	8002b3c <sbrk_aligned>
 8002be4:	3001      	adds	r0, #1
 8002be6:	d040      	beq.n	8002c6a <_malloc_r+0xea>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	19db      	adds	r3, r3, r7
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	6833      	ldr	r3, [r6, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d133      	bne.n	8002c5e <_malloc_r+0xde>
 8002bf6:	9b00      	ldr	r3, [sp, #0]
 8002bf8:	6033      	str	r3, [r6, #0]
 8002bfa:	e019      	b.n	8002c30 <_malloc_r+0xb0>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dac9      	bge.n	8002b94 <_malloc_r+0x14>
 8002c00:	230c      	movs	r3, #12
 8002c02:	602b      	str	r3, [r5, #0]
 8002c04:	2000      	movs	r0, #0
 8002c06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c08:	6821      	ldr	r1, [r4, #0]
 8002c0a:	1bc9      	subs	r1, r1, r7
 8002c0c:	d420      	bmi.n	8002c50 <_malloc_r+0xd0>
 8002c0e:	290b      	cmp	r1, #11
 8002c10:	d90a      	bls.n	8002c28 <_malloc_r+0xa8>
 8002c12:	19e2      	adds	r2, r4, r7
 8002c14:	6027      	str	r7, [r4, #0]
 8002c16:	42a3      	cmp	r3, r4
 8002c18:	d104      	bne.n	8002c24 <_malloc_r+0xa4>
 8002c1a:	6032      	str	r2, [r6, #0]
 8002c1c:	6863      	ldr	r3, [r4, #4]
 8002c1e:	6011      	str	r1, [r2, #0]
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	e005      	b.n	8002c30 <_malloc_r+0xb0>
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	e7f9      	b.n	8002c1c <_malloc_r+0x9c>
 8002c28:	6862      	ldr	r2, [r4, #4]
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	d10e      	bne.n	8002c4c <_malloc_r+0xcc>
 8002c2e:	6032      	str	r2, [r6, #0]
 8002c30:	0028      	movs	r0, r5
 8002c32:	f000 f82d 	bl	8002c90 <__malloc_unlock>
 8002c36:	0020      	movs	r0, r4
 8002c38:	2207      	movs	r2, #7
 8002c3a:	300b      	adds	r0, #11
 8002c3c:	1d23      	adds	r3, r4, #4
 8002c3e:	4390      	bics	r0, r2
 8002c40:	1ac2      	subs	r2, r0, r3
 8002c42:	4298      	cmp	r0, r3
 8002c44:	d0df      	beq.n	8002c06 <_malloc_r+0x86>
 8002c46:	1a1b      	subs	r3, r3, r0
 8002c48:	50a3      	str	r3, [r4, r2]
 8002c4a:	e7dc      	b.n	8002c06 <_malloc_r+0x86>
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e7ef      	b.n	8002c30 <_malloc_r+0xb0>
 8002c50:	0023      	movs	r3, r4
 8002c52:	6864      	ldr	r4, [r4, #4]
 8002c54:	e7a6      	b.n	8002ba4 <_malloc_r+0x24>
 8002c56:	9c00      	ldr	r4, [sp, #0]
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	e7ad      	b.n	8002bba <_malloc_r+0x3a>
 8002c5e:	001a      	movs	r2, r3
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	d1fb      	bne.n	8002c5e <_malloc_r+0xde>
 8002c66:	2300      	movs	r3, #0
 8002c68:	e7da      	b.n	8002c20 <_malloc_r+0xa0>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	0028      	movs	r0, r5
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	f000 f80e 	bl	8002c90 <__malloc_unlock>
 8002c74:	e7c6      	b.n	8002c04 <_malloc_r+0x84>
 8002c76:	6007      	str	r7, [r0, #0]
 8002c78:	e7da      	b.n	8002c30 <_malloc_r+0xb0>
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	2000030c 	.word	0x2000030c

08002c80 <__malloc_lock>:
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <__malloc_lock+0xc>)
 8002c84:	f7ff ff0e 	bl	8002aa4 <__retarget_lock_acquire_recursive>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	20000304 	.word	0x20000304

08002c90 <__malloc_unlock>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <__malloc_unlock+0xc>)
 8002c94:	f7ff ff07 	bl	8002aa6 <__retarget_lock_release_recursive>
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	20000304 	.word	0x20000304

08002ca0 <__ssputs_r>:
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	688e      	ldr	r6, [r1, #8]
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	001f      	movs	r7, r3
 8002ca8:	000c      	movs	r4, r1
 8002caa:	680b      	ldr	r3, [r1, #0]
 8002cac:	9002      	str	r0, [sp, #8]
 8002cae:	9203      	str	r2, [sp, #12]
 8002cb0:	42be      	cmp	r6, r7
 8002cb2:	d830      	bhi.n	8002d16 <__ssputs_r+0x76>
 8002cb4:	210c      	movs	r1, #12
 8002cb6:	5e62      	ldrsh	r2, [r4, r1]
 8002cb8:	2190      	movs	r1, #144	@ 0x90
 8002cba:	00c9      	lsls	r1, r1, #3
 8002cbc:	420a      	tst	r2, r1
 8002cbe:	d028      	beq.n	8002d12 <__ssputs_r+0x72>
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	6921      	ldr	r1, [r4, #16]
 8002cc4:	1a5b      	subs	r3, r3, r1
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	6963      	ldr	r3, [r4, #20]
 8002cca:	4343      	muls	r3, r0
 8002ccc:	9801      	ldr	r0, [sp, #4]
 8002cce:	0fdd      	lsrs	r5, r3, #31
 8002cd0:	18ed      	adds	r5, r5, r3
 8002cd2:	1c7b      	adds	r3, r7, #1
 8002cd4:	181b      	adds	r3, r3, r0
 8002cd6:	106d      	asrs	r5, r5, #1
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	d900      	bls.n	8002cde <__ssputs_r+0x3e>
 8002cdc:	001d      	movs	r5, r3
 8002cde:	0552      	lsls	r2, r2, #21
 8002ce0:	d528      	bpl.n	8002d34 <__ssputs_r+0x94>
 8002ce2:	0029      	movs	r1, r5
 8002ce4:	9802      	ldr	r0, [sp, #8]
 8002ce6:	f7ff ff4b 	bl	8002b80 <_malloc_r>
 8002cea:	1e06      	subs	r6, r0, #0
 8002cec:	d02c      	beq.n	8002d48 <__ssputs_r+0xa8>
 8002cee:	9a01      	ldr	r2, [sp, #4]
 8002cf0:	6921      	ldr	r1, [r4, #16]
 8002cf2:	f000 fae2 	bl	80032ba <memcpy>
 8002cf6:	89a2      	ldrh	r2, [r4, #12]
 8002cf8:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <__ssputs_r+0xbc>)
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	9b01      	ldr	r3, [sp, #4]
 8002d04:	6126      	str	r6, [r4, #16]
 8002d06:	18f6      	adds	r6, r6, r3
 8002d08:	6026      	str	r6, [r4, #0]
 8002d0a:	003e      	movs	r6, r7
 8002d0c:	6165      	str	r5, [r4, #20]
 8002d0e:	1aed      	subs	r5, r5, r3
 8002d10:	60a5      	str	r5, [r4, #8]
 8002d12:	42be      	cmp	r6, r7
 8002d14:	d900      	bls.n	8002d18 <__ssputs_r+0x78>
 8002d16:	003e      	movs	r6, r7
 8002d18:	0032      	movs	r2, r6
 8002d1a:	9903      	ldr	r1, [sp, #12]
 8002d1c:	6820      	ldr	r0, [r4, #0]
 8002d1e:	f000 fa9b 	bl	8003258 <memmove>
 8002d22:	2000      	movs	r0, #0
 8002d24:	68a3      	ldr	r3, [r4, #8]
 8002d26:	1b9b      	subs	r3, r3, r6
 8002d28:	60a3      	str	r3, [r4, #8]
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	199b      	adds	r3, r3, r6
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	b005      	add	sp, #20
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d34:	002a      	movs	r2, r5
 8002d36:	9802      	ldr	r0, [sp, #8]
 8002d38:	f000 fac8 	bl	80032cc <_realloc_r>
 8002d3c:	1e06      	subs	r6, r0, #0
 8002d3e:	d1e0      	bne.n	8002d02 <__ssputs_r+0x62>
 8002d40:	6921      	ldr	r1, [r4, #16]
 8002d42:	9802      	ldr	r0, [sp, #8]
 8002d44:	f7ff feb0 	bl	8002aa8 <_free_r>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	9a02      	ldr	r2, [sp, #8]
 8002d4e:	4240      	negs	r0, r0
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	89a2      	ldrh	r2, [r4, #12]
 8002d54:	3334      	adds	r3, #52	@ 0x34
 8002d56:	4313      	orrs	r3, r2
 8002d58:	81a3      	strh	r3, [r4, #12]
 8002d5a:	e7e9      	b.n	8002d30 <__ssputs_r+0x90>
 8002d5c:	fffffb7f 	.word	0xfffffb7f

08002d60 <_svfiprintf_r>:
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	b0a1      	sub	sp, #132	@ 0x84
 8002d64:	9003      	str	r0, [sp, #12]
 8002d66:	001d      	movs	r5, r3
 8002d68:	898b      	ldrh	r3, [r1, #12]
 8002d6a:	000f      	movs	r7, r1
 8002d6c:	0016      	movs	r6, r2
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	d511      	bpl.n	8002d96 <_svfiprintf_r+0x36>
 8002d72:	690b      	ldr	r3, [r1, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10e      	bne.n	8002d96 <_svfiprintf_r+0x36>
 8002d78:	2140      	movs	r1, #64	@ 0x40
 8002d7a:	f7ff ff01 	bl	8002b80 <_malloc_r>
 8002d7e:	6038      	str	r0, [r7, #0]
 8002d80:	6138      	str	r0, [r7, #16]
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d105      	bne.n	8002d92 <_svfiprintf_r+0x32>
 8002d86:	230c      	movs	r3, #12
 8002d88:	9a03      	ldr	r2, [sp, #12]
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	4240      	negs	r0, r0
 8002d90:	e0cf      	b.n	8002f32 <_svfiprintf_r+0x1d2>
 8002d92:	2340      	movs	r3, #64	@ 0x40
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	2300      	movs	r3, #0
 8002d98:	ac08      	add	r4, sp, #32
 8002d9a:	6163      	str	r3, [r4, #20]
 8002d9c:	3320      	adds	r3, #32
 8002d9e:	7663      	strb	r3, [r4, #25]
 8002da0:	3310      	adds	r3, #16
 8002da2:	76a3      	strb	r3, [r4, #26]
 8002da4:	9507      	str	r5, [sp, #28]
 8002da6:	0035      	movs	r5, r6
 8002da8:	782b      	ldrb	r3, [r5, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <_svfiprintf_r+0x52>
 8002dae:	2b25      	cmp	r3, #37	@ 0x25
 8002db0:	d148      	bne.n	8002e44 <_svfiprintf_r+0xe4>
 8002db2:	1bab      	subs	r3, r5, r6
 8002db4:	9305      	str	r3, [sp, #20]
 8002db6:	42b5      	cmp	r5, r6
 8002db8:	d00b      	beq.n	8002dd2 <_svfiprintf_r+0x72>
 8002dba:	0032      	movs	r2, r6
 8002dbc:	0039      	movs	r1, r7
 8002dbe:	9803      	ldr	r0, [sp, #12]
 8002dc0:	f7ff ff6e 	bl	8002ca0 <__ssputs_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d100      	bne.n	8002dca <_svfiprintf_r+0x6a>
 8002dc8:	e0ae      	b.n	8002f28 <_svfiprintf_r+0x1c8>
 8002dca:	6963      	ldr	r3, [r4, #20]
 8002dcc:	9a05      	ldr	r2, [sp, #20]
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	6163      	str	r3, [r4, #20]
 8002dd2:	782b      	ldrb	r3, [r5, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d100      	bne.n	8002dda <_svfiprintf_r+0x7a>
 8002dd8:	e0a6      	b.n	8002f28 <_svfiprintf_r+0x1c8>
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4252      	negs	r2, r2
 8002de0:	6062      	str	r2, [r4, #4]
 8002de2:	a904      	add	r1, sp, #16
 8002de4:	3254      	adds	r2, #84	@ 0x54
 8002de6:	1852      	adds	r2, r2, r1
 8002de8:	1c6e      	adds	r6, r5, #1
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	60e3      	str	r3, [r4, #12]
 8002dee:	60a3      	str	r3, [r4, #8]
 8002df0:	7013      	strb	r3, [r2, #0]
 8002df2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002df4:	4b54      	ldr	r3, [pc, #336]	@ (8002f48 <_svfiprintf_r+0x1e8>)
 8002df6:	2205      	movs	r2, #5
 8002df8:	0018      	movs	r0, r3
 8002dfa:	7831      	ldrb	r1, [r6, #0]
 8002dfc:	9305      	str	r3, [sp, #20]
 8002dfe:	f000 fa51 	bl	80032a4 <memchr>
 8002e02:	1c75      	adds	r5, r6, #1
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d11f      	bne.n	8002e48 <_svfiprintf_r+0xe8>
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	06d3      	lsls	r3, r2, #27
 8002e0c:	d504      	bpl.n	8002e18 <_svfiprintf_r+0xb8>
 8002e0e:	2353      	movs	r3, #83	@ 0x53
 8002e10:	a904      	add	r1, sp, #16
 8002e12:	185b      	adds	r3, r3, r1
 8002e14:	2120      	movs	r1, #32
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	0713      	lsls	r3, r2, #28
 8002e1a:	d504      	bpl.n	8002e26 <_svfiprintf_r+0xc6>
 8002e1c:	2353      	movs	r3, #83	@ 0x53
 8002e1e:	a904      	add	r1, sp, #16
 8002e20:	185b      	adds	r3, r3, r1
 8002e22:	212b      	movs	r1, #43	@ 0x2b
 8002e24:	7019      	strb	r1, [r3, #0]
 8002e26:	7833      	ldrb	r3, [r6, #0]
 8002e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e2a:	d016      	beq.n	8002e5a <_svfiprintf_r+0xfa>
 8002e2c:	0035      	movs	r5, r6
 8002e2e:	2100      	movs	r1, #0
 8002e30:	200a      	movs	r0, #10
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	782a      	ldrb	r2, [r5, #0]
 8002e36:	1c6e      	adds	r6, r5, #1
 8002e38:	3a30      	subs	r2, #48	@ 0x30
 8002e3a:	2a09      	cmp	r2, #9
 8002e3c:	d950      	bls.n	8002ee0 <_svfiprintf_r+0x180>
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d111      	bne.n	8002e66 <_svfiprintf_r+0x106>
 8002e42:	e017      	b.n	8002e74 <_svfiprintf_r+0x114>
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7af      	b.n	8002da8 <_svfiprintf_r+0x48>
 8002e48:	9b05      	ldr	r3, [sp, #20]
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	1ac0      	subs	r0, r0, r3
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4083      	lsls	r3, r0
 8002e52:	4313      	orrs	r3, r2
 8002e54:	002e      	movs	r6, r5
 8002e56:	6023      	str	r3, [r4, #0]
 8002e58:	e7cc      	b.n	8002df4 <_svfiprintf_r+0x94>
 8002e5a:	9b07      	ldr	r3, [sp, #28]
 8002e5c:	1d19      	adds	r1, r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	9107      	str	r1, [sp, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db01      	blt.n	8002e6a <_svfiprintf_r+0x10a>
 8002e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e68:	e004      	b.n	8002e74 <_svfiprintf_r+0x114>
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	60e3      	str	r3, [r4, #12]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	4313      	orrs	r3, r2
 8002e72:	6023      	str	r3, [r4, #0]
 8002e74:	782b      	ldrb	r3, [r5, #0]
 8002e76:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e78:	d10c      	bne.n	8002e94 <_svfiprintf_r+0x134>
 8002e7a:	786b      	ldrb	r3, [r5, #1]
 8002e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e7e:	d134      	bne.n	8002eea <_svfiprintf_r+0x18a>
 8002e80:	9b07      	ldr	r3, [sp, #28]
 8002e82:	3502      	adds	r5, #2
 8002e84:	1d1a      	adds	r2, r3, #4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	9207      	str	r2, [sp, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da01      	bge.n	8002e92 <_svfiprintf_r+0x132>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	425b      	negs	r3, r3
 8002e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e94:	4e2d      	ldr	r6, [pc, #180]	@ (8002f4c <_svfiprintf_r+0x1ec>)
 8002e96:	2203      	movs	r2, #3
 8002e98:	0030      	movs	r0, r6
 8002e9a:	7829      	ldrb	r1, [r5, #0]
 8002e9c:	f000 fa02 	bl	80032a4 <memchr>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d006      	beq.n	8002eb2 <_svfiprintf_r+0x152>
 8002ea4:	2340      	movs	r3, #64	@ 0x40
 8002ea6:	1b80      	subs	r0, r0, r6
 8002ea8:	4083      	lsls	r3, r0
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	3501      	adds	r5, #1
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	7829      	ldrb	r1, [r5, #0]
 8002eb4:	2206      	movs	r2, #6
 8002eb6:	4826      	ldr	r0, [pc, #152]	@ (8002f50 <_svfiprintf_r+0x1f0>)
 8002eb8:	1c6e      	adds	r6, r5, #1
 8002eba:	7621      	strb	r1, [r4, #24]
 8002ebc:	f000 f9f2 	bl	80032a4 <memchr>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d038      	beq.n	8002f36 <_svfiprintf_r+0x1d6>
 8002ec4:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <_svfiprintf_r+0x1f4>)
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d122      	bne.n	8002f10 <_svfiprintf_r+0x1b0>
 8002eca:	2207      	movs	r2, #7
 8002ecc:	9b07      	ldr	r3, [sp, #28]
 8002ece:	3307      	adds	r3, #7
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	6963      	ldr	r3, [r4, #20]
 8002ed8:	9a04      	ldr	r2, [sp, #16]
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	6163      	str	r3, [r4, #20]
 8002ede:	e762      	b.n	8002da6 <_svfiprintf_r+0x46>
 8002ee0:	4343      	muls	r3, r0
 8002ee2:	0035      	movs	r5, r6
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	e7a4      	b.n	8002e34 <_svfiprintf_r+0xd4>
 8002eea:	2300      	movs	r3, #0
 8002eec:	200a      	movs	r0, #10
 8002eee:	0019      	movs	r1, r3
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	6063      	str	r3, [r4, #4]
 8002ef4:	782a      	ldrb	r2, [r5, #0]
 8002ef6:	1c6e      	adds	r6, r5, #1
 8002ef8:	3a30      	subs	r2, #48	@ 0x30
 8002efa:	2a09      	cmp	r2, #9
 8002efc:	d903      	bls.n	8002f06 <_svfiprintf_r+0x1a6>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0c8      	beq.n	8002e94 <_svfiprintf_r+0x134>
 8002f02:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f04:	e7c6      	b.n	8002e94 <_svfiprintf_r+0x134>
 8002f06:	4341      	muls	r1, r0
 8002f08:	0035      	movs	r5, r6
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	1889      	adds	r1, r1, r2
 8002f0e:	e7f1      	b.n	8002ef4 <_svfiprintf_r+0x194>
 8002f10:	aa07      	add	r2, sp, #28
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	0021      	movs	r1, r4
 8002f16:	003a      	movs	r2, r7
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <_svfiprintf_r+0x1f8>)
 8002f1a:	9803      	ldr	r0, [sp, #12]
 8002f1c:	e000      	b.n	8002f20 <_svfiprintf_r+0x1c0>
 8002f1e:	bf00      	nop
 8002f20:	9004      	str	r0, [sp, #16]
 8002f22:	9b04      	ldr	r3, [sp, #16]
 8002f24:	3301      	adds	r3, #1
 8002f26:	d1d6      	bne.n	8002ed6 <_svfiprintf_r+0x176>
 8002f28:	89bb      	ldrh	r3, [r7, #12]
 8002f2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002f2c:	065b      	lsls	r3, r3, #25
 8002f2e:	d500      	bpl.n	8002f32 <_svfiprintf_r+0x1d2>
 8002f30:	e72c      	b.n	8002d8c <_svfiprintf_r+0x2c>
 8002f32:	b021      	add	sp, #132	@ 0x84
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f36:	aa07      	add	r2, sp, #28
 8002f38:	9200      	str	r2, [sp, #0]
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	003a      	movs	r2, r7
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <_svfiprintf_r+0x1f8>)
 8002f40:	9803      	ldr	r0, [sp, #12]
 8002f42:	f000 f87b 	bl	800303c <_printf_i>
 8002f46:	e7eb      	b.n	8002f20 <_svfiprintf_r+0x1c0>
 8002f48:	080033f8 	.word	0x080033f8
 8002f4c:	080033fe 	.word	0x080033fe
 8002f50:	08003402 	.word	0x08003402
 8002f54:	00000000 	.word	0x00000000
 8002f58:	08002ca1 	.word	0x08002ca1

08002f5c <_printf_common>:
 8002f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f5e:	0016      	movs	r6, r2
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	688a      	ldr	r2, [r1, #8]
 8002f64:	690b      	ldr	r3, [r1, #16]
 8002f66:	000c      	movs	r4, r1
 8002f68:	9000      	str	r0, [sp, #0]
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	da00      	bge.n	8002f70 <_printf_common+0x14>
 8002f6e:	0013      	movs	r3, r2
 8002f70:	0022      	movs	r2, r4
 8002f72:	6033      	str	r3, [r6, #0]
 8002f74:	3243      	adds	r2, #67	@ 0x43
 8002f76:	7812      	ldrb	r2, [r2, #0]
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	d001      	beq.n	8002f80 <_printf_common+0x24>
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	d502      	bpl.n	8002f8c <_printf_common+0x30>
 8002f86:	6833      	ldr	r3, [r6, #0]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	6033      	str	r3, [r6, #0]
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	2306      	movs	r3, #6
 8002f90:	0015      	movs	r5, r2
 8002f92:	401d      	ands	r5, r3
 8002f94:	421a      	tst	r2, r3
 8002f96:	d027      	beq.n	8002fe8 <_printf_common+0x8c>
 8002f98:	0023      	movs	r3, r4
 8002f9a:	3343      	adds	r3, #67	@ 0x43
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	1e5a      	subs	r2, r3, #1
 8002fa0:	4193      	sbcs	r3, r2
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	0692      	lsls	r2, r2, #26
 8002fa6:	d430      	bmi.n	800300a <_printf_common+0xae>
 8002fa8:	0022      	movs	r2, r4
 8002faa:	9901      	ldr	r1, [sp, #4]
 8002fac:	9800      	ldr	r0, [sp, #0]
 8002fae:	9d08      	ldr	r5, [sp, #32]
 8002fb0:	3243      	adds	r2, #67	@ 0x43
 8002fb2:	47a8      	blx	r5
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d025      	beq.n	8003004 <_printf_common+0xa8>
 8002fb8:	2206      	movs	r2, #6
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d105      	bne.n	8002fd0 <_printf_common+0x74>
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	68e5      	ldr	r5, [r4, #12]
 8002fc8:	1aed      	subs	r5, r5, r3
 8002fca:	43eb      	mvns	r3, r5
 8002fcc:	17db      	asrs	r3, r3, #31
 8002fce:	401d      	ands	r5, r3
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	dd01      	ble.n	8002fdc <_printf_common+0x80>
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	18ed      	adds	r5, r5, r3
 8002fdc:	2600      	movs	r6, #0
 8002fde:	42b5      	cmp	r5, r6
 8002fe0:	d120      	bne.n	8003024 <_printf_common+0xc8>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e010      	b.n	8003008 <_printf_common+0xac>
 8002fe6:	3501      	adds	r5, #1
 8002fe8:	68e3      	ldr	r3, [r4, #12]
 8002fea:	6832      	ldr	r2, [r6, #0]
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	42ab      	cmp	r3, r5
 8002ff0:	ddd2      	ble.n	8002f98 <_printf_common+0x3c>
 8002ff2:	0022      	movs	r2, r4
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	9901      	ldr	r1, [sp, #4]
 8002ff8:	9800      	ldr	r0, [sp, #0]
 8002ffa:	9f08      	ldr	r7, [sp, #32]
 8002ffc:	3219      	adds	r2, #25
 8002ffe:	47b8      	blx	r7
 8003000:	3001      	adds	r0, #1
 8003002:	d1f0      	bne.n	8002fe6 <_printf_common+0x8a>
 8003004:	2001      	movs	r0, #1
 8003006:	4240      	negs	r0, r0
 8003008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800300a:	2030      	movs	r0, #48	@ 0x30
 800300c:	18e1      	adds	r1, r4, r3
 800300e:	3143      	adds	r1, #67	@ 0x43
 8003010:	7008      	strb	r0, [r1, #0]
 8003012:	0021      	movs	r1, r4
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	3145      	adds	r1, #69	@ 0x45
 8003018:	7809      	ldrb	r1, [r1, #0]
 800301a:	18a2      	adds	r2, r4, r2
 800301c:	3243      	adds	r2, #67	@ 0x43
 800301e:	3302      	adds	r3, #2
 8003020:	7011      	strb	r1, [r2, #0]
 8003022:	e7c1      	b.n	8002fa8 <_printf_common+0x4c>
 8003024:	0022      	movs	r2, r4
 8003026:	2301      	movs	r3, #1
 8003028:	9901      	ldr	r1, [sp, #4]
 800302a:	9800      	ldr	r0, [sp, #0]
 800302c:	9f08      	ldr	r7, [sp, #32]
 800302e:	321a      	adds	r2, #26
 8003030:	47b8      	blx	r7
 8003032:	3001      	adds	r0, #1
 8003034:	d0e6      	beq.n	8003004 <_printf_common+0xa8>
 8003036:	3601      	adds	r6, #1
 8003038:	e7d1      	b.n	8002fde <_printf_common+0x82>
	...

0800303c <_printf_i>:
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b08b      	sub	sp, #44	@ 0x2c
 8003040:	9206      	str	r2, [sp, #24]
 8003042:	000a      	movs	r2, r1
 8003044:	3243      	adds	r2, #67	@ 0x43
 8003046:	9307      	str	r3, [sp, #28]
 8003048:	9005      	str	r0, [sp, #20]
 800304a:	9203      	str	r2, [sp, #12]
 800304c:	7e0a      	ldrb	r2, [r1, #24]
 800304e:	000c      	movs	r4, r1
 8003050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003052:	2a78      	cmp	r2, #120	@ 0x78
 8003054:	d809      	bhi.n	800306a <_printf_i+0x2e>
 8003056:	2a62      	cmp	r2, #98	@ 0x62
 8003058:	d80b      	bhi.n	8003072 <_printf_i+0x36>
 800305a:	2a00      	cmp	r2, #0
 800305c:	d100      	bne.n	8003060 <_printf_i+0x24>
 800305e:	e0bc      	b.n	80031da <_printf_i+0x19e>
 8003060:	497b      	ldr	r1, [pc, #492]	@ (8003250 <_printf_i+0x214>)
 8003062:	9104      	str	r1, [sp, #16]
 8003064:	2a58      	cmp	r2, #88	@ 0x58
 8003066:	d100      	bne.n	800306a <_printf_i+0x2e>
 8003068:	e090      	b.n	800318c <_printf_i+0x150>
 800306a:	0025      	movs	r5, r4
 800306c:	3542      	adds	r5, #66	@ 0x42
 800306e:	702a      	strb	r2, [r5, #0]
 8003070:	e022      	b.n	80030b8 <_printf_i+0x7c>
 8003072:	0010      	movs	r0, r2
 8003074:	3863      	subs	r0, #99	@ 0x63
 8003076:	2815      	cmp	r0, #21
 8003078:	d8f7      	bhi.n	800306a <_printf_i+0x2e>
 800307a:	f7fd f84d 	bl	8000118 <__gnu_thumb1_case_shi>
 800307e:	0016      	.short	0x0016
 8003080:	fff6001f 	.word	0xfff6001f
 8003084:	fff6fff6 	.word	0xfff6fff6
 8003088:	001ffff6 	.word	0x001ffff6
 800308c:	fff6fff6 	.word	0xfff6fff6
 8003090:	fff6fff6 	.word	0xfff6fff6
 8003094:	003600a1 	.word	0x003600a1
 8003098:	fff60080 	.word	0xfff60080
 800309c:	00b2fff6 	.word	0x00b2fff6
 80030a0:	0036fff6 	.word	0x0036fff6
 80030a4:	fff6fff6 	.word	0xfff6fff6
 80030a8:	0084      	.short	0x0084
 80030aa:	0025      	movs	r5, r4
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	3542      	adds	r5, #66	@ 0x42
 80030b0:	1d11      	adds	r1, r2, #4
 80030b2:	6019      	str	r1, [r3, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	702b      	strb	r3, [r5, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0a0      	b.n	80031fe <_printf_i+0x1c2>
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	6809      	ldr	r1, [r1, #0]
 80030c0:	1d02      	adds	r2, r0, #4
 80030c2:	060d      	lsls	r5, r1, #24
 80030c4:	d50b      	bpl.n	80030de <_printf_i+0xa2>
 80030c6:	6806      	ldr	r6, [r0, #0]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	da03      	bge.n	80030d6 <_printf_i+0x9a>
 80030ce:	232d      	movs	r3, #45	@ 0x2d
 80030d0:	9a03      	ldr	r2, [sp, #12]
 80030d2:	4276      	negs	r6, r6
 80030d4:	7013      	strb	r3, [r2, #0]
 80030d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <_printf_i+0x214>)
 80030d8:	270a      	movs	r7, #10
 80030da:	9304      	str	r3, [sp, #16]
 80030dc:	e018      	b.n	8003110 <_printf_i+0xd4>
 80030de:	6806      	ldr	r6, [r0, #0]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	0649      	lsls	r1, r1, #25
 80030e4:	d5f1      	bpl.n	80030ca <_printf_i+0x8e>
 80030e6:	b236      	sxth	r6, r6
 80030e8:	e7ef      	b.n	80030ca <_printf_i+0x8e>
 80030ea:	6808      	ldr	r0, [r1, #0]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	c940      	ldmia	r1!, {r6}
 80030f0:	0605      	lsls	r5, r0, #24
 80030f2:	d402      	bmi.n	80030fa <_printf_i+0xbe>
 80030f4:	0640      	lsls	r0, r0, #25
 80030f6:	d500      	bpl.n	80030fa <_printf_i+0xbe>
 80030f8:	b2b6      	uxth	r6, r6
 80030fa:	6019      	str	r1, [r3, #0]
 80030fc:	4b54      	ldr	r3, [pc, #336]	@ (8003250 <_printf_i+0x214>)
 80030fe:	270a      	movs	r7, #10
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	2a6f      	cmp	r2, #111	@ 0x6f
 8003104:	d100      	bne.n	8003108 <_printf_i+0xcc>
 8003106:	3f02      	subs	r7, #2
 8003108:	0023      	movs	r3, r4
 800310a:	2200      	movs	r2, #0
 800310c:	3343      	adds	r3, #67	@ 0x43
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	60a3      	str	r3, [r4, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db03      	blt.n	8003120 <_printf_i+0xe4>
 8003118:	2104      	movs	r1, #4
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	438a      	bics	r2, r1
 800311e:	6022      	str	r2, [r4, #0]
 8003120:	2e00      	cmp	r6, #0
 8003122:	d102      	bne.n	800312a <_printf_i+0xee>
 8003124:	9d03      	ldr	r5, [sp, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <_printf_i+0x108>
 800312a:	9d03      	ldr	r5, [sp, #12]
 800312c:	0030      	movs	r0, r6
 800312e:	0039      	movs	r1, r7
 8003130:	f7fd f882 	bl	8000238 <__aeabi_uidivmod>
 8003134:	9b04      	ldr	r3, [sp, #16]
 8003136:	3d01      	subs	r5, #1
 8003138:	5c5b      	ldrb	r3, [r3, r1]
 800313a:	702b      	strb	r3, [r5, #0]
 800313c:	0033      	movs	r3, r6
 800313e:	0006      	movs	r6, r0
 8003140:	429f      	cmp	r7, r3
 8003142:	d9f3      	bls.n	800312c <_printf_i+0xf0>
 8003144:	2f08      	cmp	r7, #8
 8003146:	d109      	bne.n	800315c <_printf_i+0x120>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	07db      	lsls	r3, r3, #31
 800314c:	d506      	bpl.n	800315c <_printf_i+0x120>
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	429a      	cmp	r2, r3
 8003154:	dc02      	bgt.n	800315c <_printf_i+0x120>
 8003156:	2330      	movs	r3, #48	@ 0x30
 8003158:	3d01      	subs	r5, #1
 800315a:	702b      	strb	r3, [r5, #0]
 800315c:	9b03      	ldr	r3, [sp, #12]
 800315e:	1b5b      	subs	r3, r3, r5
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	9b07      	ldr	r3, [sp, #28]
 8003164:	0021      	movs	r1, r4
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	9805      	ldr	r0, [sp, #20]
 800316a:	9b06      	ldr	r3, [sp, #24]
 800316c:	aa09      	add	r2, sp, #36	@ 0x24
 800316e:	f7ff fef5 	bl	8002f5c <_printf_common>
 8003172:	3001      	adds	r0, #1
 8003174:	d148      	bne.n	8003208 <_printf_i+0x1cc>
 8003176:	2001      	movs	r0, #1
 8003178:	4240      	negs	r0, r0
 800317a:	b00b      	add	sp, #44	@ 0x2c
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317e:	2220      	movs	r2, #32
 8003180:	6809      	ldr	r1, [r1, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	2278      	movs	r2, #120	@ 0x78
 8003188:	4932      	ldr	r1, [pc, #200]	@ (8003254 <_printf_i+0x218>)
 800318a:	9104      	str	r1, [sp, #16]
 800318c:	0021      	movs	r1, r4
 800318e:	3145      	adds	r1, #69	@ 0x45
 8003190:	700a      	strb	r2, [r1, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	c940      	ldmia	r1!, {r6}
 8003198:	0610      	lsls	r0, r2, #24
 800319a:	d402      	bmi.n	80031a2 <_printf_i+0x166>
 800319c:	0650      	lsls	r0, r2, #25
 800319e:	d500      	bpl.n	80031a2 <_printf_i+0x166>
 80031a0:	b2b6      	uxth	r6, r6
 80031a2:	6019      	str	r1, [r3, #0]
 80031a4:	07d3      	lsls	r3, r2, #31
 80031a6:	d502      	bpl.n	80031ae <_printf_i+0x172>
 80031a8:	2320      	movs	r3, #32
 80031aa:	4313      	orrs	r3, r2
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	2e00      	cmp	r6, #0
 80031b0:	d001      	beq.n	80031b6 <_printf_i+0x17a>
 80031b2:	2710      	movs	r7, #16
 80031b4:	e7a8      	b.n	8003108 <_printf_i+0xcc>
 80031b6:	2220      	movs	r2, #32
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	4393      	bics	r3, r2
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	e7f8      	b.n	80031b2 <_printf_i+0x176>
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	680d      	ldr	r5, [r1, #0]
 80031c4:	1d10      	adds	r0, r2, #4
 80031c6:	6949      	ldr	r1, [r1, #20]
 80031c8:	6018      	str	r0, [r3, #0]
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	062e      	lsls	r6, r5, #24
 80031ce:	d501      	bpl.n	80031d4 <_printf_i+0x198>
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	e002      	b.n	80031da <_printf_i+0x19e>
 80031d4:	066d      	lsls	r5, r5, #25
 80031d6:	d5fb      	bpl.n	80031d0 <_printf_i+0x194>
 80031d8:	8019      	strh	r1, [r3, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	9d03      	ldr	r5, [sp, #12]
 80031de:	6123      	str	r3, [r4, #16]
 80031e0:	e7bf      	b.n	8003162 <_printf_i+0x126>
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	1d11      	adds	r1, r2, #4
 80031e6:	6019      	str	r1, [r3, #0]
 80031e8:	6815      	ldr	r5, [r2, #0]
 80031ea:	2100      	movs	r1, #0
 80031ec:	0028      	movs	r0, r5
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	f000 f858 	bl	80032a4 <memchr>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d001      	beq.n	80031fc <_printf_i+0x1c0>
 80031f8:	1b40      	subs	r0, r0, r5
 80031fa:	6060      	str	r0, [r4, #4]
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	6123      	str	r3, [r4, #16]
 8003200:	2300      	movs	r3, #0
 8003202:	9a03      	ldr	r2, [sp, #12]
 8003204:	7013      	strb	r3, [r2, #0]
 8003206:	e7ac      	b.n	8003162 <_printf_i+0x126>
 8003208:	002a      	movs	r2, r5
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	9906      	ldr	r1, [sp, #24]
 800320e:	9805      	ldr	r0, [sp, #20]
 8003210:	9d07      	ldr	r5, [sp, #28]
 8003212:	47a8      	blx	r5
 8003214:	3001      	adds	r0, #1
 8003216:	d0ae      	beq.n	8003176 <_printf_i+0x13a>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	079b      	lsls	r3, r3, #30
 800321c:	d415      	bmi.n	800324a <_printf_i+0x20e>
 800321e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003220:	68e0      	ldr	r0, [r4, #12]
 8003222:	4298      	cmp	r0, r3
 8003224:	daa9      	bge.n	800317a <_printf_i+0x13e>
 8003226:	0018      	movs	r0, r3
 8003228:	e7a7      	b.n	800317a <_printf_i+0x13e>
 800322a:	0022      	movs	r2, r4
 800322c:	2301      	movs	r3, #1
 800322e:	9906      	ldr	r1, [sp, #24]
 8003230:	9805      	ldr	r0, [sp, #20]
 8003232:	9e07      	ldr	r6, [sp, #28]
 8003234:	3219      	adds	r2, #25
 8003236:	47b0      	blx	r6
 8003238:	3001      	adds	r0, #1
 800323a:	d09c      	beq.n	8003176 <_printf_i+0x13a>
 800323c:	3501      	adds	r5, #1
 800323e:	68e3      	ldr	r3, [r4, #12]
 8003240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	42ab      	cmp	r3, r5
 8003246:	dcf0      	bgt.n	800322a <_printf_i+0x1ee>
 8003248:	e7e9      	b.n	800321e <_printf_i+0x1e2>
 800324a:	2500      	movs	r5, #0
 800324c:	e7f7      	b.n	800323e <_printf_i+0x202>
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	08003409 	.word	0x08003409
 8003254:	0800341a 	.word	0x0800341a

08003258 <memmove>:
 8003258:	b510      	push	{r4, lr}
 800325a:	4288      	cmp	r0, r1
 800325c:	d806      	bhi.n	800326c <memmove+0x14>
 800325e:	2300      	movs	r3, #0
 8003260:	429a      	cmp	r2, r3
 8003262:	d008      	beq.n	8003276 <memmove+0x1e>
 8003264:	5ccc      	ldrb	r4, [r1, r3]
 8003266:	54c4      	strb	r4, [r0, r3]
 8003268:	3301      	adds	r3, #1
 800326a:	e7f9      	b.n	8003260 <memmove+0x8>
 800326c:	188b      	adds	r3, r1, r2
 800326e:	4298      	cmp	r0, r3
 8003270:	d2f5      	bcs.n	800325e <memmove+0x6>
 8003272:	3a01      	subs	r2, #1
 8003274:	d200      	bcs.n	8003278 <memmove+0x20>
 8003276:	bd10      	pop	{r4, pc}
 8003278:	5c8b      	ldrb	r3, [r1, r2]
 800327a:	5483      	strb	r3, [r0, r2]
 800327c:	e7f9      	b.n	8003272 <memmove+0x1a>
	...

08003280 <_sbrk_r>:
 8003280:	2300      	movs	r3, #0
 8003282:	b570      	push	{r4, r5, r6, lr}
 8003284:	4d06      	ldr	r5, [pc, #24]	@ (80032a0 <_sbrk_r+0x20>)
 8003286:	0004      	movs	r4, r0
 8003288:	0008      	movs	r0, r1
 800328a:	602b      	str	r3, [r5, #0]
 800328c:	f7fd fb48 	bl	8000920 <_sbrk>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d103      	bne.n	800329c <_sbrk_r+0x1c>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d000      	beq.n	800329c <_sbrk_r+0x1c>
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	20000300 	.word	0x20000300

080032a4 <memchr>:
 80032a4:	b2c9      	uxtb	r1, r1
 80032a6:	1882      	adds	r2, r0, r2
 80032a8:	4290      	cmp	r0, r2
 80032aa:	d101      	bne.n	80032b0 <memchr+0xc>
 80032ac:	2000      	movs	r0, #0
 80032ae:	4770      	bx	lr
 80032b0:	7803      	ldrb	r3, [r0, #0]
 80032b2:	428b      	cmp	r3, r1
 80032b4:	d0fb      	beq.n	80032ae <memchr+0xa>
 80032b6:	3001      	adds	r0, #1
 80032b8:	e7f6      	b.n	80032a8 <memchr+0x4>

080032ba <memcpy>:
 80032ba:	2300      	movs	r3, #0
 80032bc:	b510      	push	{r4, lr}
 80032be:	429a      	cmp	r2, r3
 80032c0:	d100      	bne.n	80032c4 <memcpy+0xa>
 80032c2:	bd10      	pop	{r4, pc}
 80032c4:	5ccc      	ldrb	r4, [r1, r3]
 80032c6:	54c4      	strb	r4, [r0, r3]
 80032c8:	3301      	adds	r3, #1
 80032ca:	e7f8      	b.n	80032be <memcpy+0x4>

080032cc <_realloc_r>:
 80032cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ce:	0006      	movs	r6, r0
 80032d0:	000c      	movs	r4, r1
 80032d2:	0015      	movs	r5, r2
 80032d4:	2900      	cmp	r1, #0
 80032d6:	d105      	bne.n	80032e4 <_realloc_r+0x18>
 80032d8:	0011      	movs	r1, r2
 80032da:	f7ff fc51 	bl	8002b80 <_malloc_r>
 80032de:	0004      	movs	r4, r0
 80032e0:	0020      	movs	r0, r4
 80032e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d103      	bne.n	80032f0 <_realloc_r+0x24>
 80032e8:	f7ff fbde 	bl	8002aa8 <_free_r>
 80032ec:	2400      	movs	r4, #0
 80032ee:	e7f7      	b.n	80032e0 <_realloc_r+0x14>
 80032f0:	f000 f81b 	bl	800332a <_malloc_usable_size_r>
 80032f4:	0007      	movs	r7, r0
 80032f6:	4285      	cmp	r5, r0
 80032f8:	d802      	bhi.n	8003300 <_realloc_r+0x34>
 80032fa:	0843      	lsrs	r3, r0, #1
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	d3ef      	bcc.n	80032e0 <_realloc_r+0x14>
 8003300:	0029      	movs	r1, r5
 8003302:	0030      	movs	r0, r6
 8003304:	f7ff fc3c 	bl	8002b80 <_malloc_r>
 8003308:	9001      	str	r0, [sp, #4]
 800330a:	2800      	cmp	r0, #0
 800330c:	d0ee      	beq.n	80032ec <_realloc_r+0x20>
 800330e:	002a      	movs	r2, r5
 8003310:	42bd      	cmp	r5, r7
 8003312:	d900      	bls.n	8003316 <_realloc_r+0x4a>
 8003314:	003a      	movs	r2, r7
 8003316:	0021      	movs	r1, r4
 8003318:	9801      	ldr	r0, [sp, #4]
 800331a:	f7ff ffce 	bl	80032ba <memcpy>
 800331e:	0021      	movs	r1, r4
 8003320:	0030      	movs	r0, r6
 8003322:	f7ff fbc1 	bl	8002aa8 <_free_r>
 8003326:	9c01      	ldr	r4, [sp, #4]
 8003328:	e7da      	b.n	80032e0 <_realloc_r+0x14>

0800332a <_malloc_usable_size_r>:
 800332a:	1f0b      	subs	r3, r1, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1f18      	subs	r0, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	da01      	bge.n	8003338 <_malloc_usable_size_r+0xe>
 8003334:	580b      	ldr	r3, [r1, r0]
 8003336:	18c0      	adds	r0, r0, r3
 8003338:	4770      	bx	lr
	...

0800333c <_init>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr

08003348 <_fini>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr
