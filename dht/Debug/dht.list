
dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004464  08004464  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004464  08004464  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004464  08004464  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004468  08004468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800446c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000005c  080044c8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  080044c8  00006674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb89  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  00012c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00014cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141e9  00000000  00000000  000164f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011426  00000000  00000000  0002a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c991  00000000  00000000  0003bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003574  00000000  00000000  000b84dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000bba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003658 	.word	0x08003658

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003658 	.word	0x08003658

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <dht11>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void dht11(uint16_t *temperatura, uint16_t *umidade)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b0ad      	sub	sp, #180	@ 0xb4
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	//Variáveis para execução de cálculos da função.
	uint16_t tempcalc, umidcalc;

	//Configurações para seleção da direção do Pino 'dht11' como saída digital:
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	2488      	movs	r4, #136	@ 0x88
 8000240:	193b      	adds	r3, r7, r4
 8000242:	0018      	movs	r0, r3
 8000244:	2314      	movs	r3, #20
 8000246:	001a      	movs	r2, r3
 8000248:	2100      	movs	r1, #0
 800024a:	f002 fd87 	bl	8002d5c <memset>
	GPIO_InitStruct.Pin = dht_Pin;
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2210      	movs	r2, #16
 8000252:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	193b      	adds	r3, r7, r4
 8000256:	2201      	movs	r2, #1
 8000258:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	193b      	adds	r3, r7, r4
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000260:	193b      	adds	r3, r7, r4
 8000262:	2203      	movs	r2, #3
 8000264:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(dht_GPIO_Port, &GPIO_InitStruct);
 8000266:	193a      	adds	r2, r7, r4
 8000268:	23a0      	movs	r3, #160	@ 0xa0
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f000 ffb8 	bl	80011e4 <HAL_GPIO_Init>

	//Sinal em nivel lógico 0 - Conforme Datasheet.
	HAL_GPIO_WritePin(dht_GPIO_Port, dht_Pin, GPIO_PIN_RESET);
 8000274:	23a0      	movs	r3, #160	@ 0xa0
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2200      	movs	r2, #0
 800027a:	2110      	movs	r1, #16
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f938 	bl	80014f2 <HAL_GPIO_WritePin>

	//Tempo mínimo de 18ms - Conforme Datasheet.
	HAL_Delay(20); //Configura para 20ms
 8000282:	2014      	movs	r0, #20
 8000284:	f000 fed6 	bl	8001034 <HAL_Delay>

	//Sinal em nivel lógico 1 - Conforme Datasheet.
	HAL_GPIO_WritePin(dht_GPIO_Port, dht_Pin, GPIO_PIN_SET);
 8000288:	23a0      	movs	r3, #160	@ 0xa0
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f92e 	bl	80014f2 <HAL_GPIO_WritePin>

	//Configurações para seleção da direção do Pino 'dht11' como entrada digital:
	GPIO_InitStruct.Pin = dht_Pin;
 8000296:	0021      	movs	r1, r4
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2210      	movs	r2, #16
 800029c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2203      	movs	r2, #3
 80002ae:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(dht_GPIO_Port, &GPIO_InitStruct);
 80002b0:	187a      	adds	r2, r7, r1
 80002b2:	23a0      	movs	r3, #160	@ 0xa0
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	0011      	movs	r1, r2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 ff93 	bl	80011e4 <HAL_GPIO_Init>

	//Lógica Principal:
	//Seta contador Timer 3 para 0.
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80002be:	4b6d      	ldr	r3, [pc, #436]	@ (8000474 <dht11+0x240>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	@ 0x24

	//Variáveis Auxiliares.
	uint16_t ler[2];
	uint16_t dados[42];
	uint8_t bits[40];
	uint16_t temph = 0;
 80002c6:	23ae      	movs	r3, #174	@ 0xae
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	2200      	movs	r2, #0
 80002cc:	801a      	strh	r2, [r3, #0]
	uint16_t umidh = 0;
 80002ce:	23ac      	movs	r3, #172	@ 0xac
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	2200      	movs	r2, #0
 80002d4:	801a      	strh	r2, [r3, #0]

	//Lógica Para Captura do Tempo Alto dos Dados.
	for(int i = 0; i < 42; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	22a8      	movs	r2, #168	@ 0xa8
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	6013      	str	r3, [r2, #0]
 80002de:	e032      	b.n	8000346 <dht11+0x112>
	{
	    while(HAL_GPIO_ReadPin(dht_GPIO_Port, dht_Pin) == GPIO_PIN_RESET);
 80002e0:	46c0      	nop			@ (mov r8, r8)
 80002e2:	23a0      	movs	r3, #160	@ 0xa0
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2110      	movs	r1, #16
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f8e5 	bl	80014b8 <HAL_GPIO_ReadPin>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d0f7      	beq.n	80002e2 <dht11+0xae>
	    ler[0] = __HAL_TIM_GET_COUNTER(&htim3);
 80002f2:	4b60      	ldr	r3, [pc, #384]	@ (8000474 <dht11+0x240>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	2384      	movs	r3, #132	@ 0x84
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	801a      	strh	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(dht_GPIO_Port, dht_Pin) == GPIO_PIN_SET);
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	23a0      	movs	r3, #160	@ 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	2110      	movs	r1, #16
 8000308:	0018      	movs	r0, r3
 800030a:	f001 f8d5 	bl	80014b8 <HAL_GPIO_ReadPin>
 800030e:	0003      	movs	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d0f6      	beq.n	8000302 <dht11+0xce>
		ler[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8000314:	4b57      	ldr	r3, [pc, #348]	@ (8000474 <dht11+0x240>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800031a:	b29a      	uxth	r2, r3
 800031c:	2184      	movs	r1, #132	@ 0x84
 800031e:	187b      	adds	r3, r7, r1
 8000320:	805a      	strh	r2, [r3, #2]
		dados[i] = ler[1] - ler[0];
 8000322:	187b      	adds	r3, r7, r1
 8000324:	885a      	ldrh	r2, [r3, #2]
 8000326:	187b      	adds	r3, r7, r1
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	b299      	uxth	r1, r3
 800032e:	2330      	movs	r3, #48	@ 0x30
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	20a8      	movs	r0, #168	@ 0xa8
 8000334:	183a      	adds	r2, r7, r0
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	0052      	lsls	r2, r2, #1
 800033a:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < 42; i++)
 800033c:	183b      	adds	r3, r7, r0
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	183a      	adds	r2, r7, r0
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	23a8      	movs	r3, #168	@ 0xa8
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b29      	cmp	r3, #41	@ 0x29
 800034e:	ddc7      	ble.n	80002e0 <dht11+0xac>
	}

	//Definindo bits conforme tempos do datasheet.
	for(int i = 0; i < 40; i++)
 8000350:	2300      	movs	r3, #0
 8000352:	22a4      	movs	r2, #164	@ 0xa4
 8000354:	18ba      	adds	r2, r7, r2
 8000356:	6013      	str	r3, [r2, #0]
 8000358:	e038      	b.n	80003cc <dht11+0x198>
	{
	    if((dados[i+2] >=20) && (dados[i+2] <=32))
 800035a:	21a4      	movs	r1, #164	@ 0xa4
 800035c:	187b      	adds	r3, r7, r1
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	1c9a      	adds	r2, r3, #2
 8000362:	2030      	movs	r0, #48	@ 0x30
 8000364:	183b      	adds	r3, r7, r0
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	5ad3      	ldrh	r3, [r2, r3]
 800036a:	2b13      	cmp	r3, #19
 800036c:	d90f      	bls.n	800038e <dht11+0x15a>
 800036e:	187b      	adds	r3, r7, r1
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	1c9a      	adds	r2, r3, #2
 8000374:	183b      	adds	r3, r7, r0
 8000376:	0052      	lsls	r2, r2, #1
 8000378:	5ad3      	ldrh	r3, [r2, r3]
 800037a:	2b20      	cmp	r3, #32
 800037c:	d807      	bhi.n	800038e <dht11+0x15a>
	    {
		    bits[i] = 0;
 800037e:	2308      	movs	r3, #8
 8000380:	18fa      	adds	r2, r7, r3
 8000382:	187b      	adds	r3, r7, r1
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e018      	b.n	80003c0 <dht11+0x18c>
	    }
	    else if((dados[i+2] >=65) && (dados[i+2] <=75))
 800038e:	21a4      	movs	r1, #164	@ 0xa4
 8000390:	187b      	adds	r3, r7, r1
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	1c9a      	adds	r2, r3, #2
 8000396:	2030      	movs	r0, #48	@ 0x30
 8000398:	183b      	adds	r3, r7, r0
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	5ad3      	ldrh	r3, [r2, r3]
 800039e:	2b40      	cmp	r3, #64	@ 0x40
 80003a0:	d90e      	bls.n	80003c0 <dht11+0x18c>
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	1c9a      	adds	r2, r3, #2
 80003a8:	183b      	adds	r3, r7, r0
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	5ad3      	ldrh	r3, [r2, r3]
 80003ae:	2b4b      	cmp	r3, #75	@ 0x4b
 80003b0:	d806      	bhi.n	80003c0 <dht11+0x18c>
	    {
		    bits[i] = 1;
 80003b2:	2308      	movs	r3, #8
 80003b4:	18fa      	adds	r2, r7, r3
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	18d3      	adds	r3, r2, r3
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 40; i++)
 80003c0:	22a4      	movs	r2, #164	@ 0xa4
 80003c2:	18bb      	adds	r3, r7, r2
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	18ba      	adds	r2, r7, r2
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	23a4      	movs	r3, #164	@ 0xa4
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b27      	cmp	r3, #39	@ 0x27
 80003d4:	ddc1      	ble.n	800035a <dht11+0x126>
	    }
	}

	//Cálculo da temperatura e umidade determinado pelos bits.
	for(int i = 0; i < 8; i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	22a0      	movs	r2, #160	@ 0xa0
 80003da:	18ba      	adds	r2, r7, r2
 80003dc:	6013      	str	r3, [r2, #0]
 80003de:	e02c      	b.n	800043a <dht11+0x206>
	{
	    temph += bits[i+16] << (7 - i);
 80003e0:	20a0      	movs	r0, #160	@ 0xa0
 80003e2:	183b      	adds	r3, r7, r0
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3310      	adds	r3, #16
 80003e8:	2408      	movs	r4, #8
 80003ea:	193a      	adds	r2, r7, r4
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	0019      	movs	r1, r3
 80003f0:	183b      	adds	r3, r7, r0
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2207      	movs	r2, #7
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	4099      	lsls	r1, r3
 80003fa:	000b      	movs	r3, r1
 80003fc:	b299      	uxth	r1, r3
 80003fe:	22ae      	movs	r2, #174	@ 0xae
 8000400:	18bb      	adds	r3, r7, r2
 8000402:	18ba      	adds	r2, r7, r2
 8000404:	8812      	ldrh	r2, [r2, #0]
 8000406:	188a      	adds	r2, r1, r2
 8000408:	801a      	strh	r2, [r3, #0]
	    umidh += bits[i] << (7 - i);
 800040a:	193a      	adds	r2, r7, r4
 800040c:	183b      	adds	r3, r7, r0
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	18d3      	adds	r3, r2, r3
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	0019      	movs	r1, r3
 8000416:	183b      	adds	r3, r7, r0
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2207      	movs	r2, #7
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	4099      	lsls	r1, r3
 8000420:	000b      	movs	r3, r1
 8000422:	b299      	uxth	r1, r3
 8000424:	22ac      	movs	r2, #172	@ 0xac
 8000426:	18bb      	adds	r3, r7, r2
 8000428:	18ba      	adds	r2, r7, r2
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	188a      	adds	r2, r1, r2
 800042e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8000430:	183b      	adds	r3, r7, r0
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	183a      	adds	r2, r7, r0
 8000438:	6013      	str	r3, [r2, #0]
 800043a:	23a0      	movs	r3, #160	@ 0xa0
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b07      	cmp	r3, #7
 8000442:	ddcd      	ble.n	80003e0 <dht11+0x1ac>
	}

	//Atribuição dos valores calculados nas variáveis
	tempcalc = temph;
 8000444:	219e      	movs	r1, #158	@ 0x9e
 8000446:	187b      	adds	r3, r7, r1
 8000448:	22ae      	movs	r2, #174	@ 0xae
 800044a:	18ba      	adds	r2, r7, r2
 800044c:	8812      	ldrh	r2, [r2, #0]
 800044e:	801a      	strh	r2, [r3, #0]
	umidcalc = umidh;
 8000450:	209c      	movs	r0, #156	@ 0x9c
 8000452:	183b      	adds	r3, r7, r0
 8000454:	22ac      	movs	r2, #172	@ 0xac
 8000456:	18ba      	adds	r2, r7, r2
 8000458:	8812      	ldrh	r2, [r2, #0]
 800045a:	801a      	strh	r2, [r3, #0]
	*temperatura = tempcalc;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	187a      	adds	r2, r7, r1
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	801a      	strh	r2, [r3, #0]
	*umidade = umidcalc;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	183a      	adds	r2, r7, r0
 8000468:	8812      	ldrh	r2, [r2, #0]
 800046a:	801a      	strh	r2, [r3, #0]
}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b02d      	add	sp, #180	@ 0xb4
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	200000cc 	.word	0x200000cc

08000478 <Display_Data>:

void Display_Data(uint16_t *temperatura, uint16_t *umidade) {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b08c      	sub	sp, #48	@ 0x30
 800047c:	af02      	add	r7, sp, #8
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	char temp_str[16];
	char hum_str[16];

	// Formatando as strings de temperatura e umidade manualmente
	sprintf(temp_str, "Temp: %dC", (int)*temperatura);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	001a      	movs	r2, r3
 8000488:	4918      	ldr	r1, [pc, #96]	@ (80004ec <Display_Data+0x74>)
 800048a:	2418      	movs	r4, #24
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	f002 fc44 	bl	8002d1c <siprintf>
	sprintf(hum_str, "Umid: %d%%", (int)*umidade);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	001a      	movs	r2, r3
 800049a:	4915      	ldr	r1, [pc, #84]	@ (80004f0 <Display_Data+0x78>)
 800049c:	2508      	movs	r5, #8
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fc3b 	bl	8002d1c <siprintf>

	// Limpar o display
	ssd1306_Fill(Black);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 fa28 	bl	80008fc <ssd1306_Fill>

	// Definir o cursor e escrever a string de temperatura
	ssd1306_SetCursor(4, 4);
 80004ac:	2104      	movs	r1, #4
 80004ae:	2004      	movs	r0, #4
 80004b0:	f000 fb9c 	bl	8000bec <ssd1306_SetCursor>
	ssd1306_WriteString(temp_str, Font_11x18, White);
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <Display_Data+0x7c>)
 80004b6:	1938      	adds	r0, r7, r4
 80004b8:	2201      	movs	r2, #1
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	6819      	ldr	r1, [r3, #0]
 80004be:	685a      	ldr	r2, [r3, #4]
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f000 fb67 	bl	8000b94 <ssd1306_WriteString>

	// Definir o cursor e escrever a string de umidade
	ssd1306_SetCursor(4, 24);
 80004c6:	2118      	movs	r1, #24
 80004c8:	2004      	movs	r0, #4
 80004ca:	f000 fb8f 	bl	8000bec <ssd1306_SetCursor>
	ssd1306_WriteString(hum_str, Font_11x18, White);
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <Display_Data+0x7c>)
 80004d0:	1978      	adds	r0, r7, r5
 80004d2:	2201      	movs	r2, #1
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	6819      	ldr	r1, [r3, #0]
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	f000 fb5a 	bl	8000b94 <ssd1306_WriteString>

	// Atualizar o display
	ssd1306_UpdateScreen();
 80004e0:	f000 fa26 	bl	8000930 <ssd1306_UpdateScreen>
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b00a      	add	sp, #40	@ 0x28
 80004ea:	bdb0      	pop	{r4, r5, r7, pc}
 80004ec:	08003670 	.word	0x08003670
 80004f0:	0800367c 	.word	0x0800367c
 80004f4:	080043e4 	.word	0x080043e4

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fd1d 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f826 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f8fe 	bl	8000704 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f866 	bl	80005d8 <MX_I2C1_Init>
  MX_TIM3_Init();
 800050c:	f000 f8a4 	bl	8000658 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); //Inicializa Timer 3 -> '1us'
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <main+0x48>)
 8000512:	0018      	movs	r0, r3
 8000514:	f002 f97c 	bl	8002810 <HAL_TIM_Base_Start>
  ssd1306_Init();
 8000518:	f000 f984 	bl	8000824 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	dht11(&temperatura, &umidade);
 800051c:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <main+0x4c>)
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <main+0x50>)
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff fe86 	bl	8000234 <dht11>
	Display_Data(&temperatura, &umidade);
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <main+0x4c>)
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <main+0x50>)
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ffa2 	bl	8000478 <Display_Data>
	HAL_Delay(5000); // Aguarda 5 segundos antes de fazer uma nova leitura
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <main+0x54>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fd7c 	bl	8001034 <HAL_Delay>
	dht11(&temperatura, &umidade);
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	e7ed      	b.n	800051c <main+0x24>
 8000540:	200000cc 	.word	0x200000cc
 8000544:	2000011a 	.word	0x2000011a
 8000548:	20000118 	.word	0x20000118
 800054c:	00001388 	.word	0x00001388

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08d      	sub	sp, #52	@ 0x34
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	2414      	movs	r4, #20
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	231c      	movs	r3, #28
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 fbfb 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 fbf4 	bl	8002d5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2240      	movs	r2, #64	@ 0x40
 800058c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fcc7 	bl	8001f24 <HAL_RCC_OscConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800059a:	f000 f903 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	003b      	movs	r3, r7
 80005a0:	2207      	movs	r2, #7
 80005a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005bc:	003b      	movs	r3, r7
 80005be:	2101      	movs	r1, #1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fe93 	bl	80022ec <HAL_RCC_ClockConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ca:	f000 f8eb 	bl	80007a4 <Error_Handler>
  }
}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b00d      	add	sp, #52	@ 0x34
 80005d4:	bd90      	pop	{r4, r7, pc}
	...

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_I2C1_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <MX_I2C1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_I2C1_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <MX_I2C1_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_I2C1_Init+0x74>)
 8000614:	0018      	movs	r0, r3
 8000616:	f000 ff89 	bl	800152c <HAL_I2C_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 f8c1 	bl	80007a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_I2C1_Init+0x74>)
 8000624:	2100      	movs	r1, #0
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fbe4 	bl	8001df4 <HAL_I2CEx_ConfigAnalogFilter>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 f8b8 	bl	80007a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <MX_I2C1_Init+0x74>)
 8000636:	2100      	movs	r1, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fc27 	bl	8001e8c <HAL_I2CEx_ConfigDigitalFilter>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 f8af 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000078 	.word	0x20000078
 8000650:	40005400 	.word	0x40005400
 8000654:	20303e5d 	.word	0x20303e5d

08000658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	2310      	movs	r3, #16
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fb77 	bl	8002d5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	0018      	movs	r0, r3
 8000672:	230c      	movs	r3, #12
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 fb70 	bl	8002d5c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067c:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <MX_TIM3_Init+0xa4>)
 8000680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000682:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000684:	222f      	movs	r2, #47	@ 0x2f
 8000686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_TIM3_Init+0xa8>)
 8000692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f85c 	bl	8002760 <HAL_TIM_Base_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006ac:	f000 f87a 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	2110      	movs	r1, #16
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	0152      	lsls	r2, r2, #5
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 f8eb 	bl	800289c <HAL_TIM_ConfigClockSource>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80006ca:	f000 f86b 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006da:	1d3a      	adds	r2, r7, #4
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 fab9 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006ea:	f000 f85b 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b008      	add	sp, #32
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	200000cc 	.word	0x200000cc
 80006fc:	40000400 	.word	0x40000400
 8000700:	0000ffff 	.word	0x0000ffff

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b089      	sub	sp, #36	@ 0x24
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	240c      	movs	r4, #12
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	2314      	movs	r3, #20
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f002 fb21 	bl	8002d5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000720:	2104      	movs	r1, #4
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072a:	2204      	movs	r2, #4
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000750:	2102      	movs	r1, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_GPIO_Init+0x9c>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dht_GPIO_Port, dht_Pin, GPIO_PIN_SET);
 8000762:	23a0      	movs	r3, #160	@ 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2201      	movs	r2, #1
 8000768:	2110      	movs	r1, #16
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fec1 	bl	80014f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dht_Pin */
  GPIO_InitStruct.Pin = dht_Pin;
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2210      	movs	r2, #16
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2203      	movs	r2, #3
 8000788:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(dht_GPIO_Port, &GPIO_InitStruct);
 800078a:	187a      	adds	r2, r7, r1
 800078c:	23a0      	movs	r3, #160	@ 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fd26 	bl	80011e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b009      	add	sp, #36	@ 0x24
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af04      	add	r7, sp, #16
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <ssd1306_WriteCommand+0x30>)
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2200      	movs	r2, #0
 80007dc:	2178      	movs	r1, #120	@ 0x78
 80007de:	f000 ff4b 	bl	8001678 <HAL_I2C_Mem_Write>
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000078 	.word	0x20000078

080007f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af04      	add	r7, sp, #16
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4808      	ldr	r0, [pc, #32]	@ (8000820 <ssd1306_WriteData+0x30>)
 8000800:	2201      	movs	r2, #1
 8000802:	4252      	negs	r2, r2
 8000804:	9202      	str	r2, [sp, #8]
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2301      	movs	r3, #1
 800080e:	2240      	movs	r2, #64	@ 0x40
 8000810:	2178      	movs	r1, #120	@ 0x78
 8000812:	f000 ff31 	bl	8001678 <HAL_I2C_Mem_Write>
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	20000078 	.word	0x20000078

08000824 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000828:	f7ff ffc2 	bl	80007b0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 fc01 	bl	8001034 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000832:	2000      	movs	r0, #0
 8000834:	f000 fa0c 	bl	8000c50 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000838:	2020      	movs	r0, #32
 800083a:	f7ff ffbf 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff ffbc 	bl	80007bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000844:	20b0      	movs	r0, #176	@ 0xb0
 8000846:	f7ff ffb9 	bl	80007bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800084a:	20c8      	movs	r0, #200	@ 0xc8
 800084c:	f7ff ffb6 	bl	80007bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ffb3 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000856:	2010      	movs	r0, #16
 8000858:	f7ff ffb0 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800085c:	2040      	movs	r0, #64	@ 0x40
 800085e:	f7ff ffad 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000862:	20ff      	movs	r0, #255	@ 0xff
 8000864:	f000 f9dc 	bl	8000c20 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000868:	20a1      	movs	r0, #161	@ 0xa1
 800086a:	f7ff ffa7 	bl	80007bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800086e:	20a6      	movs	r0, #166	@ 0xa6
 8000870:	f7ff ffa4 	bl	80007bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000874:	20a8      	movs	r0, #168	@ 0xa8
 8000876:	f7ff ffa1 	bl	80007bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800087a:	203f      	movs	r0, #63	@ 0x3f
 800087c:	f7ff ff9e 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000880:	20a4      	movs	r0, #164	@ 0xa4
 8000882:	f7ff ff9b 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000886:	20d3      	movs	r0, #211	@ 0xd3
 8000888:	f7ff ff98 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff95 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000892:	20d5      	movs	r0, #213	@ 0xd5
 8000894:	f7ff ff92 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000898:	20f0      	movs	r0, #240	@ 0xf0
 800089a:	f7ff ff8f 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800089e:	20d9      	movs	r0, #217	@ 0xd9
 80008a0:	f7ff ff8c 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008a4:	2022      	movs	r0, #34	@ 0x22
 80008a6:	f7ff ff89 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008aa:	20da      	movs	r0, #218	@ 0xda
 80008ac:	f7ff ff86 	bl	80007bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008b0:	2012      	movs	r0, #18
 80008b2:	f7ff ff83 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008b6:	20db      	movs	r0, #219	@ 0xdb
 80008b8:	f7ff ff80 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008bc:	2020      	movs	r0, #32
 80008be:	f7ff ff7d 	bl	80007bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008c2:	208d      	movs	r0, #141	@ 0x8d
 80008c4:	f7ff ff7a 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008c8:	2014      	movs	r0, #20
 80008ca:	f7ff ff77 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 f9be 	bl	8000c50 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f811 	bl	80008fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008da:	f000 f829 	bl	8000930 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <ssd1306_Init+0xd4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <ssd1306_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80008ea:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <ssd1306_Init+0xd4>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	711a      	strb	r2, [r3, #4]
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	2000051c 	.word	0x2000051c

080008fc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <ssd1306_Fill+0x18>
 8000910:	2300      	movs	r3, #0
 8000912:	e000      	b.n	8000916 <ssd1306_Fill+0x1a>
 8000914:	23ff      	movs	r3, #255	@ 0xff
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	00d2      	lsls	r2, r2, #3
 800091a:	4804      	ldr	r0, [pc, #16]	@ (800092c <ssd1306_Fill+0x30>)
 800091c:	0019      	movs	r1, r3
 800091e:	f002 fa1d 	bl	8002d5c <memset>
}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	2000011c 	.word	0x2000011c

08000930 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e01a      	b.n	8000974 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3b50      	subs	r3, #80	@ 0x50
 8000944:	b2db      	uxtb	r3, r3
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff ff38 	bl	80007bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ff35 	bl	80007bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000952:	2010      	movs	r0, #16
 8000954:	f7ff ff32 	bl	80007bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	01da      	lsls	r2, r3, #7
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <ssd1306_UpdateScreen+0x58>)
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff43 	bl	80007f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	3201      	adds	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d9e0      	bls.n	800093e <ssd1306_UpdateScreen+0xe>
    }
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	2000011c 	.word	0x2000011c

0800098c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	0004      	movs	r4, r0
 8000994:	0008      	movs	r0, r1
 8000996:	0011      	movs	r1, r2
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	1c22      	adds	r2, r4, #0
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	1dbb      	adds	r3, r7, #6
 80009a0:	1c02      	adds	r2, r0, #0
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	1d7b      	adds	r3, r7, #5
 80009a6:	1c0a      	adds	r2, r1, #0
 80009a8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db47      	blt.n	8000a44 <ssd1306_DrawPixel+0xb8>
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ba:	d843      	bhi.n	8000a44 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009bc:	1d7b      	adds	r3, r7, #5
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11e      	bne.n	8000a02 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	0003      	movs	r3, r0
 80009d2:	01db      	lsls	r3, r3, #7
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <ssd1306_DrawPixel+0xc0>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2107      	movs	r1, #7
 80009e2:	400b      	ands	r3, r1
 80009e4:	2101      	movs	r1, #1
 80009e6:	4099      	lsls	r1, r3
 80009e8:	000b      	movs	r3, r1
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b259      	sxtb	r1, r3
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	0003      	movs	r3, r0
 80009f6:	01db      	lsls	r3, r3, #7
 80009f8:	18d3      	adds	r3, r2, r3
 80009fa:	b2c9      	uxtb	r1, r1
 80009fc:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <ssd1306_DrawPixel+0xc0>)
 80009fe:	54d1      	strb	r1, [r2, r3]
 8000a00:	e021      	b.n	8000a46 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	b2d8      	uxtb	r0, r3
 8000a0e:	0003      	movs	r3, r0
 8000a10:	01db      	lsls	r3, r3, #7
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <ssd1306_DrawPixel+0xc0>)
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	1dba      	adds	r2, r7, #6
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	2107      	movs	r1, #7
 8000a20:	400a      	ands	r2, r1
 8000a22:	2101      	movs	r1, #1
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	b252      	sxtb	r2, r2
 8000a2a:	43d2      	mvns	r2, r2
 8000a2c:	b252      	sxtb	r2, r2
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b259      	sxtb	r1, r3
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	0003      	movs	r3, r0
 8000a38:	01db      	lsls	r3, r3, #7
 8000a3a:	18d3      	adds	r3, r2, r3
 8000a3c:	b2c9      	uxtb	r1, r1
 8000a3e:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <ssd1306_DrawPixel+0xc0>)
 8000a40:	54d1      	strb	r1, [r2, r3]
 8000a42:	e000      	b.n	8000a46 <ssd1306_DrawPixel+0xba>
        return;
 8000a44:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	2000011c 	.word	0x2000011c

08000a50 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b089      	sub	sp, #36	@ 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0004      	movs	r4, r0
 8000a58:	0038      	movs	r0, r7
 8000a5a:	6001      	str	r1, [r0, #0]
 8000a5c:	6042      	str	r2, [r0, #4]
 8000a5e:	6083      	str	r3, [r0, #8]
 8000a60:	210f      	movs	r1, #15
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	1c22      	adds	r2, r4, #0
 8000a66:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a68:	000a      	movs	r2, r1
 8000a6a:	18bb      	adds	r3, r7, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b1f      	cmp	r3, #31
 8000a70:	d903      	bls.n	8000a7a <ssd1306_WriteChar+0x2a>
 8000a72:	18bb      	adds	r3, r7, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a78:	d901      	bls.n	8000a7e <ssd1306_WriteChar+0x2e>
        return 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e084      	b.n	8000b88 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000a7e:	4b44      	ldr	r3, [pc, #272]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	001a      	movs	r2, r3
 8000a84:	003b      	movs	r3, r7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	2b80      	cmp	r3, #128	@ 0x80
 8000a8c:	dc07      	bgt.n	8000a9e <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000a8e:	4b40      	ldr	r3, [pc, #256]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	001a      	movs	r2, r3
 8000a94:	003b      	movs	r3, r7
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000a9a:	2b40      	cmp	r3, #64	@ 0x40
 8000a9c:	dd01      	ble.n	8000aa2 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e072      	b.n	8000b88 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	e051      	b.n	8000b4c <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	3b20      	subs	r3, #32
 8000ab4:	0039      	movs	r1, r7
 8000ab6:	7849      	ldrb	r1, [r1, #1]
 8000ab8:	434b      	muls	r3, r1
 8000aba:	0019      	movs	r1, r3
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	18cb      	adds	r3, r1, r3
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	18d3      	adds	r3, r2, r3
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	e035      	b.n	8000b3a <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	4013      	ands	r3, r2
 8000ada:	d014      	beq.n	8000b06 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	b2d9      	uxtb	r1, r3
 8000af8:	2330      	movs	r3, #48	@ 0x30
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	001a      	movs	r2, r3
 8000b00:	f7ff ff44 	bl	800098c <ssd1306_DrawPixel>
 8000b04:	e016      	b.n	8000b34 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b06:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	b2d8      	uxtb	r0, r3
 8000b14:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000b16:	885b      	ldrh	r3, [r3, #2]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	2330      	movs	r3, #48	@ 0x30
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	425a      	negs	r2, r3
 8000b2a:	4153      	adcs	r3, r2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	001a      	movs	r2, r3
 8000b30:	f7ff ff2c 	bl	800098c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	3301      	adds	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001a      	movs	r2, r3
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d3c3      	bcc.n	8000ace <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	785b      	ldrb	r3, [r3, #1]
 8000b50:	001a      	movs	r2, r3
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d3a7      	bcc.n	8000aa8 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <ssd1306_WriteChar+0x126>
 8000b64:	003b      	movs	r3, r7
 8000b66:	6899      	ldr	r1, [r3, #8]
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	18cb      	adds	r3, r1, r3
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	e001      	b.n	8000b7a <ssd1306_WriteChar+0x12a>
 8000b76:	003b      	movs	r3, r7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	189b      	adds	r3, r3, r2
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <ssd1306_WriteChar+0x140>)
 8000b80:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	781b      	ldrb	r3, [r3, #0]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b009      	add	sp, #36	@ 0x24
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	2000051c 	.word	0x2000051c

08000b94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	0038      	movs	r0, r7
 8000b9e:	6001      	str	r1, [r0, #0]
 8000ba0:	6042      	str	r2, [r0, #4]
 8000ba2:	6083      	str	r3, [r0, #8]
    while (*str) {
 8000ba4:	e017      	b.n	8000bd6 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	7818      	ldrb	r0, [r3, #0]
 8000baa:	003b      	movs	r3, r7
 8000bac:	2218      	movs	r2, #24
 8000bae:	18ba      	adds	r2, r7, r2
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	6819      	ldr	r1, [r3, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f7ff ff49 	bl	8000a50 <ssd1306_WriteChar>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d002      	beq.n	8000bd0 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	e008      	b.n	8000be2 <ssd1306_WriteString+0x4e>
        }
        str++;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1e3      	bne.n	8000ba6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	1c0a      	adds	r2, r1, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <ssd1306_SetCursor+0x30>)
 8000c06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <ssd1306_SetCursor+0x30>)
 8000c10:	805a      	strh	r2, [r3, #2]
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	2000051c 	.word	0x2000051c

08000c20 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	0002      	movs	r2, r0
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2281      	movs	r2, #129	@ 0x81
 8000c32:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff fdbf 	bl	80007bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fdba 	bl	80007bc <ssd1306_WriteCommand>
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d007      	beq.n	8000c74 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	22af      	movs	r2, #175	@ 0xaf
 8000c6a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <ssd1306_SetDisplayOn+0x48>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	715a      	strb	r2, [r3, #5]
 8000c72:	e006      	b.n	8000c82 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	22ae      	movs	r2, #174	@ 0xae
 8000c7a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <ssd1306_SetDisplayOn+0x48>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c82:	230f      	movs	r3, #15
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fd97 	bl	80007bc <ssd1306_WriteCommand>
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	2000051c 	.word	0x2000051c

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	2101      	movs	r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0549      	lsls	r1, r1, #21
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_MspInit+0x44>)
 8000cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	055b      	lsls	r3, r3, #21
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b093      	sub	sp, #76	@ 0x4c
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	2334      	movs	r3, #52	@ 0x34
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2314      	movs	r3, #20
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f002 f830 	bl	8002d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	2418      	movs	r4, #24
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	231c      	movs	r3, #28
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f002 f828 	bl	8002d5c <memset>
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <HAL_I2C_MspInit+0x100>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d161      	bne.n	8000dda <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2240      	movs	r2, #64	@ 0x40
 8000d1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fc2d 	bl	8002584 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d2e:	f7ff fd39 	bl	80007a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d38:	2104      	movs	r1, #4
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d42:	2204      	movs	r2, #4
 8000d44:	4013      	ands	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d4e:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d50:	2102      	movs	r1, #2
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d62:	2134      	movs	r1, #52	@ 0x34
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	01d2      	lsls	r2, r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2212      	movs	r2, #18
 8000d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	220e      	movs	r2, #14
 8000d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	4a18      	ldr	r2, [pc, #96]	@ (8000dec <HAL_I2C_MspInit+0x108>)
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	f000 fa29 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2240      	movs	r2, #64	@ 0x40
 8000d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2212      	movs	r2, #18
 8000d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2206      	movs	r2, #6
 8000db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <HAL_I2C_MspInit+0x10c>)
 8000db6:	0019      	movs	r1, r3
 8000db8:	0010      	movs	r0, r2
 8000dba:	f000 fa13 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0389      	lsls	r1, r1, #14
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_I2C_MspInit+0x104>)
 8000dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	039b      	lsls	r3, r3, #14
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b013      	add	sp, #76	@ 0x4c
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	50000800 	.word	0x50000800
 8000df0:	50000400 	.word	0x50000400

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_TIM_Base_MspInit+0x34>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10b      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8d0 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f001 ff6a 	bl	8002d6c <__errno>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	425b      	negs	r3, r3
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	18d2      	adds	r2, r2, r3
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <_sbrk+0x64>)
 8000eb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20001800 	.word	0x20001800
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000524 	.word	0x20000524
 8000ecc:	20000678 	.word	0x20000678

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <SystemInit+0x14>)
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	0512      	lsls	r2, r2, #20
 8000eda:	609a      	str	r2, [r3, #8]
#endif
}
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eec:	f7ff fff0 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ef2:	e003      	b.n	8000efc <LoopCopyDataInit>

08000ef4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ef6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ef8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000efa:	3104      	adds	r1, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000efc:	480a      	ldr	r0, [pc, #40]	@ (8000f28 <LoopForever+0xa>)
  ldr r3, =_edata
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <LoopForever+0xe>)
  adds r2, r0, r1
 8000f00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f04:	d3f6      	bcc.n	8000ef4 <CopyDataInit>
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <LoopForever+0x12>)
  b LoopFillZerobss
 8000f08:	e002      	b.n	8000f10 <LoopFillZerobss>

08000f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0e:	3204      	adds	r2, #4

08000f10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <LoopForever+0x16>)
  cmp r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f14:	d3f9      	bcc.n	8000f0a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f16:	f001 ff2f 	bl	8002d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1a:	f7ff faed 	bl	80004f8 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   r0, =_estack
 8000f20:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000f24:	0800446c 	.word	0x0800446c
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000f30:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000f34:	20000674 	.word	0x20000674

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>

08000f3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f80e 	bl	8000f68 <HAL_InitTick>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e001      	b.n	8000f5c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f58:	f7ff fea0 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_InitTick+0x88>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d02b      	beq.n	8000fd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <HAL_InitTick+0x8c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_InitTick+0x88>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	@ 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8c5 	bl	800011c <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8c0 	bl	800011c <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f913 	bl	80011ca <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d112      	bne.n	8000fce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d80a      	bhi.n	8000fc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f8f2 	bl	80011a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_InitTick+0x90>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e00d      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e008      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e003      	b.n	8000fe0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b005      	add	sp, #20
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000528 	.word	0x20000528

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	@ (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	20000528 	.word	0x20000528

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	189b      	adds	r3, r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	0002      	movs	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001090:	d828      	bhi.n	80010e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001092:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <__NVIC_SetPriority+0xd4>)
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	33c0      	adds	r3, #192	@ 0xc0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	589b      	ldr	r3, [r3, r2]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	@ 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	@ 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	481f      	ldr	r0, [pc, #124]	@ (8001150 <__NVIC_SetPriority+0xd4>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	430a      	orrs	r2, r1
 80010dc:	33c0      	adds	r3, #192	@ 0xc0
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e2:	e031      	b.n	8001148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	0019      	movs	r1, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	400b      	ands	r3, r1
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3306      	adds	r3, #6
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1dfa      	adds	r2, r7, #7
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	2203      	movs	r2, #3
 8001106:	400a      	ands	r2, r1
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	21ff      	movs	r1, #255	@ 0xff
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	22ff      	movs	r2, #255	@ 0xff
 800111c:	401a      	ands	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	2303      	movs	r3, #3
 8001126:	4003      	ands	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	001c      	movs	r4, r3
 8001134:	230f      	movs	r3, #15
 8001136:	4023      	ands	r3, r4
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	430a      	orrs	r2, r1
 800113e:	3306      	adds	r3, #6
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	18c3      	adds	r3, r0, r3
 8001144:	3304      	adds	r3, #4
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	045b      	lsls	r3, r3, #17
 8001168:	429a      	cmp	r2, r3
 800116a:	d301      	bcc.n	8001170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116c:	2301      	movs	r3, #1
 800116e:	e010      	b.n	8001192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <SysTick_Config+0x44>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	3a01      	subs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	2103      	movs	r1, #3
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff7c 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x44>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	210f      	movs	r1, #15
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ffbf 	bl	8001158 <SysTick_Config>
 80011da:	0003      	movs	r3, r0
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011f2:	e14d      	b.n	8001490 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d100      	bne.n	800120c <HAL_GPIO_Init+0x28>
 800120a:	e13e      	b.n	800148a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x38>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d125      	bne.n	8001268 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	58d3      	ldr	r3, [r2, r3]
 8001228:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2207      	movs	r2, #7
 800122e:	4013      	ands	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	220f      	movs	r2, #15
 8001246:	401a      	ands	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2107      	movs	r1, #7
 800124c:	400b      	ands	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	6979      	ldr	r1, [r7, #20]
 8001266:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	409a      	lsls	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	43da      	mvns	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4013      	ands	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	401a      	ands	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	0013      	movs	r3, r2
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	4313      	orrs	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d00b      	beq.n	80012bc <HAL_GPIO_Init+0xd8>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4013      	ands	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	2201      	movs	r2, #1
 800130a:	401a      	ands	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4313      	orrs	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d017      	beq.n	8001356 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4013      	ands	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	055b      	lsls	r3, r3, #21
 800135e:	4013      	ands	r3, r2
 8001360:	d100      	bne.n	8001364 <HAL_GPIO_Init+0x180>
 8001362:	e092      	b.n	800148a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001364:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3318      	adds	r3, #24
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	589b      	ldr	r3, [r3, r2]
 8001370:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2203      	movs	r2, #3
 8001376:	4013      	ands	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	220f      	movs	r2, #15
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	43da      	mvns	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	23a0      	movs	r3, #160	@ 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	429a      	cmp	r2, r3
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1d6>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a45      	ldr	r2, [pc, #276]	@ (80014ac <HAL_GPIO_Init+0x2c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1d2>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a44      	ldr	r2, [pc, #272]	@ (80014b0 <HAL_GPIO_Init+0x2cc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1ce>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a43      	ldr	r2, [pc, #268]	@ (80014b4 <HAL_GPIO_Init+0x2d0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1ca>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x1d8>
 80013ae:	2306      	movs	r3, #6
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x1d8>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x1d8>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x1d8>
 80013ba:	2300      	movs	r3, #0
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	2103      	movs	r1, #3
 80013c0:	400a      	ands	r2, r1
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	4093      	lsls	r3, r2
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013cc:	4936      	ldr	r1, [pc, #216]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3318      	adds	r3, #24
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80013da:	4a33      	ldr	r2, [pc, #204]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	58d3      	ldr	r3, [r2, r3]
 80013e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001400:	4929      	ldr	r1, [pc, #164]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 800140a:	2384      	movs	r3, #132	@ 0x84
 800140c:	58d3      	ldr	r3, [r2, r3]
 800140e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43da      	mvns	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4013      	ands	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800142e:	491e      	ldr	r1, [pc, #120]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001430:	2284      	movs	r2, #132	@ 0x84
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4013      	ands	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_GPIO_Init+0x2c4>)
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	3301      	adds	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	40da      	lsrs	r2, r3
 8001498:	1e13      	subs	r3, r2, #0
 800149a:	d000      	beq.n	800149e <HAL_GPIO_Init+0x2ba>
 800149c:	e6aa      	b.n	80011f4 <HAL_GPIO_Init+0x10>
  }
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021800 	.word	0x40021800
 80014ac:	50000400 	.word	0x50000400
 80014b0:	50000800 	.word	0x50000800
 80014b4:	50001400 	.word	0x50001400

080014b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	000a      	movs	r2, r1
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	1cba      	adds	r2, r7, #2
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	4013      	ands	r3, r2
 80014d0:	d004      	beq.n	80014dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014e4:	230f      	movs	r3, #15
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	0008      	movs	r0, r1
 80014fc:	0011      	movs	r1, r2
 80014fe:	1cbb      	adds	r3, r7, #2
 8001500:	1c02      	adds	r2, r0, #0
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	1c7b      	adds	r3, r7, #1
 8001506:	1c0a      	adds	r2, r1, #0
 8001508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150a:	1c7b      	adds	r3, r7, #1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001512:	1cbb      	adds	r3, r7, #2
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800151a:	e003      	b.n	8001524 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151c:	1cbb      	adds	r3, r7, #2
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e08f      	b.n	800165e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2241      	movs	r2, #65	@ 0x41
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d107      	bne.n	800155a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	2100      	movs	r1, #0
 8001550:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff fbc5 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2241      	movs	r2, #65	@ 0x41
 800155e:	2124      	movs	r1, #36	@ 0x24
 8001560:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	493b      	ldr	r1, [pc, #236]	@ (8001668 <HAL_I2C_Init+0x13c>)
 800157c:	400a      	ands	r2, r1
 800157e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4938      	ldr	r1, [pc, #224]	@ (800166c <HAL_I2C_Init+0x140>)
 800158c:	400a      	ands	r2, r1
 800158e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2180      	movs	r1, #128	@ 0x80
 80015a2:	0209      	lsls	r1, r1, #8
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e007      	b.n	80015ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2184      	movs	r1, #132	@ 0x84
 80015b4:	0209      	lsls	r1, r1, #8
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d109      	bne.n	80015d6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2180      	movs	r1, #128	@ 0x80
 80015ce:	0109      	lsls	r1, r1, #4
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	e007      	b.n	80015e6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4923      	ldr	r1, [pc, #140]	@ (8001670 <HAL_I2C_Init+0x144>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4920      	ldr	r1, [pc, #128]	@ (8001674 <HAL_I2C_Init+0x148>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	491a      	ldr	r1, [pc, #104]	@ (800166c <HAL_I2C_Init+0x140>)
 8001602:	400a      	ands	r2, r1
 8001604:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	431a      	orrs	r2, r3
 8001610:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69d9      	ldr	r1, [r3, #28]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2241      	movs	r2, #65	@ 0x41
 800164a:	2120      	movs	r1, #32
 800164c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2242      	movs	r2, #66	@ 0x42
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	f0ffffff 	.word	0xf0ffffff
 800166c:	ffff7fff 	.word	0xffff7fff
 8001670:	fffff7ff 	.word	0xfffff7ff
 8001674:	02008000 	.word	0x02008000

08001678 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	000c      	movs	r4, r1
 8001682:	0010      	movs	r0, r2
 8001684:	0019      	movs	r1, r3
 8001686:	230a      	movs	r3, #10
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	1c22      	adds	r2, r4, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	2308      	movs	r3, #8
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	1c02      	adds	r2, r0, #0
 8001694:	801a      	strh	r2, [r3, #0]
 8001696:	1dbb      	adds	r3, r7, #6
 8001698:	1c0a      	adds	r2, r1, #0
 800169a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2241      	movs	r2, #65	@ 0x41
 80016a0:	5c9b      	ldrb	r3, [r3, r2]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d000      	beq.n	80016aa <HAL_I2C_Mem_Write+0x32>
 80016a8:	e10c      	b.n	80018c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_I2C_Mem_Write+0x42>
 80016b0:	232c      	movs	r3, #44	@ 0x2c
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0ff      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2240      	movs	r2, #64	@ 0x40
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_I2C_Mem_Write+0x5c>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e0f8      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2240      	movs	r2, #64	@ 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016dc:	f7ff fca0 	bl	8001020 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	0219      	lsls	r1, r3, #8
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2319      	movs	r3, #25
 80016f0:	2201      	movs	r2, #1
 80016f2:	f000 f975 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0e3      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2241      	movs	r2, #65	@ 0x41
 8001702:	2121      	movs	r1, #33	@ 0x21
 8001704:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2242      	movs	r2, #66	@ 0x42
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	222c      	movs	r2, #44	@ 0x2c
 800171e:	18ba      	adds	r2, r7, r2
 8001720:	8812      	ldrh	r2, [r2, #0]
 8001722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800172a:	1dbb      	adds	r3, r7, #6
 800172c:	881c      	ldrh	r4, [r3, #0]
 800172e:	2308      	movs	r3, #8
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	230a      	movs	r3, #10
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	8819      	ldrh	r1, [r3, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	0023      	movs	r3, r4
 8001746:	f000 f8c5 	bl	80018d4 <I2C_RequestMemoryWrite>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d005      	beq.n	800175a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2240      	movs	r2, #64	@ 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0b5      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	2bff      	cmp	r3, #255	@ 0xff
 8001762:	d911      	bls.n	8001788 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	22ff      	movs	r2, #255	@ 0xff
 8001768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	b2da      	uxtb	r2, r3
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	045c      	lsls	r4, r3, #17
 8001774:	230a      	movs	r3, #10
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	8819      	ldrh	r1, [r3, #0]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	2300      	movs	r3, #0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	0023      	movs	r3, r4
 8001782:	f000 fafd 	bl	8001d80 <I2C_TransferConfig>
 8001786:	e012      	b.n	80017ae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	049c      	lsls	r4, r3, #18
 800179c:	230a      	movs	r3, #10
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	0023      	movs	r3, r4
 80017aa:	f000 fae9 	bl	8001d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f961 	bl	8001a7c <I2C_WaitOnTXISFlagUntilTimeout>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e081      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03a      	beq.n	8001872 <HAL_I2C_Mem_Write+0x1fa>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d136      	bne.n	8001872 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	0013      	movs	r3, r2
 800180e:	2200      	movs	r2, #0
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	f000 f8e5 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e053      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	2bff      	cmp	r3, #255	@ 0xff
 8001826:	d911      	bls.n	800184c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	22ff      	movs	r2, #255	@ 0xff
 800182c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001832:	b2da      	uxtb	r2, r3
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	045c      	lsls	r4, r3, #17
 8001838:	230a      	movs	r3, #10
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	8819      	ldrh	r1, [r3, #0]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	0023      	movs	r3, r4
 8001846:	f000 fa9b 	bl	8001d80 <I2C_TransferConfig>
 800184a:	e012      	b.n	8001872 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	049c      	lsls	r4, r3, #18
 8001860:	230a      	movs	r3, #10
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	0023      	movs	r3, r4
 800186e:	f000 fa87 	bl	8001d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d198      	bne.n	80017ae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f940 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d001      	beq.n	8001890 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e01a      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2220      	movs	r2, #32
 8001896:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	490b      	ldr	r1, [pc, #44]	@ (80018d0 <HAL_I2C_Mem_Write+0x258>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2241      	movs	r2, #65	@ 0x41
 80018ac:	2120      	movs	r1, #32
 80018ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2242      	movs	r2, #66	@ 0x42
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	@ 0x40
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
  }
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b007      	add	sp, #28
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	fe00e800 	.word	0xfe00e800

080018d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	000c      	movs	r4, r1
 80018de:	0010      	movs	r0, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	250a      	movs	r5, #10
 80018e4:	197b      	adds	r3, r7, r5
 80018e6:	1c22      	adds	r2, r4, #0
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	2308      	movs	r3, #8
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	1c02      	adds	r2, r0, #0
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	1c0a      	adds	r2, r1, #0
 80018f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018f8:	1dbb      	adds	r3, r7, #6
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	045c      	lsls	r4, r3, #17
 8001902:	197b      	adds	r3, r7, r5
 8001904:	8819      	ldrh	r1, [r3, #0]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <I2C_RequestMemoryWrite+0xc4>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	0023      	movs	r3, r4
 800190e:	f000 fa37 	bl	8001d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001914:	6a39      	ldr	r1, [r7, #32]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0018      	movs	r0, r3
 800191a:	f000 f8af 	bl	8001a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e033      	b.n	800198e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001926:	1dbb      	adds	r3, r7, #6
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800192e:	2308      	movs	r3, #8
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
 800193c:	e019      	b.n	8001972 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800193e:	2308      	movs	r3, #8
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001952:	6a39      	ldr	r1, [r7, #32]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 f890 	bl	8001a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e014      	b.n	800198e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001964:	2308      	movs	r3, #8
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001972:	6a3a      	ldr	r2, [r7, #32]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	0013      	movs	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	f000 f82e 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	80002000 	.word	0x80002000

0800199c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d103      	bne.n	80019ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d007      	beq.n	80019d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	619a      	str	r2, [r3, #24]
  }
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f0:	e030      	b.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	d02d      	beq.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff fb12 	bl	8001020 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d122      	bne.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	4013      	ands	r3, r2
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	4153      	adcs	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	001a      	movs	r2, r3
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d113      	bne.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	2220      	movs	r2, #32
 8001a32:	431a      	orrs	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2241      	movs	r2, #65	@ 0x41
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2242      	movs	r2, #66	@ 0x42
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00f      	b.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	425a      	negs	r2, r3
 8001a64:	4153      	adcs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	001a      	movs	r2, r3
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d0bf      	beq.n	80019f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a88:	e032      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f87d 	bl	8001b90 <I2C_IsErrorOccurred>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e030      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	d025      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa4:	f7ff fabc 	bl	8001020 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11a      	bne.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d013      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	2220      	movs	r2, #32
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2241      	movs	r2, #65	@ 0x41
 8001ad8:	2120      	movs	r1, #32
 8001ada:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2242      	movs	r2, #66	@ 0x42
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d1c5      	bne.n	8001a8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b004      	add	sp, #16
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e02f      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f837 	bl	8001b90 <I2C_IsErrorOccurred>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e02d      	b.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7ff fa79 	bl	8001020 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11a      	bne.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2220      	movs	r2, #32
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d013      	beq.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	2220      	movs	r2, #32
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2241      	movs	r2, #65	@ 0x41
 8001b5e:	2120      	movs	r1, #32
 8001b60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2242      	movs	r2, #66	@ 0x42
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2240      	movs	r2, #64	@ 0x40
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e007      	b.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d1c8      	bne.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	2327      	movs	r3, #39	@ 0x27
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <I2C_IsErrorOccurred+0x2e>
 8001bbc:	e079      	b.n	8001cb2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc6:	e057      	b.n	8001c78 <I2C_IsErrorOccurred+0xe8>
 8001bc8:	2227      	movs	r2, #39	@ 0x27
 8001bca:	18bb      	adds	r3, r7, r2
 8001bcc:	18ba      	adds	r2, r7, r2
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	d04f      	beq.n	8001c78 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bd8:	f7ff fa22 	bl	8001020 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d302      	bcc.n	8001bee <I2C_IsErrorOccurred+0x5e>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d144      	bne.n	8001c78 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bfc:	2013      	movs	r0, #19
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	2142      	movs	r1, #66	@ 0x42
 8001c04:	5c52      	ldrb	r2, [r2, r1]
 8001c06:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	401a      	ands	r2, r3
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d126      	bne.n	8001c6a <I2C_IsErrorOccurred+0xda>
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	01db      	lsls	r3, r3, #7
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d021      	beq.n	8001c6a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001c26:	183b      	adds	r3, r7, r0
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d01d      	beq.n	8001c6a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	01c9      	lsls	r1, r1, #7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c40:	f7ff f9ee 	bl	8001020 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c48:	e00f      	b.n	8001c6a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c4a:	f7ff f9e9 	bl	8001020 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b19      	cmp	r3, #25
 8001c56:	d908      	bls.n	8001c6a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c60:	2327      	movs	r3, #39	@ 0x27
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]

              break;
 8001c68:	e006      	b.n	8001c78 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2220      	movs	r2, #32
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d1e8      	bne.n	8001c4a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d004      	beq.n	8001c90 <I2C_IsErrorOccurred+0x100>
 8001c86:	2327      	movs	r3, #39	@ 0x27
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d09b      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c90:	2327      	movs	r3, #39	@ 0x27
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001caa:	2327      	movs	r3, #39	@ 0x27
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d00c      	beq.n	8001cde <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	@ 0x80
 8001cd2:	0052      	lsls	r2, r2, #1
 8001cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd6:	2327      	movs	r3, #39	@ 0x27
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d00c      	beq.n	8001d02 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	2208      	movs	r2, #8
 8001cec:	4313      	orrs	r3, r2
 8001cee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	00d2      	lsls	r2, r2, #3
 8001cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfa:	2327      	movs	r3, #39	@ 0x27
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d00c      	beq.n	8001d26 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4313      	orrs	r3, r2
 8001d12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d1e:	2327      	movs	r3, #39	@ 0x27
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d26:	2327      	movs	r3, #39	@ 0x27
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01d      	beq.n	8001d6c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff fe32 	bl	800199c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <I2C_IsErrorOccurred+0x1ec>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2241      	movs	r2, #65	@ 0x41
 8001d58:	2120      	movs	r1, #32
 8001d5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2242      	movs	r2, #66	@ 0x42
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d6c:	2327      	movs	r3, #39	@ 0x27
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	781b      	ldrb	r3, [r3, #0]
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b00a      	add	sp, #40	@ 0x28
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	fe00e800 	.word	0xfe00e800

08001d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	0008      	movs	r0, r1
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	240a      	movs	r4, #10
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	1c02      	adds	r2, r0, #0
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	2009      	movs	r0, #9
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	1c0a      	adds	r2, r1, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	059b      	lsls	r3, r3, #22
 8001da4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	0419      	lsls	r1, r3, #16
 8001dac:	23ff      	movs	r3, #255	@ 0xff
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dca:	0d51      	lsrs	r1, r2, #21
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	00d2      	lsls	r2, r2, #3
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	4907      	ldr	r1, [pc, #28]	@ (8001df0 <I2C_TransferConfig+0x70>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	43d2      	mvns	r2, r2
 8001dd8:	401a      	ands	r2, r3
 8001dda:	0011      	movs	r1, r2
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b007      	add	sp, #28
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	03ff63ff 	.word	0x03ff63ff

08001df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	@ 0x41
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d138      	bne.n	8001e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2240      	movs	r2, #64	@ 0x40
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e032      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	@ 0x40
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2241      	movs	r2, #65	@ 0x41
 8001e24:	2124      	movs	r1, #36	@ 0x24
 8001e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4911      	ldr	r1, [pc, #68]	@ (8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2241      	movs	r2, #65	@ 0x41
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	ffffefff 	.word	0xffffefff

08001e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2241      	movs	r2, #65	@ 0x41
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d139      	bne.n	8001f16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2240      	movs	r2, #64	@ 0x40
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e033      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2241      	movs	r2, #65	@ 0x41
 8001ebc:	2124      	movs	r1, #36	@ 0x24
 8001ebe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	@ 0x41
 8001f06:	2120      	movs	r1, #32
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	fffff0ff 	.word	0xfffff0ff

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1d0      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1e>
 8001f40:	e069      	b.n	8002016 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4bc8      	ldr	r3, [pc, #800]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	@ 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d15d      	bne.n	8002016 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1bc      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_OscConfig+0x56>
 8001f6a:	4bbe      	ldr	r3, [pc, #760]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4bbd      	ldr	r3, [pc, #756]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	0249      	lsls	r1, r1, #9
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e020      	b.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	23a0      	movs	r3, #160	@ 0xa0
 8001f80:	02db      	lsls	r3, r3, #11
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d10e      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x80>
 8001f86:	4bb7      	ldr	r3, [pc, #732]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4bb6      	ldr	r3, [pc, #728]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	02c9      	lsls	r1, r1, #11
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4bb3      	ldr	r3, [pc, #716]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4bb2      	ldr	r3, [pc, #712]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001fa4:	4baf      	ldr	r3, [pc, #700]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4bae      	ldr	r3, [pc, #696]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001faa:	49af      	ldr	r1, [pc, #700]	@ (8002268 <HAL_RCC_OscConfig+0x344>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4bac      	ldr	r3, [pc, #688]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4bab      	ldr	r3, [pc, #684]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fb6:	49ad      	ldr	r1, [pc, #692]	@ (800226c <HAL_RCC_OscConfig+0x348>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d014      	beq.n	8001fee <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f82c 	bl	8001020 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fce:	f7ff f827 	bl	8001020 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	@ 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e17b      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe0:	4ba0      	ldr	r3, [pc, #640]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0xaa>
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff f817 	bl	8001020 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f812 	bl	8001020 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e166      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200a:	4b96      	ldr	r3, [pc, #600]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d100      	bne.n	8002022 <HAL_RCC_OscConfig+0xfe>
 8002020:	e086      	b.n	8002130 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b90      	ldr	r3, [pc, #576]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2238      	movs	r2, #56	@ 0x38
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12f      	bne.n	8002092 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e14c      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a8b      	ldr	r2, [pc, #556]	@ (8002270 <HAL_RCC_OscConfig+0x34c>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	021a      	lsls	r2, r3, #8
 800204e:	4b85      	ldr	r3, [pc, #532]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d112      	bne.n	8002080 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a85      	ldr	r2, [pc, #532]	@ (8002274 <HAL_RCC_OscConfig+0x350>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	4b7e      	ldr	r3, [pc, #504]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800206e:	4b7d      	ldr	r3, [pc, #500]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0adb      	lsrs	r3, r3, #11
 8002074:	2207      	movs	r2, #7
 8002076:	4013      	ands	r3, r2
 8002078:	4a7f      	ldr	r2, [pc, #508]	@ (8002278 <HAL_RCC_OscConfig+0x354>)
 800207a:	40da      	lsrs	r2, r3
 800207c:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x358>)
 800207e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002080:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCC_OscConfig+0x35c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0018      	movs	r0, r3
 8002086:	f7fe ff6f 	bl	8000f68 <HAL_InitTick>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d050      	beq.n	8002130 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e122      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800209a:	4b72      	ldr	r3, [pc, #456]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a75      	ldr	r2, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x350>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	0049      	lsls	r1, r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe ffb0 	bl	8001020 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020c6:	f7fe ffab 	bl	8001020 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0ff      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d8:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a61      	ldr	r2, [pc, #388]	@ (8002270 <HAL_RCC_OscConfig+0x34c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e019      	b.n	8002130 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b58      	ldr	r3, [pc, #352]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002102:	4960      	ldr	r1, [pc, #384]	@ (8002284 <HAL_RCC_OscConfig+0x360>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe ff8a 	bl	8001020 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002112:	f7fe ff85 	bl	8001020 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0d9      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002124:	4b4f      	ldr	r3, [pc, #316]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4013      	ands	r3, r2
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	4013      	ands	r3, r2
 8002138:	d042      	beq.n	80021c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800213a:	4b4a      	ldr	r3, [pc, #296]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2238      	movs	r2, #56	@ 0x38
 8002140:	4013      	ands	r3, r2
 8002142:	2b18      	cmp	r3, #24
 8002144:	d105      	bne.n	8002152 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d138      	bne.n	80021c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0c2      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d019      	beq.n	800218e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800215a:	4b42      	ldr	r3, [pc, #264]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800215c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800215e:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe ff5b 	bl	8001020 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002170:	f7fe ff56 	bl	8001020 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0aa      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d0f1      	beq.n	8002170 <HAL_RCC_OscConfig+0x24c>
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800218e:	4b35      	ldr	r3, [pc, #212]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002190:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002192:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002194:	2101      	movs	r1, #1
 8002196:	438a      	bics	r2, r1
 8002198:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe ff41 	bl	8001020 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021a4:	f7fe ff3c 	bl	8001020 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e090      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d1f1      	bne.n	80021a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	d100      	bne.n	80021cc <HAL_RCC_OscConfig+0x2a8>
 80021ca:	e084      	b.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2238      	movs	r2, #56	@ 0x38
 80021da:	4013      	ands	r3, r2
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d000      	beq.n	80021ea <HAL_RCC_OscConfig+0x2c6>
 80021e8:	e075      	b.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e074      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x2e0>
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x31a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x302>
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800220e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002212:	2104      	movs	r1, #4
 8002214:	430a      	orrs	r2, r1
 8002216:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800221a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x31a>
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002234:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 8002238:	2104      	movs	r1, #4
 800223a:	438a      	bics	r2, r1
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe feeb 	bl	8001020 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe fee6 	bl	8001020 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x364>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d915      	bls.n	800228c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e039      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
 8002264:	40021000 	.word	0x40021000
 8002268:	fffeffff 	.word	0xfffeffff
 800226c:	fffbffff 	.word	0xfffbffff
 8002270:	ffff80ff 	.word	0xffff80ff
 8002274:	ffffc7ff 	.word	0xffffc7ff
 8002278:	02dc6c00 	.word	0x02dc6c00
 800227c:	20000000 	.word	0x20000000
 8002280:	20000004 	.word	0x20000004
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d0dc      	beq.n	8002250 <HAL_RCC_OscConfig+0x32c>
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fec2 	bl	8001020 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe febd 	bl	8001020 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_RCC_OscConfig+0x3c0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e010      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ce:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022d0:	4905      	ldr	r1, [pc, #20]	@ (80022e8 <HAL_RCC_OscConfig+0x3c4>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	efffffff 	.word	0xefffffff

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0e9      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b76      	ldr	r3, [pc, #472]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2207      	movs	r2, #7
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d91e      	bls.n	800234c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2207      	movs	r2, #7
 8002314:	4393      	bics	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	4b70      	ldr	r3, [pc, #448]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002320:	f7fe fe7e 	bl	8001020 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002328:	e009      	b.n	800233e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7fe fe79 	bl	8001020 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a6a      	ldr	r2, [pc, #424]	@ (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0ca      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800233e:	4b67      	ldr	r3, [pc, #412]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d1ee      	bne.n	800232a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d017      	beq.n	8002386 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2204      	movs	r2, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002360:	4b60      	ldr	r3, [pc, #384]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a60      	ldr	r2, [pc, #384]	@ (80024e8 <HAL_RCC_ClockConfig+0x1fc>)
 8002366:	401a      	ands	r2, r3
 8002368:	4b5e      	ldr	r3, [pc, #376]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	21b0      	movs	r1, #176	@ 0xb0
 800236c:	0109      	lsls	r1, r1, #4
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002372:	4b5c      	ldr	r3, [pc, #368]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4a5d      	ldr	r2, [pc, #372]	@ (80024ec <HAL_RCC_ClockConfig+0x200>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b58      	ldr	r3, [pc, #352]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d055      	beq.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002390:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	221c      	movs	r2, #28
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b51      	ldr	r3, [pc, #324]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ac:	4b4d      	ldr	r3, [pc, #308]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d11f      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e08b      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b47      	ldr	r3, [pc, #284]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d113      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e07f      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d106      	bne.n	80023ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d108      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e074      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e06d      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f8:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2207      	movs	r2, #7
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7fe fe08 	bl	8001020 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002414:	e009      	b.n	800242a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fe fe03 	bl	8001020 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a2f      	ldr	r2, [pc, #188]	@ (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e054      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2e      	ldr	r3, [pc, #184]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	@ 0x38
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ec      	bne.n	8002416 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2207      	movs	r2, #7
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d21e      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2207      	movs	r2, #7
 8002450:	4393      	bics	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245c:	f7fe fde0 	bl	8001020 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002464:	e009      	b.n	800247a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7fe fddb 	bl	8001020 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e02c      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2207      	movs	r2, #7
 8002480:	4013      	ands	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2204      	movs	r2, #4
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_RCC_ClockConfig+0x204>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024a6:	f000 f82b 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024aa:	0001      	movs	r1, r0
 80024ac:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	220f      	movs	r2, #15
 80024b4:	401a      	ands	r2, r3
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_RCC_ClockConfig+0x208>)
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	58d3      	ldr	r3, [r2, r3]
 80024bc:	221f      	movs	r2, #31
 80024be:	4013      	ands	r3, r2
 80024c0:	000a      	movs	r2, r1
 80024c2:	40da      	lsrs	r2, r3
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <HAL_RCC_ClockConfig+0x20c>)
 80024c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_RCC_ClockConfig+0x210>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe fd4b 	bl	8000f68 <HAL_InitTick>
 80024d2:	0003      	movs	r3, r0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40022000 	.word	0x40022000
 80024e0:	00001388 	.word	0x00001388
 80024e4:	40021000 	.word	0x40021000
 80024e8:	ffff84ff 	.word	0xffff84ff
 80024ec:	fffff0ff 	.word	0xfffff0ff
 80024f0:	ffff8fff 	.word	0xffff8fff
 80024f4:	080043f0 	.word	0x080043f0
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2238      	movs	r2, #56	@ 0x38
 800250c:	4013      	ands	r3, r2
 800250e:	d10f      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0adb      	lsrs	r3, r3, #11
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	4815      	ldr	r0, [pc, #84]	@ (800257c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002526:	f7fd fdf9 	bl	800011c <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e01e      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2238      	movs	r2, #56	@ 0x38
 8002536:	4013      	ands	r3, r2
 8002538:	2b08      	cmp	r3, #8
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253c:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x80>)
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	e015      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	@ 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d103      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e00b      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2238      	movs	r2, #56	@ 0x38
 800255c:	4013      	ands	r3, r2
 800255e:	2b18      	cmp	r3, #24
 8002560:	d103      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002562:	23fa      	movs	r3, #250	@ 0xfa
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	e001      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	02dc6c00 	.word	0x02dc6c00
 8002580:	007a1200 	.word	0x007a1200

08002584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800258c:	2313      	movs	r3, #19
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002594:	2312      	movs	r3, #18
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025a8:	e079      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2011      	movs	r0, #17
 80025ac:	183b      	adds	r3, r7, r0
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b64      	ldr	r3, [pc, #400]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	055b      	lsls	r3, r3, #21
 80025ba:	4013      	ands	r3, r2
 80025bc:	d110      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025c2:	4b60      	ldr	r3, [pc, #384]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025c4:	2180      	movs	r1, #128	@ 0x80
 80025c6:	0549      	lsls	r1, r1, #21
 80025c8:	430a      	orrs	r2, r1
 80025ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025e0:	4b58      	ldr	r3, [pc, #352]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e4:	23c0      	movs	r3, #192	@ 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d014      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80025fc:	4b51      	ldr	r3, [pc, #324]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002600:	4a51      	ldr	r2, [pc, #324]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002602:	4013      	ands	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002606:	4b4f      	ldr	r3, [pc, #316]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002608:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260a:	4b4e      	ldr	r3, [pc, #312]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800260c:	2180      	movs	r1, #128	@ 0x80
 800260e:	0249      	lsls	r1, r1, #9
 8002610:	430a      	orrs	r2, r1
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002614:	4b4b      	ldr	r3, [pc, #300]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002618:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800261a:	494c      	ldr	r1, [pc, #304]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800261c:	400a      	ands	r2, r1
 800261e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002620:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2201      	movs	r2, #1
 800262a:	4013      	ands	r3, r2
 800262c:	d016      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fcf7 	bl	8001020 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002636:	e00c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fcf2 	bl	8001020 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a43      	ldr	r2, [pc, #268]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d904      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002648:	2313      	movs	r3, #19
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2203      	movs	r2, #3
 800264e:	701a      	strb	r2, [r3, #0]
          break;
 8002650:	e004      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002652:	4b3c      	ldr	r3, [pc, #240]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d0ed      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800265c:	2313      	movs	r3, #19
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002666:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	4a37      	ldr	r2, [pc, #220]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002676:	430a      	orrs	r2, r1
 8002678:	65da      	str	r2, [r3, #92]	@ 0x5c
 800267a:	e005      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267c:	2312      	movs	r3, #18
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2213      	movs	r2, #19
 8002682:	18ba      	adds	r2, r7, r2
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002688:	2311      	movs	r3, #17
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b2c      	ldr	r3, [pc, #176]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002696:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002698:	492e      	ldr	r1, [pc, #184]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	400a      	ands	r2, r1
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a8:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	2203      	movs	r2, #3
 80026ae:	4393      	bics	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2240      	movs	r2, #64	@ 0x40
 80026c2:	4013      	ands	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	4a23      	ldr	r2, [pc, #140]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d6:	430a      	orrs	r2, r1
 80026d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	4013      	ands	r3, r2
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	0899      	lsrs	r1, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4013      	ands	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	4a14      	ldr	r2, [pc, #80]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002714:	430a      	orrs	r2, r1
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da09      	bge.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22e0      	movs	r2, #224	@ 0xe0
 8002726:	4393      	bics	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002734:	2312      	movs	r3, #18
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b006      	add	sp, #24
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	40021000 	.word	0x40021000
 8002748:	fffffcff 	.word	0xfffffcff
 800274c:	fffeffff 	.word	0xfffeffff
 8002750:	00001388 	.word	0x00001388
 8002754:	efffffff 	.word	0xefffffff
 8002758:	ffffcfff 	.word	0xffffcfff
 800275c:	ffff3fff 	.word	0xffff3fff

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e04a      	b.n	8002808 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223d      	movs	r2, #61	@ 0x3d
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223c      	movs	r2, #60	@ 0x3c
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f7fe fb33 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223d      	movs	r2, #61	@ 0x3d
 8002792:	2102      	movs	r1, #2
 8002794:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f000 f951 	bl	8002a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2248      	movs	r2, #72	@ 0x48
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223e      	movs	r2, #62	@ 0x3e
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223f      	movs	r2, #63	@ 0x3f
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2240      	movs	r2, #64	@ 0x40
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	@ 0x41
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2242      	movs	r2, #66	@ 0x42
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2243      	movs	r2, #67	@ 0x43
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2244      	movs	r2, #68	@ 0x44
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2245      	movs	r2, #69	@ 0x45
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2246      	movs	r2, #70	@ 0x46
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2247      	movs	r2, #71	@ 0x47
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	@ 0x3d
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	223d      	movs	r2, #61	@ 0x3d
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d001      	beq.n	8002828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e02f      	b.n	8002888 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	223d      	movs	r2, #61	@ 0x3d
 800282c:	2102      	movs	r1, #2
 800282e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_TIM_Base_Start+0x80>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_TIM_Base_Start+0x34>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a15      	ldr	r2, [pc, #84]	@ (8002894 <HAL_TIM_Base_Start+0x84>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d116      	bne.n	8002872 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <HAL_TIM_Base_Start+0x88>)
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b06      	cmp	r3, #6
 8002854:	d016      	beq.n	8002884 <HAL_TIM_Base_Start+0x74>
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	429a      	cmp	r2, r3
 800285e:	d011      	beq.n	8002884 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2101      	movs	r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e008      	b.n	8002884 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e000      	b.n	8002886 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b004      	add	sp, #16
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	00010007 	.word	0x00010007

0800289c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223c      	movs	r2, #60	@ 0x3c
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_ConfigClockSource+0x20>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e0bc      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x19a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	223c      	movs	r2, #60	@ 0x3c
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	223d      	movs	r2, #61	@ 0x3d
 80028c8:	2102      	movs	r1, #2
 80028ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a40 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4a59      	ldr	r2, [pc, #356]	@ (8002a44 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2280      	movs	r2, #128	@ 0x80
 80028f2:	0192      	lsls	r2, r2, #6
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_TIM_ConfigClockSource+0xde>
 80028f8:	2280      	movs	r2, #128	@ 0x80
 80028fa:	0192      	lsls	r2, r2, #6
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d900      	bls.n	8002902 <HAL_TIM_ConfigClockSource+0x66>
 8002900:	e088      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	0152      	lsls	r2, r2, #5
 8002906:	4293      	cmp	r3, r2
 8002908:	d100      	bne.n	800290c <HAL_TIM_ConfigClockSource+0x70>
 800290a:	e088      	b.n	8002a1e <HAL_TIM_ConfigClockSource+0x182>
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	0152      	lsls	r2, r2, #5
 8002910:	4293      	cmp	r3, r2
 8002912:	d900      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x7a>
 8002914:	e07e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 8002916:	2b70      	cmp	r3, #112	@ 0x70
 8002918:	d018      	beq.n	800294c <HAL_TIM_ConfigClockSource+0xb0>
 800291a:	d900      	bls.n	800291e <HAL_TIM_ConfigClockSource+0x82>
 800291c:	e07a      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 800291e:	2b60      	cmp	r3, #96	@ 0x60
 8002920:	d04f      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x126>
 8002922:	d900      	bls.n	8002926 <HAL_TIM_ConfigClockSource+0x8a>
 8002924:	e076      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 8002926:	2b50      	cmp	r3, #80	@ 0x50
 8002928:	d03b      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x106>
 800292a:	d900      	bls.n	800292e <HAL_TIM_ConfigClockSource+0x92>
 800292c:	e072      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 800292e:	2b40      	cmp	r3, #64	@ 0x40
 8002930:	d057      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x146>
 8002932:	d900      	bls.n	8002936 <HAL_TIM_ConfigClockSource+0x9a>
 8002934:	e06e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2b30      	cmp	r3, #48	@ 0x30
 8002938:	d063      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x166>
 800293a:	d86b      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d060      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x166>
 8002940:	d868      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d05d      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x166>
 8002946:	2b10      	cmp	r3, #16
 8002948:	d05b      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x166>
 800294a:	e063      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	f000 f95c 	bl	8002c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2277      	movs	r2, #119	@ 0x77
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
      break;
 8002978:	e052      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800298a:	f000 f945 	bl	8002c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	01c9      	lsls	r1, r1, #7
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
      break;
 80029a0:	e03e      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	001a      	movs	r2, r3
 80029b0:	f000 f8b6 	bl	8002b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2150      	movs	r1, #80	@ 0x50
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f910 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e02e      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	001a      	movs	r2, r3
 80029d0:	f000 f8d4 	bl	8002b7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2160      	movs	r1, #96	@ 0x60
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f900 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e01e      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	001a      	movs	r2, r3
 80029f0:	f000 f896 	bl	8002b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2140      	movs	r1, #64	@ 0x40
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8f0 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e00e      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 f8e7 	bl	8002be0 <TIM_ITRx_SetConfig>
      break;
 8002a12:	e005      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a14:	230f      	movs	r3, #15
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
      break;
 8002a1c:	e000      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	223d      	movs	r2, #61	@ 0x3d
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	223c      	movs	r2, #60	@ 0x3c
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a30:	230f      	movs	r3, #15
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b004      	add	sp, #16
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	ffceff88 	.word	0xffceff88
 8002a44:	ffff00ff 	.word	0xffff00ff

08002a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <TIM_Base_SetConfig+0xc0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x20>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <TIM_Base_SetConfig+0xc4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2270      	movs	r2, #112	@ 0x70
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <TIM_Base_SetConfig+0xc0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00f      	beq.n	8002aa2 <TIM_Base_SetConfig+0x5a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <TIM_Base_SetConfig+0xc4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <TIM_Base_SetConfig+0x5a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a20      	ldr	r2, [pc, #128]	@ (8002b10 <TIM_Base_SetConfig+0xc8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <TIM_Base_SetConfig+0x5a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <TIM_Base_SetConfig+0xcc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <TIM_Base_SetConfig+0x5a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <TIM_Base_SetConfig+0xd0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <TIM_Base_SetConfig+0xd4>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	4393      	bics	r3, r2
 8002aba:	001a      	movs	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <TIM_Base_SetConfig+0xc0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <TIM_Base_SetConfig+0xaa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b14 <TIM_Base_SetConfig+0xcc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_Base_SetConfig+0xaa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <TIM_Base_SetConfig+0xd0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d103      	bne.n	8002afa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	615a      	str	r2, [r3, #20]
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40002000 	.word	0x40002000
 8002b14:	40014400 	.word	0x40014400
 8002b18:	40014800 	.word	0x40014800
 8002b1c:	fffffcff 	.word	0xfffffcff

08002b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4393      	bics	r3, r2
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	22f0      	movs	r2, #240	@ 0xf0
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b006      	add	sp, #24
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2210      	movs	r2, #16
 8002b94:	4393      	bics	r3, r2
 8002b96:	001a      	movs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <TIM_TI2_ConfigInputStage+0x60>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	22a0      	movs	r2, #160	@ 0xa0
 8002bb8:	4393      	bics	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	ffff0fff 	.word	0xffff0fff

08002be0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <TIM_ITRx_SetConfig+0x34>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	2207      	movs	r2, #7
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	ffcfff8f 	.word	0xffcfff8f

08002c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4a09      	ldr	r2, [pc, #36]	@ (8002c54 <TIM_ETR_SetConfig+0x3c>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	021a      	lsls	r2, r3, #8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	ffff00ff 	.word	0xffff00ff

08002c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223c      	movs	r2, #60	@ 0x3c
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e04a      	b.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223c      	movs	r2, #60	@ 0x3c
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223d      	movs	r2, #61	@ 0x3d
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1e      	ldr	r2, [pc, #120]	@ (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2270      	movs	r2, #112	@ 0x70
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a11      	ldr	r2, [pc, #68]	@ (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a10      	ldr	r2, [pc, #64]	@ (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2280      	movs	r2, #128	@ 0x80
 8002cde:	4393      	bics	r3, r2
 8002ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	223d      	movs	r2, #61	@ 0x3d
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	223c      	movs	r2, #60	@ 0x3c
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	ff0fffff 	.word	0xff0fffff
 8002d18:	40000400 	.word	0x40000400

08002d1c <siprintf>:
 8002d1c:	b40e      	push	{r1, r2, r3}
 8002d1e:	b500      	push	{lr}
 8002d20:	490b      	ldr	r1, [pc, #44]	@ (8002d50 <siprintf+0x34>)
 8002d22:	b09c      	sub	sp, #112	@ 0x70
 8002d24:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d26:	9002      	str	r0, [sp, #8]
 8002d28:	9006      	str	r0, [sp, #24]
 8002d2a:	9107      	str	r1, [sp, #28]
 8002d2c:	9104      	str	r1, [sp, #16]
 8002d2e:	4809      	ldr	r0, [pc, #36]	@ (8002d54 <siprintf+0x38>)
 8002d30:	4909      	ldr	r1, [pc, #36]	@ (8002d58 <siprintf+0x3c>)
 8002d32:	cb04      	ldmia	r3!, {r2}
 8002d34:	9105      	str	r1, [sp, #20]
 8002d36:	6800      	ldr	r0, [r0, #0]
 8002d38:	a902      	add	r1, sp, #8
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f000 f9a8 	bl	8003090 <_svfiprintf_r>
 8002d40:	2200      	movs	r2, #0
 8002d42:	9b02      	ldr	r3, [sp, #8]
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	b01c      	add	sp, #112	@ 0x70
 8002d48:	bc08      	pop	{r3}
 8002d4a:	b003      	add	sp, #12
 8002d4c:	4718      	bx	r3
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	7fffffff 	.word	0x7fffffff
 8002d54:	2000000c 	.word	0x2000000c
 8002d58:	ffff0208 	.word	0xffff0208

08002d5c <memset>:
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	1882      	adds	r2, r0, r2
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	7019      	strb	r1, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <__errno>:
 8002d6c:	4b01      	ldr	r3, [pc, #4]	@ (8002d74 <__errno+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	4770      	bx	lr
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	2000000c 	.word	0x2000000c

08002d78 <__libc_init_array>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	4c0c      	ldr	r4, [pc, #48]	@ (8002db0 <__libc_init_array+0x38>)
 8002d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8002db4 <__libc_init_array+0x3c>)
 8002d80:	1b64      	subs	r4, r4, r5
 8002d82:	10a4      	asrs	r4, r4, #2
 8002d84:	42a6      	cmp	r6, r4
 8002d86:	d109      	bne.n	8002d9c <__libc_init_array+0x24>
 8002d88:	2600      	movs	r6, #0
 8002d8a:	f000 fc65 	bl	8003658 <_init>
 8002d8e:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <__libc_init_array+0x40>)
 8002d90:	4d0a      	ldr	r5, [pc, #40]	@ (8002dbc <__libc_init_array+0x44>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	42a6      	cmp	r6, r4
 8002d98:	d105      	bne.n	8002da6 <__libc_init_array+0x2e>
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	00b3      	lsls	r3, r6, #2
 8002d9e:	58eb      	ldr	r3, [r5, r3]
 8002da0:	4798      	blx	r3
 8002da2:	3601      	adds	r6, #1
 8002da4:	e7ee      	b.n	8002d84 <__libc_init_array+0xc>
 8002da6:	00b3      	lsls	r3, r6, #2
 8002da8:	58eb      	ldr	r3, [r5, r3]
 8002daa:	4798      	blx	r3
 8002dac:	3601      	adds	r6, #1
 8002dae:	e7f2      	b.n	8002d96 <__libc_init_array+0x1e>
 8002db0:	08004464 	.word	0x08004464
 8002db4:	08004464 	.word	0x08004464
 8002db8:	08004468 	.word	0x08004468
 8002dbc:	08004464 	.word	0x08004464

08002dc0 <__retarget_lock_acquire_recursive>:
 8002dc0:	4770      	bx	lr

08002dc2 <__retarget_lock_release_recursive>:
 8002dc2:	4770      	bx	lr

08002dc4 <memcpy>:
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d100      	bne.n	8002dce <memcpy+0xa>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	5ccc      	ldrb	r4, [r1, r3]
 8002dd0:	54c4      	strb	r4, [r0, r3]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	e7f8      	b.n	8002dc8 <memcpy+0x4>
	...

08002dd8 <_free_r>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	0005      	movs	r5, r0
 8002ddc:	1e0c      	subs	r4, r1, #0
 8002dde:	d010      	beq.n	8002e02 <_free_r+0x2a>
 8002de0:	3c04      	subs	r4, #4
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da00      	bge.n	8002dea <_free_r+0x12>
 8002de8:	18e4      	adds	r4, r4, r3
 8002dea:	0028      	movs	r0, r5
 8002dec:	f000 f8e0 	bl	8002fb0 <__malloc_lock>
 8002df0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <_free_r+0x90>)
 8002df2:	6813      	ldr	r3, [r2, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <_free_r+0x2c>
 8002df8:	6063      	str	r3, [r4, #4]
 8002dfa:	6014      	str	r4, [r2, #0]
 8002dfc:	0028      	movs	r0, r5
 8002dfe:	f000 f8df 	bl	8002fc0 <__malloc_unlock>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d908      	bls.n	8002e1a <_free_r+0x42>
 8002e08:	6820      	ldr	r0, [r4, #0]
 8002e0a:	1821      	adds	r1, r4, r0
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d1f3      	bne.n	8002df8 <_free_r+0x20>
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	1809      	adds	r1, r1, r0
 8002e16:	6021      	str	r1, [r4, #0]
 8002e18:	e7ee      	b.n	8002df8 <_free_r+0x20>
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <_free_r+0x4e>
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	d9f9      	bls.n	8002e1a <_free_r+0x42>
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	1850      	adds	r0, r2, r1
 8002e2a:	42a0      	cmp	r0, r4
 8002e2c:	d10b      	bne.n	8002e46 <_free_r+0x6e>
 8002e2e:	6820      	ldr	r0, [r4, #0]
 8002e30:	1809      	adds	r1, r1, r0
 8002e32:	1850      	adds	r0, r2, r1
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	4283      	cmp	r3, r0
 8002e38:	d1e0      	bne.n	8002dfc <_free_r+0x24>
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	1841      	adds	r1, r0, r1
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	6053      	str	r3, [r2, #4]
 8002e44:	e7da      	b.n	8002dfc <_free_r+0x24>
 8002e46:	42a0      	cmp	r0, r4
 8002e48:	d902      	bls.n	8002e50 <_free_r+0x78>
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	e7d5      	b.n	8002dfc <_free_r+0x24>
 8002e50:	6820      	ldr	r0, [r4, #0]
 8002e52:	1821      	adds	r1, r4, r0
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d103      	bne.n	8002e60 <_free_r+0x88>
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	1809      	adds	r1, r1, r0
 8002e5e:	6021      	str	r1, [r4, #0]
 8002e60:	6063      	str	r3, [r4, #4]
 8002e62:	6054      	str	r4, [r2, #4]
 8002e64:	e7ca      	b.n	8002dfc <_free_r+0x24>
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	20000670 	.word	0x20000670

08002e6c <sbrk_aligned>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002eac <sbrk_aligned+0x40>)
 8002e70:	000d      	movs	r5, r1
 8002e72:	6831      	ldr	r1, [r6, #0]
 8002e74:	0004      	movs	r4, r0
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d102      	bne.n	8002e80 <sbrk_aligned+0x14>
 8002e7a:	f000 fb99 	bl	80035b0 <_sbrk_r>
 8002e7e:	6030      	str	r0, [r6, #0]
 8002e80:	0029      	movs	r1, r5
 8002e82:	0020      	movs	r0, r4
 8002e84:	f000 fb94 	bl	80035b0 <_sbrk_r>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d103      	bne.n	8002e94 <sbrk_aligned+0x28>
 8002e8c:	2501      	movs	r5, #1
 8002e8e:	426d      	negs	r5, r5
 8002e90:	0028      	movs	r0, r5
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	2303      	movs	r3, #3
 8002e96:	1cc5      	adds	r5, r0, #3
 8002e98:	439d      	bics	r5, r3
 8002e9a:	42a8      	cmp	r0, r5
 8002e9c:	d0f8      	beq.n	8002e90 <sbrk_aligned+0x24>
 8002e9e:	1a29      	subs	r1, r5, r0
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f000 fb85 	bl	80035b0 <_sbrk_r>
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d1f2      	bne.n	8002e90 <sbrk_aligned+0x24>
 8002eaa:	e7ef      	b.n	8002e8c <sbrk_aligned+0x20>
 8002eac:	2000066c 	.word	0x2000066c

08002eb0 <_malloc_r>:
 8002eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	1ccb      	adds	r3, r1, #3
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	3308      	adds	r3, #8
 8002eba:	0005      	movs	r5, r0
 8002ebc:	001f      	movs	r7, r3
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d234      	bcs.n	8002f2c <_malloc_r+0x7c>
 8002ec2:	270c      	movs	r7, #12
 8002ec4:	42b9      	cmp	r1, r7
 8002ec6:	d833      	bhi.n	8002f30 <_malloc_r+0x80>
 8002ec8:	0028      	movs	r0, r5
 8002eca:	f000 f871 	bl	8002fb0 <__malloc_lock>
 8002ece:	4e37      	ldr	r6, [pc, #220]	@ (8002fac <_malloc_r+0xfc>)
 8002ed0:	6833      	ldr	r3, [r6, #0]
 8002ed2:	001c      	movs	r4, r3
 8002ed4:	2c00      	cmp	r4, #0
 8002ed6:	d12f      	bne.n	8002f38 <_malloc_r+0x88>
 8002ed8:	0039      	movs	r1, r7
 8002eda:	0028      	movs	r0, r5
 8002edc:	f7ff ffc6 	bl	8002e6c <sbrk_aligned>
 8002ee0:	0004      	movs	r4, r0
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	d15f      	bne.n	8002fa6 <_malloc_r+0xf6>
 8002ee6:	6834      	ldr	r4, [r6, #0]
 8002ee8:	9400      	str	r4, [sp, #0]
 8002eea:	9b00      	ldr	r3, [sp, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d14a      	bne.n	8002f86 <_malloc_r+0xd6>
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d052      	beq.n	8002f9a <_malloc_r+0xea>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	0028      	movs	r0, r5
 8002ef8:	18e3      	adds	r3, r4, r3
 8002efa:	9900      	ldr	r1, [sp, #0]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	f000 fb57 	bl	80035b0 <_sbrk_r>
 8002f02:	9b01      	ldr	r3, [sp, #4]
 8002f04:	4283      	cmp	r3, r0
 8002f06:	d148      	bne.n	8002f9a <_malloc_r+0xea>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	0028      	movs	r0, r5
 8002f0c:	1aff      	subs	r7, r7, r3
 8002f0e:	0039      	movs	r1, r7
 8002f10:	f7ff ffac 	bl	8002e6c <sbrk_aligned>
 8002f14:	3001      	adds	r0, #1
 8002f16:	d040      	beq.n	8002f9a <_malloc_r+0xea>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	6833      	ldr	r3, [r6, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	d133      	bne.n	8002f8e <_malloc_r+0xde>
 8002f26:	9b00      	ldr	r3, [sp, #0]
 8002f28:	6033      	str	r3, [r6, #0]
 8002f2a:	e019      	b.n	8002f60 <_malloc_r+0xb0>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dac9      	bge.n	8002ec4 <_malloc_r+0x14>
 8002f30:	230c      	movs	r3, #12
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	2000      	movs	r0, #0
 8002f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f38:	6821      	ldr	r1, [r4, #0]
 8002f3a:	1bc9      	subs	r1, r1, r7
 8002f3c:	d420      	bmi.n	8002f80 <_malloc_r+0xd0>
 8002f3e:	290b      	cmp	r1, #11
 8002f40:	d90a      	bls.n	8002f58 <_malloc_r+0xa8>
 8002f42:	19e2      	adds	r2, r4, r7
 8002f44:	6027      	str	r7, [r4, #0]
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	d104      	bne.n	8002f54 <_malloc_r+0xa4>
 8002f4a:	6032      	str	r2, [r6, #0]
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	6011      	str	r1, [r2, #0]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	e005      	b.n	8002f60 <_malloc_r+0xb0>
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	e7f9      	b.n	8002f4c <_malloc_r+0x9c>
 8002f58:	6862      	ldr	r2, [r4, #4]
 8002f5a:	42a3      	cmp	r3, r4
 8002f5c:	d10e      	bne.n	8002f7c <_malloc_r+0xcc>
 8002f5e:	6032      	str	r2, [r6, #0]
 8002f60:	0028      	movs	r0, r5
 8002f62:	f000 f82d 	bl	8002fc0 <__malloc_unlock>
 8002f66:	0020      	movs	r0, r4
 8002f68:	2207      	movs	r2, #7
 8002f6a:	300b      	adds	r0, #11
 8002f6c:	1d23      	adds	r3, r4, #4
 8002f6e:	4390      	bics	r0, r2
 8002f70:	1ac2      	subs	r2, r0, r3
 8002f72:	4298      	cmp	r0, r3
 8002f74:	d0df      	beq.n	8002f36 <_malloc_r+0x86>
 8002f76:	1a1b      	subs	r3, r3, r0
 8002f78:	50a3      	str	r3, [r4, r2]
 8002f7a:	e7dc      	b.n	8002f36 <_malloc_r+0x86>
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e7ef      	b.n	8002f60 <_malloc_r+0xb0>
 8002f80:	0023      	movs	r3, r4
 8002f82:	6864      	ldr	r4, [r4, #4]
 8002f84:	e7a6      	b.n	8002ed4 <_malloc_r+0x24>
 8002f86:	9c00      	ldr	r4, [sp, #0]
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	e7ad      	b.n	8002eea <_malloc_r+0x3a>
 8002f8e:	001a      	movs	r2, r3
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	d1fb      	bne.n	8002f8e <_malloc_r+0xde>
 8002f96:	2300      	movs	r3, #0
 8002f98:	e7da      	b.n	8002f50 <_malloc_r+0xa0>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	0028      	movs	r0, r5
 8002f9e:	602b      	str	r3, [r5, #0]
 8002fa0:	f000 f80e 	bl	8002fc0 <__malloc_unlock>
 8002fa4:	e7c6      	b.n	8002f34 <_malloc_r+0x84>
 8002fa6:	6007      	str	r7, [r0, #0]
 8002fa8:	e7da      	b.n	8002f60 <_malloc_r+0xb0>
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	20000670 	.word	0x20000670

08002fb0 <__malloc_lock>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <__malloc_lock+0xc>)
 8002fb4:	f7ff ff04 	bl	8002dc0 <__retarget_lock_acquire_recursive>
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	20000668 	.word	0x20000668

08002fc0 <__malloc_unlock>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <__malloc_unlock+0xc>)
 8002fc4:	f7ff fefd 	bl	8002dc2 <__retarget_lock_release_recursive>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	20000668 	.word	0x20000668

08002fd0 <__ssputs_r>:
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	688e      	ldr	r6, [r1, #8]
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	001f      	movs	r7, r3
 8002fd8:	000c      	movs	r4, r1
 8002fda:	680b      	ldr	r3, [r1, #0]
 8002fdc:	9002      	str	r0, [sp, #8]
 8002fde:	9203      	str	r2, [sp, #12]
 8002fe0:	42be      	cmp	r6, r7
 8002fe2:	d830      	bhi.n	8003046 <__ssputs_r+0x76>
 8002fe4:	210c      	movs	r1, #12
 8002fe6:	5e62      	ldrsh	r2, [r4, r1]
 8002fe8:	2190      	movs	r1, #144	@ 0x90
 8002fea:	00c9      	lsls	r1, r1, #3
 8002fec:	420a      	tst	r2, r1
 8002fee:	d028      	beq.n	8003042 <__ssputs_r+0x72>
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	6921      	ldr	r1, [r4, #16]
 8002ff4:	1a5b      	subs	r3, r3, r1
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	6963      	ldr	r3, [r4, #20]
 8002ffa:	4343      	muls	r3, r0
 8002ffc:	9801      	ldr	r0, [sp, #4]
 8002ffe:	0fdd      	lsrs	r5, r3, #31
 8003000:	18ed      	adds	r5, r5, r3
 8003002:	1c7b      	adds	r3, r7, #1
 8003004:	181b      	adds	r3, r3, r0
 8003006:	106d      	asrs	r5, r5, #1
 8003008:	42ab      	cmp	r3, r5
 800300a:	d900      	bls.n	800300e <__ssputs_r+0x3e>
 800300c:	001d      	movs	r5, r3
 800300e:	0552      	lsls	r2, r2, #21
 8003010:	d528      	bpl.n	8003064 <__ssputs_r+0x94>
 8003012:	0029      	movs	r1, r5
 8003014:	9802      	ldr	r0, [sp, #8]
 8003016:	f7ff ff4b 	bl	8002eb0 <_malloc_r>
 800301a:	1e06      	subs	r6, r0, #0
 800301c:	d02c      	beq.n	8003078 <__ssputs_r+0xa8>
 800301e:	9a01      	ldr	r2, [sp, #4]
 8003020:	6921      	ldr	r1, [r4, #16]
 8003022:	f7ff fecf 	bl	8002dc4 <memcpy>
 8003026:	89a2      	ldrh	r2, [r4, #12]
 8003028:	4b18      	ldr	r3, [pc, #96]	@ (800308c <__ssputs_r+0xbc>)
 800302a:	401a      	ands	r2, r3
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	4313      	orrs	r3, r2
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	9b01      	ldr	r3, [sp, #4]
 8003034:	6126      	str	r6, [r4, #16]
 8003036:	18f6      	adds	r6, r6, r3
 8003038:	6026      	str	r6, [r4, #0]
 800303a:	003e      	movs	r6, r7
 800303c:	6165      	str	r5, [r4, #20]
 800303e:	1aed      	subs	r5, r5, r3
 8003040:	60a5      	str	r5, [r4, #8]
 8003042:	42be      	cmp	r6, r7
 8003044:	d900      	bls.n	8003048 <__ssputs_r+0x78>
 8003046:	003e      	movs	r6, r7
 8003048:	0032      	movs	r2, r6
 800304a:	9903      	ldr	r1, [sp, #12]
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	f000 fa9b 	bl	8003588 <memmove>
 8003052:	2000      	movs	r0, #0
 8003054:	68a3      	ldr	r3, [r4, #8]
 8003056:	1b9b      	subs	r3, r3, r6
 8003058:	60a3      	str	r3, [r4, #8]
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	199b      	adds	r3, r3, r6
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	b005      	add	sp, #20
 8003062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003064:	002a      	movs	r2, r5
 8003066:	9802      	ldr	r0, [sp, #8]
 8003068:	f000 fabf 	bl	80035ea <_realloc_r>
 800306c:	1e06      	subs	r6, r0, #0
 800306e:	d1e0      	bne.n	8003032 <__ssputs_r+0x62>
 8003070:	6921      	ldr	r1, [r4, #16]
 8003072:	9802      	ldr	r0, [sp, #8]
 8003074:	f7ff feb0 	bl	8002dd8 <_free_r>
 8003078:	230c      	movs	r3, #12
 800307a:	2001      	movs	r0, #1
 800307c:	9a02      	ldr	r2, [sp, #8]
 800307e:	4240      	negs	r0, r0
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	89a2      	ldrh	r2, [r4, #12]
 8003084:	3334      	adds	r3, #52	@ 0x34
 8003086:	4313      	orrs	r3, r2
 8003088:	81a3      	strh	r3, [r4, #12]
 800308a:	e7e9      	b.n	8003060 <__ssputs_r+0x90>
 800308c:	fffffb7f 	.word	0xfffffb7f

08003090 <_svfiprintf_r>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b0a1      	sub	sp, #132	@ 0x84
 8003094:	9003      	str	r0, [sp, #12]
 8003096:	001d      	movs	r5, r3
 8003098:	898b      	ldrh	r3, [r1, #12]
 800309a:	000f      	movs	r7, r1
 800309c:	0016      	movs	r6, r2
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	d511      	bpl.n	80030c6 <_svfiprintf_r+0x36>
 80030a2:	690b      	ldr	r3, [r1, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10e      	bne.n	80030c6 <_svfiprintf_r+0x36>
 80030a8:	2140      	movs	r1, #64	@ 0x40
 80030aa:	f7ff ff01 	bl	8002eb0 <_malloc_r>
 80030ae:	6038      	str	r0, [r7, #0]
 80030b0:	6138      	str	r0, [r7, #16]
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d105      	bne.n	80030c2 <_svfiprintf_r+0x32>
 80030b6:	230c      	movs	r3, #12
 80030b8:	9a03      	ldr	r2, [sp, #12]
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	2001      	movs	r0, #1
 80030be:	4240      	negs	r0, r0
 80030c0:	e0cf      	b.n	8003262 <_svfiprintf_r+0x1d2>
 80030c2:	2340      	movs	r3, #64	@ 0x40
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	2300      	movs	r3, #0
 80030c8:	ac08      	add	r4, sp, #32
 80030ca:	6163      	str	r3, [r4, #20]
 80030cc:	3320      	adds	r3, #32
 80030ce:	7663      	strb	r3, [r4, #25]
 80030d0:	3310      	adds	r3, #16
 80030d2:	76a3      	strb	r3, [r4, #26]
 80030d4:	9507      	str	r5, [sp, #28]
 80030d6:	0035      	movs	r5, r6
 80030d8:	782b      	ldrb	r3, [r5, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <_svfiprintf_r+0x52>
 80030de:	2b25      	cmp	r3, #37	@ 0x25
 80030e0:	d148      	bne.n	8003174 <_svfiprintf_r+0xe4>
 80030e2:	1bab      	subs	r3, r5, r6
 80030e4:	9305      	str	r3, [sp, #20]
 80030e6:	42b5      	cmp	r5, r6
 80030e8:	d00b      	beq.n	8003102 <_svfiprintf_r+0x72>
 80030ea:	0032      	movs	r2, r6
 80030ec:	0039      	movs	r1, r7
 80030ee:	9803      	ldr	r0, [sp, #12]
 80030f0:	f7ff ff6e 	bl	8002fd0 <__ssputs_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	d100      	bne.n	80030fa <_svfiprintf_r+0x6a>
 80030f8:	e0ae      	b.n	8003258 <_svfiprintf_r+0x1c8>
 80030fa:	6963      	ldr	r3, [r4, #20]
 80030fc:	9a05      	ldr	r2, [sp, #20]
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	6163      	str	r3, [r4, #20]
 8003102:	782b      	ldrb	r3, [r5, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d100      	bne.n	800310a <_svfiprintf_r+0x7a>
 8003108:	e0a6      	b.n	8003258 <_svfiprintf_r+0x1c8>
 800310a:	2201      	movs	r2, #1
 800310c:	2300      	movs	r3, #0
 800310e:	4252      	negs	r2, r2
 8003110:	6062      	str	r2, [r4, #4]
 8003112:	a904      	add	r1, sp, #16
 8003114:	3254      	adds	r2, #84	@ 0x54
 8003116:	1852      	adds	r2, r2, r1
 8003118:	1c6e      	adds	r6, r5, #1
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	60e3      	str	r3, [r4, #12]
 800311e:	60a3      	str	r3, [r4, #8]
 8003120:	7013      	strb	r3, [r2, #0]
 8003122:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003124:	4b54      	ldr	r3, [pc, #336]	@ (8003278 <_svfiprintf_r+0x1e8>)
 8003126:	2205      	movs	r2, #5
 8003128:	0018      	movs	r0, r3
 800312a:	7831      	ldrb	r1, [r6, #0]
 800312c:	9305      	str	r3, [sp, #20]
 800312e:	f000 fa51 	bl	80035d4 <memchr>
 8003132:	1c75      	adds	r5, r6, #1
 8003134:	2800      	cmp	r0, #0
 8003136:	d11f      	bne.n	8003178 <_svfiprintf_r+0xe8>
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	06d3      	lsls	r3, r2, #27
 800313c:	d504      	bpl.n	8003148 <_svfiprintf_r+0xb8>
 800313e:	2353      	movs	r3, #83	@ 0x53
 8003140:	a904      	add	r1, sp, #16
 8003142:	185b      	adds	r3, r3, r1
 8003144:	2120      	movs	r1, #32
 8003146:	7019      	strb	r1, [r3, #0]
 8003148:	0713      	lsls	r3, r2, #28
 800314a:	d504      	bpl.n	8003156 <_svfiprintf_r+0xc6>
 800314c:	2353      	movs	r3, #83	@ 0x53
 800314e:	a904      	add	r1, sp, #16
 8003150:	185b      	adds	r3, r3, r1
 8003152:	212b      	movs	r1, #43	@ 0x2b
 8003154:	7019      	strb	r1, [r3, #0]
 8003156:	7833      	ldrb	r3, [r6, #0]
 8003158:	2b2a      	cmp	r3, #42	@ 0x2a
 800315a:	d016      	beq.n	800318a <_svfiprintf_r+0xfa>
 800315c:	0035      	movs	r5, r6
 800315e:	2100      	movs	r1, #0
 8003160:	200a      	movs	r0, #10
 8003162:	68e3      	ldr	r3, [r4, #12]
 8003164:	782a      	ldrb	r2, [r5, #0]
 8003166:	1c6e      	adds	r6, r5, #1
 8003168:	3a30      	subs	r2, #48	@ 0x30
 800316a:	2a09      	cmp	r2, #9
 800316c:	d950      	bls.n	8003210 <_svfiprintf_r+0x180>
 800316e:	2900      	cmp	r1, #0
 8003170:	d111      	bne.n	8003196 <_svfiprintf_r+0x106>
 8003172:	e017      	b.n	80031a4 <_svfiprintf_r+0x114>
 8003174:	3501      	adds	r5, #1
 8003176:	e7af      	b.n	80030d8 <_svfiprintf_r+0x48>
 8003178:	9b05      	ldr	r3, [sp, #20]
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	1ac0      	subs	r0, r0, r3
 800317e:	2301      	movs	r3, #1
 8003180:	4083      	lsls	r3, r0
 8003182:	4313      	orrs	r3, r2
 8003184:	002e      	movs	r6, r5
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	e7cc      	b.n	8003124 <_svfiprintf_r+0x94>
 800318a:	9b07      	ldr	r3, [sp, #28]
 800318c:	1d19      	adds	r1, r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	9107      	str	r1, [sp, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db01      	blt.n	800319a <_svfiprintf_r+0x10a>
 8003196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003198:	e004      	b.n	80031a4 <_svfiprintf_r+0x114>
 800319a:	425b      	negs	r3, r3
 800319c:	60e3      	str	r3, [r4, #12]
 800319e:	2302      	movs	r3, #2
 80031a0:	4313      	orrs	r3, r2
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	782b      	ldrb	r3, [r5, #0]
 80031a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80031a8:	d10c      	bne.n	80031c4 <_svfiprintf_r+0x134>
 80031aa:	786b      	ldrb	r3, [r5, #1]
 80031ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80031ae:	d134      	bne.n	800321a <_svfiprintf_r+0x18a>
 80031b0:	9b07      	ldr	r3, [sp, #28]
 80031b2:	3502      	adds	r5, #2
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	9207      	str	r2, [sp, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da01      	bge.n	80031c2 <_svfiprintf_r+0x132>
 80031be:	2301      	movs	r3, #1
 80031c0:	425b      	negs	r3, r3
 80031c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80031c4:	4e2d      	ldr	r6, [pc, #180]	@ (800327c <_svfiprintf_r+0x1ec>)
 80031c6:	2203      	movs	r2, #3
 80031c8:	0030      	movs	r0, r6
 80031ca:	7829      	ldrb	r1, [r5, #0]
 80031cc:	f000 fa02 	bl	80035d4 <memchr>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d006      	beq.n	80031e2 <_svfiprintf_r+0x152>
 80031d4:	2340      	movs	r3, #64	@ 0x40
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	4083      	lsls	r3, r0
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	3501      	adds	r5, #1
 80031de:	4313      	orrs	r3, r2
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	7829      	ldrb	r1, [r5, #0]
 80031e4:	2206      	movs	r2, #6
 80031e6:	4826      	ldr	r0, [pc, #152]	@ (8003280 <_svfiprintf_r+0x1f0>)
 80031e8:	1c6e      	adds	r6, r5, #1
 80031ea:	7621      	strb	r1, [r4, #24]
 80031ec:	f000 f9f2 	bl	80035d4 <memchr>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d038      	beq.n	8003266 <_svfiprintf_r+0x1d6>
 80031f4:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <_svfiprintf_r+0x1f4>)
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d122      	bne.n	8003240 <_svfiprintf_r+0x1b0>
 80031fa:	2207      	movs	r2, #7
 80031fc:	9b07      	ldr	r3, [sp, #28]
 80031fe:	3307      	adds	r3, #7
 8003200:	4393      	bics	r3, r2
 8003202:	3308      	adds	r3, #8
 8003204:	9307      	str	r3, [sp, #28]
 8003206:	6963      	ldr	r3, [r4, #20]
 8003208:	9a04      	ldr	r2, [sp, #16]
 800320a:	189b      	adds	r3, r3, r2
 800320c:	6163      	str	r3, [r4, #20]
 800320e:	e762      	b.n	80030d6 <_svfiprintf_r+0x46>
 8003210:	4343      	muls	r3, r0
 8003212:	0035      	movs	r5, r6
 8003214:	2101      	movs	r1, #1
 8003216:	189b      	adds	r3, r3, r2
 8003218:	e7a4      	b.n	8003164 <_svfiprintf_r+0xd4>
 800321a:	2300      	movs	r3, #0
 800321c:	200a      	movs	r0, #10
 800321e:	0019      	movs	r1, r3
 8003220:	3501      	adds	r5, #1
 8003222:	6063      	str	r3, [r4, #4]
 8003224:	782a      	ldrb	r2, [r5, #0]
 8003226:	1c6e      	adds	r6, r5, #1
 8003228:	3a30      	subs	r2, #48	@ 0x30
 800322a:	2a09      	cmp	r2, #9
 800322c:	d903      	bls.n	8003236 <_svfiprintf_r+0x1a6>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0c8      	beq.n	80031c4 <_svfiprintf_r+0x134>
 8003232:	9109      	str	r1, [sp, #36]	@ 0x24
 8003234:	e7c6      	b.n	80031c4 <_svfiprintf_r+0x134>
 8003236:	4341      	muls	r1, r0
 8003238:	0035      	movs	r5, r6
 800323a:	2301      	movs	r3, #1
 800323c:	1889      	adds	r1, r1, r2
 800323e:	e7f1      	b.n	8003224 <_svfiprintf_r+0x194>
 8003240:	aa07      	add	r2, sp, #28
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	0021      	movs	r1, r4
 8003246:	003a      	movs	r2, r7
 8003248:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <_svfiprintf_r+0x1f8>)
 800324a:	9803      	ldr	r0, [sp, #12]
 800324c:	e000      	b.n	8003250 <_svfiprintf_r+0x1c0>
 800324e:	bf00      	nop
 8003250:	9004      	str	r0, [sp, #16]
 8003252:	9b04      	ldr	r3, [sp, #16]
 8003254:	3301      	adds	r3, #1
 8003256:	d1d6      	bne.n	8003206 <_svfiprintf_r+0x176>
 8003258:	89bb      	ldrh	r3, [r7, #12]
 800325a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800325c:	065b      	lsls	r3, r3, #25
 800325e:	d500      	bpl.n	8003262 <_svfiprintf_r+0x1d2>
 8003260:	e72c      	b.n	80030bc <_svfiprintf_r+0x2c>
 8003262:	b021      	add	sp, #132	@ 0x84
 8003264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003266:	aa07      	add	r2, sp, #28
 8003268:	9200      	str	r2, [sp, #0]
 800326a:	0021      	movs	r1, r4
 800326c:	003a      	movs	r2, r7
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <_svfiprintf_r+0x1f8>)
 8003270:	9803      	ldr	r0, [sp, #12]
 8003272:	f000 f87b 	bl	800336c <_printf_i>
 8003276:	e7eb      	b.n	8003250 <_svfiprintf_r+0x1c0>
 8003278:	08004430 	.word	0x08004430
 800327c:	08004436 	.word	0x08004436
 8003280:	0800443a 	.word	0x0800443a
 8003284:	00000000 	.word	0x00000000
 8003288:	08002fd1 	.word	0x08002fd1

0800328c <_printf_common>:
 800328c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800328e:	0016      	movs	r6, r2
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	688a      	ldr	r2, [r1, #8]
 8003294:	690b      	ldr	r3, [r1, #16]
 8003296:	000c      	movs	r4, r1
 8003298:	9000      	str	r0, [sp, #0]
 800329a:	4293      	cmp	r3, r2
 800329c:	da00      	bge.n	80032a0 <_printf_common+0x14>
 800329e:	0013      	movs	r3, r2
 80032a0:	0022      	movs	r2, r4
 80032a2:	6033      	str	r3, [r6, #0]
 80032a4:	3243      	adds	r2, #67	@ 0x43
 80032a6:	7812      	ldrb	r2, [r2, #0]
 80032a8:	2a00      	cmp	r2, #0
 80032aa:	d001      	beq.n	80032b0 <_printf_common+0x24>
 80032ac:	3301      	adds	r3, #1
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	d502      	bpl.n	80032bc <_printf_common+0x30>
 80032b6:	6833      	ldr	r3, [r6, #0]
 80032b8:	3302      	adds	r3, #2
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	2306      	movs	r3, #6
 80032c0:	0015      	movs	r5, r2
 80032c2:	401d      	ands	r5, r3
 80032c4:	421a      	tst	r2, r3
 80032c6:	d027      	beq.n	8003318 <_printf_common+0x8c>
 80032c8:	0023      	movs	r3, r4
 80032ca:	3343      	adds	r3, #67	@ 0x43
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	4193      	sbcs	r3, r2
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	0692      	lsls	r2, r2, #26
 80032d6:	d430      	bmi.n	800333a <_printf_common+0xae>
 80032d8:	0022      	movs	r2, r4
 80032da:	9901      	ldr	r1, [sp, #4]
 80032dc:	9800      	ldr	r0, [sp, #0]
 80032de:	9d08      	ldr	r5, [sp, #32]
 80032e0:	3243      	adds	r2, #67	@ 0x43
 80032e2:	47a8      	blx	r5
 80032e4:	3001      	adds	r0, #1
 80032e6:	d025      	beq.n	8003334 <_printf_common+0xa8>
 80032e8:	2206      	movs	r2, #6
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	2500      	movs	r5, #0
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d105      	bne.n	8003300 <_printf_common+0x74>
 80032f4:	6833      	ldr	r3, [r6, #0]
 80032f6:	68e5      	ldr	r5, [r4, #12]
 80032f8:	1aed      	subs	r5, r5, r3
 80032fa:	43eb      	mvns	r3, r5
 80032fc:	17db      	asrs	r3, r3, #31
 80032fe:	401d      	ands	r5, r3
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	4293      	cmp	r3, r2
 8003306:	dd01      	ble.n	800330c <_printf_common+0x80>
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	18ed      	adds	r5, r5, r3
 800330c:	2600      	movs	r6, #0
 800330e:	42b5      	cmp	r5, r6
 8003310:	d120      	bne.n	8003354 <_printf_common+0xc8>
 8003312:	2000      	movs	r0, #0
 8003314:	e010      	b.n	8003338 <_printf_common+0xac>
 8003316:	3501      	adds	r5, #1
 8003318:	68e3      	ldr	r3, [r4, #12]
 800331a:	6832      	ldr	r2, [r6, #0]
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	42ab      	cmp	r3, r5
 8003320:	ddd2      	ble.n	80032c8 <_printf_common+0x3c>
 8003322:	0022      	movs	r2, r4
 8003324:	2301      	movs	r3, #1
 8003326:	9901      	ldr	r1, [sp, #4]
 8003328:	9800      	ldr	r0, [sp, #0]
 800332a:	9f08      	ldr	r7, [sp, #32]
 800332c:	3219      	adds	r2, #25
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	d1f0      	bne.n	8003316 <_printf_common+0x8a>
 8003334:	2001      	movs	r0, #1
 8003336:	4240      	negs	r0, r0
 8003338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800333a:	2030      	movs	r0, #48	@ 0x30
 800333c:	18e1      	adds	r1, r4, r3
 800333e:	3143      	adds	r1, #67	@ 0x43
 8003340:	7008      	strb	r0, [r1, #0]
 8003342:	0021      	movs	r1, r4
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	3145      	adds	r1, #69	@ 0x45
 8003348:	7809      	ldrb	r1, [r1, #0]
 800334a:	18a2      	adds	r2, r4, r2
 800334c:	3243      	adds	r2, #67	@ 0x43
 800334e:	3302      	adds	r3, #2
 8003350:	7011      	strb	r1, [r2, #0]
 8003352:	e7c1      	b.n	80032d8 <_printf_common+0x4c>
 8003354:	0022      	movs	r2, r4
 8003356:	2301      	movs	r3, #1
 8003358:	9901      	ldr	r1, [sp, #4]
 800335a:	9800      	ldr	r0, [sp, #0]
 800335c:	9f08      	ldr	r7, [sp, #32]
 800335e:	321a      	adds	r2, #26
 8003360:	47b8      	blx	r7
 8003362:	3001      	adds	r0, #1
 8003364:	d0e6      	beq.n	8003334 <_printf_common+0xa8>
 8003366:	3601      	adds	r6, #1
 8003368:	e7d1      	b.n	800330e <_printf_common+0x82>
	...

0800336c <_printf_i>:
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b08b      	sub	sp, #44	@ 0x2c
 8003370:	9206      	str	r2, [sp, #24]
 8003372:	000a      	movs	r2, r1
 8003374:	3243      	adds	r2, #67	@ 0x43
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	9005      	str	r0, [sp, #20]
 800337a:	9203      	str	r2, [sp, #12]
 800337c:	7e0a      	ldrb	r2, [r1, #24]
 800337e:	000c      	movs	r4, r1
 8003380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003382:	2a78      	cmp	r2, #120	@ 0x78
 8003384:	d809      	bhi.n	800339a <_printf_i+0x2e>
 8003386:	2a62      	cmp	r2, #98	@ 0x62
 8003388:	d80b      	bhi.n	80033a2 <_printf_i+0x36>
 800338a:	2a00      	cmp	r2, #0
 800338c:	d100      	bne.n	8003390 <_printf_i+0x24>
 800338e:	e0bc      	b.n	800350a <_printf_i+0x19e>
 8003390:	497b      	ldr	r1, [pc, #492]	@ (8003580 <_printf_i+0x214>)
 8003392:	9104      	str	r1, [sp, #16]
 8003394:	2a58      	cmp	r2, #88	@ 0x58
 8003396:	d100      	bne.n	800339a <_printf_i+0x2e>
 8003398:	e090      	b.n	80034bc <_printf_i+0x150>
 800339a:	0025      	movs	r5, r4
 800339c:	3542      	adds	r5, #66	@ 0x42
 800339e:	702a      	strb	r2, [r5, #0]
 80033a0:	e022      	b.n	80033e8 <_printf_i+0x7c>
 80033a2:	0010      	movs	r0, r2
 80033a4:	3863      	subs	r0, #99	@ 0x63
 80033a6:	2815      	cmp	r0, #21
 80033a8:	d8f7      	bhi.n	800339a <_printf_i+0x2e>
 80033aa:	f7fc fead 	bl	8000108 <__gnu_thumb1_case_shi>
 80033ae:	0016      	.short	0x0016
 80033b0:	fff6001f 	.word	0xfff6001f
 80033b4:	fff6fff6 	.word	0xfff6fff6
 80033b8:	001ffff6 	.word	0x001ffff6
 80033bc:	fff6fff6 	.word	0xfff6fff6
 80033c0:	fff6fff6 	.word	0xfff6fff6
 80033c4:	003600a1 	.word	0x003600a1
 80033c8:	fff60080 	.word	0xfff60080
 80033cc:	00b2fff6 	.word	0x00b2fff6
 80033d0:	0036fff6 	.word	0x0036fff6
 80033d4:	fff6fff6 	.word	0xfff6fff6
 80033d8:	0084      	.short	0x0084
 80033da:	0025      	movs	r5, r4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	3542      	adds	r5, #66	@ 0x42
 80033e0:	1d11      	adds	r1, r2, #4
 80033e2:	6019      	str	r1, [r3, #0]
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	702b      	strb	r3, [r5, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0a0      	b.n	800352e <_printf_i+0x1c2>
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	6809      	ldr	r1, [r1, #0]
 80033f0:	1d02      	adds	r2, r0, #4
 80033f2:	060d      	lsls	r5, r1, #24
 80033f4:	d50b      	bpl.n	800340e <_printf_i+0xa2>
 80033f6:	6806      	ldr	r6, [r0, #0]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	2e00      	cmp	r6, #0
 80033fc:	da03      	bge.n	8003406 <_printf_i+0x9a>
 80033fe:	232d      	movs	r3, #45	@ 0x2d
 8003400:	9a03      	ldr	r2, [sp, #12]
 8003402:	4276      	negs	r6, r6
 8003404:	7013      	strb	r3, [r2, #0]
 8003406:	4b5e      	ldr	r3, [pc, #376]	@ (8003580 <_printf_i+0x214>)
 8003408:	270a      	movs	r7, #10
 800340a:	9304      	str	r3, [sp, #16]
 800340c:	e018      	b.n	8003440 <_printf_i+0xd4>
 800340e:	6806      	ldr	r6, [r0, #0]
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	0649      	lsls	r1, r1, #25
 8003414:	d5f1      	bpl.n	80033fa <_printf_i+0x8e>
 8003416:	b236      	sxth	r6, r6
 8003418:	e7ef      	b.n	80033fa <_printf_i+0x8e>
 800341a:	6808      	ldr	r0, [r1, #0]
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	c940      	ldmia	r1!, {r6}
 8003420:	0605      	lsls	r5, r0, #24
 8003422:	d402      	bmi.n	800342a <_printf_i+0xbe>
 8003424:	0640      	lsls	r0, r0, #25
 8003426:	d500      	bpl.n	800342a <_printf_i+0xbe>
 8003428:	b2b6      	uxth	r6, r6
 800342a:	6019      	str	r1, [r3, #0]
 800342c:	4b54      	ldr	r3, [pc, #336]	@ (8003580 <_printf_i+0x214>)
 800342e:	270a      	movs	r7, #10
 8003430:	9304      	str	r3, [sp, #16]
 8003432:	2a6f      	cmp	r2, #111	@ 0x6f
 8003434:	d100      	bne.n	8003438 <_printf_i+0xcc>
 8003436:	3f02      	subs	r7, #2
 8003438:	0023      	movs	r3, r4
 800343a:	2200      	movs	r2, #0
 800343c:	3343      	adds	r3, #67	@ 0x43
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	60a3      	str	r3, [r4, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db03      	blt.n	8003450 <_printf_i+0xe4>
 8003448:	2104      	movs	r1, #4
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	438a      	bics	r2, r1
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	2e00      	cmp	r6, #0
 8003452:	d102      	bne.n	800345a <_printf_i+0xee>
 8003454:	9d03      	ldr	r5, [sp, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <_printf_i+0x108>
 800345a:	9d03      	ldr	r5, [sp, #12]
 800345c:	0030      	movs	r0, r6
 800345e:	0039      	movs	r1, r7
 8003460:	f7fc fee2 	bl	8000228 <__aeabi_uidivmod>
 8003464:	9b04      	ldr	r3, [sp, #16]
 8003466:	3d01      	subs	r5, #1
 8003468:	5c5b      	ldrb	r3, [r3, r1]
 800346a:	702b      	strb	r3, [r5, #0]
 800346c:	0033      	movs	r3, r6
 800346e:	0006      	movs	r6, r0
 8003470:	429f      	cmp	r7, r3
 8003472:	d9f3      	bls.n	800345c <_printf_i+0xf0>
 8003474:	2f08      	cmp	r7, #8
 8003476:	d109      	bne.n	800348c <_printf_i+0x120>
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	07db      	lsls	r3, r3, #31
 800347c:	d506      	bpl.n	800348c <_printf_i+0x120>
 800347e:	6862      	ldr	r2, [r4, #4]
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	dc02      	bgt.n	800348c <_printf_i+0x120>
 8003486:	2330      	movs	r3, #48	@ 0x30
 8003488:	3d01      	subs	r5, #1
 800348a:	702b      	strb	r3, [r5, #0]
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	1b5b      	subs	r3, r3, r5
 8003490:	6123      	str	r3, [r4, #16]
 8003492:	9b07      	ldr	r3, [sp, #28]
 8003494:	0021      	movs	r1, r4
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	9805      	ldr	r0, [sp, #20]
 800349a:	9b06      	ldr	r3, [sp, #24]
 800349c:	aa09      	add	r2, sp, #36	@ 0x24
 800349e:	f7ff fef5 	bl	800328c <_printf_common>
 80034a2:	3001      	adds	r0, #1
 80034a4:	d148      	bne.n	8003538 <_printf_i+0x1cc>
 80034a6:	2001      	movs	r0, #1
 80034a8:	4240      	negs	r0, r0
 80034aa:	b00b      	add	sp, #44	@ 0x2c
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ae:	2220      	movs	r2, #32
 80034b0:	6809      	ldr	r1, [r1, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	2278      	movs	r2, #120	@ 0x78
 80034b8:	4932      	ldr	r1, [pc, #200]	@ (8003584 <_printf_i+0x218>)
 80034ba:	9104      	str	r1, [sp, #16]
 80034bc:	0021      	movs	r1, r4
 80034be:	3145      	adds	r1, #69	@ 0x45
 80034c0:	700a      	strb	r2, [r1, #0]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6822      	ldr	r2, [r4, #0]
 80034c6:	c940      	ldmia	r1!, {r6}
 80034c8:	0610      	lsls	r0, r2, #24
 80034ca:	d402      	bmi.n	80034d2 <_printf_i+0x166>
 80034cc:	0650      	lsls	r0, r2, #25
 80034ce:	d500      	bpl.n	80034d2 <_printf_i+0x166>
 80034d0:	b2b6      	uxth	r6, r6
 80034d2:	6019      	str	r1, [r3, #0]
 80034d4:	07d3      	lsls	r3, r2, #31
 80034d6:	d502      	bpl.n	80034de <_printf_i+0x172>
 80034d8:	2320      	movs	r3, #32
 80034da:	4313      	orrs	r3, r2
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	2e00      	cmp	r6, #0
 80034e0:	d001      	beq.n	80034e6 <_printf_i+0x17a>
 80034e2:	2710      	movs	r7, #16
 80034e4:	e7a8      	b.n	8003438 <_printf_i+0xcc>
 80034e6:	2220      	movs	r2, #32
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	4393      	bics	r3, r2
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	e7f8      	b.n	80034e2 <_printf_i+0x176>
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	680d      	ldr	r5, [r1, #0]
 80034f4:	1d10      	adds	r0, r2, #4
 80034f6:	6949      	ldr	r1, [r1, #20]
 80034f8:	6018      	str	r0, [r3, #0]
 80034fa:	6813      	ldr	r3, [r2, #0]
 80034fc:	062e      	lsls	r6, r5, #24
 80034fe:	d501      	bpl.n	8003504 <_printf_i+0x198>
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	e002      	b.n	800350a <_printf_i+0x19e>
 8003504:	066d      	lsls	r5, r5, #25
 8003506:	d5fb      	bpl.n	8003500 <_printf_i+0x194>
 8003508:	8019      	strh	r1, [r3, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	9d03      	ldr	r5, [sp, #12]
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	e7bf      	b.n	8003492 <_printf_i+0x126>
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	1d11      	adds	r1, r2, #4
 8003516:	6019      	str	r1, [r3, #0]
 8003518:	6815      	ldr	r5, [r2, #0]
 800351a:	2100      	movs	r1, #0
 800351c:	0028      	movs	r0, r5
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	f000 f858 	bl	80035d4 <memchr>
 8003524:	2800      	cmp	r0, #0
 8003526:	d001      	beq.n	800352c <_printf_i+0x1c0>
 8003528:	1b40      	subs	r0, r0, r5
 800352a:	6060      	str	r0, [r4, #4]
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	2300      	movs	r3, #0
 8003532:	9a03      	ldr	r2, [sp, #12]
 8003534:	7013      	strb	r3, [r2, #0]
 8003536:	e7ac      	b.n	8003492 <_printf_i+0x126>
 8003538:	002a      	movs	r2, r5
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	9906      	ldr	r1, [sp, #24]
 800353e:	9805      	ldr	r0, [sp, #20]
 8003540:	9d07      	ldr	r5, [sp, #28]
 8003542:	47a8      	blx	r5
 8003544:	3001      	adds	r0, #1
 8003546:	d0ae      	beq.n	80034a6 <_printf_i+0x13a>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	079b      	lsls	r3, r3, #30
 800354c:	d415      	bmi.n	800357a <_printf_i+0x20e>
 800354e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003550:	68e0      	ldr	r0, [r4, #12]
 8003552:	4298      	cmp	r0, r3
 8003554:	daa9      	bge.n	80034aa <_printf_i+0x13e>
 8003556:	0018      	movs	r0, r3
 8003558:	e7a7      	b.n	80034aa <_printf_i+0x13e>
 800355a:	0022      	movs	r2, r4
 800355c:	2301      	movs	r3, #1
 800355e:	9906      	ldr	r1, [sp, #24]
 8003560:	9805      	ldr	r0, [sp, #20]
 8003562:	9e07      	ldr	r6, [sp, #28]
 8003564:	3219      	adds	r2, #25
 8003566:	47b0      	blx	r6
 8003568:	3001      	adds	r0, #1
 800356a:	d09c      	beq.n	80034a6 <_printf_i+0x13a>
 800356c:	3501      	adds	r5, #1
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	42ab      	cmp	r3, r5
 8003576:	dcf0      	bgt.n	800355a <_printf_i+0x1ee>
 8003578:	e7e9      	b.n	800354e <_printf_i+0x1e2>
 800357a:	2500      	movs	r5, #0
 800357c:	e7f7      	b.n	800356e <_printf_i+0x202>
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	08004441 	.word	0x08004441
 8003584:	08004452 	.word	0x08004452

08003588 <memmove>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4288      	cmp	r0, r1
 800358c:	d806      	bhi.n	800359c <memmove+0x14>
 800358e:	2300      	movs	r3, #0
 8003590:	429a      	cmp	r2, r3
 8003592:	d008      	beq.n	80035a6 <memmove+0x1e>
 8003594:	5ccc      	ldrb	r4, [r1, r3]
 8003596:	54c4      	strb	r4, [r0, r3]
 8003598:	3301      	adds	r3, #1
 800359a:	e7f9      	b.n	8003590 <memmove+0x8>
 800359c:	188b      	adds	r3, r1, r2
 800359e:	4298      	cmp	r0, r3
 80035a0:	d2f5      	bcs.n	800358e <memmove+0x6>
 80035a2:	3a01      	subs	r2, #1
 80035a4:	d200      	bcs.n	80035a8 <memmove+0x20>
 80035a6:	bd10      	pop	{r4, pc}
 80035a8:	5c8b      	ldrb	r3, [r1, r2]
 80035aa:	5483      	strb	r3, [r0, r2]
 80035ac:	e7f9      	b.n	80035a2 <memmove+0x1a>
	...

080035b0 <_sbrk_r>:
 80035b0:	2300      	movs	r3, #0
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	4d06      	ldr	r5, [pc, #24]	@ (80035d0 <_sbrk_r+0x20>)
 80035b6:	0004      	movs	r4, r0
 80035b8:	0008      	movs	r0, r1
 80035ba:	602b      	str	r3, [r5, #0]
 80035bc:	f7fd fc52 	bl	8000e64 <_sbrk>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d103      	bne.n	80035cc <_sbrk_r+0x1c>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d000      	beq.n	80035cc <_sbrk_r+0x1c>
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	20000664 	.word	0x20000664

080035d4 <memchr>:
 80035d4:	b2c9      	uxtb	r1, r1
 80035d6:	1882      	adds	r2, r0, r2
 80035d8:	4290      	cmp	r0, r2
 80035da:	d101      	bne.n	80035e0 <memchr+0xc>
 80035dc:	2000      	movs	r0, #0
 80035de:	4770      	bx	lr
 80035e0:	7803      	ldrb	r3, [r0, #0]
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d0fb      	beq.n	80035de <memchr+0xa>
 80035e6:	3001      	adds	r0, #1
 80035e8:	e7f6      	b.n	80035d8 <memchr+0x4>

080035ea <_realloc_r>:
 80035ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ec:	0006      	movs	r6, r0
 80035ee:	000c      	movs	r4, r1
 80035f0:	0015      	movs	r5, r2
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d105      	bne.n	8003602 <_realloc_r+0x18>
 80035f6:	0011      	movs	r1, r2
 80035f8:	f7ff fc5a 	bl	8002eb0 <_malloc_r>
 80035fc:	0004      	movs	r4, r0
 80035fe:	0020      	movs	r0, r4
 8003600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003602:	2a00      	cmp	r2, #0
 8003604:	d103      	bne.n	800360e <_realloc_r+0x24>
 8003606:	f7ff fbe7 	bl	8002dd8 <_free_r>
 800360a:	2400      	movs	r4, #0
 800360c:	e7f7      	b.n	80035fe <_realloc_r+0x14>
 800360e:	f000 f81b 	bl	8003648 <_malloc_usable_size_r>
 8003612:	0007      	movs	r7, r0
 8003614:	4285      	cmp	r5, r0
 8003616:	d802      	bhi.n	800361e <_realloc_r+0x34>
 8003618:	0843      	lsrs	r3, r0, #1
 800361a:	42ab      	cmp	r3, r5
 800361c:	d3ef      	bcc.n	80035fe <_realloc_r+0x14>
 800361e:	0029      	movs	r1, r5
 8003620:	0030      	movs	r0, r6
 8003622:	f7ff fc45 	bl	8002eb0 <_malloc_r>
 8003626:	9001      	str	r0, [sp, #4]
 8003628:	2800      	cmp	r0, #0
 800362a:	d0ee      	beq.n	800360a <_realloc_r+0x20>
 800362c:	002a      	movs	r2, r5
 800362e:	42bd      	cmp	r5, r7
 8003630:	d900      	bls.n	8003634 <_realloc_r+0x4a>
 8003632:	003a      	movs	r2, r7
 8003634:	0021      	movs	r1, r4
 8003636:	9801      	ldr	r0, [sp, #4]
 8003638:	f7ff fbc4 	bl	8002dc4 <memcpy>
 800363c:	0021      	movs	r1, r4
 800363e:	0030      	movs	r0, r6
 8003640:	f7ff fbca 	bl	8002dd8 <_free_r>
 8003644:	9c01      	ldr	r4, [sp, #4]
 8003646:	e7da      	b.n	80035fe <_realloc_r+0x14>

08003648 <_malloc_usable_size_r>:
 8003648:	1f0b      	subs	r3, r1, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1f18      	subs	r0, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	da01      	bge.n	8003656 <_malloc_usable_size_r+0xe>
 8003652:	580b      	ldr	r3, [r1, r0]
 8003654:	18c0      	adds	r0, r0, r3
 8003656:	4770      	bx	lr

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
