
BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007198  08007198  00008198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007318  08007318  00009070  2**0
                  CONTENTS
  4 .ARM          00000000  08007318  08007318  00009070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007318  08007318  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007318  08007318  00008318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800731c  0800731c  0000831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007320  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08007390  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08007390  000092dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce55  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e12  00000000  00000000  00015eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00017d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  00018760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001392d  00000000  00000000  00018f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb6c  00000000  00000000  0002c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077a9e  00000000  00000000  0003b414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  000b2ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b5cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800717c 	.word	0x0800717c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800717c 	.word	0x0800717c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff69 	bl	8001300 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fea9 	bl	8001190 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff5b 	bl	8001300 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff51 	bl	8001300 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fed3 	bl	8001218 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fec9 	bl	8001218 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	b083      	sub	sp, #12
 80004a2:	9000      	str	r0, [sp, #0]
 80004a4:	9101      	str	r1, [sp, #4]
 80004a6:	030c      	lsls	r4, r1, #12
 80004a8:	004f      	lsls	r7, r1, #1
 80004aa:	0fce      	lsrs	r6, r1, #31
 80004ac:	0a61      	lsrs	r1, r4, #9
 80004ae:	9c00      	ldr	r4, [sp, #0]
 80004b0:	031d      	lsls	r5, r3, #12
 80004b2:	0f64      	lsrs	r4, r4, #29
 80004b4:	430c      	orrs	r4, r1
 80004b6:	9900      	ldr	r1, [sp, #0]
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	00c8      	lsls	r0, r1, #3
 80004be:	0059      	lsls	r1, r3, #1
 80004c0:	0d4b      	lsrs	r3, r1, #21
 80004c2:	4699      	mov	r9, r3
 80004c4:	9a00      	ldr	r2, [sp, #0]
 80004c6:	9b01      	ldr	r3, [sp, #4]
 80004c8:	0a6d      	lsrs	r5, r5, #9
 80004ca:	0fd9      	lsrs	r1, r3, #31
 80004cc:	0f53      	lsrs	r3, r2, #29
 80004ce:	432b      	orrs	r3, r5
 80004d0:	469a      	mov	sl, r3
 80004d2:	9b00      	ldr	r3, [sp, #0]
 80004d4:	0d7f      	lsrs	r7, r7, #21
 80004d6:	00da      	lsls	r2, r3, #3
 80004d8:	4694      	mov	ip, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	46b0      	mov	r8, r6
 80004de:	1aba      	subs	r2, r7, r2
 80004e0:	428e      	cmp	r6, r1
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e0b0      	b.n	8000648 <__aeabi_dadd+0x1b4>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_dadd+0x58>
 80004ea:	e078      	b.n	80005de <__aeabi_dadd+0x14a>
 80004ec:	4649      	mov	r1, r9
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x60>
 80004f2:	e0e9      	b.n	80006c8 <__aeabi_dadd+0x234>
 80004f4:	49c9      	ldr	r1, [pc, #804]	@ (800081c <__aeabi_dadd+0x388>)
 80004f6:	428f      	cmp	r7, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e195      	b.n	8000828 <__aeabi_dadd+0x394>
 80004fc:	2501      	movs	r5, #1
 80004fe:	2a38      	cmp	r2, #56	@ 0x38
 8000500:	dc16      	bgt.n	8000530 <__aeabi_dadd+0x9c>
 8000502:	2180      	movs	r1, #128	@ 0x80
 8000504:	4653      	mov	r3, sl
 8000506:	0409      	lsls	r1, r1, #16
 8000508:	430b      	orrs	r3, r1
 800050a:	469a      	mov	sl, r3
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x7e>
 8000510:	e1e7      	b.n	80008e2 <__aeabi_dadd+0x44e>
 8000512:	2120      	movs	r1, #32
 8000514:	4655      	mov	r5, sl
 8000516:	1a8b      	subs	r3, r1, r2
 8000518:	4661      	mov	r1, ip
 800051a:	409d      	lsls	r5, r3
 800051c:	40d1      	lsrs	r1, r2
 800051e:	430d      	orrs	r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4099      	lsls	r1, r3
 8000524:	1e4b      	subs	r3, r1, #1
 8000526:	4199      	sbcs	r1, r3
 8000528:	4653      	mov	r3, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	430d      	orrs	r5, r1
 800052e:	1ae4      	subs	r4, r4, r3
 8000530:	1b45      	subs	r5, r0, r5
 8000532:	42a8      	cmp	r0, r5
 8000534:	4180      	sbcs	r0, r0
 8000536:	4240      	negs	r0, r0
 8000538:	1a24      	subs	r4, r4, r0
 800053a:	0223      	lsls	r3, r4, #8
 800053c:	d400      	bmi.n	8000540 <__aeabi_dadd+0xac>
 800053e:	e10f      	b.n	8000760 <__aeabi_dadd+0x2cc>
 8000540:	0264      	lsls	r4, r4, #9
 8000542:	0a64      	lsrs	r4, r4, #9
 8000544:	2c00      	cmp	r4, #0
 8000546:	d100      	bne.n	800054a <__aeabi_dadd+0xb6>
 8000548:	e139      	b.n	80007be <__aeabi_dadd+0x32a>
 800054a:	0020      	movs	r0, r4
 800054c:	f001 fe3a 	bl	80021c4 <__clzsi2>
 8000550:	0003      	movs	r3, r0
 8000552:	3b08      	subs	r3, #8
 8000554:	2120      	movs	r1, #32
 8000556:	0028      	movs	r0, r5
 8000558:	1aca      	subs	r2, r1, r3
 800055a:	40d0      	lsrs	r0, r2
 800055c:	409c      	lsls	r4, r3
 800055e:	0002      	movs	r2, r0
 8000560:	409d      	lsls	r5, r3
 8000562:	4322      	orrs	r2, r4
 8000564:	429f      	cmp	r7, r3
 8000566:	dd00      	ble.n	800056a <__aeabi_dadd+0xd6>
 8000568:	e173      	b.n	8000852 <__aeabi_dadd+0x3be>
 800056a:	1bd8      	subs	r0, r3, r7
 800056c:	3001      	adds	r0, #1
 800056e:	1a09      	subs	r1, r1, r0
 8000570:	002c      	movs	r4, r5
 8000572:	408d      	lsls	r5, r1
 8000574:	40c4      	lsrs	r4, r0
 8000576:	1e6b      	subs	r3, r5, #1
 8000578:	419d      	sbcs	r5, r3
 800057a:	0013      	movs	r3, r2
 800057c:	40c2      	lsrs	r2, r0
 800057e:	408b      	lsls	r3, r1
 8000580:	4325      	orrs	r5, r4
 8000582:	2700      	movs	r7, #0
 8000584:	0014      	movs	r4, r2
 8000586:	431d      	orrs	r5, r3
 8000588:	076b      	lsls	r3, r5, #29
 800058a:	d009      	beq.n	80005a0 <__aeabi_dadd+0x10c>
 800058c:	230f      	movs	r3, #15
 800058e:	402b      	ands	r3, r5
 8000590:	2b04      	cmp	r3, #4
 8000592:	d005      	beq.n	80005a0 <__aeabi_dadd+0x10c>
 8000594:	1d2b      	adds	r3, r5, #4
 8000596:	42ab      	cmp	r3, r5
 8000598:	41ad      	sbcs	r5, r5
 800059a:	426d      	negs	r5, r5
 800059c:	1964      	adds	r4, r4, r5
 800059e:	001d      	movs	r5, r3
 80005a0:	0223      	lsls	r3, r4, #8
 80005a2:	d400      	bmi.n	80005a6 <__aeabi_dadd+0x112>
 80005a4:	e12d      	b.n	8000802 <__aeabi_dadd+0x36e>
 80005a6:	4a9d      	ldr	r2, [pc, #628]	@ (800081c <__aeabi_dadd+0x388>)
 80005a8:	3701      	adds	r7, #1
 80005aa:	4297      	cmp	r7, r2
 80005ac:	d100      	bne.n	80005b0 <__aeabi_dadd+0x11c>
 80005ae:	e0d3      	b.n	8000758 <__aeabi_dadd+0x2c4>
 80005b0:	4646      	mov	r6, r8
 80005b2:	499b      	ldr	r1, [pc, #620]	@ (8000820 <__aeabi_dadd+0x38c>)
 80005b4:	08ed      	lsrs	r5, r5, #3
 80005b6:	4021      	ands	r1, r4
 80005b8:	074a      	lsls	r2, r1, #29
 80005ba:	432a      	orrs	r2, r5
 80005bc:	057c      	lsls	r4, r7, #21
 80005be:	024d      	lsls	r5, r1, #9
 80005c0:	0b2d      	lsrs	r5, r5, #12
 80005c2:	0d64      	lsrs	r4, r4, #21
 80005c4:	0524      	lsls	r4, r4, #20
 80005c6:	432c      	orrs	r4, r5
 80005c8:	07f6      	lsls	r6, r6, #31
 80005ca:	4334      	orrs	r4, r6
 80005cc:	0010      	movs	r0, r2
 80005ce:	0021      	movs	r1, r4
 80005d0:	b003      	add	sp, #12
 80005d2:	bcf0      	pop	{r4, r5, r6, r7}
 80005d4:	46bb      	mov	fp, r7
 80005d6:	46b2      	mov	sl, r6
 80005d8:	46a9      	mov	r9, r5
 80005da:	46a0      	mov	r8, r4
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e084      	b.n	80006ee <__aeabi_dadd+0x25a>
 80005e4:	464a      	mov	r2, r9
 80005e6:	1bd2      	subs	r2, r2, r7
 80005e8:	2f00      	cmp	r7, #0
 80005ea:	d000      	beq.n	80005ee <__aeabi_dadd+0x15a>
 80005ec:	e16d      	b.n	80008ca <__aeabi_dadd+0x436>
 80005ee:	0025      	movs	r5, r4
 80005f0:	4305      	orrs	r5, r0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x162>
 80005f4:	e127      	b.n	8000846 <__aeabi_dadd+0x3b2>
 80005f6:	1e56      	subs	r6, r2, #1
 80005f8:	2a01      	cmp	r2, #1
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e23b      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80005fe:	4d87      	ldr	r5, [pc, #540]	@ (800081c <__aeabi_dadd+0x388>)
 8000600:	42aa      	cmp	r2, r5
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x172>
 8000604:	e26a      	b.n	8000adc <__aeabi_dadd+0x648>
 8000606:	2501      	movs	r5, #1
 8000608:	2e38      	cmp	r6, #56	@ 0x38
 800060a:	dc12      	bgt.n	8000632 <__aeabi_dadd+0x19e>
 800060c:	0032      	movs	r2, r6
 800060e:	2a1f      	cmp	r2, #31
 8000610:	dd00      	ble.n	8000614 <__aeabi_dadd+0x180>
 8000612:	e1f8      	b.n	8000a06 <__aeabi_dadd+0x572>
 8000614:	2620      	movs	r6, #32
 8000616:	0025      	movs	r5, r4
 8000618:	1ab6      	subs	r6, r6, r2
 800061a:	0007      	movs	r7, r0
 800061c:	4653      	mov	r3, sl
 800061e:	40b0      	lsls	r0, r6
 8000620:	40d4      	lsrs	r4, r2
 8000622:	40b5      	lsls	r5, r6
 8000624:	40d7      	lsrs	r7, r2
 8000626:	1e46      	subs	r6, r0, #1
 8000628:	41b0      	sbcs	r0, r6
 800062a:	1b1b      	subs	r3, r3, r4
 800062c:	469a      	mov	sl, r3
 800062e:	433d      	orrs	r5, r7
 8000630:	4305      	orrs	r5, r0
 8000632:	4662      	mov	r2, ip
 8000634:	1b55      	subs	r5, r2, r5
 8000636:	45ac      	cmp	ip, r5
 8000638:	4192      	sbcs	r2, r2
 800063a:	4653      	mov	r3, sl
 800063c:	4252      	negs	r2, r2
 800063e:	000e      	movs	r6, r1
 8000640:	464f      	mov	r7, r9
 8000642:	4688      	mov	r8, r1
 8000644:	1a9c      	subs	r4, r3, r2
 8000646:	e778      	b.n	800053a <__aeabi_dadd+0xa6>
 8000648:	2a00      	cmp	r2, #0
 800064a:	dc00      	bgt.n	800064e <__aeabi_dadd+0x1ba>
 800064c:	e08e      	b.n	800076c <__aeabi_dadd+0x2d8>
 800064e:	4649      	mov	r1, r9
 8000650:	2900      	cmp	r1, #0
 8000652:	d175      	bne.n	8000740 <__aeabi_dadd+0x2ac>
 8000654:	4661      	mov	r1, ip
 8000656:	4653      	mov	r3, sl
 8000658:	4319      	orrs	r1, r3
 800065a:	d100      	bne.n	800065e <__aeabi_dadd+0x1ca>
 800065c:	e0f6      	b.n	800084c <__aeabi_dadd+0x3b8>
 800065e:	1e51      	subs	r1, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d100      	bne.n	8000666 <__aeabi_dadd+0x1d2>
 8000664:	e191      	b.n	800098a <__aeabi_dadd+0x4f6>
 8000666:	4d6d      	ldr	r5, [pc, #436]	@ (800081c <__aeabi_dadd+0x388>)
 8000668:	42aa      	cmp	r2, r5
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x1da>
 800066c:	e0dc      	b.n	8000828 <__aeabi_dadd+0x394>
 800066e:	2501      	movs	r5, #1
 8000670:	2938      	cmp	r1, #56	@ 0x38
 8000672:	dc14      	bgt.n	800069e <__aeabi_dadd+0x20a>
 8000674:	000a      	movs	r2, r1
 8000676:	2a1f      	cmp	r2, #31
 8000678:	dd00      	ble.n	800067c <__aeabi_dadd+0x1e8>
 800067a:	e1a2      	b.n	80009c2 <__aeabi_dadd+0x52e>
 800067c:	2120      	movs	r1, #32
 800067e:	4653      	mov	r3, sl
 8000680:	1a89      	subs	r1, r1, r2
 8000682:	408b      	lsls	r3, r1
 8000684:	001d      	movs	r5, r3
 8000686:	4663      	mov	r3, ip
 8000688:	40d3      	lsrs	r3, r2
 800068a:	431d      	orrs	r5, r3
 800068c:	4663      	mov	r3, ip
 800068e:	408b      	lsls	r3, r1
 8000690:	0019      	movs	r1, r3
 8000692:	1e4b      	subs	r3, r1, #1
 8000694:	4199      	sbcs	r1, r3
 8000696:	4653      	mov	r3, sl
 8000698:	40d3      	lsrs	r3, r2
 800069a:	430d      	orrs	r5, r1
 800069c:	18e4      	adds	r4, r4, r3
 800069e:	182d      	adds	r5, r5, r0
 80006a0:	4285      	cmp	r5, r0
 80006a2:	4180      	sbcs	r0, r0
 80006a4:	4240      	negs	r0, r0
 80006a6:	1824      	adds	r4, r4, r0
 80006a8:	0223      	lsls	r3, r4, #8
 80006aa:	d559      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006ac:	4b5b      	ldr	r3, [pc, #364]	@ (800081c <__aeabi_dadd+0x388>)
 80006ae:	3701      	adds	r7, #1
 80006b0:	429f      	cmp	r7, r3
 80006b2:	d051      	beq.n	8000758 <__aeabi_dadd+0x2c4>
 80006b4:	2101      	movs	r1, #1
 80006b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000820 <__aeabi_dadd+0x38c>)
 80006b8:	086a      	lsrs	r2, r5, #1
 80006ba:	401c      	ands	r4, r3
 80006bc:	4029      	ands	r1, r5
 80006be:	430a      	orrs	r2, r1
 80006c0:	07e5      	lsls	r5, r4, #31
 80006c2:	4315      	orrs	r5, r2
 80006c4:	0864      	lsrs	r4, r4, #1
 80006c6:	e75f      	b.n	8000588 <__aeabi_dadd+0xf4>
 80006c8:	4661      	mov	r1, ip
 80006ca:	4653      	mov	r3, sl
 80006cc:	4319      	orrs	r1, r3
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x23e>
 80006d0:	e0bc      	b.n	800084c <__aeabi_dadd+0x3b8>
 80006d2:	1e51      	subs	r1, r2, #1
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x246>
 80006d8:	e164      	b.n	80009a4 <__aeabi_dadd+0x510>
 80006da:	4d50      	ldr	r5, [pc, #320]	@ (800081c <__aeabi_dadd+0x388>)
 80006dc:	42aa      	cmp	r2, r5
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x24e>
 80006e0:	e16a      	b.n	80009b8 <__aeabi_dadd+0x524>
 80006e2:	2501      	movs	r5, #1
 80006e4:	2938      	cmp	r1, #56	@ 0x38
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x256>
 80006e8:	e722      	b.n	8000530 <__aeabi_dadd+0x9c>
 80006ea:	000a      	movs	r2, r1
 80006ec:	e70e      	b.n	800050c <__aeabi_dadd+0x78>
 80006ee:	4a4d      	ldr	r2, [pc, #308]	@ (8000824 <__aeabi_dadd+0x390>)
 80006f0:	1c7d      	adds	r5, r7, #1
 80006f2:	4215      	tst	r5, r2
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x264>
 80006f6:	e0d0      	b.n	800089a <__aeabi_dadd+0x406>
 80006f8:	0025      	movs	r5, r4
 80006fa:	4662      	mov	r2, ip
 80006fc:	4653      	mov	r3, sl
 80006fe:	4305      	orrs	r5, r0
 8000700:	431a      	orrs	r2, r3
 8000702:	2f00      	cmp	r7, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x274>
 8000706:	e137      	b.n	8000978 <__aeabi_dadd+0x4e4>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e1a8      	b.n	8000a60 <__aeabi_dadd+0x5cc>
 800070e:	2a00      	cmp	r2, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x280>
 8000712:	e16a      	b.n	80009ea <__aeabi_dadd+0x556>
 8000714:	4663      	mov	r3, ip
 8000716:	1ac5      	subs	r5, r0, r3
 8000718:	4653      	mov	r3, sl
 800071a:	1ae2      	subs	r2, r4, r3
 800071c:	42a8      	cmp	r0, r5
 800071e:	419b      	sbcs	r3, r3
 8000720:	425b      	negs	r3, r3
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	021a      	lsls	r2, r3, #8
 8000726:	d400      	bmi.n	800072a <__aeabi_dadd+0x296>
 8000728:	e203      	b.n	8000b32 <__aeabi_dadd+0x69e>
 800072a:	4663      	mov	r3, ip
 800072c:	1a1d      	subs	r5, r3, r0
 800072e:	45ac      	cmp	ip, r5
 8000730:	4192      	sbcs	r2, r2
 8000732:	4653      	mov	r3, sl
 8000734:	4252      	negs	r2, r2
 8000736:	1b1c      	subs	r4, r3, r4
 8000738:	000e      	movs	r6, r1
 800073a:	4688      	mov	r8, r1
 800073c:	1aa4      	subs	r4, r4, r2
 800073e:	e723      	b.n	8000588 <__aeabi_dadd+0xf4>
 8000740:	4936      	ldr	r1, [pc, #216]	@ (800081c <__aeabi_dadd+0x388>)
 8000742:	428f      	cmp	r7, r1
 8000744:	d070      	beq.n	8000828 <__aeabi_dadd+0x394>
 8000746:	2501      	movs	r5, #1
 8000748:	2a38      	cmp	r2, #56	@ 0x38
 800074a:	dca8      	bgt.n	800069e <__aeabi_dadd+0x20a>
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	4653      	mov	r3, sl
 8000750:	0409      	lsls	r1, r1, #16
 8000752:	430b      	orrs	r3, r1
 8000754:	469a      	mov	sl, r3
 8000756:	e78e      	b.n	8000676 <__aeabi_dadd+0x1e2>
 8000758:	003c      	movs	r4, r7
 800075a:	2500      	movs	r5, #0
 800075c:	2200      	movs	r2, #0
 800075e:	e731      	b.n	80005c4 <__aeabi_dadd+0x130>
 8000760:	2307      	movs	r3, #7
 8000762:	402b      	ands	r3, r5
 8000764:	2b00      	cmp	r3, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e710      	b.n	800058c <__aeabi_dadd+0xf8>
 800076a:	e093      	b.n	8000894 <__aeabi_dadd+0x400>
 800076c:	2a00      	cmp	r2, #0
 800076e:	d074      	beq.n	800085a <__aeabi_dadd+0x3c6>
 8000770:	464a      	mov	r2, r9
 8000772:	1bd2      	subs	r2, r2, r7
 8000774:	2f00      	cmp	r7, #0
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x2e6>
 8000778:	e0c7      	b.n	800090a <__aeabi_dadd+0x476>
 800077a:	4928      	ldr	r1, [pc, #160]	@ (800081c <__aeabi_dadd+0x388>)
 800077c:	4589      	cmp	r9, r1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x2ee>
 8000780:	e185      	b.n	8000a8e <__aeabi_dadd+0x5fa>
 8000782:	2501      	movs	r5, #1
 8000784:	2a38      	cmp	r2, #56	@ 0x38
 8000786:	dc12      	bgt.n	80007ae <__aeabi_dadd+0x31a>
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	0409      	lsls	r1, r1, #16
 800078c:	430c      	orrs	r4, r1
 800078e:	2a1f      	cmp	r2, #31
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0x300>
 8000792:	e1ab      	b.n	8000aec <__aeabi_dadd+0x658>
 8000794:	2120      	movs	r1, #32
 8000796:	0025      	movs	r5, r4
 8000798:	1a89      	subs	r1, r1, r2
 800079a:	0007      	movs	r7, r0
 800079c:	4088      	lsls	r0, r1
 800079e:	408d      	lsls	r5, r1
 80007a0:	40d7      	lsrs	r7, r2
 80007a2:	1e41      	subs	r1, r0, #1
 80007a4:	4188      	sbcs	r0, r1
 80007a6:	40d4      	lsrs	r4, r2
 80007a8:	433d      	orrs	r5, r7
 80007aa:	4305      	orrs	r5, r0
 80007ac:	44a2      	add	sl, r4
 80007ae:	4465      	add	r5, ip
 80007b0:	4565      	cmp	r5, ip
 80007b2:	4192      	sbcs	r2, r2
 80007b4:	4252      	negs	r2, r2
 80007b6:	4452      	add	r2, sl
 80007b8:	0014      	movs	r4, r2
 80007ba:	464f      	mov	r7, r9
 80007bc:	e774      	b.n	80006a8 <__aeabi_dadd+0x214>
 80007be:	0028      	movs	r0, r5
 80007c0:	f001 fd00 	bl	80021c4 <__clzsi2>
 80007c4:	0003      	movs	r3, r0
 80007c6:	3318      	adds	r3, #24
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_dadd+0x33a>
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	002a      	movs	r2, r5
 80007d0:	3808      	subs	r0, #8
 80007d2:	4082      	lsls	r2, r0
 80007d4:	429f      	cmp	r7, r3
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0x346>
 80007d8:	e0a9      	b.n	800092e <__aeabi_dadd+0x49a>
 80007da:	1bdb      	subs	r3, r3, r7
 80007dc:	1c58      	adds	r0, r3, #1
 80007de:	281f      	cmp	r0, #31
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x350>
 80007e2:	e1ac      	b.n	8000b3e <__aeabi_dadd+0x6aa>
 80007e4:	0015      	movs	r5, r2
 80007e6:	3b1f      	subs	r3, #31
 80007e8:	40dd      	lsrs	r5, r3
 80007ea:	2820      	cmp	r0, #32
 80007ec:	d005      	beq.n	80007fa <__aeabi_dadd+0x366>
 80007ee:	2340      	movs	r3, #64	@ 0x40
 80007f0:	1a1b      	subs	r3, r3, r0
 80007f2:	409a      	lsls	r2, r3
 80007f4:	1e53      	subs	r3, r2, #1
 80007f6:	419a      	sbcs	r2, r3
 80007f8:	4315      	orrs	r5, r2
 80007fa:	2307      	movs	r3, #7
 80007fc:	2700      	movs	r7, #0
 80007fe:	402b      	ands	r3, r5
 8000800:	e7b0      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000802:	08ed      	lsrs	r5, r5, #3
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <__aeabi_dadd+0x388>)
 8000806:	0762      	lsls	r2, r4, #29
 8000808:	432a      	orrs	r2, r5
 800080a:	08e4      	lsrs	r4, r4, #3
 800080c:	429f      	cmp	r7, r3
 800080e:	d00f      	beq.n	8000830 <__aeabi_dadd+0x39c>
 8000810:	0324      	lsls	r4, r4, #12
 8000812:	0b25      	lsrs	r5, r4, #12
 8000814:	057c      	lsls	r4, r7, #21
 8000816:	0d64      	lsrs	r4, r4, #21
 8000818:	e6d4      	b.n	80005c4 <__aeabi_dadd+0x130>
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	08c0      	lsrs	r0, r0, #3
 800082a:	0762      	lsls	r2, r4, #29
 800082c:	4302      	orrs	r2, r0
 800082e:	08e4      	lsrs	r4, r4, #3
 8000830:	0013      	movs	r3, r2
 8000832:	4323      	orrs	r3, r4
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x3a4>
 8000836:	e186      	b.n	8000b46 <__aeabi_dadd+0x6b2>
 8000838:	2580      	movs	r5, #128	@ 0x80
 800083a:	032d      	lsls	r5, r5, #12
 800083c:	4325      	orrs	r5, r4
 800083e:	032d      	lsls	r5, r5, #12
 8000840:	4cc3      	ldr	r4, [pc, #780]	@ (8000b50 <__aeabi_dadd+0x6bc>)
 8000842:	0b2d      	lsrs	r5, r5, #12
 8000844:	e6be      	b.n	80005c4 <__aeabi_dadd+0x130>
 8000846:	4660      	mov	r0, ip
 8000848:	4654      	mov	r4, sl
 800084a:	000e      	movs	r6, r1
 800084c:	0017      	movs	r7, r2
 800084e:	08c5      	lsrs	r5, r0, #3
 8000850:	e7d8      	b.n	8000804 <__aeabi_dadd+0x370>
 8000852:	4cc0      	ldr	r4, [pc, #768]	@ (8000b54 <__aeabi_dadd+0x6c0>)
 8000854:	1aff      	subs	r7, r7, r3
 8000856:	4014      	ands	r4, r2
 8000858:	e696      	b.n	8000588 <__aeabi_dadd+0xf4>
 800085a:	4abf      	ldr	r2, [pc, #764]	@ (8000b58 <__aeabi_dadd+0x6c4>)
 800085c:	1c79      	adds	r1, r7, #1
 800085e:	4211      	tst	r1, r2
 8000860:	d16b      	bne.n	800093a <__aeabi_dadd+0x4a6>
 8000862:	0022      	movs	r2, r4
 8000864:	4302      	orrs	r2, r0
 8000866:	2f00      	cmp	r7, #0
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x3d8>
 800086a:	e0db      	b.n	8000a24 <__aeabi_dadd+0x590>
 800086c:	2a00      	cmp	r2, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x3de>
 8000870:	e12d      	b.n	8000ace <__aeabi_dadd+0x63a>
 8000872:	4662      	mov	r2, ip
 8000874:	4653      	mov	r3, sl
 8000876:	431a      	orrs	r2, r3
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x3e8>
 800087a:	e0b6      	b.n	80009ea <__aeabi_dadd+0x556>
 800087c:	4663      	mov	r3, ip
 800087e:	18c5      	adds	r5, r0, r3
 8000880:	4285      	cmp	r5, r0
 8000882:	4180      	sbcs	r0, r0
 8000884:	4454      	add	r4, sl
 8000886:	4240      	negs	r0, r0
 8000888:	1824      	adds	r4, r4, r0
 800088a:	0223      	lsls	r3, r4, #8
 800088c:	d502      	bpl.n	8000894 <__aeabi_dadd+0x400>
 800088e:	000f      	movs	r7, r1
 8000890:	4bb0      	ldr	r3, [pc, #704]	@ (8000b54 <__aeabi_dadd+0x6c0>)
 8000892:	401c      	ands	r4, r3
 8000894:	003a      	movs	r2, r7
 8000896:	0028      	movs	r0, r5
 8000898:	e7d8      	b.n	800084c <__aeabi_dadd+0x3b8>
 800089a:	4662      	mov	r2, ip
 800089c:	1a85      	subs	r5, r0, r2
 800089e:	42a8      	cmp	r0, r5
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4653      	mov	r3, sl
 80008a4:	4252      	negs	r2, r2
 80008a6:	4691      	mov	r9, r2
 80008a8:	1ae3      	subs	r3, r4, r3
 80008aa:	001a      	movs	r2, r3
 80008ac:	464b      	mov	r3, r9
 80008ae:	1ad2      	subs	r2, r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	4691      	mov	r9, r2
 80008b4:	021a      	lsls	r2, r3, #8
 80008b6:	d454      	bmi.n	8000962 <__aeabi_dadd+0x4ce>
 80008b8:	464a      	mov	r2, r9
 80008ba:	464c      	mov	r4, r9
 80008bc:	432a      	orrs	r2, r5
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x42e>
 80008c0:	e640      	b.n	8000544 <__aeabi_dadd+0xb0>
 80008c2:	2600      	movs	r6, #0
 80008c4:	2400      	movs	r4, #0
 80008c6:	2500      	movs	r5, #0
 80008c8:	e67c      	b.n	80005c4 <__aeabi_dadd+0x130>
 80008ca:	4da1      	ldr	r5, [pc, #644]	@ (8000b50 <__aeabi_dadd+0x6bc>)
 80008cc:	45a9      	cmp	r9, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x43e>
 80008d0:	e090      	b.n	80009f4 <__aeabi_dadd+0x560>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2a38      	cmp	r2, #56	@ 0x38
 80008d6:	dd00      	ble.n	80008da <__aeabi_dadd+0x446>
 80008d8:	e6ab      	b.n	8000632 <__aeabi_dadd+0x19e>
 80008da:	2580      	movs	r5, #128	@ 0x80
 80008dc:	042d      	lsls	r5, r5, #16
 80008de:	432c      	orrs	r4, r5
 80008e0:	e695      	b.n	800060e <__aeabi_dadd+0x17a>
 80008e2:	0011      	movs	r1, r2
 80008e4:	4655      	mov	r5, sl
 80008e6:	3920      	subs	r1, #32
 80008e8:	40cd      	lsrs	r5, r1
 80008ea:	46a9      	mov	r9, r5
 80008ec:	2a20      	cmp	r2, #32
 80008ee:	d006      	beq.n	80008fe <__aeabi_dadd+0x46a>
 80008f0:	2140      	movs	r1, #64	@ 0x40
 80008f2:	4653      	mov	r3, sl
 80008f4:	1a8a      	subs	r2, r1, r2
 80008f6:	4093      	lsls	r3, r2
 80008f8:	4662      	mov	r2, ip
 80008fa:	431a      	orrs	r2, r3
 80008fc:	4694      	mov	ip, r2
 80008fe:	4665      	mov	r5, ip
 8000900:	1e6b      	subs	r3, r5, #1
 8000902:	419d      	sbcs	r5, r3
 8000904:	464b      	mov	r3, r9
 8000906:	431d      	orrs	r5, r3
 8000908:	e612      	b.n	8000530 <__aeabi_dadd+0x9c>
 800090a:	0021      	movs	r1, r4
 800090c:	4301      	orrs	r1, r0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x47e>
 8000910:	e0c4      	b.n	8000a9c <__aeabi_dadd+0x608>
 8000912:	1e51      	subs	r1, r2, #1
 8000914:	2a01      	cmp	r2, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x486>
 8000918:	e0fb      	b.n	8000b12 <__aeabi_dadd+0x67e>
 800091a:	4d8d      	ldr	r5, [pc, #564]	@ (8000b50 <__aeabi_dadd+0x6bc>)
 800091c:	42aa      	cmp	r2, r5
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x48e>
 8000920:	e0b5      	b.n	8000a8e <__aeabi_dadd+0x5fa>
 8000922:	2501      	movs	r5, #1
 8000924:	2938      	cmp	r1, #56	@ 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x496>
 8000928:	e741      	b.n	80007ae <__aeabi_dadd+0x31a>
 800092a:	000a      	movs	r2, r1
 800092c:	e72f      	b.n	800078e <__aeabi_dadd+0x2fa>
 800092e:	4c89      	ldr	r4, [pc, #548]	@ (8000b54 <__aeabi_dadd+0x6c0>)
 8000930:	1aff      	subs	r7, r7, r3
 8000932:	4014      	ands	r4, r2
 8000934:	0762      	lsls	r2, r4, #29
 8000936:	08e4      	lsrs	r4, r4, #3
 8000938:	e76a      	b.n	8000810 <__aeabi_dadd+0x37c>
 800093a:	4a85      	ldr	r2, [pc, #532]	@ (8000b50 <__aeabi_dadd+0x6bc>)
 800093c:	4291      	cmp	r1, r2
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x4ae>
 8000940:	e0e3      	b.n	8000b0a <__aeabi_dadd+0x676>
 8000942:	4663      	mov	r3, ip
 8000944:	18c2      	adds	r2, r0, r3
 8000946:	4282      	cmp	r2, r0
 8000948:	4180      	sbcs	r0, r0
 800094a:	0023      	movs	r3, r4
 800094c:	4240      	negs	r0, r0
 800094e:	4453      	add	r3, sl
 8000950:	181b      	adds	r3, r3, r0
 8000952:	07dd      	lsls	r5, r3, #31
 8000954:	085c      	lsrs	r4, r3, #1
 8000956:	2307      	movs	r3, #7
 8000958:	0852      	lsrs	r2, r2, #1
 800095a:	4315      	orrs	r5, r2
 800095c:	000f      	movs	r7, r1
 800095e:	402b      	ands	r3, r5
 8000960:	e700      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000962:	4663      	mov	r3, ip
 8000964:	1a1d      	subs	r5, r3, r0
 8000966:	45ac      	cmp	ip, r5
 8000968:	4192      	sbcs	r2, r2
 800096a:	4653      	mov	r3, sl
 800096c:	4252      	negs	r2, r2
 800096e:	1b1c      	subs	r4, r3, r4
 8000970:	000e      	movs	r6, r1
 8000972:	4688      	mov	r8, r1
 8000974:	1aa4      	subs	r4, r4, r2
 8000976:	e5e5      	b.n	8000544 <__aeabi_dadd+0xb0>
 8000978:	2d00      	cmp	r5, #0
 800097a:	d000      	beq.n	800097e <__aeabi_dadd+0x4ea>
 800097c:	e091      	b.n	8000aa2 <__aeabi_dadd+0x60e>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d138      	bne.n	80009f4 <__aeabi_dadd+0x560>
 8000982:	2480      	movs	r4, #128	@ 0x80
 8000984:	2600      	movs	r6, #0
 8000986:	0324      	lsls	r4, r4, #12
 8000988:	e756      	b.n	8000838 <__aeabi_dadd+0x3a4>
 800098a:	4663      	mov	r3, ip
 800098c:	18c5      	adds	r5, r0, r3
 800098e:	4285      	cmp	r5, r0
 8000990:	4180      	sbcs	r0, r0
 8000992:	4454      	add	r4, sl
 8000994:	4240      	negs	r0, r0
 8000996:	1824      	adds	r4, r4, r0
 8000998:	2701      	movs	r7, #1
 800099a:	0223      	lsls	r3, r4, #8
 800099c:	d400      	bmi.n	80009a0 <__aeabi_dadd+0x50c>
 800099e:	e6df      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80009a0:	2702      	movs	r7, #2
 80009a2:	e687      	b.n	80006b4 <__aeabi_dadd+0x220>
 80009a4:	4663      	mov	r3, ip
 80009a6:	1ac5      	subs	r5, r0, r3
 80009a8:	42a8      	cmp	r0, r5
 80009aa:	4180      	sbcs	r0, r0
 80009ac:	4653      	mov	r3, sl
 80009ae:	4240      	negs	r0, r0
 80009b0:	1ae4      	subs	r4, r4, r3
 80009b2:	2701      	movs	r7, #1
 80009b4:	1a24      	subs	r4, r4, r0
 80009b6:	e5c0      	b.n	800053a <__aeabi_dadd+0xa6>
 80009b8:	0762      	lsls	r2, r4, #29
 80009ba:	08c0      	lsrs	r0, r0, #3
 80009bc:	4302      	orrs	r2, r0
 80009be:	08e4      	lsrs	r4, r4, #3
 80009c0:	e736      	b.n	8000830 <__aeabi_dadd+0x39c>
 80009c2:	0011      	movs	r1, r2
 80009c4:	4653      	mov	r3, sl
 80009c6:	3920      	subs	r1, #32
 80009c8:	40cb      	lsrs	r3, r1
 80009ca:	4699      	mov	r9, r3
 80009cc:	2a20      	cmp	r2, #32
 80009ce:	d006      	beq.n	80009de <__aeabi_dadd+0x54a>
 80009d0:	2140      	movs	r1, #64	@ 0x40
 80009d2:	4653      	mov	r3, sl
 80009d4:	1a8a      	subs	r2, r1, r2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	431a      	orrs	r2, r3
 80009dc:	4694      	mov	ip, r2
 80009de:	4665      	mov	r5, ip
 80009e0:	1e6b      	subs	r3, r5, #1
 80009e2:	419d      	sbcs	r5, r3
 80009e4:	464b      	mov	r3, r9
 80009e6:	431d      	orrs	r5, r3
 80009e8:	e659      	b.n	800069e <__aeabi_dadd+0x20a>
 80009ea:	0762      	lsls	r2, r4, #29
 80009ec:	08c0      	lsrs	r0, r0, #3
 80009ee:	4302      	orrs	r2, r0
 80009f0:	08e4      	lsrs	r4, r4, #3
 80009f2:	e70d      	b.n	8000810 <__aeabi_dadd+0x37c>
 80009f4:	4653      	mov	r3, sl
 80009f6:	075a      	lsls	r2, r3, #29
 80009f8:	4663      	mov	r3, ip
 80009fa:	08d8      	lsrs	r0, r3, #3
 80009fc:	4653      	mov	r3, sl
 80009fe:	000e      	movs	r6, r1
 8000a00:	4302      	orrs	r2, r0
 8000a02:	08dc      	lsrs	r4, r3, #3
 8000a04:	e714      	b.n	8000830 <__aeabi_dadd+0x39c>
 8000a06:	0015      	movs	r5, r2
 8000a08:	0026      	movs	r6, r4
 8000a0a:	3d20      	subs	r5, #32
 8000a0c:	40ee      	lsrs	r6, r5
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d003      	beq.n	8000a1a <__aeabi_dadd+0x586>
 8000a12:	2540      	movs	r5, #64	@ 0x40
 8000a14:	1aaa      	subs	r2, r5, r2
 8000a16:	4094      	lsls	r4, r2
 8000a18:	4320      	orrs	r0, r4
 8000a1a:	1e42      	subs	r2, r0, #1
 8000a1c:	4190      	sbcs	r0, r2
 8000a1e:	0005      	movs	r5, r0
 8000a20:	4335      	orrs	r5, r6
 8000a22:	e606      	b.n	8000632 <__aeabi_dadd+0x19e>
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d07c      	beq.n	8000b22 <__aeabi_dadd+0x68e>
 8000a28:	4662      	mov	r2, ip
 8000a2a:	4653      	mov	r3, sl
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x5a0>
 8000a32:	e6fa      	b.n	800082a <__aeabi_dadd+0x396>
 8000a34:	0762      	lsls	r2, r4, #29
 8000a36:	4310      	orrs	r0, r2
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	08e4      	lsrs	r4, r4, #3
 8000a3c:	0312      	lsls	r2, r2, #12
 8000a3e:	4214      	tst	r4, r2
 8000a40:	d008      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000a42:	08d9      	lsrs	r1, r3, #3
 8000a44:	4211      	tst	r1, r2
 8000a46:	d105      	bne.n	8000a54 <__aeabi_dadd+0x5c0>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	08d8      	lsrs	r0, r3, #3
 8000a4c:	4653      	mov	r3, sl
 8000a4e:	000c      	movs	r4, r1
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	4318      	orrs	r0, r3
 8000a54:	0f42      	lsrs	r2, r0, #29
 8000a56:	00c0      	lsls	r0, r0, #3
 8000a58:	08c0      	lsrs	r0, r0, #3
 8000a5a:	0752      	lsls	r2, r2, #29
 8000a5c:	4302      	orrs	r2, r0
 8000a5e:	e6e7      	b.n	8000830 <__aeabi_dadd+0x39c>
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x5d2>
 8000a64:	e72d      	b.n	80008c2 <__aeabi_dadd+0x42e>
 8000a66:	4663      	mov	r3, ip
 8000a68:	08d8      	lsrs	r0, r3, #3
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	075a      	lsls	r2, r3, #29
 8000a6e:	000e      	movs	r6, r1
 8000a70:	4302      	orrs	r2, r0
 8000a72:	08dc      	lsrs	r4, r3, #3
 8000a74:	e6cc      	b.n	8000810 <__aeabi_dadd+0x37c>
 8000a76:	4663      	mov	r3, ip
 8000a78:	1a1d      	subs	r5, r3, r0
 8000a7a:	45ac      	cmp	ip, r5
 8000a7c:	4192      	sbcs	r2, r2
 8000a7e:	4653      	mov	r3, sl
 8000a80:	4252      	negs	r2, r2
 8000a82:	1b1c      	subs	r4, r3, r4
 8000a84:	000e      	movs	r6, r1
 8000a86:	4688      	mov	r8, r1
 8000a88:	1aa4      	subs	r4, r4, r2
 8000a8a:	3701      	adds	r7, #1
 8000a8c:	e555      	b.n	800053a <__aeabi_dadd+0xa6>
 8000a8e:	4663      	mov	r3, ip
 8000a90:	08d9      	lsrs	r1, r3, #3
 8000a92:	4653      	mov	r3, sl
 8000a94:	075a      	lsls	r2, r3, #29
 8000a96:	430a      	orrs	r2, r1
 8000a98:	08dc      	lsrs	r4, r3, #3
 8000a9a:	e6c9      	b.n	8000830 <__aeabi_dadd+0x39c>
 8000a9c:	4660      	mov	r0, ip
 8000a9e:	4654      	mov	r4, sl
 8000aa0:	e6d4      	b.n	800084c <__aeabi_dadd+0x3b8>
 8000aa2:	08c0      	lsrs	r0, r0, #3
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x616>
 8000aa8:	e6bf      	b.n	800082a <__aeabi_dadd+0x396>
 8000aaa:	0762      	lsls	r2, r4, #29
 8000aac:	4310      	orrs	r0, r2
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	08e4      	lsrs	r4, r4, #3
 8000ab2:	0312      	lsls	r2, r2, #12
 8000ab4:	4214      	tst	r4, r2
 8000ab6:	d0cd      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab8:	08dd      	lsrs	r5, r3, #3
 8000aba:	4215      	tst	r5, r2
 8000abc:	d1ca      	bne.n	8000a54 <__aeabi_dadd+0x5c0>
 8000abe:	4663      	mov	r3, ip
 8000ac0:	08d8      	lsrs	r0, r3, #3
 8000ac2:	4653      	mov	r3, sl
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	000e      	movs	r6, r1
 8000ac8:	002c      	movs	r4, r5
 8000aca:	4318      	orrs	r0, r3
 8000acc:	e7c2      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	08d9      	lsrs	r1, r3, #3
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	08dc      	lsrs	r4, r3, #3
 8000ada:	e699      	b.n	8000810 <__aeabi_dadd+0x37c>
 8000adc:	4663      	mov	r3, ip
 8000ade:	08d8      	lsrs	r0, r3, #3
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	075a      	lsls	r2, r3, #29
 8000ae4:	000e      	movs	r6, r1
 8000ae6:	4302      	orrs	r2, r0
 8000ae8:	08dc      	lsrs	r4, r3, #3
 8000aea:	e6a1      	b.n	8000830 <__aeabi_dadd+0x39c>
 8000aec:	0011      	movs	r1, r2
 8000aee:	0027      	movs	r7, r4
 8000af0:	3920      	subs	r1, #32
 8000af2:	40cf      	lsrs	r7, r1
 8000af4:	2a20      	cmp	r2, #32
 8000af6:	d003      	beq.n	8000b00 <__aeabi_dadd+0x66c>
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	1a8a      	subs	r2, r1, r2
 8000afc:	4094      	lsls	r4, r2
 8000afe:	4320      	orrs	r0, r4
 8000b00:	1e42      	subs	r2, r0, #1
 8000b02:	4190      	sbcs	r0, r2
 8000b04:	0005      	movs	r5, r0
 8000b06:	433d      	orrs	r5, r7
 8000b08:	e651      	b.n	80007ae <__aeabi_dadd+0x31a>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	e558      	b.n	80005c4 <__aeabi_dadd+0x130>
 8000b12:	4460      	add	r0, ip
 8000b14:	4560      	cmp	r0, ip
 8000b16:	4192      	sbcs	r2, r2
 8000b18:	4454      	add	r4, sl
 8000b1a:	4252      	negs	r2, r2
 8000b1c:	0005      	movs	r5, r0
 8000b1e:	18a4      	adds	r4, r4, r2
 8000b20:	e73a      	b.n	8000998 <__aeabi_dadd+0x504>
 8000b22:	4653      	mov	r3, sl
 8000b24:	075a      	lsls	r2, r3, #29
 8000b26:	4663      	mov	r3, ip
 8000b28:	08d9      	lsrs	r1, r3, #3
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	08dc      	lsrs	r4, r3, #3
 8000b30:	e67e      	b.n	8000830 <__aeabi_dadd+0x39c>
 8000b32:	001a      	movs	r2, r3
 8000b34:	001c      	movs	r4, r3
 8000b36:	432a      	orrs	r2, r5
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dadd+0x6a8>
 8000b3a:	e6ab      	b.n	8000894 <__aeabi_dadd+0x400>
 8000b3c:	e6c1      	b.n	80008c2 <__aeabi_dadd+0x42e>
 8000b3e:	2120      	movs	r1, #32
 8000b40:	2500      	movs	r5, #0
 8000b42:	1a09      	subs	r1, r1, r0
 8000b44:	e519      	b.n	800057a <__aeabi_dadd+0xe6>
 8000b46:	2200      	movs	r2, #0
 8000b48:	2500      	movs	r5, #0
 8000b4a:	4c01      	ldr	r4, [pc, #4]	@ (8000b50 <__aeabi_dadd+0x6bc>)
 8000b4c:	e53a      	b.n	80005c4 <__aeabi_dadd+0x130>
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	000007ff 	.word	0x000007ff
 8000b54:	ff7fffff 	.word	0xff7fffff
 8000b58:	000007fe 	.word	0x000007fe

08000b5c <__aeabi_ddiv>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	46de      	mov	lr, fp
 8000b60:	4645      	mov	r5, r8
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	b5e0      	push	{r5, r6, r7, lr}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	9200      	str	r2, [sp, #0]
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	030b      	lsls	r3, r1, #12
 8000b70:	0b1b      	lsrs	r3, r3, #12
 8000b72:	469b      	mov	fp, r3
 8000b74:	0fca      	lsrs	r2, r1, #31
 8000b76:	004b      	lsls	r3, r1, #1
 8000b78:	0004      	movs	r4, r0
 8000b7a:	4680      	mov	r8, r0
 8000b7c:	0d5b      	lsrs	r3, r3, #21
 8000b7e:	9202      	str	r2, [sp, #8]
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x28>
 8000b82:	e16a      	b.n	8000e5a <__aeabi_ddiv+0x2fe>
 8000b84:	4ad4      	ldr	r2, [pc, #848]	@ (8000ed8 <__aeabi_ddiv+0x37c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d100      	bne.n	8000b8c <__aeabi_ddiv+0x30>
 8000b8a:	e18c      	b.n	8000ea6 <__aeabi_ddiv+0x34a>
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	0f42      	lsrs	r2, r0, #29
 8000b90:	00c9      	lsls	r1, r1, #3
 8000b92:	430a      	orrs	r2, r1
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	0409      	lsls	r1, r1, #16
 8000b98:	4311      	orrs	r1, r2
 8000b9a:	00c2      	lsls	r2, r0, #3
 8000b9c:	4690      	mov	r8, r2
 8000b9e:	4acf      	ldr	r2, [pc, #828]	@ (8000edc <__aeabi_ddiv+0x380>)
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	4692      	mov	sl, r2
 8000ba4:	449a      	add	sl, r3
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2400      	movs	r4, #0
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	9e00      	ldr	r6, [sp, #0]
 8000bae:	9f01      	ldr	r7, [sp, #4]
 8000bb0:	033b      	lsls	r3, r7, #12
 8000bb2:	0b1b      	lsrs	r3, r3, #12
 8000bb4:	469b      	mov	fp, r3
 8000bb6:	007b      	lsls	r3, r7, #1
 8000bb8:	0030      	movs	r0, r6
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	0ffd      	lsrs	r5, r7, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x68>
 8000bc2:	e128      	b.n	8000e16 <__aeabi_ddiv+0x2ba>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	@ (8000ed8 <__aeabi_ddiv+0x37c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x70>
 8000bca:	e177      	b.n	8000ebc <__aeabi_ddiv+0x360>
 8000bcc:	4659      	mov	r1, fp
 8000bce:	0f72      	lsrs	r2, r6, #29
 8000bd0:	00c9      	lsls	r1, r1, #3
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	0409      	lsls	r1, r1, #16
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	468b      	mov	fp, r1
 8000bdc:	49bf      	ldr	r1, [pc, #764]	@ (8000edc <__aeabi_ddiv+0x380>)
 8000bde:	00f2      	lsls	r2, r6, #3
 8000be0:	468c      	mov	ip, r1
 8000be2:	4651      	mov	r1, sl
 8000be4:	4463      	add	r3, ip
 8000be6:	1acb      	subs	r3, r1, r3
 8000be8:	469a      	mov	sl, r3
 8000bea:	2300      	movs	r3, #0
 8000bec:	9e02      	ldr	r6, [sp, #8]
 8000bee:	406e      	eors	r6, r5
 8000bf0:	2c0f      	cmp	r4, #15
 8000bf2:	d827      	bhi.n	8000c44 <__aeabi_ddiv+0xe8>
 8000bf4:	49ba      	ldr	r1, [pc, #744]	@ (8000ee0 <__aeabi_ddiv+0x384>)
 8000bf6:	00a4      	lsls	r4, r4, #2
 8000bf8:	5909      	ldr	r1, [r1, r4]
 8000bfa:	468f      	mov	pc, r1
 8000bfc:	46cb      	mov	fp, r9
 8000bfe:	4642      	mov	r2, r8
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	9b03      	ldr	r3, [sp, #12]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d016      	beq.n	8000c36 <__aeabi_ddiv+0xda>
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_ddiv+0xb2>
 8000c0c:	e2a6      	b.n	800115c <__aeabi_ddiv+0x600>
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d000      	beq.n	8000c14 <__aeabi_ddiv+0xb8>
 8000c12:	e0df      	b.n	8000dd4 <__aeabi_ddiv+0x278>
 8000c14:	2200      	movs	r2, #0
 8000c16:	2300      	movs	r3, #0
 8000c18:	2400      	movs	r4, #0
 8000c1a:	4690      	mov	r8, r2
 8000c1c:	051b      	lsls	r3, r3, #20
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	07f6      	lsls	r6, r6, #31
 8000c22:	4333      	orrs	r3, r6
 8000c24:	4640      	mov	r0, r8
 8000c26:	0019      	movs	r1, r3
 8000c28:	b007      	add	sp, #28
 8000c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2c:	46bb      	mov	fp, r7
 8000c2e:	46b2      	mov	sl, r6
 8000c30:	46a9      	mov	r9, r5
 8000c32:	46a0      	mov	r8, r4
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2200      	movs	r2, #0
 8000c38:	2400      	movs	r4, #0
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	4ba6      	ldr	r3, [pc, #664]	@ (8000ed8 <__aeabi_ddiv+0x37c>)
 8000c3e:	e7ed      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000c40:	002e      	movs	r6, r5
 8000c42:	e7df      	b.n	8000c04 <__aeabi_ddiv+0xa8>
 8000c44:	45cb      	cmp	fp, r9
 8000c46:	d200      	bcs.n	8000c4a <__aeabi_ddiv+0xee>
 8000c48:	e1d4      	b.n	8000ff4 <__aeabi_ddiv+0x498>
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xf2>
 8000c4c:	e1cf      	b.n	8000fee <__aeabi_ddiv+0x492>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	469c      	mov	ip, r3
 8000c54:	4644      	mov	r4, r8
 8000c56:	4648      	mov	r0, r9
 8000c58:	2700      	movs	r7, #0
 8000c5a:	44e2      	add	sl, ip
 8000c5c:	465b      	mov	r3, fp
 8000c5e:	0e15      	lsrs	r5, r2, #24
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	431d      	orrs	r5, r3
 8000c64:	0c19      	lsrs	r1, r3, #16
 8000c66:	042b      	lsls	r3, r5, #16
 8000c68:	0212      	lsls	r2, r2, #8
 8000c6a:	9500      	str	r5, [sp, #0]
 8000c6c:	0c1d      	lsrs	r5, r3, #16
 8000c6e:	4691      	mov	r9, r2
 8000c70:	9102      	str	r1, [sp, #8]
 8000c72:	9503      	str	r5, [sp, #12]
 8000c74:	f7ff fae0 	bl	8000238 <__aeabi_uidivmod>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	436a      	muls	r2, r5
 8000c7c:	040b      	lsls	r3, r1, #16
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	4680      	mov	r8, r0
 8000c82:	4319      	orrs	r1, r3
 8000c84:	428a      	cmp	r2, r1
 8000c86:	d909      	bls.n	8000c9c <__aeabi_ddiv+0x140>
 8000c88:	9d00      	ldr	r5, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	46ac      	mov	ip, r5
 8000c8e:	425b      	negs	r3, r3
 8000c90:	4461      	add	r1, ip
 8000c92:	469c      	mov	ip, r3
 8000c94:	44e0      	add	r8, ip
 8000c96:	428d      	cmp	r5, r1
 8000c98:	d800      	bhi.n	8000c9c <__aeabi_ddiv+0x140>
 8000c9a:	e1fb      	b.n	8001094 <__aeabi_ddiv+0x538>
 8000c9c:	1a88      	subs	r0, r1, r2
 8000c9e:	9902      	ldr	r1, [sp, #8]
 8000ca0:	f7ff faca 	bl	8000238 <__aeabi_uidivmod>
 8000ca4:	9a03      	ldr	r2, [sp, #12]
 8000ca6:	0424      	lsls	r4, r4, #16
 8000ca8:	4342      	muls	r2, r0
 8000caa:	0409      	lsls	r1, r1, #16
 8000cac:	0c24      	lsrs	r4, r4, #16
 8000cae:	0003      	movs	r3, r0
 8000cb0:	430c      	orrs	r4, r1
 8000cb2:	42a2      	cmp	r2, r4
 8000cb4:	d906      	bls.n	8000cc4 <__aeabi_ddiv+0x168>
 8000cb6:	9900      	ldr	r1, [sp, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	468c      	mov	ip, r1
 8000cbc:	4464      	add	r4, ip
 8000cbe:	42a1      	cmp	r1, r4
 8000cc0:	d800      	bhi.n	8000cc4 <__aeabi_ddiv+0x168>
 8000cc2:	e1e1      	b.n	8001088 <__aeabi_ddiv+0x52c>
 8000cc4:	1aa0      	subs	r0, r4, r2
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	0412      	lsls	r2, r2, #16
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	4693      	mov	fp, r2
 8000cce:	464b      	mov	r3, r9
 8000cd0:	4659      	mov	r1, fp
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	001d      	movs	r5, r3
 8000cd6:	9304      	str	r3, [sp, #16]
 8000cd8:	040b      	lsls	r3, r1, #16
 8000cda:	4649      	mov	r1, r9
 8000cdc:	0409      	lsls	r1, r1, #16
 8000cde:	0c09      	lsrs	r1, r1, #16
 8000ce0:	000c      	movs	r4, r1
 8000ce2:	0c1b      	lsrs	r3, r3, #16
 8000ce4:	435c      	muls	r4, r3
 8000ce6:	0c12      	lsrs	r2, r2, #16
 8000ce8:	436b      	muls	r3, r5
 8000cea:	4688      	mov	r8, r1
 8000cec:	4351      	muls	r1, r2
 8000cee:	436a      	muls	r2, r5
 8000cf0:	0c25      	lsrs	r5, r4, #16
 8000cf2:	46ac      	mov	ip, r5
 8000cf4:	185b      	adds	r3, r3, r1
 8000cf6:	4463      	add	r3, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d903      	bls.n	8000d04 <__aeabi_ddiv+0x1a8>
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	0249      	lsls	r1, r1, #9
 8000d00:	468c      	mov	ip, r1
 8000d02:	4462      	add	r2, ip
 8000d04:	0c19      	lsrs	r1, r3, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	0c24      	lsrs	r4, r4, #16
 8000d0c:	188a      	adds	r2, r1, r2
 8000d0e:	191c      	adds	r4, r3, r4
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d302      	bcc.n	8000d1a <__aeabi_ddiv+0x1be>
 8000d14:	d116      	bne.n	8000d44 <__aeabi_ddiv+0x1e8>
 8000d16:	42a7      	cmp	r7, r4
 8000d18:	d214      	bcs.n	8000d44 <__aeabi_ddiv+0x1e8>
 8000d1a:	465b      	mov	r3, fp
 8000d1c:	9d00      	ldr	r5, [sp, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	444f      	add	r7, r9
 8000d22:	9305      	str	r3, [sp, #20]
 8000d24:	454f      	cmp	r7, r9
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	46ac      	mov	ip, r5
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	4463      	add	r3, ip
 8000d2e:	18c0      	adds	r0, r0, r3
 8000d30:	4285      	cmp	r5, r0
 8000d32:	d300      	bcc.n	8000d36 <__aeabi_ddiv+0x1da>
 8000d34:	e1a1      	b.n	800107a <__aeabi_ddiv+0x51e>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	d900      	bls.n	8000d3c <__aeabi_ddiv+0x1e0>
 8000d3a:	e1f6      	b.n	800112a <__aeabi_ddiv+0x5ce>
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1e4>
 8000d3e:	e1f1      	b.n	8001124 <__aeabi_ddiv+0x5c8>
 8000d40:	9b05      	ldr	r3, [sp, #20]
 8000d42:	469b      	mov	fp, r3
 8000d44:	1b3c      	subs	r4, r7, r4
 8000d46:	42a7      	cmp	r7, r4
 8000d48:	41bf      	sbcs	r7, r7
 8000d4a:	9d00      	ldr	r5, [sp, #0]
 8000d4c:	1a80      	subs	r0, r0, r2
 8000d4e:	427f      	negs	r7, r7
 8000d50:	1bc0      	subs	r0, r0, r7
 8000d52:	4285      	cmp	r5, r0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x1fc>
 8000d56:	e1d0      	b.n	80010fa <__aeabi_ddiv+0x59e>
 8000d58:	9902      	ldr	r1, [sp, #8]
 8000d5a:	f7ff fa6d 	bl	8000238 <__aeabi_uidivmod>
 8000d5e:	9a03      	ldr	r2, [sp, #12]
 8000d60:	040b      	lsls	r3, r1, #16
 8000d62:	4342      	muls	r2, r0
 8000d64:	0c21      	lsrs	r1, r4, #16
 8000d66:	0007      	movs	r7, r0
 8000d68:	4319      	orrs	r1, r3
 8000d6a:	428a      	cmp	r2, r1
 8000d6c:	d900      	bls.n	8000d70 <__aeabi_ddiv+0x214>
 8000d6e:	e178      	b.n	8001062 <__aeabi_ddiv+0x506>
 8000d70:	1a88      	subs	r0, r1, r2
 8000d72:	9902      	ldr	r1, [sp, #8]
 8000d74:	f7ff fa60 	bl	8000238 <__aeabi_uidivmod>
 8000d78:	9a03      	ldr	r2, [sp, #12]
 8000d7a:	0424      	lsls	r4, r4, #16
 8000d7c:	4342      	muls	r2, r0
 8000d7e:	0409      	lsls	r1, r1, #16
 8000d80:	0c24      	lsrs	r4, r4, #16
 8000d82:	0003      	movs	r3, r0
 8000d84:	430c      	orrs	r4, r1
 8000d86:	42a2      	cmp	r2, r4
 8000d88:	d900      	bls.n	8000d8c <__aeabi_ddiv+0x230>
 8000d8a:	e15d      	b.n	8001048 <__aeabi_ddiv+0x4ec>
 8000d8c:	4641      	mov	r1, r8
 8000d8e:	1aa4      	subs	r4, r4, r2
 8000d90:	043a      	lsls	r2, r7, #16
 8000d92:	431a      	orrs	r2, r3
 8000d94:	9d04      	ldr	r5, [sp, #16]
 8000d96:	0413      	lsls	r3, r2, #16
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	4359      	muls	r1, r3
 8000d9c:	4647      	mov	r7, r8
 8000d9e:	436b      	muls	r3, r5
 8000da0:	469c      	mov	ip, r3
 8000da2:	0c10      	lsrs	r0, r2, #16
 8000da4:	4347      	muls	r7, r0
 8000da6:	0c0b      	lsrs	r3, r1, #16
 8000da8:	44bc      	add	ip, r7
 8000daa:	4463      	add	r3, ip
 8000dac:	4368      	muls	r0, r5
 8000dae:	429f      	cmp	r7, r3
 8000db0:	d903      	bls.n	8000dba <__aeabi_ddiv+0x25e>
 8000db2:	2580      	movs	r5, #128	@ 0x80
 8000db4:	026d      	lsls	r5, r5, #9
 8000db6:	46ac      	mov	ip, r5
 8000db8:	4460      	add	r0, ip
 8000dba:	0c1f      	lsrs	r7, r3, #16
 8000dbc:	0409      	lsls	r1, r1, #16
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	0c09      	lsrs	r1, r1, #16
 8000dc2:	183f      	adds	r7, r7, r0
 8000dc4:	185b      	adds	r3, r3, r1
 8000dc6:	42bc      	cmp	r4, r7
 8000dc8:	d200      	bcs.n	8000dcc <__aeabi_ddiv+0x270>
 8000dca:	e102      	b.n	8000fd2 <__aeabi_ddiv+0x476>
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x274>
 8000dce:	e0fd      	b.n	8000fcc <__aeabi_ddiv+0x470>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <__aeabi_ddiv+0x388>)
 8000dd6:	4453      	add	r3, sl
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dc00      	bgt.n	8000dde <__aeabi_ddiv+0x282>
 8000ddc:	e0ae      	b.n	8000f3c <__aeabi_ddiv+0x3e0>
 8000dde:	0751      	lsls	r1, r2, #29
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0x288>
 8000de2:	e198      	b.n	8001116 <__aeabi_ddiv+0x5ba>
 8000de4:	4659      	mov	r1, fp
 8000de6:	01c9      	lsls	r1, r1, #7
 8000de8:	d506      	bpl.n	8000df8 <__aeabi_ddiv+0x29c>
 8000dea:	4659      	mov	r1, fp
 8000dec:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee8 <__aeabi_ddiv+0x38c>)
 8000dee:	4019      	ands	r1, r3
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	468b      	mov	fp, r1
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4453      	add	r3, sl
 8000df8:	493c      	ldr	r1, [pc, #240]	@ (8000eec <__aeabi_ddiv+0x390>)
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_ddiv+0x2a4>
 8000dfe:	e71a      	b.n	8000c36 <__aeabi_ddiv+0xda>
 8000e00:	4659      	mov	r1, fp
 8000e02:	08d2      	lsrs	r2, r2, #3
 8000e04:	0749      	lsls	r1, r1, #29
 8000e06:	4311      	orrs	r1, r2
 8000e08:	465a      	mov	r2, fp
 8000e0a:	055b      	lsls	r3, r3, #21
 8000e0c:	0254      	lsls	r4, r2, #9
 8000e0e:	4688      	mov	r8, r1
 8000e10:	0b24      	lsrs	r4, r4, #12
 8000e12:	0d5b      	lsrs	r3, r3, #21
 8000e14:	e702      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000e16:	465a      	mov	r2, fp
 8000e18:	9b00      	ldr	r3, [sp, #0]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x2c4>
 8000e1e:	e07e      	b.n	8000f1e <__aeabi_ddiv+0x3c2>
 8000e20:	465b      	mov	r3, fp
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x2cc>
 8000e26:	e100      	b.n	800102a <__aeabi_ddiv+0x4ce>
 8000e28:	4658      	mov	r0, fp
 8000e2a:	f001 f9cb 	bl	80021c4 <__clzsi2>
 8000e2e:	0002      	movs	r2, r0
 8000e30:	0003      	movs	r3, r0
 8000e32:	3a0b      	subs	r2, #11
 8000e34:	271d      	movs	r7, #29
 8000e36:	9e00      	ldr	r6, [sp, #0]
 8000e38:	1aba      	subs	r2, r7, r2
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	40d6      	lsrs	r6, r2
 8000e40:	3908      	subs	r1, #8
 8000e42:	4088      	lsls	r0, r1
 8000e44:	0032      	movs	r2, r6
 8000e46:	4302      	orrs	r2, r0
 8000e48:	4693      	mov	fp, r2
 8000e4a:	9a00      	ldr	r2, [sp, #0]
 8000e4c:	408a      	lsls	r2, r1
 8000e4e:	4928      	ldr	r1, [pc, #160]	@ (8000ef0 <__aeabi_ddiv+0x394>)
 8000e50:	4453      	add	r3, sl
 8000e52:	468a      	mov	sl, r1
 8000e54:	449a      	add	sl, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	e6c8      	b.n	8000bec <__aeabi_ddiv+0x90>
 8000e5a:	465b      	mov	r3, fp
 8000e5c:	4303      	orrs	r3, r0
 8000e5e:	4699      	mov	r9, r3
 8000e60:	d056      	beq.n	8000f10 <__aeabi_ddiv+0x3b4>
 8000e62:	465b      	mov	r3, fp
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_ddiv+0x30e>
 8000e68:	e0cd      	b.n	8001006 <__aeabi_ddiv+0x4aa>
 8000e6a:	4658      	mov	r0, fp
 8000e6c:	f001 f9aa 	bl	80021c4 <__clzsi2>
 8000e70:	230b      	movs	r3, #11
 8000e72:	425b      	negs	r3, r3
 8000e74:	469c      	mov	ip, r3
 8000e76:	0002      	movs	r2, r0
 8000e78:	4484      	add	ip, r0
 8000e7a:	4666      	mov	r6, ip
 8000e7c:	231d      	movs	r3, #29
 8000e7e:	1b9b      	subs	r3, r3, r6
 8000e80:	0026      	movs	r6, r4
 8000e82:	0011      	movs	r1, r2
 8000e84:	4658      	mov	r0, fp
 8000e86:	40de      	lsrs	r6, r3
 8000e88:	3908      	subs	r1, #8
 8000e8a:	4088      	lsls	r0, r1
 8000e8c:	0033      	movs	r3, r6
 8000e8e:	4303      	orrs	r3, r0
 8000e90:	4699      	mov	r9, r3
 8000e92:	0023      	movs	r3, r4
 8000e94:	408b      	lsls	r3, r1
 8000e96:	4698      	mov	r8, r3
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <__aeabi_ddiv+0x398>)
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	469a      	mov	sl, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9303      	str	r3, [sp, #12]
 8000ea4:	e682      	b.n	8000bac <__aeabi_ddiv+0x50>
 8000ea6:	465a      	mov	r2, fp
 8000ea8:	4302      	orrs	r2, r0
 8000eaa:	4691      	mov	r9, r2
 8000eac:	d12a      	bne.n	8000f04 <__aeabi_ddiv+0x3a8>
 8000eae:	2200      	movs	r2, #0
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2408      	movs	r4, #8
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e677      	b.n	8000bac <__aeabi_ddiv+0x50>
 8000ebc:	465a      	mov	r2, fp
 8000ebe:	9b00      	ldr	r3, [sp, #0]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <__aeabi_ddiv+0x39c>)
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	44e2      	add	sl, ip
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d117      	bne.n	8000efc <__aeabi_ddiv+0x3a0>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	469b      	mov	fp, r3
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	e689      	b.n	8000bec <__aeabi_ddiv+0x90>
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	080071e4 	.word	0x080071e4
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	2303      	movs	r3, #3
 8000efe:	0032      	movs	r2, r6
 8000f00:	431c      	orrs	r4, r3
 8000f02:	e673      	b.n	8000bec <__aeabi_ddiv+0x90>
 8000f04:	469a      	mov	sl, r3
 8000f06:	2303      	movs	r3, #3
 8000f08:	46d9      	mov	r9, fp
 8000f0a:	240c      	movs	r4, #12
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	e64d      	b.n	8000bac <__aeabi_ddiv+0x50>
 8000f10:	2300      	movs	r3, #0
 8000f12:	4698      	mov	r8, r3
 8000f14:	469a      	mov	sl, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	2404      	movs	r4, #4
 8000f1a:	9303      	str	r3, [sp, #12]
 8000f1c:	e646      	b.n	8000bac <__aeabi_ddiv+0x50>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	431c      	orrs	r4, r3
 8000f22:	2300      	movs	r3, #0
 8000f24:	469b      	mov	fp, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	e660      	b.n	8000bec <__aeabi_ddiv+0x90>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2480      	movs	r4, #128	@ 0x80
 8000f2e:	4698      	mov	r8, r3
 8000f30:	2600      	movs	r6, #0
 8000f32:	4b92      	ldr	r3, [pc, #584]	@ (800117c <__aeabi_ddiv+0x620>)
 8000f34:	0324      	lsls	r4, r4, #12
 8000f36:	e671      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4252      	negs	r2, r2
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	2938      	cmp	r1, #56	@ 0x38
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_ddiv+0x3ea>
 8000f44:	e666      	b.n	8000c14 <__aeabi_ddiv+0xb8>
 8000f46:	291f      	cmp	r1, #31
 8000f48:	dc00      	bgt.n	8000f4c <__aeabi_ddiv+0x3f0>
 8000f4a:	e0ab      	b.n	80010a4 <__aeabi_ddiv+0x548>
 8000f4c:	201f      	movs	r0, #31
 8000f4e:	4240      	negs	r0, r0
 8000f50:	1ac3      	subs	r3, r0, r3
 8000f52:	4658      	mov	r0, fp
 8000f54:	40d8      	lsrs	r0, r3
 8000f56:	0003      	movs	r3, r0
 8000f58:	2920      	cmp	r1, #32
 8000f5a:	d004      	beq.n	8000f66 <__aeabi_ddiv+0x40a>
 8000f5c:	4658      	mov	r0, fp
 8000f5e:	4988      	ldr	r1, [pc, #544]	@ (8001180 <__aeabi_ddiv+0x624>)
 8000f60:	4451      	add	r1, sl
 8000f62:	4088      	lsls	r0, r1
 8000f64:	4302      	orrs	r2, r0
 8000f66:	1e51      	subs	r1, r2, #1
 8000f68:	418a      	sbcs	r2, r1
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	0019      	movs	r1, r3
 8000f70:	2400      	movs	r4, #0
 8000f72:	4011      	ands	r1, r2
 8000f74:	4213      	tst	r3, r2
 8000f76:	d00c      	beq.n	8000f92 <__aeabi_ddiv+0x436>
 8000f78:	230f      	movs	r3, #15
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x426>
 8000f80:	e0f9      	b.n	8001176 <__aeabi_ddiv+0x61a>
 8000f82:	1d11      	adds	r1, r2, #4
 8000f84:	4291      	cmp	r1, r2
 8000f86:	419b      	sbcs	r3, r3
 8000f88:	000a      	movs	r2, r1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	0759      	lsls	r1, r3, #29
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	0b1c      	lsrs	r4, r3, #12
 8000f92:	08d2      	lsrs	r2, r2, #3
 8000f94:	430a      	orrs	r2, r1
 8000f96:	4690      	mov	r8, r2
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e63f      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000f9c:	2480      	movs	r4, #128	@ 0x80
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	4223      	tst	r3, r4
 8000fa4:	d009      	beq.n	8000fba <__aeabi_ddiv+0x45e>
 8000fa6:	465b      	mov	r3, fp
 8000fa8:	4223      	tst	r3, r4
 8000faa:	d106      	bne.n	8000fba <__aeabi_ddiv+0x45e>
 8000fac:	431c      	orrs	r4, r3
 8000fae:	0324      	lsls	r4, r4, #12
 8000fb0:	002e      	movs	r6, r5
 8000fb2:	4690      	mov	r8, r2
 8000fb4:	4b71      	ldr	r3, [pc, #452]	@ (800117c <__aeabi_ddiv+0x620>)
 8000fb6:	0b24      	lsrs	r4, r4, #12
 8000fb8:	e630      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000fba:	2480      	movs	r4, #128	@ 0x80
 8000fbc:	464b      	mov	r3, r9
 8000fbe:	0324      	lsls	r4, r4, #12
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	9e02      	ldr	r6, [sp, #8]
 8000fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800117c <__aeabi_ddiv+0x620>)
 8000fc8:	0b24      	lsrs	r4, r4, #12
 8000fca:	e627      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x476>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x278>
 8000fd2:	9800      	ldr	r0, [sp, #0]
 8000fd4:	1e51      	subs	r1, r2, #1
 8000fd6:	4684      	mov	ip, r0
 8000fd8:	4464      	add	r4, ip
 8000fda:	4284      	cmp	r4, r0
 8000fdc:	d200      	bcs.n	8000fe0 <__aeabi_ddiv+0x484>
 8000fde:	e084      	b.n	80010ea <__aeabi_ddiv+0x58e>
 8000fe0:	42bc      	cmp	r4, r7
 8000fe2:	d200      	bcs.n	8000fe6 <__aeabi_ddiv+0x48a>
 8000fe4:	e0ae      	b.n	8001144 <__aeabi_ddiv+0x5e8>
 8000fe6:	d100      	bne.n	8000fea <__aeabi_ddiv+0x48e>
 8000fe8:	e0c1      	b.n	800116e <__aeabi_ddiv+0x612>
 8000fea:	000a      	movs	r2, r1
 8000fec:	e6f0      	b.n	8000dd0 <__aeabi_ddiv+0x274>
 8000fee:	4542      	cmp	r2, r8
 8000ff0:	d900      	bls.n	8000ff4 <__aeabi_ddiv+0x498>
 8000ff2:	e62c      	b.n	8000c4e <__aeabi_ddiv+0xf2>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	07dc      	lsls	r4, r3, #31
 8000ff8:	0858      	lsrs	r0, r3, #1
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	431c      	orrs	r4, r3
 8001000:	4643      	mov	r3, r8
 8001002:	07df      	lsls	r7, r3, #31
 8001004:	e62a      	b.n	8000c5c <__aeabi_ddiv+0x100>
 8001006:	f001 f8dd 	bl	80021c4 <__clzsi2>
 800100a:	2315      	movs	r3, #21
 800100c:	469c      	mov	ip, r3
 800100e:	4484      	add	ip, r0
 8001010:	0002      	movs	r2, r0
 8001012:	4663      	mov	r3, ip
 8001014:	3220      	adds	r2, #32
 8001016:	2b1c      	cmp	r3, #28
 8001018:	dc00      	bgt.n	800101c <__aeabi_ddiv+0x4c0>
 800101a:	e72e      	b.n	8000e7a <__aeabi_ddiv+0x31e>
 800101c:	0023      	movs	r3, r4
 800101e:	3808      	subs	r0, #8
 8001020:	4083      	lsls	r3, r0
 8001022:	4699      	mov	r9, r3
 8001024:	2300      	movs	r3, #0
 8001026:	4698      	mov	r8, r3
 8001028:	e736      	b.n	8000e98 <__aeabi_ddiv+0x33c>
 800102a:	f001 f8cb 	bl	80021c4 <__clzsi2>
 800102e:	0002      	movs	r2, r0
 8001030:	0003      	movs	r3, r0
 8001032:	3215      	adds	r2, #21
 8001034:	3320      	adds	r3, #32
 8001036:	2a1c      	cmp	r2, #28
 8001038:	dc00      	bgt.n	800103c <__aeabi_ddiv+0x4e0>
 800103a:	e6fb      	b.n	8000e34 <__aeabi_ddiv+0x2d8>
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	3808      	subs	r0, #8
 8001040:	4081      	lsls	r1, r0
 8001042:	2200      	movs	r2, #0
 8001044:	468b      	mov	fp, r1
 8001046:	e702      	b.n	8000e4e <__aeabi_ddiv+0x2f2>
 8001048:	9900      	ldr	r1, [sp, #0]
 800104a:	3b01      	subs	r3, #1
 800104c:	468c      	mov	ip, r1
 800104e:	4464      	add	r4, ip
 8001050:	42a1      	cmp	r1, r4
 8001052:	d900      	bls.n	8001056 <__aeabi_ddiv+0x4fa>
 8001054:	e69a      	b.n	8000d8c <__aeabi_ddiv+0x230>
 8001056:	42a2      	cmp	r2, r4
 8001058:	d800      	bhi.n	800105c <__aeabi_ddiv+0x500>
 800105a:	e697      	b.n	8000d8c <__aeabi_ddiv+0x230>
 800105c:	1e83      	subs	r3, r0, #2
 800105e:	4464      	add	r4, ip
 8001060:	e694      	b.n	8000d8c <__aeabi_ddiv+0x230>
 8001062:	46ac      	mov	ip, r5
 8001064:	4461      	add	r1, ip
 8001066:	3f01      	subs	r7, #1
 8001068:	428d      	cmp	r5, r1
 800106a:	d900      	bls.n	800106e <__aeabi_ddiv+0x512>
 800106c:	e680      	b.n	8000d70 <__aeabi_ddiv+0x214>
 800106e:	428a      	cmp	r2, r1
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x518>
 8001072:	e67d      	b.n	8000d70 <__aeabi_ddiv+0x214>
 8001074:	1e87      	subs	r7, r0, #2
 8001076:	4461      	add	r1, ip
 8001078:	e67a      	b.n	8000d70 <__aeabi_ddiv+0x214>
 800107a:	4285      	cmp	r5, r0
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x524>
 800107e:	e65f      	b.n	8000d40 <__aeabi_ddiv+0x1e4>
 8001080:	45b9      	cmp	r9, r7
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x52a>
 8001084:	e65c      	b.n	8000d40 <__aeabi_ddiv+0x1e4>
 8001086:	e656      	b.n	8000d36 <__aeabi_ddiv+0x1da>
 8001088:	42a2      	cmp	r2, r4
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x532>
 800108c:	e61a      	b.n	8000cc4 <__aeabi_ddiv+0x168>
 800108e:	1e83      	subs	r3, r0, #2
 8001090:	4464      	add	r4, ip
 8001092:	e617      	b.n	8000cc4 <__aeabi_ddiv+0x168>
 8001094:	428a      	cmp	r2, r1
 8001096:	d800      	bhi.n	800109a <__aeabi_ddiv+0x53e>
 8001098:	e600      	b.n	8000c9c <__aeabi_ddiv+0x140>
 800109a:	46ac      	mov	ip, r5
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	4698      	mov	r8, r3
 80010a0:	4461      	add	r1, ip
 80010a2:	e5fb      	b.n	8000c9c <__aeabi_ddiv+0x140>
 80010a4:	4837      	ldr	r0, [pc, #220]	@ (8001184 <__aeabi_ddiv+0x628>)
 80010a6:	0014      	movs	r4, r2
 80010a8:	4450      	add	r0, sl
 80010aa:	4082      	lsls	r2, r0
 80010ac:	465b      	mov	r3, fp
 80010ae:	0017      	movs	r7, r2
 80010b0:	4083      	lsls	r3, r0
 80010b2:	40cc      	lsrs	r4, r1
 80010b4:	1e7a      	subs	r2, r7, #1
 80010b6:	4197      	sbcs	r7, r2
 80010b8:	4323      	orrs	r3, r4
 80010ba:	433b      	orrs	r3, r7
 80010bc:	001a      	movs	r2, r3
 80010be:	465b      	mov	r3, fp
 80010c0:	40cb      	lsrs	r3, r1
 80010c2:	0751      	lsls	r1, r2, #29
 80010c4:	d009      	beq.n	80010da <__aeabi_ddiv+0x57e>
 80010c6:	210f      	movs	r1, #15
 80010c8:	4011      	ands	r1, r2
 80010ca:	2904      	cmp	r1, #4
 80010cc:	d005      	beq.n	80010da <__aeabi_ddiv+0x57e>
 80010ce:	1d11      	adds	r1, r2, #4
 80010d0:	4291      	cmp	r1, r2
 80010d2:	4192      	sbcs	r2, r2
 80010d4:	4252      	negs	r2, r2
 80010d6:	189b      	adds	r3, r3, r2
 80010d8:	000a      	movs	r2, r1
 80010da:	0219      	lsls	r1, r3, #8
 80010dc:	d400      	bmi.n	80010e0 <__aeabi_ddiv+0x584>
 80010de:	e755      	b.n	8000f8c <__aeabi_ddiv+0x430>
 80010e0:	2200      	movs	r2, #0
 80010e2:	2301      	movs	r3, #1
 80010e4:	2400      	movs	r4, #0
 80010e6:	4690      	mov	r8, r2
 80010e8:	e598      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 80010ea:	000a      	movs	r2, r1
 80010ec:	42bc      	cmp	r4, r7
 80010ee:	d000      	beq.n	80010f2 <__aeabi_ddiv+0x596>
 80010f0:	e66e      	b.n	8000dd0 <__aeabi_ddiv+0x274>
 80010f2:	454b      	cmp	r3, r9
 80010f4:	d000      	beq.n	80010f8 <__aeabi_ddiv+0x59c>
 80010f6:	e66b      	b.n	8000dd0 <__aeabi_ddiv+0x274>
 80010f8:	e66c      	b.n	8000dd4 <__aeabi_ddiv+0x278>
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <__aeabi_ddiv+0x62c>)
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <__aeabi_ddiv+0x630>)
 80010fe:	4453      	add	r3, sl
 8001100:	4592      	cmp	sl, r2
 8001102:	da00      	bge.n	8001106 <__aeabi_ddiv+0x5aa>
 8001104:	e718      	b.n	8000f38 <__aeabi_ddiv+0x3dc>
 8001106:	2101      	movs	r1, #1
 8001108:	4249      	negs	r1, r1
 800110a:	1d0a      	adds	r2, r1, #4
 800110c:	428a      	cmp	r2, r1
 800110e:	4189      	sbcs	r1, r1
 8001110:	4249      	negs	r1, r1
 8001112:	448b      	add	fp, r1
 8001114:	e666      	b.n	8000de4 <__aeabi_ddiv+0x288>
 8001116:	210f      	movs	r1, #15
 8001118:	4011      	ands	r1, r2
 800111a:	2904      	cmp	r1, #4
 800111c:	d100      	bne.n	8001120 <__aeabi_ddiv+0x5c4>
 800111e:	e661      	b.n	8000de4 <__aeabi_ddiv+0x288>
 8001120:	0011      	movs	r1, r2
 8001122:	e7f2      	b.n	800110a <__aeabi_ddiv+0x5ae>
 8001124:	42bc      	cmp	r4, r7
 8001126:	d800      	bhi.n	800112a <__aeabi_ddiv+0x5ce>
 8001128:	e60a      	b.n	8000d40 <__aeabi_ddiv+0x1e4>
 800112a:	2302      	movs	r3, #2
 800112c:	425b      	negs	r3, r3
 800112e:	469c      	mov	ip, r3
 8001130:	9900      	ldr	r1, [sp, #0]
 8001132:	444f      	add	r7, r9
 8001134:	454f      	cmp	r7, r9
 8001136:	419b      	sbcs	r3, r3
 8001138:	44e3      	add	fp, ip
 800113a:	468c      	mov	ip, r1
 800113c:	425b      	negs	r3, r3
 800113e:	4463      	add	r3, ip
 8001140:	18c0      	adds	r0, r0, r3
 8001142:	e5ff      	b.n	8000d44 <__aeabi_ddiv+0x1e8>
 8001144:	4649      	mov	r1, r9
 8001146:	9d00      	ldr	r5, [sp, #0]
 8001148:	0048      	lsls	r0, r1, #1
 800114a:	4548      	cmp	r0, r9
 800114c:	4189      	sbcs	r1, r1
 800114e:	46ac      	mov	ip, r5
 8001150:	4249      	negs	r1, r1
 8001152:	4461      	add	r1, ip
 8001154:	4681      	mov	r9, r0
 8001156:	3a02      	subs	r2, #2
 8001158:	1864      	adds	r4, r4, r1
 800115a:	e7c7      	b.n	80010ec <__aeabi_ddiv+0x590>
 800115c:	2480      	movs	r4, #128	@ 0x80
 800115e:	465b      	mov	r3, fp
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	431c      	orrs	r4, r3
 8001164:	0324      	lsls	r4, r4, #12
 8001166:	4690      	mov	r8, r2
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__aeabi_ddiv+0x620>)
 800116a:	0b24      	lsrs	r4, r4, #12
 800116c:	e556      	b.n	8000c1c <__aeabi_ddiv+0xc0>
 800116e:	4599      	cmp	r9, r3
 8001170:	d3e8      	bcc.n	8001144 <__aeabi_ddiv+0x5e8>
 8001172:	000a      	movs	r2, r1
 8001174:	e7bd      	b.n	80010f2 <__aeabi_ddiv+0x596>
 8001176:	2300      	movs	r3, #0
 8001178:	e708      	b.n	8000f8c <__aeabi_ddiv+0x430>
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	000007ff 	.word	0x000007ff
 8001180:	0000043e 	.word	0x0000043e
 8001184:	0000041e 	.word	0x0000041e
 8001188:	000003ff 	.word	0x000003ff
 800118c:	fffffc02 	.word	0xfffffc02

08001190 <__eqdf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4657      	mov	r7, sl
 8001194:	46de      	mov	lr, fp
 8001196:	464e      	mov	r6, r9
 8001198:	4645      	mov	r5, r8
 800119a:	b5e0      	push	{r5, r6, r7, lr}
 800119c:	000d      	movs	r5, r1
 800119e:	0004      	movs	r4, r0
 80011a0:	0fe8      	lsrs	r0, r5, #31
 80011a2:	4683      	mov	fp, r0
 80011a4:	0309      	lsls	r1, r1, #12
 80011a6:	0fd8      	lsrs	r0, r3, #31
 80011a8:	0b09      	lsrs	r1, r1, #12
 80011aa:	4682      	mov	sl, r0
 80011ac:	4819      	ldr	r0, [pc, #100]	@ (8001214 <__eqdf2+0x84>)
 80011ae:	468c      	mov	ip, r1
 80011b0:	031f      	lsls	r7, r3, #12
 80011b2:	0069      	lsls	r1, r5, #1
 80011b4:	005e      	lsls	r6, r3, #1
 80011b6:	0d49      	lsrs	r1, r1, #21
 80011b8:	0b3f      	lsrs	r7, r7, #12
 80011ba:	0d76      	lsrs	r6, r6, #21
 80011bc:	4281      	cmp	r1, r0
 80011be:	d018      	beq.n	80011f2 <__eqdf2+0x62>
 80011c0:	4286      	cmp	r6, r0
 80011c2:	d00f      	beq.n	80011e4 <__eqdf2+0x54>
 80011c4:	2001      	movs	r0, #1
 80011c6:	42b1      	cmp	r1, r6
 80011c8:	d10d      	bne.n	80011e6 <__eqdf2+0x56>
 80011ca:	45bc      	cmp	ip, r7
 80011cc:	d10b      	bne.n	80011e6 <__eqdf2+0x56>
 80011ce:	4294      	cmp	r4, r2
 80011d0:	d109      	bne.n	80011e6 <__eqdf2+0x56>
 80011d2:	45d3      	cmp	fp, sl
 80011d4:	d01c      	beq.n	8001210 <__eqdf2+0x80>
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d105      	bne.n	80011e6 <__eqdf2+0x56>
 80011da:	4660      	mov	r0, ip
 80011dc:	4320      	orrs	r0, r4
 80011de:	1e43      	subs	r3, r0, #1
 80011e0:	4198      	sbcs	r0, r3
 80011e2:	e000      	b.n	80011e6 <__eqdf2+0x56>
 80011e4:	2001      	movs	r0, #1
 80011e6:	bcf0      	pop	{r4, r5, r6, r7}
 80011e8:	46bb      	mov	fp, r7
 80011ea:	46b2      	mov	sl, r6
 80011ec:	46a9      	mov	r9, r5
 80011ee:	46a0      	mov	r8, r4
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f2:	2001      	movs	r0, #1
 80011f4:	428e      	cmp	r6, r1
 80011f6:	d1f6      	bne.n	80011e6 <__eqdf2+0x56>
 80011f8:	4661      	mov	r1, ip
 80011fa:	4339      	orrs	r1, r7
 80011fc:	000f      	movs	r7, r1
 80011fe:	4317      	orrs	r7, r2
 8001200:	4327      	orrs	r7, r4
 8001202:	d1f0      	bne.n	80011e6 <__eqdf2+0x56>
 8001204:	465b      	mov	r3, fp
 8001206:	4652      	mov	r2, sl
 8001208:	1a98      	subs	r0, r3, r2
 800120a:	1e43      	subs	r3, r0, #1
 800120c:	4198      	sbcs	r0, r3
 800120e:	e7ea      	b.n	80011e6 <__eqdf2+0x56>
 8001210:	2000      	movs	r0, #0
 8001212:	e7e8      	b.n	80011e6 <__eqdf2+0x56>
 8001214:	000007ff 	.word	0x000007ff

08001218 <__gedf2>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	4657      	mov	r7, sl
 800121c:	464e      	mov	r6, r9
 800121e:	4645      	mov	r5, r8
 8001220:	46de      	mov	lr, fp
 8001222:	b5e0      	push	{r5, r6, r7, lr}
 8001224:	000d      	movs	r5, r1
 8001226:	030f      	lsls	r7, r1, #12
 8001228:	0b39      	lsrs	r1, r7, #12
 800122a:	b083      	sub	sp, #12
 800122c:	0004      	movs	r4, r0
 800122e:	4680      	mov	r8, r0
 8001230:	9101      	str	r1, [sp, #4]
 8001232:	0058      	lsls	r0, r3, #1
 8001234:	0fe9      	lsrs	r1, r5, #31
 8001236:	4f31      	ldr	r7, [pc, #196]	@ (80012fc <__gedf2+0xe4>)
 8001238:	0d40      	lsrs	r0, r0, #21
 800123a:	468c      	mov	ip, r1
 800123c:	006e      	lsls	r6, r5, #1
 800123e:	0319      	lsls	r1, r3, #12
 8001240:	4682      	mov	sl, r0
 8001242:	4691      	mov	r9, r2
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	0b09      	lsrs	r1, r1, #12
 8001248:	0fd8      	lsrs	r0, r3, #31
 800124a:	42be      	cmp	r6, r7
 800124c:	d01f      	beq.n	800128e <__gedf2+0x76>
 800124e:	45ba      	cmp	sl, r7
 8001250:	d00f      	beq.n	8001272 <__gedf2+0x5a>
 8001252:	2e00      	cmp	r6, #0
 8001254:	d12f      	bne.n	80012b6 <__gedf2+0x9e>
 8001256:	4655      	mov	r5, sl
 8001258:	9e01      	ldr	r6, [sp, #4]
 800125a:	4334      	orrs	r4, r6
 800125c:	2d00      	cmp	r5, #0
 800125e:	d127      	bne.n	80012b0 <__gedf2+0x98>
 8001260:	430a      	orrs	r2, r1
 8001262:	d03a      	beq.n	80012da <__gedf2+0xc2>
 8001264:	2c00      	cmp	r4, #0
 8001266:	d145      	bne.n	80012f4 <__gedf2+0xdc>
 8001268:	2800      	cmp	r0, #0
 800126a:	d11a      	bne.n	80012a2 <__gedf2+0x8a>
 800126c:	2001      	movs	r0, #1
 800126e:	4240      	negs	r0, r0
 8001270:	e017      	b.n	80012a2 <__gedf2+0x8a>
 8001272:	4311      	orrs	r1, r2
 8001274:	d13b      	bne.n	80012ee <__gedf2+0xd6>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d102      	bne.n	8001280 <__gedf2+0x68>
 800127a:	9f01      	ldr	r7, [sp, #4]
 800127c:	4327      	orrs	r7, r4
 800127e:	d0f3      	beq.n	8001268 <__gedf2+0x50>
 8001280:	4584      	cmp	ip, r0
 8001282:	d109      	bne.n	8001298 <__gedf2+0x80>
 8001284:	4663      	mov	r3, ip
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <__gedf2+0x54>
 800128a:	4660      	mov	r0, ip
 800128c:	e009      	b.n	80012a2 <__gedf2+0x8a>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d12c      	bne.n	80012ee <__gedf2+0xd6>
 8001294:	45b2      	cmp	sl, r6
 8001296:	d024      	beq.n	80012e2 <__gedf2+0xca>
 8001298:	4663      	mov	r3, ip
 800129a:	2002      	movs	r0, #2
 800129c:	3b01      	subs	r3, #1
 800129e:	4018      	ands	r0, r3
 80012a0:	3801      	subs	r0, #1
 80012a2:	b003      	add	sp, #12
 80012a4:	bcf0      	pop	{r4, r5, r6, r7}
 80012a6:	46bb      	mov	fp, r7
 80012a8:	46b2      	mov	sl, r6
 80012aa:	46a9      	mov	r9, r5
 80012ac:	46a0      	mov	r8, r4
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d0d9      	beq.n	8001268 <__gedf2+0x50>
 80012b4:	e7e4      	b.n	8001280 <__gedf2+0x68>
 80012b6:	4654      	mov	r4, sl
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d0ed      	beq.n	8001298 <__gedf2+0x80>
 80012bc:	4584      	cmp	ip, r0
 80012be:	d1eb      	bne.n	8001298 <__gedf2+0x80>
 80012c0:	4556      	cmp	r6, sl
 80012c2:	dce9      	bgt.n	8001298 <__gedf2+0x80>
 80012c4:	dbde      	blt.n	8001284 <__gedf2+0x6c>
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d8e5      	bhi.n	8001298 <__gedf2+0x80>
 80012cc:	d1da      	bne.n	8001284 <__gedf2+0x6c>
 80012ce:	45c8      	cmp	r8, r9
 80012d0:	d8e2      	bhi.n	8001298 <__gedf2+0x80>
 80012d2:	2000      	movs	r0, #0
 80012d4:	45c8      	cmp	r8, r9
 80012d6:	d2e4      	bcs.n	80012a2 <__gedf2+0x8a>
 80012d8:	e7d4      	b.n	8001284 <__gedf2+0x6c>
 80012da:	2000      	movs	r0, #0
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d0e0      	beq.n	80012a2 <__gedf2+0x8a>
 80012e0:	e7da      	b.n	8001298 <__gedf2+0x80>
 80012e2:	4311      	orrs	r1, r2
 80012e4:	d103      	bne.n	80012ee <__gedf2+0xd6>
 80012e6:	4584      	cmp	ip, r0
 80012e8:	d1d6      	bne.n	8001298 <__gedf2+0x80>
 80012ea:	2000      	movs	r0, #0
 80012ec:	e7d9      	b.n	80012a2 <__gedf2+0x8a>
 80012ee:	2002      	movs	r0, #2
 80012f0:	4240      	negs	r0, r0
 80012f2:	e7d6      	b.n	80012a2 <__gedf2+0x8a>
 80012f4:	4584      	cmp	ip, r0
 80012f6:	d0e6      	beq.n	80012c6 <__gedf2+0xae>
 80012f8:	e7ce      	b.n	8001298 <__gedf2+0x80>
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	000007ff 	.word	0x000007ff

08001300 <__ledf2>:
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	4657      	mov	r7, sl
 8001304:	464e      	mov	r6, r9
 8001306:	4645      	mov	r5, r8
 8001308:	46de      	mov	lr, fp
 800130a:	b5e0      	push	{r5, r6, r7, lr}
 800130c:	000d      	movs	r5, r1
 800130e:	030f      	lsls	r7, r1, #12
 8001310:	0004      	movs	r4, r0
 8001312:	4680      	mov	r8, r0
 8001314:	0fe8      	lsrs	r0, r5, #31
 8001316:	0b39      	lsrs	r1, r7, #12
 8001318:	4684      	mov	ip, r0
 800131a:	b083      	sub	sp, #12
 800131c:	0058      	lsls	r0, r3, #1
 800131e:	4f30      	ldr	r7, [pc, #192]	@ (80013e0 <__ledf2+0xe0>)
 8001320:	0d40      	lsrs	r0, r0, #21
 8001322:	9101      	str	r1, [sp, #4]
 8001324:	031e      	lsls	r6, r3, #12
 8001326:	0069      	lsls	r1, r5, #1
 8001328:	4682      	mov	sl, r0
 800132a:	4691      	mov	r9, r2
 800132c:	0d49      	lsrs	r1, r1, #21
 800132e:	0b36      	lsrs	r6, r6, #12
 8001330:	0fd8      	lsrs	r0, r3, #31
 8001332:	42b9      	cmp	r1, r7
 8001334:	d020      	beq.n	8001378 <__ledf2+0x78>
 8001336:	45ba      	cmp	sl, r7
 8001338:	d00f      	beq.n	800135a <__ledf2+0x5a>
 800133a:	2900      	cmp	r1, #0
 800133c:	d12b      	bne.n	8001396 <__ledf2+0x96>
 800133e:	9901      	ldr	r1, [sp, #4]
 8001340:	430c      	orrs	r4, r1
 8001342:	4651      	mov	r1, sl
 8001344:	2900      	cmp	r1, #0
 8001346:	d137      	bne.n	80013b8 <__ledf2+0xb8>
 8001348:	4332      	orrs	r2, r6
 800134a:	d038      	beq.n	80013be <__ledf2+0xbe>
 800134c:	2c00      	cmp	r4, #0
 800134e:	d144      	bne.n	80013da <__ledf2+0xda>
 8001350:	2800      	cmp	r0, #0
 8001352:	d119      	bne.n	8001388 <__ledf2+0x88>
 8001354:	2001      	movs	r0, #1
 8001356:	4240      	negs	r0, r0
 8001358:	e016      	b.n	8001388 <__ledf2+0x88>
 800135a:	4316      	orrs	r6, r2
 800135c:	d113      	bne.n	8001386 <__ledf2+0x86>
 800135e:	2900      	cmp	r1, #0
 8001360:	d102      	bne.n	8001368 <__ledf2+0x68>
 8001362:	9f01      	ldr	r7, [sp, #4]
 8001364:	4327      	orrs	r7, r4
 8001366:	d0f3      	beq.n	8001350 <__ledf2+0x50>
 8001368:	4584      	cmp	ip, r0
 800136a:	d020      	beq.n	80013ae <__ledf2+0xae>
 800136c:	4663      	mov	r3, ip
 800136e:	2002      	movs	r0, #2
 8001370:	3b01      	subs	r3, #1
 8001372:	4018      	ands	r0, r3
 8001374:	3801      	subs	r0, #1
 8001376:	e007      	b.n	8001388 <__ledf2+0x88>
 8001378:	9f01      	ldr	r7, [sp, #4]
 800137a:	4327      	orrs	r7, r4
 800137c:	d103      	bne.n	8001386 <__ledf2+0x86>
 800137e:	458a      	cmp	sl, r1
 8001380:	d1f4      	bne.n	800136c <__ledf2+0x6c>
 8001382:	4316      	orrs	r6, r2
 8001384:	d01f      	beq.n	80013c6 <__ledf2+0xc6>
 8001386:	2002      	movs	r0, #2
 8001388:	b003      	add	sp, #12
 800138a:	bcf0      	pop	{r4, r5, r6, r7}
 800138c:	46bb      	mov	fp, r7
 800138e:	46b2      	mov	sl, r6
 8001390:	46a9      	mov	r9, r5
 8001392:	46a0      	mov	r8, r4
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	4654      	mov	r4, sl
 8001398:	2c00      	cmp	r4, #0
 800139a:	d0e7      	beq.n	800136c <__ledf2+0x6c>
 800139c:	4584      	cmp	ip, r0
 800139e:	d1e5      	bne.n	800136c <__ledf2+0x6c>
 80013a0:	4551      	cmp	r1, sl
 80013a2:	dce3      	bgt.n	800136c <__ledf2+0x6c>
 80013a4:	db03      	blt.n	80013ae <__ledf2+0xae>
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	42b3      	cmp	r3, r6
 80013aa:	d8df      	bhi.n	800136c <__ledf2+0x6c>
 80013ac:	d00f      	beq.n	80013ce <__ledf2+0xce>
 80013ae:	4663      	mov	r3, ip
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0cf      	beq.n	8001354 <__ledf2+0x54>
 80013b4:	4660      	mov	r0, ip
 80013b6:	e7e7      	b.n	8001388 <__ledf2+0x88>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d0c9      	beq.n	8001350 <__ledf2+0x50>
 80013bc:	e7d4      	b.n	8001368 <__ledf2+0x68>
 80013be:	2000      	movs	r0, #0
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d0e1      	beq.n	8001388 <__ledf2+0x88>
 80013c4:	e7d2      	b.n	800136c <__ledf2+0x6c>
 80013c6:	4584      	cmp	ip, r0
 80013c8:	d1d0      	bne.n	800136c <__ledf2+0x6c>
 80013ca:	2000      	movs	r0, #0
 80013cc:	e7dc      	b.n	8001388 <__ledf2+0x88>
 80013ce:	45c8      	cmp	r8, r9
 80013d0:	d8cc      	bhi.n	800136c <__ledf2+0x6c>
 80013d2:	2000      	movs	r0, #0
 80013d4:	45c8      	cmp	r8, r9
 80013d6:	d2d7      	bcs.n	8001388 <__ledf2+0x88>
 80013d8:	e7e9      	b.n	80013ae <__ledf2+0xae>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d0e3      	beq.n	80013a6 <__ledf2+0xa6>
 80013de:	e7c5      	b.n	800136c <__ledf2+0x6c>
 80013e0:	000007ff 	.word	0x000007ff

080013e4 <__aeabi_dmul>:
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	4657      	mov	r7, sl
 80013e8:	46de      	mov	lr, fp
 80013ea:	464e      	mov	r6, r9
 80013ec:	4645      	mov	r5, r8
 80013ee:	b5e0      	push	{r5, r6, r7, lr}
 80013f0:	001f      	movs	r7, r3
 80013f2:	030b      	lsls	r3, r1, #12
 80013f4:	0b1b      	lsrs	r3, r3, #12
 80013f6:	0016      	movs	r6, r2
 80013f8:	469a      	mov	sl, r3
 80013fa:	0fca      	lsrs	r2, r1, #31
 80013fc:	004b      	lsls	r3, r1, #1
 80013fe:	0004      	movs	r4, r0
 8001400:	4693      	mov	fp, r2
 8001402:	b087      	sub	sp, #28
 8001404:	0d5b      	lsrs	r3, r3, #21
 8001406:	d100      	bne.n	800140a <__aeabi_dmul+0x26>
 8001408:	e0d5      	b.n	80015b6 <__aeabi_dmul+0x1d2>
 800140a:	4abb      	ldr	r2, [pc, #748]	@ (80016f8 <__aeabi_dmul+0x314>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d100      	bne.n	8001412 <__aeabi_dmul+0x2e>
 8001410:	e0f8      	b.n	8001604 <__aeabi_dmul+0x220>
 8001412:	4651      	mov	r1, sl
 8001414:	0f42      	lsrs	r2, r0, #29
 8001416:	00c9      	lsls	r1, r1, #3
 8001418:	430a      	orrs	r2, r1
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	0409      	lsls	r1, r1, #16
 800141e:	4311      	orrs	r1, r2
 8001420:	00c2      	lsls	r2, r0, #3
 8001422:	4691      	mov	r9, r2
 8001424:	4ab5      	ldr	r2, [pc, #724]	@ (80016fc <__aeabi_dmul+0x318>)
 8001426:	468a      	mov	sl, r1
 8001428:	189d      	adds	r5, r3, r2
 800142a:	2300      	movs	r3, #0
 800142c:	4698      	mov	r8, r3
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	033c      	lsls	r4, r7, #12
 8001432:	007b      	lsls	r3, r7, #1
 8001434:	0ffa      	lsrs	r2, r7, #31
 8001436:	0030      	movs	r0, r6
 8001438:	0b24      	lsrs	r4, r4, #12
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	d100      	bne.n	8001442 <__aeabi_dmul+0x5e>
 8001440:	e096      	b.n	8001570 <__aeabi_dmul+0x18c>
 8001442:	4aad      	ldr	r2, [pc, #692]	@ (80016f8 <__aeabi_dmul+0x314>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d031      	beq.n	80014ac <__aeabi_dmul+0xc8>
 8001448:	0f72      	lsrs	r2, r6, #29
 800144a:	00e4      	lsls	r4, r4, #3
 800144c:	4322      	orrs	r2, r4
 800144e:	2480      	movs	r4, #128	@ 0x80
 8001450:	0424      	lsls	r4, r4, #16
 8001452:	4314      	orrs	r4, r2
 8001454:	4aa9      	ldr	r2, [pc, #676]	@ (80016fc <__aeabi_dmul+0x318>)
 8001456:	00f0      	lsls	r0, r6, #3
 8001458:	4694      	mov	ip, r2
 800145a:	4463      	add	r3, ip
 800145c:	195b      	adds	r3, r3, r5
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	4642      	mov	r2, r8
 8001464:	2600      	movs	r6, #0
 8001466:	2a0a      	cmp	r2, #10
 8001468:	dc42      	bgt.n	80014f0 <__aeabi_dmul+0x10c>
 800146a:	465a      	mov	r2, fp
 800146c:	9900      	ldr	r1, [sp, #0]
 800146e:	404a      	eors	r2, r1
 8001470:	4693      	mov	fp, r2
 8001472:	4642      	mov	r2, r8
 8001474:	2a02      	cmp	r2, #2
 8001476:	dc32      	bgt.n	80014de <__aeabi_dmul+0xfa>
 8001478:	3a01      	subs	r2, #1
 800147a:	2a01      	cmp	r2, #1
 800147c:	d900      	bls.n	8001480 <__aeabi_dmul+0x9c>
 800147e:	e149      	b.n	8001714 <__aeabi_dmul+0x330>
 8001480:	2e02      	cmp	r6, #2
 8001482:	d100      	bne.n	8001486 <__aeabi_dmul+0xa2>
 8001484:	e0ca      	b.n	800161c <__aeabi_dmul+0x238>
 8001486:	2e01      	cmp	r6, #1
 8001488:	d13d      	bne.n	8001506 <__aeabi_dmul+0x122>
 800148a:	2300      	movs	r3, #0
 800148c:	2400      	movs	r4, #0
 800148e:	2200      	movs	r2, #0
 8001490:	0010      	movs	r0, r2
 8001492:	465a      	mov	r2, fp
 8001494:	051b      	lsls	r3, r3, #20
 8001496:	4323      	orrs	r3, r4
 8001498:	07d2      	lsls	r2, r2, #31
 800149a:	4313      	orrs	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	b007      	add	sp, #28
 80014a0:	bcf0      	pop	{r4, r5, r6, r7}
 80014a2:	46bb      	mov	fp, r7
 80014a4:	46b2      	mov	sl, r6
 80014a6:	46a9      	mov	r9, r5
 80014a8:	46a0      	mov	r8, r4
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	4b92      	ldr	r3, [pc, #584]	@ (80016f8 <__aeabi_dmul+0x314>)
 80014ae:	4326      	orrs	r6, r4
 80014b0:	18eb      	adds	r3, r5, r3
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dmul+0xd4>
 80014b6:	e0bb      	b.n	8001630 <__aeabi_dmul+0x24c>
 80014b8:	2203      	movs	r2, #3
 80014ba:	4641      	mov	r1, r8
 80014bc:	4311      	orrs	r1, r2
 80014be:	465a      	mov	r2, fp
 80014c0:	4688      	mov	r8, r1
 80014c2:	9900      	ldr	r1, [sp, #0]
 80014c4:	404a      	eors	r2, r1
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	0109      	lsls	r1, r1, #4
 80014ca:	468c      	mov	ip, r1
 80014cc:	0029      	movs	r1, r5
 80014ce:	4461      	add	r1, ip
 80014d0:	9101      	str	r1, [sp, #4]
 80014d2:	4641      	mov	r1, r8
 80014d4:	290a      	cmp	r1, #10
 80014d6:	dd00      	ble.n	80014da <__aeabi_dmul+0xf6>
 80014d8:	e233      	b.n	8001942 <__aeabi_dmul+0x55e>
 80014da:	4693      	mov	fp, r2
 80014dc:	2603      	movs	r6, #3
 80014de:	4642      	mov	r2, r8
 80014e0:	2701      	movs	r7, #1
 80014e2:	4097      	lsls	r7, r2
 80014e4:	21a6      	movs	r1, #166	@ 0xa6
 80014e6:	003a      	movs	r2, r7
 80014e8:	00c9      	lsls	r1, r1, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	420f      	tst	r7, r1
 80014ee:	d031      	beq.n	8001554 <__aeabi_dmul+0x170>
 80014f0:	9e02      	ldr	r6, [sp, #8]
 80014f2:	2e02      	cmp	r6, #2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dmul+0x114>
 80014f6:	e235      	b.n	8001964 <__aeabi_dmul+0x580>
 80014f8:	2e03      	cmp	r6, #3
 80014fa:	d100      	bne.n	80014fe <__aeabi_dmul+0x11a>
 80014fc:	e1d2      	b.n	80018a4 <__aeabi_dmul+0x4c0>
 80014fe:	4654      	mov	r4, sl
 8001500:	4648      	mov	r0, r9
 8001502:	2e01      	cmp	r6, #1
 8001504:	d0c1      	beq.n	800148a <__aeabi_dmul+0xa6>
 8001506:	9a01      	ldr	r2, [sp, #4]
 8001508:	4b7d      	ldr	r3, [pc, #500]	@ (8001700 <__aeabi_dmul+0x31c>)
 800150a:	4694      	mov	ip, r2
 800150c:	4463      	add	r3, ip
 800150e:	2b00      	cmp	r3, #0
 8001510:	dc00      	bgt.n	8001514 <__aeabi_dmul+0x130>
 8001512:	e0c0      	b.n	8001696 <__aeabi_dmul+0x2b2>
 8001514:	0742      	lsls	r2, r0, #29
 8001516:	d009      	beq.n	800152c <__aeabi_dmul+0x148>
 8001518:	220f      	movs	r2, #15
 800151a:	4002      	ands	r2, r0
 800151c:	2a04      	cmp	r2, #4
 800151e:	d005      	beq.n	800152c <__aeabi_dmul+0x148>
 8001520:	1d02      	adds	r2, r0, #4
 8001522:	4282      	cmp	r2, r0
 8001524:	4180      	sbcs	r0, r0
 8001526:	4240      	negs	r0, r0
 8001528:	1824      	adds	r4, r4, r0
 800152a:	0010      	movs	r0, r2
 800152c:	01e2      	lsls	r2, r4, #7
 800152e:	d506      	bpl.n	800153e <__aeabi_dmul+0x15a>
 8001530:	4b74      	ldr	r3, [pc, #464]	@ (8001704 <__aeabi_dmul+0x320>)
 8001532:	9a01      	ldr	r2, [sp, #4]
 8001534:	401c      	ands	r4, r3
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	4694      	mov	ip, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4463      	add	r3, ip
 800153e:	4a72      	ldr	r2, [pc, #456]	@ (8001708 <__aeabi_dmul+0x324>)
 8001540:	4293      	cmp	r3, r2
 8001542:	dc6b      	bgt.n	800161c <__aeabi_dmul+0x238>
 8001544:	0762      	lsls	r2, r4, #29
 8001546:	08c0      	lsrs	r0, r0, #3
 8001548:	0264      	lsls	r4, r4, #9
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4302      	orrs	r2, r0
 800154e:	0b24      	lsrs	r4, r4, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	e79d      	b.n	8001490 <__aeabi_dmul+0xac>
 8001554:	2190      	movs	r1, #144	@ 0x90
 8001556:	0089      	lsls	r1, r1, #2
 8001558:	420f      	tst	r7, r1
 800155a:	d163      	bne.n	8001624 <__aeabi_dmul+0x240>
 800155c:	2288      	movs	r2, #136	@ 0x88
 800155e:	423a      	tst	r2, r7
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x180>
 8001562:	e0d7      	b.n	8001714 <__aeabi_dmul+0x330>
 8001564:	9b00      	ldr	r3, [sp, #0]
 8001566:	46a2      	mov	sl, r4
 8001568:	469b      	mov	fp, r3
 800156a:	4681      	mov	r9, r0
 800156c:	9602      	str	r6, [sp, #8]
 800156e:	e7bf      	b.n	80014f0 <__aeabi_dmul+0x10c>
 8001570:	0023      	movs	r3, r4
 8001572:	4333      	orrs	r3, r6
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x194>
 8001576:	e07f      	b.n	8001678 <__aeabi_dmul+0x294>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dmul+0x19a>
 800157c:	e1ad      	b.n	80018da <__aeabi_dmul+0x4f6>
 800157e:	0020      	movs	r0, r4
 8001580:	f000 fe20 	bl	80021c4 <__clzsi2>
 8001584:	0002      	movs	r2, r0
 8001586:	0003      	movs	r3, r0
 8001588:	3a0b      	subs	r2, #11
 800158a:	201d      	movs	r0, #29
 800158c:	0019      	movs	r1, r3
 800158e:	1a82      	subs	r2, r0, r2
 8001590:	0030      	movs	r0, r6
 8001592:	3908      	subs	r1, #8
 8001594:	40d0      	lsrs	r0, r2
 8001596:	408c      	lsls	r4, r1
 8001598:	4304      	orrs	r4, r0
 800159a:	0030      	movs	r0, r6
 800159c:	4088      	lsls	r0, r1
 800159e:	4a5b      	ldr	r2, [pc, #364]	@ (800170c <__aeabi_dmul+0x328>)
 80015a0:	1aeb      	subs	r3, r5, r3
 80015a2:	4694      	mov	ip, r2
 80015a4:	4463      	add	r3, ip
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	9201      	str	r2, [sp, #4]
 80015aa:	4642      	mov	r2, r8
 80015ac:	2600      	movs	r6, #0
 80015ae:	2a0a      	cmp	r2, #10
 80015b0:	dc00      	bgt.n	80015b4 <__aeabi_dmul+0x1d0>
 80015b2:	e75a      	b.n	800146a <__aeabi_dmul+0x86>
 80015b4:	e79c      	b.n	80014f0 <__aeabi_dmul+0x10c>
 80015b6:	4653      	mov	r3, sl
 80015b8:	4303      	orrs	r3, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	d054      	beq.n	8001668 <__aeabi_dmul+0x284>
 80015be:	4653      	mov	r3, sl
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dmul+0x1e2>
 80015c4:	e177      	b.n	80018b6 <__aeabi_dmul+0x4d2>
 80015c6:	4650      	mov	r0, sl
 80015c8:	f000 fdfc 	bl	80021c4 <__clzsi2>
 80015cc:	230b      	movs	r3, #11
 80015ce:	425b      	negs	r3, r3
 80015d0:	469c      	mov	ip, r3
 80015d2:	0002      	movs	r2, r0
 80015d4:	4484      	add	ip, r0
 80015d6:	0011      	movs	r1, r2
 80015d8:	4650      	mov	r0, sl
 80015da:	3908      	subs	r1, #8
 80015dc:	4088      	lsls	r0, r1
 80015de:	231d      	movs	r3, #29
 80015e0:	4680      	mov	r8, r0
 80015e2:	4660      	mov	r0, ip
 80015e4:	1a1b      	subs	r3, r3, r0
 80015e6:	0020      	movs	r0, r4
 80015e8:	40d8      	lsrs	r0, r3
 80015ea:	0003      	movs	r3, r0
 80015ec:	4640      	mov	r0, r8
 80015ee:	4303      	orrs	r3, r0
 80015f0:	469a      	mov	sl, r3
 80015f2:	0023      	movs	r3, r4
 80015f4:	408b      	lsls	r3, r1
 80015f6:	4699      	mov	r9, r3
 80015f8:	2300      	movs	r3, #0
 80015fa:	4d44      	ldr	r5, [pc, #272]	@ (800170c <__aeabi_dmul+0x328>)
 80015fc:	4698      	mov	r8, r3
 80015fe:	1aad      	subs	r5, r5, r2
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	e715      	b.n	8001430 <__aeabi_dmul+0x4c>
 8001604:	4652      	mov	r2, sl
 8001606:	4302      	orrs	r2, r0
 8001608:	4691      	mov	r9, r2
 800160a:	d126      	bne.n	800165a <__aeabi_dmul+0x276>
 800160c:	2200      	movs	r2, #0
 800160e:	001d      	movs	r5, r3
 8001610:	2302      	movs	r3, #2
 8001612:	4692      	mov	sl, r2
 8001614:	3208      	adds	r2, #8
 8001616:	4690      	mov	r8, r2
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	e709      	b.n	8001430 <__aeabi_dmul+0x4c>
 800161c:	2400      	movs	r4, #0
 800161e:	2200      	movs	r2, #0
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <__aeabi_dmul+0x314>)
 8001622:	e735      	b.n	8001490 <__aeabi_dmul+0xac>
 8001624:	2300      	movs	r3, #0
 8001626:	2480      	movs	r4, #128	@ 0x80
 8001628:	469b      	mov	fp, r3
 800162a:	0324      	lsls	r4, r4, #12
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <__aeabi_dmul+0x314>)
 800162e:	e72f      	b.n	8001490 <__aeabi_dmul+0xac>
 8001630:	2202      	movs	r2, #2
 8001632:	4641      	mov	r1, r8
 8001634:	4311      	orrs	r1, r2
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	4694      	mov	ip, r2
 800163c:	002a      	movs	r2, r5
 800163e:	4462      	add	r2, ip
 8001640:	4688      	mov	r8, r1
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	290a      	cmp	r1, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x266>
 8001648:	e752      	b.n	80014f0 <__aeabi_dmul+0x10c>
 800164a:	465a      	mov	r2, fp
 800164c:	2000      	movs	r0, #0
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	0004      	movs	r4, r0
 8001652:	404a      	eors	r2, r1
 8001654:	4693      	mov	fp, r2
 8001656:	2602      	movs	r6, #2
 8001658:	e70b      	b.n	8001472 <__aeabi_dmul+0x8e>
 800165a:	220c      	movs	r2, #12
 800165c:	001d      	movs	r5, r3
 800165e:	2303      	movs	r3, #3
 8001660:	4681      	mov	r9, r0
 8001662:	4690      	mov	r8, r2
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	e6e3      	b.n	8001430 <__aeabi_dmul+0x4c>
 8001668:	2300      	movs	r3, #0
 800166a:	469a      	mov	sl, r3
 800166c:	3304      	adds	r3, #4
 800166e:	4698      	mov	r8, r3
 8001670:	3b03      	subs	r3, #3
 8001672:	2500      	movs	r5, #0
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	e6db      	b.n	8001430 <__aeabi_dmul+0x4c>
 8001678:	4642      	mov	r2, r8
 800167a:	3301      	adds	r3, #1
 800167c:	431a      	orrs	r2, r3
 800167e:	002b      	movs	r3, r5
 8001680:	4690      	mov	r8, r2
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	4642      	mov	r2, r8
 8001688:	2400      	movs	r4, #0
 800168a:	2000      	movs	r0, #0
 800168c:	2601      	movs	r6, #1
 800168e:	2a0a      	cmp	r2, #10
 8001690:	dc00      	bgt.n	8001694 <__aeabi_dmul+0x2b0>
 8001692:	e6ea      	b.n	800146a <__aeabi_dmul+0x86>
 8001694:	e72c      	b.n	80014f0 <__aeabi_dmul+0x10c>
 8001696:	2201      	movs	r2, #1
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	2a38      	cmp	r2, #56	@ 0x38
 800169c:	dd00      	ble.n	80016a0 <__aeabi_dmul+0x2bc>
 800169e:	e6f4      	b.n	800148a <__aeabi_dmul+0xa6>
 80016a0:	2a1f      	cmp	r2, #31
 80016a2:	dc00      	bgt.n	80016a6 <__aeabi_dmul+0x2c2>
 80016a4:	e12a      	b.n	80018fc <__aeabi_dmul+0x518>
 80016a6:	211f      	movs	r1, #31
 80016a8:	4249      	negs	r1, r1
 80016aa:	1acb      	subs	r3, r1, r3
 80016ac:	0021      	movs	r1, r4
 80016ae:	40d9      	lsrs	r1, r3
 80016b0:	000b      	movs	r3, r1
 80016b2:	2a20      	cmp	r2, #32
 80016b4:	d005      	beq.n	80016c2 <__aeabi_dmul+0x2de>
 80016b6:	4a16      	ldr	r2, [pc, #88]	@ (8001710 <__aeabi_dmul+0x32c>)
 80016b8:	9d01      	ldr	r5, [sp, #4]
 80016ba:	4694      	mov	ip, r2
 80016bc:	4465      	add	r5, ip
 80016be:	40ac      	lsls	r4, r5
 80016c0:	4320      	orrs	r0, r4
 80016c2:	1e42      	subs	r2, r0, #1
 80016c4:	4190      	sbcs	r0, r2
 80016c6:	4318      	orrs	r0, r3
 80016c8:	2307      	movs	r3, #7
 80016ca:	0019      	movs	r1, r3
 80016cc:	2400      	movs	r4, #0
 80016ce:	4001      	ands	r1, r0
 80016d0:	4203      	tst	r3, r0
 80016d2:	d00c      	beq.n	80016ee <__aeabi_dmul+0x30a>
 80016d4:	230f      	movs	r3, #15
 80016d6:	4003      	ands	r3, r0
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x2fa>
 80016dc:	e140      	b.n	8001960 <__aeabi_dmul+0x57c>
 80016de:	1d03      	adds	r3, r0, #4
 80016e0:	4283      	cmp	r3, r0
 80016e2:	41a4      	sbcs	r4, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	4264      	negs	r4, r4
 80016e8:	0761      	lsls	r1, r4, #29
 80016ea:	0264      	lsls	r4, r4, #9
 80016ec:	0b24      	lsrs	r4, r4, #12
 80016ee:	08c2      	lsrs	r2, r0, #3
 80016f0:	2300      	movs	r3, #0
 80016f2:	430a      	orrs	r2, r1
 80016f4:	e6cc      	b.n	8001490 <__aeabi_dmul+0xac>
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	fffffc01 	.word	0xfffffc01
 8001700:	000003ff 	.word	0x000003ff
 8001704:	feffffff 	.word	0xfeffffff
 8001708:	000007fe 	.word	0x000007fe
 800170c:	fffffc0d 	.word	0xfffffc0d
 8001710:	0000043e 	.word	0x0000043e
 8001714:	4649      	mov	r1, r9
 8001716:	464a      	mov	r2, r9
 8001718:	0409      	lsls	r1, r1, #16
 800171a:	0c09      	lsrs	r1, r1, #16
 800171c:	000d      	movs	r5, r1
 800171e:	0c16      	lsrs	r6, r2, #16
 8001720:	0c02      	lsrs	r2, r0, #16
 8001722:	0400      	lsls	r0, r0, #16
 8001724:	0c00      	lsrs	r0, r0, #16
 8001726:	4345      	muls	r5, r0
 8001728:	46ac      	mov	ip, r5
 800172a:	0005      	movs	r5, r0
 800172c:	4375      	muls	r5, r6
 800172e:	46a8      	mov	r8, r5
 8001730:	0015      	movs	r5, r2
 8001732:	000f      	movs	r7, r1
 8001734:	4375      	muls	r5, r6
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	9502      	str	r5, [sp, #8]
 800173a:	002a      	movs	r2, r5
 800173c:	9d00      	ldr	r5, [sp, #0]
 800173e:	436f      	muls	r7, r5
 8001740:	4665      	mov	r5, ip
 8001742:	0c2d      	lsrs	r5, r5, #16
 8001744:	46a9      	mov	r9, r5
 8001746:	4447      	add	r7, r8
 8001748:	444f      	add	r7, r9
 800174a:	45b8      	cmp	r8, r7
 800174c:	d905      	bls.n	800175a <__aeabi_dmul+0x376>
 800174e:	0015      	movs	r5, r2
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	0252      	lsls	r2, r2, #9
 8001754:	4690      	mov	r8, r2
 8001756:	4445      	add	r5, r8
 8001758:	9502      	str	r5, [sp, #8]
 800175a:	0c3d      	lsrs	r5, r7, #16
 800175c:	9503      	str	r5, [sp, #12]
 800175e:	4665      	mov	r5, ip
 8001760:	042d      	lsls	r5, r5, #16
 8001762:	043f      	lsls	r7, r7, #16
 8001764:	0c2d      	lsrs	r5, r5, #16
 8001766:	46ac      	mov	ip, r5
 8001768:	003d      	movs	r5, r7
 800176a:	4465      	add	r5, ip
 800176c:	9504      	str	r5, [sp, #16]
 800176e:	0c25      	lsrs	r5, r4, #16
 8001770:	0424      	lsls	r4, r4, #16
 8001772:	0c24      	lsrs	r4, r4, #16
 8001774:	46ac      	mov	ip, r5
 8001776:	0025      	movs	r5, r4
 8001778:	4375      	muls	r5, r6
 800177a:	46a8      	mov	r8, r5
 800177c:	4665      	mov	r5, ip
 800177e:	000f      	movs	r7, r1
 8001780:	4369      	muls	r1, r5
 8001782:	4441      	add	r1, r8
 8001784:	4689      	mov	r9, r1
 8001786:	4367      	muls	r7, r4
 8001788:	0c39      	lsrs	r1, r7, #16
 800178a:	4449      	add	r1, r9
 800178c:	436e      	muls	r6, r5
 800178e:	4588      	cmp	r8, r1
 8001790:	d903      	bls.n	800179a <__aeabi_dmul+0x3b6>
 8001792:	2280      	movs	r2, #128	@ 0x80
 8001794:	0252      	lsls	r2, r2, #9
 8001796:	4690      	mov	r8, r2
 8001798:	4446      	add	r6, r8
 800179a:	0c0d      	lsrs	r5, r1, #16
 800179c:	46a8      	mov	r8, r5
 800179e:	0035      	movs	r5, r6
 80017a0:	4445      	add	r5, r8
 80017a2:	9505      	str	r5, [sp, #20]
 80017a4:	9d03      	ldr	r5, [sp, #12]
 80017a6:	043f      	lsls	r7, r7, #16
 80017a8:	46a8      	mov	r8, r5
 80017aa:	0c3f      	lsrs	r7, r7, #16
 80017ac:	0409      	lsls	r1, r1, #16
 80017ae:	19c9      	adds	r1, r1, r7
 80017b0:	4488      	add	r8, r1
 80017b2:	4645      	mov	r5, r8
 80017b4:	9503      	str	r5, [sp, #12]
 80017b6:	4655      	mov	r5, sl
 80017b8:	042e      	lsls	r6, r5, #16
 80017ba:	0c36      	lsrs	r6, r6, #16
 80017bc:	0c2f      	lsrs	r7, r5, #16
 80017be:	0035      	movs	r5, r6
 80017c0:	4345      	muls	r5, r0
 80017c2:	4378      	muls	r0, r7
 80017c4:	4681      	mov	r9, r0
 80017c6:	0038      	movs	r0, r7
 80017c8:	46a8      	mov	r8, r5
 80017ca:	0c2d      	lsrs	r5, r5, #16
 80017cc:	46aa      	mov	sl, r5
 80017ce:	9a00      	ldr	r2, [sp, #0]
 80017d0:	4350      	muls	r0, r2
 80017d2:	4372      	muls	r2, r6
 80017d4:	444a      	add	r2, r9
 80017d6:	4452      	add	r2, sl
 80017d8:	4591      	cmp	r9, r2
 80017da:	d903      	bls.n	80017e4 <__aeabi_dmul+0x400>
 80017dc:	2580      	movs	r5, #128	@ 0x80
 80017de:	026d      	lsls	r5, r5, #9
 80017e0:	46a9      	mov	r9, r5
 80017e2:	4448      	add	r0, r9
 80017e4:	0c15      	lsrs	r5, r2, #16
 80017e6:	46a9      	mov	r9, r5
 80017e8:	4645      	mov	r5, r8
 80017ea:	042d      	lsls	r5, r5, #16
 80017ec:	0c2d      	lsrs	r5, r5, #16
 80017ee:	46a8      	mov	r8, r5
 80017f0:	4665      	mov	r5, ip
 80017f2:	437d      	muls	r5, r7
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	4448      	add	r0, r9
 80017f8:	4490      	add	r8, r2
 80017fa:	46a9      	mov	r9, r5
 80017fc:	0032      	movs	r2, r6
 80017fe:	4665      	mov	r5, ip
 8001800:	4362      	muls	r2, r4
 8001802:	436e      	muls	r6, r5
 8001804:	437c      	muls	r4, r7
 8001806:	0c17      	lsrs	r7, r2, #16
 8001808:	1936      	adds	r6, r6, r4
 800180a:	19bf      	adds	r7, r7, r6
 800180c:	42bc      	cmp	r4, r7
 800180e:	d903      	bls.n	8001818 <__aeabi_dmul+0x434>
 8001810:	2480      	movs	r4, #128	@ 0x80
 8001812:	0264      	lsls	r4, r4, #9
 8001814:	46a4      	mov	ip, r4
 8001816:	44e1      	add	r9, ip
 8001818:	9c02      	ldr	r4, [sp, #8]
 800181a:	9e03      	ldr	r6, [sp, #12]
 800181c:	46a4      	mov	ip, r4
 800181e:	9d05      	ldr	r5, [sp, #20]
 8001820:	4466      	add	r6, ip
 8001822:	428e      	cmp	r6, r1
 8001824:	4189      	sbcs	r1, r1
 8001826:	46ac      	mov	ip, r5
 8001828:	0412      	lsls	r2, r2, #16
 800182a:	043c      	lsls	r4, r7, #16
 800182c:	0c12      	lsrs	r2, r2, #16
 800182e:	18a2      	adds	r2, r4, r2
 8001830:	4462      	add	r2, ip
 8001832:	4249      	negs	r1, r1
 8001834:	1854      	adds	r4, r2, r1
 8001836:	4446      	add	r6, r8
 8001838:	46a4      	mov	ip, r4
 800183a:	4546      	cmp	r6, r8
 800183c:	41a4      	sbcs	r4, r4
 800183e:	4682      	mov	sl, r0
 8001840:	4264      	negs	r4, r4
 8001842:	46a0      	mov	r8, r4
 8001844:	42aa      	cmp	r2, r5
 8001846:	4192      	sbcs	r2, r2
 8001848:	458c      	cmp	ip, r1
 800184a:	4189      	sbcs	r1, r1
 800184c:	44e2      	add	sl, ip
 800184e:	44d0      	add	r8, sl
 8001850:	4249      	negs	r1, r1
 8001852:	4252      	negs	r2, r2
 8001854:	430a      	orrs	r2, r1
 8001856:	45a0      	cmp	r8, r4
 8001858:	41a4      	sbcs	r4, r4
 800185a:	4582      	cmp	sl, r0
 800185c:	4189      	sbcs	r1, r1
 800185e:	4264      	negs	r4, r4
 8001860:	4249      	negs	r1, r1
 8001862:	430c      	orrs	r4, r1
 8001864:	4641      	mov	r1, r8
 8001866:	0c3f      	lsrs	r7, r7, #16
 8001868:	19d2      	adds	r2, r2, r7
 800186a:	1912      	adds	r2, r2, r4
 800186c:	0dcc      	lsrs	r4, r1, #23
 800186e:	9904      	ldr	r1, [sp, #16]
 8001870:	0270      	lsls	r0, r6, #9
 8001872:	4308      	orrs	r0, r1
 8001874:	1e41      	subs	r1, r0, #1
 8001876:	4188      	sbcs	r0, r1
 8001878:	4641      	mov	r1, r8
 800187a:	444a      	add	r2, r9
 800187c:	0df6      	lsrs	r6, r6, #23
 800187e:	0252      	lsls	r2, r2, #9
 8001880:	4330      	orrs	r0, r6
 8001882:	0249      	lsls	r1, r1, #9
 8001884:	4314      	orrs	r4, r2
 8001886:	4308      	orrs	r0, r1
 8001888:	01d2      	lsls	r2, r2, #7
 800188a:	d535      	bpl.n	80018f8 <__aeabi_dmul+0x514>
 800188c:	2201      	movs	r2, #1
 800188e:	0843      	lsrs	r3, r0, #1
 8001890:	4002      	ands	r2, r0
 8001892:	4313      	orrs	r3, r2
 8001894:	07e0      	lsls	r0, r4, #31
 8001896:	4318      	orrs	r0, r3
 8001898:	0864      	lsrs	r4, r4, #1
 800189a:	e634      	b.n	8001506 <__aeabi_dmul+0x122>
 800189c:	9b00      	ldr	r3, [sp, #0]
 800189e:	46a2      	mov	sl, r4
 80018a0:	469b      	mov	fp, r3
 80018a2:	4681      	mov	r9, r0
 80018a4:	2480      	movs	r4, #128	@ 0x80
 80018a6:	4653      	mov	r3, sl
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	431c      	orrs	r4, r3
 80018ac:	0324      	lsls	r4, r4, #12
 80018ae:	464a      	mov	r2, r9
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <__aeabi_dmul+0x588>)
 80018b2:	0b24      	lsrs	r4, r4, #12
 80018b4:	e5ec      	b.n	8001490 <__aeabi_dmul+0xac>
 80018b6:	f000 fc85 	bl	80021c4 <__clzsi2>
 80018ba:	2315      	movs	r3, #21
 80018bc:	469c      	mov	ip, r3
 80018be:	4484      	add	ip, r0
 80018c0:	0002      	movs	r2, r0
 80018c2:	4663      	mov	r3, ip
 80018c4:	3220      	adds	r2, #32
 80018c6:	2b1c      	cmp	r3, #28
 80018c8:	dc00      	bgt.n	80018cc <__aeabi_dmul+0x4e8>
 80018ca:	e684      	b.n	80015d6 <__aeabi_dmul+0x1f2>
 80018cc:	2300      	movs	r3, #0
 80018ce:	4699      	mov	r9, r3
 80018d0:	0023      	movs	r3, r4
 80018d2:	3808      	subs	r0, #8
 80018d4:	4083      	lsls	r3, r0
 80018d6:	469a      	mov	sl, r3
 80018d8:	e68e      	b.n	80015f8 <__aeabi_dmul+0x214>
 80018da:	f000 fc73 	bl	80021c4 <__clzsi2>
 80018de:	0002      	movs	r2, r0
 80018e0:	0003      	movs	r3, r0
 80018e2:	3215      	adds	r2, #21
 80018e4:	3320      	adds	r3, #32
 80018e6:	2a1c      	cmp	r2, #28
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_dmul+0x508>
 80018ea:	e64e      	b.n	800158a <__aeabi_dmul+0x1a6>
 80018ec:	0002      	movs	r2, r0
 80018ee:	0034      	movs	r4, r6
 80018f0:	3a08      	subs	r2, #8
 80018f2:	2000      	movs	r0, #0
 80018f4:	4094      	lsls	r4, r2
 80018f6:	e652      	b.n	800159e <__aeabi_dmul+0x1ba>
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	e604      	b.n	8001506 <__aeabi_dmul+0x122>
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <__aeabi_dmul+0x58c>)
 80018fe:	0021      	movs	r1, r4
 8001900:	469c      	mov	ip, r3
 8001902:	0003      	movs	r3, r0
 8001904:	9d01      	ldr	r5, [sp, #4]
 8001906:	40d3      	lsrs	r3, r2
 8001908:	4465      	add	r5, ip
 800190a:	40a9      	lsls	r1, r5
 800190c:	4319      	orrs	r1, r3
 800190e:	0003      	movs	r3, r0
 8001910:	40ab      	lsls	r3, r5
 8001912:	1e58      	subs	r0, r3, #1
 8001914:	4183      	sbcs	r3, r0
 8001916:	4319      	orrs	r1, r3
 8001918:	0008      	movs	r0, r1
 800191a:	40d4      	lsrs	r4, r2
 800191c:	074b      	lsls	r3, r1, #29
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x550>
 8001920:	230f      	movs	r3, #15
 8001922:	400b      	ands	r3, r1
 8001924:	2b04      	cmp	r3, #4
 8001926:	d005      	beq.n	8001934 <__aeabi_dmul+0x550>
 8001928:	1d0b      	adds	r3, r1, #4
 800192a:	428b      	cmp	r3, r1
 800192c:	4180      	sbcs	r0, r0
 800192e:	4240      	negs	r0, r0
 8001930:	1824      	adds	r4, r4, r0
 8001932:	0018      	movs	r0, r3
 8001934:	0223      	lsls	r3, r4, #8
 8001936:	d400      	bmi.n	800193a <__aeabi_dmul+0x556>
 8001938:	e6d6      	b.n	80016e8 <__aeabi_dmul+0x304>
 800193a:	2301      	movs	r3, #1
 800193c:	2400      	movs	r4, #0
 800193e:	2200      	movs	r2, #0
 8001940:	e5a6      	b.n	8001490 <__aeabi_dmul+0xac>
 8001942:	290f      	cmp	r1, #15
 8001944:	d1aa      	bne.n	800189c <__aeabi_dmul+0x4b8>
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	4652      	mov	r2, sl
 800194a:	031b      	lsls	r3, r3, #12
 800194c:	421a      	tst	r2, r3
 800194e:	d0a9      	beq.n	80018a4 <__aeabi_dmul+0x4c0>
 8001950:	421c      	tst	r4, r3
 8001952:	d1a7      	bne.n	80018a4 <__aeabi_dmul+0x4c0>
 8001954:	431c      	orrs	r4, r3
 8001956:	9b00      	ldr	r3, [sp, #0]
 8001958:	0002      	movs	r2, r0
 800195a:	469b      	mov	fp, r3
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <__aeabi_dmul+0x588>)
 800195e:	e597      	b.n	8001490 <__aeabi_dmul+0xac>
 8001960:	2400      	movs	r4, #0
 8001962:	e6c1      	b.n	80016e8 <__aeabi_dmul+0x304>
 8001964:	2400      	movs	r4, #0
 8001966:	4b01      	ldr	r3, [pc, #4]	@ (800196c <__aeabi_dmul+0x588>)
 8001968:	0022      	movs	r2, r4
 800196a:	e591      	b.n	8001490 <__aeabi_dmul+0xac>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	0000041e 	.word	0x0000041e

08001974 <__aeabi_dsub>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	464e      	mov	r6, r9
 8001978:	4645      	mov	r5, r8
 800197a:	46de      	mov	lr, fp
 800197c:	4657      	mov	r7, sl
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	b085      	sub	sp, #20
 8001982:	9000      	str	r0, [sp, #0]
 8001984:	9101      	str	r1, [sp, #4]
 8001986:	030c      	lsls	r4, r1, #12
 8001988:	004f      	lsls	r7, r1, #1
 800198a:	0fce      	lsrs	r6, r1, #31
 800198c:	0a61      	lsrs	r1, r4, #9
 800198e:	9c00      	ldr	r4, [sp, #0]
 8001990:	46b0      	mov	r8, r6
 8001992:	0f64      	lsrs	r4, r4, #29
 8001994:	430c      	orrs	r4, r1
 8001996:	9900      	ldr	r1, [sp, #0]
 8001998:	0d7f      	lsrs	r7, r7, #21
 800199a:	00c8      	lsls	r0, r1, #3
 800199c:	0011      	movs	r1, r2
 800199e:	001a      	movs	r2, r3
 80019a0:	031b      	lsls	r3, r3, #12
 80019a2:	469c      	mov	ip, r3
 80019a4:	9100      	str	r1, [sp, #0]
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	0051      	lsls	r1, r2, #1
 80019aa:	0d4b      	lsrs	r3, r1, #21
 80019ac:	4699      	mov	r9, r3
 80019ae:	9b01      	ldr	r3, [sp, #4]
 80019b0:	9d00      	ldr	r5, [sp, #0]
 80019b2:	0fd9      	lsrs	r1, r3, #31
 80019b4:	4663      	mov	r3, ip
 80019b6:	0f6a      	lsrs	r2, r5, #29
 80019b8:	0a5b      	lsrs	r3, r3, #9
 80019ba:	4313      	orrs	r3, r2
 80019bc:	00ea      	lsls	r2, r5, #3
 80019be:	4694      	mov	ip, r2
 80019c0:	4693      	mov	fp, r2
 80019c2:	4ac1      	ldr	r2, [pc, #772]	@ (8001cc8 <__aeabi_dsub+0x354>)
 80019c4:	9003      	str	r0, [sp, #12]
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	4591      	cmp	r9, r2
 80019ca:	d100      	bne.n	80019ce <__aeabi_dsub+0x5a>
 80019cc:	e0cd      	b.n	8001b6a <__aeabi_dsub+0x1f6>
 80019ce:	2501      	movs	r5, #1
 80019d0:	4069      	eors	r1, r5
 80019d2:	464d      	mov	r5, r9
 80019d4:	1b7d      	subs	r5, r7, r5
 80019d6:	46aa      	mov	sl, r5
 80019d8:	428e      	cmp	r6, r1
 80019da:	d100      	bne.n	80019de <__aeabi_dsub+0x6a>
 80019dc:	e080      	b.n	8001ae0 <__aeabi_dsub+0x16c>
 80019de:	2d00      	cmp	r5, #0
 80019e0:	dc00      	bgt.n	80019e4 <__aeabi_dsub+0x70>
 80019e2:	e335      	b.n	8002050 <__aeabi_dsub+0x6dc>
 80019e4:	4649      	mov	r1, r9
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x78>
 80019ea:	e0df      	b.n	8001bac <__aeabi_dsub+0x238>
 80019ec:	4297      	cmp	r7, r2
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x7e>
 80019f0:	e194      	b.n	8001d1c <__aeabi_dsub+0x3a8>
 80019f2:	4652      	mov	r2, sl
 80019f4:	2501      	movs	r5, #1
 80019f6:	2a38      	cmp	r2, #56	@ 0x38
 80019f8:	dc19      	bgt.n	8001a2e <__aeabi_dsub+0xba>
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	9b02      	ldr	r3, [sp, #8]
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	4313      	orrs	r3, r2
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	4652      	mov	r2, sl
 8001a06:	2a1f      	cmp	r2, #31
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_dsub+0x98>
 8001a0a:	e1e3      	b.n	8001dd4 <__aeabi_dsub+0x460>
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	2220      	movs	r2, #32
 8001a10:	4661      	mov	r1, ip
 8001a12:	9d02      	ldr	r5, [sp, #8]
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	4095      	lsls	r5, r2
 8001a18:	40d9      	lsrs	r1, r3
 8001a1a:	430d      	orrs	r5, r1
 8001a1c:	4661      	mov	r1, ip
 8001a1e:	4091      	lsls	r1, r2
 8001a20:	000a      	movs	r2, r1
 8001a22:	1e51      	subs	r1, r2, #1
 8001a24:	418a      	sbcs	r2, r1
 8001a26:	4315      	orrs	r5, r2
 8001a28:	9a02      	ldr	r2, [sp, #8]
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	1aa4      	subs	r4, r4, r2
 8001a2e:	1b45      	subs	r5, r0, r5
 8001a30:	42a8      	cmp	r0, r5
 8001a32:	4180      	sbcs	r0, r0
 8001a34:	4240      	negs	r0, r0
 8001a36:	1a24      	subs	r4, r4, r0
 8001a38:	0223      	lsls	r3, r4, #8
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dsub+0xca>
 8001a3c:	e13d      	b.n	8001cba <__aeabi_dsub+0x346>
 8001a3e:	0264      	lsls	r4, r4, #9
 8001a40:	0a64      	lsrs	r4, r4, #9
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0xd4>
 8001a46:	e147      	b.n	8001cd8 <__aeabi_dsub+0x364>
 8001a48:	0020      	movs	r0, r4
 8001a4a:	f000 fbbb 	bl	80021c4 <__clzsi2>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	3b08      	subs	r3, #8
 8001a52:	2120      	movs	r1, #32
 8001a54:	0028      	movs	r0, r5
 8001a56:	1aca      	subs	r2, r1, r3
 8001a58:	40d0      	lsrs	r0, r2
 8001a5a:	409c      	lsls	r4, r3
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	409d      	lsls	r5, r3
 8001a60:	4322      	orrs	r2, r4
 8001a62:	429f      	cmp	r7, r3
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dsub+0xf4>
 8001a66:	e177      	b.n	8001d58 <__aeabi_dsub+0x3e4>
 8001a68:	1bd8      	subs	r0, r3, r7
 8001a6a:	3001      	adds	r0, #1
 8001a6c:	1a09      	subs	r1, r1, r0
 8001a6e:	002c      	movs	r4, r5
 8001a70:	408d      	lsls	r5, r1
 8001a72:	40c4      	lsrs	r4, r0
 8001a74:	1e6b      	subs	r3, r5, #1
 8001a76:	419d      	sbcs	r5, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	40c2      	lsrs	r2, r0
 8001a7c:	408b      	lsls	r3, r1
 8001a7e:	4325      	orrs	r5, r4
 8001a80:	2700      	movs	r7, #0
 8001a82:	0014      	movs	r4, r2
 8001a84:	431d      	orrs	r5, r3
 8001a86:	076b      	lsls	r3, r5, #29
 8001a88:	d009      	beq.n	8001a9e <__aeabi_dsub+0x12a>
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	402b      	ands	r3, r5
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d005      	beq.n	8001a9e <__aeabi_dsub+0x12a>
 8001a92:	1d2b      	adds	r3, r5, #4
 8001a94:	42ab      	cmp	r3, r5
 8001a96:	41ad      	sbcs	r5, r5
 8001a98:	426d      	negs	r5, r5
 8001a9a:	1964      	adds	r4, r4, r5
 8001a9c:	001d      	movs	r5, r3
 8001a9e:	0223      	lsls	r3, r4, #8
 8001aa0:	d400      	bmi.n	8001aa4 <__aeabi_dsub+0x130>
 8001aa2:	e140      	b.n	8001d26 <__aeabi_dsub+0x3b2>
 8001aa4:	4a88      	ldr	r2, [pc, #544]	@ (8001cc8 <__aeabi_dsub+0x354>)
 8001aa6:	3701      	adds	r7, #1
 8001aa8:	4297      	cmp	r7, r2
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dsub+0x13a>
 8001aac:	e101      	b.n	8001cb2 <__aeabi_dsub+0x33e>
 8001aae:	2601      	movs	r6, #1
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	4986      	ldr	r1, [pc, #536]	@ (8001ccc <__aeabi_dsub+0x358>)
 8001ab4:	08ed      	lsrs	r5, r5, #3
 8001ab6:	4021      	ands	r1, r4
 8001ab8:	074a      	lsls	r2, r1, #29
 8001aba:	432a      	orrs	r2, r5
 8001abc:	057c      	lsls	r4, r7, #21
 8001abe:	024d      	lsls	r5, r1, #9
 8001ac0:	0b2d      	lsrs	r5, r5, #12
 8001ac2:	0d64      	lsrs	r4, r4, #21
 8001ac4:	401e      	ands	r6, r3
 8001ac6:	0524      	lsls	r4, r4, #20
 8001ac8:	432c      	orrs	r4, r5
 8001aca:	07f6      	lsls	r6, r6, #31
 8001acc:	4334      	orrs	r4, r6
 8001ace:	0010      	movs	r0, r2
 8001ad0:	0021      	movs	r1, r4
 8001ad2:	b005      	add	sp, #20
 8001ad4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ad6:	46bb      	mov	fp, r7
 8001ad8:	46b2      	mov	sl, r6
 8001ada:	46a9      	mov	r9, r5
 8001adc:	46a0      	mov	r8, r4
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	2d00      	cmp	r5, #0
 8001ae2:	dc00      	bgt.n	8001ae6 <__aeabi_dsub+0x172>
 8001ae4:	e2d0      	b.n	8002088 <__aeabi_dsub+0x714>
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	2900      	cmp	r1, #0
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x17a>
 8001aec:	e0d4      	b.n	8001c98 <__aeabi_dsub+0x324>
 8001aee:	4661      	mov	r1, ip
 8001af0:	9b02      	ldr	r3, [sp, #8]
 8001af2:	4319      	orrs	r1, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x184>
 8001af6:	e12b      	b.n	8001d50 <__aeabi_dsub+0x3dc>
 8001af8:	1e69      	subs	r1, r5, #1
 8001afa:	2d01      	cmp	r5, #1
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x18c>
 8001afe:	e1d9      	b.n	8001eb4 <__aeabi_dsub+0x540>
 8001b00:	4295      	cmp	r5, r2
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x192>
 8001b04:	e10a      	b.n	8001d1c <__aeabi_dsub+0x3a8>
 8001b06:	2501      	movs	r5, #1
 8001b08:	2938      	cmp	r1, #56	@ 0x38
 8001b0a:	dc17      	bgt.n	8001b3c <__aeabi_dsub+0x1c8>
 8001b0c:	468a      	mov	sl, r1
 8001b0e:	4653      	mov	r3, sl
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0x1a2>
 8001b14:	e1e7      	b.n	8001ee6 <__aeabi_dsub+0x572>
 8001b16:	2220      	movs	r2, #32
 8001b18:	1ad2      	subs	r2, r2, r3
 8001b1a:	9b02      	ldr	r3, [sp, #8]
 8001b1c:	4661      	mov	r1, ip
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	001d      	movs	r5, r3
 8001b22:	4653      	mov	r3, sl
 8001b24:	40d9      	lsrs	r1, r3
 8001b26:	4663      	mov	r3, ip
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	430d      	orrs	r5, r1
 8001b2e:	1e51      	subs	r1, r2, #1
 8001b30:	418a      	sbcs	r2, r1
 8001b32:	4653      	mov	r3, sl
 8001b34:	4315      	orrs	r5, r2
 8001b36:	9a02      	ldr	r2, [sp, #8]
 8001b38:	40da      	lsrs	r2, r3
 8001b3a:	18a4      	adds	r4, r4, r2
 8001b3c:	182d      	adds	r5, r5, r0
 8001b3e:	4285      	cmp	r5, r0
 8001b40:	4180      	sbcs	r0, r0
 8001b42:	4240      	negs	r0, r0
 8001b44:	1824      	adds	r4, r4, r0
 8001b46:	0223      	lsls	r3, r4, #8
 8001b48:	d400      	bmi.n	8001b4c <__aeabi_dsub+0x1d8>
 8001b4a:	e0b6      	b.n	8001cba <__aeabi_dsub+0x346>
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc8 <__aeabi_dsub+0x354>)
 8001b4e:	3701      	adds	r7, #1
 8001b50:	429f      	cmp	r7, r3
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x1e2>
 8001b54:	e0ad      	b.n	8001cb2 <__aeabi_dsub+0x33e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b5c      	ldr	r3, [pc, #368]	@ (8001ccc <__aeabi_dsub+0x358>)
 8001b5a:	086a      	lsrs	r2, r5, #1
 8001b5c:	401c      	ands	r4, r3
 8001b5e:	4029      	ands	r1, r5
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07e5      	lsls	r5, r4, #31
 8001b64:	4315      	orrs	r5, r2
 8001b66:	0864      	lsrs	r4, r4, #1
 8001b68:	e78d      	b.n	8001a86 <__aeabi_dsub+0x112>
 8001b6a:	4a59      	ldr	r2, [pc, #356]	@ (8001cd0 <__aeabi_dsub+0x35c>)
 8001b6c:	9b02      	ldr	r3, [sp, #8]
 8001b6e:	4692      	mov	sl, r2
 8001b70:	4662      	mov	r2, ip
 8001b72:	44ba      	add	sl, r7
 8001b74:	431a      	orrs	r2, r3
 8001b76:	d02c      	beq.n	8001bd2 <__aeabi_dsub+0x25e>
 8001b78:	428e      	cmp	r6, r1
 8001b7a:	d02e      	beq.n	8001bda <__aeabi_dsub+0x266>
 8001b7c:	4652      	mov	r2, sl
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d060      	beq.n	8001c44 <__aeabi_dsub+0x2d0>
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dsub+0x214>
 8001b86:	e0db      	b.n	8001d40 <__aeabi_dsub+0x3cc>
 8001b88:	4663      	mov	r3, ip
 8001b8a:	000e      	movs	r6, r1
 8001b8c:	9c02      	ldr	r4, [sp, #8]
 8001b8e:	08d8      	lsrs	r0, r3, #3
 8001b90:	0762      	lsls	r2, r4, #29
 8001b92:	4302      	orrs	r2, r0
 8001b94:	08e4      	lsrs	r4, r4, #3
 8001b96:	0013      	movs	r3, r2
 8001b98:	4323      	orrs	r3, r4
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x22a>
 8001b9c:	e254      	b.n	8002048 <__aeabi_dsub+0x6d4>
 8001b9e:	2580      	movs	r5, #128	@ 0x80
 8001ba0:	032d      	lsls	r5, r5, #12
 8001ba2:	4325      	orrs	r5, r4
 8001ba4:	032d      	lsls	r5, r5, #12
 8001ba6:	4c48      	ldr	r4, [pc, #288]	@ (8001cc8 <__aeabi_dsub+0x354>)
 8001ba8:	0b2d      	lsrs	r5, r5, #12
 8001baa:	e78c      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8001bac:	4661      	mov	r1, ip
 8001bae:	9b02      	ldr	r3, [sp, #8]
 8001bb0:	4319      	orrs	r1, r3
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x242>
 8001bb4:	e0cc      	b.n	8001d50 <__aeabi_dsub+0x3dc>
 8001bb6:	0029      	movs	r1, r5
 8001bb8:	3901      	subs	r1, #1
 8001bba:	2d01      	cmp	r5, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x24c>
 8001bbe:	e188      	b.n	8001ed2 <__aeabi_dsub+0x55e>
 8001bc0:	4295      	cmp	r5, r2
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x252>
 8001bc4:	e0aa      	b.n	8001d1c <__aeabi_dsub+0x3a8>
 8001bc6:	2501      	movs	r5, #1
 8001bc8:	2938      	cmp	r1, #56	@ 0x38
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dsub+0x25a>
 8001bcc:	e72f      	b.n	8001a2e <__aeabi_dsub+0xba>
 8001bce:	468a      	mov	sl, r1
 8001bd0:	e718      	b.n	8001a04 <__aeabi_dsub+0x90>
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4051      	eors	r1, r2
 8001bd6:	428e      	cmp	r6, r1
 8001bd8:	d1d0      	bne.n	8001b7c <__aeabi_dsub+0x208>
 8001bda:	4653      	mov	r3, sl
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x26e>
 8001be0:	e0be      	b.n	8001d60 <__aeabi_dsub+0x3ec>
 8001be2:	2f00      	cmp	r7, #0
 8001be4:	d000      	beq.n	8001be8 <__aeabi_dsub+0x274>
 8001be6:	e138      	b.n	8001e5a <__aeabi_dsub+0x4e6>
 8001be8:	46ca      	mov	sl, r9
 8001bea:	0022      	movs	r2, r4
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x27e>
 8001bf0:	e1e2      	b.n	8001fb8 <__aeabi_dsub+0x644>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	1e59      	subs	r1, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x288>
 8001bfa:	e20d      	b.n	8002018 <__aeabi_dsub+0x6a4>
 8001bfc:	4a32      	ldr	r2, [pc, #200]	@ (8001cc8 <__aeabi_dsub+0x354>)
 8001bfe:	4592      	cmp	sl, r2
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x290>
 8001c02:	e1d2      	b.n	8001faa <__aeabi_dsub+0x636>
 8001c04:	2701      	movs	r7, #1
 8001c06:	2938      	cmp	r1, #56	@ 0x38
 8001c08:	dc13      	bgt.n	8001c32 <__aeabi_dsub+0x2be>
 8001c0a:	291f      	cmp	r1, #31
 8001c0c:	dd00      	ble.n	8001c10 <__aeabi_dsub+0x29c>
 8001c0e:	e1ee      	b.n	8001fee <__aeabi_dsub+0x67a>
 8001c10:	2220      	movs	r2, #32
 8001c12:	9b02      	ldr	r3, [sp, #8]
 8001c14:	1a52      	subs	r2, r2, r1
 8001c16:	0025      	movs	r5, r4
 8001c18:	0007      	movs	r7, r0
 8001c1a:	469a      	mov	sl, r3
 8001c1c:	40cc      	lsrs	r4, r1
 8001c1e:	4090      	lsls	r0, r2
 8001c20:	4095      	lsls	r5, r2
 8001c22:	40cf      	lsrs	r7, r1
 8001c24:	44a2      	add	sl, r4
 8001c26:	1e42      	subs	r2, r0, #1
 8001c28:	4190      	sbcs	r0, r2
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	432f      	orrs	r7, r5
 8001c2e:	4307      	orrs	r7, r0
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	003d      	movs	r5, r7
 8001c34:	4465      	add	r5, ip
 8001c36:	4565      	cmp	r5, ip
 8001c38:	4192      	sbcs	r2, r2
 8001c3a:	9b02      	ldr	r3, [sp, #8]
 8001c3c:	4252      	negs	r2, r2
 8001c3e:	464f      	mov	r7, r9
 8001c40:	18d4      	adds	r4, r2, r3
 8001c42:	e780      	b.n	8001b46 <__aeabi_dsub+0x1d2>
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <__aeabi_dsub+0x360>)
 8001c46:	1c7d      	adds	r5, r7, #1
 8001c48:	4215      	tst	r5, r2
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x2da>
 8001c4c:	e0aa      	b.n	8001da4 <__aeabi_dsub+0x430>
 8001c4e:	4662      	mov	r2, ip
 8001c50:	0025      	movs	r5, r4
 8001c52:	9b02      	ldr	r3, [sp, #8]
 8001c54:	4305      	orrs	r5, r0
 8001c56:	431a      	orrs	r2, r3
 8001c58:	2f00      	cmp	r7, #0
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x2ea>
 8001c5c:	e0f5      	b.n	8001e4a <__aeabi_dsub+0x4d6>
 8001c5e:	2d00      	cmp	r5, #0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x2f0>
 8001c62:	e16b      	b.n	8001f3c <__aeabi_dsub+0x5c8>
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x2f6>
 8001c68:	e152      	b.n	8001f10 <__aeabi_dsub+0x59c>
 8001c6a:	4663      	mov	r3, ip
 8001c6c:	1ac5      	subs	r5, r0, r3
 8001c6e:	9b02      	ldr	r3, [sp, #8]
 8001c70:	1ae2      	subs	r2, r4, r3
 8001c72:	42a8      	cmp	r0, r5
 8001c74:	419b      	sbcs	r3, r3
 8001c76:	425b      	negs	r3, r3
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	021a      	lsls	r2, r3, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0x30c>
 8001c7e:	e1d5      	b.n	800202c <__aeabi_dsub+0x6b8>
 8001c80:	4663      	mov	r3, ip
 8001c82:	1a1d      	subs	r5, r3, r0
 8001c84:	45ac      	cmp	ip, r5
 8001c86:	4192      	sbcs	r2, r2
 8001c88:	2601      	movs	r6, #1
 8001c8a:	9b02      	ldr	r3, [sp, #8]
 8001c8c:	4252      	negs	r2, r2
 8001c8e:	1b1c      	subs	r4, r3, r4
 8001c90:	4688      	mov	r8, r1
 8001c92:	1aa4      	subs	r4, r4, r2
 8001c94:	400e      	ands	r6, r1
 8001c96:	e6f6      	b.n	8001a86 <__aeabi_dsub+0x112>
 8001c98:	4297      	cmp	r7, r2
 8001c9a:	d03f      	beq.n	8001d1c <__aeabi_dsub+0x3a8>
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	2501      	movs	r5, #1
 8001ca0:	2a38      	cmp	r2, #56	@ 0x38
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_dsub+0x332>
 8001ca4:	e74a      	b.n	8001b3c <__aeabi_dsub+0x1c8>
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	9b02      	ldr	r3, [sp, #8]
 8001caa:	0412      	lsls	r2, r2, #16
 8001cac:	4313      	orrs	r3, r2
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	e72d      	b.n	8001b0e <__aeabi_dsub+0x19a>
 8001cb2:	003c      	movs	r4, r7
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	e705      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	402b      	ands	r3, r5
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x350>
 8001cc2:	e6e2      	b.n	8001a8a <__aeabi_dsub+0x116>
 8001cc4:	e06b      	b.n	8001d9e <__aeabi_dsub+0x42a>
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	000007ff 	.word	0x000007ff
 8001ccc:	ff7fffff 	.word	0xff7fffff
 8001cd0:	fffff801 	.word	0xfffff801
 8001cd4:	000007fe 	.word	0x000007fe
 8001cd8:	0028      	movs	r0, r5
 8001cda:	f000 fa73 	bl	80021c4 <__clzsi2>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	2b1f      	cmp	r3, #31
 8001ce4:	dc00      	bgt.n	8001ce8 <__aeabi_dsub+0x374>
 8001ce6:	e6b4      	b.n	8001a52 <__aeabi_dsub+0xde>
 8001ce8:	002a      	movs	r2, r5
 8001cea:	3808      	subs	r0, #8
 8001cec:	4082      	lsls	r2, r0
 8001cee:	429f      	cmp	r7, r3
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_dsub+0x380>
 8001cf2:	e0b9      	b.n	8001e68 <__aeabi_dsub+0x4f4>
 8001cf4:	1bdb      	subs	r3, r3, r7
 8001cf6:	1c58      	adds	r0, r3, #1
 8001cf8:	281f      	cmp	r0, #31
 8001cfa:	dc00      	bgt.n	8001cfe <__aeabi_dsub+0x38a>
 8001cfc:	e1a0      	b.n	8002040 <__aeabi_dsub+0x6cc>
 8001cfe:	0015      	movs	r5, r2
 8001d00:	3b1f      	subs	r3, #31
 8001d02:	40dd      	lsrs	r5, r3
 8001d04:	2820      	cmp	r0, #32
 8001d06:	d005      	beq.n	8001d14 <__aeabi_dsub+0x3a0>
 8001d08:	2340      	movs	r3, #64	@ 0x40
 8001d0a:	1a1b      	subs	r3, r3, r0
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	1e53      	subs	r3, r2, #1
 8001d10:	419a      	sbcs	r2, r3
 8001d12:	4315      	orrs	r5, r2
 8001d14:	2307      	movs	r3, #7
 8001d16:	2700      	movs	r7, #0
 8001d18:	402b      	ands	r3, r5
 8001d1a:	e7d0      	b.n	8001cbe <__aeabi_dsub+0x34a>
 8001d1c:	08c0      	lsrs	r0, r0, #3
 8001d1e:	0762      	lsls	r2, r4, #29
 8001d20:	4302      	orrs	r2, r0
 8001d22:	08e4      	lsrs	r4, r4, #3
 8001d24:	e737      	b.n	8001b96 <__aeabi_dsub+0x222>
 8001d26:	08ea      	lsrs	r2, r5, #3
 8001d28:	0763      	lsls	r3, r4, #29
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	4bd3      	ldr	r3, [pc, #844]	@ (800207c <__aeabi_dsub+0x708>)
 8001d2e:	08e4      	lsrs	r4, r4, #3
 8001d30:	429f      	cmp	r7, r3
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x3c2>
 8001d34:	e72f      	b.n	8001b96 <__aeabi_dsub+0x222>
 8001d36:	0324      	lsls	r4, r4, #12
 8001d38:	0b25      	lsrs	r5, r4, #12
 8001d3a:	057c      	lsls	r4, r7, #21
 8001d3c:	0d64      	lsrs	r4, r4, #21
 8001d3e:	e6c2      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8001d40:	46ca      	mov	sl, r9
 8001d42:	0022      	movs	r2, r4
 8001d44:	4302      	orrs	r2, r0
 8001d46:	d158      	bne.n	8001dfa <__aeabi_dsub+0x486>
 8001d48:	4663      	mov	r3, ip
 8001d4a:	000e      	movs	r6, r1
 8001d4c:	9c02      	ldr	r4, [sp, #8]
 8001d4e:	9303      	str	r3, [sp, #12]
 8001d50:	9b03      	ldr	r3, [sp, #12]
 8001d52:	4657      	mov	r7, sl
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	e7e7      	b.n	8001d28 <__aeabi_dsub+0x3b4>
 8001d58:	4cc9      	ldr	r4, [pc, #804]	@ (8002080 <__aeabi_dsub+0x70c>)
 8001d5a:	1aff      	subs	r7, r7, r3
 8001d5c:	4014      	ands	r4, r2
 8001d5e:	e692      	b.n	8001a86 <__aeabi_dsub+0x112>
 8001d60:	4dc8      	ldr	r5, [pc, #800]	@ (8002084 <__aeabi_dsub+0x710>)
 8001d62:	1c7a      	adds	r2, r7, #1
 8001d64:	422a      	tst	r2, r5
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x3f6>
 8001d68:	e084      	b.n	8001e74 <__aeabi_dsub+0x500>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	2f00      	cmp	r7, #0
 8001d70:	d000      	beq.n	8001d74 <__aeabi_dsub+0x400>
 8001d72:	e0ef      	b.n	8001f54 <__aeabi_dsub+0x5e0>
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x406>
 8001d78:	e0e5      	b.n	8001f46 <__aeabi_dsub+0x5d2>
 8001d7a:	4662      	mov	r2, ip
 8001d7c:	9902      	ldr	r1, [sp, #8]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x410>
 8001d82:	e0c5      	b.n	8001f10 <__aeabi_dsub+0x59c>
 8001d84:	4663      	mov	r3, ip
 8001d86:	18c5      	adds	r5, r0, r3
 8001d88:	468c      	mov	ip, r1
 8001d8a:	4285      	cmp	r5, r0
 8001d8c:	4180      	sbcs	r0, r0
 8001d8e:	4464      	add	r4, ip
 8001d90:	4240      	negs	r0, r0
 8001d92:	1824      	adds	r4, r4, r0
 8001d94:	0223      	lsls	r3, r4, #8
 8001d96:	d502      	bpl.n	8001d9e <__aeabi_dsub+0x42a>
 8001d98:	4bb9      	ldr	r3, [pc, #740]	@ (8002080 <__aeabi_dsub+0x70c>)
 8001d9a:	3701      	adds	r7, #1
 8001d9c:	401c      	ands	r4, r3
 8001d9e:	46ba      	mov	sl, r7
 8001da0:	9503      	str	r5, [sp, #12]
 8001da2:	e7d5      	b.n	8001d50 <__aeabi_dsub+0x3dc>
 8001da4:	4662      	mov	r2, ip
 8001da6:	1a85      	subs	r5, r0, r2
 8001da8:	42a8      	cmp	r0, r5
 8001daa:	4192      	sbcs	r2, r2
 8001dac:	4252      	negs	r2, r2
 8001dae:	4691      	mov	r9, r2
 8001db0:	9b02      	ldr	r3, [sp, #8]
 8001db2:	1ae3      	subs	r3, r4, r3
 8001db4:	001a      	movs	r2, r3
 8001db6:	464b      	mov	r3, r9
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	0013      	movs	r3, r2
 8001dbc:	4691      	mov	r9, r2
 8001dbe:	021a      	lsls	r2, r3, #8
 8001dc0:	d46c      	bmi.n	8001e9c <__aeabi_dsub+0x528>
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	464c      	mov	r4, r9
 8001dc6:	432a      	orrs	r2, r5
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x458>
 8001dca:	e63a      	b.n	8001a42 <__aeabi_dsub+0xce>
 8001dcc:	2600      	movs	r6, #0
 8001dce:	2400      	movs	r4, #0
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	e678      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8001dd4:	9902      	ldr	r1, [sp, #8]
 8001dd6:	4653      	mov	r3, sl
 8001dd8:	000d      	movs	r5, r1
 8001dda:	3a20      	subs	r2, #32
 8001ddc:	40d5      	lsrs	r5, r2
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d006      	beq.n	8001df0 <__aeabi_dsub+0x47c>
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	1ad2      	subs	r2, r2, r3
 8001de6:	000b      	movs	r3, r1
 8001de8:	4093      	lsls	r3, r2
 8001dea:	4662      	mov	r2, ip
 8001dec:	431a      	orrs	r2, r3
 8001dee:	4693      	mov	fp, r2
 8001df0:	465b      	mov	r3, fp
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	4193      	sbcs	r3, r2
 8001df6:	431d      	orrs	r5, r3
 8001df8:	e619      	b.n	8001a2e <__aeabi_dsub+0xba>
 8001dfa:	4653      	mov	r3, sl
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x490>
 8001e02:	e0c6      	b.n	8001f92 <__aeabi_dsub+0x61e>
 8001e04:	4e9d      	ldr	r6, [pc, #628]	@ (800207c <__aeabi_dsub+0x708>)
 8001e06:	45b2      	cmp	sl, r6
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x498>
 8001e0a:	e6bd      	b.n	8001b88 <__aeabi_dsub+0x214>
 8001e0c:	4688      	mov	r8, r1
 8001e0e:	000e      	movs	r6, r1
 8001e10:	2501      	movs	r5, #1
 8001e12:	2a38      	cmp	r2, #56	@ 0x38
 8001e14:	dc10      	bgt.n	8001e38 <__aeabi_dsub+0x4c4>
 8001e16:	2a1f      	cmp	r2, #31
 8001e18:	dc7f      	bgt.n	8001f1a <__aeabi_dsub+0x5a6>
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	0025      	movs	r5, r4
 8001e1e:	1a89      	subs	r1, r1, r2
 8001e20:	0007      	movs	r7, r0
 8001e22:	4088      	lsls	r0, r1
 8001e24:	408d      	lsls	r5, r1
 8001e26:	40d7      	lsrs	r7, r2
 8001e28:	40d4      	lsrs	r4, r2
 8001e2a:	1e41      	subs	r1, r0, #1
 8001e2c:	4188      	sbcs	r0, r1
 8001e2e:	9b02      	ldr	r3, [sp, #8]
 8001e30:	433d      	orrs	r5, r7
 8001e32:	1b1b      	subs	r3, r3, r4
 8001e34:	4305      	orrs	r5, r0
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	4662      	mov	r2, ip
 8001e3a:	1b55      	subs	r5, r2, r5
 8001e3c:	45ac      	cmp	ip, r5
 8001e3e:	4192      	sbcs	r2, r2
 8001e40:	9b02      	ldr	r3, [sp, #8]
 8001e42:	4252      	negs	r2, r2
 8001e44:	464f      	mov	r7, r9
 8001e46:	1a9c      	subs	r4, r3, r2
 8001e48:	e5f6      	b.n	8001a38 <__aeabi_dsub+0xc4>
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x4dc>
 8001e4e:	e0b7      	b.n	8001fc0 <__aeabi_dsub+0x64c>
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x4e2>
 8001e54:	e0f0      	b.n	8002038 <__aeabi_dsub+0x6c4>
 8001e56:	2601      	movs	r6, #1
 8001e58:	400e      	ands	r6, r1
 8001e5a:	4663      	mov	r3, ip
 8001e5c:	9802      	ldr	r0, [sp, #8]
 8001e5e:	08d9      	lsrs	r1, r3, #3
 8001e60:	0742      	lsls	r2, r0, #29
 8001e62:	430a      	orrs	r2, r1
 8001e64:	08c4      	lsrs	r4, r0, #3
 8001e66:	e696      	b.n	8001b96 <__aeabi_dsub+0x222>
 8001e68:	4c85      	ldr	r4, [pc, #532]	@ (8002080 <__aeabi_dsub+0x70c>)
 8001e6a:	1aff      	subs	r7, r7, r3
 8001e6c:	4014      	ands	r4, r2
 8001e6e:	0762      	lsls	r2, r4, #29
 8001e70:	08e4      	lsrs	r4, r4, #3
 8001e72:	e760      	b.n	8001d36 <__aeabi_dsub+0x3c2>
 8001e74:	4981      	ldr	r1, [pc, #516]	@ (800207c <__aeabi_dsub+0x708>)
 8001e76:	428a      	cmp	r2, r1
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x508>
 8001e7a:	e0c9      	b.n	8002010 <__aeabi_dsub+0x69c>
 8001e7c:	4663      	mov	r3, ip
 8001e7e:	18c1      	adds	r1, r0, r3
 8001e80:	4281      	cmp	r1, r0
 8001e82:	4180      	sbcs	r0, r0
 8001e84:	9b02      	ldr	r3, [sp, #8]
 8001e86:	4240      	negs	r0, r0
 8001e88:	18e3      	adds	r3, r4, r3
 8001e8a:	181b      	adds	r3, r3, r0
 8001e8c:	07dd      	lsls	r5, r3, #31
 8001e8e:	085c      	lsrs	r4, r3, #1
 8001e90:	2307      	movs	r3, #7
 8001e92:	0849      	lsrs	r1, r1, #1
 8001e94:	430d      	orrs	r5, r1
 8001e96:	0017      	movs	r7, r2
 8001e98:	402b      	ands	r3, r5
 8001e9a:	e710      	b.n	8001cbe <__aeabi_dsub+0x34a>
 8001e9c:	4663      	mov	r3, ip
 8001e9e:	1a1d      	subs	r5, r3, r0
 8001ea0:	45ac      	cmp	ip, r5
 8001ea2:	4192      	sbcs	r2, r2
 8001ea4:	2601      	movs	r6, #1
 8001ea6:	9b02      	ldr	r3, [sp, #8]
 8001ea8:	4252      	negs	r2, r2
 8001eaa:	1b1c      	subs	r4, r3, r4
 8001eac:	4688      	mov	r8, r1
 8001eae:	1aa4      	subs	r4, r4, r2
 8001eb0:	400e      	ands	r6, r1
 8001eb2:	e5c6      	b.n	8001a42 <__aeabi_dsub+0xce>
 8001eb4:	4663      	mov	r3, ip
 8001eb6:	18c5      	adds	r5, r0, r3
 8001eb8:	9b02      	ldr	r3, [sp, #8]
 8001eba:	4285      	cmp	r5, r0
 8001ebc:	4180      	sbcs	r0, r0
 8001ebe:	469c      	mov	ip, r3
 8001ec0:	4240      	negs	r0, r0
 8001ec2:	4464      	add	r4, ip
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	2701      	movs	r7, #1
 8001ec8:	0223      	lsls	r3, r4, #8
 8001eca:	d400      	bmi.n	8001ece <__aeabi_dsub+0x55a>
 8001ecc:	e6f5      	b.n	8001cba <__aeabi_dsub+0x346>
 8001ece:	2702      	movs	r7, #2
 8001ed0:	e641      	b.n	8001b56 <__aeabi_dsub+0x1e2>
 8001ed2:	4663      	mov	r3, ip
 8001ed4:	1ac5      	subs	r5, r0, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	4180      	sbcs	r0, r0
 8001eda:	9b02      	ldr	r3, [sp, #8]
 8001edc:	4240      	negs	r0, r0
 8001ede:	1ae4      	subs	r4, r4, r3
 8001ee0:	2701      	movs	r7, #1
 8001ee2:	1a24      	subs	r4, r4, r0
 8001ee4:	e5a8      	b.n	8001a38 <__aeabi_dsub+0xc4>
 8001ee6:	9d02      	ldr	r5, [sp, #8]
 8001ee8:	4652      	mov	r2, sl
 8001eea:	002b      	movs	r3, r5
 8001eec:	3a20      	subs	r2, #32
 8001eee:	40d3      	lsrs	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	4653      	mov	r3, sl
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d006      	beq.n	8001f06 <__aeabi_dsub+0x592>
 8001ef8:	2240      	movs	r2, #64	@ 0x40
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	002b      	movs	r3, r5
 8001efe:	4093      	lsls	r3, r2
 8001f00:	4662      	mov	r2, ip
 8001f02:	431a      	orrs	r2, r3
 8001f04:	4693      	mov	fp, r2
 8001f06:	465d      	mov	r5, fp
 8001f08:	1e6b      	subs	r3, r5, #1
 8001f0a:	419d      	sbcs	r5, r3
 8001f0c:	430d      	orrs	r5, r1
 8001f0e:	e615      	b.n	8001b3c <__aeabi_dsub+0x1c8>
 8001f10:	0762      	lsls	r2, r4, #29
 8001f12:	08c0      	lsrs	r0, r0, #3
 8001f14:	4302      	orrs	r2, r0
 8001f16:	08e4      	lsrs	r4, r4, #3
 8001f18:	e70d      	b.n	8001d36 <__aeabi_dsub+0x3c2>
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	0027      	movs	r7, r4
 8001f1e:	3920      	subs	r1, #32
 8001f20:	40cf      	lsrs	r7, r1
 8001f22:	2a20      	cmp	r2, #32
 8001f24:	d005      	beq.n	8001f32 <__aeabi_dsub+0x5be>
 8001f26:	2140      	movs	r1, #64	@ 0x40
 8001f28:	1a8a      	subs	r2, r1, r2
 8001f2a:	4094      	lsls	r4, r2
 8001f2c:	0025      	movs	r5, r4
 8001f2e:	4305      	orrs	r5, r0
 8001f30:	9503      	str	r5, [sp, #12]
 8001f32:	9d03      	ldr	r5, [sp, #12]
 8001f34:	1e6a      	subs	r2, r5, #1
 8001f36:	4195      	sbcs	r5, r2
 8001f38:	433d      	orrs	r5, r7
 8001f3a:	e77d      	b.n	8001e38 <__aeabi_dsub+0x4c4>
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x5ce>
 8001f40:	e744      	b.n	8001dcc <__aeabi_dsub+0x458>
 8001f42:	2601      	movs	r6, #1
 8001f44:	400e      	ands	r6, r1
 8001f46:	4663      	mov	r3, ip
 8001f48:	08d9      	lsrs	r1, r3, #3
 8001f4a:	9b02      	ldr	r3, [sp, #8]
 8001f4c:	075a      	lsls	r2, r3, #29
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	08dc      	lsrs	r4, r3, #3
 8001f52:	e6f0      	b.n	8001d36 <__aeabi_dsub+0x3c2>
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d028      	beq.n	8001faa <__aeabi_dsub+0x636>
 8001f58:	4662      	mov	r2, ip
 8001f5a:	9f02      	ldr	r7, [sp, #8]
 8001f5c:	08c0      	lsrs	r0, r0, #3
 8001f5e:	433a      	orrs	r2, r7
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x5f0>
 8001f62:	e6dc      	b.n	8001d1e <__aeabi_dsub+0x3aa>
 8001f64:	0762      	lsls	r2, r4, #29
 8001f66:	4310      	orrs	r0, r2
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	08e4      	lsrs	r4, r4, #3
 8001f6c:	0312      	lsls	r2, r2, #12
 8001f6e:	4214      	tst	r4, r2
 8001f70:	d009      	beq.n	8001f86 <__aeabi_dsub+0x612>
 8001f72:	08fd      	lsrs	r5, r7, #3
 8001f74:	4215      	tst	r5, r2
 8001f76:	d106      	bne.n	8001f86 <__aeabi_dsub+0x612>
 8001f78:	4663      	mov	r3, ip
 8001f7a:	2601      	movs	r6, #1
 8001f7c:	002c      	movs	r4, r5
 8001f7e:	08d8      	lsrs	r0, r3, #3
 8001f80:	077b      	lsls	r3, r7, #29
 8001f82:	4318      	orrs	r0, r3
 8001f84:	400e      	ands	r6, r1
 8001f86:	0f42      	lsrs	r2, r0, #29
 8001f88:	00c0      	lsls	r0, r0, #3
 8001f8a:	08c0      	lsrs	r0, r0, #3
 8001f8c:	0752      	lsls	r2, r2, #29
 8001f8e:	4302      	orrs	r2, r0
 8001f90:	e601      	b.n	8001b96 <__aeabi_dsub+0x222>
 8001f92:	4663      	mov	r3, ip
 8001f94:	1a1d      	subs	r5, r3, r0
 8001f96:	45ac      	cmp	ip, r5
 8001f98:	4192      	sbcs	r2, r2
 8001f9a:	9b02      	ldr	r3, [sp, #8]
 8001f9c:	4252      	negs	r2, r2
 8001f9e:	1b1c      	subs	r4, r3, r4
 8001fa0:	000e      	movs	r6, r1
 8001fa2:	4688      	mov	r8, r1
 8001fa4:	2701      	movs	r7, #1
 8001fa6:	1aa4      	subs	r4, r4, r2
 8001fa8:	e546      	b.n	8001a38 <__aeabi_dsub+0xc4>
 8001faa:	4663      	mov	r3, ip
 8001fac:	08d9      	lsrs	r1, r3, #3
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	075a      	lsls	r2, r3, #29
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	08dc      	lsrs	r4, r3, #3
 8001fb6:	e5ee      	b.n	8001b96 <__aeabi_dsub+0x222>
 8001fb8:	4663      	mov	r3, ip
 8001fba:	9c02      	ldr	r4, [sp, #8]
 8001fbc:	9303      	str	r3, [sp, #12]
 8001fbe:	e6c7      	b.n	8001d50 <__aeabi_dsub+0x3dc>
 8001fc0:	08c0      	lsrs	r0, r0, #3
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x654>
 8001fc6:	e6aa      	b.n	8001d1e <__aeabi_dsub+0x3aa>
 8001fc8:	0762      	lsls	r2, r4, #29
 8001fca:	4310      	orrs	r0, r2
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	08e4      	lsrs	r4, r4, #3
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d0d7      	beq.n	8001f86 <__aeabi_dsub+0x612>
 8001fd6:	9f02      	ldr	r7, [sp, #8]
 8001fd8:	08fd      	lsrs	r5, r7, #3
 8001fda:	4215      	tst	r5, r2
 8001fdc:	d1d3      	bne.n	8001f86 <__aeabi_dsub+0x612>
 8001fde:	4663      	mov	r3, ip
 8001fe0:	2601      	movs	r6, #1
 8001fe2:	08d8      	lsrs	r0, r3, #3
 8001fe4:	077b      	lsls	r3, r7, #29
 8001fe6:	002c      	movs	r4, r5
 8001fe8:	4318      	orrs	r0, r3
 8001fea:	400e      	ands	r6, r1
 8001fec:	e7cb      	b.n	8001f86 <__aeabi_dsub+0x612>
 8001fee:	000a      	movs	r2, r1
 8001ff0:	0027      	movs	r7, r4
 8001ff2:	3a20      	subs	r2, #32
 8001ff4:	40d7      	lsrs	r7, r2
 8001ff6:	2920      	cmp	r1, #32
 8001ff8:	d005      	beq.n	8002006 <__aeabi_dsub+0x692>
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	1a52      	subs	r2, r2, r1
 8001ffe:	4094      	lsls	r4, r2
 8002000:	0025      	movs	r5, r4
 8002002:	4305      	orrs	r5, r0
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	9d03      	ldr	r5, [sp, #12]
 8002008:	1e6a      	subs	r2, r5, #1
 800200a:	4195      	sbcs	r5, r2
 800200c:	432f      	orrs	r7, r5
 800200e:	e610      	b.n	8001c32 <__aeabi_dsub+0x2be>
 8002010:	0014      	movs	r4, r2
 8002012:	2500      	movs	r5, #0
 8002014:	2200      	movs	r2, #0
 8002016:	e556      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8002018:	9b02      	ldr	r3, [sp, #8]
 800201a:	4460      	add	r0, ip
 800201c:	4699      	mov	r9, r3
 800201e:	4560      	cmp	r0, ip
 8002020:	4192      	sbcs	r2, r2
 8002022:	444c      	add	r4, r9
 8002024:	4252      	negs	r2, r2
 8002026:	0005      	movs	r5, r0
 8002028:	18a4      	adds	r4, r4, r2
 800202a:	e74c      	b.n	8001ec6 <__aeabi_dsub+0x552>
 800202c:	001a      	movs	r2, r3
 800202e:	001c      	movs	r4, r3
 8002030:	432a      	orrs	r2, r5
 8002032:	d000      	beq.n	8002036 <__aeabi_dsub+0x6c2>
 8002034:	e6b3      	b.n	8001d9e <__aeabi_dsub+0x42a>
 8002036:	e6c9      	b.n	8001dcc <__aeabi_dsub+0x458>
 8002038:	2480      	movs	r4, #128	@ 0x80
 800203a:	2600      	movs	r6, #0
 800203c:	0324      	lsls	r4, r4, #12
 800203e:	e5ae      	b.n	8001b9e <__aeabi_dsub+0x22a>
 8002040:	2120      	movs	r1, #32
 8002042:	2500      	movs	r5, #0
 8002044:	1a09      	subs	r1, r1, r0
 8002046:	e517      	b.n	8001a78 <__aeabi_dsub+0x104>
 8002048:	2200      	movs	r2, #0
 800204a:	2500      	movs	r5, #0
 800204c:	4c0b      	ldr	r4, [pc, #44]	@ (800207c <__aeabi_dsub+0x708>)
 800204e:	e53a      	b.n	8001ac6 <__aeabi_dsub+0x152>
 8002050:	2d00      	cmp	r5, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x6e2>
 8002054:	e5f6      	b.n	8001c44 <__aeabi_dsub+0x2d0>
 8002056:	464b      	mov	r3, r9
 8002058:	1bda      	subs	r2, r3, r7
 800205a:	4692      	mov	sl, r2
 800205c:	2f00      	cmp	r7, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x6ee>
 8002060:	e66f      	b.n	8001d42 <__aeabi_dsub+0x3ce>
 8002062:	2a38      	cmp	r2, #56	@ 0x38
 8002064:	dc05      	bgt.n	8002072 <__aeabi_dsub+0x6fe>
 8002066:	2680      	movs	r6, #128	@ 0x80
 8002068:	0436      	lsls	r6, r6, #16
 800206a:	4334      	orrs	r4, r6
 800206c:	4688      	mov	r8, r1
 800206e:	000e      	movs	r6, r1
 8002070:	e6d1      	b.n	8001e16 <__aeabi_dsub+0x4a2>
 8002072:	4688      	mov	r8, r1
 8002074:	000e      	movs	r6, r1
 8002076:	2501      	movs	r5, #1
 8002078:	e6de      	b.n	8001e38 <__aeabi_dsub+0x4c4>
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	000007ff 	.word	0x000007ff
 8002080:	ff7fffff 	.word	0xff7fffff
 8002084:	000007fe 	.word	0x000007fe
 8002088:	2d00      	cmp	r5, #0
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x71a>
 800208c:	e668      	b.n	8001d60 <__aeabi_dsub+0x3ec>
 800208e:	464b      	mov	r3, r9
 8002090:	1bd9      	subs	r1, r3, r7
 8002092:	2f00      	cmp	r7, #0
 8002094:	d101      	bne.n	800209a <__aeabi_dsub+0x726>
 8002096:	468a      	mov	sl, r1
 8002098:	e5a7      	b.n	8001bea <__aeabi_dsub+0x276>
 800209a:	2701      	movs	r7, #1
 800209c:	2938      	cmp	r1, #56	@ 0x38
 800209e:	dd00      	ble.n	80020a2 <__aeabi_dsub+0x72e>
 80020a0:	e5c7      	b.n	8001c32 <__aeabi_dsub+0x2be>
 80020a2:	2280      	movs	r2, #128	@ 0x80
 80020a4:	0412      	lsls	r2, r2, #16
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e5af      	b.n	8001c0a <__aeabi_dsub+0x296>
 80020aa:	46c0      	nop			@ (mov r8, r8)

080020ac <__aeabi_dcmpun>:
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	46c6      	mov	lr, r8
 80020b0:	031e      	lsls	r6, r3, #12
 80020b2:	0b36      	lsrs	r6, r6, #12
 80020b4:	46b0      	mov	r8, r6
 80020b6:	4e0d      	ldr	r6, [pc, #52]	@ (80020ec <__aeabi_dcmpun+0x40>)
 80020b8:	030c      	lsls	r4, r1, #12
 80020ba:	004d      	lsls	r5, r1, #1
 80020bc:	005f      	lsls	r7, r3, #1
 80020be:	b500      	push	{lr}
 80020c0:	0b24      	lsrs	r4, r4, #12
 80020c2:	0d6d      	lsrs	r5, r5, #21
 80020c4:	0d7f      	lsrs	r7, r7, #21
 80020c6:	42b5      	cmp	r5, r6
 80020c8:	d00b      	beq.n	80020e2 <__aeabi_dcmpun+0x36>
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <__aeabi_dcmpun+0x40>)
 80020cc:	2000      	movs	r0, #0
 80020ce:	428f      	cmp	r7, r1
 80020d0:	d104      	bne.n	80020dc <__aeabi_dcmpun+0x30>
 80020d2:	4646      	mov	r6, r8
 80020d4:	4316      	orrs	r6, r2
 80020d6:	0030      	movs	r0, r6
 80020d8:	1e43      	subs	r3, r0, #1
 80020da:	4198      	sbcs	r0, r3
 80020dc:	bc80      	pop	{r7}
 80020de:	46b8      	mov	r8, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	4304      	orrs	r4, r0
 80020e4:	2001      	movs	r0, #1
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	d1f8      	bne.n	80020dc <__aeabi_dcmpun+0x30>
 80020ea:	e7ee      	b.n	80020ca <__aeabi_dcmpun+0x1e>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_d2iz>:
 80020f0:	000b      	movs	r3, r1
 80020f2:	0002      	movs	r2, r0
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	4d16      	ldr	r5, [pc, #88]	@ (8002150 <__aeabi_d2iz+0x60>)
 80020f8:	030c      	lsls	r4, r1, #12
 80020fa:	b082      	sub	sp, #8
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	2000      	movs	r0, #0
 8002100:	9200      	str	r2, [sp, #0]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	0b24      	lsrs	r4, r4, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0fde      	lsrs	r6, r3, #31
 800210a:	42a9      	cmp	r1, r5
 800210c:	dd04      	ble.n	8002118 <__aeabi_d2iz+0x28>
 800210e:	4811      	ldr	r0, [pc, #68]	@ (8002154 <__aeabi_d2iz+0x64>)
 8002110:	4281      	cmp	r1, r0
 8002112:	dd03      	ble.n	800211c <__aeabi_d2iz+0x2c>
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <__aeabi_d2iz+0x68>)
 8002116:	18f0      	adds	r0, r6, r3
 8002118:	b002      	add	sp, #8
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	2080      	movs	r0, #128	@ 0x80
 800211e:	0340      	lsls	r0, r0, #13
 8002120:	4320      	orrs	r0, r4
 8002122:	4c0e      	ldr	r4, [pc, #56]	@ (800215c <__aeabi_d2iz+0x6c>)
 8002124:	1a64      	subs	r4, r4, r1
 8002126:	2c1f      	cmp	r4, #31
 8002128:	dd08      	ble.n	800213c <__aeabi_d2iz+0x4c>
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <__aeabi_d2iz+0x70>)
 800212c:	1a5b      	subs	r3, r3, r1
 800212e:	40d8      	lsrs	r0, r3
 8002130:	0003      	movs	r3, r0
 8002132:	4258      	negs	r0, r3
 8002134:	2e00      	cmp	r6, #0
 8002136:	d1ef      	bne.n	8002118 <__aeabi_d2iz+0x28>
 8002138:	0018      	movs	r0, r3
 800213a:	e7ed      	b.n	8002118 <__aeabi_d2iz+0x28>
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <__aeabi_d2iz+0x74>)
 800213e:	9a00      	ldr	r2, [sp, #0]
 8002140:	469c      	mov	ip, r3
 8002142:	0003      	movs	r3, r0
 8002144:	4461      	add	r1, ip
 8002146:	408b      	lsls	r3, r1
 8002148:	40e2      	lsrs	r2, r4
 800214a:	4313      	orrs	r3, r2
 800214c:	e7f1      	b.n	8002132 <__aeabi_d2iz+0x42>
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	000003fe 	.word	0x000003fe
 8002154:	0000041d 	.word	0x0000041d
 8002158:	7fffffff 	.word	0x7fffffff
 800215c:	00000433 	.word	0x00000433
 8002160:	00000413 	.word	0x00000413
 8002164:	fffffbed 	.word	0xfffffbed

08002168 <__aeabi_i2d>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	2800      	cmp	r0, #0
 800216c:	d016      	beq.n	800219c <__aeabi_i2d+0x34>
 800216e:	17c3      	asrs	r3, r0, #31
 8002170:	18c5      	adds	r5, r0, r3
 8002172:	405d      	eors	r5, r3
 8002174:	0fc4      	lsrs	r4, r0, #31
 8002176:	0028      	movs	r0, r5
 8002178:	f000 f824 	bl	80021c4 <__clzsi2>
 800217c:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <__aeabi_i2d+0x58>)
 800217e:	1a1b      	subs	r3, r3, r0
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	0d5b      	lsrs	r3, r3, #21
 8002184:	280a      	cmp	r0, #10
 8002186:	dc14      	bgt.n	80021b2 <__aeabi_i2d+0x4a>
 8002188:	0002      	movs	r2, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3215      	adds	r2, #21
 800218e:	4096      	lsls	r6, r2
 8002190:	220b      	movs	r2, #11
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d5      	lsrs	r5, r2
 8002196:	032d      	lsls	r5, r5, #12
 8002198:	0b2d      	lsrs	r5, r5, #12
 800219a:	e003      	b.n	80021a4 <__aeabi_i2d+0x3c>
 800219c:	2400      	movs	r4, #0
 800219e:	2300      	movs	r3, #0
 80021a0:	2500      	movs	r5, #0
 80021a2:	2600      	movs	r6, #0
 80021a4:	051b      	lsls	r3, r3, #20
 80021a6:	432b      	orrs	r3, r5
 80021a8:	07e4      	lsls	r4, r4, #31
 80021aa:	4323      	orrs	r3, r4
 80021ac:	0030      	movs	r0, r6
 80021ae:	0019      	movs	r1, r3
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	380b      	subs	r0, #11
 80021b4:	4085      	lsls	r5, r0
 80021b6:	032d      	lsls	r5, r5, #12
 80021b8:	2600      	movs	r6, #0
 80021ba:	0b2d      	lsrs	r5, r5, #12
 80021bc:	e7f2      	b.n	80021a4 <__aeabi_i2d+0x3c>
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	0000041e 	.word	0x0000041e

080021c4 <__clzsi2>:
 80021c4:	211c      	movs	r1, #28
 80021c6:	2301      	movs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	4298      	cmp	r0, r3
 80021cc:	d301      	bcc.n	80021d2 <__clzsi2+0xe>
 80021ce:	0c00      	lsrs	r0, r0, #16
 80021d0:	3910      	subs	r1, #16
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	4298      	cmp	r0, r3
 80021d6:	d301      	bcc.n	80021dc <__clzsi2+0x18>
 80021d8:	0a00      	lsrs	r0, r0, #8
 80021da:	3908      	subs	r1, #8
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	4298      	cmp	r0, r3
 80021e0:	d301      	bcc.n	80021e6 <__clzsi2+0x22>
 80021e2:	0900      	lsrs	r0, r0, #4
 80021e4:	3904      	subs	r1, #4
 80021e6:	a202      	add	r2, pc, #8	@ (adr r2, 80021f0 <__clzsi2+0x2c>)
 80021e8:	5c10      	ldrb	r0, [r2, r0]
 80021ea:	1840      	adds	r0, r0, r1
 80021ec:	4770      	bx	lr
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	02020304 	.word	0x02020304
 80021f4:	01010101 	.word	0x01010101
	...

08002200 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	0002      	movs	r2, r0
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	701a      	strb	r2, [r3, #0]
	_bmp180_oss = oss;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <BMP180_SetOversampling+0x1c>)
 800220e:	1dfa      	adds	r2, r7, #7
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200000a2 	.word	0x200000a2

08002220 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8002224:	23aa      	movs	r3, #170	@ 0xaa
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f8e2 	bl	80023f0 <BMP180_ReadReg>
 800222c:	0003      	movs	r3, r0
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b21c      	sxth	r4, r3
 8002232:	23ab      	movs	r3, #171	@ 0xab
 8002234:	0018      	movs	r0, r3
 8002236:	f000 f8db 	bl	80023f0 <BMP180_ReadReg>
 800223a:	0003      	movs	r3, r0
 800223c:	b21b      	sxth	r3, r3
 800223e:	4323      	orrs	r3, r4
 8002240:	b21a      	sxth	r2, r3
 8002242:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 8002244:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8002246:	23ac      	movs	r3, #172	@ 0xac
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f8d1 	bl	80023f0 <BMP180_ReadReg>
 800224e:	0003      	movs	r3, r0
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21c      	sxth	r4, r3
 8002254:	23ad      	movs	r3, #173	@ 0xad
 8002256:	0018      	movs	r0, r3
 8002258:	f000 f8ca 	bl	80023f0 <BMP180_ReadReg>
 800225c:	0003      	movs	r3, r0
 800225e:	b21b      	sxth	r3, r3
 8002260:	4323      	orrs	r3, r4
 8002262:	b21a      	sxth	r2, r3
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 8002266:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8002268:	23ae      	movs	r3, #174	@ 0xae
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f8c0 	bl	80023f0 <BMP180_ReadReg>
 8002270:	0003      	movs	r3, r0
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21c      	sxth	r4, r3
 8002276:	23af      	movs	r3, #175	@ 0xaf
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f8b9 	bl	80023f0 <BMP180_ReadReg>
 800227e:	0003      	movs	r3, r0
 8002280:	b21b      	sxth	r3, r3
 8002282:	4323      	orrs	r3, r4
 8002284:	b21a      	sxth	r2, r3
 8002286:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 8002288:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 800228a:	23b0      	movs	r3, #176	@ 0xb0
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f8af 	bl	80023f0 <BMP180_ReadReg>
 8002292:	0003      	movs	r3, r0
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21c      	sxth	r4, r3
 8002298:	23b1      	movs	r3, #177	@ 0xb1
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f8a8 	bl	80023f0 <BMP180_ReadReg>
 80022a0:	0003      	movs	r3, r0
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4323      	orrs	r3, r4
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 80022ac:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 80022ae:	23b2      	movs	r3, #178	@ 0xb2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 f89d 	bl	80023f0 <BMP180_ReadReg>
 80022b6:	0003      	movs	r3, r0
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21c      	sxth	r4, r3
 80022bc:	23b3      	movs	r3, #179	@ 0xb3
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f896 	bl	80023f0 <BMP180_ReadReg>
 80022c4:	0003      	movs	r3, r0
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4323      	orrs	r3, r4
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 80022d0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 80022d2:	23b4      	movs	r3, #180	@ 0xb4
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f88b 	bl	80023f0 <BMP180_ReadReg>
 80022da:	0003      	movs	r3, r0
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21c      	sxth	r4, r3
 80022e0:	23b5      	movs	r3, #181	@ 0xb5
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f884 	bl	80023f0 <BMP180_ReadReg>
 80022e8:	0003      	movs	r3, r0
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	4323      	orrs	r3, r4
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 80022f4:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 80022f6:	23b6      	movs	r3, #182	@ 0xb6
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f879 	bl	80023f0 <BMP180_ReadReg>
 80022fe:	0003      	movs	r3, r0
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b21c      	sxth	r4, r3
 8002304:	23b7      	movs	r3, #183	@ 0xb7
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f872 	bl	80023f0 <BMP180_ReadReg>
 800230c:	0003      	movs	r3, r0
 800230e:	b21b      	sxth	r3, r3
 8002310:	4323      	orrs	r3, r4
 8002312:	b21a      	sxth	r2, r3
 8002314:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 8002316:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8002318:	23b8      	movs	r3, #184	@ 0xb8
 800231a:	0018      	movs	r0, r3
 800231c:	f000 f868 	bl	80023f0 <BMP180_ReadReg>
 8002320:	0003      	movs	r3, r0
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21c      	sxth	r4, r3
 8002326:	23b9      	movs	r3, #185	@ 0xb9
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f861 	bl	80023f0 <BMP180_ReadReg>
 800232e:	0003      	movs	r3, r0
 8002330:	b21b      	sxth	r3, r3
 8002332:	4323      	orrs	r3, r4
 8002334:	b21a      	sxth	r2, r3
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 8002338:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 800233a:	23ba      	movs	r3, #186	@ 0xba
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f857 	bl	80023f0 <BMP180_ReadReg>
 8002342:	0003      	movs	r3, r0
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	b21c      	sxth	r4, r3
 8002348:	23bb      	movs	r3, #187	@ 0xbb
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f850 	bl	80023f0 <BMP180_ReadReg>
 8002350:	0003      	movs	r3, r0
 8002352:	b21b      	sxth	r3, r3
 8002354:	4323      	orrs	r3, r4
 8002356:	b21a      	sxth	r2, r3
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 800235a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 800235c:	23bc      	movs	r3, #188	@ 0xbc
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f846 	bl	80023f0 <BMP180_ReadReg>
 8002364:	0003      	movs	r3, r0
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21c      	sxth	r4, r3
 800236a:	23bd      	movs	r3, #189	@ 0xbd
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f83f 	bl	80023f0 <BMP180_ReadReg>
 8002372:	0003      	movs	r3, r0
 8002374:	b21b      	sxth	r3, r3
 8002376:	4323      	orrs	r3, r4
 8002378:	b21a      	sxth	r2, r3
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 800237c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800237e:	23be      	movs	r3, #190	@ 0xbe
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f835 	bl	80023f0 <BMP180_ReadReg>
 8002386:	0003      	movs	r3, r0
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21c      	sxth	r4, r3
 800238c:	23bf      	movs	r3, #191	@ 0xbf
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f82e 	bl	80023f0 <BMP180_ReadReg>
 8002394:	0003      	movs	r3, r0
 8002396:	b21b      	sxth	r3, r3
 8002398:	4323      	orrs	r3, r4
 800239a:	b21a      	sxth	r2, r3
 800239c:	4b02      	ldr	r3, [pc, #8]	@ (80023a8 <BMP180_UpdateCalibrationData+0x188>)
 800239e:	829a      	strh	r2, [r3, #20]
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bdb0      	pop	{r4, r5, r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	2000008c 	.word	0x2000008c

080023ac <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	0002      	movs	r2, r0
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2] = { reg, cmd };
 80023be:	210c      	movs	r1, #12
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	1dba      	adds	r2, r7, #6
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(BMP180_I2C, BMP180_I2C_ADDR, arr, 2, BMP180_I2C_TIMEOUT);
 80023d0:	187a      	adds	r2, r7, r1
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <BMP180_WriteReg+0x40>)
 80023d4:	23fa      	movs	r3, #250	@ 0xfa
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	21ee      	movs	r1, #238	@ 0xee
 80023de:	f001 f8ff 	bl	80035e0 <HAL_I2C_Master_Transmit>
}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	200000a4 	.word	0x200000a4

080023f0 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	0002      	movs	r2, r0
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(BMP180_I2C, BMP180_I2C_ADDR, &reg, 1, BMP180_I2C_TIMEOUT);
 80023fc:	1dfa      	adds	r2, r7, #7
 80023fe:	480c      	ldr	r0, [pc, #48]	@ (8002430 <BMP180_ReadReg+0x40>)
 8002400:	23fa      	movs	r3, #250	@ 0xfa
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	21ee      	movs	r1, #238	@ 0xee
 800240a:	f001 f8e9 	bl	80035e0 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(BMP180_I2C, BMP180_I2C_ADDR, &result, 1, BMP180_I2C_TIMEOUT);
 800240e:	240f      	movs	r4, #15
 8002410:	193a      	adds	r2, r7, r4
 8002412:	4807      	ldr	r0, [pc, #28]	@ (8002430 <BMP180_ReadReg+0x40>)
 8002414:	23fa      	movs	r3, #250	@ 0xfa
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2301      	movs	r3, #1
 800241c:	21ee      	movs	r1, #238	@ 0xee
 800241e:	f001 fa09 	bl	8003834 <HAL_I2C_Master_Receive>
	return result;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	781b      	ldrb	r3, [r3, #0]
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b005      	add	sp, #20
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	200000a4 	.word	0x200000a4

08002434 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800243a:	232e      	movs	r3, #46	@ 0x2e
 800243c:	0019      	movs	r1, r3
 800243e:	20f4      	movs	r0, #244	@ 0xf4
 8002440:	f7ff ffb4 	bl	80023ac <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8002444:	2305      	movs	r3, #5
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fdd2 	bl	8002ff0 <HAL_Delay>
	int32_t ut = Get_UTemp();
 800244c:	f000 f9ca 	bl	80027e4 <Get_UTemp>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8002454:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <BMP180_GetRawTemperature+0x7c>)
 8002456:	895b      	ldrh	r3, [r3, #10]
 8002458:	001a      	movs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <BMP180_GetRawTemperature+0x7c>)
 8002460:	8912      	ldrh	r2, [r2, #8]
 8002462:	4353      	muls	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	da02      	bge.n	800246e <BMP180_GetRawTemperature+0x3a>
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <BMP180_GetRawTemperature+0x80>)
 800246a:	4694      	mov	ip, r2
 800246c:	4463      	add	r3, ip
 800246e:	13db      	asrs	r3, r3, #15
 8002470:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8002472:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <BMP180_GetRawTemperature+0x7c>)
 8002474:	2212      	movs	r2, #18
 8002476:	5e9b      	ldrsh	r3, [r3, r2]
 8002478:	02da      	lsls	r2, r3, #11
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <BMP180_GetRawTemperature+0x7c>)
 800247c:	2114      	movs	r1, #20
 800247e:	5e5b      	ldrsh	r3, [r3, r1]
 8002480:	0019      	movs	r1, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	18cb      	adds	r3, r1, r3
 8002486:	0019      	movs	r1, r3
 8002488:	0010      	movs	r0, r2
 800248a:	f7fd fed9 	bl	8000240 <__divsi3>
 800248e:	0003      	movs	r3, r0
 8002490:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	18d3      	adds	r3, r2, r3
 8002498:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3308      	adds	r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	da00      	bge.n	80024a4 <BMP180_GetRawTemperature+0x70>
 80024a2:	330f      	adds	r3, #15
 80024a4:	111b      	asrs	r3, r3, #4
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	2000008c 	.word	0x2000008c
 80024b4:	00007fff 	.word	0x00007fff

080024b8 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80024be:	232e      	movs	r3, #46	@ 0x2e
 80024c0:	0019      	movs	r1, r3
 80024c2:	20f4      	movs	r0, #244	@ 0xf4
 80024c4:	f7ff ff72 	bl	80023ac <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80024c8:	2305      	movs	r3, #5
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 fd90 	bl	8002ff0 <HAL_Delay>
	int32_t ut = Get_UTemp();
 80024d0:	f000 f988 	bl	80027e4 <Get_UTemp>
 80024d4:	0003      	movs	r3, r0
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80024d8:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <BMP180_GetPressure+0x220>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	001a      	movs	r2, r3
 80024de:	4b7f      	ldr	r3, [pc, #508]	@ (80026dc <BMP180_GetPressure+0x224>)
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	0019      	movs	r1, r3
 80024e4:	20f4      	movs	r0, #244	@ 0xf4
 80024e6:	f7ff ff61 	bl	80023ac <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 80024ea:	4b7b      	ldr	r3, [pc, #492]	@ (80026d8 <BMP180_GetPressure+0x220>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	001a      	movs	r2, r3
 80024f0:	4b7b      	ldr	r3, [pc, #492]	@ (80026e0 <BMP180_GetPressure+0x228>)
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 fd7b 	bl	8002ff0 <HAL_Delay>
	int32_t up = Get_UPress(1);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f000 f906 	bl	800270c <Get_UPress>
 8002500:	0003      	movs	r3, r0
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8002504:	4b77      	ldr	r3, [pc, #476]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 8002506:	895b      	ldrh	r3, [r3, #10]
 8002508:	001a      	movs	r2, r3
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	4a75      	ldr	r2, [pc, #468]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 8002510:	8912      	ldrh	r2, [r2, #8]
 8002512:	4353      	muls	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	da02      	bge.n	800251e <BMP180_GetPressure+0x66>
 8002518:	4a73      	ldr	r2, [pc, #460]	@ (80026e8 <BMP180_GetPressure+0x230>)
 800251a:	4694      	mov	ip, r2
 800251c:	4463      	add	r3, ip
 800251e:	13db      	asrs	r3, r3, #15
 8002520:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8002522:	4b70      	ldr	r3, [pc, #448]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 8002524:	2212      	movs	r2, #18
 8002526:	5e9b      	ldrsh	r3, [r3, r2]
 8002528:	02da      	lsls	r2, r3, #11
 800252a:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 800252c:	2114      	movs	r1, #20
 800252e:	5e5b      	ldrsh	r3, [r3, r1]
 8002530:	0019      	movs	r1, r3
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	18cb      	adds	r3, r1, r3
 8002536:	0019      	movs	r1, r3
 8002538:	0010      	movs	r0, r2
 800253a:	f7fd fe81 	bl	8000240 <__divsi3>
 800253e:	0003      	movs	r3, r0
 8002540:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4a67      	ldr	r2, [pc, #412]	@ (80026ec <BMP180_GetPressure+0x234>)
 800254e:	4694      	mov	ip, r2
 8002550:	4463      	add	r3, ip
 8002552:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8002554:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 8002556:	220e      	movs	r2, #14
 8002558:	5e9b      	ldrsh	r3, [r3, r2]
 800255a:	001a      	movs	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	435b      	muls	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	da02      	bge.n	800256a <BMP180_GetPressure+0xb2>
 8002564:	4962      	ldr	r1, [pc, #392]	@ (80026f0 <BMP180_GetPressure+0x238>)
 8002566:	468c      	mov	ip, r1
 8002568:	4463      	add	r3, ip
 800256a:	131b      	asrs	r3, r3, #12
 800256c:	4353      	muls	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	da02      	bge.n	8002578 <BMP180_GetPressure+0xc0>
 8002572:	4a60      	ldr	r2, [pc, #384]	@ (80026f4 <BMP180_GetPressure+0x23c>)
 8002574:	4694      	mov	ip, r2
 8002576:	4463      	add	r3, ip
 8002578:	12db      	asrs	r3, r3, #11
 800257a:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 800257c:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 800257e:	2202      	movs	r2, #2
 8002580:	5e9b      	ldrsh	r3, [r3, r2]
 8002582:	001a      	movs	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4353      	muls	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	da02      	bge.n	8002592 <BMP180_GetPressure+0xda>
 800258c:	4a59      	ldr	r2, [pc, #356]	@ (80026f4 <BMP180_GetPressure+0x23c>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	12db      	asrs	r3, r3, #11
 8002594:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 800259e:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	5e9b      	ldrsh	r3, [r3, r2]
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	18d3      	adds	r3, r2, r3
 80025aa:	4a4b      	ldr	r2, [pc, #300]	@ (80026d8 <BMP180_GetPressure+0x220>)
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4093      	lsls	r3, r2
 80025b0:	3302      	adds	r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da00      	bge.n	80025b8 <BMP180_GetPressure+0x100>
 80025b6:	3303      	adds	r3, #3
 80025b8:	109b      	asrs	r3, r3, #2
 80025ba:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80025bc:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 80025be:	2204      	movs	r2, #4
 80025c0:	5e9b      	ldrsh	r3, [r3, r2]
 80025c2:	001a      	movs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4353      	muls	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da02      	bge.n	80025d2 <BMP180_GetPressure+0x11a>
 80025cc:	4a4a      	ldr	r2, [pc, #296]	@ (80026f8 <BMP180_GetPressure+0x240>)
 80025ce:	4694      	mov	ip, r2
 80025d0:	4463      	add	r3, ip
 80025d2:	135b      	asrs	r3, r3, #13
 80025d4:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80025d6:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 80025d8:	220c      	movs	r2, #12
 80025da:	5e9b      	ldrsh	r3, [r3, r2]
 80025dc:	001a      	movs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	435b      	muls	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da02      	bge.n	80025ec <BMP180_GetPressure+0x134>
 80025e6:	4942      	ldr	r1, [pc, #264]	@ (80026f0 <BMP180_GetPressure+0x238>)
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	131b      	asrs	r3, r3, #12
 80025ee:	4353      	muls	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da02      	bge.n	80025fa <BMP180_GetPressure+0x142>
 80025f4:	4a41      	ldr	r2, [pc, #260]	@ (80026fc <BMP180_GetPressure+0x244>)
 80025f6:	4694      	mov	ip, r2
 80025f8:	4463      	add	r3, ip
 80025fa:	141b      	asrs	r3, r3, #16
 80025fc:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 80025fe:	6a3a      	ldr	r2, [r7, #32]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	18d3      	adds	r3, r2, r3
 8002604:	3302      	adds	r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	da00      	bge.n	800260c <BMP180_GetPressure+0x154>
 800260a:	3303      	adds	r3, #3
 800260c:	109b      	asrs	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8002610:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <BMP180_GetPressure+0x22c>)
 8002612:	88db      	ldrh	r3, [r3, #6]
 8002614:	001a      	movs	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	0209      	lsls	r1, r1, #8
 800261c:	468c      	mov	ip, r1
 800261e:	4463      	add	r3, ip
 8002620:	4353      	muls	r3, r2
 8002622:	0bdb      	lsrs	r3, r3, #15
 8002624:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8002626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a2a      	ldr	r2, [pc, #168]	@ (80026d8 <BMP180_GetPressure+0x220>)
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	0011      	movs	r1, r2
 8002632:	4a33      	ldr	r2, [pc, #204]	@ (8002700 <BMP180_GetPressure+0x248>)
 8002634:	410a      	asrs	r2, r1
 8002636:	4353      	muls	r3, r2
 8002638:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db08      	blt.n	8002652 <BMP180_GetPressure+0x19a>
		p = (b7 * 2) / b4;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd fd70 	bl	800012c <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002650:	e006      	b.n	8002660 <BMP180_GetPressure+0x1a8>
	else
		p = (b7 / b4) * 2;
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fd fd69 	bl	800012c <__udivsi3>
 800265a:	0003      	movs	r3, r0
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8002660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <BMP180_GetPressure+0x1b0>
 8002666:	33ff      	adds	r3, #255	@ 0xff
 8002668:	121b      	asrs	r3, r3, #8
 800266a:	001a      	movs	r2, r3
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	2b00      	cmp	r3, #0
 8002670:	da00      	bge.n	8002674 <BMP180_GetPressure+0x1bc>
 8002672:	33ff      	adds	r3, #255	@ 0xff
 8002674:	121b      	asrs	r3, r3, #8
 8002676:	4353      	muls	r3, r2
 8002678:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <BMP180_GetPressure+0x24c>)
 800267e:	4353      	muls	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	da02      	bge.n	800268a <BMP180_GetPressure+0x1d2>
 8002684:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <BMP180_GetPressure+0x244>)
 8002686:	4694      	mov	ip, r2
 8002688:	4463      	add	r3, ip
 800268a:	141b      	asrs	r3, r3, #16
 800268c:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 800268e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002690:	0013      	movs	r3, r2
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	189b      	adds	r3, r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	00da      	lsls	r2, r3, #3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	425b      	negs	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da02      	bge.n	80026ae <BMP180_GetPressure+0x1f6>
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <BMP180_GetPressure+0x244>)
 80026aa:	4694      	mov	ip, r2
 80026ac:	4463      	add	r3, ip
 80026ae:	141b      	asrs	r3, r3, #16
 80026b0:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80026b2:	6a3a      	ldr	r2, [r7, #32]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	18d3      	adds	r3, r2, r3
 80026b8:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <BMP180_GetPressure+0x250>)
 80026ba:	4694      	mov	ip, r2
 80026bc:	4463      	add	r3, ip
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da00      	bge.n	80026c4 <BMP180_GetPressure+0x20c>
 80026c2:	330f      	adds	r3, #15
 80026c4:	111b      	asrs	r3, r3, #4
 80026c6:	001a      	movs	r2, r3
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b00c      	add	sp, #48	@ 0x30
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200000a2 	.word	0x200000a2
 80026dc:	08007224 	.word	0x08007224
 80026e0:	08007228 	.word	0x08007228
 80026e4:	2000008c 	.word	0x2000008c
 80026e8:	00007fff 	.word	0x00007fff
 80026ec:	fffff060 	.word	0xfffff060
 80026f0:	00000fff 	.word	0x00000fff
 80026f4:	000007ff 	.word	0x000007ff
 80026f8:	00001fff 	.word	0x00001fff
 80026fc:	0000ffff 	.word	0x0000ffff
 8002700:	0000c350 	.word	0x0000c350
 8002704:	00000bde 	.word	0x00000bde
 8002708:	00000ecf 	.word	0x00000ecf

0800270c <Get_UPress>:

uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af04      	add	r7, sp, #16
 8002712:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3334      	adds	r3, #52	@ 0x34
 800271e:	b2da      	uxtb	r2, r3
 8002720:	240f      	movs	r4, #15
 8002722:	193b      	adds	r3, r7, r4
 8002724:	701a      	strb	r2, [r3, #0]
	uint8_t Press_RAW[3] = {0};
 8002726:	230c      	movs	r3, #12
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	4a2c      	ldr	r2, [pc, #176]	@ (80027dc <Get_UPress+0xd0>)
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	2202      	movs	r2, #2
 8002732:	2100      	movs	r1, #0
 8002734:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_I2C_ADDR, 0xF4, 1, &datatowrite, 1, 1000);
 8002736:	482a      	ldr	r0, [pc, #168]	@ (80027e0 <Get_UPress+0xd4>)
 8002738:	23fa      	movs	r3, #250	@ 0xfa
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	2301      	movs	r3, #1
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	193b      	adds	r3, r7, r4
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2301      	movs	r3, #1
 8002748:	22f4      	movs	r2, #244	@ 0xf4
 800274a:	21ee      	movs	r1, #238	@ 0xee
 800274c:	f001 f97a 	bl	8003a44 <HAL_I2C_Mem_Write>
	switch (oss)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d01b      	beq.n	800278e <Get_UPress+0x82>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	dc1c      	bgt.n	8002796 <Get_UPress+0x8a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d011      	beq.n	8002786 <Get_UPress+0x7a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b02      	cmp	r3, #2
 8002766:	dc16      	bgt.n	8002796 <Get_UPress+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <Get_UPress+0x6a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d004      	beq.n	800277e <Get_UPress+0x72>
 8002774:	e00f      	b.n	8002796 <Get_UPress+0x8a>
	{
		case (0):
			HAL_Delay (5);
 8002776:	2005      	movs	r0, #5
 8002778:	f000 fc3a 	bl	8002ff0 <HAL_Delay>
			break;
 800277c:	e00b      	b.n	8002796 <Get_UPress+0x8a>
		case (1):
			HAL_Delay (8);
 800277e:	2008      	movs	r0, #8
 8002780:	f000 fc36 	bl	8002ff0 <HAL_Delay>
			break;
 8002784:	e007      	b.n	8002796 <Get_UPress+0x8a>
		case (2):
			HAL_Delay (14);
 8002786:	200e      	movs	r0, #14
 8002788:	f000 fc32 	bl	8002ff0 <HAL_Delay>
			break;
 800278c:	e003      	b.n	8002796 <Get_UPress+0x8a>
		case (3):
			HAL_Delay (26);
 800278e:	201a      	movs	r0, #26
 8002790:	f000 fc2e 	bl	8002ff0 <HAL_Delay>
			break;
 8002794:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_I2C_ADDR, 0xF6, 1, Press_RAW, 3, 1000);
 8002796:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <Get_UPress+0xd4>)
 8002798:	23fa      	movs	r3, #250	@ 0xfa
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	2303      	movs	r3, #3
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	240c      	movs	r4, #12
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	22f6      	movs	r2, #246	@ 0xf6
 80027ac:	21ee      	movs	r1, #238	@ 0xee
 80027ae:	f001 fa77 	bl	8003ca0 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80027b2:	0021      	movs	r1, r4
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	187a      	adds	r2, r7, r1
 80027c4:	7892      	ldrb	r2, [r2, #2]
 80027c6:	189a      	adds	r2, r3, r2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2108      	movs	r1, #8
 80027cc:	1acb      	subs	r3, r1, r3
 80027ce:	411a      	asrs	r2, r3
 80027d0:	0013      	movs	r3, r2
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b005      	add	sp, #20
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	08007198 	.word	0x08007198
 80027e0:	200000a4 	.word	0x200000a4

080027e4 <Get_UTemp>:

// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	222e      	movs	r2, #46	@ 0x2e
 80027ee:	701a      	strb	r2, [r3, #0]
	uint8_t Temp_RAW[2] = {0};
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_I2C_ADDR, 0xF4, 1, &datatowrite, 1, 1000);
 80027f6:	4814      	ldr	r0, [pc, #80]	@ (8002848 <Get_UTemp+0x64>)
 80027f8:	23fa      	movs	r3, #250	@ 0xfa
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	22f4      	movs	r2, #244	@ 0xf4
 800280a:	21ee      	movs	r1, #238	@ 0xee
 800280c:	f001 f91a 	bl	8003a44 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8002810:	2005      	movs	r0, #5
 8002812:	f000 fbed 	bl	8002ff0 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_I2C_ADDR, 0xF6, 1, Temp_RAW, 2, 1000);
 8002816:	480c      	ldr	r0, [pc, #48]	@ (8002848 <Get_UTemp+0x64>)
 8002818:	23fa      	movs	r3, #250	@ 0xfa
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	2302      	movs	r3, #2
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	22f6      	movs	r2, #246	@ 0xf6
 800282a:	21ee      	movs	r1, #238	@ 0xee
 800282c:	f001 fa38 	bl	8003ca0 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	1d3a      	adds	r2, r7, #4
 800283a:	7852      	ldrb	r2, [r2, #1]
 800283c:	189b      	adds	r3, r3, r2
 800283e:	b29b      	uxth	r3, r3
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200000a4 	.word	0x200000a4

0800284c <calcularPressaoNivelMar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int calcularPressaoNivelMar(int pressaoAtual, int altitudeMetros, int temperaturaAtual)
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6178      	str	r0, [r7, #20]
 8002854:	6139      	str	r1, [r7, #16]
 8002856:	60fa      	str	r2, [r7, #12]
    double pressaoNivelMar;
    double temperaturaKelvin = temperaturaAtual / 10.0 + 273.15; // Converter temperatura para Kelvin
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fc85 	bl	8002168 <__aeabi_i2d>
 800285e:	2200      	movs	r2, #0
 8002860:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <calcularPressaoNivelMar+0xc0>)
 8002862:	f7fe f97b 	bl	8000b5c <__aeabi_ddiv>
 8002866:	0002      	movs	r2, r0
 8002868:	000b      	movs	r3, r1
 800286a:	0010      	movs	r0, r2
 800286c:	0019      	movs	r1, r3
 800286e:	4a28      	ldr	r2, [pc, #160]	@ (8002910 <calcularPressaoNivelMar+0xc4>)
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <calcularPressaoNivelMar+0xc8>)
 8002872:	f7fd fe0f 	bl	8000494 <__aeabi_dadd>
 8002876:	0002      	movs	r2, r0
 8002878:	000b      	movs	r3, r1
 800287a:	623a      	str	r2, [r7, #32]
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calcular a pressão ao nível do mar usando a fórmula
    pressaoNivelMar = pressaoAtual * pow(1.0 - (0.0065 * altitudeMetros) / (temperaturaKelvin + 0.0065 * altitudeMetros), -5.257);
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff fc72 	bl	8002168 <__aeabi_i2d>
 8002884:	0004      	movs	r4, r0
 8002886:	000d      	movs	r5, r1
 8002888:	6938      	ldr	r0, [r7, #16]
 800288a:	f7ff fc6d 	bl	8002168 <__aeabi_i2d>
 800288e:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <calcularPressaoNivelMar+0xcc>)
 8002890:	4b22      	ldr	r3, [pc, #136]	@ (800291c <calcularPressaoNivelMar+0xd0>)
 8002892:	f7fe fda7 	bl	80013e4 <__aeabi_dmul>
 8002896:	0002      	movs	r2, r0
 8002898:	000b      	movs	r3, r1
 800289a:	603a      	str	r2, [r7, #0]
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	6938      	ldr	r0, [r7, #16]
 80028a0:	f7ff fc62 	bl	8002168 <__aeabi_i2d>
 80028a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002918 <calcularPressaoNivelMar+0xcc>)
 80028a6:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <calcularPressaoNivelMar+0xd0>)
 80028a8:	f7fe fd9c 	bl	80013e4 <__aeabi_dmul>
 80028ac:	0002      	movs	r2, r0
 80028ae:	000b      	movs	r3, r1
 80028b0:	0010      	movs	r0, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	f7fd fdec 	bl	8000494 <__aeabi_dadd>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f7fe f94a 	bl	8000b5c <__aeabi_ddiv>
 80028c8:	0002      	movs	r2, r0
 80028ca:	000b      	movs	r3, r1
 80028cc:	2000      	movs	r0, #0
 80028ce:	4914      	ldr	r1, [pc, #80]	@ (8002920 <calcularPressaoNivelMar+0xd4>)
 80028d0:	f7ff f850 	bl	8001974 <__aeabi_dsub>
 80028d4:	0002      	movs	r2, r0
 80028d6:	000b      	movs	r3, r1
 80028d8:	0010      	movs	r0, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <calcularPressaoNivelMar+0xd8>)
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <calcularPressaoNivelMar+0xdc>)
 80028e0:	f003 fd24 	bl	800632c <pow>
 80028e4:	0002      	movs	r2, r0
 80028e6:	000b      	movs	r3, r1
 80028e8:	0020      	movs	r0, r4
 80028ea:	0029      	movs	r1, r5
 80028ec:	f7fe fd7a 	bl	80013e4 <__aeabi_dmul>
 80028f0:	0002      	movs	r2, r0
 80028f2:	000b      	movs	r3, r1
 80028f4:	61ba      	str	r2, [r7, #24]
 80028f6:	61fb      	str	r3, [r7, #28]

    return (int)pressaoNivelMar; // Retornar o valor como inteiro
 80028f8:	69b8      	ldr	r0, [r7, #24]
 80028fa:	69f9      	ldr	r1, [r7, #28]
 80028fc:	f7ff fbf8 	bl	80020f0 <__aeabi_d2iz>
 8002900:	0003      	movs	r3, r0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b00a      	add	sp, #40	@ 0x28
 8002908:	bdb0      	pop	{r4, r5, r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	40240000 	.word	0x40240000
 8002910:	66666666 	.word	0x66666666
 8002914:	40711266 	.word	0x40711266
 8002918:	76c8b439 	.word	0x76c8b439
 800291c:	3f7a9fbe 	.word	0x3f7a9fbe
 8002920:	3ff00000 	.word	0x3ff00000
 8002924:	020c49ba 	.word	0x020c49ba
 8002928:	c015072b 	.word	0xc015072b

0800292c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b09e      	sub	sp, #120	@ 0x78
 8002930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002932:	f000 fae0 	bl	8002ef6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002936:	f000 f851 	bl	80029dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800293a:	f000 f90f 	bl	8002b5c <MX_GPIO_Init>
  MX_I2C1_Init();
 800293e:	f000 f891 	bl	8002a64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002942:	f000 f8bd 	bl	8002ac0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Inicializa o BMP180
  /* USER CODE BEGIN 2 */
  BMP180_SetOversampling(BMP180_STANDARD);
 8002946:	2001      	movs	r0, #1
 8002948:	f7ff fc5a 	bl	8002200 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 800294c:	f7ff fc68 	bl	8002220 <BMP180_UpdateCalibrationData>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	int32_t temperatura = BMP180_GetRawTemperature();
 8002950:	f7ff fd70 	bl	8002434 <BMP180_GetRawTemperature>
 8002954:	0003      	movs	r3, r0
 8002956:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int32_t pressao = BMP180_GetPressure();
 8002958:	f7ff fdae 	bl	80024b8 <BMP180_GetPressure>
 800295c:	0003      	movs	r3, r0
 800295e:	66bb      	str	r3, [r7, #104]	@ 0x68
	// Calcular pressão ao nível do mar
    int pressaoNivelMar = calcularPressaoNivelMar(pressao, 719, temperatura); // altitude de 719 metros
 8002960:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002962:	491b      	ldr	r1, [pc, #108]	@ (80029d0 <main+0xa4>)
 8002964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff ff70 	bl	800284c <calcularPressaoNivelMar>
 800296c:	0003      	movs	r3, r0
 800296e:	667b      	str	r3, [r7, #100]	@ 0x64
	char buffer[100];
    sprintf(buffer, "Temperatura: %d.%dC\r\nPressao: %d Pa\r\nPressao ao nivel do mar: %d hPa\r\n", (int)temperatura / 10, (int)temperatura % 10, (int)pressao, pressaoNivelMar / 100);
 8002970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002972:	210a      	movs	r1, #10
 8002974:	0018      	movs	r0, r3
 8002976:	f7fd fc63 	bl	8000240 <__divsi3>
 800297a:	0003      	movs	r3, r0
 800297c:	001c      	movs	r4, r3
 800297e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002980:	210a      	movs	r1, #10
 8002982:	0018      	movs	r0, r3
 8002984:	f7fd fd42 	bl	800040c <__aeabi_idivmod>
 8002988:	000b      	movs	r3, r1
 800298a:	001d      	movs	r5, r3
 800298c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298e:	2164      	movs	r1, #100	@ 0x64
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd fc55 	bl	8000240 <__divsi3>
 8002996:	0003      	movs	r3, r0
 8002998:	490e      	ldr	r1, [pc, #56]	@ (80029d4 <main+0xa8>)
 800299a:	0038      	movs	r0, r7
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	002b      	movs	r3, r5
 80029a4:	0022      	movs	r2, r4
 80029a6:	f003 f823 	bl	80059f0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80029aa:	003b      	movs	r3, r7
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fd fbab 	bl	8000108 <strlen>
 80029b2:	0003      	movs	r3, r0
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	23fa      	movs	r3, #250	@ 0xfa
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	0039      	movs	r1, r7
 80029bc:	4806      	ldr	r0, [pc, #24]	@ (80029d8 <main+0xac>)
 80029be:	f002 faad 	bl	8004f1c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80029c2:	23fa      	movs	r3, #250	@ 0xfa
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fb12 	bl	8002ff0 <HAL_Delay>
  {
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	e7bf      	b.n	8002950 <main+0x24>
 80029d0:	000002cf 	.word	0x000002cf
 80029d4:	0800719c 	.word	0x0800719c
 80029d8:	200000f8 	.word	0x200000f8

080029dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08d      	sub	sp, #52	@ 0x34
 80029e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e2:	2414      	movs	r4, #20
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	0018      	movs	r0, r3
 80029e8:	231c      	movs	r3, #28
 80029ea:	001a      	movs	r2, r3
 80029ec:	2100      	movs	r1, #0
 80029ee:	f003 f81f 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f2:	003b      	movs	r3, r7
 80029f4:	0018      	movs	r0, r3
 80029f6:	2314      	movs	r3, #20
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f003 f818 	bl	8005a30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2202      	movs	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	0052      	lsls	r2, r2, #1
 8002a0c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2240      	movs	r2, #64	@ 0x40
 8002a18:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 fde7 	bl	80045f0 <HAL_RCC_OscConfig>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d001      	beq.n	8002a2a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002a26:	f000 f8c7 	bl	8002bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2a:	003b      	movs	r3, r7
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a30:	003b      	movs	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a36:	003b      	movs	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002a3c:	003b      	movs	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002a42:	003b      	movs	r3, r7
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a48:	003b      	movs	r3, r7
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 ffb3 	bl	80049b8 <HAL_RCC_ClockConfig>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002a56:	f000 f8af 	bl	8002bb8 <Error_Handler>
  }
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b00d      	add	sp, #52	@ 0x34
 8002a60:	bd90      	pop	{r4, r7, pc}
	...

08002a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a6a:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <MX_I2C1_Init+0x54>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <MX_I2C1_Init+0x58>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <MX_I2C1_Init+0x50>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 fcf7 	bl	8003494 <HAL_I2C_Init>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aaa:	f000 f885 	bl	8002bb8 <Error_Handler>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200000a4 	.word	0x200000a4
 8002ab8:	40005400 	.word	0x40005400
 8002abc:	2010091a 	.word	0x2010091a

08002ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ac4:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002ac6:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <MX_USART1_UART_Init+0x98>)
 8002ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002acc:	22e1      	movs	r2, #225	@ 0xe1
 8002ace:	0252      	lsls	r2, r2, #9
 8002ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af0:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af6:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b02:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f002 f9b0 	bl	8004e70 <HAL_UART_Init>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d001      	beq.n	8002b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b14:	f000 f850 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fe87 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b26:	f000 f847 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f002 febe 	bl	80058b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b38:	f000 f83e 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <MX_USART1_UART_Init+0x94>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f002 fe3c 	bl	80057bc <HAL_UARTEx_DisableFifoMode>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b48:	f000 f836 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	200000f8 	.word	0x200000f8
 8002b58:	40013800 	.word	0x40013800

08002b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b68:	2104      	movs	r1, #4
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002b98:	2102      	movs	r1, #2
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <MX_GPIO_Init+0x58>)
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc0:	46c0      	nop			@ (mov r8, r8)
 8002bc2:	e7fd      	b.n	8002bc0 <Error_Handler+0x8>

08002bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_MspInit+0x50>)
 8002bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_MspInit+0x50>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <HAL_MspInit+0x50>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_MspInit+0x50>)
 8002be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_MspInit+0x50>)
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	0549      	lsls	r1, r1, #21
 8002bec:	430a      	orrs	r2, r1
 8002bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_MspInit+0x50>)
 8002bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	055b      	lsls	r3, r3, #21
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002bfe:	2008      	movs	r0, #8
 8002c00:	f000 fa1a 	bl	8003038 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002c04:	2010      	movs	r0, #16
 8002c06:	f000 fa17 	bl	8003038 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b093      	sub	sp, #76	@ 0x4c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	2334      	movs	r3, #52	@ 0x34
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	0018      	movs	r0, r3
 8002c26:	2314      	movs	r3, #20
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f002 ff00 	bl	8005a30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	2418      	movs	r4, #24
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0018      	movs	r0, r3
 8002c36:	231c      	movs	r3, #28
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f002 fef8 	bl	8005a30 <memset>
  if(hi2c->Instance==I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a34      	ldr	r2, [pc, #208]	@ (8002d18 <HAL_I2C_MspInit+0x100>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d161      	bne.n	8002d0e <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2240      	movs	r2, #64	@ 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f002 f81b 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c62:	f7ff ffa9 	bl	8002bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c72:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c84:	2102      	movs	r1, #2
 8002c86:	430a      	orrs	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c96:	2134      	movs	r1, #52	@ 0x34
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	01d2      	lsls	r2, r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca0:	000c      	movs	r4, r1
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	2212      	movs	r2, #18
 8002ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	220e      	movs	r2, #14
 8002cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <HAL_I2C_MspInit+0x108>)
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	f000 fa7d 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cc6:	0021      	movs	r1, r4
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2240      	movs	r2, #64	@ 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2212      	movs	r2, #18
 8002cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2206      	movs	r2, #6
 8002ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <HAL_I2C_MspInit+0x10c>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fa67 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cf6:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002cf8:	2180      	movs	r1, #128	@ 0x80
 8002cfa:	0389      	lsls	r1, r1, #14
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_I2C_MspInit+0x104>)
 8002d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	039b      	lsls	r3, r3, #14
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b013      	add	sp, #76	@ 0x4c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	40005400 	.word	0x40005400
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	50000800 	.word	0x50000800
 8002d24:	50000400 	.word	0x50000400

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b091      	sub	sp, #68	@ 0x44
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	232c      	movs	r3, #44	@ 0x2c
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	0018      	movs	r0, r3
 8002d36:	2314      	movs	r3, #20
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f002 fe78 	bl	8005a30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d40:	2410      	movs	r4, #16
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	0018      	movs	r0, r3
 8002d46:	231c      	movs	r3, #28
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	f002 fe70 	bl	8005a30 <memset>
  if(huart->Instance==USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a23      	ldr	r2, [pc, #140]	@ (8002de4 <HAL_UART_MspInit+0xbc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d13f      	bne.n	8002dda <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 ff93 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d72:	f7ff ff21 	bl	8002bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	01c9      	lsls	r1, r1, #7
 8002d80:	430a      	orrs	r2, r1
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d96:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d9e:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_UART_MspInit+0xc0>)
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002daa:	212c      	movs	r1, #44	@ 0x2c
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	22c0      	movs	r2, #192	@ 0xc0
 8002db0:	00d2      	lsls	r2, r2, #3
 8002db2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2202      	movs	r2, #2
 8002db8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2201      	movs	r2, #1
 8002dca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	187a      	adds	r2, r7, r1
 8002dce:	23a0      	movs	r3, #160	@ 0xa0
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f9f3 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b011      	add	sp, #68	@ 0x44
 8002de0:	bd90      	pop	{r4, r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40021000 	.word	0x40021000

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	e7fd      	b.n	8002df0 <NMI_Handler+0x4>

08002df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	e7fd      	b.n	8002df8 <HardFault_Handler+0x4>

08002dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e14:	f000 f8d0 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e18:	46c0      	nop			@ (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <_sbrk+0x5c>)
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <_sbrk+0x60>)
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <_sbrk+0x64>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <_sbrk+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	18d3      	adds	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e50:	f002 fdf6 	bl	8005a40 <__errno>
 8002e54:	0003      	movs	r3, r0
 8002e56:	220c      	movs	r2, #12
 8002e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	e009      	b.n	8002e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e66:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	18d2      	adds	r2, r2, r3
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <_sbrk+0x64>)
 8002e70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b006      	add	sp, #24
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20001800 	.word	0x20001800
 8002e80:	00000400 	.word	0x00000400
 8002e84:	2000018c 	.word	0x2000018c
 8002e88:	200002e0 	.word	0x200002e0

08002e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <SystemInit+0x14>)
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	0512      	lsls	r2, r2, #20
 8002e96:	609a      	str	r2, [r3, #8]
#endif
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea4:	480d      	ldr	r0, [pc, #52]	@ (8002edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ea6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea8:	f7ff fff0 	bl	8002e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002eac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002eae:	e003      	b.n	8002eb8 <LoopCopyDataInit>

08002eb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002eb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002eb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002eb6:	3104      	adds	r1, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002eb8:	480a      	ldr	r0, [pc, #40]	@ (8002ee4 <LoopForever+0xa>)
  ldr r3, =_edata
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <LoopForever+0xe>)
  adds r2, r0, r1
 8002ebc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ebe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ec0:	d3f6      	bcc.n	8002eb0 <CopyDataInit>
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <LoopForever+0x12>)
  b LoopFillZerobss
 8002ec4:	e002      	b.n	8002ecc <LoopFillZerobss>

08002ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ec8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eca:	3204      	adds	r2, #4

08002ecc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <LoopForever+0x16>)
  cmp r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ed0:	d3f9      	bcc.n	8002ec6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002ed2:	f002 fdbb 	bl	8005a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ed6:	f7ff fd29 	bl	800292c <main>

08002eda <LoopForever>:

LoopForever:
    b LoopForever
 8002eda:	e7fe      	b.n	8002eda <LoopForever>
  ldr   r0, =_estack
 8002edc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8002ee0:	08007320 	.word	0x08007320
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ee8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002eec:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002ef0:	200002dc 	.word	0x200002dc

08002ef4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC1_IRQHandler>

08002ef6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002efc:	1dfb      	adds	r3, r7, #7
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f02:	2003      	movs	r0, #3
 8002f04:	f000 f80e 	bl	8002f24 <HAL_InitTick>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e001      	b.n	8002f18 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f14:	f7ff fe56 	bl	8002bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_InitTick+0x88>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02b      	beq.n	8002f94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <HAL_InitTick+0x8c>)
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <HAL_InitTick+0x88>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	0019      	movs	r1, r3
 8002f46:	23fa      	movs	r3, #250	@ 0xfa
 8002f48:	0098      	lsls	r0, r3, #2
 8002f4a:	f7fd f8ef 	bl	800012c <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	0019      	movs	r1, r3
 8002f52:	0020      	movs	r0, r4
 8002f54:	f7fd f8ea 	bl	800012c <__udivsi3>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f923 	bl	80031a6 <HAL_SYSTICK_Config>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d112      	bne.n	8002f8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d80a      	bhi.n	8002f80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	425b      	negs	r3, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f902 	bl	800317c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_InitTick+0x90>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e00d      	b.n	8002f9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e008      	b.n	8002f9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e003      	b.n	8002f9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f9c:	230f      	movs	r3, #15
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000004 	.word	0x20000004

08002fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_IncTick+0x1c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_IncTick+0x20>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	18d2      	adds	r2, r2, r3
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_IncTick+0x20>)
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	20000190 	.word	0x20000190

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	@ (8002fec <HAL_GetTick+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	20000190 	.word	0x20000190

08002ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff fff0 	bl	8002fdc <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_Delay+0x44>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	001a      	movs	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	189b      	adds	r3, r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	f7ff ffe0 	bl	8002fdc <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d8f7      	bhi.n	8003018 <HAL_Delay+0x28>
  {
  }
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	20000008 	.word	0x20000008

08003038 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40010000 	.word	0x40010000

08003058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	0002      	movs	r2, r0
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b7f      	cmp	r3, #127	@ 0x7f
 800306c:	d828      	bhi.n	80030c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306e:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <__NVIC_SetPriority+0xd4>)
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	b25b      	sxtb	r3, r3
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	33c0      	adds	r3, #192	@ 0xc0
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	589b      	ldr	r3, [r3, r2]
 800307e:	1dfa      	adds	r2, r7, #7
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	0011      	movs	r1, r2
 8003084:	2203      	movs	r2, #3
 8003086:	400a      	ands	r2, r1
 8003088:	00d2      	lsls	r2, r2, #3
 800308a:	21ff      	movs	r1, #255	@ 0xff
 800308c:	4091      	lsls	r1, r2
 800308e:	000a      	movs	r2, r1
 8003090:	43d2      	mvns	r2, r2
 8003092:	401a      	ands	r2, r3
 8003094:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	22ff      	movs	r2, #255	@ 0xff
 800309c:	401a      	ands	r2, r3
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	0018      	movs	r0, r3
 80030a4:	2303      	movs	r3, #3
 80030a6:	4003      	ands	r3, r0
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ac:	481f      	ldr	r0, [pc, #124]	@ (800312c <__NVIC_SetPriority+0xd4>)
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	430a      	orrs	r2, r1
 80030b8:	33c0      	adds	r3, #192	@ 0xc0
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030be:	e031      	b.n	8003124 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <__NVIC_SetPriority+0xd8>)
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	0019      	movs	r1, r3
 80030c8:	230f      	movs	r3, #15
 80030ca:	400b      	ands	r3, r1
 80030cc:	3b08      	subs	r3, #8
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3306      	adds	r3, #6
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	3304      	adds	r3, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1dfa      	adds	r2, r7, #7
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	0011      	movs	r1, r2
 80030e0:	2203      	movs	r2, #3
 80030e2:	400a      	ands	r2, r1
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	21ff      	movs	r1, #255	@ 0xff
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	22ff      	movs	r2, #255	@ 0xff
 80030f8:	401a      	ands	r2, r3
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0018      	movs	r0, r3
 8003100:	2303      	movs	r3, #3
 8003102:	4003      	ands	r3, r0
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003108:	4809      	ldr	r0, [pc, #36]	@ (8003130 <__NVIC_SetPriority+0xd8>)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	001c      	movs	r4, r3
 8003110:	230f      	movs	r3, #15
 8003112:	4023      	ands	r3, r4
 8003114:	3b08      	subs	r3, #8
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	430a      	orrs	r2, r1
 800311a:	3306      	adds	r3, #6
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	18c3      	adds	r3, r0, r3
 8003120:	3304      	adds	r3, #4
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b003      	add	sp, #12
 800312a:	bd90      	pop	{r4, r7, pc}
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	045b      	lsls	r3, r3, #17
 8003144:	429a      	cmp	r2, r3
 8003146:	d301      	bcc.n	800314c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003148:	2301      	movs	r3, #1
 800314a:	e010      	b.n	800316e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <SysTick_Config+0x44>)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	3a01      	subs	r2, #1
 8003152:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003154:	2301      	movs	r3, #1
 8003156:	425b      	negs	r3, r3
 8003158:	2103      	movs	r1, #3
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff ff7c 	bl	8003058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <SysTick_Config+0x44>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <SysTick_Config+0x44>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b002      	add	sp, #8
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	210f      	movs	r1, #15
 8003188:	187b      	adds	r3, r7, r1
 800318a:	1c02      	adds	r2, r0, #0
 800318c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	187b      	adds	r3, r7, r1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff ff5d 	bl	8003058 <__NVIC_SetPriority>
}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff ffbf 	bl	8003134 <SysTick_Config>
 80031b6:	0003      	movs	r3, r0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031ce:	e14d      	b.n	800346c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4091      	lsls	r1, r2
 80031da:	000a      	movs	r2, r1
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d100      	bne.n	80031e8 <HAL_GPIO_Init+0x28>
 80031e6:	e13e      	b.n	8003466 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x38>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d125      	bne.n	8003244 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	58d3      	ldr	r3, [r2, r3]
 8003204:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2207      	movs	r2, #7
 800320a:	4013      	ands	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	409a      	lsls	r2, r3
 8003212:	0013      	movs	r3, r2
 8003214:	43da      	mvns	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	220f      	movs	r2, #15
 8003222:	401a      	ands	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2107      	movs	r1, #7
 8003228:	400b      	ands	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	409a      	lsls	r2, r3
 8003252:	0013      	movs	r3, r2
 8003254:	43da      	mvns	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	401a      	ands	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	409a      	lsls	r2, r3
 800326a:	0013      	movs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d00b      	beq.n	8003298 <HAL_GPIO_Init+0xd8>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d007      	beq.n	8003298 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800328c:	2b11      	cmp	r3, #17
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d130      	bne.n	80032fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	409a      	lsls	r2, r3
 80032a6:	0013      	movs	r3, r2
 80032a8:	43da      	mvns	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	4013      	ands	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	409a      	lsls	r2, r3
 80032ba:	0013      	movs	r3, r2
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ce:	2201      	movs	r2, #1
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	409a      	lsls	r2, r3
 80032d4:	0013      	movs	r3, r2
 80032d6:	43da      	mvns	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4013      	ands	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	2201      	movs	r2, #1
 80032e6:	401a      	ands	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	409a      	lsls	r2, r3
 80032ec:	0013      	movs	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d017      	beq.n	8003332 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	409a      	lsls	r2, r3
 8003310:	0013      	movs	r3, r2
 8003312:	43da      	mvns	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	4013      	ands	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	0013      	movs	r3, r2
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	055b      	lsls	r3, r3, #21
 800333a:	4013      	ands	r3, r2
 800333c:	d100      	bne.n	8003340 <HAL_GPIO_Init+0x180>
 800333e:	e092      	b.n	8003466 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003340:	4a50      	ldr	r2, [pc, #320]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3318      	adds	r3, #24
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	589b      	ldr	r3, [r3, r2]
 800334c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2203      	movs	r2, #3
 8003352:	4013      	ands	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	220f      	movs	r2, #15
 8003358:	409a      	lsls	r2, r3
 800335a:	0013      	movs	r3, r2
 800335c:	43da      	mvns	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	23a0      	movs	r3, #160	@ 0xa0
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	429a      	cmp	r2, r3
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x1d6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a45      	ldr	r2, [pc, #276]	@ (8003488 <HAL_GPIO_Init+0x2c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x1d2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a44      	ldr	r2, [pc, #272]	@ (800348c <HAL_GPIO_Init+0x2cc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x1ce>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a43      	ldr	r2, [pc, #268]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x1ca>
 8003386:	2305      	movs	r3, #5
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x1d8>
 800338a:	2306      	movs	r3, #6
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x1d8>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x1d8>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x1d8>
 8003396:	2300      	movs	r3, #0
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	2103      	movs	r1, #3
 800339c:	400a      	ands	r2, r1
 800339e:	00d2      	lsls	r2, r2, #3
 80033a0:	4093      	lsls	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033a8:	4936      	ldr	r1, [pc, #216]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3318      	adds	r3, #24
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80033b6:	4a33      	ldr	r2, [pc, #204]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	58d3      	ldr	r3, [r2, r3]
 80033bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	025b      	lsls	r3, r3, #9
 80033d0:	4013      	ands	r3, r2
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80033dc:	4929      	ldr	r1, [pc, #164]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80033e4:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 80033e6:	2384      	movs	r3, #132	@ 0x84
 80033e8:	58d3      	ldr	r3, [r2, r3]
 80033ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4013      	ands	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	4013      	ands	r3, r2
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800340a:	491e      	ldr	r1, [pc, #120]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 800340c:	2284      	movs	r2, #132	@ 0x84
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003412:	4b1c      	ldr	r3, [pc, #112]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43da      	mvns	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4013      	ands	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	035b      	lsls	r3, r3, #13
 800342a:	4013      	ands	r3, r2
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003436:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43da      	mvns	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	039b      	lsls	r3, r3, #14
 8003454:	4013      	ands	r3, r2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3301      	adds	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	40da      	lsrs	r2, r3
 8003474:	1e13      	subs	r3, r2, #0
 8003476:	d000      	beq.n	800347a <HAL_GPIO_Init+0x2ba>
 8003478:	e6aa      	b.n	80031d0 <HAL_GPIO_Init+0x10>
  }
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b006      	add	sp, #24
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021800 	.word	0x40021800
 8003488:	50000400 	.word	0x50000400
 800348c:	50000800 	.word	0x50000800
 8003490:	50001400 	.word	0x50001400

08003494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e08f      	b.n	80035c6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2241      	movs	r2, #65	@ 0x41
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff fbab 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2241      	movs	r2, #65	@ 0x41
 80034c6:	2124      	movs	r1, #36	@ 0x24
 80034c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	438a      	bics	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	493b      	ldr	r1, [pc, #236]	@ (80035d0 <HAL_I2C_Init+0x13c>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4938      	ldr	r1, [pc, #224]	@ (80035d4 <HAL_I2C_Init+0x140>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2180      	movs	r1, #128	@ 0x80
 800350a:	0209      	lsls	r1, r1, #8
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	e007      	b.n	8003522 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2184      	movs	r1, #132	@ 0x84
 800351c:	0209      	lsls	r1, r1, #8
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d109      	bne.n	800353e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	0109      	lsls	r1, r1, #4
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	e007      	b.n	800354e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4923      	ldr	r1, [pc, #140]	@ (80035d8 <HAL_I2C_Init+0x144>)
 800354a:	400a      	ands	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4920      	ldr	r1, [pc, #128]	@ (80035dc <HAL_I2C_Init+0x148>)
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	491a      	ldr	r1, [pc, #104]	@ (80035d4 <HAL_I2C_Init+0x140>)
 800356a:	400a      	ands	r2, r1
 800356c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	431a      	orrs	r2, r3
 8003578:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2241      	movs	r2, #65	@ 0x41
 80035b2:	2120      	movs	r1, #32
 80035b4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2242      	movs	r2, #66	@ 0x42
 80035c0:	2100      	movs	r1, #0
 80035c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	f0ffffff 	.word	0xf0ffffff
 80035d4:	ffff7fff 	.word	0xffff7fff
 80035d8:	fffff7ff 	.word	0xfffff7ff
 80035dc:	02008000 	.word	0x02008000

080035e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	0008      	movs	r0, r1
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	0019      	movs	r1, r3
 80035ee:	230a      	movs	r3, #10
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	1c02      	adds	r2, r0, #0
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	2308      	movs	r3, #8
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	1c0a      	adds	r2, r1, #0
 80035fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2241      	movs	r2, #65	@ 0x41
 8003602:	5c9b      	ldrb	r3, [r3, r2]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	d000      	beq.n	800360c <HAL_I2C_Master_Transmit+0x2c>
 800360a:	e10a      	b.n	8003822 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2240      	movs	r2, #64	@ 0x40
 8003610:	5c9b      	ldrb	r3, [r3, r2]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_I2C_Master_Transmit+0x3a>
 8003616:	2302      	movs	r3, #2
 8003618:	e104      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2240      	movs	r2, #64	@ 0x40
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003622:	f7ff fcdb 	bl	8002fdc <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	0219      	lsls	r1, r3, #8
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2319      	movs	r3, #25
 8003636:	2201      	movs	r2, #1
 8003638:	f000 fd4e 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0ef      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2241      	movs	r2, #65	@ 0x41
 8003648:	2121      	movs	r1, #33	@ 0x21
 800364a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2242      	movs	r2, #66	@ 0x42
 8003650:	2110      	movs	r1, #16
 8003652:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2208      	movs	r2, #8
 8003664:	18ba      	adds	r2, r7, r2
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2bff      	cmp	r3, #255	@ 0xff
 8003678:	d906      	bls.n	8003688 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	22ff      	movs	r2, #255	@ 0xff
 800367e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	045b      	lsls	r3, r3, #17
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e007      	b.n	8003698 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	049b      	lsls	r3, r3, #18
 8003696:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d027      	beq.n	80036f0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	697c      	ldr	r4, [r7, #20]
 80036dc:	230a      	movs	r3, #10
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	4b51      	ldr	r3, [pc, #324]	@ (800382c <HAL_I2C_Master_Transmit+0x24c>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f000 ff47 	bl	800457c <I2C_TransferConfig>
 80036ee:	e06f      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	697c      	ldr	r4, [r7, #20]
 80036f8:	230a      	movs	r3, #10
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	8819      	ldrh	r1, [r3, #0]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_I2C_Master_Transmit+0x24c>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	0023      	movs	r3, r4
 8003706:	f000 ff39 	bl	800457c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800370a:	e061      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fd2e 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e081      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03a      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x1f0>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	d136      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	0013      	movs	r3, r2
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	@ 0x80
 8003770:	f000 fcb2 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e053      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2bff      	cmp	r3, #255	@ 0xff
 8003784:	d911      	bls.n	80037aa <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22ff      	movs	r2, #255	@ 0xff
 800378a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	b2da      	uxtb	r2, r3
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	045c      	lsls	r4, r3, #17
 8003796:	230a      	movs	r3, #10
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	8819      	ldrh	r1, [r3, #0]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	2300      	movs	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	0023      	movs	r3, r4
 80037a4:	f000 feea 	bl	800457c <I2C_TransferConfig>
 80037a8:	e012      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	049c      	lsls	r4, r3, #18
 80037be:	230a      	movs	r3, #10
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	8819      	ldrh	r1, [r3, #0]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	0023      	movs	r3, r4
 80037cc:	f000 fed6 	bl	800457c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d198      	bne.n	800370c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fd0d 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e01a      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2220      	movs	r2, #32
 80037f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	490b      	ldr	r1, [pc, #44]	@ (8003830 <HAL_I2C_Master_Transmit+0x250>)
 8003802:	400a      	ands	r2, r1
 8003804:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2241      	movs	r2, #65	@ 0x41
 800380a:	2120      	movs	r1, #32
 800380c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2242      	movs	r2, #66	@ 0x42
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b007      	add	sp, #28
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	80002000 	.word	0x80002000
 8003830:	fe00e800 	.word	0xfe00e800

08003834 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b089      	sub	sp, #36	@ 0x24
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	0008      	movs	r0, r1
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	0019      	movs	r1, r3
 8003842:	230a      	movs	r3, #10
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	1c02      	adds	r2, r0, #0
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	2308      	movs	r3, #8
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	1c0a      	adds	r2, r1, #0
 8003850:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2241      	movs	r2, #65	@ 0x41
 8003856:	5c9b      	ldrb	r3, [r3, r2]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d000      	beq.n	8003860 <HAL_I2C_Master_Receive+0x2c>
 800385e:	e0e8      	b.n	8003a32 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2240      	movs	r2, #64	@ 0x40
 8003864:	5c9b      	ldrb	r3, [r3, r2]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Master_Receive+0x3a>
 800386a:	2302      	movs	r3, #2
 800386c:	e0e2      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2240      	movs	r2, #64	@ 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003876:	f7ff fbb1 	bl	8002fdc <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	0219      	lsls	r1, r3, #8
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2319      	movs	r3, #25
 800388a:	2201      	movs	r2, #1
 800388c:	f000 fc24 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cd      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2241      	movs	r2, #65	@ 0x41
 800389c:	2122      	movs	r1, #34	@ 0x22
 800389e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2242      	movs	r2, #66	@ 0x42
 80038a4:	2110      	movs	r1, #16
 80038a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2208      	movs	r2, #8
 80038b8:	18ba      	adds	r2, r7, r2
 80038ba:	8812      	ldrh	r2, [r2, #0]
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2bff      	cmp	r3, #255	@ 0xff
 80038cc:	d911      	bls.n	80038f2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	22ff      	movs	r2, #255	@ 0xff
 80038d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	2380      	movs	r3, #128	@ 0x80
 80038dc:	045c      	lsls	r4, r3, #17
 80038de:	230a      	movs	r3, #10
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	8819      	ldrh	r1, [r3, #0]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	4b55      	ldr	r3, [pc, #340]	@ (8003a3c <HAL_I2C_Master_Receive+0x208>)
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	0023      	movs	r3, r4
 80038ec:	f000 fe46 	bl	800457c <I2C_TransferConfig>
 80038f0:	e076      	b.n	80039e0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	b2da      	uxtb	r2, r3
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	049c      	lsls	r4, r3, #18
 8003906:	230a      	movs	r3, #10
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	8819      	ldrh	r1, [r3, #0]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_I2C_Master_Receive+0x208>)
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	0023      	movs	r3, r4
 8003914:	f000 fe32 	bl	800457c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003918:	e062      	b.n	80039e0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0018      	movs	r0, r3
 8003922:	f000 fcb1 	bl	8004288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e082      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03a      	beq.n	80039e0 <HAL_I2C_Master_Receive+0x1ac>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d136      	bne.n	80039e0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	0013      	movs	r3, r2
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	@ 0x80
 8003980:	f000 fbaa 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e053      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2bff      	cmp	r3, #255	@ 0xff
 8003994:	d911      	bls.n	80039ba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	2380      	movs	r3, #128	@ 0x80
 80039a4:	045c      	lsls	r4, r3, #17
 80039a6:	230a      	movs	r3, #10
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	8819      	ldrh	r1, [r3, #0]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	0023      	movs	r3, r4
 80039b4:	f000 fde2 	bl	800457c <I2C_TransferConfig>
 80039b8:	e012      	b.n	80039e0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	2380      	movs	r3, #128	@ 0x80
 80039cc:	049c      	lsls	r4, r3, #18
 80039ce:	230a      	movs	r3, #10
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	8819      	ldrh	r1, [r3, #0]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	0023      	movs	r3, r4
 80039dc:	f000 fdce 	bl	800457c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d197      	bne.n	800391a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fc05 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e01a      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2220      	movs	r2, #32
 8003a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	490b      	ldr	r1, [pc, #44]	@ (8003a40 <HAL_I2C_Master_Receive+0x20c>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2241      	movs	r2, #65	@ 0x41
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2242      	movs	r2, #66	@ 0x42
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2240      	movs	r2, #64	@ 0x40
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b007      	add	sp, #28
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	80002400 	.word	0x80002400
 8003a40:	fe00e800 	.word	0xfe00e800

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b089      	sub	sp, #36	@ 0x24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	000c      	movs	r4, r1
 8003a4e:	0010      	movs	r0, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	230a      	movs	r3, #10
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	1c22      	adds	r2, r4, #0
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	1c0a      	adds	r2, r1, #0
 8003a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2241      	movs	r2, #65	@ 0x41
 8003a6c:	5c9b      	ldrb	r3, [r3, r2]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d000      	beq.n	8003a76 <HAL_I2C_Mem_Write+0x32>
 8003a74:	e10c      	b.n	8003c90 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_I2C_Mem_Write+0x42>
 8003a7c:	232c      	movs	r3, #44	@ 0x2c
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0ff      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2240      	movs	r2, #64	@ 0x40
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_I2C_Mem_Write+0x5c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0f8      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aa8:	f7ff fa98 	bl	8002fdc <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	0219      	lsls	r1, r3, #8
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2319      	movs	r3, #25
 8003abc:	2201      	movs	r2, #1
 8003abe:	f000 fb0b 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e3      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2241      	movs	r2, #65	@ 0x41
 8003ace:	2121      	movs	r1, #33	@ 0x21
 8003ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2242      	movs	r2, #66	@ 0x42
 8003ad6:	2140      	movs	r1, #64	@ 0x40
 8003ad8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	222c      	movs	r2, #44	@ 0x2c
 8003aea:	18ba      	adds	r2, r7, r2
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af6:	1dbb      	adds	r3, r7, #6
 8003af8:	881c      	ldrh	r4, [r3, #0]
 8003afa:	2308      	movs	r3, #8
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	230a      	movs	r3, #10
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	8819      	ldrh	r1, [r3, #0]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	0023      	movs	r3, r4
 8003b12:	f000 f9f9 	bl	8003f08 <I2C_RequestMemoryWrite>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2240      	movs	r2, #64	@ 0x40
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0b5      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2bff      	cmp	r3, #255	@ 0xff
 8003b2e:	d911      	bls.n	8003b54 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	045c      	lsls	r4, r3, #17
 8003b40:	230a      	movs	r3, #10
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	8819      	ldrh	r1, [r3, #0]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	0023      	movs	r3, r4
 8003b4e:	f000 fd15 	bl	800457c <I2C_TransferConfig>
 8003b52:	e012      	b.n	8003b7a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	049c      	lsls	r4, r3, #18
 8003b68:	230a      	movs	r3, #10
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	8819      	ldrh	r1, [r3, #0]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	0023      	movs	r3, r4
 8003b76:	f000 fd01 	bl	800457c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 faf7 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b86:	1e03      	subs	r3, r0, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e081      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03a      	beq.n	8003c3e <HAL_I2C_Mem_Write+0x1fa>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d136      	bne.n	8003c3e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	0013      	movs	r3, r2
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2180      	movs	r1, #128	@ 0x80
 8003bde:	f000 fa7b 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e053      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2bff      	cmp	r3, #255	@ 0xff
 8003bf2:	d911      	bls.n	8003c18 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	22ff      	movs	r2, #255	@ 0xff
 8003bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	045c      	lsls	r4, r3, #17
 8003c04:	230a      	movs	r3, #10
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	8819      	ldrh	r1, [r3, #0]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	0023      	movs	r3, r4
 8003c12:	f000 fcb3 	bl	800457c <I2C_TransferConfig>
 8003c16:	e012      	b.n	8003c3e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	049c      	lsls	r4, r3, #18
 8003c2c:	230a      	movs	r3, #10
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	8819      	ldrh	r1, [r3, #0]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	0023      	movs	r3, r4
 8003c3a:	f000 fc9f 	bl	800457c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d198      	bne.n	8003b7a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 fad6 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e01a      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	490b      	ldr	r1, [pc, #44]	@ (8003c9c <HAL_I2C_Mem_Write+0x258>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2241      	movs	r2, #65	@ 0x41
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2242      	movs	r2, #66	@ 0x42
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b007      	add	sp, #28
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	000c      	movs	r4, r1
 8003caa:	0010      	movs	r0, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	230a      	movs	r3, #10
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	1c22      	adds	r2, r4, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	1c02      	adds	r2, r0, #0
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	1dbb      	adds	r3, r7, #6
 8003cc0:	1c0a      	adds	r2, r1, #0
 8003cc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2241      	movs	r2, #65	@ 0x41
 8003cc8:	5c9b      	ldrb	r3, [r3, r2]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d000      	beq.n	8003cd2 <HAL_I2C_Mem_Read+0x32>
 8003cd0:	e110      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_I2C_Mem_Read+0x42>
 8003cd8:	232c      	movs	r3, #44	@ 0x2c
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e103      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2240      	movs	r2, #64	@ 0x40
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x5c>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0fc      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2240      	movs	r2, #64	@ 0x40
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d04:	f7ff f96a 	bl	8002fdc <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	0219      	lsls	r1, r3, #8
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2319      	movs	r3, #25
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f000 f9dd 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0e7      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2241      	movs	r2, #65	@ 0x41
 8003d2a:	2122      	movs	r1, #34	@ 0x22
 8003d2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2242      	movs	r2, #66	@ 0x42
 8003d32:	2140      	movs	r1, #64	@ 0x40
 8003d34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	222c      	movs	r2, #44	@ 0x2c
 8003d46:	18ba      	adds	r2, r7, r2
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	881c      	ldrh	r4, [r3, #0]
 8003d56:	2308      	movs	r3, #8
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	8819      	ldrh	r1, [r3, #0]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	0023      	movs	r3, r4
 8003d6e:	f000 f92f 	bl	8003fd0 <I2C_RequestMemoryRead>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2240      	movs	r2, #64	@ 0x40
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0b9      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2bff      	cmp	r3, #255	@ 0xff
 8003d8a:	d911      	bls.n	8003db0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	22ff      	movs	r2, #255	@ 0xff
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	045c      	lsls	r4, r3, #17
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	8819      	ldrh	r1, [r3, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	4b56      	ldr	r3, [pc, #344]	@ (8003f00 <HAL_I2C_Mem_Read+0x260>)
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0023      	movs	r3, r4
 8003daa:	f000 fbe7 	bl	800457c <I2C_TransferConfig>
 8003dae:	e012      	b.n	8003dd6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	049c      	lsls	r4, r3, #18
 8003dc4:	230a      	movs	r3, #10
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	8819      	ldrh	r1, [r3, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8003f00 <HAL_I2C_Mem_Read+0x260>)
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0023      	movs	r3, r4
 8003dd2:	f000 fbd3 	bl	800457c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	0013      	movs	r3, r2
 8003de0:	2200      	movs	r2, #0
 8003de2:	2104      	movs	r1, #4
 8003de4:	f000 f978 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	1e03      	subs	r3, r0, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e082      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03a      	beq.n	8003ea2 <HAL_I2C_Mem_Read+0x202>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d136      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	f000 f949 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e053      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2bff      	cmp	r3, #255	@ 0xff
 8003e56:	d911      	bls.n	8003e7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22ff      	movs	r2, #255	@ 0xff
 8003e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	045c      	lsls	r4, r3, #17
 8003e68:	230a      	movs	r3, #10
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	8819      	ldrh	r1, [r3, #0]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	0023      	movs	r3, r4
 8003e76:	f000 fb81 	bl	800457c <I2C_TransferConfig>
 8003e7a:	e012      	b.n	8003ea2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	049c      	lsls	r4, r3, #18
 8003e90:	230a      	movs	r3, #10
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	8819      	ldrh	r1, [r3, #0]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	0023      	movs	r3, r4
 8003e9e:	f000 fb6d 	bl	800457c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d194      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f9a4 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01a      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	490c      	ldr	r1, [pc, #48]	@ (8003f04 <HAL_I2C_Mem_Read+0x264>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2241      	movs	r2, #65	@ 0x41
 8003edc:	2120      	movs	r1, #32
 8003ede:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2242      	movs	r2, #66	@ 0x42
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2240      	movs	r2, #64	@ 0x40
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b007      	add	sp, #28
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	80002400 	.word	0x80002400
 8003f04:	fe00e800 	.word	0xfe00e800

08003f08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	000c      	movs	r4, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	250a      	movs	r5, #10
 8003f18:	197b      	adds	r3, r7, r5
 8003f1a:	1c22      	adds	r2, r4, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2308      	movs	r3, #8
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	1dbb      	adds	r3, r7, #6
 8003f28:	1c0a      	adds	r2, r1, #0
 8003f2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f2c:	1dbb      	adds	r3, r7, #6
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	045c      	lsls	r4, r3, #17
 8003f36:	197b      	adds	r3, r7, r5
 8003f38:	8819      	ldrh	r1, [r3, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	4b23      	ldr	r3, [pc, #140]	@ (8003fcc <I2C_RequestMemoryWrite+0xc4>)
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0023      	movs	r3, r4
 8003f42:	f000 fb1b 	bl	800457c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f911 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e033      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5a:	1dbb      	adds	r3, r7, #6
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f70:	e019      	b.n	8003fa6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f72:	2308      	movs	r3, #8
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 f8f2 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e014      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f98:	2308      	movs	r3, #8
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	0013      	movs	r3, r2
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	f000 f890 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	80002000 	.word	0x80002000

08003fd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003fd0:	b5b0      	push	{r4, r5, r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	000c      	movs	r4, r1
 8003fda:	0010      	movs	r0, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	250a      	movs	r5, #10
 8003fe0:	197b      	adds	r3, r7, r5
 8003fe2:	1c22      	adds	r2, r4, #0
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	1c02      	adds	r2, r0, #0
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	1dbb      	adds	r3, r7, #6
 8003ff0:	1c0a      	adds	r2, r1, #0
 8003ff2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	197b      	adds	r3, r7, r5
 8003ffc:	8819      	ldrh	r1, [r3, #0]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <I2C_RequestMemoryRead+0xc0>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	f000 fab9 	bl	800457c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0018      	movs	r0, r3
 8004012:	f000 f8af 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e033      	b.n	8004086 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004026:	2308      	movs	r3, #8
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	629a      	str	r2, [r3, #40]	@ 0x28
 8004034:	e019      	b.n	800406a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004036:	2308      	movs	r3, #8
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b29b      	uxth	r3, r3
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 f890 	bl	8004174 <I2C_WaitOnTXISFlagUntilTimeout>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d001      	beq.n	800405c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e014      	b.n	8004086 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405c:	2308      	movs	r3, #8
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	0013      	movs	r3, r2
 8004074:	2200      	movs	r2, #0
 8004076:	2140      	movs	r1, #64	@ 0x40
 8004078:	f000 f82e 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bdb0      	pop	{r4, r5, r7, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	80002000 	.word	0x80002000

08004094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2202      	movs	r2, #2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d103      	bne.n	80040b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2201      	movs	r2, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d007      	beq.n	80040d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
  }
}
 80040d0:	46c0      	nop			@ (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e8:	e030      	b.n	800414c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	d02d      	beq.n	800414c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7fe ff74 	bl	8002fdc <HAL_GetTick>
 80040f4:	0002      	movs	r2, r0
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d122      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	425a      	negs	r2, r3
 8004116:	4153      	adcs	r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	001a      	movs	r2, r3
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d113      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	2220      	movs	r2, #32
 800412a:	431a      	orrs	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2241      	movs	r2, #65	@ 0x41
 8004134:	2120      	movs	r1, #32
 8004136:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2242      	movs	r2, #66	@ 0x42
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	@ 0x40
 8004144:	2100      	movs	r1, #0
 8004146:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e00f      	b.n	800416c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	425a      	negs	r2, r3
 800415c:	4153      	adcs	r3, r2
 800415e:	b2db      	uxtb	r3, r3
 8004160:	001a      	movs	r2, r3
 8004162:	1dfb      	adds	r3, r7, #7
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d0bf      	beq.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004180:	e032      	b.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f8ff 	bl	800438c <I2C_IsErrorOccurred>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d001      	beq.n	8004196 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e030      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3301      	adds	r3, #1
 800419a:	d025      	beq.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419c:	f7fe ff1e 	bl	8002fdc <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11a      	bne.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d013      	beq.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c4:	2220      	movs	r2, #32
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2241      	movs	r2, #65	@ 0x41
 80041d0:	2120      	movs	r1, #32
 80041d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2242      	movs	r2, #66	@ 0x42
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	2100      	movs	r1, #0
 80041e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d1c5      	bne.n	8004182 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420c:	e02f      	b.n	800426e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 f8b9 	bl	800438c <I2C_IsErrorOccurred>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02d      	b.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe fedb 	bl	8002fdc <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2220      	movs	r2, #32
 8004240:	4013      	ands	r3, r2
 8004242:	2b20      	cmp	r3, #32
 8004244:	d013      	beq.n	800426e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	2220      	movs	r2, #32
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2241      	movs	r2, #65	@ 0x41
 8004256:	2120      	movs	r1, #32
 8004258:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2242      	movs	r2, #66	@ 0x42
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2240      	movs	r2, #64	@ 0x40
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e007      	b.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2220      	movs	r2, #32
 8004276:	4013      	ands	r3, r2
 8004278:	2b20      	cmp	r3, #32
 800427a:	d1c8      	bne.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004294:	e06b      	b.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f875 	bl	800438c <I2C_IsErrorOccurred>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e069      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2220      	movs	r2, #32
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d138      	bne.n	800432a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2204      	movs	r2, #4
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d105      	bne.n	80042d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e055      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2210      	movs	r2, #16
 80042da:	4013      	ands	r3, r2
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d107      	bne.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2210      	movs	r2, #16
 80042e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2204      	movs	r2, #4
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80042ee:	e002      	b.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	491f      	ldr	r1, [pc, #124]	@ (8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800430a:	400a      	ands	r2, r1
 800430c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2241      	movs	r2, #65	@ 0x41
 8004312:	2120      	movs	r1, #32
 8004314:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2242      	movs	r2, #66	@ 0x42
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2240      	movs	r2, #64	@ 0x40
 8004322:	2100      	movs	r1, #0
 8004324:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e029      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe fe57 	bl	8002fdc <HAL_GetTick>
 800432e:	0002      	movs	r2, r0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2204      	movs	r2, #4
 8004348:	4013      	ands	r3, r2
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00f      	beq.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	2220      	movs	r2, #32
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2241      	movs	r2, #65	@ 0x41
 800435e:	2120      	movs	r1, #32
 8004360:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2240      	movs	r2, #64	@ 0x40
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2204      	movs	r2, #4
 8004376:	4013      	ands	r3, r2
 8004378:	2b04      	cmp	r3, #4
 800437a:	d18c      	bne.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2327      	movs	r3, #39	@ 0x27
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2210      	movs	r2, #16
 80043b4:	4013      	ands	r3, r2
 80043b6:	d100      	bne.n	80043ba <I2C_IsErrorOccurred+0x2e>
 80043b8:	e079      	b.n	80044ae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2210      	movs	r2, #16
 80043c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043c2:	e057      	b.n	8004474 <I2C_IsErrorOccurred+0xe8>
 80043c4:	2227      	movs	r2, #39	@ 0x27
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d04f      	beq.n	8004474 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fe fe02 	bl	8002fdc <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_IsErrorOccurred+0x5e>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d144      	bne.n	8004474 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043f8:	2013      	movs	r0, #19
 80043fa:	183b      	adds	r3, r7, r0
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	2142      	movs	r1, #66	@ 0x42
 8004400:	5c52      	ldrb	r2, [r2, r1]
 8004402:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	401a      	ands	r2, r3
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	429a      	cmp	r2, r3
 8004416:	d126      	bne.n	8004466 <I2C_IsErrorOccurred+0xda>
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	429a      	cmp	r2, r3
 8004420:	d021      	beq.n	8004466 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004422:	183b      	adds	r3, r7, r0
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b20      	cmp	r3, #32
 8004428:	d01d      	beq.n	8004466 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2180      	movs	r1, #128	@ 0x80
 8004436:	01c9      	lsls	r1, r1, #7
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800443c:	f7fe fdce 	bl	8002fdc <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004444:	e00f      	b.n	8004466 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004446:	f7fe fdc9 	bl	8002fdc <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b19      	cmp	r3, #25
 8004452:	d908      	bls.n	8004466 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2220      	movs	r2, #32
 8004458:	4313      	orrs	r3, r2
 800445a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800445c:	2327      	movs	r3, #39	@ 0x27
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]

              break;
 8004464:	e006      	b.n	8004474 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2220      	movs	r2, #32
 800446e:	4013      	ands	r3, r2
 8004470:	2b20      	cmp	r3, #32
 8004472:	d1e8      	bne.n	8004446 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2220      	movs	r2, #32
 800447c:	4013      	ands	r3, r2
 800447e:	2b20      	cmp	r3, #32
 8004480:	d004      	beq.n	800448c <I2C_IsErrorOccurred+0x100>
 8004482:	2327      	movs	r3, #39	@ 0x27
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d09b      	beq.n	80043c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800448c:	2327      	movs	r3, #39	@ 0x27
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2220      	movs	r2, #32
 800449c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2204      	movs	r2, #4
 80044a2:	4313      	orrs	r3, r2
 80044a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044a6:	2327      	movs	r3, #39	@ 0x27
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4013      	ands	r3, r2
 80044be:	d00c      	beq.n	80044da <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	@ 0x80
 80044ce:	0052      	lsls	r2, r2, #1
 80044d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d2:	2327      	movs	r3, #39	@ 0x27
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4013      	ands	r3, r2
 80044e2:	d00c      	beq.n	80044fe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2208      	movs	r2, #8
 80044e8:	4313      	orrs	r3, r2
 80044ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f6:	2327      	movs	r3, #39	@ 0x27
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4013      	ands	r3, r2
 8004506:	d00c      	beq.n	8004522 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2202      	movs	r2, #2
 800450c:	4313      	orrs	r3, r2
 800450e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2280      	movs	r2, #128	@ 0x80
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451a:	2327      	movs	r3, #39	@ 0x27
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004522:	2327      	movs	r3, #39	@ 0x27
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01d      	beq.n	8004568 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff fdb0 	bl	8004094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	490e      	ldr	r1, [pc, #56]	@ (8004578 <I2C_IsErrorOccurred+0x1ec>)
 8004540:	400a      	ands	r2, r1
 8004542:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2241      	movs	r2, #65	@ 0x41
 8004554:	2120      	movs	r1, #32
 8004556:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2242      	movs	r2, #66	@ 0x42
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2240      	movs	r2, #64	@ 0x40
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004568:	2327      	movs	r3, #39	@ 0x27
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b00a      	add	sp, #40	@ 0x28
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	fe00e800 	.word	0xfe00e800

0800457c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	0008      	movs	r0, r1
 8004586:	0011      	movs	r1, r2
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	240a      	movs	r4, #10
 800458c:	193b      	adds	r3, r7, r4
 800458e:	1c02      	adds	r2, r0, #0
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	2009      	movs	r0, #9
 8004594:	183b      	adds	r3, r7, r0
 8004596:	1c0a      	adds	r2, r1, #0
 8004598:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800459a:	193b      	adds	r3, r7, r4
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	059b      	lsls	r3, r3, #22
 80045a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	0419      	lsls	r1, r3, #16
 80045a8:	23ff      	movs	r3, #255	@ 0xff
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	4313      	orrs	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c6:	0d51      	lsrs	r1, r2, #21
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	00d2      	lsls	r2, r2, #3
 80045cc:	400a      	ands	r2, r1
 80045ce:	4907      	ldr	r1, [pc, #28]	@ (80045ec <I2C_TransferConfig+0x70>)
 80045d0:	430a      	orrs	r2, r1
 80045d2:	43d2      	mvns	r2, r2
 80045d4:	401a      	ands	r2, r3
 80045d6:	0011      	movs	r1, r2
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b007      	add	sp, #28
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	03ff63ff 	.word	0x03ff63ff

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1d0      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d100      	bne.n	800460e <HAL_RCC_OscConfig+0x1e>
 800460c:	e069      	b.n	80046e2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460e:	4bc8      	ldr	r3, [pc, #800]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2238      	movs	r2, #56	@ 0x38
 8004614:	4013      	ands	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d105      	bne.n	800462a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d15d      	bne.n	80046e2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e1bc      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	025b      	lsls	r3, r3, #9
 8004632:	429a      	cmp	r2, r3
 8004634:	d107      	bne.n	8004646 <HAL_RCC_OscConfig+0x56>
 8004636:	4bbe      	ldr	r3, [pc, #760]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4bbd      	ldr	r3, [pc, #756]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800463c:	2180      	movs	r1, #128	@ 0x80
 800463e:	0249      	lsls	r1, r1, #9
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e020      	b.n	8004688 <HAL_RCC_OscConfig+0x98>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	23a0      	movs	r3, #160	@ 0xa0
 800464c:	02db      	lsls	r3, r3, #11
 800464e:	429a      	cmp	r2, r3
 8004650:	d10e      	bne.n	8004670 <HAL_RCC_OscConfig+0x80>
 8004652:	4bb7      	ldr	r3, [pc, #732]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4bb6      	ldr	r3, [pc, #728]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004658:	2180      	movs	r1, #128	@ 0x80
 800465a:	02c9      	lsls	r1, r1, #11
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	4bb3      	ldr	r3, [pc, #716]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4bb2      	ldr	r3, [pc, #712]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004666:	2180      	movs	r1, #128	@ 0x80
 8004668:	0249      	lsls	r1, r1, #9
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0x98>
 8004670:	4baf      	ldr	r3, [pc, #700]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4bae      	ldr	r3, [pc, #696]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004676:	49af      	ldr	r1, [pc, #700]	@ (8004934 <HAL_RCC_OscConfig+0x344>)
 8004678:	400a      	ands	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	4bac      	ldr	r3, [pc, #688]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4bab      	ldr	r3, [pc, #684]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004682:	49ad      	ldr	r1, [pc, #692]	@ (8004938 <HAL_RCC_OscConfig+0x348>)
 8004684:	400a      	ands	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d014      	beq.n	80046ba <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fca4 	bl	8002fdc <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800469a:	f7fe fc9f 	bl	8002fdc <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	@ 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e17b      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	@ 0x80
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	4013      	ands	r3, r2
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0xaa>
 80046b8:	e013      	b.n	80046e2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe fc8f 	bl	8002fdc <HAL_GetTick>
 80046be:	0003      	movs	r3, r0
 80046c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80046c4:	f7fe fc8a 	bl	8002fdc <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	@ 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e166      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d6:	4b96      	ldr	r3, [pc, #600]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	4013      	ands	r3, r2
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2202      	movs	r2, #2
 80046e8:	4013      	ands	r3, r2
 80046ea:	d100      	bne.n	80046ee <HAL_RCC_OscConfig+0xfe>
 80046ec:	e086      	b.n	80047fc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ee:	4b90      	ldr	r3, [pc, #576]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2238      	movs	r2, #56	@ 0x38
 80046f4:	4013      	ands	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d12f      	bne.n	800475e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e14c      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b89      	ldr	r3, [pc, #548]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4a8b      	ldr	r2, [pc, #556]	@ (800493c <HAL_RCC_OscConfig+0x34c>)
 8004710:	4013      	ands	r3, r2
 8004712:	0019      	movs	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	021a      	lsls	r2, r3, #8
 800471a:	4b85      	ldr	r3, [pc, #532]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d112      	bne.n	800474c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004726:	4b82      	ldr	r3, [pc, #520]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a85      	ldr	r2, [pc, #532]	@ (8004940 <HAL_RCC_OscConfig+0x350>)
 800472c:	4013      	ands	r3, r2
 800472e:	0019      	movs	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	4b7e      	ldr	r3, [pc, #504]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800473a:	4b7d      	ldr	r3, [pc, #500]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0adb      	lsrs	r3, r3, #11
 8004740:	2207      	movs	r2, #7
 8004742:	4013      	ands	r3, r2
 8004744:	4a7f      	ldr	r2, [pc, #508]	@ (8004944 <HAL_RCC_OscConfig+0x354>)
 8004746:	40da      	lsrs	r2, r3
 8004748:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <HAL_RCC_OscConfig+0x358>)
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800474c:	4b7f      	ldr	r3, [pc, #508]	@ (800494c <HAL_RCC_OscConfig+0x35c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0018      	movs	r0, r3
 8004752:	f7fe fbe7 	bl	8002f24 <HAL_InitTick>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d050      	beq.n	80047fc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e122      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d030      	beq.n	80047c8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004766:	4b72      	ldr	r3, [pc, #456]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	@ (8004940 <HAL_RCC_OscConfig+0x350>)
 800476c:	4013      	ands	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	4b6e      	ldr	r3, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800477a:	4b6d      	ldr	r3, [pc, #436]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b6c      	ldr	r3, [pc, #432]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004780:	2180      	movs	r1, #128	@ 0x80
 8004782:	0049      	lsls	r1, r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fc28 	bl	8002fdc <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004792:	f7fe fc23 	bl	8002fdc <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0ff      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a4:	4b62      	ldr	r3, [pc, #392]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4013      	ands	r3, r2
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a61      	ldr	r2, [pc, #388]	@ (800493c <HAL_RCC_OscConfig+0x34c>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	021a      	lsls	r2, r3, #8
 80047c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e019      	b.n	80047fc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b58      	ldr	r3, [pc, #352]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047ce:	4960      	ldr	r1, [pc, #384]	@ (8004950 <HAL_RCC_OscConfig+0x360>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe fc02 	bl	8002fdc <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80047de:	f7fe fbfd 	bl	8002fdc <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0d9      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	4013      	ands	r3, r2
 8004804:	d042      	beq.n	800488c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004806:	4b4a      	ldr	r3, [pc, #296]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2238      	movs	r2, #56	@ 0x38
 800480c:	4013      	ands	r3, r2
 800480e:	2b18      	cmp	r3, #24
 8004810:	d105      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d138      	bne.n	800488c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0c2      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004826:	4b42      	ldr	r3, [pc, #264]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fe fbd3 	bl	8002fdc <HAL_GetTick>
 8004836:	0003      	movs	r3, r0
 8004838:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800483c:	f7fe fbce 	bl	8002fdc <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0aa      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800484e:	4b38      	ldr	r3, [pc, #224]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004852:	2202      	movs	r2, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d0f1      	beq.n	800483c <HAL_RCC_OscConfig+0x24c>
 8004858:	e018      	b.n	800488c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800485a:	4b35      	ldr	r3, [pc, #212]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 800485c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800485e:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004860:	2101      	movs	r1, #1
 8004862:	438a      	bics	r2, r1
 8004864:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fbb9 	bl	8002fdc <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004870:	f7fe fbb4 	bl	8002fdc <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e090      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004882:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004886:	2202      	movs	r2, #2
 8004888:	4013      	ands	r3, r2
 800488a:	d1f1      	bne.n	8004870 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2204      	movs	r2, #4
 8004892:	4013      	ands	r3, r2
 8004894:	d100      	bne.n	8004898 <HAL_RCC_OscConfig+0x2a8>
 8004896:	e084      	b.n	80049a2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004898:	230f      	movs	r3, #15
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80048a0:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2238      	movs	r2, #56	@ 0x38
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d000      	beq.n	80048b6 <HAL_RCC_OscConfig+0x2c6>
 80048b4:	e075      	b.n	80049a2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e074      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2e0>
 80048c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ce:	e01c      	b.n	800490a <HAL_RCC_OscConfig+0x31a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCC_OscConfig+0x302>
 80048d8:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048de:	2104      	movs	r1, #4
 80048e0:	430a      	orrs	r2, r1
 80048e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	430a      	orrs	r2, r1
 80048ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048f0:	e00b      	b.n	800490a <HAL_RCC_OscConfig+0x31a>
 80048f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	438a      	bics	r2, r1
 80048fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004900:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_OscConfig+0x340>)
 8004904:	2104      	movs	r1, #4
 8004906:	438a      	bics	r2, r1
 8004908:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d028      	beq.n	8004964 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fe fb63 	bl	8002fdc <HAL_GetTick>
 8004916:	0003      	movs	r3, r0
 8004918:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fe fb5e 	bl	8002fdc <HAL_GetTick>
 8004920:	0002      	movs	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	4a0b      	ldr	r2, [pc, #44]	@ (8004954 <HAL_RCC_OscConfig+0x364>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d915      	bls.n	8004958 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e039      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
 8004930:	40021000 	.word	0x40021000
 8004934:	fffeffff 	.word	0xfffeffff
 8004938:	fffbffff 	.word	0xfffbffff
 800493c:	ffff80ff 	.word	0xffff80ff
 8004940:	ffffc7ff 	.word	0xffffc7ff
 8004944:	02dc6c00 	.word	0x02dc6c00
 8004948:	20000000 	.word	0x20000000
 800494c:	20000004 	.word	0x20000004
 8004950:	fffffeff 	.word	0xfffffeff
 8004954:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004958:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <HAL_RCC_OscConfig+0x3bc>)
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	2202      	movs	r2, #2
 800495e:	4013      	ands	r3, r2
 8004960:	d0dc      	beq.n	800491c <HAL_RCC_OscConfig+0x32c>
 8004962:	e013      	b.n	800498c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fe fb3a 	bl	8002fdc <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fe fb35 	bl	8002fdc <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	4a0d      	ldr	r2, [pc, #52]	@ (80049b0 <HAL_RCC_OscConfig+0x3c0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e010      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <HAL_RCC_OscConfig+0x3bc>)
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <HAL_RCC_OscConfig+0x3bc>)
 8004998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800499a:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <HAL_RCC_OscConfig+0x3bc>)
 800499c:	4905      	ldr	r1, [pc, #20]	@ (80049b4 <HAL_RCC_OscConfig+0x3c4>)
 800499e:	400a      	ands	r2, r1
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b006      	add	sp, #24
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	00001388 	.word	0x00001388
 80049b4:	efffffff 	.word	0xefffffff

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0e9      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b76      	ldr	r3, [pc, #472]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2207      	movs	r2, #7
 80049d2:	4013      	ands	r3, r2
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d91e      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b73      	ldr	r3, [pc, #460]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2207      	movs	r2, #7
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049ec:	f7fe faf6 	bl	8002fdc <HAL_GetTick>
 80049f0:	0003      	movs	r3, r0
 80049f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049f4:	e009      	b.n	8004a0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049f6:	f7fe faf1 	bl	8002fdc <HAL_GetTick>
 80049fa:	0002      	movs	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	4a6a      	ldr	r2, [pc, #424]	@ (8004bac <HAL_RCC_ClockConfig+0x1f4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0ca      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2207      	movs	r2, #7
 8004a10:	4013      	ands	r3, r2
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1ee      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d017      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2204      	movs	r2, #4
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a2c:	4b60      	ldr	r3, [pc, #384]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a60      	ldr	r2, [pc, #384]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8004a32:	401a      	ands	r2, r3
 8004a34:	4b5e      	ldr	r3, [pc, #376]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a36:	21b0      	movs	r1, #176	@ 0xb0
 8004a38:	0109      	lsls	r1, r1, #4
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4a5d      	ldr	r2, [pc, #372]	@ (8004bb8 <HAL_RCC_ClockConfig+0x200>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b58      	ldr	r3, [pc, #352]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2201      	movs	r2, #1
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d055      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004a5c:	4b54      	ldr	r3, [pc, #336]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	221c      	movs	r2, #28
 8004a62:	4393      	bics	r3, r2
 8004a64:	0019      	movs	r1, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	4b51      	ldr	r3, [pc, #324]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a78:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	4013      	ands	r3, r2
 8004a82:	d11f      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e08b      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	4b47      	ldr	r3, [pc, #284]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d113      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e07f      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004aa8:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aac:	2202      	movs	r2, #2
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e074      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e06d      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2207      	movs	r2, #7
 8004aca:	4393      	bics	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	4b37      	ldr	r3, [pc, #220]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fa80 	bl	8002fdc <HAL_GetTick>
 8004adc:	0003      	movs	r3, r0
 8004ade:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae0:	e009      	b.n	8004af6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae2:	f7fe fa7b 	bl	8002fdc <HAL_GetTick>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	4a2f      	ldr	r2, [pc, #188]	@ (8004bac <HAL_RCC_ClockConfig+0x1f4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2238      	movs	r2, #56	@ 0x38
 8004afc:	401a      	ands	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1ec      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b27      	ldr	r3, [pc, #156]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	4013      	ands	r3, r2
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d21e      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b28:	f7fe fa58 	bl	8002fdc <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b30:	e009      	b.n	8004b46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b32:	f7fe fa53 	bl	8002fdc <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <HAL_RCC_ClockConfig+0x1f4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e02c      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b46:	4b18      	ldr	r3, [pc, #96]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1ee      	bne.n	8004b32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5e:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_RCC_ClockConfig+0x204>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	0019      	movs	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	4b10      	ldr	r3, [pc, #64]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b72:	f000 f82b 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004b76:	0001      	movs	r1, r0
 8004b78:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	220f      	movs	r2, #15
 8004b80:	401a      	ands	r2, r3
 8004b82:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc0 <HAL_RCC_ClockConfig+0x208>)
 8004b84:	0092      	lsls	r2, r2, #2
 8004b86:	58d3      	ldr	r3, [r2, r3]
 8004b88:	221f      	movs	r2, #31
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	000a      	movs	r2, r1
 8004b8e:	40da      	lsrs	r2, r3
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <HAL_RCC_ClockConfig+0x20c>)
 8004b92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <HAL_RCC_ClockConfig+0x210>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7fe f9c3 	bl	8002f24 <HAL_InitTick>
 8004b9e:	0003      	movs	r3, r0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40022000 	.word	0x40022000
 8004bac:	00001388 	.word	0x00001388
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	ffff84ff 	.word	0xffff84ff
 8004bb8:	fffff0ff 	.word	0xfffff0ff
 8004bbc:	ffff8fff 	.word	0xffff8fff
 8004bc0:	0800722c 	.word	0x0800722c
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	20000004 	.word	0x20000004

08004bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x78>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2238      	movs	r2, #56	@ 0x38
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d10f      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x78>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0adb      	lsrs	r3, r3, #11
 8004be2:	2207      	movs	r2, #7
 8004be4:	4013      	ands	r3, r2
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	0013      	movs	r3, r2
 8004bec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	4815      	ldr	r0, [pc, #84]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004bf2:	f7fb fa9b 	bl	800012c <__udivsi3>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	e01e      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bfc:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x78>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2238      	movs	r2, #56	@ 0x38
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d102      	bne.n	8004c0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x80>)
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e015      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x78>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2238      	movs	r2, #56	@ 0x38
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d103      	bne.n	8004c22 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e00b      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x78>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2238      	movs	r2, #56	@ 0x38
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b18      	cmp	r3, #24
 8004c2c:	d103      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c2e:	23fa      	movs	r3, #250	@ 0xfa
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e001      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004c3a:	687b      	ldr	r3, [r7, #4]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b002      	add	sp, #8
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	02dc6c00 	.word	0x02dc6c00
 8004c4c:	007a1200 	.word	0x007a1200

08004c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b02      	ldr	r3, [pc, #8]	@ (8004c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	20000000 	.word	0x20000000

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004c68:	f7ff fff2 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c6c:	0001      	movs	r1, r0
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0b1b      	lsrs	r3, r3, #12
 8004c74:	2207      	movs	r2, #7
 8004c76:	401a      	ands	r2, r3
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004c7a:	0092      	lsls	r2, r2, #2
 8004c7c:	58d3      	ldr	r3, [r2, r3]
 8004c7e:	221f      	movs	r2, #31
 8004c80:	4013      	ands	r3, r2
 8004c82:	40d9      	lsrs	r1, r3
 8004c84:	000b      	movs	r3, r1
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	0800726c 	.word	0x0800726c

08004c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c9c:	2313      	movs	r3, #19
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca4:	2312      	movs	r3, #18
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d100      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004cb8:	e079      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cba:	2011      	movs	r0, #17
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4b64      	ldr	r3, [pc, #400]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	055b      	lsls	r3, r3, #21
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	4b61      	ldr	r3, [pc, #388]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cd2:	4b60      	ldr	r3, [pc, #384]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd4:	2180      	movs	r1, #128	@ 0x80
 8004cd6:	0549      	lsls	r1, r1, #21
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	055b      	lsls	r3, r3, #21
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cea:	183b      	adds	r3, r7, r0
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004cf0:	4b58      	ldr	r3, [pc, #352]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cf4:	23c0      	movs	r3, #192	@ 0xc0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d014      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004d0c:	4b51      	ldr	r3, [pc, #324]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	4a51      	ldr	r2, [pc, #324]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	0249      	lsls	r1, r1, #9
 8004d20:	430a      	orrs	r2, r1
 8004d22:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d28:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d2a:	494c      	ldr	r1, [pc, #304]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004d30:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d016      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fe f94d 	bl	8002fdc <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004d46:	e00c      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fe f948 	bl	8002fdc <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a43      	ldr	r2, [pc, #268]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d904      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8004d58:	2313      	movs	r3, #19
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	701a      	strb	r2, [r3, #0]
          break;
 8004d60:	e004      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004d62:	4b3c      	ldr	r3, [pc, #240]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	2202      	movs	r2, #2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d0ed      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8004d6c:	2313      	movs	r3, #19
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d76:	4b37      	ldr	r3, [pc, #220]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7a:	4a37      	ldr	r2, [pc, #220]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	4b33      	ldr	r3, [pc, #204]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d86:	430a      	orrs	r2, r1
 8004d88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d8a:	e005      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	2312      	movs	r3, #18
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	2213      	movs	r2, #19
 8004d92:	18ba      	adds	r2, r7, r2
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d98:	2311      	movs	r3, #17
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da8:	492e      	ldr	r1, [pc, #184]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db8:	4b26      	ldr	r3, [pc, #152]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	4393      	bics	r3, r2
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2240      	movs	r2, #64	@ 0x40
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	01db      	lsls	r3, r3, #7
 8004df2:	4013      	ands	r3, r2
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df6:	4b17      	ldr	r3, [pc, #92]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	0899      	lsrs	r1, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e04:	430a      	orrs	r2, r1
 8004e06:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e18:	4a14      	ldr	r2, [pc, #80]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e24:	430a      	orrs	r2, r1
 8004e26:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	da09      	bge.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	22e0      	movs	r2, #224	@ 0xe0
 8004e36:	4393      	bics	r3, r2
 8004e38:	0019      	movs	r1, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004e44:	2312      	movs	r3, #18
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	781b      	ldrb	r3, [r3, #0]
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b006      	add	sp, #24
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	40021000 	.word	0x40021000
 8004e58:	fffffcff 	.word	0xfffffcff
 8004e5c:	fffeffff 	.word	0xfffeffff
 8004e60:	00001388 	.word	0x00001388
 8004e64:	efffffff 	.word	0xefffffff
 8004e68:	ffffcfff 	.word	0xffffcfff
 8004e6c:	ffff3fff 	.word	0xffff3fff

08004e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e046      	b.n	8004f10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2288      	movs	r2, #136	@ 0x88
 8004e86:	589b      	ldr	r3, [r3, r2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2284      	movs	r2, #132	@ 0x84
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fd ff46 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2288      	movs	r2, #136	@ 0x88
 8004ea0:	2124      	movs	r1, #36	@ 0x24
 8004ea2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2101      	movs	r1, #1
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 fa4e 	bl	8005360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 f8cc 	bl	8005064 <UART_SetConfig>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e01c      	b.n	8004f10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	490d      	ldr	r1, [pc, #52]	@ (8004f18 <HAL_UART_Init+0xa8>)
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	212a      	movs	r1, #42	@ 0x2a
 8004ef2:	438a      	bics	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 fadd 	bl	80054c8 <UART_CheckIdleState>
 8004f0e:	0003      	movs	r3, r0
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	ffffb7ff 	.word	0xffffb7ff

08004f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	@ 0x28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	1dbb      	adds	r3, r7, #6
 8004f2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2288      	movs	r2, #136	@ 0x88
 8004f30:	589b      	ldr	r3, [r3, r2]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d000      	beq.n	8004f38 <HAL_UART_Transmit+0x1c>
 8004f36:	e090      	b.n	800505a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_UART_Transmit+0x2a>
 8004f3e:	1dbb      	adds	r3, r7, #6
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e088      	b.n	800505c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	2380      	movs	r3, #128	@ 0x80
 8004f50:	015b      	lsls	r3, r3, #5
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d109      	bne.n	8004f6a <HAL_UART_Transmit+0x4e>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e078      	b.n	800505c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2290      	movs	r2, #144	@ 0x90
 8004f6e:	2100      	movs	r1, #0
 8004f70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2288      	movs	r2, #136	@ 0x88
 8004f76:	2121      	movs	r1, #33	@ 0x21
 8004f78:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f7a:	f7fe f82f 	bl	8002fdc <HAL_GetTick>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1dba      	adds	r2, r7, #6
 8004f86:	2154      	movs	r1, #84	@ 0x54
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1dba      	adds	r2, r7, #6
 8004f90:	2156      	movs	r1, #86	@ 0x56
 8004f92:	8812      	ldrh	r2, [r2, #0]
 8004f94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	015b      	lsls	r3, r3, #5
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Transmit+0x98>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fbc:	e030      	b.n	8005020 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2180      	movs	r1, #128	@ 0x80
 8004fcc:	f000 fb26 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2288      	movs	r2, #136	@ 0x88
 8004fd8:	2120      	movs	r1, #32
 8004fda:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e03d      	b.n	800505c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	001a      	movs	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	05d2      	lsls	r2, r2, #23
 8004ff2:	0dd2      	lsrs	r2, r2, #23
 8004ff4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e007      	b.n	800500e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2256      	movs	r2, #86	@ 0x56
 8005012:	5a9b      	ldrh	r3, [r3, r2]
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b299      	uxth	r1, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2256      	movs	r2, #86	@ 0x56
 800501e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2256      	movs	r2, #86	@ 0x56
 8005024:	5a9b      	ldrh	r3, [r3, r2]
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1c8      	bne.n	8004fbe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	0013      	movs	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	2140      	movs	r1, #64	@ 0x40
 800503a:	f000 faef 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2288      	movs	r2, #136	@ 0x88
 8005046:	2120      	movs	r1, #32
 8005048:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e006      	b.n	800505c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2288      	movs	r2, #136	@ 0x88
 8005052:	2120      	movs	r1, #32
 8005054:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e000      	b.n	800505c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800505a:	2302      	movs	r3, #2
  }
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b008      	add	sp, #32
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506c:	231e      	movs	r3, #30
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4aab      	ldr	r2, [pc, #684]	@ (8005340 <UART_SetConfig+0x2dc>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4aa6      	ldr	r2, [pc, #664]	@ (8005344 <UART_SetConfig+0x2e0>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a9d      	ldr	r2, [pc, #628]	@ (8005348 <UART_SetConfig+0x2e4>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	430a      	orrs	r2, r1
 80050de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	220f      	movs	r2, #15
 80050e8:	4393      	bics	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a93      	ldr	r2, [pc, #588]	@ (800534c <UART_SetConfig+0x2e8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d127      	bne.n	8005152 <UART_SetConfig+0xee>
 8005102:	4b93      	ldr	r3, [pc, #588]	@ (8005350 <UART_SetConfig+0x2ec>)
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	2203      	movs	r2, #3
 8005108:	4013      	ands	r3, r2
 800510a:	2b03      	cmp	r3, #3
 800510c:	d017      	beq.n	800513e <UART_SetConfig+0xda>
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0xe4>
 8005110:	2b02      	cmp	r3, #2
 8005112:	d00a      	beq.n	800512a <UART_SetConfig+0xc6>
 8005114:	d818      	bhi.n	8005148 <UART_SetConfig+0xe4>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <UART_SetConfig+0xbc>
 800511a:	2b01      	cmp	r3, #1
 800511c:	d00a      	beq.n	8005134 <UART_SetConfig+0xd0>
 800511e:	e013      	b.n	8005148 <UART_SetConfig+0xe4>
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e021      	b.n	800516e <UART_SetConfig+0x10a>
 800512a:	231f      	movs	r3, #31
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2202      	movs	r2, #2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e01c      	b.n	800516e <UART_SetConfig+0x10a>
 8005134:	231f      	movs	r3, #31
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	2204      	movs	r2, #4
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e017      	b.n	800516e <UART_SetConfig+0x10a>
 800513e:	231f      	movs	r3, #31
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	2208      	movs	r2, #8
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e012      	b.n	800516e <UART_SetConfig+0x10a>
 8005148:	231f      	movs	r3, #31
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2210      	movs	r2, #16
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0x10a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a7f      	ldr	r2, [pc, #508]	@ (8005354 <UART_SetConfig+0x2f0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d104      	bne.n	8005166 <UART_SetConfig+0x102>
 800515c:	231f      	movs	r3, #31
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e003      	b.n	800516e <UART_SetConfig+0x10a>
 8005166:	231f      	movs	r3, #31
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2210      	movs	r2, #16
 800516c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	429a      	cmp	r2, r3
 8005178:	d000      	beq.n	800517c <UART_SetConfig+0x118>
 800517a:	e06f      	b.n	800525c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800517c:	231f      	movs	r3, #31
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b08      	cmp	r3, #8
 8005184:	d01f      	beq.n	80051c6 <UART_SetConfig+0x162>
 8005186:	dc22      	bgt.n	80051ce <UART_SetConfig+0x16a>
 8005188:	2b04      	cmp	r3, #4
 800518a:	d017      	beq.n	80051bc <UART_SetConfig+0x158>
 800518c:	dc1f      	bgt.n	80051ce <UART_SetConfig+0x16a>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <UART_SetConfig+0x134>
 8005192:	2b02      	cmp	r3, #2
 8005194:	d005      	beq.n	80051a2 <UART_SetConfig+0x13e>
 8005196:	e01a      	b.n	80051ce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7ff fd64 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 800519c:	0003      	movs	r3, r0
 800519e:	61bb      	str	r3, [r7, #24]
        break;
 80051a0:	e01c      	b.n	80051dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80051a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005350 <UART_SetConfig+0x2ec>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2207      	movs	r2, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	3301      	adds	r3, #1
 80051ae:	0019      	movs	r1, r3
 80051b0:	4869      	ldr	r0, [pc, #420]	@ (8005358 <UART_SetConfig+0x2f4>)
 80051b2:	f7fa ffbb 	bl	800012c <__udivsi3>
 80051b6:	0003      	movs	r3, r0
 80051b8:	61bb      	str	r3, [r7, #24]
        break;
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051bc:	f7ff fd06 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80051c0:	0003      	movs	r3, r0
 80051c2:	61bb      	str	r3, [r7, #24]
        break;
 80051c4:	e00a      	b.n	80051dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e006      	b.n	80051dc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051d2:	231e      	movs	r3, #30
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
        break;
 80051da:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d100      	bne.n	80051e4 <UART_SetConfig+0x180>
 80051e2:	e097      	b.n	8005314 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051e8:	4b5c      	ldr	r3, [pc, #368]	@ (800535c <UART_SetConfig+0x2f8>)
 80051ea:	0052      	lsls	r2, r2, #1
 80051ec:	5ad3      	ldrh	r3, [r2, r3]
 80051ee:	0019      	movs	r1, r3
 80051f0:	69b8      	ldr	r0, [r7, #24]
 80051f2:	f7fa ff9b 	bl	800012c <__udivsi3>
 80051f6:	0003      	movs	r3, r0
 80051f8:	005a      	lsls	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	18d2      	adds	r2, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0019      	movs	r1, r3
 8005208:	0010      	movs	r0, r2
 800520a:	f7fa ff8f 	bl	800012c <__udivsi3>
 800520e:	0003      	movs	r3, r0
 8005210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d91c      	bls.n	8005252 <UART_SetConfig+0x1ee>
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	2380      	movs	r3, #128	@ 0x80
 800521c:	025b      	lsls	r3, r3, #9
 800521e:	429a      	cmp	r2, r3
 8005220:	d217      	bcs.n	8005252 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	b29a      	uxth	r2, r3
 8005226:	200e      	movs	r0, #14
 8005228:	183b      	adds	r3, r7, r0
 800522a:	210f      	movs	r1, #15
 800522c:	438a      	bics	r2, r1
 800522e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	2207      	movs	r2, #7
 8005238:	4013      	ands	r3, r2
 800523a:	b299      	uxth	r1, r3
 800523c:	183b      	adds	r3, r7, r0
 800523e:	183a      	adds	r2, r7, r0
 8005240:	8812      	ldrh	r2, [r2, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	183a      	adds	r2, r7, r0
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	e060      	b.n	8005314 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005252:	231e      	movs	r3, #30
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e05b      	b.n	8005314 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800525c:	231f      	movs	r3, #31
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d01f      	beq.n	80052a6 <UART_SetConfig+0x242>
 8005266:	dc22      	bgt.n	80052ae <UART_SetConfig+0x24a>
 8005268:	2b04      	cmp	r3, #4
 800526a:	d017      	beq.n	800529c <UART_SetConfig+0x238>
 800526c:	dc1f      	bgt.n	80052ae <UART_SetConfig+0x24a>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <UART_SetConfig+0x214>
 8005272:	2b02      	cmp	r3, #2
 8005274:	d005      	beq.n	8005282 <UART_SetConfig+0x21e>
 8005276:	e01a      	b.n	80052ae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7ff fcf4 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 800527c:	0003      	movs	r3, r0
 800527e:	61bb      	str	r3, [r7, #24]
        break;
 8005280:	e01c      	b.n	80052bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005282:	4b33      	ldr	r3, [pc, #204]	@ (8005350 <UART_SetConfig+0x2ec>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2207      	movs	r2, #7
 800528a:	4013      	ands	r3, r2
 800528c:	3301      	adds	r3, #1
 800528e:	0019      	movs	r1, r3
 8005290:	4831      	ldr	r0, [pc, #196]	@ (8005358 <UART_SetConfig+0x2f4>)
 8005292:	f7fa ff4b 	bl	800012c <__udivsi3>
 8005296:	0003      	movs	r3, r0
 8005298:	61bb      	str	r3, [r7, #24]
        break;
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529c:	f7ff fc96 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 80052a0:	0003      	movs	r3, r0
 80052a2:	61bb      	str	r3, [r7, #24]
        break;
 80052a4:	e00a      	b.n	80052bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	61bb      	str	r3, [r7, #24]
        break;
 80052ac:	e006      	b.n	80052bc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b2:	231e      	movs	r3, #30
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
        break;
 80052ba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d028      	beq.n	8005314 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052c6:	4b25      	ldr	r3, [pc, #148]	@ (800535c <UART_SetConfig+0x2f8>)
 80052c8:	0052      	lsls	r2, r2, #1
 80052ca:	5ad3      	ldrh	r3, [r2, r3]
 80052cc:	0019      	movs	r1, r3
 80052ce:	69b8      	ldr	r0, [r7, #24]
 80052d0:	f7fa ff2c 	bl	800012c <__udivsi3>
 80052d4:	0003      	movs	r3, r0
 80052d6:	001a      	movs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	18d2      	adds	r2, r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	0019      	movs	r1, r3
 80052e6:	0010      	movs	r0, r2
 80052e8:	f7fa ff20 	bl	800012c <__udivsi3>
 80052ec:	0003      	movs	r3, r0
 80052ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d90a      	bls.n	800530c <UART_SetConfig+0x2a8>
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	025b      	lsls	r3, r3, #9
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d205      	bcs.n	800530c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b29a      	uxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e003      	b.n	8005314 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	231e      	movs	r3, #30
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	226a      	movs	r2, #106	@ 0x6a
 8005318:	2101      	movs	r1, #1
 800531a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2268      	movs	r2, #104	@ 0x68
 8005320:	2101      	movs	r1, #1
 8005322:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005330:	231e      	movs	r3, #30
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	781b      	ldrb	r3, [r3, #0]
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b008      	add	sp, #32
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	cfff69f3 	.word	0xcfff69f3
 8005344:	ffffcfff 	.word	0xffffcfff
 8005348:	11fff4ff 	.word	0x11fff4ff
 800534c:	40013800 	.word	0x40013800
 8005350:	40021000 	.word	0x40021000
 8005354:	40004400 	.word	0x40004400
 8005358:	02dc6c00 	.word	0x02dc6c00
 800535c:	0800728c 	.word	0x0800728c

08005360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	2208      	movs	r2, #8
 800536e:	4013      	ands	r3, r2
 8005370:	d00b      	beq.n	800538a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a4a      	ldr	r2, [pc, #296]	@ (80054a4 <UART_AdvFeatureConfig+0x144>)
 800537a:	4013      	ands	r3, r2
 800537c:	0019      	movs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538e:	2201      	movs	r2, #1
 8005390:	4013      	ands	r3, r2
 8005392:	d00b      	beq.n	80053ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <UART_AdvFeatureConfig+0x148>)
 800539c:	4013      	ands	r3, r2
 800539e:	0019      	movs	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	2202      	movs	r2, #2
 80053b2:	4013      	ands	r3, r2
 80053b4:	d00b      	beq.n	80053ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a3b      	ldr	r2, [pc, #236]	@ (80054ac <UART_AdvFeatureConfig+0x14c>)
 80053be:	4013      	ands	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4a34      	ldr	r2, [pc, #208]	@ (80054b0 <UART_AdvFeatureConfig+0x150>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	2210      	movs	r2, #16
 80053f6:	4013      	ands	r3, r2
 80053f8:	d00b      	beq.n	8005412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <UART_AdvFeatureConfig+0x154>)
 8005402:	4013      	ands	r3, r2
 8005404:	0019      	movs	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	2220      	movs	r2, #32
 8005418:	4013      	ands	r3, r2
 800541a:	d00b      	beq.n	8005434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4a25      	ldr	r2, [pc, #148]	@ (80054b8 <UART_AdvFeatureConfig+0x158>)
 8005424:	4013      	ands	r3, r2
 8005426:	0019      	movs	r1, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	2240      	movs	r2, #64	@ 0x40
 800543a:	4013      	ands	r3, r2
 800543c:	d01d      	beq.n	800547a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a1d      	ldr	r2, [pc, #116]	@ (80054bc <UART_AdvFeatureConfig+0x15c>)
 8005446:	4013      	ands	r3, r2
 8005448:	0019      	movs	r1, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	035b      	lsls	r3, r3, #13
 800545e:	429a      	cmp	r2, r3
 8005460:	d10b      	bne.n	800547a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a15      	ldr	r2, [pc, #84]	@ (80054c0 <UART_AdvFeatureConfig+0x160>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	2280      	movs	r2, #128	@ 0x80
 8005480:	4013      	ands	r3, r2
 8005482:	d00b      	beq.n	800549c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a0e      	ldr	r2, [pc, #56]	@ (80054c4 <UART_AdvFeatureConfig+0x164>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }
}
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	ffff7fff 	.word	0xffff7fff
 80054a8:	fffdffff 	.word	0xfffdffff
 80054ac:	fffeffff 	.word	0xfffeffff
 80054b0:	fffbffff 	.word	0xfffbffff
 80054b4:	ffffefff 	.word	0xffffefff
 80054b8:	ffffdfff 	.word	0xffffdfff
 80054bc:	ffefffff 	.word	0xffefffff
 80054c0:	ff9fffff 	.word	0xff9fffff
 80054c4:	fff7ffff 	.word	0xfff7ffff

080054c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b092      	sub	sp, #72	@ 0x48
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2290      	movs	r2, #144	@ 0x90
 80054d4:	2100      	movs	r1, #0
 80054d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d8:	f7fd fd80 	bl	8002fdc <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2208      	movs	r2, #8
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d12d      	bne.n	800554a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2280      	movs	r2, #128	@ 0x80
 80054f2:	0391      	lsls	r1, r2, #14
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4a47      	ldr	r2, [pc, #284]	@ (8005614 <UART_CheckIdleState+0x14c>)
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f000 f88e 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 8005500:	1e03      	subs	r3, r0, #0
 8005502:	d022      	beq.n	800554a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005504:	f3ef 8310 	mrs	r3, PRIMASK
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800550c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800550e:	2301      	movs	r3, #1
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	f383 8810 	msr	PRIMASK, r3
}
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2180      	movs	r1, #128	@ 0x80
 8005526:	438a      	bics	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	f383 8810 	msr	PRIMASK, r3
}
 8005534:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2288      	movs	r2, #136	@ 0x88
 800553a:	2120      	movs	r1, #32
 800553c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2284      	movs	r2, #132	@ 0x84
 8005542:	2100      	movs	r1, #0
 8005544:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e060      	b.n	800560c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2204      	movs	r2, #4
 8005552:	4013      	ands	r3, r2
 8005554:	2b04      	cmp	r3, #4
 8005556:	d146      	bne.n	80055e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	03d1      	lsls	r1, r2, #15
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <UART_CheckIdleState+0x14c>)
 8005562:	9200      	str	r2, [sp, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	f000 f859 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d03b      	beq.n	80055e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800556e:	f3ef 8310 	mrs	r3, PRIMASK
 8005572:	60fb      	str	r3, [r7, #12]
  return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
 8005578:	2301      	movs	r3, #1
 800557a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f383 8810 	msr	PRIMASK, r3
}
 8005582:	46c0      	nop			@ (mov r8, r8)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4922      	ldr	r1, [pc, #136]	@ (8005618 <UART_CheckIdleState+0x150>)
 8005590:	400a      	ands	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f383 8810 	msr	PRIMASK, r3
}
 800559e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a0:	f3ef 8310 	mrs	r3, PRIMASK
 80055a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80055a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055aa:	2301      	movs	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f383 8810 	msr	PRIMASK, r3
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2101      	movs	r1, #1
 80055c2:	438a      	bics	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f383 8810 	msr	PRIMASK, r3
}
 80055d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	228c      	movs	r2, #140	@ 0x8c
 80055d6:	2120      	movs	r1, #32
 80055d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2284      	movs	r2, #132	@ 0x84
 80055de:	2100      	movs	r1, #0
 80055e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e012      	b.n	800560c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2288      	movs	r2, #136	@ 0x88
 80055ea:	2120      	movs	r1, #32
 80055ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	228c      	movs	r2, #140	@ 0x8c
 80055f2:	2120      	movs	r1, #32
 80055f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2284      	movs	r2, #132	@ 0x84
 8005606:	2100      	movs	r1, #0
 8005608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b010      	add	sp, #64	@ 0x40
 8005612:	bd80      	pop	{r7, pc}
 8005614:	01ffffff 	.word	0x01ffffff
 8005618:	fffffedf 	.word	0xfffffedf

0800561c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	e04b      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	3301      	adds	r3, #1
 8005632:	d048      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005634:	f7fd fcd2 	bl	8002fdc <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e04b      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2204      	movs	r2, #4
 8005656:	4013      	ands	r3, r2
 8005658:	d035      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2208      	movs	r2, #8
 8005662:	4013      	ands	r3, r2
 8005664:	2b08      	cmp	r3, #8
 8005666:	d111      	bne.n	800568c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2208      	movs	r2, #8
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	0018      	movs	r0, r3
 8005674:	f000 f83c 	bl	80056f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2290      	movs	r2, #144	@ 0x90
 800567c:	2108      	movs	r1, #8
 800567e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2284      	movs	r2, #132	@ 0x84
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e02c      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	401a      	ands	r2, r3
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	429a      	cmp	r2, r3
 800569e:	d112      	bne.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2280      	movs	r2, #128	@ 0x80
 80056a6:	0112      	lsls	r2, r2, #4
 80056a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f81f 	bl	80056f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2290      	movs	r2, #144	@ 0x90
 80056b6:	2120      	movs	r1, #32
 80056b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2284      	movs	r2, #132	@ 0x84
 80056be:	2100      	movs	r1, #0
 80056c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e00f      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	425a      	negs	r2, r3
 80056d6:	4153      	adcs	r3, r2
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	001a      	movs	r2, r3
 80056dc:	1dfb      	adds	r3, r7, #7
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d0a4      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08e      	sub	sp, #56	@ 0x38
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056f8:	f3ef 8310 	mrs	r3, PRIMASK
 80056fc:	617b      	str	r3, [r7, #20]
  return(result);
 80056fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
 8005702:	2301      	movs	r3, #1
 8005704:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4926      	ldr	r1, [pc, #152]	@ (80057b4 <UART_EndRxTransfer+0xc4>)
 800571a:	400a      	ands	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f383 8810 	msr	PRIMASK, r3
}
 8005728:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800572a:	f3ef 8310 	mrs	r3, PRIMASK
 800572e:	623b      	str	r3, [r7, #32]
  return(result);
 8005730:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
 8005734:	2301      	movs	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	f383 8810 	msr	PRIMASK, r3
}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	491b      	ldr	r1, [pc, #108]	@ (80057b8 <UART_EndRxTransfer+0xc8>)
 800574c:	400a      	ands	r2, r1
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	f383 8810 	msr	PRIMASK, r3
}
 800575a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d118      	bne.n	8005796 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005764:	f3ef 8310 	mrs	r3, PRIMASK
 8005768:	60bb      	str	r3, [r7, #8]
  return(result);
 800576a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800576e:	2301      	movs	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f383 8810 	msr	PRIMASK, r3
}
 8005778:	46c0      	nop			@ (mov r8, r8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2110      	movs	r1, #16
 8005786:	438a      	bics	r2, r1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	228c      	movs	r2, #140	@ 0x8c
 800579a:	2120      	movs	r1, #32
 800579c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b00e      	add	sp, #56	@ 0x38
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	fffffedf 	.word	0xfffffedf
 80057b8:	effffffe 	.word	0xeffffffe

080057bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2284      	movs	r2, #132	@ 0x84
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e027      	b.n	8005822 <HAL_UARTEx_DisableFifoMode+0x66>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2284      	movs	r2, #132	@ 0x84
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2288      	movs	r2, #136	@ 0x88
 80057de:	2124      	movs	r1, #36	@ 0x24
 80057e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	438a      	bics	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a0b      	ldr	r2, [pc, #44]	@ (800582c <HAL_UARTEx_DisableFifoMode+0x70>)
 80057fe:	4013      	ands	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2288      	movs	r2, #136	@ 0x88
 8005814:	2120      	movs	r1, #32
 8005816:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2284      	movs	r2, #132	@ 0x84
 800581c:	2100      	movs	r1, #0
 800581e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	0018      	movs	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	dfffffff 	.word	0xdfffffff

08005830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2284      	movs	r2, #132	@ 0x84
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e02e      	b.n	80058a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2284      	movs	r2, #132	@ 0x84
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2288      	movs	r2, #136	@ 0x88
 8005854:	2124      	movs	r1, #36	@ 0x24
 8005856:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2101      	movs	r1, #1
 800586c:	438a      	bics	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	08d9      	lsrs	r1, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 f854 	bl	8005934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2288      	movs	r2, #136	@ 0x88
 8005898:	2120      	movs	r1, #32
 800589a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2284      	movs	r2, #132	@ 0x84
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2284      	movs	r2, #132	@ 0x84
 80058be:	5c9b      	ldrb	r3, [r3, r2]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e02f      	b.n	8005928 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2284      	movs	r2, #132	@ 0x84
 80058cc:	2101      	movs	r1, #1
 80058ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2288      	movs	r2, #136	@ 0x88
 80058d4:	2124      	movs	r1, #36	@ 0x24
 80058d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2101      	movs	r1, #1
 80058ec:	438a      	bics	r2, r1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f813 	bl	8005934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2288      	movs	r2, #136	@ 0x88
 800591a:	2120      	movs	r1, #32
 800591c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2284      	movs	r2, #132	@ 0x84
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	0018      	movs	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	b004      	add	sp, #16
 800592e:	bd80      	pop	{r7, pc}
 8005930:	f1ffffff 	.word	0xf1ffffff

08005934 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	226a      	movs	r2, #106	@ 0x6a
 8005948:	2101      	movs	r1, #1
 800594a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2268      	movs	r2, #104	@ 0x68
 8005950:	2101      	movs	r1, #1
 8005952:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005954:	e043      	b.n	80059de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005956:	260f      	movs	r6, #15
 8005958:	19bb      	adds	r3, r7, r6
 800595a:	2208      	movs	r2, #8
 800595c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800595e:	200e      	movs	r0, #14
 8005960:	183b      	adds	r3, r7, r0
 8005962:	2208      	movs	r2, #8
 8005964:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	b2da      	uxtb	r2, r3
 8005970:	240d      	movs	r4, #13
 8005972:	193b      	adds	r3, r7, r4
 8005974:	2107      	movs	r1, #7
 8005976:	400a      	ands	r2, r1
 8005978:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	b2da      	uxtb	r2, r3
 8005984:	250c      	movs	r5, #12
 8005986:	197b      	adds	r3, r7, r5
 8005988:	2107      	movs	r1, #7
 800598a:	400a      	ands	r2, r1
 800598c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800598e:	183b      	adds	r3, r7, r0
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	197a      	adds	r2, r7, r5
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	4914      	ldr	r1, [pc, #80]	@ (80059e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005998:	5c8a      	ldrb	r2, [r1, r2]
 800599a:	435a      	muls	r2, r3
 800599c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800599e:	197b      	adds	r3, r7, r5
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	@ (80059ec <UARTEx_SetNbDataToProcess+0xb8>)
 80059a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059a6:	0019      	movs	r1, r3
 80059a8:	f7fa fc4a 	bl	8000240 <__divsi3>
 80059ac:	0003      	movs	r3, r0
 80059ae:	b299      	uxth	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	226a      	movs	r2, #106	@ 0x6a
 80059b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b6:	19bb      	adds	r3, r7, r6
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	193a      	adds	r2, r7, r4
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	490a      	ldr	r1, [pc, #40]	@ (80059e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80059c0:	5c8a      	ldrb	r2, [r1, r2]
 80059c2:	435a      	muls	r2, r3
 80059c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80059c6:	193b      	adds	r3, r7, r4
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <UARTEx_SetNbDataToProcess+0xb8>)
 80059cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ce:	0019      	movs	r1, r3
 80059d0:	f7fa fc36 	bl	8000240 <__divsi3>
 80059d4:	0003      	movs	r3, r0
 80059d6:	b299      	uxth	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2268      	movs	r2, #104	@ 0x68
 80059dc:	5299      	strh	r1, [r3, r2]
}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	46bd      	mov	sp, r7
 80059e2:	b005      	add	sp, #20
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	080072a4 	.word	0x080072a4
 80059ec:	080072ac 	.word	0x080072ac

080059f0 <siprintf>:
 80059f0:	b40e      	push	{r1, r2, r3}
 80059f2:	b500      	push	{lr}
 80059f4:	490b      	ldr	r1, [pc, #44]	@ (8005a24 <siprintf+0x34>)
 80059f6:	b09c      	sub	sp, #112	@ 0x70
 80059f8:	ab1d      	add	r3, sp, #116	@ 0x74
 80059fa:	9002      	str	r0, [sp, #8]
 80059fc:	9006      	str	r0, [sp, #24]
 80059fe:	9107      	str	r1, [sp, #28]
 8005a00:	9104      	str	r1, [sp, #16]
 8005a02:	4809      	ldr	r0, [pc, #36]	@ (8005a28 <siprintf+0x38>)
 8005a04:	4909      	ldr	r1, [pc, #36]	@ (8005a2c <siprintf+0x3c>)
 8005a06:	cb04      	ldmia	r3!, {r2}
 8005a08:	9105      	str	r1, [sp, #20]
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	a902      	add	r1, sp, #8
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	f000 f99e 	bl	8005d50 <_svfiprintf_r>
 8005a14:	2200      	movs	r2, #0
 8005a16:	9b02      	ldr	r3, [sp, #8]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	b01c      	add	sp, #112	@ 0x70
 8005a1c:	bc08      	pop	{r3}
 8005a1e:	b003      	add	sp, #12
 8005a20:	4718      	bx	r3
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	7fffffff 	.word	0x7fffffff
 8005a28:	2000000c 	.word	0x2000000c
 8005a2c:	ffff0208 	.word	0xffff0208

08005a30 <memset>:
 8005a30:	0003      	movs	r3, r0
 8005a32:	1882      	adds	r2, r0, r2
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	7019      	strb	r1, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <__errno>:
 8005a40:	4b01      	ldr	r3, [pc, #4]	@ (8005a48 <__errno+0x8>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4770      	bx	lr
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <__libc_init_array>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	2600      	movs	r6, #0
 8005a50:	4c0c      	ldr	r4, [pc, #48]	@ (8005a84 <__libc_init_array+0x38>)
 8005a52:	4d0d      	ldr	r5, [pc, #52]	@ (8005a88 <__libc_init_array+0x3c>)
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	42a6      	cmp	r6, r4
 8005a5a:	d109      	bne.n	8005a70 <__libc_init_array+0x24>
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	f001 fb8d 	bl	800717c <_init>
 8005a62:	4c0a      	ldr	r4, [pc, #40]	@ (8005a8c <__libc_init_array+0x40>)
 8005a64:	4d0a      	ldr	r5, [pc, #40]	@ (8005a90 <__libc_init_array+0x44>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	42a6      	cmp	r6, r4
 8005a6c:	d105      	bne.n	8005a7a <__libc_init_array+0x2e>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	00b3      	lsls	r3, r6, #2
 8005a72:	58eb      	ldr	r3, [r5, r3]
 8005a74:	4798      	blx	r3
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7ee      	b.n	8005a58 <__libc_init_array+0xc>
 8005a7a:	00b3      	lsls	r3, r6, #2
 8005a7c:	58eb      	ldr	r3, [r5, r3]
 8005a7e:	4798      	blx	r3
 8005a80:	3601      	adds	r6, #1
 8005a82:	e7f2      	b.n	8005a6a <__libc_init_array+0x1e>
 8005a84:	08007318 	.word	0x08007318
 8005a88:	08007318 	.word	0x08007318
 8005a8c:	0800731c 	.word	0x0800731c
 8005a90:	08007318 	.word	0x08007318

08005a94 <__retarget_lock_acquire_recursive>:
 8005a94:	4770      	bx	lr

08005a96 <__retarget_lock_release_recursive>:
 8005a96:	4770      	bx	lr

08005a98 <_free_r>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	0005      	movs	r5, r0
 8005a9c:	1e0c      	subs	r4, r1, #0
 8005a9e:	d010      	beq.n	8005ac2 <_free_r+0x2a>
 8005aa0:	3c04      	subs	r4, #4
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da00      	bge.n	8005aaa <_free_r+0x12>
 8005aa8:	18e4      	adds	r4, r4, r3
 8005aaa:	0028      	movs	r0, r5
 8005aac:	f000 f8e0 	bl	8005c70 <__malloc_lock>
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <_free_r+0x90>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <_free_r+0x2c>
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	6014      	str	r4, [r2, #0]
 8005abc:	0028      	movs	r0, r5
 8005abe:	f000 f8df 	bl	8005c80 <__malloc_unlock>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d1f3      	bne.n	8005ab8 <_free_r+0x20>
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	1809      	adds	r1, r1, r0
 8005ad6:	6021      	str	r1, [r4, #0]
 8005ad8:	e7ee      	b.n	8005ab8 <_free_r+0x20>
 8005ada:	001a      	movs	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <_free_r+0x4e>
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	d9f9      	bls.n	8005ada <_free_r+0x42>
 8005ae6:	6811      	ldr	r1, [r2, #0]
 8005ae8:	1850      	adds	r0, r2, r1
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	d10b      	bne.n	8005b06 <_free_r+0x6e>
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1809      	adds	r1, r1, r0
 8005af2:	1850      	adds	r0, r2, r1
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	4283      	cmp	r3, r0
 8005af8:	d1e0      	bne.n	8005abc <_free_r+0x24>
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	1841      	adds	r1, r0, r1
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	6053      	str	r3, [r2, #4]
 8005b04:	e7da      	b.n	8005abc <_free_r+0x24>
 8005b06:	42a0      	cmp	r0, r4
 8005b08:	d902      	bls.n	8005b10 <_free_r+0x78>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	e7d5      	b.n	8005abc <_free_r+0x24>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	1821      	adds	r1, r4, r0
 8005b14:	428b      	cmp	r3, r1
 8005b16:	d103      	bne.n	8005b20 <_free_r+0x88>
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	1809      	adds	r1, r1, r0
 8005b1e:	6021      	str	r1, [r4, #0]
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6054      	str	r4, [r2, #4]
 8005b24:	e7ca      	b.n	8005abc <_free_r+0x24>
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	200002d8 	.word	0x200002d8

08005b2c <sbrk_aligned>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b6c <sbrk_aligned+0x40>)
 8005b30:	000d      	movs	r5, r1
 8005b32:	6831      	ldr	r1, [r6, #0]
 8005b34:	0004      	movs	r4, r0
 8005b36:	2900      	cmp	r1, #0
 8005b38:	d102      	bne.n	8005b40 <sbrk_aligned+0x14>
 8005b3a:	f000 fb99 	bl	8006270 <_sbrk_r>
 8005b3e:	6030      	str	r0, [r6, #0]
 8005b40:	0029      	movs	r1, r5
 8005b42:	0020      	movs	r0, r4
 8005b44:	f000 fb94 	bl	8006270 <_sbrk_r>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d103      	bne.n	8005b54 <sbrk_aligned+0x28>
 8005b4c:	2501      	movs	r5, #1
 8005b4e:	426d      	negs	r5, r5
 8005b50:	0028      	movs	r0, r5
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	2303      	movs	r3, #3
 8005b56:	1cc5      	adds	r5, r0, #3
 8005b58:	439d      	bics	r5, r3
 8005b5a:	42a8      	cmp	r0, r5
 8005b5c:	d0f8      	beq.n	8005b50 <sbrk_aligned+0x24>
 8005b5e:	1a29      	subs	r1, r5, r0
 8005b60:	0020      	movs	r0, r4
 8005b62:	f000 fb85 	bl	8006270 <_sbrk_r>
 8005b66:	3001      	adds	r0, #1
 8005b68:	d1f2      	bne.n	8005b50 <sbrk_aligned+0x24>
 8005b6a:	e7ef      	b.n	8005b4c <sbrk_aligned+0x20>
 8005b6c:	200002d4 	.word	0x200002d4

08005b70 <_malloc_r>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	2203      	movs	r2, #3
 8005b74:	1ccb      	adds	r3, r1, #3
 8005b76:	4393      	bics	r3, r2
 8005b78:	3308      	adds	r3, #8
 8005b7a:	0005      	movs	r5, r0
 8005b7c:	001f      	movs	r7, r3
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d234      	bcs.n	8005bec <_malloc_r+0x7c>
 8005b82:	270c      	movs	r7, #12
 8005b84:	42b9      	cmp	r1, r7
 8005b86:	d833      	bhi.n	8005bf0 <_malloc_r+0x80>
 8005b88:	0028      	movs	r0, r5
 8005b8a:	f000 f871 	bl	8005c70 <__malloc_lock>
 8005b8e:	4e37      	ldr	r6, [pc, #220]	@ (8005c6c <_malloc_r+0xfc>)
 8005b90:	6833      	ldr	r3, [r6, #0]
 8005b92:	001c      	movs	r4, r3
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d12f      	bne.n	8005bf8 <_malloc_r+0x88>
 8005b98:	0039      	movs	r1, r7
 8005b9a:	0028      	movs	r0, r5
 8005b9c:	f7ff ffc6 	bl	8005b2c <sbrk_aligned>
 8005ba0:	0004      	movs	r4, r0
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d15f      	bne.n	8005c66 <_malloc_r+0xf6>
 8005ba6:	6834      	ldr	r4, [r6, #0]
 8005ba8:	9400      	str	r4, [sp, #0]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d14a      	bne.n	8005c46 <_malloc_r+0xd6>
 8005bb0:	2c00      	cmp	r4, #0
 8005bb2:	d052      	beq.n	8005c5a <_malloc_r+0xea>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	0028      	movs	r0, r5
 8005bb8:	18e3      	adds	r3, r4, r3
 8005bba:	9900      	ldr	r1, [sp, #0]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	f000 fb57 	bl	8006270 <_sbrk_r>
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	4283      	cmp	r3, r0
 8005bc6:	d148      	bne.n	8005c5a <_malloc_r+0xea>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	0028      	movs	r0, r5
 8005bcc:	1aff      	subs	r7, r7, r3
 8005bce:	0039      	movs	r1, r7
 8005bd0:	f7ff ffac 	bl	8005b2c <sbrk_aligned>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d040      	beq.n	8005c5a <_malloc_r+0xea>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	19db      	adds	r3, r3, r7
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	6833      	ldr	r3, [r6, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d133      	bne.n	8005c4e <_malloc_r+0xde>
 8005be6:	9b00      	ldr	r3, [sp, #0]
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	e019      	b.n	8005c20 <_malloc_r+0xb0>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dac9      	bge.n	8005b84 <_malloc_r+0x14>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bf8:	6821      	ldr	r1, [r4, #0]
 8005bfa:	1bc9      	subs	r1, r1, r7
 8005bfc:	d420      	bmi.n	8005c40 <_malloc_r+0xd0>
 8005bfe:	290b      	cmp	r1, #11
 8005c00:	d90a      	bls.n	8005c18 <_malloc_r+0xa8>
 8005c02:	19e2      	adds	r2, r4, r7
 8005c04:	6027      	str	r7, [r4, #0]
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	d104      	bne.n	8005c14 <_malloc_r+0xa4>
 8005c0a:	6032      	str	r2, [r6, #0]
 8005c0c:	6863      	ldr	r3, [r4, #4]
 8005c0e:	6011      	str	r1, [r2, #0]
 8005c10:	6053      	str	r3, [r2, #4]
 8005c12:	e005      	b.n	8005c20 <_malloc_r+0xb0>
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	e7f9      	b.n	8005c0c <_malloc_r+0x9c>
 8005c18:	6862      	ldr	r2, [r4, #4]
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	d10e      	bne.n	8005c3c <_malloc_r+0xcc>
 8005c1e:	6032      	str	r2, [r6, #0]
 8005c20:	0028      	movs	r0, r5
 8005c22:	f000 f82d 	bl	8005c80 <__malloc_unlock>
 8005c26:	0020      	movs	r0, r4
 8005c28:	2207      	movs	r2, #7
 8005c2a:	300b      	adds	r0, #11
 8005c2c:	1d23      	adds	r3, r4, #4
 8005c2e:	4390      	bics	r0, r2
 8005c30:	1ac2      	subs	r2, r0, r3
 8005c32:	4298      	cmp	r0, r3
 8005c34:	d0df      	beq.n	8005bf6 <_malloc_r+0x86>
 8005c36:	1a1b      	subs	r3, r3, r0
 8005c38:	50a3      	str	r3, [r4, r2]
 8005c3a:	e7dc      	b.n	8005bf6 <_malloc_r+0x86>
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e7ef      	b.n	8005c20 <_malloc_r+0xb0>
 8005c40:	0023      	movs	r3, r4
 8005c42:	6864      	ldr	r4, [r4, #4]
 8005c44:	e7a6      	b.n	8005b94 <_malloc_r+0x24>
 8005c46:	9c00      	ldr	r4, [sp, #0]
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	e7ad      	b.n	8005baa <_malloc_r+0x3a>
 8005c4e:	001a      	movs	r2, r3
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	d1fb      	bne.n	8005c4e <_malloc_r+0xde>
 8005c56:	2300      	movs	r3, #0
 8005c58:	e7da      	b.n	8005c10 <_malloc_r+0xa0>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	0028      	movs	r0, r5
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f000 f80e 	bl	8005c80 <__malloc_unlock>
 8005c64:	e7c6      	b.n	8005bf4 <_malloc_r+0x84>
 8005c66:	6007      	str	r7, [r0, #0]
 8005c68:	e7da      	b.n	8005c20 <_malloc_r+0xb0>
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	200002d8 	.word	0x200002d8

08005c70 <__malloc_lock>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	4802      	ldr	r0, [pc, #8]	@ (8005c7c <__malloc_lock+0xc>)
 8005c74:	f7ff ff0e 	bl	8005a94 <__retarget_lock_acquire_recursive>
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	200002d0 	.word	0x200002d0

08005c80 <__malloc_unlock>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4802      	ldr	r0, [pc, #8]	@ (8005c8c <__malloc_unlock+0xc>)
 8005c84:	f7ff ff07 	bl	8005a96 <__retarget_lock_release_recursive>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	200002d0 	.word	0x200002d0

08005c90 <__ssputs_r>:
 8005c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c92:	688e      	ldr	r6, [r1, #8]
 8005c94:	b085      	sub	sp, #20
 8005c96:	001f      	movs	r7, r3
 8005c98:	000c      	movs	r4, r1
 8005c9a:	680b      	ldr	r3, [r1, #0]
 8005c9c:	9002      	str	r0, [sp, #8]
 8005c9e:	9203      	str	r2, [sp, #12]
 8005ca0:	42be      	cmp	r6, r7
 8005ca2:	d830      	bhi.n	8005d06 <__ssputs_r+0x76>
 8005ca4:	210c      	movs	r1, #12
 8005ca6:	5e62      	ldrsh	r2, [r4, r1]
 8005ca8:	2190      	movs	r1, #144	@ 0x90
 8005caa:	00c9      	lsls	r1, r1, #3
 8005cac:	420a      	tst	r2, r1
 8005cae:	d028      	beq.n	8005d02 <__ssputs_r+0x72>
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	6921      	ldr	r1, [r4, #16]
 8005cb4:	1a5b      	subs	r3, r3, r1
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	6963      	ldr	r3, [r4, #20]
 8005cba:	4343      	muls	r3, r0
 8005cbc:	9801      	ldr	r0, [sp, #4]
 8005cbe:	0fdd      	lsrs	r5, r3, #31
 8005cc0:	18ed      	adds	r5, r5, r3
 8005cc2:	1c7b      	adds	r3, r7, #1
 8005cc4:	181b      	adds	r3, r3, r0
 8005cc6:	106d      	asrs	r5, r5, #1
 8005cc8:	42ab      	cmp	r3, r5
 8005cca:	d900      	bls.n	8005cce <__ssputs_r+0x3e>
 8005ccc:	001d      	movs	r5, r3
 8005cce:	0552      	lsls	r2, r2, #21
 8005cd0:	d528      	bpl.n	8005d24 <__ssputs_r+0x94>
 8005cd2:	0029      	movs	r1, r5
 8005cd4:	9802      	ldr	r0, [sp, #8]
 8005cd6:	f7ff ff4b 	bl	8005b70 <_malloc_r>
 8005cda:	1e06      	subs	r6, r0, #0
 8005cdc:	d02c      	beq.n	8005d38 <__ssputs_r+0xa8>
 8005cde:	9a01      	ldr	r2, [sp, #4]
 8005ce0:	6921      	ldr	r1, [r4, #16]
 8005ce2:	f000 fae2 	bl	80062aa <memcpy>
 8005ce6:	89a2      	ldrh	r2, [r4, #12]
 8005ce8:	4b18      	ldr	r3, [pc, #96]	@ (8005d4c <__ssputs_r+0xbc>)
 8005cea:	401a      	ands	r2, r3
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	6126      	str	r6, [r4, #16]
 8005cf6:	18f6      	adds	r6, r6, r3
 8005cf8:	6026      	str	r6, [r4, #0]
 8005cfa:	003e      	movs	r6, r7
 8005cfc:	6165      	str	r5, [r4, #20]
 8005cfe:	1aed      	subs	r5, r5, r3
 8005d00:	60a5      	str	r5, [r4, #8]
 8005d02:	42be      	cmp	r6, r7
 8005d04:	d900      	bls.n	8005d08 <__ssputs_r+0x78>
 8005d06:	003e      	movs	r6, r7
 8005d08:	0032      	movs	r2, r6
 8005d0a:	9903      	ldr	r1, [sp, #12]
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	f000 fa9b 	bl	8006248 <memmove>
 8005d12:	2000      	movs	r0, #0
 8005d14:	68a3      	ldr	r3, [r4, #8]
 8005d16:	1b9b      	subs	r3, r3, r6
 8005d18:	60a3      	str	r3, [r4, #8]
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	199b      	adds	r3, r3, r6
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	b005      	add	sp, #20
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	002a      	movs	r2, r5
 8005d26:	9802      	ldr	r0, [sp, #8]
 8005d28:	f000 fac8 	bl	80062bc <_realloc_r>
 8005d2c:	1e06      	subs	r6, r0, #0
 8005d2e:	d1e0      	bne.n	8005cf2 <__ssputs_r+0x62>
 8005d30:	6921      	ldr	r1, [r4, #16]
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	f7ff feb0 	bl	8005a98 <_free_r>
 8005d38:	230c      	movs	r3, #12
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	9a02      	ldr	r2, [sp, #8]
 8005d3e:	4240      	negs	r0, r0
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	89a2      	ldrh	r2, [r4, #12]
 8005d44:	3334      	adds	r3, #52	@ 0x34
 8005d46:	4313      	orrs	r3, r2
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	e7e9      	b.n	8005d20 <__ssputs_r+0x90>
 8005d4c:	fffffb7f 	.word	0xfffffb7f

08005d50 <_svfiprintf_r>:
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	b0a1      	sub	sp, #132	@ 0x84
 8005d54:	9003      	str	r0, [sp, #12]
 8005d56:	001d      	movs	r5, r3
 8005d58:	898b      	ldrh	r3, [r1, #12]
 8005d5a:	000f      	movs	r7, r1
 8005d5c:	0016      	movs	r6, r2
 8005d5e:	061b      	lsls	r3, r3, #24
 8005d60:	d511      	bpl.n	8005d86 <_svfiprintf_r+0x36>
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10e      	bne.n	8005d86 <_svfiprintf_r+0x36>
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	f7ff ff01 	bl	8005b70 <_malloc_r>
 8005d6e:	6038      	str	r0, [r7, #0]
 8005d70:	6138      	str	r0, [r7, #16]
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d105      	bne.n	8005d82 <_svfiprintf_r+0x32>
 8005d76:	230c      	movs	r3, #12
 8005d78:	9a03      	ldr	r2, [sp, #12]
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	4240      	negs	r0, r0
 8005d80:	e0cf      	b.n	8005f22 <_svfiprintf_r+0x1d2>
 8005d82:	2340      	movs	r3, #64	@ 0x40
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	2300      	movs	r3, #0
 8005d88:	ac08      	add	r4, sp, #32
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	7663      	strb	r3, [r4, #25]
 8005d90:	3310      	adds	r3, #16
 8005d92:	76a3      	strb	r3, [r4, #26]
 8005d94:	9507      	str	r5, [sp, #28]
 8005d96:	0035      	movs	r5, r6
 8005d98:	782b      	ldrb	r3, [r5, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <_svfiprintf_r+0x52>
 8005d9e:	2b25      	cmp	r3, #37	@ 0x25
 8005da0:	d148      	bne.n	8005e34 <_svfiprintf_r+0xe4>
 8005da2:	1bab      	subs	r3, r5, r6
 8005da4:	9305      	str	r3, [sp, #20]
 8005da6:	42b5      	cmp	r5, r6
 8005da8:	d00b      	beq.n	8005dc2 <_svfiprintf_r+0x72>
 8005daa:	0032      	movs	r2, r6
 8005dac:	0039      	movs	r1, r7
 8005dae:	9803      	ldr	r0, [sp, #12]
 8005db0:	f7ff ff6e 	bl	8005c90 <__ssputs_r>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d100      	bne.n	8005dba <_svfiprintf_r+0x6a>
 8005db8:	e0ae      	b.n	8005f18 <_svfiprintf_r+0x1c8>
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	189b      	adds	r3, r3, r2
 8005dc0:	6163      	str	r3, [r4, #20]
 8005dc2:	782b      	ldrb	r3, [r5, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d100      	bne.n	8005dca <_svfiprintf_r+0x7a>
 8005dc8:	e0a6      	b.n	8005f18 <_svfiprintf_r+0x1c8>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4252      	negs	r2, r2
 8005dd0:	6062      	str	r2, [r4, #4]
 8005dd2:	a904      	add	r1, sp, #16
 8005dd4:	3254      	adds	r2, #84	@ 0x54
 8005dd6:	1852      	adds	r2, r2, r1
 8005dd8:	1c6e      	adds	r6, r5, #1
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	60e3      	str	r3, [r4, #12]
 8005dde:	60a3      	str	r3, [r4, #8]
 8005de0:	7013      	strb	r3, [r2, #0]
 8005de2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005de4:	4b54      	ldr	r3, [pc, #336]	@ (8005f38 <_svfiprintf_r+0x1e8>)
 8005de6:	2205      	movs	r2, #5
 8005de8:	0018      	movs	r0, r3
 8005dea:	7831      	ldrb	r1, [r6, #0]
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	f000 fa51 	bl	8006294 <memchr>
 8005df2:	1c75      	adds	r5, r6, #1
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d11f      	bne.n	8005e38 <_svfiprintf_r+0xe8>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	06d3      	lsls	r3, r2, #27
 8005dfc:	d504      	bpl.n	8005e08 <_svfiprintf_r+0xb8>
 8005dfe:	2353      	movs	r3, #83	@ 0x53
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	185b      	adds	r3, r3, r1
 8005e04:	2120      	movs	r1, #32
 8005e06:	7019      	strb	r1, [r3, #0]
 8005e08:	0713      	lsls	r3, r2, #28
 8005e0a:	d504      	bpl.n	8005e16 <_svfiprintf_r+0xc6>
 8005e0c:	2353      	movs	r3, #83	@ 0x53
 8005e0e:	a904      	add	r1, sp, #16
 8005e10:	185b      	adds	r3, r3, r1
 8005e12:	212b      	movs	r1, #43	@ 0x2b
 8005e14:	7019      	strb	r1, [r3, #0]
 8005e16:	7833      	ldrb	r3, [r6, #0]
 8005e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e1a:	d016      	beq.n	8005e4a <_svfiprintf_r+0xfa>
 8005e1c:	0035      	movs	r5, r6
 8005e1e:	2100      	movs	r1, #0
 8005e20:	200a      	movs	r0, #10
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	782a      	ldrb	r2, [r5, #0]
 8005e26:	1c6e      	adds	r6, r5, #1
 8005e28:	3a30      	subs	r2, #48	@ 0x30
 8005e2a:	2a09      	cmp	r2, #9
 8005e2c:	d950      	bls.n	8005ed0 <_svfiprintf_r+0x180>
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d111      	bne.n	8005e56 <_svfiprintf_r+0x106>
 8005e32:	e017      	b.n	8005e64 <_svfiprintf_r+0x114>
 8005e34:	3501      	adds	r5, #1
 8005e36:	e7af      	b.n	8005d98 <_svfiprintf_r+0x48>
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	1ac0      	subs	r0, r0, r3
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4083      	lsls	r3, r0
 8005e42:	4313      	orrs	r3, r2
 8005e44:	002e      	movs	r6, r5
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	e7cc      	b.n	8005de4 <_svfiprintf_r+0x94>
 8005e4a:	9b07      	ldr	r3, [sp, #28]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	9107      	str	r1, [sp, #28]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db01      	blt.n	8005e5a <_svfiprintf_r+0x10a>
 8005e56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e58:	e004      	b.n	8005e64 <_svfiprintf_r+0x114>
 8005e5a:	425b      	negs	r3, r3
 8005e5c:	60e3      	str	r3, [r4, #12]
 8005e5e:	2302      	movs	r3, #2
 8005e60:	4313      	orrs	r3, r2
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	782b      	ldrb	r3, [r5, #0]
 8005e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e68:	d10c      	bne.n	8005e84 <_svfiprintf_r+0x134>
 8005e6a:	786b      	ldrb	r3, [r5, #1]
 8005e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6e:	d134      	bne.n	8005eda <_svfiprintf_r+0x18a>
 8005e70:	9b07      	ldr	r3, [sp, #28]
 8005e72:	3502      	adds	r5, #2
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	9207      	str	r2, [sp, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da01      	bge.n	8005e82 <_svfiprintf_r+0x132>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	425b      	negs	r3, r3
 8005e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e84:	4e2d      	ldr	r6, [pc, #180]	@ (8005f3c <_svfiprintf_r+0x1ec>)
 8005e86:	2203      	movs	r2, #3
 8005e88:	0030      	movs	r0, r6
 8005e8a:	7829      	ldrb	r1, [r5, #0]
 8005e8c:	f000 fa02 	bl	8006294 <memchr>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d006      	beq.n	8005ea2 <_svfiprintf_r+0x152>
 8005e94:	2340      	movs	r3, #64	@ 0x40
 8005e96:	1b80      	subs	r0, r0, r6
 8005e98:	4083      	lsls	r3, r0
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	7829      	ldrb	r1, [r5, #0]
 8005ea4:	2206      	movs	r2, #6
 8005ea6:	4826      	ldr	r0, [pc, #152]	@ (8005f40 <_svfiprintf_r+0x1f0>)
 8005ea8:	1c6e      	adds	r6, r5, #1
 8005eaa:	7621      	strb	r1, [r4, #24]
 8005eac:	f000 f9f2 	bl	8006294 <memchr>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d038      	beq.n	8005f26 <_svfiprintf_r+0x1d6>
 8005eb4:	4b23      	ldr	r3, [pc, #140]	@ (8005f44 <_svfiprintf_r+0x1f4>)
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d122      	bne.n	8005f00 <_svfiprintf_r+0x1b0>
 8005eba:	2207      	movs	r2, #7
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	4393      	bics	r3, r2
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	6963      	ldr	r3, [r4, #20]
 8005ec8:	9a04      	ldr	r2, [sp, #16]
 8005eca:	189b      	adds	r3, r3, r2
 8005ecc:	6163      	str	r3, [r4, #20]
 8005ece:	e762      	b.n	8005d96 <_svfiprintf_r+0x46>
 8005ed0:	4343      	muls	r3, r0
 8005ed2:	0035      	movs	r5, r6
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	e7a4      	b.n	8005e24 <_svfiprintf_r+0xd4>
 8005eda:	2300      	movs	r3, #0
 8005edc:	200a      	movs	r0, #10
 8005ede:	0019      	movs	r1, r3
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	782a      	ldrb	r2, [r5, #0]
 8005ee6:	1c6e      	adds	r6, r5, #1
 8005ee8:	3a30      	subs	r2, #48	@ 0x30
 8005eea:	2a09      	cmp	r2, #9
 8005eec:	d903      	bls.n	8005ef6 <_svfiprintf_r+0x1a6>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0c8      	beq.n	8005e84 <_svfiprintf_r+0x134>
 8005ef2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ef4:	e7c6      	b.n	8005e84 <_svfiprintf_r+0x134>
 8005ef6:	4341      	muls	r1, r0
 8005ef8:	0035      	movs	r5, r6
 8005efa:	2301      	movs	r3, #1
 8005efc:	1889      	adds	r1, r1, r2
 8005efe:	e7f1      	b.n	8005ee4 <_svfiprintf_r+0x194>
 8005f00:	aa07      	add	r2, sp, #28
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	0021      	movs	r1, r4
 8005f06:	003a      	movs	r2, r7
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <_svfiprintf_r+0x1f8>)
 8005f0a:	9803      	ldr	r0, [sp, #12]
 8005f0c:	e000      	b.n	8005f10 <_svfiprintf_r+0x1c0>
 8005f0e:	bf00      	nop
 8005f10:	9004      	str	r0, [sp, #16]
 8005f12:	9b04      	ldr	r3, [sp, #16]
 8005f14:	3301      	adds	r3, #1
 8005f16:	d1d6      	bne.n	8005ec6 <_svfiprintf_r+0x176>
 8005f18:	89bb      	ldrh	r3, [r7, #12]
 8005f1a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005f1c:	065b      	lsls	r3, r3, #25
 8005f1e:	d500      	bpl.n	8005f22 <_svfiprintf_r+0x1d2>
 8005f20:	e72c      	b.n	8005d7c <_svfiprintf_r+0x2c>
 8005f22:	b021      	add	sp, #132	@ 0x84
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f26:	aa07      	add	r2, sp, #28
 8005f28:	9200      	str	r2, [sp, #0]
 8005f2a:	0021      	movs	r1, r4
 8005f2c:	003a      	movs	r2, r7
 8005f2e:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <_svfiprintf_r+0x1f8>)
 8005f30:	9803      	ldr	r0, [sp, #12]
 8005f32:	f000 f87b 	bl	800602c <_printf_i>
 8005f36:	e7eb      	b.n	8005f10 <_svfiprintf_r+0x1c0>
 8005f38:	080072b4 	.word	0x080072b4
 8005f3c:	080072ba 	.word	0x080072ba
 8005f40:	080072be 	.word	0x080072be
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005c91 	.word	0x08005c91

08005f4c <_printf_common>:
 8005f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f4e:	0016      	movs	r6, r2
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	688a      	ldr	r2, [r1, #8]
 8005f54:	690b      	ldr	r3, [r1, #16]
 8005f56:	000c      	movs	r4, r1
 8005f58:	9000      	str	r0, [sp, #0]
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	da00      	bge.n	8005f60 <_printf_common+0x14>
 8005f5e:	0013      	movs	r3, r2
 8005f60:	0022      	movs	r2, r4
 8005f62:	6033      	str	r3, [r6, #0]
 8005f64:	3243      	adds	r2, #67	@ 0x43
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d001      	beq.n	8005f70 <_printf_common+0x24>
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	6033      	str	r3, [r6, #0]
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	069b      	lsls	r3, r3, #26
 8005f74:	d502      	bpl.n	8005f7c <_printf_common+0x30>
 8005f76:	6833      	ldr	r3, [r6, #0]
 8005f78:	3302      	adds	r3, #2
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	2306      	movs	r3, #6
 8005f80:	0015      	movs	r5, r2
 8005f82:	401d      	ands	r5, r3
 8005f84:	421a      	tst	r2, r3
 8005f86:	d027      	beq.n	8005fd8 <_printf_common+0x8c>
 8005f88:	0023      	movs	r3, r4
 8005f8a:	3343      	adds	r3, #67	@ 0x43
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	1e5a      	subs	r2, r3, #1
 8005f90:	4193      	sbcs	r3, r2
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	0692      	lsls	r2, r2, #26
 8005f96:	d430      	bmi.n	8005ffa <_printf_common+0xae>
 8005f98:	0022      	movs	r2, r4
 8005f9a:	9901      	ldr	r1, [sp, #4]
 8005f9c:	9800      	ldr	r0, [sp, #0]
 8005f9e:	9d08      	ldr	r5, [sp, #32]
 8005fa0:	3243      	adds	r2, #67	@ 0x43
 8005fa2:	47a8      	blx	r5
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d025      	beq.n	8005ff4 <_printf_common+0xa8>
 8005fa8:	2206      	movs	r2, #6
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	2500      	movs	r5, #0
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d105      	bne.n	8005fc0 <_printf_common+0x74>
 8005fb4:	6833      	ldr	r3, [r6, #0]
 8005fb6:	68e5      	ldr	r5, [r4, #12]
 8005fb8:	1aed      	subs	r5, r5, r3
 8005fba:	43eb      	mvns	r3, r5
 8005fbc:	17db      	asrs	r3, r3, #31
 8005fbe:	401d      	ands	r5, r3
 8005fc0:	68a3      	ldr	r3, [r4, #8]
 8005fc2:	6922      	ldr	r2, [r4, #16]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	dd01      	ble.n	8005fcc <_printf_common+0x80>
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	18ed      	adds	r5, r5, r3
 8005fcc:	2600      	movs	r6, #0
 8005fce:	42b5      	cmp	r5, r6
 8005fd0:	d120      	bne.n	8006014 <_printf_common+0xc8>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e010      	b.n	8005ff8 <_printf_common+0xac>
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	68e3      	ldr	r3, [r4, #12]
 8005fda:	6832      	ldr	r2, [r6, #0]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	ddd2      	ble.n	8005f88 <_printf_common+0x3c>
 8005fe2:	0022      	movs	r2, r4
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	9901      	ldr	r1, [sp, #4]
 8005fe8:	9800      	ldr	r0, [sp, #0]
 8005fea:	9f08      	ldr	r7, [sp, #32]
 8005fec:	3219      	adds	r2, #25
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d1f0      	bne.n	8005fd6 <_printf_common+0x8a>
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	4240      	negs	r0, r0
 8005ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ffa:	2030      	movs	r0, #48	@ 0x30
 8005ffc:	18e1      	adds	r1, r4, r3
 8005ffe:	3143      	adds	r1, #67	@ 0x43
 8006000:	7008      	strb	r0, [r1, #0]
 8006002:	0021      	movs	r1, r4
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	3145      	adds	r1, #69	@ 0x45
 8006008:	7809      	ldrb	r1, [r1, #0]
 800600a:	18a2      	adds	r2, r4, r2
 800600c:	3243      	adds	r2, #67	@ 0x43
 800600e:	3302      	adds	r3, #2
 8006010:	7011      	strb	r1, [r2, #0]
 8006012:	e7c1      	b.n	8005f98 <_printf_common+0x4c>
 8006014:	0022      	movs	r2, r4
 8006016:	2301      	movs	r3, #1
 8006018:	9901      	ldr	r1, [sp, #4]
 800601a:	9800      	ldr	r0, [sp, #0]
 800601c:	9f08      	ldr	r7, [sp, #32]
 800601e:	321a      	adds	r2, #26
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa8>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d1      	b.n	8005fce <_printf_common+0x82>
	...

0800602c <_printf_i>:
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	b08b      	sub	sp, #44	@ 0x2c
 8006030:	9206      	str	r2, [sp, #24]
 8006032:	000a      	movs	r2, r1
 8006034:	3243      	adds	r2, #67	@ 0x43
 8006036:	9307      	str	r3, [sp, #28]
 8006038:	9005      	str	r0, [sp, #20]
 800603a:	9203      	str	r2, [sp, #12]
 800603c:	7e0a      	ldrb	r2, [r1, #24]
 800603e:	000c      	movs	r4, r1
 8006040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006042:	2a78      	cmp	r2, #120	@ 0x78
 8006044:	d809      	bhi.n	800605a <_printf_i+0x2e>
 8006046:	2a62      	cmp	r2, #98	@ 0x62
 8006048:	d80b      	bhi.n	8006062 <_printf_i+0x36>
 800604a:	2a00      	cmp	r2, #0
 800604c:	d100      	bne.n	8006050 <_printf_i+0x24>
 800604e:	e0bc      	b.n	80061ca <_printf_i+0x19e>
 8006050:	497b      	ldr	r1, [pc, #492]	@ (8006240 <_printf_i+0x214>)
 8006052:	9104      	str	r1, [sp, #16]
 8006054:	2a58      	cmp	r2, #88	@ 0x58
 8006056:	d100      	bne.n	800605a <_printf_i+0x2e>
 8006058:	e090      	b.n	800617c <_printf_i+0x150>
 800605a:	0025      	movs	r5, r4
 800605c:	3542      	adds	r5, #66	@ 0x42
 800605e:	702a      	strb	r2, [r5, #0]
 8006060:	e022      	b.n	80060a8 <_printf_i+0x7c>
 8006062:	0010      	movs	r0, r2
 8006064:	3863      	subs	r0, #99	@ 0x63
 8006066:	2815      	cmp	r0, #21
 8006068:	d8f7      	bhi.n	800605a <_printf_i+0x2e>
 800606a:	f7fa f855 	bl	8000118 <__gnu_thumb1_case_shi>
 800606e:	0016      	.short	0x0016
 8006070:	fff6001f 	.word	0xfff6001f
 8006074:	fff6fff6 	.word	0xfff6fff6
 8006078:	001ffff6 	.word	0x001ffff6
 800607c:	fff6fff6 	.word	0xfff6fff6
 8006080:	fff6fff6 	.word	0xfff6fff6
 8006084:	003600a1 	.word	0x003600a1
 8006088:	fff60080 	.word	0xfff60080
 800608c:	00b2fff6 	.word	0x00b2fff6
 8006090:	0036fff6 	.word	0x0036fff6
 8006094:	fff6fff6 	.word	0xfff6fff6
 8006098:	0084      	.short	0x0084
 800609a:	0025      	movs	r5, r4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	3542      	adds	r5, #66	@ 0x42
 80060a0:	1d11      	adds	r1, r2, #4
 80060a2:	6019      	str	r1, [r3, #0]
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	702b      	strb	r3, [r5, #0]
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0a0      	b.n	80061ee <_printf_i+0x1c2>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	6809      	ldr	r1, [r1, #0]
 80060b0:	1d02      	adds	r2, r0, #4
 80060b2:	060d      	lsls	r5, r1, #24
 80060b4:	d50b      	bpl.n	80060ce <_printf_i+0xa2>
 80060b6:	6806      	ldr	r6, [r0, #0]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	da03      	bge.n	80060c6 <_printf_i+0x9a>
 80060be:	232d      	movs	r3, #45	@ 0x2d
 80060c0:	9a03      	ldr	r2, [sp, #12]
 80060c2:	4276      	negs	r6, r6
 80060c4:	7013      	strb	r3, [r2, #0]
 80060c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006240 <_printf_i+0x214>)
 80060c8:	270a      	movs	r7, #10
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	e018      	b.n	8006100 <_printf_i+0xd4>
 80060ce:	6806      	ldr	r6, [r0, #0]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	0649      	lsls	r1, r1, #25
 80060d4:	d5f1      	bpl.n	80060ba <_printf_i+0x8e>
 80060d6:	b236      	sxth	r6, r6
 80060d8:	e7ef      	b.n	80060ba <_printf_i+0x8e>
 80060da:	6808      	ldr	r0, [r1, #0]
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	c940      	ldmia	r1!, {r6}
 80060e0:	0605      	lsls	r5, r0, #24
 80060e2:	d402      	bmi.n	80060ea <_printf_i+0xbe>
 80060e4:	0640      	lsls	r0, r0, #25
 80060e6:	d500      	bpl.n	80060ea <_printf_i+0xbe>
 80060e8:	b2b6      	uxth	r6, r6
 80060ea:	6019      	str	r1, [r3, #0]
 80060ec:	4b54      	ldr	r3, [pc, #336]	@ (8006240 <_printf_i+0x214>)
 80060ee:	270a      	movs	r7, #10
 80060f0:	9304      	str	r3, [sp, #16]
 80060f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80060f4:	d100      	bne.n	80060f8 <_printf_i+0xcc>
 80060f6:	3f02      	subs	r7, #2
 80060f8:	0023      	movs	r3, r4
 80060fa:	2200      	movs	r2, #0
 80060fc:	3343      	adds	r3, #67	@ 0x43
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	60a3      	str	r3, [r4, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	db03      	blt.n	8006110 <_printf_i+0xe4>
 8006108:	2104      	movs	r1, #4
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	438a      	bics	r2, r1
 800610e:	6022      	str	r2, [r4, #0]
 8006110:	2e00      	cmp	r6, #0
 8006112:	d102      	bne.n	800611a <_printf_i+0xee>
 8006114:	9d03      	ldr	r5, [sp, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <_printf_i+0x108>
 800611a:	9d03      	ldr	r5, [sp, #12]
 800611c:	0030      	movs	r0, r6
 800611e:	0039      	movs	r1, r7
 8006120:	f7fa f88a 	bl	8000238 <__aeabi_uidivmod>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	3d01      	subs	r5, #1
 8006128:	5c5b      	ldrb	r3, [r3, r1]
 800612a:	702b      	strb	r3, [r5, #0]
 800612c:	0033      	movs	r3, r6
 800612e:	0006      	movs	r6, r0
 8006130:	429f      	cmp	r7, r3
 8006132:	d9f3      	bls.n	800611c <_printf_i+0xf0>
 8006134:	2f08      	cmp	r7, #8
 8006136:	d109      	bne.n	800614c <_printf_i+0x120>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d506      	bpl.n	800614c <_printf_i+0x120>
 800613e:	6862      	ldr	r2, [r4, #4]
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	dc02      	bgt.n	800614c <_printf_i+0x120>
 8006146:	2330      	movs	r3, #48	@ 0x30
 8006148:	3d01      	subs	r5, #1
 800614a:	702b      	strb	r3, [r5, #0]
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	1b5b      	subs	r3, r3, r5
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	9b07      	ldr	r3, [sp, #28]
 8006154:	0021      	movs	r1, r4
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	9805      	ldr	r0, [sp, #20]
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	aa09      	add	r2, sp, #36	@ 0x24
 800615e:	f7ff fef5 	bl	8005f4c <_printf_common>
 8006162:	3001      	adds	r0, #1
 8006164:	d148      	bne.n	80061f8 <_printf_i+0x1cc>
 8006166:	2001      	movs	r0, #1
 8006168:	4240      	negs	r0, r0
 800616a:	b00b      	add	sp, #44	@ 0x2c
 800616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616e:	2220      	movs	r2, #32
 8006170:	6809      	ldr	r1, [r1, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	2278      	movs	r2, #120	@ 0x78
 8006178:	4932      	ldr	r1, [pc, #200]	@ (8006244 <_printf_i+0x218>)
 800617a:	9104      	str	r1, [sp, #16]
 800617c:	0021      	movs	r1, r4
 800617e:	3145      	adds	r1, #69	@ 0x45
 8006180:	700a      	strb	r2, [r1, #0]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	c940      	ldmia	r1!, {r6}
 8006188:	0610      	lsls	r0, r2, #24
 800618a:	d402      	bmi.n	8006192 <_printf_i+0x166>
 800618c:	0650      	lsls	r0, r2, #25
 800618e:	d500      	bpl.n	8006192 <_printf_i+0x166>
 8006190:	b2b6      	uxth	r6, r6
 8006192:	6019      	str	r1, [r3, #0]
 8006194:	07d3      	lsls	r3, r2, #31
 8006196:	d502      	bpl.n	800619e <_printf_i+0x172>
 8006198:	2320      	movs	r3, #32
 800619a:	4313      	orrs	r3, r2
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d001      	beq.n	80061a6 <_printf_i+0x17a>
 80061a2:	2710      	movs	r7, #16
 80061a4:	e7a8      	b.n	80060f8 <_printf_i+0xcc>
 80061a6:	2220      	movs	r2, #32
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	4393      	bics	r3, r2
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	e7f8      	b.n	80061a2 <_printf_i+0x176>
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	680d      	ldr	r5, [r1, #0]
 80061b4:	1d10      	adds	r0, r2, #4
 80061b6:	6949      	ldr	r1, [r1, #20]
 80061b8:	6018      	str	r0, [r3, #0]
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	062e      	lsls	r6, r5, #24
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0x198>
 80061c0:	6019      	str	r1, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0x19e>
 80061c4:	066d      	lsls	r5, r5, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0x194>
 80061c8:	8019      	strh	r1, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9d03      	ldr	r5, [sp, #12]
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	e7bf      	b.n	8006152 <_printf_i+0x126>
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	1d11      	adds	r1, r2, #4
 80061d6:	6019      	str	r1, [r3, #0]
 80061d8:	6815      	ldr	r5, [r2, #0]
 80061da:	2100      	movs	r1, #0
 80061dc:	0028      	movs	r0, r5
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	f000 f858 	bl	8006294 <memchr>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d001      	beq.n	80061ec <_printf_i+0x1c0>
 80061e8:	1b40      	subs	r0, r0, r5
 80061ea:	6060      	str	r0, [r4, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9a03      	ldr	r2, [sp, #12]
 80061f4:	7013      	strb	r3, [r2, #0]
 80061f6:	e7ac      	b.n	8006152 <_printf_i+0x126>
 80061f8:	002a      	movs	r2, r5
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	9906      	ldr	r1, [sp, #24]
 80061fe:	9805      	ldr	r0, [sp, #20]
 8006200:	9d07      	ldr	r5, [sp, #28]
 8006202:	47a8      	blx	r5
 8006204:	3001      	adds	r0, #1
 8006206:	d0ae      	beq.n	8006166 <_printf_i+0x13a>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	079b      	lsls	r3, r3, #30
 800620c:	d415      	bmi.n	800623a <_printf_i+0x20e>
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	68e0      	ldr	r0, [r4, #12]
 8006212:	4298      	cmp	r0, r3
 8006214:	daa9      	bge.n	800616a <_printf_i+0x13e>
 8006216:	0018      	movs	r0, r3
 8006218:	e7a7      	b.n	800616a <_printf_i+0x13e>
 800621a:	0022      	movs	r2, r4
 800621c:	2301      	movs	r3, #1
 800621e:	9906      	ldr	r1, [sp, #24]
 8006220:	9805      	ldr	r0, [sp, #20]
 8006222:	9e07      	ldr	r6, [sp, #28]
 8006224:	3219      	adds	r2, #25
 8006226:	47b0      	blx	r6
 8006228:	3001      	adds	r0, #1
 800622a:	d09c      	beq.n	8006166 <_printf_i+0x13a>
 800622c:	3501      	adds	r5, #1
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	42ab      	cmp	r3, r5
 8006236:	dcf0      	bgt.n	800621a <_printf_i+0x1ee>
 8006238:	e7e9      	b.n	800620e <_printf_i+0x1e2>
 800623a:	2500      	movs	r5, #0
 800623c:	e7f7      	b.n	800622e <_printf_i+0x202>
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	080072c5 	.word	0x080072c5
 8006244:	080072d6 	.word	0x080072d6

08006248 <memmove>:
 8006248:	b510      	push	{r4, lr}
 800624a:	4288      	cmp	r0, r1
 800624c:	d806      	bhi.n	800625c <memmove+0x14>
 800624e:	2300      	movs	r3, #0
 8006250:	429a      	cmp	r2, r3
 8006252:	d008      	beq.n	8006266 <memmove+0x1e>
 8006254:	5ccc      	ldrb	r4, [r1, r3]
 8006256:	54c4      	strb	r4, [r0, r3]
 8006258:	3301      	adds	r3, #1
 800625a:	e7f9      	b.n	8006250 <memmove+0x8>
 800625c:	188b      	adds	r3, r1, r2
 800625e:	4298      	cmp	r0, r3
 8006260:	d2f5      	bcs.n	800624e <memmove+0x6>
 8006262:	3a01      	subs	r2, #1
 8006264:	d200      	bcs.n	8006268 <memmove+0x20>
 8006266:	bd10      	pop	{r4, pc}
 8006268:	5c8b      	ldrb	r3, [r1, r2]
 800626a:	5483      	strb	r3, [r0, r2]
 800626c:	e7f9      	b.n	8006262 <memmove+0x1a>
	...

08006270 <_sbrk_r>:
 8006270:	2300      	movs	r3, #0
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	4d06      	ldr	r5, [pc, #24]	@ (8006290 <_sbrk_r+0x20>)
 8006276:	0004      	movs	r4, r0
 8006278:	0008      	movs	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fc fdd0 	bl	8002e20 <_sbrk>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d103      	bne.n	800628c <_sbrk_r+0x1c>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d000      	beq.n	800628c <_sbrk_r+0x1c>
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	200002cc 	.word	0x200002cc

08006294 <memchr>:
 8006294:	b2c9      	uxtb	r1, r1
 8006296:	1882      	adds	r2, r0, r2
 8006298:	4290      	cmp	r0, r2
 800629a:	d101      	bne.n	80062a0 <memchr+0xc>
 800629c:	2000      	movs	r0, #0
 800629e:	4770      	bx	lr
 80062a0:	7803      	ldrb	r3, [r0, #0]
 80062a2:	428b      	cmp	r3, r1
 80062a4:	d0fb      	beq.n	800629e <memchr+0xa>
 80062a6:	3001      	adds	r0, #1
 80062a8:	e7f6      	b.n	8006298 <memchr+0x4>

080062aa <memcpy>:
 80062aa:	2300      	movs	r3, #0
 80062ac:	b510      	push	{r4, lr}
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d100      	bne.n	80062b4 <memcpy+0xa>
 80062b2:	bd10      	pop	{r4, pc}
 80062b4:	5ccc      	ldrb	r4, [r1, r3]
 80062b6:	54c4      	strb	r4, [r0, r3]
 80062b8:	3301      	adds	r3, #1
 80062ba:	e7f8      	b.n	80062ae <memcpy+0x4>

080062bc <_realloc_r>:
 80062bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062be:	0006      	movs	r6, r0
 80062c0:	000c      	movs	r4, r1
 80062c2:	0015      	movs	r5, r2
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d105      	bne.n	80062d4 <_realloc_r+0x18>
 80062c8:	0011      	movs	r1, r2
 80062ca:	f7ff fc51 	bl	8005b70 <_malloc_r>
 80062ce:	0004      	movs	r4, r0
 80062d0:	0020      	movs	r0, r4
 80062d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	d103      	bne.n	80062e0 <_realloc_r+0x24>
 80062d8:	f7ff fbde 	bl	8005a98 <_free_r>
 80062dc:	2400      	movs	r4, #0
 80062de:	e7f7      	b.n	80062d0 <_realloc_r+0x14>
 80062e0:	f000 f81b 	bl	800631a <_malloc_usable_size_r>
 80062e4:	0007      	movs	r7, r0
 80062e6:	4285      	cmp	r5, r0
 80062e8:	d802      	bhi.n	80062f0 <_realloc_r+0x34>
 80062ea:	0843      	lsrs	r3, r0, #1
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	d3ef      	bcc.n	80062d0 <_realloc_r+0x14>
 80062f0:	0029      	movs	r1, r5
 80062f2:	0030      	movs	r0, r6
 80062f4:	f7ff fc3c 	bl	8005b70 <_malloc_r>
 80062f8:	9001      	str	r0, [sp, #4]
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d0ee      	beq.n	80062dc <_realloc_r+0x20>
 80062fe:	002a      	movs	r2, r5
 8006300:	42bd      	cmp	r5, r7
 8006302:	d900      	bls.n	8006306 <_realloc_r+0x4a>
 8006304:	003a      	movs	r2, r7
 8006306:	0021      	movs	r1, r4
 8006308:	9801      	ldr	r0, [sp, #4]
 800630a:	f7ff ffce 	bl	80062aa <memcpy>
 800630e:	0021      	movs	r1, r4
 8006310:	0030      	movs	r0, r6
 8006312:	f7ff fbc1 	bl	8005a98 <_free_r>
 8006316:	9c01      	ldr	r4, [sp, #4]
 8006318:	e7da      	b.n	80062d0 <_realloc_r+0x14>

0800631a <_malloc_usable_size_r>:
 800631a:	1f0b      	subs	r3, r1, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	1f18      	subs	r0, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	da01      	bge.n	8006328 <_malloc_usable_size_r+0xe>
 8006324:	580b      	ldr	r3, [r1, r0]
 8006326:	18c0      	adds	r0, r0, r3
 8006328:	4770      	bx	lr
	...

0800632c <pow>:
 800632c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632e:	0014      	movs	r4, r2
 8006330:	001d      	movs	r5, r3
 8006332:	9000      	str	r0, [sp, #0]
 8006334:	9101      	str	r1, [sp, #4]
 8006336:	f000 f86f 	bl	8006418 <__ieee754_pow>
 800633a:	0022      	movs	r2, r4
 800633c:	0006      	movs	r6, r0
 800633e:	000f      	movs	r7, r1
 8006340:	002b      	movs	r3, r5
 8006342:	0020      	movs	r0, r4
 8006344:	0029      	movs	r1, r5
 8006346:	f7fb feb1 	bl	80020ac <__aeabi_dcmpun>
 800634a:	2800      	cmp	r0, #0
 800634c:	d13f      	bne.n	80063ce <pow+0xa2>
 800634e:	9800      	ldr	r0, [sp, #0]
 8006350:	9901      	ldr	r1, [sp, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	f7fa f86f 	bl	8000438 <__aeabi_dcmpeq>
 800635a:	2800      	cmp	r0, #0
 800635c:	d019      	beq.n	8006392 <pow+0x66>
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	0020      	movs	r0, r4
 8006364:	0029      	movs	r1, r5
 8006366:	f7fa f867 	bl	8000438 <__aeabi_dcmpeq>
 800636a:	2800      	cmp	r0, #0
 800636c:	d146      	bne.n	80063fc <pow+0xd0>
 800636e:	0020      	movs	r0, r4
 8006370:	0029      	movs	r1, r5
 8006372:	f000 f849 	bl	8006408 <finite>
 8006376:	2800      	cmp	r0, #0
 8006378:	d029      	beq.n	80063ce <pow+0xa2>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	0020      	movs	r0, r4
 8006380:	0029      	movs	r1, r5
 8006382:	f7fa f85f 	bl	8000444 <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d021      	beq.n	80063ce <pow+0xa2>
 800638a:	f7ff fb59 	bl	8005a40 <__errno>
 800638e:	2322      	movs	r3, #34	@ 0x22
 8006390:	e01c      	b.n	80063cc <pow+0xa0>
 8006392:	0030      	movs	r0, r6
 8006394:	0039      	movs	r1, r7
 8006396:	f000 f837 	bl	8006408 <finite>
 800639a:	2800      	cmp	r0, #0
 800639c:	d11b      	bne.n	80063d6 <pow+0xaa>
 800639e:	9800      	ldr	r0, [sp, #0]
 80063a0:	9901      	ldr	r1, [sp, #4]
 80063a2:	f000 f831 	bl	8006408 <finite>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d015      	beq.n	80063d6 <pow+0xaa>
 80063aa:	0020      	movs	r0, r4
 80063ac:	0029      	movs	r1, r5
 80063ae:	f000 f82b 	bl	8006408 <finite>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d00f      	beq.n	80063d6 <pow+0xaa>
 80063b6:	0032      	movs	r2, r6
 80063b8:	003b      	movs	r3, r7
 80063ba:	0030      	movs	r0, r6
 80063bc:	0039      	movs	r1, r7
 80063be:	f7fb fe75 	bl	80020ac <__aeabi_dcmpun>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d0e1      	beq.n	800638a <pow+0x5e>
 80063c6:	f7ff fb3b 	bl	8005a40 <__errno>
 80063ca:	2321      	movs	r3, #33	@ 0x21
 80063cc:	6003      	str	r3, [r0, #0]
 80063ce:	0030      	movs	r0, r6
 80063d0:	0039      	movs	r1, r7
 80063d2:	b003      	add	sp, #12
 80063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d6:	2200      	movs	r2, #0
 80063d8:	2300      	movs	r3, #0
 80063da:	0030      	movs	r0, r6
 80063dc:	0039      	movs	r1, r7
 80063de:	f7fa f82b 	bl	8000438 <__aeabi_dcmpeq>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0f3      	beq.n	80063ce <pow+0xa2>
 80063e6:	9800      	ldr	r0, [sp, #0]
 80063e8:	9901      	ldr	r1, [sp, #4]
 80063ea:	f000 f80d 	bl	8006408 <finite>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d0ed      	beq.n	80063ce <pow+0xa2>
 80063f2:	0020      	movs	r0, r4
 80063f4:	0029      	movs	r1, r5
 80063f6:	f000 f807 	bl	8006408 <finite>
 80063fa:	e7c4      	b.n	8006386 <pow+0x5a>
 80063fc:	2600      	movs	r6, #0
 80063fe:	4f01      	ldr	r7, [pc, #4]	@ (8006404 <pow+0xd8>)
 8006400:	e7e5      	b.n	80063ce <pow+0xa2>
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	3ff00000 	.word	0x3ff00000

08006408 <finite>:
 8006408:	4b02      	ldr	r3, [pc, #8]	@ (8006414 <finite+0xc>)
 800640a:	0048      	lsls	r0, r1, #1
 800640c:	0840      	lsrs	r0, r0, #1
 800640e:	18c0      	adds	r0, r0, r3
 8006410:	0fc0      	lsrs	r0, r0, #31
 8006412:	4770      	bx	lr
 8006414:	80100000 	.word	0x80100000

08006418 <__ieee754_pow>:
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b095      	sub	sp, #84	@ 0x54
 800641c:	9202      	str	r2, [sp, #8]
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	9a03      	ldr	r2, [sp, #12]
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	0052      	lsls	r2, r2, #1
 8006428:	9b02      	ldr	r3, [sp, #8]
 800642a:	0852      	lsrs	r2, r2, #1
 800642c:	9204      	str	r2, [sp, #16]
 800642e:	001a      	movs	r2, r3
 8006430:	000f      	movs	r7, r1
 8006432:	9904      	ldr	r1, [sp, #16]
 8006434:	0006      	movs	r6, r0
 8006436:	430a      	orrs	r2, r1
 8006438:	d119      	bne.n	800646e <__ieee754_pow+0x56>
 800643a:	2180      	movs	r1, #128	@ 0x80
 800643c:	0309      	lsls	r1, r1, #12
 800643e:	4079      	eors	r1, r7
 8006440:	0002      	movs	r2, r0
 8006442:	000b      	movs	r3, r1
 8006444:	1892      	adds	r2, r2, r2
 8006446:	415b      	adcs	r3, r3
 8006448:	499b      	ldr	r1, [pc, #620]	@ (80066b8 <__ieee754_pow+0x2a0>)
 800644a:	428b      	cmp	r3, r1
 800644c:	d806      	bhi.n	800645c <__ieee754_pow+0x44>
 800644e:	d001      	beq.n	8006454 <__ieee754_pow+0x3c>
 8006450:	f000 fcde 	bl	8006e10 <__ieee754_pow+0x9f8>
 8006454:	2a00      	cmp	r2, #0
 8006456:	d101      	bne.n	800645c <__ieee754_pow+0x44>
 8006458:	f000 fcda 	bl	8006e10 <__ieee754_pow+0x9f8>
 800645c:	9a02      	ldr	r2, [sp, #8]
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	0030      	movs	r0, r6
 8006462:	0039      	movs	r1, r7
 8006464:	f7fa f816 	bl	8000494 <__aeabi_dadd>
 8006468:	9000      	str	r0, [sp, #0]
 800646a:	9101      	str	r1, [sp, #4]
 800646c:	e0af      	b.n	80065ce <__ieee754_pow+0x1b6>
 800646e:	4a93      	ldr	r2, [pc, #588]	@ (80066bc <__ieee754_pow+0x2a4>)
 8006470:	007c      	lsls	r4, r7, #1
 8006472:	9708      	str	r7, [sp, #32]
 8006474:	900e      	str	r0, [sp, #56]	@ 0x38
 8006476:	0864      	lsrs	r4, r4, #1
 8006478:	4294      	cmp	r4, r2
 800647a:	d809      	bhi.n	8006490 <__ieee754_pow+0x78>
 800647c:	d101      	bne.n	8006482 <__ieee754_pow+0x6a>
 800647e:	2800      	cmp	r0, #0
 8006480:	d1ec      	bne.n	800645c <__ieee754_pow+0x44>
 8006482:	9904      	ldr	r1, [sp, #16]
 8006484:	4a8d      	ldr	r2, [pc, #564]	@ (80066bc <__ieee754_pow+0x2a4>)
 8006486:	4291      	cmp	r1, r2
 8006488:	d802      	bhi.n	8006490 <__ieee754_pow+0x78>
 800648a:	d10c      	bne.n	80064a6 <__ieee754_pow+0x8e>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <__ieee754_pow+0x8e>
 8006490:	4b8b      	ldr	r3, [pc, #556]	@ (80066c0 <__ieee754_pow+0x2a8>)
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	4333      	orrs	r3, r6
 8006496:	d1e1      	bne.n	800645c <__ieee754_pow+0x44>
 8006498:	2180      	movs	r1, #128	@ 0x80
 800649a:	9803      	ldr	r0, [sp, #12]
 800649c:	0309      	lsls	r1, r1, #12
 800649e:	4048      	eors	r0, r1
 80064a0:	0003      	movs	r3, r0
 80064a2:	9a02      	ldr	r2, [sp, #8]
 80064a4:	e7ce      	b.n	8006444 <__ieee754_pow+0x2c>
 80064a6:	2500      	movs	r5, #0
 80064a8:	9a08      	ldr	r2, [sp, #32]
 80064aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80064ac:	42aa      	cmp	r2, r5
 80064ae:	da68      	bge.n	8006582 <__ieee754_pow+0x16a>
 80064b0:	4a84      	ldr	r2, [pc, #528]	@ (80066c4 <__ieee754_pow+0x2ac>)
 80064b2:	9904      	ldr	r1, [sp, #16]
 80064b4:	4291      	cmp	r1, r2
 80064b6:	d863      	bhi.n	8006580 <__ieee754_pow+0x168>
 80064b8:	4a83      	ldr	r2, [pc, #524]	@ (80066c8 <__ieee754_pow+0x2b0>)
 80064ba:	4291      	cmp	r1, r2
 80064bc:	d910      	bls.n	80064e0 <__ieee754_pow+0xc8>
 80064be:	150a      	asrs	r2, r1, #20
 80064c0:	4982      	ldr	r1, [pc, #520]	@ (80066cc <__ieee754_pow+0x2b4>)
 80064c2:	1852      	adds	r2, r2, r1
 80064c4:	2a14      	cmp	r2, #20
 80064c6:	dd3b      	ble.n	8006540 <__ieee754_pow+0x128>
 80064c8:	2134      	movs	r1, #52	@ 0x34
 80064ca:	1a89      	subs	r1, r1, r2
 80064cc:	9a02      	ldr	r2, [sp, #8]
 80064ce:	40ca      	lsrs	r2, r1
 80064d0:	0010      	movs	r0, r2
 80064d2:	4088      	lsls	r0, r1
 80064d4:	4298      	cmp	r0, r3
 80064d6:	d103      	bne.n	80064e0 <__ieee754_pow+0xc8>
 80064d8:	2101      	movs	r1, #1
 80064da:	3502      	adds	r5, #2
 80064dc:	400a      	ands	r2, r1
 80064de:	1aad      	subs	r5, r5, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d03d      	beq.n	8006560 <__ieee754_pow+0x148>
 80064e4:	0030      	movs	r0, r6
 80064e6:	0039      	movs	r1, r7
 80064e8:	f000 fcc2 	bl	8006e70 <fabs>
 80064ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ee:	9000      	str	r0, [sp, #0]
 80064f0:	9101      	str	r1, [sp, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d000      	beq.n	80064f8 <__ieee754_pow+0xe0>
 80064f6:	e093      	b.n	8006620 <__ieee754_pow+0x208>
 80064f8:	4a75      	ldr	r2, [pc, #468]	@ (80066d0 <__ieee754_pow+0x2b8>)
 80064fa:	00bb      	lsls	r3, r7, #2
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	4293      	cmp	r3, r2
 8006500:	d002      	beq.n	8006508 <__ieee754_pow+0xf0>
 8006502:	2c00      	cmp	r4, #0
 8006504:	d000      	beq.n	8006508 <__ieee754_pow+0xf0>
 8006506:	e08b      	b.n	8006620 <__ieee754_pow+0x208>
 8006508:	9b06      	ldr	r3, [sp, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	da07      	bge.n	800651e <__ieee754_pow+0x106>
 800650e:	9a00      	ldr	r2, [sp, #0]
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	2000      	movs	r0, #0
 8006514:	496e      	ldr	r1, [pc, #440]	@ (80066d0 <__ieee754_pow+0x2b8>)
 8006516:	f7fa fb21 	bl	8000b5c <__aeabi_ddiv>
 800651a:	9000      	str	r0, [sp, #0]
 800651c:	9101      	str	r1, [sp, #4]
 800651e:	9b08      	ldr	r3, [sp, #32]
 8006520:	2b00      	cmp	r3, #0
 8006522:	da54      	bge.n	80065ce <__ieee754_pow+0x1b6>
 8006524:	4b66      	ldr	r3, [pc, #408]	@ (80066c0 <__ieee754_pow+0x2a8>)
 8006526:	18e4      	adds	r4, r4, r3
 8006528:	432c      	orrs	r4, r5
 800652a:	d000      	beq.n	800652e <__ieee754_pow+0x116>
 800652c:	e06d      	b.n	800660a <__ieee754_pow+0x1f2>
 800652e:	9a00      	ldr	r2, [sp, #0]
 8006530:	9b01      	ldr	r3, [sp, #4]
 8006532:	0010      	movs	r0, r2
 8006534:	0019      	movs	r1, r3
 8006536:	f7fb fa1d 	bl	8001974 <__aeabi_dsub>
 800653a:	0002      	movs	r2, r0
 800653c:	000b      	movs	r3, r1
 800653e:	e01c      	b.n	800657a <__ieee754_pow+0x162>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1cf      	bne.n	80064e4 <__ieee754_pow+0xcc>
 8006544:	3314      	adds	r3, #20
 8006546:	1a9a      	subs	r2, r3, r2
 8006548:	9b04      	ldr	r3, [sp, #16]
 800654a:	4113      	asrs	r3, r2
 800654c:	0019      	movs	r1, r3
 800654e:	4091      	lsls	r1, r2
 8006550:	000a      	movs	r2, r1
 8006552:	9904      	ldr	r1, [sp, #16]
 8006554:	428a      	cmp	r2, r1
 8006556:	d103      	bne.n	8006560 <__ieee754_pow+0x148>
 8006558:	2201      	movs	r2, #1
 800655a:	2502      	movs	r5, #2
 800655c:	4013      	ands	r3, r2
 800655e:	1aed      	subs	r5, r5, r3
 8006560:	4b5b      	ldr	r3, [pc, #364]	@ (80066d0 <__ieee754_pow+0x2b8>)
 8006562:	9a04      	ldr	r2, [sp, #16]
 8006564:	429a      	cmp	r2, r3
 8006566:	d136      	bne.n	80065d6 <__ieee754_pow+0x1be>
 8006568:	9b06      	ldr	r3, [sp, #24]
 800656a:	9600      	str	r6, [sp, #0]
 800656c:	9701      	str	r7, [sp, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da2d      	bge.n	80065ce <__ieee754_pow+0x1b6>
 8006572:	0032      	movs	r2, r6
 8006574:	003b      	movs	r3, r7
 8006576:	2000      	movs	r0, #0
 8006578:	4955      	ldr	r1, [pc, #340]	@ (80066d0 <__ieee754_pow+0x2b8>)
 800657a:	f7fa faef 	bl	8000b5c <__aeabi_ddiv>
 800657e:	e773      	b.n	8006468 <__ieee754_pow+0x50>
 8006580:	2502      	movs	r5, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ae      	bne.n	80064e4 <__ieee754_pow+0xcc>
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	4a4c      	ldr	r2, [pc, #304]	@ (80066bc <__ieee754_pow+0x2a4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d1e8      	bne.n	8006560 <__ieee754_pow+0x148>
 800658e:	4b4c      	ldr	r3, [pc, #304]	@ (80066c0 <__ieee754_pow+0x2a8>)
 8006590:	18e3      	adds	r3, r4, r3
 8006592:	4333      	orrs	r3, r6
 8006594:	d101      	bne.n	800659a <__ieee754_pow+0x182>
 8006596:	f000 fc3b 	bl	8006e10 <__ieee754_pow+0x9f8>
 800659a:	4b4b      	ldr	r3, [pc, #300]	@ (80066c8 <__ieee754_pow+0x2b0>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d909      	bls.n	80065b4 <__ieee754_pow+0x19c>
 80065a0:	9b06      	ldr	r3, [sp, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da01      	bge.n	80065aa <__ieee754_pow+0x192>
 80065a6:	f000 fc37 	bl	8006e18 <__ieee754_pow+0xa00>
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	9c03      	ldr	r4, [sp, #12]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	9401      	str	r4, [sp, #4]
 80065b2:	e00c      	b.n	80065ce <__ieee754_pow+0x1b6>
 80065b4:	9b06      	ldr	r3, [sp, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db01      	blt.n	80065be <__ieee754_pow+0x1a6>
 80065ba:	f000 fc2d 	bl	8006e18 <__ieee754_pow+0xa00>
 80065be:	2280      	movs	r2, #128	@ 0x80
 80065c0:	0612      	lsls	r2, r2, #24
 80065c2:	4694      	mov	ip, r2
 80065c4:	9b02      	ldr	r3, [sp, #8]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	4463      	add	r3, ip
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	9800      	ldr	r0, [sp, #0]
 80065d0:	9901      	ldr	r1, [sp, #4]
 80065d2:	b015      	add	sp, #84	@ 0x54
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	9a06      	ldr	r2, [sp, #24]
 80065da:	05db      	lsls	r3, r3, #23
 80065dc:	429a      	cmp	r2, r3
 80065de:	d106      	bne.n	80065ee <__ieee754_pow+0x1d6>
 80065e0:	0032      	movs	r2, r6
 80065e2:	003b      	movs	r3, r7
 80065e4:	0030      	movs	r0, r6
 80065e6:	0039      	movs	r1, r7
 80065e8:	f7fa fefc 	bl	80013e4 <__aeabi_dmul>
 80065ec:	e73c      	b.n	8006468 <__ieee754_pow+0x50>
 80065ee:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <__ieee754_pow+0x2bc>)
 80065f0:	9a06      	ldr	r2, [sp, #24]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d000      	beq.n	80065f8 <__ieee754_pow+0x1e0>
 80065f6:	e775      	b.n	80064e4 <__ieee754_pow+0xcc>
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da00      	bge.n	8006600 <__ieee754_pow+0x1e8>
 80065fe:	e771      	b.n	80064e4 <__ieee754_pow+0xcc>
 8006600:	0030      	movs	r0, r6
 8006602:	0039      	movs	r1, r7
 8006604:	f000 fcd2 	bl	8006fac <__ieee754_sqrt>
 8006608:	e72e      	b.n	8006468 <__ieee754_pow+0x50>
 800660a:	2d01      	cmp	r5, #1
 800660c:	d1df      	bne.n	80065ce <__ieee754_pow+0x1b6>
 800660e:	9800      	ldr	r0, [sp, #0]
 8006610:	2180      	movs	r1, #128	@ 0x80
 8006612:	0002      	movs	r2, r0
 8006614:	9801      	ldr	r0, [sp, #4]
 8006616:	0609      	lsls	r1, r1, #24
 8006618:	1843      	adds	r3, r0, r1
 800661a:	9200      	str	r2, [sp, #0]
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	e7d6      	b.n	80065ce <__ieee754_pow+0x1b6>
 8006620:	0ffb      	lsrs	r3, r7, #31
 8006622:	3b01      	subs	r3, #1
 8006624:	001a      	movs	r2, r3
 8006626:	432a      	orrs	r2, r5
 8006628:	d104      	bne.n	8006634 <__ieee754_pow+0x21c>
 800662a:	0032      	movs	r2, r6
 800662c:	003b      	movs	r3, r7
 800662e:	0030      	movs	r0, r6
 8006630:	0039      	movs	r1, r7
 8006632:	e780      	b.n	8006536 <__ieee754_pow+0x11e>
 8006634:	3d01      	subs	r5, #1
 8006636:	2200      	movs	r2, #0
 8006638:	431d      	orrs	r5, r3
 800663a:	d015      	beq.n	8006668 <__ieee754_pow+0x250>
 800663c:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <__ieee754_pow+0x2b8>)
 800663e:	9208      	str	r2, [sp, #32]
 8006640:	9309      	str	r3, [sp, #36]	@ 0x24
 8006642:	2384      	movs	r3, #132	@ 0x84
 8006644:	9a04      	ldr	r2, [sp, #16]
 8006646:	05db      	lsls	r3, r3, #23
 8006648:	429a      	cmp	r2, r3
 800664a:	d800      	bhi.n	800664e <__ieee754_pow+0x236>
 800664c:	e102      	b.n	8006854 <__ieee754_pow+0x43c>
 800664e:	4b22      	ldr	r3, [pc, #136]	@ (80066d8 <__ieee754_pow+0x2c0>)
 8006650:	429a      	cmp	r2, r3
 8006652:	d912      	bls.n	800667a <__ieee754_pow+0x262>
 8006654:	4b1c      	ldr	r3, [pc, #112]	@ (80066c8 <__ieee754_pow+0x2b0>)
 8006656:	429c      	cmp	r4, r3
 8006658:	d808      	bhi.n	800666c <__ieee754_pow+0x254>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da08      	bge.n	8006672 <__ieee754_pow+0x25a>
 8006660:	2000      	movs	r0, #0
 8006662:	f000 fc9b 	bl	8006f9c <__math_oflow>
 8006666:	e6ff      	b.n	8006468 <__ieee754_pow+0x50>
 8006668:	4b1c      	ldr	r3, [pc, #112]	@ (80066dc <__ieee754_pow+0x2c4>)
 800666a:	e7e8      	b.n	800663e <__ieee754_pow+0x226>
 800666c:	9b06      	ldr	r3, [sp, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	dcf6      	bgt.n	8006660 <__ieee754_pow+0x248>
 8006672:	2000      	movs	r0, #0
 8006674:	f000 fc8b 	bl	8006f8e <__math_uflow>
 8006678:	e6f6      	b.n	8006468 <__ieee754_pow+0x50>
 800667a:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <__ieee754_pow+0x2c8>)
 800667c:	429c      	cmp	r4, r3
 800667e:	d80b      	bhi.n	8006698 <__ieee754_pow+0x280>
 8006680:	9808      	ldr	r0, [sp, #32]
 8006682:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006684:	2300      	movs	r3, #0
 8006686:	2200      	movs	r2, #0
 8006688:	f7f9 fedc 	bl	8000444 <__aeabi_dcmplt>
 800668c:	1e43      	subs	r3, r0, #1
 800668e:	4198      	sbcs	r0, r3
 8006690:	9b06      	ldr	r3, [sp, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	daee      	bge.n	8006674 <__ieee754_pow+0x25c>
 8006696:	e7e4      	b.n	8006662 <__ieee754_pow+0x24a>
 8006698:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <__ieee754_pow+0x2b8>)
 800669a:	2200      	movs	r2, #0
 800669c:	429c      	cmp	r4, r3
 800669e:	d921      	bls.n	80066e4 <__ieee754_pow+0x2cc>
 80066a0:	9808      	ldr	r0, [sp, #32]
 80066a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066a4:	2300      	movs	r3, #0
 80066a6:	f7f9 fecd 	bl	8000444 <__aeabi_dcmplt>
 80066aa:	1e43      	subs	r3, r0, #1
 80066ac:	4198      	sbcs	r0, r3
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dcd6      	bgt.n	8006662 <__ieee754_pow+0x24a>
 80066b4:	e7de      	b.n	8006674 <__ieee754_pow+0x25c>
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	fff00000 	.word	0xfff00000
 80066bc:	7ff00000 	.word	0x7ff00000
 80066c0:	c0100000 	.word	0xc0100000
 80066c4:	433fffff 	.word	0x433fffff
 80066c8:	3fefffff 	.word	0x3fefffff
 80066cc:	fffffc01 	.word	0xfffffc01
 80066d0:	3ff00000 	.word	0x3ff00000
 80066d4:	3fe00000 	.word	0x3fe00000
 80066d8:	43f00000 	.word	0x43f00000
 80066dc:	bff00000 	.word	0xbff00000
 80066e0:	3feffffe 	.word	0x3feffffe
 80066e4:	9800      	ldr	r0, [sp, #0]
 80066e6:	9901      	ldr	r1, [sp, #4]
 80066e8:	4b4f      	ldr	r3, [pc, #316]	@ (8006828 <__ieee754_pow+0x410>)
 80066ea:	f7fb f943 	bl	8001974 <__aeabi_dsub>
 80066ee:	22c0      	movs	r2, #192	@ 0xc0
 80066f0:	4b4e      	ldr	r3, [pc, #312]	@ (800682c <__ieee754_pow+0x414>)
 80066f2:	05d2      	lsls	r2, r2, #23
 80066f4:	0006      	movs	r6, r0
 80066f6:	000f      	movs	r7, r1
 80066f8:	f7fa fe74 	bl	80013e4 <__aeabi_dmul>
 80066fc:	4a4c      	ldr	r2, [pc, #304]	@ (8006830 <__ieee754_pow+0x418>)
 80066fe:	9004      	str	r0, [sp, #16]
 8006700:	9105      	str	r1, [sp, #20]
 8006702:	4b4c      	ldr	r3, [pc, #304]	@ (8006834 <__ieee754_pow+0x41c>)
 8006704:	0030      	movs	r0, r6
 8006706:	0039      	movs	r1, r7
 8006708:	f7fa fe6c 	bl	80013e4 <__aeabi_dmul>
 800670c:	2200      	movs	r2, #0
 800670e:	9000      	str	r0, [sp, #0]
 8006710:	9101      	str	r1, [sp, #4]
 8006712:	4b49      	ldr	r3, [pc, #292]	@ (8006838 <__ieee754_pow+0x420>)
 8006714:	0030      	movs	r0, r6
 8006716:	0039      	movs	r1, r7
 8006718:	f7fa fe64 	bl	80013e4 <__aeabi_dmul>
 800671c:	0002      	movs	r2, r0
 800671e:	000b      	movs	r3, r1
 8006720:	4846      	ldr	r0, [pc, #280]	@ (800683c <__ieee754_pow+0x424>)
 8006722:	4947      	ldr	r1, [pc, #284]	@ (8006840 <__ieee754_pow+0x428>)
 8006724:	f7fb f926 	bl	8001974 <__aeabi_dsub>
 8006728:	0032      	movs	r2, r6
 800672a:	003b      	movs	r3, r7
 800672c:	f7fa fe5a 	bl	80013e4 <__aeabi_dmul>
 8006730:	0002      	movs	r2, r0
 8006732:	000b      	movs	r3, r1
 8006734:	2000      	movs	r0, #0
 8006736:	4943      	ldr	r1, [pc, #268]	@ (8006844 <__ieee754_pow+0x42c>)
 8006738:	f7fb f91c 	bl	8001974 <__aeabi_dsub>
 800673c:	0032      	movs	r2, r6
 800673e:	0004      	movs	r4, r0
 8006740:	000d      	movs	r5, r1
 8006742:	003b      	movs	r3, r7
 8006744:	0030      	movs	r0, r6
 8006746:	0039      	movs	r1, r7
 8006748:	f7fa fe4c 	bl	80013e4 <__aeabi_dmul>
 800674c:	0002      	movs	r2, r0
 800674e:	000b      	movs	r3, r1
 8006750:	0020      	movs	r0, r4
 8006752:	0029      	movs	r1, r5
 8006754:	f7fa fe46 	bl	80013e4 <__aeabi_dmul>
 8006758:	4a3b      	ldr	r2, [pc, #236]	@ (8006848 <__ieee754_pow+0x430>)
 800675a:	4b34      	ldr	r3, [pc, #208]	@ (800682c <__ieee754_pow+0x414>)
 800675c:	f7fa fe42 	bl	80013e4 <__aeabi_dmul>
 8006760:	0002      	movs	r2, r0
 8006762:	000b      	movs	r3, r1
 8006764:	9800      	ldr	r0, [sp, #0]
 8006766:	9901      	ldr	r1, [sp, #4]
 8006768:	f7fb f904 	bl	8001974 <__aeabi_dsub>
 800676c:	0002      	movs	r2, r0
 800676e:	000b      	movs	r3, r1
 8006770:	0004      	movs	r4, r0
 8006772:	000d      	movs	r5, r1
 8006774:	9804      	ldr	r0, [sp, #16]
 8006776:	9905      	ldr	r1, [sp, #20]
 8006778:	f7f9 fe8c 	bl	8000494 <__aeabi_dadd>
 800677c:	9a04      	ldr	r2, [sp, #16]
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	2000      	movs	r0, #0
 8006782:	9000      	str	r0, [sp, #0]
 8006784:	9101      	str	r1, [sp, #4]
 8006786:	f7fb f8f5 	bl	8001974 <__aeabi_dsub>
 800678a:	0002      	movs	r2, r0
 800678c:	000b      	movs	r3, r1
 800678e:	0020      	movs	r0, r4
 8006790:	0029      	movs	r1, r5
 8006792:	f7fb f8ef 	bl	8001974 <__aeabi_dsub>
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	9c03      	ldr	r4, [sp, #12]
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	9405      	str	r4, [sp, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	9c04      	ldr	r4, [sp, #16]
 80067a4:	9d05      	ldr	r5, [sp, #20]
 80067a6:	0006      	movs	r6, r0
 80067a8:	000f      	movs	r7, r1
 80067aa:	9802      	ldr	r0, [sp, #8]
 80067ac:	9903      	ldr	r1, [sp, #12]
 80067ae:	0022      	movs	r2, r4
 80067b0:	002b      	movs	r3, r5
 80067b2:	f7fb f8df 	bl	8001974 <__aeabi_dsub>
 80067b6:	9a00      	ldr	r2, [sp, #0]
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	f7fa fe13 	bl	80013e4 <__aeabi_dmul>
 80067be:	9a02      	ldr	r2, [sp, #8]
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	9006      	str	r0, [sp, #24]
 80067c4:	9107      	str	r1, [sp, #28]
 80067c6:	0030      	movs	r0, r6
 80067c8:	0039      	movs	r1, r7
 80067ca:	f7fa fe0b 	bl	80013e4 <__aeabi_dmul>
 80067ce:	0002      	movs	r2, r0
 80067d0:	000b      	movs	r3, r1
 80067d2:	9806      	ldr	r0, [sp, #24]
 80067d4:	9907      	ldr	r1, [sp, #28]
 80067d6:	f7f9 fe5d 	bl	8000494 <__aeabi_dadd>
 80067da:	0022      	movs	r2, r4
 80067dc:	002b      	movs	r3, r5
 80067de:	9002      	str	r0, [sp, #8]
 80067e0:	9103      	str	r1, [sp, #12]
 80067e2:	9800      	ldr	r0, [sp, #0]
 80067e4:	9901      	ldr	r1, [sp, #4]
 80067e6:	f7fa fdfd 	bl	80013e4 <__aeabi_dmul>
 80067ea:	000b      	movs	r3, r1
 80067ec:	0002      	movs	r2, r0
 80067ee:	0006      	movs	r6, r0
 80067f0:	000f      	movs	r7, r1
 80067f2:	9802      	ldr	r0, [sp, #8]
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	f7f9 fe4d 	bl	8000494 <__aeabi_dadd>
 80067fa:	9000      	str	r0, [sp, #0]
 80067fc:	9101      	str	r1, [sp, #4]
 80067fe:	9c01      	ldr	r4, [sp, #4]
 8006800:	4b12      	ldr	r3, [pc, #72]	@ (800684c <__ieee754_pow+0x434>)
 8006802:	9406      	str	r4, [sp, #24]
 8006804:	429c      	cmp	r4, r3
 8006806:	dc00      	bgt.n	800680a <__ieee754_pow+0x3f2>
 8006808:	e222      	b.n	8006c50 <__ieee754_pow+0x838>
 800680a:	4a11      	ldr	r2, [pc, #68]	@ (8006850 <__ieee754_pow+0x438>)
 800680c:	18a3      	adds	r3, r4, r2
 800680e:	9a00      	ldr	r2, [sp, #0]
 8006810:	4313      	orrs	r3, r2
 8006812:	d100      	bne.n	8006816 <__ieee754_pow+0x3fe>
 8006814:	e1a0      	b.n	8006b58 <__ieee754_pow+0x740>
 8006816:	9808      	ldr	r0, [sp, #32]
 8006818:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800681a:	2300      	movs	r3, #0
 800681c:	2200      	movs	r2, #0
 800681e:	f7f9 fe11 	bl	8000444 <__aeabi_dcmplt>
 8006822:	1e43      	subs	r3, r0, #1
 8006824:	4198      	sbcs	r0, r3
 8006826:	e71c      	b.n	8006662 <__ieee754_pow+0x24a>
 8006828:	3ff00000 	.word	0x3ff00000
 800682c:	3ff71547 	.word	0x3ff71547
 8006830:	f85ddf44 	.word	0xf85ddf44
 8006834:	3e54ae0b 	.word	0x3e54ae0b
 8006838:	3fd00000 	.word	0x3fd00000
 800683c:	55555555 	.word	0x55555555
 8006840:	3fd55555 	.word	0x3fd55555
 8006844:	3fe00000 	.word	0x3fe00000
 8006848:	652b82fe 	.word	0x652b82fe
 800684c:	408fffff 	.word	0x408fffff
 8006850:	bf700000 	.word	0xbf700000
 8006854:	4be0      	ldr	r3, [pc, #896]	@ (8006bd8 <__ieee754_pow+0x7c0>)
 8006856:	2200      	movs	r2, #0
 8006858:	423b      	tst	r3, r7
 800685a:	d10b      	bne.n	8006874 <__ieee754_pow+0x45c>
 800685c:	9800      	ldr	r0, [sp, #0]
 800685e:	9901      	ldr	r1, [sp, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	4bde      	ldr	r3, [pc, #888]	@ (8006bdc <__ieee754_pow+0x7c4>)
 8006864:	f7fa fdbe 	bl	80013e4 <__aeabi_dmul>
 8006868:	2235      	movs	r2, #53	@ 0x35
 800686a:	9000      	str	r0, [sp, #0]
 800686c:	9101      	str	r1, [sp, #4]
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	4252      	negs	r2, r2
 8006872:	930a      	str	r3, [sp, #40]	@ 0x28
 8006874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006876:	49da      	ldr	r1, [pc, #872]	@ (8006be0 <__ieee754_pow+0x7c8>)
 8006878:	151b      	asrs	r3, r3, #20
 800687a:	185b      	adds	r3, r3, r1
 800687c:	189b      	adds	r3, r3, r2
 800687e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006882:	4dd8      	ldr	r5, [pc, #864]	@ (8006be4 <__ieee754_pow+0x7cc>)
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	4ad8      	ldr	r2, [pc, #864]	@ (8006be8 <__ieee754_pow+0x7d0>)
 8006888:	0b1b      	lsrs	r3, r3, #12
 800688a:	2600      	movs	r6, #0
 800688c:	431d      	orrs	r5, r3
 800688e:	4293      	cmp	r3, r2
 8006890:	dd09      	ble.n	80068a6 <__ieee754_pow+0x48e>
 8006892:	4ad6      	ldr	r2, [pc, #856]	@ (8006bec <__ieee754_pow+0x7d4>)
 8006894:	3601      	adds	r6, #1
 8006896:	4293      	cmp	r3, r2
 8006898:	dd05      	ble.n	80068a6 <__ieee754_pow+0x48e>
 800689a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689c:	199b      	adds	r3, r3, r6
 800689e:	2600      	movs	r6, #0
 80068a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80068a2:	4bd3      	ldr	r3, [pc, #844]	@ (8006bf0 <__ieee754_pow+0x7d8>)
 80068a4:	18ed      	adds	r5, r5, r3
 80068a6:	9800      	ldr	r0, [sp, #0]
 80068a8:	9901      	ldr	r1, [sp, #4]
 80068aa:	0029      	movs	r1, r5
 80068ac:	4bd1      	ldr	r3, [pc, #836]	@ (8006bf4 <__ieee754_pow+0x7dc>)
 80068ae:	00f2      	lsls	r2, r6, #3
 80068b0:	189b      	adds	r3, r3, r2
 80068b2:	685c      	ldr	r4, [r3, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80068b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068bc:	001a      	movs	r2, r3
 80068be:	0023      	movs	r3, r4
 80068c0:	900c      	str	r0, [sp, #48]	@ 0x30
 80068c2:	910d      	str	r1, [sp, #52]	@ 0x34
 80068c4:	f7fb f856 	bl	8001974 <__aeabi_dsub>
 80068c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068cc:	9010      	str	r0, [sp, #64]	@ 0x40
 80068ce:	9111      	str	r1, [sp, #68]	@ 0x44
 80068d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068d4:	f7f9 fdde 	bl	8000494 <__aeabi_dadd>
 80068d8:	0002      	movs	r2, r0
 80068da:	000b      	movs	r3, r1
 80068dc:	2000      	movs	r0, #0
 80068de:	49c1      	ldr	r1, [pc, #772]	@ (8006be4 <__ieee754_pow+0x7cc>)
 80068e0:	f7fa f93c 	bl	8000b5c <__aeabi_ddiv>
 80068e4:	0002      	movs	r2, r0
 80068e6:	000b      	movs	r3, r1
 80068e8:	9012      	str	r0, [sp, #72]	@ 0x48
 80068ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80068ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80068ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80068f0:	f7fa fd78 	bl	80013e4 <__aeabi_dmul>
 80068f4:	9006      	str	r0, [sp, #24]
 80068f6:	9107      	str	r1, [sp, #28]
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	9c07      	ldr	r4, [sp, #28]
 80068fc:	2180      	movs	r1, #128	@ 0x80
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9405      	str	r4, [sp, #20]
 8006902:	2080      	movs	r0, #128	@ 0x80
 8006904:	2300      	movs	r3, #0
 8006906:	2200      	movs	r2, #0
 8006908:	106d      	asrs	r5, r5, #1
 800690a:	0589      	lsls	r1, r1, #22
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	4329      	orrs	r1, r5
 8006910:	0300      	lsls	r0, r0, #12
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	9c05      	ldr	r4, [sp, #20]
 8006916:	1809      	adds	r1, r1, r0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	9401      	str	r4, [sp, #4]
 800691c:	04b6      	lsls	r6, r6, #18
 800691e:	198b      	adds	r3, r1, r6
 8006920:	9800      	ldr	r0, [sp, #0]
 8006922:	9901      	ldr	r1, [sp, #4]
 8006924:	0014      	movs	r4, r2
 8006926:	001d      	movs	r5, r3
 8006928:	f7fa fd5c 	bl	80013e4 <__aeabi_dmul>
 800692c:	0002      	movs	r2, r0
 800692e:	000b      	movs	r3, r1
 8006930:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006932:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006934:	f7fb f81e 	bl	8001974 <__aeabi_dsub>
 8006938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800693a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800693c:	0006      	movs	r6, r0
 800693e:	000f      	movs	r7, r1
 8006940:	0020      	movs	r0, r4
 8006942:	0029      	movs	r1, r5
 8006944:	f7fb f816 	bl	8001974 <__aeabi_dsub>
 8006948:	0002      	movs	r2, r0
 800694a:	000b      	movs	r3, r1
 800694c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800694e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006950:	f7fb f810 	bl	8001974 <__aeabi_dsub>
 8006954:	9a00      	ldr	r2, [sp, #0]
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	f7fa fd44 	bl	80013e4 <__aeabi_dmul>
 800695c:	0002      	movs	r2, r0
 800695e:	000b      	movs	r3, r1
 8006960:	0030      	movs	r0, r6
 8006962:	0039      	movs	r1, r7
 8006964:	f7fb f806 	bl	8001974 <__aeabi_dsub>
 8006968:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800696a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800696c:	f7fa fd3a 	bl	80013e4 <__aeabi_dmul>
 8006970:	9a06      	ldr	r2, [sp, #24]
 8006972:	9b07      	ldr	r3, [sp, #28]
 8006974:	900a      	str	r0, [sp, #40]	@ 0x28
 8006976:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006978:	0010      	movs	r0, r2
 800697a:	0019      	movs	r1, r3
 800697c:	f7fa fd32 	bl	80013e4 <__aeabi_dmul>
 8006980:	0006      	movs	r6, r0
 8006982:	000f      	movs	r7, r1
 8006984:	4a9c      	ldr	r2, [pc, #624]	@ (8006bf8 <__ieee754_pow+0x7e0>)
 8006986:	4b9d      	ldr	r3, [pc, #628]	@ (8006bfc <__ieee754_pow+0x7e4>)
 8006988:	f7fa fd2c 	bl	80013e4 <__aeabi_dmul>
 800698c:	4a9c      	ldr	r2, [pc, #624]	@ (8006c00 <__ieee754_pow+0x7e8>)
 800698e:	4b9d      	ldr	r3, [pc, #628]	@ (8006c04 <__ieee754_pow+0x7ec>)
 8006990:	f7f9 fd80 	bl	8000494 <__aeabi_dadd>
 8006994:	0032      	movs	r2, r6
 8006996:	003b      	movs	r3, r7
 8006998:	f7fa fd24 	bl	80013e4 <__aeabi_dmul>
 800699c:	4a9a      	ldr	r2, [pc, #616]	@ (8006c08 <__ieee754_pow+0x7f0>)
 800699e:	4b9b      	ldr	r3, [pc, #620]	@ (8006c0c <__ieee754_pow+0x7f4>)
 80069a0:	f7f9 fd78 	bl	8000494 <__aeabi_dadd>
 80069a4:	0032      	movs	r2, r6
 80069a6:	003b      	movs	r3, r7
 80069a8:	f7fa fd1c 	bl	80013e4 <__aeabi_dmul>
 80069ac:	4a98      	ldr	r2, [pc, #608]	@ (8006c10 <__ieee754_pow+0x7f8>)
 80069ae:	4b99      	ldr	r3, [pc, #612]	@ (8006c14 <__ieee754_pow+0x7fc>)
 80069b0:	f7f9 fd70 	bl	8000494 <__aeabi_dadd>
 80069b4:	0032      	movs	r2, r6
 80069b6:	003b      	movs	r3, r7
 80069b8:	f7fa fd14 	bl	80013e4 <__aeabi_dmul>
 80069bc:	4a96      	ldr	r2, [pc, #600]	@ (8006c18 <__ieee754_pow+0x800>)
 80069be:	4b97      	ldr	r3, [pc, #604]	@ (8006c1c <__ieee754_pow+0x804>)
 80069c0:	f7f9 fd68 	bl	8000494 <__aeabi_dadd>
 80069c4:	0032      	movs	r2, r6
 80069c6:	003b      	movs	r3, r7
 80069c8:	f7fa fd0c 	bl	80013e4 <__aeabi_dmul>
 80069cc:	4a94      	ldr	r2, [pc, #592]	@ (8006c20 <__ieee754_pow+0x808>)
 80069ce:	4b95      	ldr	r3, [pc, #596]	@ (8006c24 <__ieee754_pow+0x80c>)
 80069d0:	f7f9 fd60 	bl	8000494 <__aeabi_dadd>
 80069d4:	0032      	movs	r2, r6
 80069d6:	0004      	movs	r4, r0
 80069d8:	000d      	movs	r5, r1
 80069da:	003b      	movs	r3, r7
 80069dc:	0030      	movs	r0, r6
 80069de:	0039      	movs	r1, r7
 80069e0:	f7fa fd00 	bl	80013e4 <__aeabi_dmul>
 80069e4:	0002      	movs	r2, r0
 80069e6:	000b      	movs	r3, r1
 80069e8:	0020      	movs	r0, r4
 80069ea:	0029      	movs	r1, r5
 80069ec:	f7fa fcfa 	bl	80013e4 <__aeabi_dmul>
 80069f0:	9a00      	ldr	r2, [sp, #0]
 80069f2:	9b01      	ldr	r3, [sp, #4]
 80069f4:	0004      	movs	r4, r0
 80069f6:	000d      	movs	r5, r1
 80069f8:	9806      	ldr	r0, [sp, #24]
 80069fa:	9907      	ldr	r1, [sp, #28]
 80069fc:	f7f9 fd4a 	bl	8000494 <__aeabi_dadd>
 8006a00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a04:	f7fa fcee 	bl	80013e4 <__aeabi_dmul>
 8006a08:	0022      	movs	r2, r4
 8006a0a:	002b      	movs	r3, r5
 8006a0c:	f7f9 fd42 	bl	8000494 <__aeabi_dadd>
 8006a10:	9a00      	ldr	r2, [sp, #0]
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	900c      	str	r0, [sp, #48]	@ 0x30
 8006a16:	910d      	str	r1, [sp, #52]	@ 0x34
 8006a18:	0010      	movs	r0, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	f7fa fce2 	bl	80013e4 <__aeabi_dmul>
 8006a20:	2200      	movs	r2, #0
 8006a22:	4b81      	ldr	r3, [pc, #516]	@ (8006c28 <__ieee754_pow+0x810>)
 8006a24:	0004      	movs	r4, r0
 8006a26:	000d      	movs	r5, r1
 8006a28:	f7f9 fd34 	bl	8000494 <__aeabi_dadd>
 8006a2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a30:	f7f9 fd30 	bl	8000494 <__aeabi_dadd>
 8006a34:	2000      	movs	r0, #0
 8006a36:	000f      	movs	r7, r1
 8006a38:	0006      	movs	r6, r0
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	000b      	movs	r3, r1
 8006a3e:	9800      	ldr	r0, [sp, #0]
 8006a40:	9901      	ldr	r1, [sp, #4]
 8006a42:	f7fa fccf 	bl	80013e4 <__aeabi_dmul>
 8006a46:	2200      	movs	r2, #0
 8006a48:	9000      	str	r0, [sp, #0]
 8006a4a:	9101      	str	r1, [sp, #4]
 8006a4c:	4b76      	ldr	r3, [pc, #472]	@ (8006c28 <__ieee754_pow+0x810>)
 8006a4e:	0030      	movs	r0, r6
 8006a50:	0039      	movs	r1, r7
 8006a52:	f7fa ff8f 	bl	8001974 <__aeabi_dsub>
 8006a56:	0022      	movs	r2, r4
 8006a58:	002b      	movs	r3, r5
 8006a5a:	f7fa ff8b 	bl	8001974 <__aeabi_dsub>
 8006a5e:	0002      	movs	r2, r0
 8006a60:	000b      	movs	r3, r1
 8006a62:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006a64:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006a66:	f7fa ff85 	bl	8001974 <__aeabi_dsub>
 8006a6a:	9a06      	ldr	r2, [sp, #24]
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	f7fa fcb9 	bl	80013e4 <__aeabi_dmul>
 8006a72:	0032      	movs	r2, r6
 8006a74:	0004      	movs	r4, r0
 8006a76:	000d      	movs	r5, r1
 8006a78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a7c:	003b      	movs	r3, r7
 8006a7e:	f7fa fcb1 	bl	80013e4 <__aeabi_dmul>
 8006a82:	0002      	movs	r2, r0
 8006a84:	000b      	movs	r3, r1
 8006a86:	0020      	movs	r0, r4
 8006a88:	0029      	movs	r1, r5
 8006a8a:	f7f9 fd03 	bl	8000494 <__aeabi_dadd>
 8006a8e:	0004      	movs	r4, r0
 8006a90:	000d      	movs	r5, r1
 8006a92:	0002      	movs	r2, r0
 8006a94:	000b      	movs	r3, r1
 8006a96:	9800      	ldr	r0, [sp, #0]
 8006a98:	9901      	ldr	r1, [sp, #4]
 8006a9a:	f7f9 fcfb 	bl	8000494 <__aeabi_dadd>
 8006a9e:	22e0      	movs	r2, #224	@ 0xe0
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	4b62      	ldr	r3, [pc, #392]	@ (8006c2c <__ieee754_pow+0x814>)
 8006aa4:	0612      	lsls	r2, r2, #24
 8006aa6:	0006      	movs	r6, r0
 8006aa8:	000f      	movs	r7, r1
 8006aaa:	f7fa fc9b 	bl	80013e4 <__aeabi_dmul>
 8006aae:	9006      	str	r0, [sp, #24]
 8006ab0:	9107      	str	r1, [sp, #28]
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	0030      	movs	r0, r6
 8006ab8:	0039      	movs	r1, r7
 8006aba:	f7fa ff5b 	bl	8001974 <__aeabi_dsub>
 8006abe:	0002      	movs	r2, r0
 8006ac0:	000b      	movs	r3, r1
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	0029      	movs	r1, r5
 8006ac6:	f7fa ff55 	bl	8001974 <__aeabi_dsub>
 8006aca:	4a59      	ldr	r2, [pc, #356]	@ (8006c30 <__ieee754_pow+0x818>)
 8006acc:	4b57      	ldr	r3, [pc, #348]	@ (8006c2c <__ieee754_pow+0x814>)
 8006ace:	f7fa fc89 	bl	80013e4 <__aeabi_dmul>
 8006ad2:	4a58      	ldr	r2, [pc, #352]	@ (8006c34 <__ieee754_pow+0x81c>)
 8006ad4:	0004      	movs	r4, r0
 8006ad6:	000d      	movs	r5, r1
 8006ad8:	0030      	movs	r0, r6
 8006ada:	0039      	movs	r1, r7
 8006adc:	4b56      	ldr	r3, [pc, #344]	@ (8006c38 <__ieee754_pow+0x820>)
 8006ade:	f7fa fc81 	bl	80013e4 <__aeabi_dmul>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	000b      	movs	r3, r1
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	0029      	movs	r1, r5
 8006aea:	f7f9 fcd3 	bl	8000494 <__aeabi_dadd>
 8006aee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006af0:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <__ieee754_pow+0x824>)
 8006af2:	189b      	adds	r3, r3, r2
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f7f9 fccc 	bl	8000494 <__aeabi_dadd>
 8006afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006afe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b00:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006b02:	f7fb fb31 	bl	8002168 <__aeabi_i2d>
 8006b06:	0004      	movs	r4, r0
 8006b08:	000d      	movs	r5, r1
 8006b0a:	9806      	ldr	r0, [sp, #24]
 8006b0c:	9907      	ldr	r1, [sp, #28]
 8006b0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b10:	4b4b      	ldr	r3, [pc, #300]	@ (8006c40 <__ieee754_pow+0x828>)
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	681e      	ldr	r6, [r3, #0]
 8006b16:	685f      	ldr	r7, [r3, #4]
 8006b18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1c:	f7f9 fcba 	bl	8000494 <__aeabi_dadd>
 8006b20:	0032      	movs	r2, r6
 8006b22:	003b      	movs	r3, r7
 8006b24:	f7f9 fcb6 	bl	8000494 <__aeabi_dadd>
 8006b28:	0022      	movs	r2, r4
 8006b2a:	002b      	movs	r3, r5
 8006b2c:	f7f9 fcb2 	bl	8000494 <__aeabi_dadd>
 8006b30:	2000      	movs	r0, #0
 8006b32:	0022      	movs	r2, r4
 8006b34:	002b      	movs	r3, r5
 8006b36:	9000      	str	r0, [sp, #0]
 8006b38:	9101      	str	r1, [sp, #4]
 8006b3a:	f7fa ff1b 	bl	8001974 <__aeabi_dsub>
 8006b3e:	0032      	movs	r2, r6
 8006b40:	003b      	movs	r3, r7
 8006b42:	f7fa ff17 	bl	8001974 <__aeabi_dsub>
 8006b46:	9a06      	ldr	r2, [sp, #24]
 8006b48:	9b07      	ldr	r3, [sp, #28]
 8006b4a:	f7fa ff13 	bl	8001974 <__aeabi_dsub>
 8006b4e:	0002      	movs	r2, r0
 8006b50:	000b      	movs	r3, r1
 8006b52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b56:	e61c      	b.n	8006792 <__ieee754_pow+0x37a>
 8006b58:	4a3a      	ldr	r2, [pc, #232]	@ (8006c44 <__ieee754_pow+0x82c>)
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c48 <__ieee754_pow+0x830>)
 8006b5c:	9802      	ldr	r0, [sp, #8]
 8006b5e:	9903      	ldr	r1, [sp, #12]
 8006b60:	f7f9 fc98 	bl	8000494 <__aeabi_dadd>
 8006b64:	0032      	movs	r2, r6
 8006b66:	003b      	movs	r3, r7
 8006b68:	9004      	str	r0, [sp, #16]
 8006b6a:	9105      	str	r1, [sp, #20]
 8006b6c:	9800      	ldr	r0, [sp, #0]
 8006b6e:	9901      	ldr	r1, [sp, #4]
 8006b70:	f7fa ff00 	bl	8001974 <__aeabi_dsub>
 8006b74:	0002      	movs	r2, r0
 8006b76:	000b      	movs	r3, r1
 8006b78:	9804      	ldr	r0, [sp, #16]
 8006b7a:	9905      	ldr	r1, [sp, #20]
 8006b7c:	f7f9 fc76 	bl	800046c <__aeabi_dcmpgt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d000      	beq.n	8006b86 <__ieee754_pow+0x76e>
 8006b84:	e647      	b.n	8006816 <__ieee754_pow+0x3fe>
 8006b86:	2580      	movs	r5, #128	@ 0x80
 8006b88:	4b30      	ldr	r3, [pc, #192]	@ (8006c4c <__ieee754_pow+0x834>)
 8006b8a:	036d      	lsls	r5, r5, #13
 8006b8c:	1524      	asrs	r4, r4, #20
 8006b8e:	18e4      	adds	r4, r4, r3
 8006b90:	002b      	movs	r3, r5
 8006b92:	4123      	asrs	r3, r4
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	4912      	ldr	r1, [pc, #72]	@ (8006be0 <__ieee754_pow+0x7c8>)
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	005a      	lsls	r2, r3, #1
 8006b9c:	4c14      	ldr	r4, [pc, #80]	@ (8006bf0 <__ieee754_pow+0x7d8>)
 8006b9e:	0d52      	lsrs	r2, r2, #21
 8006ba0:	1852      	adds	r2, r2, r1
 8006ba2:	4114      	asrs	r4, r2
 8006ba4:	401c      	ands	r4, r3
 8006ba6:	0021      	movs	r1, r4
 8006ba8:	2414      	movs	r4, #20
 8006baa:	031b      	lsls	r3, r3, #12
 8006bac:	0b1b      	lsrs	r3, r3, #12
 8006bae:	432b      	orrs	r3, r5
 8006bb0:	1aa2      	subs	r2, r4, r2
 8006bb2:	4113      	asrs	r3, r2
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	2000      	movs	r0, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da02      	bge.n	8006bc4 <__ieee754_pow+0x7ac>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	425b      	negs	r3, r3
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	0002      	movs	r2, r0
 8006bc6:	000b      	movs	r3, r1
 8006bc8:	0030      	movs	r0, r6
 8006bca:	0039      	movs	r1, r7
 8006bcc:	f7fa fed2 	bl	8001974 <__aeabi_dsub>
 8006bd0:	0006      	movs	r6, r0
 8006bd2:	000f      	movs	r7, r1
 8006bd4:	e065      	b.n	8006ca2 <__ieee754_pow+0x88a>
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	43400000 	.word	0x43400000
 8006be0:	fffffc01 	.word	0xfffffc01
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	0003988e 	.word	0x0003988e
 8006bec:	000bb679 	.word	0x000bb679
 8006bf0:	fff00000 	.word	0xfff00000
 8006bf4:	08007308 	.word	0x08007308
 8006bf8:	4a454eef 	.word	0x4a454eef
 8006bfc:	3fca7e28 	.word	0x3fca7e28
 8006c00:	93c9db65 	.word	0x93c9db65
 8006c04:	3fcd864a 	.word	0x3fcd864a
 8006c08:	a91d4101 	.word	0xa91d4101
 8006c0c:	3fd17460 	.word	0x3fd17460
 8006c10:	518f264d 	.word	0x518f264d
 8006c14:	3fd55555 	.word	0x3fd55555
 8006c18:	db6fabff 	.word	0xdb6fabff
 8006c1c:	3fdb6db6 	.word	0x3fdb6db6
 8006c20:	33333303 	.word	0x33333303
 8006c24:	3fe33333 	.word	0x3fe33333
 8006c28:	40080000 	.word	0x40080000
 8006c2c:	3feec709 	.word	0x3feec709
 8006c30:	dc3a03fd 	.word	0xdc3a03fd
 8006c34:	145b01f5 	.word	0x145b01f5
 8006c38:	be3e2fe0 	.word	0xbe3e2fe0
 8006c3c:	080072e8 	.word	0x080072e8
 8006c40:	080072f8 	.word	0x080072f8
 8006c44:	652b82fe 	.word	0x652b82fe
 8006c48:	3c971547 	.word	0x3c971547
 8006c4c:	fffffc02 	.word	0xfffffc02
 8006c50:	9b01      	ldr	r3, [sp, #4]
 8006c52:	005c      	lsls	r4, r3, #1
 8006c54:	4b72      	ldr	r3, [pc, #456]	@ (8006e20 <__ieee754_pow+0xa08>)
 8006c56:	0864      	lsrs	r4, r4, #1
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	d91c      	bls.n	8006c96 <__ieee754_pow+0x87e>
 8006c5c:	4a71      	ldr	r2, [pc, #452]	@ (8006e24 <__ieee754_pow+0xa0c>)
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	189b      	adds	r3, r3, r2
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d008      	beq.n	8006c7a <__ieee754_pow+0x862>
 8006c68:	9808      	ldr	r0, [sp, #32]
 8006c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f7f9 fbe8 	bl	8000444 <__aeabi_dcmplt>
 8006c74:	1e43      	subs	r3, r0, #1
 8006c76:	4198      	sbcs	r0, r3
 8006c78:	e4fc      	b.n	8006674 <__ieee754_pow+0x25c>
 8006c7a:	0032      	movs	r2, r6
 8006c7c:	9800      	ldr	r0, [sp, #0]
 8006c7e:	9901      	ldr	r1, [sp, #4]
 8006c80:	003b      	movs	r3, r7
 8006c82:	f7fa fe77 	bl	8001974 <__aeabi_dsub>
 8006c86:	9a02      	ldr	r2, [sp, #8]
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	f7f9 fbf9 	bl	8000480 <__aeabi_dcmpge>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d1ea      	bne.n	8006c68 <__ieee754_pow+0x850>
 8006c92:	4c65      	ldr	r4, [pc, #404]	@ (8006e28 <__ieee754_pow+0xa10>)
 8006c94:	e777      	b.n	8006b86 <__ieee754_pow+0x76e>
 8006c96:	9a04      	ldr	r2, [sp, #16]
 8006c98:	4b64      	ldr	r3, [pc, #400]	@ (8006e2c <__ieee754_pow+0xa14>)
 8006c9a:	9200      	str	r2, [sp, #0]
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d900      	bls.n	8006ca2 <__ieee754_pow+0x88a>
 8006ca0:	e771      	b.n	8006b86 <__ieee754_pow+0x76e>
 8006ca2:	9a02      	ldr	r2, [sp, #8]
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	0030      	movs	r0, r6
 8006ca8:	0039      	movs	r1, r7
 8006caa:	f7f9 fbf3 	bl	8000494 <__aeabi_dadd>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8006e30 <__ieee754_pow+0xa18>)
 8006cb4:	9004      	str	r0, [sp, #16]
 8006cb6:	9105      	str	r1, [sp, #20]
 8006cb8:	f7fa fb94 	bl	80013e4 <__aeabi_dmul>
 8006cbc:	0032      	movs	r2, r6
 8006cbe:	003b      	movs	r3, r7
 8006cc0:	9006      	str	r0, [sp, #24]
 8006cc2:	9107      	str	r1, [sp, #28]
 8006cc4:	9804      	ldr	r0, [sp, #16]
 8006cc6:	9905      	ldr	r1, [sp, #20]
 8006cc8:	f7fa fe54 	bl	8001974 <__aeabi_dsub>
 8006ccc:	0002      	movs	r2, r0
 8006cce:	000b      	movs	r3, r1
 8006cd0:	9802      	ldr	r0, [sp, #8]
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	f7fa fe4e 	bl	8001974 <__aeabi_dsub>
 8006cd8:	4a56      	ldr	r2, [pc, #344]	@ (8006e34 <__ieee754_pow+0xa1c>)
 8006cda:	4b57      	ldr	r3, [pc, #348]	@ (8006e38 <__ieee754_pow+0xa20>)
 8006cdc:	f7fa fb82 	bl	80013e4 <__aeabi_dmul>
 8006ce0:	4a56      	ldr	r2, [pc, #344]	@ (8006e3c <__ieee754_pow+0xa24>)
 8006ce2:	0004      	movs	r4, r0
 8006ce4:	000d      	movs	r5, r1
 8006ce6:	9804      	ldr	r0, [sp, #16]
 8006ce8:	9905      	ldr	r1, [sp, #20]
 8006cea:	4b55      	ldr	r3, [pc, #340]	@ (8006e40 <__ieee754_pow+0xa28>)
 8006cec:	f7fa fb7a 	bl	80013e4 <__aeabi_dmul>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	000b      	movs	r3, r1
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	0029      	movs	r1, r5
 8006cf8:	f7f9 fbcc 	bl	8000494 <__aeabi_dadd>
 8006cfc:	0004      	movs	r4, r0
 8006cfe:	000d      	movs	r5, r1
 8006d00:	0002      	movs	r2, r0
 8006d02:	000b      	movs	r3, r1
 8006d04:	9806      	ldr	r0, [sp, #24]
 8006d06:	9907      	ldr	r1, [sp, #28]
 8006d08:	f7f9 fbc4 	bl	8000494 <__aeabi_dadd>
 8006d0c:	9a06      	ldr	r2, [sp, #24]
 8006d0e:	9b07      	ldr	r3, [sp, #28]
 8006d10:	0006      	movs	r6, r0
 8006d12:	000f      	movs	r7, r1
 8006d14:	f7fa fe2e 	bl	8001974 <__aeabi_dsub>
 8006d18:	0002      	movs	r2, r0
 8006d1a:	000b      	movs	r3, r1
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	0029      	movs	r1, r5
 8006d20:	f7fa fe28 	bl	8001974 <__aeabi_dsub>
 8006d24:	0032      	movs	r2, r6
 8006d26:	9002      	str	r0, [sp, #8]
 8006d28:	9103      	str	r1, [sp, #12]
 8006d2a:	003b      	movs	r3, r7
 8006d2c:	0030      	movs	r0, r6
 8006d2e:	0039      	movs	r1, r7
 8006d30:	f7fa fb58 	bl	80013e4 <__aeabi_dmul>
 8006d34:	0004      	movs	r4, r0
 8006d36:	000d      	movs	r5, r1
 8006d38:	4a42      	ldr	r2, [pc, #264]	@ (8006e44 <__ieee754_pow+0xa2c>)
 8006d3a:	4b43      	ldr	r3, [pc, #268]	@ (8006e48 <__ieee754_pow+0xa30>)
 8006d3c:	f7fa fb52 	bl	80013e4 <__aeabi_dmul>
 8006d40:	4a42      	ldr	r2, [pc, #264]	@ (8006e4c <__ieee754_pow+0xa34>)
 8006d42:	4b43      	ldr	r3, [pc, #268]	@ (8006e50 <__ieee754_pow+0xa38>)
 8006d44:	f7fa fe16 	bl	8001974 <__aeabi_dsub>
 8006d48:	0022      	movs	r2, r4
 8006d4a:	002b      	movs	r3, r5
 8006d4c:	f7fa fb4a 	bl	80013e4 <__aeabi_dmul>
 8006d50:	4a40      	ldr	r2, [pc, #256]	@ (8006e54 <__ieee754_pow+0xa3c>)
 8006d52:	4b41      	ldr	r3, [pc, #260]	@ (8006e58 <__ieee754_pow+0xa40>)
 8006d54:	f7f9 fb9e 	bl	8000494 <__aeabi_dadd>
 8006d58:	0022      	movs	r2, r4
 8006d5a:	002b      	movs	r3, r5
 8006d5c:	f7fa fb42 	bl	80013e4 <__aeabi_dmul>
 8006d60:	4a3e      	ldr	r2, [pc, #248]	@ (8006e5c <__ieee754_pow+0xa44>)
 8006d62:	4b3f      	ldr	r3, [pc, #252]	@ (8006e60 <__ieee754_pow+0xa48>)
 8006d64:	f7fa fe06 	bl	8001974 <__aeabi_dsub>
 8006d68:	0022      	movs	r2, r4
 8006d6a:	002b      	movs	r3, r5
 8006d6c:	f7fa fb3a 	bl	80013e4 <__aeabi_dmul>
 8006d70:	4a3c      	ldr	r2, [pc, #240]	@ (8006e64 <__ieee754_pow+0xa4c>)
 8006d72:	4b3d      	ldr	r3, [pc, #244]	@ (8006e68 <__ieee754_pow+0xa50>)
 8006d74:	f7f9 fb8e 	bl	8000494 <__aeabi_dadd>
 8006d78:	0022      	movs	r2, r4
 8006d7a:	002b      	movs	r3, r5
 8006d7c:	f7fa fb32 	bl	80013e4 <__aeabi_dmul>
 8006d80:	0002      	movs	r2, r0
 8006d82:	000b      	movs	r3, r1
 8006d84:	0030      	movs	r0, r6
 8006d86:	0039      	movs	r1, r7
 8006d88:	f7fa fdf4 	bl	8001974 <__aeabi_dsub>
 8006d8c:	0004      	movs	r4, r0
 8006d8e:	000d      	movs	r5, r1
 8006d90:	0002      	movs	r2, r0
 8006d92:	000b      	movs	r3, r1
 8006d94:	0030      	movs	r0, r6
 8006d96:	0039      	movs	r1, r7
 8006d98:	f7fa fb24 	bl	80013e4 <__aeabi_dmul>
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	9004      	str	r0, [sp, #16]
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	0020      	movs	r0, r4
 8006da6:	0029      	movs	r1, r5
 8006da8:	05db      	lsls	r3, r3, #23
 8006daa:	f7fa fde3 	bl	8001974 <__aeabi_dsub>
 8006dae:	0002      	movs	r2, r0
 8006db0:	000b      	movs	r3, r1
 8006db2:	9804      	ldr	r0, [sp, #16]
 8006db4:	9905      	ldr	r1, [sp, #20]
 8006db6:	f7f9 fed1 	bl	8000b5c <__aeabi_ddiv>
 8006dba:	9a02      	ldr	r2, [sp, #8]
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	0004      	movs	r4, r0
 8006dc0:	000d      	movs	r5, r1
 8006dc2:	0030      	movs	r0, r6
 8006dc4:	0039      	movs	r1, r7
 8006dc6:	f7fa fb0d 	bl	80013e4 <__aeabi_dmul>
 8006dca:	9a02      	ldr	r2, [sp, #8]
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	f7f9 fb61 	bl	8000494 <__aeabi_dadd>
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	000b      	movs	r3, r1
 8006dd6:	0020      	movs	r0, r4
 8006dd8:	0029      	movs	r1, r5
 8006dda:	f7fa fdcb 	bl	8001974 <__aeabi_dsub>
 8006dde:	0032      	movs	r2, r6
 8006de0:	003b      	movs	r3, r7
 8006de2:	f7fa fdc7 	bl	8001974 <__aeabi_dsub>
 8006de6:	0002      	movs	r2, r0
 8006de8:	000b      	movs	r3, r1
 8006dea:	2000      	movs	r0, #0
 8006dec:	491f      	ldr	r1, [pc, #124]	@ (8006e6c <__ieee754_pow+0xa54>)
 8006dee:	f7fa fdc1 	bl	8001974 <__aeabi_dsub>
 8006df2:	9b00      	ldr	r3, [sp, #0]
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	185b      	adds	r3, r3, r1
 8006df8:	151a      	asrs	r2, r3, #20
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	dc06      	bgt.n	8006e0c <__ieee754_pow+0x9f4>
 8006dfe:	9a00      	ldr	r2, [sp, #0]
 8006e00:	f000 f83a 	bl	8006e78 <scalbn>
 8006e04:	9a08      	ldr	r2, [sp, #32]
 8006e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e08:	f7ff fbee 	bl	80065e8 <__ieee754_pow+0x1d0>
 8006e0c:	0019      	movs	r1, r3
 8006e0e:	e7f9      	b.n	8006e04 <__ieee754_pow+0x9ec>
 8006e10:	2300      	movs	r3, #0
 8006e12:	4c16      	ldr	r4, [pc, #88]	@ (8006e6c <__ieee754_pow+0xa54>)
 8006e14:	f7ff fbcb 	bl	80065ae <__ieee754_pow+0x196>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	f7ff fbc7 	bl	80065ae <__ieee754_pow+0x196>
 8006e20:	4090cbff 	.word	0x4090cbff
 8006e24:	3f6f3400 	.word	0x3f6f3400
 8006e28:	4090cc00 	.word	0x4090cc00
 8006e2c:	3fe00000 	.word	0x3fe00000
 8006e30:	3fe62e43 	.word	0x3fe62e43
 8006e34:	fefa39ef 	.word	0xfefa39ef
 8006e38:	3fe62e42 	.word	0x3fe62e42
 8006e3c:	0ca86c39 	.word	0x0ca86c39
 8006e40:	be205c61 	.word	0xbe205c61
 8006e44:	72bea4d0 	.word	0x72bea4d0
 8006e48:	3e663769 	.word	0x3e663769
 8006e4c:	c5d26bf1 	.word	0xc5d26bf1
 8006e50:	3ebbbd41 	.word	0x3ebbbd41
 8006e54:	af25de2c 	.word	0xaf25de2c
 8006e58:	3f11566a 	.word	0x3f11566a
 8006e5c:	16bebd93 	.word	0x16bebd93
 8006e60:	3f66c16c 	.word	0x3f66c16c
 8006e64:	5555553e 	.word	0x5555553e
 8006e68:	3fc55555 	.word	0x3fc55555
 8006e6c:	3ff00000 	.word	0x3ff00000

08006e70 <fabs>:
 8006e70:	0049      	lsls	r1, r1, #1
 8006e72:	084b      	lsrs	r3, r1, #1
 8006e74:	0019      	movs	r1, r3
 8006e76:	4770      	bx	lr

08006e78 <scalbn>:
 8006e78:	004b      	lsls	r3, r1, #1
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	0d5b      	lsrs	r3, r3, #21
 8006e7e:	0014      	movs	r4, r2
 8006e80:	000d      	movs	r5, r1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10f      	bne.n	8006ea6 <scalbn+0x2e>
 8006e86:	004b      	lsls	r3, r1, #1
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	4303      	orrs	r3, r0
 8006e8c:	d012      	beq.n	8006eb4 <scalbn+0x3c>
 8006e8e:	4b23      	ldr	r3, [pc, #140]	@ (8006f1c <scalbn+0xa4>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	f7fa faa7 	bl	80013e4 <__aeabi_dmul>
 8006e96:	4b22      	ldr	r3, [pc, #136]	@ (8006f20 <scalbn+0xa8>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	da0c      	bge.n	8006eb6 <scalbn+0x3e>
 8006e9c:	4a21      	ldr	r2, [pc, #132]	@ (8006f24 <scalbn+0xac>)
 8006e9e:	4b22      	ldr	r3, [pc, #136]	@ (8006f28 <scalbn+0xb0>)
 8006ea0:	f7fa faa0 	bl	80013e4 <__aeabi_dmul>
 8006ea4:	e006      	b.n	8006eb4 <scalbn+0x3c>
 8006ea6:	4a21      	ldr	r2, [pc, #132]	@ (8006f2c <scalbn+0xb4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d108      	bne.n	8006ebe <scalbn+0x46>
 8006eac:	0002      	movs	r2, r0
 8006eae:	000b      	movs	r3, r1
 8006eb0:	f7f9 faf0 	bl	8000494 <__aeabi_dadd>
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	000d      	movs	r5, r1
 8006eb8:	004b      	lsls	r3, r1, #1
 8006eba:	0d5b      	lsrs	r3, r3, #21
 8006ebc:	3b36      	subs	r3, #54	@ 0x36
 8006ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8006f30 <scalbn+0xb8>)
 8006ec0:	4294      	cmp	r4, r2
 8006ec2:	dd0a      	ble.n	8006eda <scalbn+0x62>
 8006ec4:	4c1b      	ldr	r4, [pc, #108]	@ (8006f34 <scalbn+0xbc>)
 8006ec6:	4d1c      	ldr	r5, [pc, #112]	@ (8006f38 <scalbn+0xc0>)
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	da01      	bge.n	8006ed0 <scalbn+0x58>
 8006ecc:	4c19      	ldr	r4, [pc, #100]	@ (8006f34 <scalbn+0xbc>)
 8006ece:	4d1b      	ldr	r5, [pc, #108]	@ (8006f3c <scalbn+0xc4>)
 8006ed0:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <scalbn+0xbc>)
 8006ed2:	4b19      	ldr	r3, [pc, #100]	@ (8006f38 <scalbn+0xc0>)
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	0029      	movs	r1, r5
 8006ed8:	e7e2      	b.n	8006ea0 <scalbn+0x28>
 8006eda:	18e2      	adds	r2, r4, r3
 8006edc:	4b18      	ldr	r3, [pc, #96]	@ (8006f40 <scalbn+0xc8>)
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	dcf0      	bgt.n	8006ec4 <scalbn+0x4c>
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	dd05      	ble.n	8006ef2 <scalbn+0x7a>
 8006ee6:	4b17      	ldr	r3, [pc, #92]	@ (8006f44 <scalbn+0xcc>)
 8006ee8:	0512      	lsls	r2, r2, #20
 8006eea:	402b      	ands	r3, r5
 8006eec:	431a      	orrs	r2, r3
 8006eee:	0011      	movs	r1, r2
 8006ef0:	e7e0      	b.n	8006eb4 <scalbn+0x3c>
 8006ef2:	0013      	movs	r3, r2
 8006ef4:	3335      	adds	r3, #53	@ 0x35
 8006ef6:	da08      	bge.n	8006f0a <scalbn+0x92>
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8006f24 <scalbn+0xac>)
 8006efa:	4d0b      	ldr	r5, [pc, #44]	@ (8006f28 <scalbn+0xb0>)
 8006efc:	2900      	cmp	r1, #0
 8006efe:	da01      	bge.n	8006f04 <scalbn+0x8c>
 8006f00:	4c08      	ldr	r4, [pc, #32]	@ (8006f24 <scalbn+0xac>)
 8006f02:	4d11      	ldr	r5, [pc, #68]	@ (8006f48 <scalbn+0xd0>)
 8006f04:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <scalbn+0xac>)
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <scalbn+0xb0>)
 8006f08:	e7e4      	b.n	8006ed4 <scalbn+0x5c>
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <scalbn+0xcc>)
 8006f0c:	3236      	adds	r2, #54	@ 0x36
 8006f0e:	401d      	ands	r5, r3
 8006f10:	0512      	lsls	r2, r2, #20
 8006f12:	432a      	orrs	r2, r5
 8006f14:	0011      	movs	r1, r2
 8006f16:	4b0d      	ldr	r3, [pc, #52]	@ (8006f4c <scalbn+0xd4>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	e7c1      	b.n	8006ea0 <scalbn+0x28>
 8006f1c:	43500000 	.word	0x43500000
 8006f20:	ffff3cb0 	.word	0xffff3cb0
 8006f24:	c2f8f359 	.word	0xc2f8f359
 8006f28:	01a56e1f 	.word	0x01a56e1f
 8006f2c:	000007ff 	.word	0x000007ff
 8006f30:	0000c350 	.word	0x0000c350
 8006f34:	8800759c 	.word	0x8800759c
 8006f38:	7e37e43c 	.word	0x7e37e43c
 8006f3c:	fe37e43c 	.word	0xfe37e43c
 8006f40:	000007fe 	.word	0x000007fe
 8006f44:	800fffff 	.word	0x800fffff
 8006f48:	81a56e1f 	.word	0x81a56e1f
 8006f4c:	3c900000 	.word	0x3c900000

08006f50 <with_errno>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	000d      	movs	r5, r1
 8006f54:	0016      	movs	r6, r2
 8006f56:	0004      	movs	r4, r0
 8006f58:	f7fe fd72 	bl	8005a40 <__errno>
 8006f5c:	0029      	movs	r1, r5
 8006f5e:	6006      	str	r6, [r0, #0]
 8006f60:	0020      	movs	r0, r4
 8006f62:	bd70      	pop	{r4, r5, r6, pc}

08006f64 <xflow>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	0014      	movs	r4, r2
 8006f68:	001d      	movs	r5, r3
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d002      	beq.n	8006f74 <xflow+0x10>
 8006f6e:	2180      	movs	r1, #128	@ 0x80
 8006f70:	0609      	lsls	r1, r1, #24
 8006f72:	185b      	adds	r3, r3, r1
 8006f74:	9200      	str	r2, [sp, #0]
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	9a00      	ldr	r2, [sp, #0]
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	0029      	movs	r1, r5
 8006f80:	f7fa fa30 	bl	80013e4 <__aeabi_dmul>
 8006f84:	2222      	movs	r2, #34	@ 0x22
 8006f86:	f7ff ffe3 	bl	8006f50 <with_errno>
 8006f8a:	b003      	add	sp, #12
 8006f8c:	bd30      	pop	{r4, r5, pc}

08006f8e <__math_uflow>:
 8006f8e:	2380      	movs	r3, #128	@ 0x80
 8006f90:	b510      	push	{r4, lr}
 8006f92:	2200      	movs	r2, #0
 8006f94:	055b      	lsls	r3, r3, #21
 8006f96:	f7ff ffe5 	bl	8006f64 <xflow>
 8006f9a:	bd10      	pop	{r4, pc}

08006f9c <__math_oflow>:
 8006f9c:	23e0      	movs	r3, #224	@ 0xe0
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	05db      	lsls	r3, r3, #23
 8006fa4:	f7ff ffde 	bl	8006f64 <xflow>
 8006fa8:	bd10      	pop	{r4, pc}
	...

08006fac <__ieee754_sqrt>:
 8006fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fae:	000a      	movs	r2, r1
 8006fb0:	000d      	movs	r5, r1
 8006fb2:	496d      	ldr	r1, [pc, #436]	@ (8007168 <__ieee754_sqrt+0x1bc>)
 8006fb4:	0004      	movs	r4, r0
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	0008      	movs	r0, r1
 8006fba:	b087      	sub	sp, #28
 8006fbc:	4028      	ands	r0, r5
 8006fbe:	4288      	cmp	r0, r1
 8006fc0:	d111      	bne.n	8006fe6 <__ieee754_sqrt+0x3a>
 8006fc2:	0022      	movs	r2, r4
 8006fc4:	002b      	movs	r3, r5
 8006fc6:	0020      	movs	r0, r4
 8006fc8:	0029      	movs	r1, r5
 8006fca:	f7fa fa0b 	bl	80013e4 <__aeabi_dmul>
 8006fce:	0002      	movs	r2, r0
 8006fd0:	000b      	movs	r3, r1
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	0029      	movs	r1, r5
 8006fd6:	f7f9 fa5d 	bl	8000494 <__aeabi_dadd>
 8006fda:	0004      	movs	r4, r0
 8006fdc:	000d      	movs	r5, r1
 8006fde:	0020      	movs	r0, r4
 8006fe0:	0029      	movs	r1, r5
 8006fe2:	b007      	add	sp, #28
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	dc11      	bgt.n	800700e <__ieee754_sqrt+0x62>
 8006fea:	0069      	lsls	r1, r5, #1
 8006fec:	0849      	lsrs	r1, r1, #1
 8006fee:	4321      	orrs	r1, r4
 8006ff0:	d0f5      	beq.n	8006fde <__ieee754_sqrt+0x32>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	4285      	cmp	r5, r0
 8006ff6:	d010      	beq.n	800701a <__ieee754_sqrt+0x6e>
 8006ff8:	0022      	movs	r2, r4
 8006ffa:	002b      	movs	r3, r5
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	0029      	movs	r1, r5
 8007000:	f7fa fcb8 	bl	8001974 <__aeabi_dsub>
 8007004:	0002      	movs	r2, r0
 8007006:	000b      	movs	r3, r1
 8007008:	f7f9 fda8 	bl	8000b5c <__aeabi_ddiv>
 800700c:	e7e5      	b.n	8006fda <__ieee754_sqrt+0x2e>
 800700e:	1528      	asrs	r0, r5, #20
 8007010:	d115      	bne.n	800703e <__ieee754_sqrt+0x92>
 8007012:	2480      	movs	r4, #128	@ 0x80
 8007014:	2100      	movs	r1, #0
 8007016:	0364      	lsls	r4, r4, #13
 8007018:	e007      	b.n	800702a <__ieee754_sqrt+0x7e>
 800701a:	0ada      	lsrs	r2, r3, #11
 800701c:	3815      	subs	r0, #21
 800701e:	055b      	lsls	r3, r3, #21
 8007020:	2a00      	cmp	r2, #0
 8007022:	d0fa      	beq.n	800701a <__ieee754_sqrt+0x6e>
 8007024:	e7f5      	b.n	8007012 <__ieee754_sqrt+0x66>
 8007026:	0052      	lsls	r2, r2, #1
 8007028:	3101      	adds	r1, #1
 800702a:	4222      	tst	r2, r4
 800702c:	d0fb      	beq.n	8007026 <__ieee754_sqrt+0x7a>
 800702e:	1e4c      	subs	r4, r1, #1
 8007030:	1b00      	subs	r0, r0, r4
 8007032:	2420      	movs	r4, #32
 8007034:	001d      	movs	r5, r3
 8007036:	1a64      	subs	r4, r4, r1
 8007038:	40e5      	lsrs	r5, r4
 800703a:	408b      	lsls	r3, r1
 800703c:	432a      	orrs	r2, r5
 800703e:	494b      	ldr	r1, [pc, #300]	@ (800716c <__ieee754_sqrt+0x1c0>)
 8007040:	0312      	lsls	r2, r2, #12
 8007042:	1844      	adds	r4, r0, r1
 8007044:	2180      	movs	r1, #128	@ 0x80
 8007046:	0b12      	lsrs	r2, r2, #12
 8007048:	0349      	lsls	r1, r1, #13
 800704a:	4311      	orrs	r1, r2
 800704c:	07c0      	lsls	r0, r0, #31
 800704e:	d403      	bmi.n	8007058 <__ieee754_sqrt+0xac>
 8007050:	0fda      	lsrs	r2, r3, #31
 8007052:	0049      	lsls	r1, r1, #1
 8007054:	1851      	adds	r1, r2, r1
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	2500      	movs	r5, #0
 800705a:	1062      	asrs	r2, r4, #1
 800705c:	0049      	lsls	r1, r1, #1
 800705e:	2480      	movs	r4, #128	@ 0x80
 8007060:	9205      	str	r2, [sp, #20]
 8007062:	0fda      	lsrs	r2, r3, #31
 8007064:	1852      	adds	r2, r2, r1
 8007066:	2016      	movs	r0, #22
 8007068:	0029      	movs	r1, r5
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	03a4      	lsls	r4, r4, #14
 800706e:	190e      	adds	r6, r1, r4
 8007070:	4296      	cmp	r6, r2
 8007072:	dc02      	bgt.n	800707a <__ieee754_sqrt+0xce>
 8007074:	1931      	adds	r1, r6, r4
 8007076:	1b92      	subs	r2, r2, r6
 8007078:	192d      	adds	r5, r5, r4
 800707a:	0fde      	lsrs	r6, r3, #31
 800707c:	0052      	lsls	r2, r2, #1
 800707e:	3801      	subs	r0, #1
 8007080:	1992      	adds	r2, r2, r6
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	0864      	lsrs	r4, r4, #1
 8007086:	2800      	cmp	r0, #0
 8007088:	d1f1      	bne.n	800706e <__ieee754_sqrt+0xc2>
 800708a:	2620      	movs	r6, #32
 800708c:	2780      	movs	r7, #128	@ 0x80
 800708e:	0004      	movs	r4, r0
 8007090:	9604      	str	r6, [sp, #16]
 8007092:	063f      	lsls	r7, r7, #24
 8007094:	19c6      	adds	r6, r0, r7
 8007096:	46b4      	mov	ip, r6
 8007098:	4291      	cmp	r1, r2
 800709a:	db02      	blt.n	80070a2 <__ieee754_sqrt+0xf6>
 800709c:	d114      	bne.n	80070c8 <__ieee754_sqrt+0x11c>
 800709e:	429e      	cmp	r6, r3
 80070a0:	d812      	bhi.n	80070c8 <__ieee754_sqrt+0x11c>
 80070a2:	4660      	mov	r0, ip
 80070a4:	4666      	mov	r6, ip
 80070a6:	19c0      	adds	r0, r0, r7
 80070a8:	9100      	str	r1, [sp, #0]
 80070aa:	2e00      	cmp	r6, #0
 80070ac:	da03      	bge.n	80070b6 <__ieee754_sqrt+0x10a>
 80070ae:	43c6      	mvns	r6, r0
 80070b0:	0ff6      	lsrs	r6, r6, #31
 80070b2:	198e      	adds	r6, r1, r6
 80070b4:	9600      	str	r6, [sp, #0]
 80070b6:	1a52      	subs	r2, r2, r1
 80070b8:	4563      	cmp	r3, ip
 80070ba:	4189      	sbcs	r1, r1
 80070bc:	4249      	negs	r1, r1
 80070be:	1a52      	subs	r2, r2, r1
 80070c0:	4661      	mov	r1, ip
 80070c2:	1a5b      	subs	r3, r3, r1
 80070c4:	9900      	ldr	r1, [sp, #0]
 80070c6:	19e4      	adds	r4, r4, r7
 80070c8:	0fde      	lsrs	r6, r3, #31
 80070ca:	0052      	lsls	r2, r2, #1
 80070cc:	1992      	adds	r2, r2, r6
 80070ce:	9e04      	ldr	r6, [sp, #16]
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	3e01      	subs	r6, #1
 80070d4:	087f      	lsrs	r7, r7, #1
 80070d6:	9604      	str	r6, [sp, #16]
 80070d8:	2e00      	cmp	r6, #0
 80070da:	d1db      	bne.n	8007094 <__ieee754_sqrt+0xe8>
 80070dc:	431a      	orrs	r2, r3
 80070de:	d01f      	beq.n	8007120 <__ieee754_sqrt+0x174>
 80070e0:	4e23      	ldr	r6, [pc, #140]	@ (8007170 <__ieee754_sqrt+0x1c4>)
 80070e2:	4f24      	ldr	r7, [pc, #144]	@ (8007174 <__ieee754_sqrt+0x1c8>)
 80070e4:	6830      	ldr	r0, [r6, #0]
 80070e6:	6871      	ldr	r1, [r6, #4]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	9200      	str	r2, [sp, #0]
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	6832      	ldr	r2, [r6, #0]
 80070f2:	6873      	ldr	r3, [r6, #4]
 80070f4:	9202      	str	r2, [sp, #8]
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	9a00      	ldr	r2, [sp, #0]
 80070fa:	9b01      	ldr	r3, [sp, #4]
 80070fc:	f7fa fc3a 	bl	8001974 <__aeabi_dsub>
 8007100:	0002      	movs	r2, r0
 8007102:	000b      	movs	r3, r1
 8007104:	9802      	ldr	r0, [sp, #8]
 8007106:	9903      	ldr	r1, [sp, #12]
 8007108:	f7f9 f9a6 	bl	8000458 <__aeabi_dcmple>
 800710c:	2800      	cmp	r0, #0
 800710e:	d007      	beq.n	8007120 <__ieee754_sqrt+0x174>
 8007110:	6830      	ldr	r0, [r6, #0]
 8007112:	6871      	ldr	r1, [r6, #4]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	1c67      	adds	r7, r4, #1
 800711a:	d10f      	bne.n	800713c <__ieee754_sqrt+0x190>
 800711c:	9c04      	ldr	r4, [sp, #16]
 800711e:	3501      	adds	r5, #1
 8007120:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <__ieee754_sqrt+0x1cc>)
 8007122:	106a      	asrs	r2, r5, #1
 8007124:	18d2      	adds	r2, r2, r3
 8007126:	0863      	lsrs	r3, r4, #1
 8007128:	07ed      	lsls	r5, r5, #31
 800712a:	d502      	bpl.n	8007132 <__ieee754_sqrt+0x186>
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	0609      	lsls	r1, r1, #24
 8007130:	430b      	orrs	r3, r1
 8007132:	9905      	ldr	r1, [sp, #20]
 8007134:	001c      	movs	r4, r3
 8007136:	0509      	lsls	r1, r1, #20
 8007138:	188d      	adds	r5, r1, r2
 800713a:	e750      	b.n	8006fde <__ieee754_sqrt+0x32>
 800713c:	f7f9 f9aa 	bl	8000494 <__aeabi_dadd>
 8007140:	6877      	ldr	r7, [r6, #4]
 8007142:	6836      	ldr	r6, [r6, #0]
 8007144:	0002      	movs	r2, r0
 8007146:	000b      	movs	r3, r1
 8007148:	0030      	movs	r0, r6
 800714a:	0039      	movs	r1, r7
 800714c:	f7f9 f97a 	bl	8000444 <__aeabi_dcmplt>
 8007150:	2800      	cmp	r0, #0
 8007152:	d004      	beq.n	800715e <__ieee754_sqrt+0x1b2>
 8007154:	3402      	adds	r4, #2
 8007156:	4263      	negs	r3, r4
 8007158:	4163      	adcs	r3, r4
 800715a:	18ed      	adds	r5, r5, r3
 800715c:	e7e0      	b.n	8007120 <__ieee754_sqrt+0x174>
 800715e:	2301      	movs	r3, #1
 8007160:	3401      	adds	r4, #1
 8007162:	439c      	bics	r4, r3
 8007164:	e7dc      	b.n	8007120 <__ieee754_sqrt+0x174>
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	7ff00000 	.word	0x7ff00000
 800716c:	fffffc01 	.word	0xfffffc01
 8007170:	20000068 	.word	0x20000068
 8007174:	20000060 	.word	0x20000060
 8007178:	3fe00000 	.word	0x3fe00000

0800717c <_init>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr

08007188 <_fini>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	46c0      	nop			@ (mov r8, r8)
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr
